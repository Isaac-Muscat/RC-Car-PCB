
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019860  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08019b00  08019b00  0001ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a234  0801a234  0001b234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a23c  0801a23c  0001b23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a240  0801a240  0001b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000380  24000000  0801a244  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002ad24  24000380  0801a5c4  0001c380  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2402b0a4  0801a5c4  0001d0a4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001c380  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e28c  00000000  00000000  0001c3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005788  00000000  00000000  0004a63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002008  00000000  00000000  0004fdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000018c1  00000000  00000000  00051dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e269  00000000  00000000  00053691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002d4ad  00000000  00000000  000918fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178c41  00000000  00000000  000beda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002379e8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008e14  00000000  00000000  00237a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00240840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000380 	.word	0x24000380
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08019ae8 	.word	0x08019ae8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000384 	.word	0x24000384
 80002dc:	08019ae8 	.word	0x08019ae8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f001 f9b1 	bl	8001a28 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f002 fa25 	bl	8002b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f91f 	bl	800090c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f997 	bl	8000a00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fc17 	bl	8000f04 <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fbf5 	bl	8000ec4 <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fba3 	bl	8000e24 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fb4f 	bl	8000d80 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f017 fff7 	bl	80186d4 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 fae1 	bl	8000cac <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 fa5f 	bl	8000bac <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 faf1 	bl	8000cd4 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 f9cf 	bl	8000a94 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fa99 	bl	8000c2c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	496b      	ldr	r1, [pc, #428]	@ (80008ac <main+0x1f0>)
 80006fe:	486c      	ldr	r0, [pc, #432]	@ (80008b0 <main+0x1f4>)
 8000700:	f002 fe86 	bl	8003410 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]

	hssd1.i2c_handle = &hi2c2;
 8000708:	4b6a      	ldr	r3, [pc, #424]	@ (80008b4 <main+0x1f8>)
 800070a:	4a6b      	ldr	r2, [pc, #428]	@ (80008b8 <main+0x1fc>)
 800070c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800070e:	4b69      	ldr	r3, [pc, #420]	@ (80008b4 <main+0x1f8>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000714:	4b67      	ldr	r3, [pc, #412]	@ (80008b4 <main+0x1f8>)
 8000716:	4a69      	ldr	r2, [pc, #420]	@ (80008bc <main+0x200>)
 8000718:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800071a:	4866      	ldr	r0, [pc, #408]	@ (80008b4 <main+0x1f8>)
 800071c:	f001 ff60 	bl	80025e0 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	461a      	mov	r2, r3
 800072e:	4964      	ldr	r1, [pc, #400]	@ (80008c0 <main+0x204>)
 8000730:	4864      	ldr	r0, [pc, #400]	@ (80008c4 <main+0x208>)
 8000732:	f018 fddf 	bl	80192f4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	4863      	ldr	r0, [pc, #396]	@ (80008c4 <main+0x208>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	4860      	ldr	r0, [pc, #384]	@ (80008c4 <main+0x208>)
 8000742:	f018 f8a1 	bl	8018888 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f002 fa75 	bl	8002c38 <HAL_Delay>
		while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
		}
	}

	hssd2.i2c_handle = &hi2c1;
 8000752:	4b5d      	ldr	r3, [pc, #372]	@ (80008c8 <main+0x20c>)
 8000754:	4a5d      	ldr	r2, [pc, #372]	@ (80008cc <main+0x210>)
 8000756:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000758:	4b5b      	ldr	r3, [pc, #364]	@ (80008c8 <main+0x20c>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 800075e:	4b5a      	ldr	r3, [pc, #360]	@ (80008c8 <main+0x20c>)
 8000760:	4a5b      	ldr	r2, [pc, #364]	@ (80008d0 <main+0x214>)
 8000762:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 8000764:	4858      	ldr	r0, [pc, #352]	@ (80008c8 <main+0x20c>)
 8000766:	f001 ff3b 	bl	80025e0 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	461a      	mov	r2, r3
 8000778:	4956      	ldr	r1, [pc, #344]	@ (80008d4 <main+0x218>)
 800077a:	4852      	ldr	r0, [pc, #328]	@ (80008c4 <main+0x208>)
 800077c:	f018 fdba 	bl	80192f4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	4850      	ldr	r0, [pc, #320]	@ (80008c4 <main+0x208>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	484e      	ldr	r0, [pc, #312]	@ (80008c4 <main+0x208>)
 800078c:	f018 f87c 	bl	8018888 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f002 fa50 	bl	8002c38 <HAL_Delay>
		while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
		}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 800079c:	4b4e      	ldr	r3, [pc, #312]	@ (80008d8 <main+0x21c>)
 800079e:	4a4f      	ldr	r2, [pc, #316]	@ (80008dc <main+0x220>)
 80007a0:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 80007a2:	4b4d      	ldr	r3, [pc, #308]	@ (80008d8 <main+0x21c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007a8:	4b4b      	ldr	r3, [pc, #300]	@ (80008d8 <main+0x21c>)
 80007aa:	4a4d      	ldr	r2, [pc, #308]	@ (80008e0 <main+0x224>)
 80007ac:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	@ (80008d8 <main+0x21c>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007b4:	4b48      	ldr	r3, [pc, #288]	@ (80008d8 <main+0x21c>)
 80007b6:	4a4b      	ldr	r2, [pc, #300]	@ (80008e4 <main+0x228>)
 80007b8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007ba:	4847      	ldr	r0, [pc, #284]	@ (80008d8 <main+0x21c>)
 80007bc:	f002 f854 	bl	8002868 <ST7789_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <main+0x136>
		while (1) {
			sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4946      	ldr	r1, [pc, #280]	@ (80008e8 <main+0x22c>)
 80007d0:	483c      	ldr	r0, [pc, #240]	@ (80008c4 <main+0x208>)
 80007d2:	f018 fd8f 	bl	80192f4 <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007d6:	483b      	ldr	r0, [pc, #236]	@ (80008c4 <main+0x208>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	4619      	mov	r1, r3
 80007e0:	4838      	ldr	r0, [pc, #224]	@ (80008c4 <main+0x208>)
 80007e2:	f018 f851 	bl	8018888 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f002 fa25 	bl	8002c38 <HAL_Delay>
		while (1) {
 80007ee:	bf00      	nop
 80007f0:	e7eb      	b.n	80007ca <main+0x10e>
		}
	}

	// Clear the screen
	ST7789_Clear(&hst7789, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4838      	ldr	r0, [pc, #224]	@ (80008d8 <main+0x21c>)
 80007f6:	f002 f8e2 	bl	80029be <ST7789_Clear>
	ST7789_UpdateSector(&hst7789, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	4836      	ldr	r0, [pc, #216]	@ (80008d8 <main+0x21c>)
 80007fe:	f002 f8f1 	bl	80029e4 <ST7789_UpdateSector>
	HAL_Delay(50);
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f002 fa18 	bl	8002c38 <HAL_Delay>
	ST7789_UpdateSector(&hst7789, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	4833      	ldr	r0, [pc, #204]	@ (80008d8 <main+0x21c>)
 800080c:	f002 f8ea 	bl	80029e4 <ST7789_UpdateSector>

	// ------------------------------------------------------------ SETUP MENU -- //
	hmenu.ssdL_handle = &hssd1;
 8000810:	4b36      	ldr	r3, [pc, #216]	@ (80008ec <main+0x230>)
 8000812:	4a28      	ldr	r2, [pc, #160]	@ (80008b4 <main+0x1f8>)
 8000814:	601a      	str	r2, [r3, #0]
	hmenu.ssdR_handle = &hssd2;
 8000816:	4b35      	ldr	r3, [pc, #212]	@ (80008ec <main+0x230>)
 8000818:	4a2b      	ldr	r2, [pc, #172]	@ (80008c8 <main+0x20c>)
 800081a:	605a      	str	r2, [r3, #4]
	hmenu.page_anim = 0;
 800081c:	4b33      	ldr	r3, [pc, #204]	@ (80008ec <main+0x230>)
 800081e:	2200      	movs	r2, #0
 8000820:	745a      	strb	r2, [r3, #17]
	MENU_Init(&hmenu);
 8000822:	4832      	ldr	r0, [pc, #200]	@ (80008ec <main+0x230>)
 8000824:	f015 fa08 	bl	8015c38 <MENU_Init>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000828:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <main+0x234>)
 800082a:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <main+0x238>)
 800082c:	4610      	mov	r0, r2
 800082e:	4619      	mov	r1, r3
 8000830:	f240 230e 	movw	r3, #526	@ 0x20e
 8000834:	461a      	mov	r2, r3
 8000836:	f018 fdcb 	bl	80193d0 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 800083a:	4a2f      	ldr	r2, [pc, #188]	@ (80008f8 <main+0x23c>)
 800083c:	4b2d      	ldr	r3, [pc, #180]	@ (80008f4 <main+0x238>)
 800083e:	4610      	mov	r0, r2
 8000840:	4619      	mov	r1, r3
 8000842:	f240 230e 	movw	r3, #526	@ 0x20e
 8000846:	461a      	mov	r2, r3
 8000848:	f018 fdc2 	bl	80193d0 <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 800084c:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <main+0x240>)
 800084e:	4a2c      	ldr	r2, [pc, #176]	@ (8000900 <main+0x244>)
 8000850:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 8000852:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <main+0x240>)
 8000854:	2205      	movs	r2, #5
 8000856:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 8000858:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <main+0x240>)
 800085a:	2205      	movs	r2, #5
 800085c:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 8000860:	4826      	ldr	r0, [pc, #152]	@ (80008fc <main+0x240>)
 8000862:	f015 f834 	bl	80158ce <XBEE_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00e      	beq.n	800088a <main+0x1ce>
		sprintf(ssd_msg, " Failed to Init XBEE");
 800086c:	4925      	ldr	r1, [pc, #148]	@ (8000904 <main+0x248>)
 800086e:	4826      	ldr	r0, [pc, #152]	@ (8000908 <main+0x24c>)
 8000870:	f018 fd40 	bl	80192f4 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8000874:	4824      	ldr	r0, [pc, #144]	@ (8000908 <main+0x24c>)
 8000876:	f7ff fd33 	bl	80002e0 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	4821      	ldr	r0, [pc, #132]	@ (8000908 <main+0x24c>)
 8000882:	f001 f8ab 	bl	80019dc <WriteDebug>
		while (1) { }
 8000886:	bf00      	nop
 8000888:	e7fd      	b.n	8000886 <main+0x1ca>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();		// Process any incoming packets
 800088a:	f000 fbeb 	bl	8001064 <SCH_XBeeRX>
		SCH_ImageDecode();	// Decode pending MCU blocks
 800088e:	f000 fc83 	bl	8001198 <SCH_ImageDecode>
		SCH_OLEDUpdate();	// Update the OLEDs
 8000892:	f000 fd53 	bl	800133c <SCH_OLEDUpdate>
		SCH_GetInputs();	// Get user inputs
 8000896:	f000 fd85 	bl	80013a4 <SCH_GetInputs>

		if (hst7789.spi_state == 0)
 800089a:	4b0f      	ldr	r3, [pc, #60]	@ (80008d8 <main+0x21c>)
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1f3      	bne.n	800088a <main+0x1ce>
			ST7789_UpdateAutomatic(&hst7789);
 80008a2:	480d      	ldr	r0, [pc, #52]	@ (80008d8 <main+0x21c>)
 80008a4:	f002 f8fe 	bl	8002aa4 <ST7789_UpdateAutomatic>
		SCH_XBeeRX();		// Process any incoming packets
 80008a8:	e7ef      	b.n	800088a <main+0x1ce>
 80008aa:	bf00      	nop
 80008ac:	24026a88 	.word	0x24026a88
 80008b0:	2400039c 	.word	0x2400039c
 80008b4:	24000968 	.word	0x24000968
 80008b8:	240004cc 	.word	0x240004cc
 80008bc:	24000990 	.word	0x24000990
 80008c0:	08019b00 	.word	0x08019b00
 80008c4:	240011f4 	.word	0x240011f4
 80008c8:	2400097c 	.word	0x2400097c
 80008cc:	24000478 	.word	0x24000478
 80008d0:	24000d90 	.word	0x24000d90
 80008d4:	08019b1c 	.word	0x08019b1c
 80008d8:	24001270 	.word	0x24001270
 80008dc:	24000740 	.word	0x24000740
 80008e0:	58021000 	.word	0x58021000
 80008e4:	24001288 	.word	0x24001288
 80008e8:	08019b38 	.word	0x08019b38
 80008ec:	24001258 	.word	0x24001258
 80008f0:	24026ae4 	.word	0x24026ae4
 80008f4:	2400001c 	.word	0x2400001c
 80008f8:	24027864 	.word	0x24027864
 80008fc:	24026abc 	.word	0x24026abc
 8000900:	24000840 	.word	0x24000840
 8000904:	08019b54 	.word	0x08019b54
 8000908:	24001190 	.word	0x24001190

0800090c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	@ 0x70
 8000910:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000916:	224c      	movs	r2, #76	@ 0x4c
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f018 fd0c 	bl	8019338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2220      	movs	r2, #32
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f018 fd06 	bl	8019338 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800092c:	2002      	movs	r0, #2
 800092e:	f00c ffaf 	bl	800d890 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <SystemClock_Config+0xec>)
 8000938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800093a:	4a2f      	ldr	r2, [pc, #188]	@ (80009f8 <SystemClock_Config+0xec>)
 800093c:	f023 0301 	bic.w	r3, r3, #1
 8000940:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000942:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <SystemClock_Config+0xec>)
 8000944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	4b2b      	ldr	r3, [pc, #172]	@ (80009fc <SystemClock_Config+0xf0>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a2a      	ldr	r2, [pc, #168]	@ (80009fc <SystemClock_Config+0xf0>)
 8000952:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <SystemClock_Config+0xf0>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000964:	bf00      	nop
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <SystemClock_Config+0xf0>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000972:	d1f8      	bne.n	8000966 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000978:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097e:	2302      	movs	r3, #2
 8000980:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000982:	2302      	movs	r3, #2
 8000984:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800098a:	2318      	movs	r3, #24
 800098c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800098e:	2302      	movs	r3, #2
 8000990:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000992:	2306      	movs	r3, #6
 8000994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800099a:	230c      	movs	r3, #12
 800099c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800099e:	2300      	movs	r3, #0
 80009a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009aa:	4618      	mov	r0, r3
 80009ac:	f00c ffba 	bl	800d924 <HAL_RCC_OscConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009b6:	f001 f863 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ba:	233f      	movs	r3, #63	@ 0x3f
 80009bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	2303      	movs	r3, #3
 80009c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ce:	2340      	movs	r3, #64	@ 0x40
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	2102      	movs	r1, #2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f00d fbf9 	bl	800e1d8 <HAL_RCC_ClockConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009ec:	f001 f848 	bl	8001a80 <Error_Handler>
  }
}
 80009f0:	bf00      	nop
 80009f2:	3770      	adds	r7, #112	@ 0x70
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	58000400 	.word	0x58000400
 80009fc:	58024800 	.word	0x58024800

08000a00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0b0      	sub	sp, #192	@ 0xc0
 8000a04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	22c0      	movs	r2, #192	@ 0xc0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f018 fc93 	bl	8019338 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 8000a12:	4a1f      	ldr	r2, [pc, #124]	@ (8000a90 <PeriphCommonClock_Config+0x90>)
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000a20:	2380      	movs	r3, #128	@ 0x80
 8000a22:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000a24:	2314      	movs	r3, #20
 8000a26:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000a40:	230c      	movs	r3, #12
 8000a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000a60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a64:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00d ff3a 	bl	800e8f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <PeriphCommonClock_Config+0x86>
  {
    Error_Handler();
 8000a82:	f000 fffd 	bl	8001a80 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	37c0      	adds	r7, #192	@ 0xc0
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	00082008 	.word	0x00082008

08000a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ab8:	4b38      	ldr	r3, [pc, #224]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000aba:	4a39      	ldr	r2, [pc, #228]	@ (8000ba0 <MX_ADC1_Init+0x10c>)
 8000abc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ac0:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000ac4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000acc:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000afc:	4b27      	ldr	r3, [pc, #156]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000afe:	2203      	movs	r2, #3
 8000b00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b1c:	481f      	ldr	r0, [pc, #124]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b1e:	f002 fad5 	bl	80030cc <HAL_ADC_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b28:	f000 ffaa 	bl	8001a80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b38:	f003 fa82 	bl	8004040 <HAL_ADCEx_MultiModeConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b42:	f000 ff9d 	bl	8001a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b46:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_ADC1_Init+0x110>)
 8000b48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b4e:	2307      	movs	r3, #7
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b52:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b6a:	f002 fd29 	bl	80035c0 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b74:	f000 ff84 	bl	8001a80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_ADC1_Init+0x114>)
 8000b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_ADC1_Init+0x108>)
 8000b86:	f002 fd1b 	bl	80035c0 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b90:	f000 ff76 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2400039c 	.word	0x2400039c
 8000ba0:	40022000 	.word	0x40022000
 8000ba4:	0c900008 	.word	0x0c900008
 8000ba8:	10c00010 	.word	0x10c00010

08000bac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <MX_I2C1_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <MX_I2C1_Init+0x7c>)
 8000bba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bbc:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000be8:	f006 fcc8 	bl	800757c <HAL_I2C_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bf2:	f000 ff45 	bl	8001a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000bfa:	f009 f8f9 	bl	8009df0 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c04:	f000 ff3c 	bl	8001a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_I2C1_Init+0x74>)
 8000c0c:	f009 f93b 	bl	8009e86 <HAL_I2CEx_ConfigDigitalFilter>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 ff33 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	24000478 	.word	0x24000478
 8000c24:	40005400 	.word	0x40005400
 8000c28:	00401959 	.word	0x00401959

08000c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ca4 <MX_I2C2_Init+0x78>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <MX_I2C2_Init+0x7c>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c54:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c66:	480e      	ldr	r0, [pc, #56]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c68:	f006 fc88 	bl	800757c <HAL_I2C_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c72:	f000 ff05 	bl	8001a80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	4809      	ldr	r0, [pc, #36]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c7a:	f009 f8b9 	bl	8009df0 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c84:	f000 fefc 	bl	8001a80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4805      	ldr	r0, [pc, #20]	@ (8000ca0 <MX_I2C2_Init+0x74>)
 8000c8c:	f009 f8fb 	bl	8009e86 <HAL_I2CEx_ConfigDigitalFilter>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c96:	f000 fef3 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	240004cc 	.word	0x240004cc
 8000ca4:	40005800 	.word	0x40005800
 8000ca8:	00401959 	.word	0x00401959

08000cac <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_JPEG_Init+0x20>)
 8000cb2:	4a07      	ldr	r2, [pc, #28]	@ (8000cd0 <MX_JPEG_Init+0x24>)
 8000cb4:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_JPEG_Init+0x20>)
 8000cb8:	f009 f932 	bl	8009f20 <HAL_JPEG_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000cc2:	f000 fedd 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	24000610 	.word	0x24000610
 8000cd0:	52003000 	.word	0x52003000

08000cd4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000cda:	4a28      	ldr	r2, [pc, #160]	@ (8000d7c <MX_SPI4_Init+0xa8>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cde:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000ce0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ce4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000ce6:	4b24      	ldr	r3, [pc, #144]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000ce8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cec:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cee:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d02:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d06:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d2c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d2e:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d34:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d40:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d46:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <MX_SPI4_Init+0xa4>)
 8000d66:	f010 fac1 	bl	80112ec <HAL_SPI_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d70:	f000 fe86 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	24000740 	.word	0x24000740
 8000d7c:	40013400 	.word	0x40013400

08000d80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000d86:	4a25      	ldr	r2, [pc, #148]	@ (8000e1c <MX_USART1_UART_Init+0x9c>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000d8a:	4b23      	ldr	r3, [pc, #140]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000d8c:	4a24      	ldr	r2, [pc, #144]	@ (8000e20 <MX_USART1_UART_Init+0xa0>)
 8000d8e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d90:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d96:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000da4:	220c      	movs	r2, #12
 8000da6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000dc2:	2220      	movs	r2, #32
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dcc:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dce:	4812      	ldr	r0, [pc, #72]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000dd0:	f011 fa37 	bl	8012242 <HAL_UART_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000dda:	f000 fe51 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dde:	2100      	movs	r1, #0
 8000de0:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000de2:	f013 f952 	bl	801408a <HAL_UARTEx_SetTxFifoThreshold>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000dec:	f000 fe48 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4809      	ldr	r0, [pc, #36]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000df4:	f013 f987 	bl	8014106 <HAL_UARTEx_SetRxFifoThreshold>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000dfe:	f000 fe3f 	bl	8001a80 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	@ (8000e18 <MX_USART1_UART_Init+0x98>)
 8000e04:	f013 f906 	bl	8014014 <HAL_UARTEx_EnableFifoMode>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000e0e:	f000 fe37 	bl	8001a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	24000840 	.word	0x24000840
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	0001b207 	.word	0x0001b207

08000e24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2a:	4b25      	ldr	r3, [pc, #148]	@ (8000ec0 <MX_DMA_Init+0x9c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e30:	4a23      	ldr	r2, [pc, #140]	@ (8000ec0 <MX_DMA_Init+0x9c>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e3a:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <MX_DMA_Init+0x9c>)
 8000e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e48:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_DMA_Init+0x9c>)
 8000e4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec0 <MX_DMA_Init+0x9c>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e58:	4b19      	ldr	r3, [pc, #100]	@ (8000ec0 <MX_DMA_Init+0x9c>)
 8000e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	200b      	movs	r0, #11
 8000e6c:	f003 faa1 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e70:	200b      	movs	r0, #11
 8000e72:	f003 fab8 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	200c      	movs	r0, #12
 8000e7c:	f003 fa99 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e80:	200c      	movs	r0, #12
 8000e82:	f003 fab0 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2100      	movs	r1, #0
 8000e8a:	200d      	movs	r0, #13
 8000e8c:	f003 fa91 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e90:	200d      	movs	r0, #13
 8000e92:	f003 faa8 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2100      	movs	r1, #0
 8000e9a:	200e      	movs	r0, #14
 8000e9c:	f003 fa89 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ea0:	200e      	movs	r0, #14
 8000ea2:	f003 faa0 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2038      	movs	r0, #56	@ 0x38
 8000eac:	f003 fa81 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eb0:	2038      	movs	r0, #56	@ 0x38
 8000eb2:	f003 fa98 	bl	80043e6 <HAL_NVIC_EnableIRQ>

}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	58024400 	.word	0x58024400

08000ec4 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <MX_MDMA_Init+0x3c>)
 8000ecc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f00 <MX_MDMA_Init+0x3c>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_MDMA_Init+0x3c>)
 8000edc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	207a      	movs	r0, #122	@ 0x7a
 8000eee:	f003 fa60 	bl	80043b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ef2:	207a      	movs	r0, #122	@ 0x7a
 8000ef4:	f003 fa77 	bl	80043e6 <HAL_NVIC_EnableIRQ>

}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58024400 	.word	0x58024400

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	@ 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f38:	4b46      	ldr	r3, [pc, #280]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	4a45      	ldr	r2, [pc, #276]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f48:	4b42      	ldr	r3, [pc, #264]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b3f      	ldr	r3, [pc, #252]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a3d      	ldr	r2, [pc, #244]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b3b      	ldr	r3, [pc, #236]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f74:	4b37      	ldr	r3, [pc, #220]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	4a36      	ldr	r2, [pc, #216]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f84:	4b33      	ldr	r3, [pc, #204]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b30      	ldr	r3, [pc, #192]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f98:	4a2e      	ldr	r2, [pc, #184]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	@ (8001054 <MX_GPIO_Init+0x150>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	603b      	str	r3, [r7, #0]
 8000fae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	4828      	ldr	r0, [pc, #160]	@ (8001058 <MX_GPIO_Init+0x154>)
 8000fb6:	f006 fac7 	bl	8007548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc0:	4826      	ldr	r0, [pc, #152]	@ (800105c <MX_GPIO_Init+0x158>)
 8000fc2:	f006 fac1 	bl	8007548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481e      	ldr	r0, [pc, #120]	@ (8001058 <MX_GPIO_Init+0x154>)
 8000fde:	f006 f8eb 	bl	80071b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LB_Pin */
  GPIO_InitStruct.Pin = BTN_LB_Pin;
 8000fe2:	2320      	movs	r3, #32
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_LB_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	481a      	ldr	r0, [pc, #104]	@ (8001060 <MX_GPIO_Init+0x15c>)
 8000ff6:	f006 f8df 	bl	80071b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RB_Pin */
  GPIO_InitStruct.Pin = BTN_RB_Pin;
 8000ffa:	2320      	movs	r3, #32
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_RB_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	@ (800105c <MX_GPIO_Init+0x158>)
 800100e:	f006 f8d3 	bl	80071b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LF_Pin BTN_RF_Pin */
  GPIO_InitStruct.Pin = BTN_LF_Pin|BTN_RF_Pin;
 8001012:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <MX_GPIO_Init+0x158>)
 8001028:	f006 f8c6 	bl	80071b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 800102c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_GPIO_Init+0x158>)
 8001046:	f006 f8b7 	bl	80071b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	58024400 	.word	0x58024400
 8001058:	58021000 	.word	0x58021000
 800105c:	58020800 	.word	0x58020800
 8001060:	58020000 	.word	0x58020000

08001064 <SCH_XBeeRX>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------ SCHDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af02      	add	r7, sp, #8
	// If there's a packet, process it
	// If the packet is good, push it to the screen
	uint16_t rx_byte;
	uint8_t *rx_packet;
	uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 800106a:	1d3a      	adds	r2, r7, #4
 800106c:	463b      	mov	r3, r7
 800106e:	4619      	mov	r1, r3
 8001070:	483e      	ldr	r0, [pc, #248]	@ (800116c <SCH_XBeeRX+0x108>)
 8001072:	f014 fc7f 	bl	8015974 <XBEE_RXPacket>
 8001076:	4603      	mov	r3, r0
 8001078:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d171      	bne.n	8001164 <SCH_XBeeRX+0x100>
		if (rx_byte <= JPEG_WIDTH*JPEG_HEIGHT/64 + 1) {
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	2b37      	cmp	r3, #55	@ 0x37
 8001084:	d86e      	bhi.n	8001164 <SCH_XBeeRX+0x100>
			// Data was fully sent
			if (rx_byte < uart_rx_lastPacketNum && jpeg_state == 0) {
 8001086:	88ba      	ldrh	r2, [r7, #4]
 8001088:	4b39      	ldr	r3, [pc, #228]	@ (8001170 <SCH_XBeeRX+0x10c>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d24b      	bcs.n	8001128 <SCH_XBeeRX+0xc4>
 8001090:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <SCH_XBeeRX+0x110>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d147      	bne.n	8001128 <SCH_XBeeRX+0xc4>
				// Start the jpeg decode
				jpeg_size = uart_rx_lastPacketNum*64 + JPEG_HEADERSIZE;
 8001098:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <SCH_XBeeRX+0x10c>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	019b      	lsls	r3, r3, #6
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b34      	ldr	r3, [pc, #208]	@ (8001178 <SCH_XBeeRX+0x114>)
 80010a8:	801a      	strh	r2, [r3, #0]
				HAL_StatusTypeDef ret;
				if (jpeg_currentraw)
 80010aa:	4b34      	ldr	r3, [pc, #208]	@ (800117c <SCH_XBeeRX+0x118>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00d      	beq.n	80010ce <SCH_XBeeRX+0x6a>
					ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 80010b2:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <SCH_XBeeRX+0x114>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <SCH_XBeeRX+0x11c>)
 80010c0:	4930      	ldr	r1, [pc, #192]	@ (8001184 <SCH_XBeeRX+0x120>)
 80010c2:	4831      	ldr	r0, [pc, #196]	@ (8001188 <SCH_XBeeRX+0x124>)
 80010c4:	f009 f843 	bl	800a14e <HAL_JPEG_Decode_DMA>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	e00c      	b.n	80010e8 <SCH_XBeeRX+0x84>
				else {
					ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 80010ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <SCH_XBeeRX+0x114>)
 80010d0:	881b      	ldrh	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <SCH_XBeeRX+0x11c>)
 80010dc:	492b      	ldr	r1, [pc, #172]	@ (800118c <SCH_XBeeRX+0x128>)
 80010de:	482a      	ldr	r0, [pc, #168]	@ (8001188 <SCH_XBeeRX+0x124>)
 80010e0:	f009 f835 	bl	800a14e <HAL_JPEG_Decode_DMA>
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
				}
				jpeg_currentraw = !jpeg_currentraw;
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <SCH_XBeeRX+0x118>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b20      	ldr	r3, [pc, #128]	@ (800117c <SCH_XBeeRX+0x118>)
 80010fa:	701a      	strb	r2, [r3, #0]

				if (ret) {
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00f      	beq.n	8001122 <SCH_XBeeRX+0xbe>
					sprintf(ssd_msg, " JPEG FAIL %d", ret);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	461a      	mov	r2, r3
 8001106:	4922      	ldr	r1, [pc, #136]	@ (8001190 <SCH_XBeeRX+0x12c>)
 8001108:	4822      	ldr	r0, [pc, #136]	@ (8001194 <SCH_XBeeRX+0x130>)
 800110a:	f018 f8f3 	bl	80192f4 <siprintf>
					WriteDebug(ssd_msg, strlen(ssd_msg));
 800110e:	4821      	ldr	r0, [pc, #132]	@ (8001194 <SCH_XBeeRX+0x130>)
 8001110:	f7ff f8e6 	bl	80002e0 <strlen>
 8001114:	4603      	mov	r3, r0
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	481e      	ldr	r0, [pc, #120]	@ (8001194 <SCH_XBeeRX+0x130>)
 800111c:	f000 fc5e 	bl	80019dc <WriteDebug>
 8001120:	e002      	b.n	8001128 <SCH_XBeeRX+0xc4>
				} else {
					jpeg_state = 1;
 8001122:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <SCH_XBeeRX+0x110>)
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
				}
			}
			uart_rx_lastPacketNum = rx_byte;
 8001128:	88ba      	ldrh	r2, [r7, #4]
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <SCH_XBeeRX+0x10c>)
 800112c:	801a      	strh	r2, [r3, #0]

			// fill in the received data
			if (jpeg_currentraw)
 800112e:	4b13      	ldr	r3, [pc, #76]	@ (800117c <SCH_XBeeRX+0x118>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <SCH_XBeeRX+0xea>
				memcpy(jpeg_raw1 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	019b      	lsls	r3, r3, #6
 800113a:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 800113e:	4a11      	ldr	r2, [pc, #68]	@ (8001184 <SCH_XBeeRX+0x120>)
 8001140:	4413      	add	r3, r2
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	2240      	movs	r2, #64	@ 0x40
 8001146:	4618      	mov	r0, r3
 8001148:	f018 f942 	bl	80193d0 <memcpy>
			else {
				memcpy(jpeg_raw2 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
			}
		}
	}
}
 800114c:	e00a      	b.n	8001164 <SCH_XBeeRX+0x100>
				memcpy(jpeg_raw2 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
 800114e:	88bb      	ldrh	r3, [r7, #4]
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001156:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <SCH_XBeeRX+0x128>)
 8001158:	4413      	add	r3, r2
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	2240      	movs	r2, #64	@ 0x40
 800115e:	4618      	mov	r0, r3
 8001160:	f018 f936 	bl	80193d0 <memcpy>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	24026abc 	.word	0x24026abc
 8001170:	24026ae0 	.word	0x24026ae0
 8001174:	24029366 	.word	0x24029366
 8001178:	24029364 	.word	0x24029364
 800117c:	24026ae2 	.word	0x24026ae2
 8001180:	240285e4 	.word	0x240285e4
 8001184:	24026ae4 	.word	0x24026ae4
 8001188:	24000610 	.word	0x24000610
 800118c:	24027864 	.word	0x24027864
 8001190:	08019b6c 	.word	0x08019b6c
 8001194:	24001190 	.word	0x24001190

08001198 <SCH_ImageDecode>:

void SCH_ImageDecode() {
 8001198:	b480      	push	{r7}
 800119a:	b087      	sub	sp, #28
 800119c:	af00      	add	r7, sp, #0
	if (jpeg_state != 2) return;
 800119e:	4b63      	ldr	r3, [pc, #396]	@ (800132c <SCH_ImageDecode+0x194>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f040 80bc 	bne.w	8001320 <SCH_ImageDecode+0x188>
		// Loop through every mcu block
		for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	82fb      	strh	r3, [r7, #22]
 80011ac:	e0a3      	b.n	80012f6 <SCH_ImageDecode+0x15e>
			uint16_t mcu_idx = current_mcu_y*JPEG_MCU_WIDTH + mcu_x;
 80011ae:	4b60      	ldr	r3, [pc, #384]	@ (8001330 <SCH_ImageDecode+0x198>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	0052      	lsls	r2, r2, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	8afb      	ldrh	r3, [r7, #22]
 80011be:	4413      	add	r3, r2
 80011c0:	81fb      	strh	r3, [r7, #14]

			for (uint16_t y = 0; y < 8; y++) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	82bb      	strh	r3, [r7, #20]
 80011c6:	e08f      	b.n	80012e8 <SCH_ImageDecode+0x150>
				for (uint16_t x = 0; x < 8; x++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	827b      	strh	r3, [r7, #18]
 80011cc:	e085      	b.n	80012da <SCH_ImageDecode+0x142>
					// Bounds check
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80011ce:	8afb      	ldrh	r3, [r7, #22]
 80011d0:	00da      	lsls	r2, r3, #3
 80011d2:	8a7b      	ldrh	r3, [r7, #18]
 80011d4:	4413      	add	r3, r2
 80011d6:	2bf0      	cmp	r3, #240	@ 0xf0
 80011d8:	dc77      	bgt.n	80012ca <SCH_ImageDecode+0x132>
					// COLOR FORMAT
					// |RRRRR GGG|GGG BBBBB|
					// TODO: stop transmitting overscan to save bandwidth

					uint32_t pix_x = (mcu_x*8 + x)*5;
 80011da:	8afb      	ldrh	r3, [r7, #22]
 80011dc:	00da      	lsls	r2, r3, #3
 80011de:	8a7b      	ldrh	r3, [r7, #18]
 80011e0:	441a      	add	r2, r3
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]
					if (pix_x >= LCD_WIDTH-1) continue;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	2bee      	cmp	r3, #238	@ 0xee
 80011ee:	d86e      	bhi.n	80012ce <SCH_ImageDecode+0x136>
					pix_x = LCD_WIDTH - pix_x - 1;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80011f6:	60bb      	str	r3, [r7, #8]
					uint32_t pix_y = (current_mcu_y*8 + y)*5;
 80011f8:	4b4d      	ldr	r3, [pc, #308]	@ (8001330 <SCH_ImageDecode+0x198>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	00da      	lsls	r2, r3, #3
 80011fe:	8abb      	ldrh	r3, [r7, #20]
 8001200:	441a      	add	r2, r3
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	607b      	str	r3, [r7, #4]
					if (pix_y >= LCD_HEIGHT-2) continue;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8001210:	d25f      	bcs.n	80012d2 <SCH_ImageDecode+0x13a>

					uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	00da      	lsls	r2, r3, #3
 8001216:	8abb      	ldrh	r3, [r7, #20]
 8001218:	4413      	add	r3, r2
 800121a:	00da      	lsls	r2, r3, #3
 800121c:	8a7b      	ldrh	r3, [r7, #18]
 800121e:	4413      	add	r3, r2
 8001220:	4a44      	ldr	r2, [pc, #272]	@ (8001334 <SCH_ImageDecode+0x19c>)
 8001222:	5cd3      	ldrb	r3, [r2, r3]
 8001224:	70fb      	strb	r3, [r7, #3]
					uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 8001226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800122a:	f023 0307 	bic.w	r3, r3, #7
 800122e:	b25a      	sxtb	r2, r3
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b25b      	sxtb	r3, r3
 800123c:	70bb      	strb	r3, [r7, #2]
					uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 800123e:	78fb      	ldrb	r3, [r7, #3]
 8001240:	08db      	lsrs	r3, r3, #3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b25a      	sxtb	r2, r3
 8001246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	b25b      	sxtb	r3, r3
 800124e:	f023 031f 	bic.w	r3, r3, #31
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b25b      	sxtb	r3, r3
 8001258:	707b      	strb	r3, [r7, #1]

					// TODO: Speed this up as much as possible, even if it means skipping lines
					// Loop through the pixels in a box
					for (uint8_t xOff = 0; xOff < 3; xOff++) {
 800125a:	2300      	movs	r3, #0
 800125c:	747b      	strb	r3, [r7, #17]
 800125e:	e030      	b.n	80012c2 <SCH_ImageDecode+0x12a>
						for (uint8_t yOff = 0; yOff < 3; yOff++) {
 8001260:	2300      	movs	r3, #0
 8001262:	743b      	strb	r3, [r7, #16]
 8001264:	e027      	b.n	80012b6 <SCH_ImageDecode+0x11e>
							hst7789.vram[(pix_y+yOff)*LCD_WIDTH*2 + (pix_x+xOff)*2    ] = msb;
 8001266:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <SCH_ImageDecode+0x1a0>)
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	7c3a      	ldrb	r2, [r7, #16]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	441a      	add	r2, r3
 8001270:	4613      	mov	r3, r2
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4618      	mov	r0, r3
 800127a:	7c7a      	ldrb	r2, [r7, #17]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	4403      	add	r3, r0
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	78ba      	ldrb	r2, [r7, #2]
 8001288:	701a      	strb	r2, [r3, #0]
							hst7789.vram[(pix_y+yOff)*LCD_WIDTH*2 + (pix_x+xOff)*2 + 1] = lsb;
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <SCH_ImageDecode+0x1a0>)
 800128c:	6919      	ldr	r1, [r3, #16]
 800128e:	7c3a      	ldrb	r2, [r7, #16]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	441a      	add	r2, r3
 8001294:	4613      	mov	r3, r2
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	4618      	mov	r0, r3
 800129e:	7c7a      	ldrb	r2, [r7, #17]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4413      	add	r3, r2
 80012a4:	4403      	add	r3, r0
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	3301      	adds	r3, #1
 80012aa:	440b      	add	r3, r1
 80012ac:	787a      	ldrb	r2, [r7, #1]
 80012ae:	701a      	strb	r2, [r3, #0]
						for (uint8_t yOff = 0; yOff < 3; yOff++) {
 80012b0:	7c3b      	ldrb	r3, [r7, #16]
 80012b2:	3301      	adds	r3, #1
 80012b4:	743b      	strb	r3, [r7, #16]
 80012b6:	7c3b      	ldrb	r3, [r7, #16]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d9d4      	bls.n	8001266 <SCH_ImageDecode+0xce>
					for (uint8_t xOff = 0; xOff < 3; xOff++) {
 80012bc:	7c7b      	ldrb	r3, [r7, #17]
 80012be:	3301      	adds	r3, #1
 80012c0:	747b      	strb	r3, [r7, #17]
 80012c2:	7c7b      	ldrb	r3, [r7, #17]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d9cb      	bls.n	8001260 <SCH_ImageDecode+0xc8>
 80012c8:	e004      	b.n	80012d4 <SCH_ImageDecode+0x13c>
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80012ca:	bf00      	nop
 80012cc:	e002      	b.n	80012d4 <SCH_ImageDecode+0x13c>
					if (pix_x >= LCD_WIDTH-1) continue;
 80012ce:	bf00      	nop
 80012d0:	e000      	b.n	80012d4 <SCH_ImageDecode+0x13c>
					if (pix_y >= LCD_HEIGHT-2) continue;
 80012d2:	bf00      	nop
				for (uint16_t x = 0; x < 8; x++) {
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	3301      	adds	r3, #1
 80012d8:	827b      	strh	r3, [r7, #18]
 80012da:	8a7b      	ldrh	r3, [r7, #18]
 80012dc:	2b07      	cmp	r3, #7
 80012de:	f67f af76 	bls.w	80011ce <SCH_ImageDecode+0x36>
			for (uint16_t y = 0; y < 8; y++) {
 80012e2:	8abb      	ldrh	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	82bb      	strh	r3, [r7, #20]
 80012e8:	8abb      	ldrh	r3, [r7, #20]
 80012ea:	2b07      	cmp	r3, #7
 80012ec:	f67f af6c 	bls.w	80011c8 <SCH_ImageDecode+0x30>
		for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 80012f0:	8afb      	ldrh	r3, [r7, #22]
 80012f2:	3301      	adds	r3, #1
 80012f4:	82fb      	strh	r3, [r7, #22]
 80012f6:	8afb      	ldrh	r3, [r7, #22]
 80012f8:	2b05      	cmp	r3, #5
 80012fa:	f67f af58 	bls.w	80011ae <SCH_ImageDecode+0x16>
					}
				}
			}
		}

		current_mcu_y++;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <SCH_ImageDecode+0x198>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <SCH_ImageDecode+0x198>)
 8001308:	701a      	strb	r2, [r3, #0]

		if (current_mcu_y >= JPEG_MCU_HEIGHT) {
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <SCH_ImageDecode+0x198>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b08      	cmp	r3, #8
 8001310:	d907      	bls.n	8001322 <SCH_ImageDecode+0x18a>
			//ST7789_UpdateSector(&hst7789, 2);
			current_mcu_y = 0;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <SCH_ImageDecode+0x198>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
			// Flag JPEG as idle
			jpeg_state = 0;
 8001318:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SCH_ImageDecode+0x194>)
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	e000      	b.n	8001322 <SCH_ImageDecode+0x18a>
	if (jpeg_state != 2) return;
 8001320:	bf00      	nop
		}
}
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	24029366 	.word	0x24029366
 8001330:	24029367 	.word	0x24029367
 8001334:	240285e4 	.word	0x240285e4
 8001338:	24001270 	.word	0x24001270

0800133c <SCH_OLEDUpdate>:

void SCH_OLEDUpdate() {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_oled);
 8001342:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <SCH_OLEDUpdate+0x58>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f898 	bl	800147c <DeltaTime>
 800134c:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_OLED) return;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b13      	cmp	r3, #19
 8001352:	d91b      	bls.n	800138c <SCH_OLEDUpdate+0x50>

	// Update the timer for the next DT period
	sch_tim_oled = HAL_GetTick();
 8001354:	f001 fc64 	bl	8002c20 <HAL_GetTick>
 8001358:	4603      	mov	r3, r0
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <SCH_OLEDUpdate+0x58>)
 800135c:	6013      	str	r3, [r2, #0]

	// Display the screen contents
	// Clear existing VRAM
	SSD1306_Clear(&hssd1);
 800135e:	480e      	ldr	r0, [pc, #56]	@ (8001398 <SCH_OLEDUpdate+0x5c>)
 8001360:	f001 f988 	bl	8002674 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <SCH_OLEDUpdate+0x60>)
 8001366:	f001 f985 	bl	8002674 <SSD1306_Clear>

	// Draw the sliders
	Draw_Slider(0);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f9ec 	bl	8001748 <Draw_Slider>
	Draw_Slider(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f000 f9e9 	bl	8001748 <Draw_Slider>

	MENU_Draw(&hmenu, delta_t);
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4809      	ldr	r0, [pc, #36]	@ (80013a0 <SCH_OLEDUpdate+0x64>)
 800137a:	f015 f837 	bl	80163ec <MENU_Draw>

	// Update the screens
	SSD1306_Update(&hssd1);
 800137e:	4806      	ldr	r0, [pc, #24]	@ (8001398 <SCH_OLEDUpdate+0x5c>)
 8001380:	f001 f98c 	bl	800269c <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <SCH_OLEDUpdate+0x60>)
 8001386:	f001 f989 	bl	800269c <SSD1306_Update>
 800138a:	e000      	b.n	800138e <SCH_OLEDUpdate+0x52>
	if (delta_t < SCH_MS_OLED) return;
 800138c:	bf00      	nop
}
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2400094c 	.word	0x2400094c
 8001398:	24000968 	.word	0x24000968
 800139c:	2400097c 	.word	0x2400097c
 80013a0:	24001258 	.word	0x24001258

080013a4 <SCH_GetInputs>:

void SCH_GetInputs() {
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	e041      	b.n	8001434 <SCH_GetInputs+0x90>
		// Debounce timer
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4a2c      	ldr	r2, [pc, #176]	@ (8001464 <SCH_GetInputs+0xc0>)
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f85f 	bl	800147c <DeltaTime>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b13      	cmp	r3, #19
 80013c2:	d933      	bls.n	800142c <SCH_GetInputs+0x88>

		// Get input
		uint8_t i_new = !HAL_GPIO_ReadPin(i_ports[i], i_pins[i]);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <SCH_GetInputs+0xc4>)
 80013c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4927      	ldr	r1, [pc, #156]	@ (800146c <SCH_GetInputs+0xc8>)
 80013d0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013d4:	4619      	mov	r1, r3
 80013d6:	4610      	mov	r0, r2
 80013d8:	f006 f89e 	bl	8007518 <HAL_GPIO_ReadPin>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	71bb      	strb	r3, [r7, #6]

		// Update debounce timer
		if (i_new != istate_hold[i])
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a20      	ldr	r2, [pc, #128]	@ (8001470 <SCH_GetInputs+0xcc>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	79ba      	ldrb	r2, [r7, #6]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d006      	beq.n	8001404 <SCH_GetInputs+0x60>
			istate_time[i] = HAL_GetTick();
 80013f6:	79fc      	ldrb	r4, [r7, #7]
 80013f8:	f001 fc12 	bl	8002c20 <HAL_GetTick>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <SCH_GetInputs+0xc0>)
 8001400:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		istate_pressed[i] = i_new && !istate_hold[i];	// Just pressed
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d006      	beq.n	8001418 <SCH_GetInputs+0x74>
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	4a18      	ldr	r2, [pc, #96]	@ (8001470 <SCH_GetInputs+0xcc>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <SCH_GetInputs+0x74>
 8001414:	2201      	movs	r2, #1
 8001416:	e000      	b.n	800141a <SCH_GetInputs+0x76>
 8001418:	2200      	movs	r2, #0
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	b2d1      	uxtb	r1, r2
 800141e:	4a15      	ldr	r2, [pc, #84]	@ (8001474 <SCH_GetInputs+0xd0>)
 8001420:	54d1      	strb	r1, [r2, r3]
		istate_hold[i] = i_new;							// Update sotred val
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	4912      	ldr	r1, [pc, #72]	@ (8001470 <SCH_GetInputs+0xcc>)
 8001426:	79ba      	ldrb	r2, [r7, #6]
 8001428:	54ca      	strb	r2, [r1, r3]
 800142a:	e000      	b.n	800142e <SCH_GetInputs+0x8a>
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 800142c:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	3301      	adds	r3, #1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	2b03      	cmp	r3, #3
 8001438:	d9ba      	bls.n	80013b0 <SCH_GetInputs+0xc>
//		if (istate_pressed[i]) {
//			test_vals[i]++;
//		}
	}

	MENU_ParseInput(&hmenu, istate_pressed);
 800143a:	490e      	ldr	r1, [pc, #56]	@ (8001474 <SCH_GetInputs+0xd0>)
 800143c:	480e      	ldr	r0, [pc, #56]	@ (8001478 <SCH_GetInputs+0xd4>)
 800143e:	f015 f8ad 	bl	801659c <MENU_ParseInput>
	istate_pressed[0] = 0;
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <SCH_GetInputs+0xd0>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
	istate_pressed[1] = 0;
 8001448:	4b0a      	ldr	r3, [pc, #40]	@ (8001474 <SCH_GetInputs+0xd0>)
 800144a:	2200      	movs	r2, #0
 800144c:	705a      	strb	r2, [r3, #1]
	istate_pressed[2] = 0;
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <SCH_GetInputs+0xd0>)
 8001450:	2200      	movs	r2, #0
 8001452:	709a      	strb	r2, [r3, #2]
	istate_pressed[3] = 0;
 8001454:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <SCH_GetInputs+0xd0>)
 8001456:	2200      	movs	r2, #0
 8001458:	70da      	strb	r2, [r3, #3]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
 8001462:	bf00      	nop
 8001464:	24000954 	.word	0x24000954
 8001468:	24000000 	.word	0x24000000
 800146c:	24000010 	.word	0x24000010
 8001470:	24000950 	.word	0x24000950
 8001474:	24000964 	.word	0x24000964
 8001478:	24001258 	.word	0x24001258

0800147c <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

uint32_t DeltaTime(uint32_t start_t) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 8001484:	f001 fbcc 	bl	8002c20 <HAL_GetTick>
 8001488:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	d204      	bcs.n	800149c <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	e002      	b.n	80014a2 <DeltaTime+0x26>
	}

	return now_t - start_t;
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	1ad3      	subs	r3, r2, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_UART_RxCpltCallback>:


// DEBUG FUNCTIONS

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_RX_DMACallback(&hxbee);
 80014b4:	480d      	ldr	r0, [pc, #52]	@ (80014ec <HAL_UART_RxCpltCallback+0x40>)
 80014b6:	f014 faaf 	bl	8015a18 <XBEE_RX_DMACallback>
 80014ba:	4603      	mov	r3, r0
 80014bc:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00e      	beq.n	80014e2 <HAL_UART_RxCpltCallback+0x36>
		sprintf(ssd_msg, " PKT Err: %d", ret);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4909      	ldr	r1, [pc, #36]	@ (80014f0 <HAL_UART_RxCpltCallback+0x44>)
 80014ca:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <HAL_UART_RxCpltCallback+0x48>)
 80014cc:	f017 ff12 	bl	80192f4 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80014d0:	4808      	ldr	r0, [pc, #32]	@ (80014f4 <HAL_UART_RxCpltCallback+0x48>)
 80014d2:	f7fe ff05 	bl	80002e0 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <HAL_UART_RxCpltCallback+0x48>)
 80014de:	f000 fa7d 	bl	80019dc <WriteDebug>
	}
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	24026abc 	.word	0x24026abc
 80014f0:	08019b7c 	.word	0x08019b7c
 80014f4:	24001190 	.word	0x24001190

080014f8 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001500:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	24029366 	.word	0x24029366

08001518 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001520:	4909      	ldr	r1, [pc, #36]	@ (8001548 <HAL_JPEG_ErrorCallback+0x30>)
 8001522:	480a      	ldr	r0, [pc, #40]	@ (800154c <HAL_JPEG_ErrorCallback+0x34>)
 8001524:	f017 fee6 	bl	80192f4 <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001528:	4808      	ldr	r0, [pc, #32]	@ (800154c <HAL_JPEG_ErrorCallback+0x34>)
 800152a:	f7fe fed9 	bl	80002e0 <strlen>
 800152e:	4603      	mov	r3, r0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	@ (800154c <HAL_JPEG_ErrorCallback+0x34>)
 8001536:	f000 fa51 	bl	80019dc <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 2;
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_JPEG_ErrorCallback+0x38>)
 800153c:	2202      	movs	r2, #2
 800153e:	701a      	strb	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	08019b8c 	.word	0x08019b8c
 800154c:	24001190 	.word	0x24001190
 8001550:	24029366 	.word	0x24029366

08001554 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	//	sprintf(ssd_msg, " JPEG D %d", OutDataLength);
	//	WriteDebug(ssd_msg, strlen(ssd_msg));
	//HAL_JPEG_Abort(hjpeg);
	jpeg_state = 2;
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <HAL_JPEG_DataReadyCallback+0x20>)
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	24029366 	.word	0x24029366

08001578 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <HAL_SPI_TxCpltCallback+0x18>)
 8001582:	f001 fab9 	bl	8002af8 <ST7789_DMATransmitCplt>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	24001270 	.word	0x24001270
 8001594:	00000000 	.word	0x00000000

08001598 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b087      	sub	sp, #28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 80015a0:	2300      	movs	r3, #0
 80015a2:	81bb      	strh	r3, [r7, #12]
 80015a4:	2300      	movs	r3, #0
 80015a6:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e01f      	b.n	80015ee <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	bfb8      	it	lt
 80015b8:	425b      	neglt	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	0053      	lsls	r3, r2, #1
 80015be:	3318      	adds	r3, #24
 80015c0:	443b      	add	r3, r7
 80015c2:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 80015c6:	4858      	ldr	r0, [pc, #352]	@ (8001728 <HAL_ADC_ConvCpltCallback+0x190>)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80015ce:	4857      	ldr	r0, [pc, #348]	@ (800172c <HAL_ADC_ConvCpltCallback+0x194>)
 80015d0:	fba0 0303 	umull	r0, r3, r0, r3
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	440b      	add	r3, r1
 80015da:	b299      	uxth	r1, r3
 80015dc:	0053      	lsls	r3, r2, #1
 80015de:	3318      	adds	r3, #24
 80015e0:	443b      	add	r3, r7
 80015e2:	460a      	mov	r2, r1
 80015e4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3301      	adds	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b13      	cmp	r3, #19
 80015f2:	dddc      	ble.n	80015ae <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	e081      	b.n	80016fe <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 80015fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x198>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800160a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001718 <HAL_ADC_ConvCpltCallback+0x180>
 800160e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001612:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001616:	ee17 3a90 	vmov	r3, s15
 800161a:	b299      	uxth	r1, r3
 800161c:	4a44      	ldr	r2, [pc, #272]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x198>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 8001624:	4a42      	ldr	r2, [pc, #264]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x198>)
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	3318      	adds	r3, #24
 800163a:	443b      	add	r3, r7
 800163c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001648:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8001720 <HAL_ADC_ConvCpltCallback+0x188>
 800164c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001650:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001654:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b299      	uxth	r1, r3
 800165e:	4a34      	ldr	r2, [pc, #208]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x198>)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001666:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x198>)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800166e:	b21b      	sxth	r3, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	0bdb      	lsrs	r3, r3, #15
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4619      	mov	r1, r3
 800167a:	4a2e      	ldr	r2, [pc, #184]	@ (8001734 <HAL_ADC_ConvCpltCallback+0x19c>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4413      	add	r3, r2
 8001680:	460a      	mov	r2, r1
 8001682:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 8001684:	4a2a      	ldr	r2, [pc, #168]	@ (8001730 <HAL_ADC_ConvCpltCallback+0x198>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800168c:	09db      	lsrs	r3, r3, #7
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2d9      	uxtb	r1, r3
 8001692:	4a29      	ldr	r2, [pc, #164]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4413      	add	r3, r2
 8001698:	460a      	mov	r2, r1
 800169a:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 800169c:	4a25      	ldr	r2, [pc, #148]	@ (8001734 <HAL_ADC_ConvCpltCallback+0x19c>)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4413      	add	r3, r2
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00a      	beq.n	80016be <HAL_ADC_ConvCpltCallback+0x126>
 80016a8:	4a23      	ldr	r2, [pc, #140]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	b2d9      	uxtb	r1, r3
 80016b4:	4a20      	ldr	r2, [pc, #128]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4413      	add	r3, r2
 80016ba:	460a      	mov	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 80016be:	4a1e      	ldr	r2, [pc, #120]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4413      	add	r3, r2
 80016c4:	781a      	ldrb	r2, [r3, #0]
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <HAL_ADC_ConvCpltCallback+0x1a4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d204      	bcs.n	80016d8 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 80016ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4413      	add	r3, r2
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 80016d8:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4413      	add	r3, r2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dd04      	ble.n	80016f8 <HAL_ADC_ConvCpltCallback+0x160>
			slider_magnitude[i] = 0xFF;
 80016ee:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4413      	add	r3, r2
 80016f4:	22ff      	movs	r2, #255	@ 0xff
 80016f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	3301      	adds	r3, #1
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	2b01      	cmp	r3, #1
 8001702:	f77f af7a 	ble.w	80015fa <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	f3af 8000 	nop.w
 8001718:	9999999a 	.word	0x9999999a
 800171c:	3fd99999 	.word	0x3fd99999
 8001720:	33333333 	.word	0x33333333
 8001724:	3fe33333 	.word	0x3fe33333
 8001728:	24026a88 	.word	0x24026a88
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	24026ab0 	.word	0x24026ab0
 8001734:	24026ab8 	.word	0x24026ab8
 8001738:	24026ab4 	.word	0x24026ab4
 800173c:	24000018 	.word	0x24000018
 8001740:	24000019 	.word	0x24000019
 8001744:	00000000 	.word	0x00000000

08001748 <Draw_Slider>:

// ------------------------------------------------------------ DRAW COMMANDS -- //
void Draw_Slider(uint8_t slider_id) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	@ 0x38
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_sel = slider_magnitude[slider_id] >> 5;					// Byte threshold
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4a9a      	ldr	r2, [pc, #616]	@ (80019c0 <Draw_Slider+0x278>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	77fb      	strb	r3, [r7, #31]
	uint8_t bit_sel = (slider_magnitude[slider_id] >> 2) & 0b00000111;		// Partial byte threshold
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a98      	ldr	r2, [pc, #608]	@ (80019c0 <Draw_Slider+0x278>)
 8001760:	5cd3      	ldrb	r3, [r2, r3]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	77bb      	strb	r3, [r7, #30]
	uint8_t subbit_sel = (slider_magnitude[slider_id]) & 0b00000111;	// Fine control display
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a94      	ldr	r2, [pc, #592]	@ (80019c0 <Draw_Slider+0x278>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	777b      	strb	r3, [r7, #29]

	uint8_t slider_vram[8] = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]

	if (slider_direction[slider_id]) {
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	4a8f      	ldr	r2, [pc, #572]	@ (80019c4 <Draw_Slider+0x27c>)
 8001786:	5cd3      	ldrb	r3, [r2, r3]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d032      	beq.n	80017f2 <Draw_Slider+0xaa>
		for (int i = 0; i < 8; i++) {
 800178c:	2300      	movs	r3, #0
 800178e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001790:	e02b      	b.n	80017ea <Draw_Slider+0xa2>
			if (i < byte_sel) slider_vram[7-i] = 0xFF;	// Before partial byte, fill
 8001792:	7ffb      	ldrb	r3, [r7, #31]
 8001794:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001796:	429a      	cmp	r2, r3
 8001798:	da07      	bge.n	80017aa <Draw_Slider+0x62>
 800179a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800179c:	f1c3 0307 	rsb	r3, r3, #7
 80017a0:	3338      	adds	r3, #56	@ 0x38
 80017a2:	443b      	add	r3, r7
 80017a4:	22ff      	movs	r2, #255	@ 0xff
 80017a6:	f803 2c28 	strb.w	r2, [r3, #-40]
			if (i > byte_sel) slider_vram[7-i] = 0x00;	// After partial byte, empty
 80017aa:	7ffb      	ldrb	r3, [r7, #31]
 80017ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017ae:	429a      	cmp	r2, r3
 80017b0:	dd07      	ble.n	80017c2 <Draw_Slider+0x7a>
 80017b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b4:	f1c3 0307 	rsb	r3, r3, #7
 80017b8:	3338      	adds	r3, #56	@ 0x38
 80017ba:	443b      	add	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	f803 2c28 	strb.w	r2, [r3, #-40]
			if (i == byte_sel) slider_vram[7-i] = 0xFF << (7-bit_sel);	// Partial byte
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d10c      	bne.n	80017e4 <Draw_Slider+0x9c>
 80017ca:	7fbb      	ldrb	r3, [r7, #30]
 80017cc:	f1c3 0307 	rsb	r3, r3, #7
 80017d0:	22ff      	movs	r2, #255	@ 0xff
 80017d2:	409a      	lsls	r2, r3
 80017d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	3338      	adds	r3, #56	@ 0x38
 80017de:	443b      	add	r3, r7
 80017e0:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (int i = 0; i < 8; i++) {
 80017e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e6:	3301      	adds	r3, #1
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ec:	2b07      	cmp	r3, #7
 80017ee:	ddd0      	ble.n	8001792 <Draw_Slider+0x4a>
 80017f0:	e02d      	b.n	800184e <Draw_Slider+0x106>
		}
	} else {
		for (int i = 0; i < 8; i++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017f6:	e027      	b.n	8001848 <Draw_Slider+0x100>
			if (i < byte_sel) slider_vram[i] = 0xFF;
 80017f8:	7ffb      	ldrb	r3, [r7, #31]
 80017fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fc:	429a      	cmp	r2, r3
 80017fe:	da05      	bge.n	800180c <Draw_Slider+0xc4>
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001806:	4413      	add	r3, r2
 8001808:	22ff      	movs	r2, #255	@ 0xff
 800180a:	701a      	strb	r2, [r3, #0]
			if (i > byte_sel) slider_vram[i] = 0x00;
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001810:	429a      	cmp	r2, r3
 8001812:	dd05      	ble.n	8001820 <Draw_Slider+0xd8>
 8001814:	f107 0210 	add.w	r2, r7, #16
 8001818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800181a:	4413      	add	r3, r2
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
			if (i == byte_sel) slider_vram[i] = 0xFF >> (7-bit_sel);
 8001820:	7ffb      	ldrb	r3, [r7, #31]
 8001822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001824:	429a      	cmp	r2, r3
 8001826:	d10c      	bne.n	8001842 <Draw_Slider+0xfa>
 8001828:	7fbb      	ldrb	r3, [r7, #30]
 800182a:	f1c3 0307 	rsb	r3, r3, #7
 800182e:	22ff      	movs	r2, #255	@ 0xff
 8001830:	fa42 f303 	asr.w	r3, r2, r3
 8001834:	b2d9      	uxtb	r1, r3
 8001836:	f107 0210 	add.w	r2, r7, #16
 800183a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800183c:	4413      	add	r3, r2
 800183e:	460a      	mov	r2, r1
 8001840:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001844:	3301      	adds	r3, #1
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
 8001848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184a:	2b07      	cmp	r3, #7
 800184c:	ddd4      	ble.n	80017f8 <Draw_Slider+0xb0>
		}
	}

	uint8_t slider_str[4] = {0};
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
	sprintf(slider_str, "%03d", (uint8_t)(slider_magnitude[slider_id] / 2.55));
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4a5a      	ldr	r2, [pc, #360]	@ (80019c0 <Draw_Slider+0x278>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001860:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 80019b8 <Draw_Slider+0x270>
 8001864:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001868:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800186c:	edc7 7a00 	vstr	s15, [r7]
 8001870:	783b      	ldrb	r3, [r7, #0]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4953      	ldr	r1, [pc, #332]	@ (80019c8 <Draw_Slider+0x280>)
 800187c:	4618      	mov	r0, r3
 800187e:	f017 fd39 	bl	80192f4 <siprintf>

	if (slider_id == 0) {
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d148      	bne.n	800191a <Draw_Slider+0x1d2>
		uint16_t curs = 1;
 8001888:	2301      	movs	r3, #1
 800188a:	833b      	strh	r3, [r7, #24]
		for (int y = 0; y < 8; y++) {
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001890:	e02f      	b.n	80018f2 <Draw_Slider+0x1aa>
			for (int x = 3; x < 8; x++)
 8001892:	2303      	movs	r3, #3
 8001894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001896:	e00f      	b.n	80018b8 <Draw_Slider+0x170>
				ssd1_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 8001898:	8b3a      	ldrh	r2, [r7, #24]
 800189a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800189c:	01db      	lsls	r3, r3, #7
 800189e:	441a      	add	r2, r3
 80018a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a2:	4413      	add	r3, r2
 80018a4:	f107 0110 	add.w	r1, r7, #16
 80018a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018aa:	440a      	add	r2, r1
 80018ac:	7811      	ldrb	r1, [r2, #0]
 80018ae:	4a47      	ldr	r2, [pc, #284]	@ (80019cc <Draw_Slider+0x284>)
 80018b0:	54d1      	strb	r1, [r2, r3]
			for (int x = 3; x < 8; x++)
 80018b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b4:	3301      	adds	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ba:	2b07      	cmp	r3, #7
 80018bc:	ddec      	ble.n	8001898 <Draw_Slider+0x150>
			ssd1_vram[curs + y*128 + 0] = 0xC0 >> subbit_sel;	// Set the fine control disp.
 80018be:	7f7b      	ldrb	r3, [r7, #29]
 80018c0:	22c0      	movs	r2, #192	@ 0xc0
 80018c2:	fa42 f103 	asr.w	r1, r2, r3
 80018c6:	8b3a      	ldrh	r2, [r7, #24]
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	01db      	lsls	r3, r3, #7
 80018cc:	4413      	add	r3, r2
 80018ce:	b2c9      	uxtb	r1, r1
 80018d0:	4a3e      	ldr	r2, [pc, #248]	@ (80019cc <Draw_Slider+0x284>)
 80018d2:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[curs + y*128 + 1] = 0xC0 >> subbit_sel;
 80018d4:	7f7b      	ldrb	r3, [r7, #29]
 80018d6:	22c0      	movs	r2, #192	@ 0xc0
 80018d8:	fa42 f103 	asr.w	r1, r2, r3
 80018dc:	8b3a      	ldrh	r2, [r7, #24]
 80018de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e0:	01db      	lsls	r3, r3, #7
 80018e2:	4413      	add	r3, r2
 80018e4:	3301      	adds	r3, #1
 80018e6:	b2c9      	uxtb	r1, r1
 80018e8:	4a38      	ldr	r2, [pc, #224]	@ (80019cc <Draw_Slider+0x284>)
 80018ea:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	3301      	adds	r3, #1
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f4:	2b07      	cmp	r3, #7
 80018f6:	ddcc      	ble.n	8001892 <Draw_Slider+0x14a>
		}
		hssd1.str_cursor = 9;
 80018f8:	4b35      	ldr	r3, [pc, #212]	@ (80019d0 <Draw_Slider+0x288>)
 80018fa:	2209      	movs	r2, #9
 80018fc:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(&hssd1, slider_str, strlen(slider_str));
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fcec 	bl	80002e0 <strlen>
 8001908:	4603      	mov	r3, r0
 800190a:	b2da      	uxtb	r2, r3
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4619      	mov	r1, r3
 8001912:	482f      	ldr	r0, [pc, #188]	@ (80019d0 <Draw_Slider+0x288>)
 8001914:	f000 ff2c 	bl	8002770 <SSD1306_DrawString>
			ssd2_vram[curs + y*128 + 7] = 0xC0 >> subbit_sel;
		}
		hssd2.str_cursor = 100;
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}
 8001918:	e048      	b.n	80019ac <Draw_Slider+0x264>
		uint16_t curs = 120;
 800191a:	2378      	movs	r3, #120	@ 0x78
 800191c:	837b      	strh	r3, [r7, #26]
		for (int y = 0; y < 8; y++) {
 800191e:	2300      	movs	r3, #0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
 8001922:	e030      	b.n	8001986 <Draw_Slider+0x23e>
			for (int x = 0; x < 5; x++)
 8001924:	2300      	movs	r3, #0
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	e00f      	b.n	800194a <Draw_Slider+0x202>
				ssd2_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 800192a:	8b7a      	ldrh	r2, [r7, #26]
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	01db      	lsls	r3, r3, #7
 8001930:	441a      	add	r2, r3
 8001932:	6a3b      	ldr	r3, [r7, #32]
 8001934:	4413      	add	r3, r2
 8001936:	f107 0110 	add.w	r1, r7, #16
 800193a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193c:	440a      	add	r2, r1
 800193e:	7811      	ldrb	r1, [r2, #0]
 8001940:	4a24      	ldr	r2, [pc, #144]	@ (80019d4 <Draw_Slider+0x28c>)
 8001942:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < 5; x++)
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	3301      	adds	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2b04      	cmp	r3, #4
 800194e:	ddec      	ble.n	800192a <Draw_Slider+0x1e2>
			ssd2_vram[curs + y*128 + 6] = 0xC0 >> subbit_sel;	// Set the fine control disp.
 8001950:	7f7b      	ldrb	r3, [r7, #29]
 8001952:	22c0      	movs	r2, #192	@ 0xc0
 8001954:	fa42 f103 	asr.w	r1, r2, r3
 8001958:	8b7a      	ldrh	r2, [r7, #26]
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	01db      	lsls	r3, r3, #7
 800195e:	4413      	add	r3, r2
 8001960:	3306      	adds	r3, #6
 8001962:	b2c9      	uxtb	r1, r1
 8001964:	4a1b      	ldr	r2, [pc, #108]	@ (80019d4 <Draw_Slider+0x28c>)
 8001966:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[curs + y*128 + 7] = 0xC0 >> subbit_sel;
 8001968:	7f7b      	ldrb	r3, [r7, #29]
 800196a:	22c0      	movs	r2, #192	@ 0xc0
 800196c:	fa42 f103 	asr.w	r1, r2, r3
 8001970:	8b7a      	ldrh	r2, [r7, #26]
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	01db      	lsls	r3, r3, #7
 8001976:	4413      	add	r3, r2
 8001978:	3307      	adds	r3, #7
 800197a:	b2c9      	uxtb	r1, r1
 800197c:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <Draw_Slider+0x28c>)
 800197e:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	3301      	adds	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	2b07      	cmp	r3, #7
 800198a:	ddcb      	ble.n	8001924 <Draw_Slider+0x1dc>
		hssd2.str_cursor = 100;
 800198c:	4b12      	ldr	r3, [pc, #72]	@ (80019d8 <Draw_Slider+0x290>)
 800198e:	2264      	movs	r2, #100	@ 0x64
 8001990:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fca2 	bl	80002e0 <strlen>
 800199c:	4603      	mov	r3, r0
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	480c      	ldr	r0, [pc, #48]	@ (80019d8 <Draw_Slider+0x290>)
 80019a8:	f000 fee2 	bl	8002770 <SSD1306_DrawString>
}
 80019ac:	bf00      	nop
 80019ae:	3738      	adds	r7, #56	@ 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	f3af 8000 	nop.w
 80019b8:	66666666 	.word	0x66666666
 80019bc:	40046666 	.word	0x40046666
 80019c0:	24026ab4 	.word	0x24026ab4
 80019c4:	24026ab8 	.word	0x24026ab8
 80019c8:	08019b98 	.word	0x08019b98
 80019cc:	24000990 	.word	0x24000990
 80019d0:	24000968 	.word	0x24000968
 80019d4:	24000d90 	.word	0x24000d90
 80019d8:	2400097c 	.word	0x2400097c

080019dc <WriteDebug>:

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 80019e8:	480d      	ldr	r0, [pc, #52]	@ (8001a20 <WriteDebug+0x44>)
 80019ea:	f000 fe43 	bl	8002674 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 80019ee:	480d      	ldr	r0, [pc, #52]	@ (8001a24 <WriteDebug+0x48>)
 80019f0:	f000 fe40 	bl	8002674 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	461a      	mov	r2, r3
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <WriteDebug+0x44>)
 80019fc:	f000 feb8 	bl	8002770 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	461a      	mov	r2, r3
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <WriteDebug+0x48>)
 8001a08:	f000 feb2 	bl	8002770 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8001a0c:	4804      	ldr	r0, [pc, #16]	@ (8001a20 <WriteDebug+0x44>)
 8001a0e:	f000 fe45 	bl	800269c <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8001a12:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <WriteDebug+0x48>)
 8001a14:	f000 fe42 	bl	800269c <SSD1306_Update>
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	24000968 	.word	0x24000968
 8001a24:	2400097c 	.word	0x2400097c

08001a28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a2e:	463b      	mov	r3, r7
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a3a:	f002 fcef 	bl	800441c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a4a:	231f      	movs	r3, #31
 8001a4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a4e:	2387      	movs	r3, #135	@ 0x87
 8001a50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001a56:	2300      	movs	r3, #0
 8001a58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001a66:	2300      	movs	r3, #0
 8001a68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fd0d 	bl	800448c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001a72:	2004      	movs	r0, #4
 8001a74:	f002 fcea 	bl	800444c <HAL_MPU_Enable>

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <Error_Handler+0x8>

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_MspInit+0x30>)
 8001a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a98:	4a08      	ldr	r2, [pc, #32]	@ (8001abc <HAL_MspInit+0x30>)
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <HAL_MspInit+0x30>)
 8001aa4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	58024400 	.word	0x58024400

08001ac0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	@ 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd8 <HAL_ADC_MspInit+0x118>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d175      	bne.n	8001bce <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001ae4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001af2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001af8:	f003 0320 	and.w	r3, r3, #32
 8001afc:	613b      	str	r3, [r7, #16]
 8001afe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b00:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b06:	4a35      	ldr	r2, [pc, #212]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b10:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b24:	4a2d      	ldr	r2, [pc, #180]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <HAL_ADC_MspInit+0x11c>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8001b3c:	2340      	movs	r3, #64	@ 0x40
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4824      	ldr	r0, [pc, #144]	@ (8001be0 <HAL_ADC_MspInit+0x120>)
 8001b50:	f005 fb32 	bl	80071b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001b54:	2310      	movs	r3, #16
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	481f      	ldr	r0, [pc, #124]	@ (8001be4 <HAL_ADC_MspInit+0x124>)
 8001b68:	f005 fb26 	bl	80071b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001bec <HAL_ADC_MspInit+0x12c>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001b72:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b74:	2209      	movs	r2, #9
 8001b76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b84:	4b18      	ldr	r3, [pc, #96]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b94:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b9c:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001b9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001ba6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001baa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bb2:	480d      	ldr	r0, [pc, #52]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001bb4:	f002 fcaa 	bl	800450c <HAL_DMA_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001bbe:	f7ff ff5f 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_ADC_MspInit+0x128>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	@ 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58020000 	.word	0x58020000
 8001be4:	58020800 	.word	0x58020800
 8001be8:	24000400 	.word	0x24000400
 8001bec:	40020058 	.word	0x40020058

08001bf0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 031c 	add.w	r3, r7, #28
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a73      	ldr	r2, [pc, #460]	@ (8001ddc <HAL_I2C_MspInit+0x1ec>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d16d      	bne.n	8001cee <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b73      	ldr	r3, [pc, #460]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c18:	4a71      	ldr	r2, [pc, #452]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c22:	4b6f      	ldr	r3, [pc, #444]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001c30:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c36:	2312      	movs	r3, #18
 8001c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c42:	2304      	movs	r3, #4
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f107 031c 	add.w	r3, r7, #28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4865      	ldr	r0, [pc, #404]	@ (8001de4 <HAL_I2C_MspInit+0x1f4>)
 8001c4e:	f005 fab3 	bl	80071b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c52:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c58:	4a61      	ldr	r2, [pc, #388]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001c5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c62:	4b5f      	ldr	r3, [pc, #380]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001c70:	4b5d      	ldr	r3, [pc, #372]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c72:	4a5e      	ldr	r2, [pc, #376]	@ (8001dec <HAL_I2C_MspInit+0x1fc>)
 8001c74:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001c76:	4b5c      	ldr	r3, [pc, #368]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c78:	2222      	movs	r2, #34	@ 0x22
 8001c7a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c7e:	2240      	movs	r2, #64	@ 0x40
 8001c80:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c82:	4b59      	ldr	r3, [pc, #356]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c88:	4b57      	ldr	r3, [pc, #348]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c90:	4b55      	ldr	r3, [pc, #340]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c96:	4b54      	ldr	r3, [pc, #336]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c9c:	4b52      	ldr	r3, [pc, #328]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ca2:	4b51      	ldr	r3, [pc, #324]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001ca4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ca8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001caa:	4b4f      	ldr	r3, [pc, #316]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001cb0:	484d      	ldr	r0, [pc, #308]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001cb2:	f002 fc2b 	bl	800450c <HAL_DMA_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001cbc:	f7ff fee0 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a49      	ldr	r2, [pc, #292]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001cc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cc6:	4a48      	ldr	r2, [pc, #288]	@ (8001de8 <HAL_I2C_MspInit+0x1f8>)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	201f      	movs	r0, #31
 8001cd2:	f002 fb6e 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cd6:	201f      	movs	r0, #31
 8001cd8:	f002 fb85 	bl	80043e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	2020      	movs	r0, #32
 8001ce2:	f002 fb66 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ce6:	2020      	movs	r0, #32
 8001ce8:	f002 fb7d 	bl	80043e6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cec:	e071      	b.n	8001dd2 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8001df0 <HAL_I2C_MspInit+0x200>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d16c      	bne.n	8001dd2 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b39      	ldr	r3, [pc, #228]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cfe:	4a38      	ldr	r2, [pc, #224]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d08:	4b35      	ldr	r3, [pc, #212]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d1c:	2312      	movs	r3, #18
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	482c      	ldr	r0, [pc, #176]	@ (8001de4 <HAL_I2C_MspInit+0x1f4>)
 8001d34:	f005 fa40 	bl	80071b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d3e:	4a28      	ldr	r2, [pc, #160]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d48:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_I2C_MspInit+0x1f0>)
 8001d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001d56:	4b27      	ldr	r3, [pc, #156]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d58:	4a27      	ldr	r2, [pc, #156]	@ (8001df8 <HAL_I2C_MspInit+0x208>)
 8001d5a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001d5c:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d5e:	2224      	movs	r2, #36	@ 0x24
 8001d60:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d62:	4b24      	ldr	r3, [pc, #144]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d64:	2240      	movs	r2, #64	@ 0x40
 8001d66:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d68:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d6e:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001d88:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d8e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d90:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001d96:	4817      	ldr	r0, [pc, #92]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001d98:	f002 fbb8 	bl	800450c <HAL_DMA_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001da2:	f7ff fe6d 	bl	8001a80 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001daa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dac:	4a11      	ldr	r2, [pc, #68]	@ (8001df4 <HAL_I2C_MspInit+0x204>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2100      	movs	r1, #0
 8001db6:	2021      	movs	r0, #33	@ 0x21
 8001db8:	f002 fafb 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001dbc:	2021      	movs	r0, #33	@ 0x21
 8001dbe:	f002 fb12 	bl	80043e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2022      	movs	r0, #34	@ 0x22
 8001dc8:	f002 faf3 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001dcc:	2022      	movs	r0, #34	@ 0x22
 8001dce:	f002 fb0a 	bl	80043e6 <HAL_NVIC_EnableIRQ>
}
 8001dd2:	bf00      	nop
 8001dd4:	3730      	adds	r7, #48	@ 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58020400 	.word	0x58020400
 8001de8:	24000520 	.word	0x24000520
 8001dec:	40020040 	.word	0x40020040
 8001df0:	40005800 	.word	0x40005800
 8001df4:	24000598 	.word	0x24000598
 8001df8:	40020028 	.word	0x40020028

08001dfc <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a55      	ldr	r2, [pc, #340]	@ (8001f60 <HAL_JPEG_MspInit+0x164>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	f040 80a3 	bne.w	8001f56 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001e10:	4b54      	ldr	r3, [pc, #336]	@ (8001f64 <HAL_JPEG_MspInit+0x168>)
 8001e12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e16:	4a53      	ldr	r2, [pc, #332]	@ (8001f64 <HAL_JPEG_MspInit+0x168>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e20:	4b50      	ldr	r3, [pc, #320]	@ (8001f64 <HAL_JPEG_MspInit+0x168>)
 8001e22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001e2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e30:	4a4e      	ldr	r2, [pc, #312]	@ (8001f6c <HAL_JPEG_MspInit+0x170>)
 8001e32:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001e34:	4b4c      	ldr	r3, [pc, #304]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e36:	2211      	movs	r2, #17
 8001e38:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001e40:	4b49      	ldr	r3, [pc, #292]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e42:	2240      	movs	r2, #64	@ 0x40
 8001e44:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e46:	4b48      	ldr	r3, [pc, #288]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001e4c:	4b46      	ldr	r3, [pc, #280]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e4e:	2202      	movs	r2, #2
 8001e50:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001e52:	4b45      	ldr	r3, [pc, #276]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001e58:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001e5e:	4b42      	ldr	r3, [pc, #264]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e60:	2280      	movs	r2, #128	@ 0x80
 8001e62:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001e64:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e6e:	2220      	movs	r2, #32
 8001e70:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001e72:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001e78:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001e84:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001e8a:	4837      	ldr	r0, [pc, #220]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001e8c:	f009 febe 	bl	800bc0c <HAL_MDMA_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001e96:	f7ff fdf3 	bl	8001a80 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	4832      	ldr	r0, [pc, #200]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001ea0:	f009 ff00 	bl	800bca4 <HAL_MDMA_ConfigPostRequestMask>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001eaa:	f7ff fde9 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f68 <HAL_JPEG_MspInit+0x16c>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001eba:	4b2d      	ldr	r3, [pc, #180]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8001f74 <HAL_JPEG_MspInit+0x178>)
 8001ebe:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ec2:	2214      	movs	r2, #20
 8001ec4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001ecc:	4b28      	ldr	r3, [pc, #160]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ece:	2240      	movs	r2, #64	@ 0x40
 8001ed0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001ed2:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001ede:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001ef2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001efa:	2204      	movs	r2, #4
 8001efc:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001efe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f04:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001f10:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001f16:	4816      	ldr	r0, [pc, #88]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f18:	f009 fe78 	bl	800bc0c <HAL_MDMA_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001f22:	f7ff fdad 	bl	8001a80 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f2c:	f009 feba 	bl	800bca4 <HAL_MDMA_ConfigPostRequestMask>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001f36:	f7ff fda3 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f40:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_JPEG_MspInit+0x174>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001f46:	2200      	movs	r2, #0
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2079      	movs	r0, #121	@ 0x79
 8001f4c:	f002 fa31 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001f50:	2079      	movs	r0, #121	@ 0x79
 8001f52:	f002 fa48 	bl	80043e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	52003000 	.word	0x52003000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	24000668 	.word	0x24000668
 8001f6c:	52000040 	.word	0x52000040
 8001f70:	240006d4 	.word	0x240006d4
 8001f74:	52000080 	.word	0x52000080

08001f78 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_SPI_MspInit+0x114>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d173      	bne.n	8002082 <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002090 <HAL_SPI_MspInit+0x118>)
 8001f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8002090 <HAL_SPI_MspInit+0x118>)
 8001fa2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fa6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001faa:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_SPI_MspInit+0x118>)
 8001fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fb4:	613b      	str	r3, [r7, #16]
 8001fb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb8:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <HAL_SPI_MspInit+0x118>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbe:	4a34      	ldr	r2, [pc, #208]	@ (8002090 <HAL_SPI_MspInit+0x118>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc8:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_SPI_MspInit+0x118>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8001fd6:	2344      	movs	r3, #68	@ 0x44
 8001fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fea:	f107 0314 	add.w	r3, r7, #20
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4828      	ldr	r0, [pc, #160]	@ (8002094 <HAL_SPI_MspInit+0x11c>)
 8001ff2:	f005 f8e1 	bl	80071b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002006:	2305      	movs	r3, #5
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	4820      	ldr	r0, [pc, #128]	@ (8002094 <HAL_SPI_MspInit+0x11c>)
 8002012:	f005 f8d1 	bl	80071b8 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002018:	4a20      	ldr	r2, [pc, #128]	@ (800209c <HAL_SPI_MspInit+0x124>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800201c:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 800201e:	2254      	movs	r2, #84	@ 0x54
 8002020:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002022:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002024:	2240      	movs	r2, #64	@ 0x40
 8002026:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002028:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 800202a:	2200      	movs	r2, #0
 800202c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800202e:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002034:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002036:	4b18      	ldr	r3, [pc, #96]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002038:	2200      	movs	r2, #0
 800203a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203c:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 800203e:	2200      	movs	r2, #0
 8002040:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002044:	2200      	movs	r2, #0
 8002046:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 800204a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800204e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002050:	4b11      	ldr	r3, [pc, #68]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002052:	2200      	movs	r2, #0
 8002054:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002056:	4810      	ldr	r0, [pc, #64]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 8002058:	f002 fa58 	bl	800450c <HAL_DMA_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 8002062:	f7ff fd0d 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a0b      	ldr	r2, [pc, #44]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 800206a:	679a      	str	r2, [r3, #120]	@ 0x78
 800206c:	4a0a      	ldr	r2, [pc, #40]	@ (8002098 <HAL_SPI_MspInit+0x120>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002072:	2200      	movs	r2, #0
 8002074:	2100      	movs	r1, #0
 8002076:	2054      	movs	r0, #84	@ 0x54
 8002078:	f002 f99b 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800207c:	2054      	movs	r0, #84	@ 0x54
 800207e:	f002 f9b2 	bl	80043e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002082:	bf00      	nop
 8002084:	3728      	adds	r7, #40	@ 0x28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40013400 	.word	0x40013400
 8002090:	58024400 	.word	0x58024400
 8002094:	58021000 	.word	0x58021000
 8002098:	240007c8 	.word	0x240007c8
 800209c:	40020010 	.word	0x40020010

080020a0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0ba      	sub	sp, #232	@ 0xe8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	22c0      	movs	r2, #192	@ 0xc0
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f017 f939 	bl	8019338 <memset>
  if(huart->Instance==USART1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a43      	ldr	r2, [pc, #268]	@ (80021d8 <HAL_UART_MspInit+0x138>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d17e      	bne.n	80021ce <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020d0:	f04f 0201 	mov.w	r2, #1
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f00c fc02 	bl	800e8f0 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80020f2:	f7ff fcc5 	bl	8001a80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020f6:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_UART_MspInit+0x13c>)
 80020f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020fc:	4a37      	ldr	r2, [pc, #220]	@ (80021dc <HAL_UART_MspInit+0x13c>)
 80020fe:	f043 0310 	orr.w	r3, r3, #16
 8002102:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002106:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <HAL_UART_MspInit+0x13c>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <HAL_UART_MspInit+0x13c>)
 8002116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800211a:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <HAL_UART_MspInit+0x13c>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002124:	4b2d      	ldr	r3, [pc, #180]	@ (80021dc <HAL_UART_MspInit+0x13c>)
 8002126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002132:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800214c:	2304      	movs	r3, #4
 800214e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002156:	4619      	mov	r1, r3
 8002158:	4821      	ldr	r0, [pc, #132]	@ (80021e0 <HAL_UART_MspInit+0x140>)
 800215a:	f005 f82d 	bl	80071b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 800215e:	4b21      	ldr	r3, [pc, #132]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002160:	4a21      	ldr	r2, [pc, #132]	@ (80021e8 <HAL_UART_MspInit+0x148>)
 8002162:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002164:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002166:	2229      	movs	r2, #41	@ 0x29
 8002168:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002178:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800217c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002180:	2200      	movs	r2, #0
 8002182:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002184:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800218a:	4b16      	ldr	r3, [pc, #88]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 800218c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002190:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002192:	4b14      	ldr	r3, [pc, #80]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 8002194:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002198:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800219a:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 800219c:	2200      	movs	r2, #0
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021a0:	4810      	ldr	r0, [pc, #64]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 80021a2:	f002 f9b3 	bl	800450c <HAL_DMA_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80021ac:	f7ff fc68 	bl	8001a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 80021b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80021b8:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <HAL_UART_MspInit+0x144>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2025      	movs	r0, #37	@ 0x25
 80021c4:	f002 f8f5 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80021c8:	2025      	movs	r0, #37	@ 0x25
 80021ca:	f002 f90c 	bl	80043e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80021ce:	bf00      	nop
 80021d0:	37e8      	adds	r7, #232	@ 0xe8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40011000 	.word	0x40011000
 80021dc:	58024400 	.word	0x58024400
 80021e0:	58020400 	.word	0x58020400
 80021e4:	240008d4 	.word	0x240008d4
 80021e8:	40020410 	.word	0x40020410

080021ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f0:	bf00      	nop
 80021f2:	e7fd      	b.n	80021f0 <NMI_Handler+0x4>

080021f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f8:	bf00      	nop
 80021fa:	e7fd      	b.n	80021f8 <HardFault_Handler+0x4>

080021fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <MemManage_Handler+0x4>

08002204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <BusFault_Handler+0x4>

0800220c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <UsageFault_Handler+0x4>

08002214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002242:	f000 fcd9 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002250:	4802      	ldr	r0, [pc, #8]	@ (800225c <DMA1_Stream0_IRQHandler+0x10>)
 8002252:	f003 fc85 	bl	8005b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	240007c8 	.word	0x240007c8

08002260 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002264:	4802      	ldr	r0, [pc, #8]	@ (8002270 <DMA1_Stream1_IRQHandler+0x10>)
 8002266:	f003 fc7b 	bl	8005b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	24000598 	.word	0x24000598

08002274 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002278:	4802      	ldr	r0, [pc, #8]	@ (8002284 <DMA1_Stream2_IRQHandler+0x10>)
 800227a:	f003 fc71 	bl	8005b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	24000520 	.word	0x24000520

08002288 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800228c:	4802      	ldr	r0, [pc, #8]	@ (8002298 <DMA1_Stream3_IRQHandler+0x10>)
 800228e:	f003 fc67 	bl	8005b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	24000400 	.word	0x24000400

0800229c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <I2C1_EV_IRQHandler+0x10>)
 80022a2:	f005 fc33 	bl	8007b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	24000478 	.word	0x24000478

080022b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <I2C1_ER_IRQHandler+0x10>)
 80022b6:	f005 fc43 	bl	8007b40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	24000478 	.word	0x24000478

080022c4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <I2C2_EV_IRQHandler+0x10>)
 80022ca:	f005 fc1f 	bl	8007b0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	240004cc 	.word	0x240004cc

080022d8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <I2C2_ER_IRQHandler+0x10>)
 80022de:	f005 fc2f 	bl	8007b40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	240004cc 	.word	0x240004cc

080022ec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <USART1_IRQHandler+0x10>)
 80022f2:	f010 f8d1 	bl	8012498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24000840 	.word	0x24000840

08002300 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <DMA2_Stream0_IRQHandler+0x10>)
 8002306:	f003 fc2b 	bl	8005b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	240008d4 	.word	0x240008d4

08002314 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <SPI4_IRQHandler+0x10>)
 800231a:	f00f fc3b 	bl	8011b94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	24000740 	.word	0x24000740

08002328 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <OTG_FS_IRQHandler+0x10>)
 800232e:	f00a f950 	bl	800c5d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	2402a858 	.word	0x2402a858

0800233c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <JPEG_IRQHandler+0x10>)
 8002342:	f007 ffdf 	bl	800a304 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000610 	.word	0x24000610

08002350 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002354:	4803      	ldr	r0, [pc, #12]	@ (8002364 <MDMA_IRQHandler+0x14>)
 8002356:	f009 fd9f 	bl	800be98 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 800235a:	4803      	ldr	r0, [pc, #12]	@ (8002368 <MDMA_IRQHandler+0x18>)
 800235c:	f009 fd9c 	bl	800be98 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	24000668 	.word	0x24000668
 8002368:	240006d4 	.word	0x240006d4

0800236c <_sbrk>:
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4a14      	ldr	r2, [pc, #80]	@ (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	@ (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
 800239c:	f016 ffe4 	bl	8019368 <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
 80023ac:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b07      	ldr	r3, [pc, #28]	@ (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	@ (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	24080000 	.word	0x24080000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	2402936c 	.word	0x2402936c
 80023d4:	2402b0a8 	.word	0x2402b0a8

080023d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023dc:	4b43      	ldr	r3, [pc, #268]	@ (80024ec <SystemInit+0x114>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	4a42      	ldr	r2, [pc, #264]	@ (80024ec <SystemInit+0x114>)
 80023e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023ec:	4b40      	ldr	r3, [pc, #256]	@ (80024f0 <SystemInit+0x118>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	2b06      	cmp	r3, #6
 80023f6:	d807      	bhi.n	8002408 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023f8:	4b3d      	ldr	r3, [pc, #244]	@ (80024f0 <SystemInit+0x118>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 030f 	bic.w	r3, r3, #15
 8002400:	4a3b      	ldr	r2, [pc, #236]	@ (80024f0 <SystemInit+0x118>)
 8002402:	f043 0307 	orr.w	r3, r3, #7
 8002406:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002408:	4b3a      	ldr	r3, [pc, #232]	@ (80024f4 <SystemInit+0x11c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a39      	ldr	r2, [pc, #228]	@ (80024f4 <SystemInit+0x11c>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002414:	4b37      	ldr	r3, [pc, #220]	@ (80024f4 <SystemInit+0x11c>)
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800241a:	4b36      	ldr	r3, [pc, #216]	@ (80024f4 <SystemInit+0x11c>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4935      	ldr	r1, [pc, #212]	@ (80024f4 <SystemInit+0x11c>)
 8002420:	4b35      	ldr	r3, [pc, #212]	@ (80024f8 <SystemInit+0x120>)
 8002422:	4013      	ands	r3, r2
 8002424:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002426:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <SystemInit+0x118>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <SystemInit+0x118>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 030f 	bic.w	r3, r3, #15
 800243a:	4a2d      	ldr	r2, [pc, #180]	@ (80024f0 <SystemInit+0x118>)
 800243c:	f043 0307 	orr.w	r3, r3, #7
 8002440:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002442:	4b2c      	ldr	r3, [pc, #176]	@ (80024f4 <SystemInit+0x11c>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002448:	4b2a      	ldr	r3, [pc, #168]	@ (80024f4 <SystemInit+0x11c>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800244e:	4b29      	ldr	r3, [pc, #164]	@ (80024f4 <SystemInit+0x11c>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002454:	4b27      	ldr	r3, [pc, #156]	@ (80024f4 <SystemInit+0x11c>)
 8002456:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <SystemInit+0x124>)
 8002458:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800245a:	4b26      	ldr	r3, [pc, #152]	@ (80024f4 <SystemInit+0x11c>)
 800245c:	4a28      	ldr	r2, [pc, #160]	@ (8002500 <SystemInit+0x128>)
 800245e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002460:	4b24      	ldr	r3, [pc, #144]	@ (80024f4 <SystemInit+0x11c>)
 8002462:	4a28      	ldr	r2, [pc, #160]	@ (8002504 <SystemInit+0x12c>)
 8002464:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002466:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <SystemInit+0x11c>)
 8002468:	2200      	movs	r2, #0
 800246a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800246c:	4b21      	ldr	r3, [pc, #132]	@ (80024f4 <SystemInit+0x11c>)
 800246e:	4a25      	ldr	r2, [pc, #148]	@ (8002504 <SystemInit+0x12c>)
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002472:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <SystemInit+0x11c>)
 8002474:	2200      	movs	r2, #0
 8002476:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002478:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <SystemInit+0x11c>)
 800247a:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <SystemInit+0x12c>)
 800247c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <SystemInit+0x11c>)
 8002480:	2200      	movs	r2, #0
 8002482:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <SystemInit+0x11c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <SystemInit+0x11c>)
 800248a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800248e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002490:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <SystemInit+0x11c>)
 8002492:	2200      	movs	r2, #0
 8002494:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <SystemInit+0x130>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <SystemInit+0x134>)
 800249c:	4013      	ands	r3, r2
 800249e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024a2:	d202      	bcs.n	80024aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <SystemInit+0x138>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80024aa:	4b12      	ldr	r3, [pc, #72]	@ (80024f4 <SystemInit+0x11c>)
 80024ac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d113      	bne.n	80024e0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024b8:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <SystemInit+0x11c>)
 80024ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024be:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <SystemInit+0x11c>)
 80024c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80024c8:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <SystemInit+0x13c>)
 80024ca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80024ce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <SystemInit+0x11c>)
 80024d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <SystemInit+0x11c>)
 80024d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80024dc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00
 80024f0:	52002000 	.word	0x52002000
 80024f4:	58024400 	.word	0x58024400
 80024f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80024fc:	02020200 	.word	0x02020200
 8002500:	01ff0000 	.word	0x01ff0000
 8002504:	01010280 	.word	0x01010280
 8002508:	5c001000 	.word	0x5c001000
 800250c:	ffff0000 	.word	0xffff0000
 8002510:	51008108 	.word	0x51008108
 8002514:	52004000 	.word	0x52004000

08002518 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <ExitRun0Mode+0x2c>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <ExitRun0Mode+0x2c>)
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002528:	bf00      	nop
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <ExitRun0Mode+0x2c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f9      	beq.n	800252a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	58024800 	.word	0x58024800

08002548 <Reset_Handler>:
 8002548:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002584 <LoopFillZerobss+0xe>
 800254c:	f7ff ffe4 	bl	8002518 <ExitRun0Mode>
 8002550:	f7ff ff42 	bl	80023d8 <SystemInit>
 8002554:	480c      	ldr	r0, [pc, #48]	@ (8002588 <LoopFillZerobss+0x12>)
 8002556:	490d      	ldr	r1, [pc, #52]	@ (800258c <LoopFillZerobss+0x16>)
 8002558:	4a0d      	ldr	r2, [pc, #52]	@ (8002590 <LoopFillZerobss+0x1a>)
 800255a:	2300      	movs	r3, #0
 800255c:	e002      	b.n	8002564 <LoopCopyDataInit>

0800255e <CopyDataInit>:
 800255e:	58d4      	ldr	r4, [r2, r3]
 8002560:	50c4      	str	r4, [r0, r3]
 8002562:	3304      	adds	r3, #4

08002564 <LoopCopyDataInit>:
 8002564:	18c4      	adds	r4, r0, r3
 8002566:	428c      	cmp	r4, r1
 8002568:	d3f9      	bcc.n	800255e <CopyDataInit>
 800256a:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <LoopFillZerobss+0x1e>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	@ (8002598 <LoopFillZerobss+0x22>)
 800256e:	2300      	movs	r3, #0
 8002570:	e001      	b.n	8002576 <LoopFillZerobss>

08002572 <FillZerobss>:
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	3204      	adds	r2, #4

08002576 <LoopFillZerobss>:
 8002576:	42a2      	cmp	r2, r4
 8002578:	d3fb      	bcc.n	8002572 <FillZerobss>
 800257a:	f016 fefb 	bl	8019374 <__libc_init_array>
 800257e:	f7fe f89d 	bl	80006bc <main>
 8002582:	4770      	bx	lr
 8002584:	24080000 	.word	0x24080000
 8002588:	24000000 	.word	0x24000000
 800258c:	24000380 	.word	0x24000380
 8002590:	0801a244 	.word	0x0801a244
 8002594:	24000380 	.word	0x24000380
 8002598:	2402b0a4 	.word	0x2402b0a4

0800259c <ADC3_IRQHandler>:
 800259c:	e7fe      	b.n	800259c <ADC3_IRQHandler>

0800259e <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af02      	add	r7, sp, #8
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	460b      	mov	r3, r1
 80025a8:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	733b      	strb	r3, [r7, #12]
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	b299      	uxth	r1, r3
 80025be:	f107 020c 	add.w	r2, r7, #12
 80025c2:	2364      	movs	r3, #100	@ 0x64
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2302      	movs	r3, #2
 80025c8:	f005 f874 	bl	80076b4 <HAL_I2C_Master_Transmit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <SSD1306_SendCommand+0x38>
		return ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 80025f8:	2312      	movs	r3, #18
 80025fa:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 80025fc:	2301      	movs	r3, #1
 80025fe:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002600:	e02c      	b.n	800265c <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	4a1a      	ldr	r2, [pc, #104]	@ (8002670 <SSD1306_Init+0x90>)
 8002606:	5cd3      	ldrb	r3, [r2, r3]
 8002608:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 800260a:	897b      	ldrh	r3, [r7, #10]
 800260c:	3301      	adds	r3, #1
 800260e:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <SSD1306_Init+0x90>)
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	4619      	mov	r1, r3
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ffc0 	bl	800259e <SSD1306_SendCommand>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <SSD1306_Init+0x4a>
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	e01e      	b.n	8002668 <SSD1306_Init+0x88>
	        cmd_idx++;
 800262a:	897b      	ldrh	r3, [r7, #10]
 800262c:	3301      	adds	r3, #1
 800262e:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002630:	e00f      	b.n	8002652 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	4a0e      	ldr	r2, [pc, #56]	@ (8002670 <SSD1306_Init+0x90>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffaf 	bl	800259e <SSD1306_SendCommand>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <SSD1306_Init+0x6c>
 8002646:	897b      	ldrh	r3, [r7, #10]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e00d      	b.n	8002668 <SSD1306_Init+0x88>
	            cmd_idx++;
 800264c:	897b      	ldrh	r3, [r7, #10]
 800264e:	3301      	adds	r3, #1
 8002650:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 8002652:	89bb      	ldrh	r3, [r7, #12]
 8002654:	1e5a      	subs	r2, r3, #1
 8002656:	81ba      	strh	r2, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ea      	bne.n	8002632 <SSD1306_Init+0x52>
	while (n_commands--) {
 800265c:	89fb      	ldrh	r3, [r7, #14]
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	81fa      	strh	r2, [r7, #14]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1cd      	bne.n	8002602 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	08019cb8 	.word	0x08019cb8

08002674 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f016 fe53 	bl	8019338 <memset>
	return 0;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2240      	movs	r2, #64	@ 0x40
 80026aa:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	791b      	ldrb	r3, [r3, #4]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	b299      	uxth	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	f240 4301 	movw	r3, #1025	@ 0x401
 80026c0:	f005 f910 	bl	80078e4 <HAL_I2C_Master_Transmit_DMA>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d109      	bne.n	80026f6 <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	8a1b      	ldrh	r3, [r3, #16]
 80026e6:	09db      	lsrs	r3, r3, #7
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e036      	b.n	8002764 <SSD1306_DrawChar+0x94>
	}
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	2b1f      	cmp	r3, #31
 80026fa:	d902      	bls.n	8002702 <SSD1306_DrawChar+0x32>
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8002700:	d901      	bls.n	8002706 <SSD1306_DrawChar+0x36>
 8002702:	2301      	movs	r3, #1
 8002704:	e02e      	b.n	8002764 <SSD1306_DrawChar+0x94>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8002706:	78fb      	ldrb	r3, [r7, #3]
 8002708:	3b20      	subs	r3, #32
 800270a:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	2b60      	cmp	r3, #96	@ 0x60
 8002710:	d906      	bls.n	8002720 <SSD1306_DrawChar+0x50>
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	2b7a      	cmp	r3, #122	@ 0x7a
 8002716:	d803      	bhi.n	8002720 <SSD1306_DrawChar+0x50>
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	3b20      	subs	r3, #32
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e005      	b.n	800272c <SSD1306_DrawChar+0x5c>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	2b7a      	cmp	r3, #122	@ 0x7a
 8002724:	d902      	bls.n	800272c <SSD1306_DrawChar+0x5c>
 8002726:	7bfb      	ldrb	r3, [r7, #15]
 8002728:	3b1a      	subs	r3, #26
 800272a:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4a0e      	ldr	r2, [pc, #56]	@ (800276c <SSD1306_DrawChar+0x9c>)
 8002732:	5cd3      	ldrb	r3, [r2, r3]
 8002734:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	8a12      	ldrh	r2, [r2, #16]
 800273e:	1898      	adds	r0, r3, r2
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	3301      	adds	r3, #1
 8002746:	4a09      	ldr	r2, [pc, #36]	@ (800276c <SSD1306_DrawChar+0x9c>)
 8002748:	4413      	add	r3, r2
 800274a:	7bba      	ldrb	r2, [r7, #14]
 800274c:	4619      	mov	r1, r3
 800274e:	f016 fe3f 	bl	80193d0 <memcpy>
	hssd->str_cursor += len;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	8a1a      	ldrh	r2, [r3, #16]
 8002756:	7bbb      	ldrb	r3, [r7, #14]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4413      	add	r3, r2
 800275c:	b29a      	uxth	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	08019cec 	.word	0x08019cec

08002770 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	71fb      	strb	r3, [r7, #7]
	uint8_t start_line = hssd->str_cursor / 120;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8a1b      	ldrh	r3, [r3, #16]
 8002782:	4a18      	ldr	r2, [pc, #96]	@ (80027e4 <SSD1306_DrawString+0x74>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	b29b      	uxth	r3, r3
 800278c:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < length; i++) {
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]
 8002792:	e01b      	b.n	80027cc <SSD1306_DrawString+0x5c>
		if (hssd->str_cursor / 128 > start_line) break;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8a1b      	ldrh	r3, [r3, #16]
 8002798:	09db      	lsrs	r3, r3, #7
 800279a:	b29a      	uxth	r2, r3
 800279c:	7dbb      	ldrb	r3, [r7, #22]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d818      	bhi.n	80027d6 <SSD1306_DrawString+0x66>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	4413      	add	r3, r2
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff ff8e 	bl	80026d0 <SSD1306_DrawChar>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <SSD1306_DrawString+0x56>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8a1b      	ldrh	r3, [r3, #16]
 80027be:	3306      	adds	r3, #6
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	3301      	adds	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
 80027cc:	7dfa      	ldrb	r2, [r7, #23]
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d3df      	bcc.n	8002794 <SSD1306_DrawString+0x24>
 80027d4:	e000      	b.n	80027d8 <SSD1306_DrawString+0x68>
		if (hssd->str_cursor / 128 > start_line) break;
 80027d6:	bf00      	nop
	}

	return SUCCESS;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	88888889 	.word	0x88888889

080027e8 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6898      	ldr	r0, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	899b      	ldrh	r3, [r3, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	4619      	mov	r1, r3
 8002800:	f004 fea2 	bl	8007548 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	1cf9      	adds	r1, r7, #3
 800280a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800280e:	2201      	movs	r2, #1
 8002810:	f00e fe90 	bl	8011534 <HAL_SPI_Transmit>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <ST7789_SendByte_Command+0x36>
		return ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6898      	ldr	r0, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	899b      	ldrh	r3, [r3, #12]
 800283c:	2201      	movs	r2, #1
 800283e:	4619      	mov	r1, r3
 8002840:	f004 fe82 	bl	8007548 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	1cf9      	adds	r1, r7, #3
 800284a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800284e:	2201      	movs	r2, #1
 8002850:	f00e fe70 	bl	8011534 <HAL_SPI_Transmit>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <ST7789_SendByte_Data+0x36>
		return ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

	hst7789->updating_sector = 0;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f107 0109 	add.w	r1, r7, #9
 8002882:	2201      	movs	r2, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f00f f843 	bl	8011910 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 800288a:	200a      	movs	r0, #10
 800288c:	f000 f9d4 	bl	8002c38 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8002890:	2313      	movs	r3, #19
 8002892:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002894:	2301      	movs	r3, #1
 8002896:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002898:	e02c      	b.n	80028f4 <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	4a1a      	ldr	r2, [pc, #104]	@ (8002908 <ST7789_Init+0xa0>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	3301      	adds	r3, #1
 80028a6:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80028a8:	897b      	ldrh	r3, [r7, #10]
 80028aa:	4a17      	ldr	r2, [pc, #92]	@ (8002908 <ST7789_Init+0xa0>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	4619      	mov	r1, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff99 	bl	80027e8 <ST7789_SendByte_Command>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <ST7789_Init+0x5a>
 80028bc:	897b      	ldrh	r3, [r7, #10]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	e01e      	b.n	8002900 <ST7789_Init+0x98>
	    cmd_idx++;
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	3301      	adds	r3, #1
 80028c6:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 80028c8:	e00f      	b.n	80028ea <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <ST7789_Init+0xa0>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffa8 	bl	8002828 <ST7789_SendByte_Data>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <ST7789_Init+0x7c>
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	e00d      	b.n	8002900 <ST7789_Init+0x98>
				cmd_idx++;
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	3301      	adds	r3, #1
 80028e8:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 80028ea:	89bb      	ldrh	r3, [r7, #12]
 80028ec:	1e5a      	subs	r2, r3, #1
 80028ee:	81ba      	strh	r2, [r7, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ea      	bne.n	80028ca <ST7789_Init+0x62>
	while (n_commands--) {
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	1e5a      	subs	r2, r3, #1
 80028f8:	81fa      	strh	r2, [r7, #14]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1cd      	bne.n	800289a <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	08019f14 	.word	0x08019f14

0800290c <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	4608      	mov	r0, r1
 8002916:	4611      	mov	r1, r2
 8002918:	461a      	mov	r2, r3
 800291a:	4603      	mov	r3, r0
 800291c:	817b      	strh	r3, [r7, #10]
 800291e:	460b      	mov	r3, r1
 8002920:	813b      	strh	r3, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8002926:	212a      	movs	r1, #42	@ 0x2a
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff ff5d 	bl	80027e8 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 800292e:	897b      	ldrh	r3, [r7, #10]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	b29b      	uxth	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	4619      	mov	r1, r3
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff ff75 	bl	8002828 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4619      	mov	r1, r3
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff ff6f 	bl	8002828 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	3b01      	subs	r3, #1
 800294e:	121b      	asrs	r3, r3, #8
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ff67 	bl	8002828 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	4619      	mov	r1, r3
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7ff ff5f 	bl	8002828 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 800296a:	212b      	movs	r1, #43	@ 0x2b
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff ff3b 	bl	80027e8 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	b29b      	uxth	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff ff53 	bl	8002828 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 8002982:	893b      	ldrh	r3, [r7, #8]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f7ff ff4d 	bl	8002828 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 800298e:	8b3b      	ldrh	r3, [r7, #24]
 8002990:	3b01      	subs	r3, #1
 8002992:	121b      	asrs	r3, r3, #8
 8002994:	b2db      	uxtb	r3, r3
 8002996:	4619      	mov	r1, r3
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff45 	bl	8002828 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 800299e:	8b3b      	ldrh	r3, [r7, #24]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	4619      	mov	r1, r3
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ff3d 	bl	8002828 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 80029ae:	212c      	movs	r1, #44	@ 0x2c
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ff19 	bl	80027e8 <ST7789_SendByte_Command>
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*2);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	78f9      	ldrb	r1, [r7, #3]
 80029d0:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80029d4:	4618      	mov	r0, r3
 80029d6:	f016 fcaf 	bl	8019338 <memset>
	return SUCCESS;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <ST7789_UpdateSector+0x18>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e04e      	b.n	8002a9a <ST7789_UpdateSector+0xb6>
	if (screen_section > 2) return ERROR;
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <ST7789_UpdateSector+0x22>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e049      	b.n	8002a9a <ST7789_UpdateSector+0xb6>

	hst7789->updating_sector = screen_section;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	751a      	strb	r2, [r3, #20]

	// Flag as busy
	hst7789->spi_state = 1;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	461a      	mov	r2, r3
 8002a18:	0152      	lsls	r2, r2, #5
 8002a1a:	1ad2      	subs	r2, r2, r3
 8002a1c:	0092      	lsls	r2, r2, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	23f0      	movs	r3, #240	@ 0xf0
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff6d 	bl	800290c <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6898      	ldr	r0, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	899b      	ldrh	r3, [r3, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f004 fd83 	bl	8007548 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d013      	beq.n	8002a70 <ST7789_UpdateSector+0x8c>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002a56:	fb01 f202 	mul.w	r2, r1, r2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002a60:	4619      	mov	r1, r3
 8002a62:	f00e ff55 	bl	8011910 <HAL_SPI_Transmit_DMA>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d015      	beq.n	8002a98 <ST7789_UpdateSector+0xb4>
			return ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e014      	b.n	8002a9a <ST7789_UpdateSector+0xb6>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002a7e:	fb01 f202 	mul.w	r2, r1, r2
 8002a82:	4413      	add	r3, r2
 8002a84:	f248 3240 	movw	r2, #33600	@ 0x8340
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f00e ff41 	bl	8011910 <HAL_SPI_Transmit_DMA>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <ST7789_UpdateSector+0xb4>
			return ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <ST7789_UpdateSector+0xb6>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->updating_sector)) return ERROR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7d1b      	ldrb	r3, [r3, #20]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ff96 	bl	80029e4 <ST7789_UpdateSector>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <ST7789_UpdateAutomatic+0x1e>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e013      	b.n	8002aea <ST7789_UpdateAutomatic+0x46>

	// increment the sector to be updated
	hst7789->updating_sector++;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	7d1b      	ldrb	r3, [r3, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	751a      	strb	r2, [r3, #20]
	hst7789->updating_sector %= 3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7d1a      	ldrb	r2, [r3, #20]
 8002ad2:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <ST7789_UpdateAutomatic+0x50>)
 8002ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad8:	0859      	lsrs	r1, r3, #1
 8002ada:	460b      	mov	r3, r1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	440b      	add	r3, r1
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	751a      	strb	r2, [r3, #20]

	return SUCCESS;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	aaaaaaab 	.word	0xaaaaaaab

08002af8 <ST7789_DMATransmitCplt>:


void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	711a      	strb	r2, [r3, #4]
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b1a:	2003      	movs	r0, #3
 8002b1c:	f001 fc3e 	bl	800439c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b20:	f00b fd10 	bl	800e544 <HAL_RCC_GetSysClockFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_Init+0x68>)
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	4913      	ldr	r1, [pc, #76]	@ (8002b80 <HAL_Init+0x6c>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002b7c <HAL_Init+0x68>)
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a0e      	ldr	r2, [pc, #56]	@ (8002b80 <HAL_Init+0x6c>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	4a0b      	ldr	r2, [pc, #44]	@ (8002b84 <HAL_Init+0x70>)
 8002b56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b58:	4a0b      	ldr	r2, [pc, #44]	@ (8002b88 <HAL_Init+0x74>)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b5e:	200f      	movs	r0, #15
 8002b60:	f000 f814 	bl	8002b8c <HAL_InitTick>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e002      	b.n	8002b74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b6e:	f7fe ff8d 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	58024400 	.word	0x58024400
 8002b80:	08019ca8 	.word	0x08019ca8
 8002b84:	24000230 	.word	0x24000230
 8002b88:	2400022c 	.word	0x2400022c

08002b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_InitTick+0x60>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e021      	b.n	8002be4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_InitTick+0x64>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <HAL_InitTick+0x60>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 fc23 	bl	8004402 <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bd4:	f001 fbed 	bl	80043b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <HAL_InitTick+0x68>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	24000238 	.word	0x24000238
 8002bf0:	2400022c 	.word	0x2400022c
 8002bf4:	24000234 	.word	0x24000234

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	24000238 	.word	0x24000238
 8002c1c:	24029370 	.word	0x24029370

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	24029370 	.word	0x24029370

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	24000238 	.word	0x24000238

08002c80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c84:	4b03      	ldr	r3, [pc, #12]	@ (8002c94 <HAL_GetREVID+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0c1b      	lsrs	r3, r3, #16
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	5c001000 	.word	0x5c001000

08002c98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d107      	bne.n	8002d24 <LL_ADC_SetChannelPreselection+0x24>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	f003 031f 	and.w	r3, r3, #31
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	e015      	b.n	8002d50 <LL_ADC_SetChannelPreselection+0x50>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	69d2      	ldr	r2, [r2, #28]
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002d5a:	bf00      	nop
 8002d5c:	371c      	adds	r7, #28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b087      	sub	sp, #28
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3360      	adds	r3, #96	@ 0x60
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	430b      	orrs	r3, r1
 8002d94:	431a      	orrs	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	611a      	str	r2, [r3, #16]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	3360      	adds	r3, #96	@ 0x60
 8002de8:	461a      	mov	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	601a      	str	r2, [r3, #0]
  }
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3330      	adds	r3, #48	@ 0x30
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	0a1b      	lsrs	r3, r3, #8
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	f003 031f 	and.w	r3, r3, #31
 8002e5e:	211f      	movs	r1, #31
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	f003 011f 	and.w	r1, r3, #31
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e80:	bf00      	nop
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	60da      	str	r2, [r3, #12]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b087      	sub	sp, #28
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3314      	adds	r3, #20
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0e5b      	lsrs	r3, r3, #25
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	4413      	add	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0d1b      	lsrs	r3, r3, #20
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2107      	movs	r1, #7
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	0d1b      	lsrs	r3, r3, #20
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002efc:	bf00      	nop
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f20:	43db      	mvns	r3, r3
 8002f22:	401a      	ands	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f003 0318 	and.w	r3, r3, #24
 8002f2a:	4908      	ldr	r1, [pc, #32]	@ (8002f4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f2c:	40d9      	lsrs	r1, r3
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	400b      	ands	r3, r1
 8002f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f3e:	bf00      	nop
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	000fffff 	.word	0x000fffff

08002f50 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 031f 	and.w	r3, r3, #31
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b04      	ldr	r3, [pc, #16]	@ (8002f8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6093      	str	r3, [r2, #8]
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	5fffffc0 	.word	0x5fffffc0

08002f90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fa0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fa4:	d101      	bne.n	8002faa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <LL_ADC_EnableInternalRegulator+0x24>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	6fffffc0 	.word	0x6fffffc0

08002fe0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ff4:	d101      	bne.n	8002ffa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	4b05      	ldr	r3, [pc, #20]	@ (800302c <LL_ADC_Enable+0x24>)
 8003016:	4013      	ands	r3, r2
 8003018:	f043 0201 	orr.w	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	7fffffc0 	.word	0x7fffffc0

08003030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <LL_ADC_IsEnabled+0x18>
 8003044:	2301      	movs	r3, #1
 8003046:	e000      	b.n	800304a <LL_ADC_IsEnabled+0x1a>
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	4b05      	ldr	r3, [pc, #20]	@ (800307c <LL_ADC_REG_StartConversion+0x24>)
 8003066:	4013      	ands	r3, r2
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	7fffffc0 	.word	0x7fffffc0

08003080 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b04      	cmp	r3, #4
 8003092:	d101      	bne.n	8003098 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d101      	bne.n	80030be <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e18f      	b.n	8003406 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fe fce3 	bl	8001ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff ff3f 	bl	8002f90 <LL_ADC_IsDeepPowerDownEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff25 	bl	8002f6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ff5a 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d114      	bne.n	800315c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff ff3e 	bl	8002fb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800313c:	4b87      	ldr	r3, [pc, #540]	@ (800335c <HAL_ADC_Init+0x290>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	099b      	lsrs	r3, r3, #6
 8003142:	4a87      	ldr	r2, [pc, #540]	@ (8003360 <HAL_ADC_Init+0x294>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	3301      	adds	r3, #1
 800314c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800314e:	e002      	b.n	8003156 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3b01      	subs	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f9      	bne.n	8003150 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff3d 	bl	8002fe0 <LL_ADC_IsInternalRegulatorEnabled>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10d      	bne.n	8003188 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003170:	f043 0210 	orr.w	r2, r3, #16
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ff77 	bl	8003080 <LL_ADC_REG_IsConversionOngoing>
 8003192:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 8129 	bne.w	80033f4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 8125 	bne.w	80033f4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff ff36 	bl	8003030 <LL_ADC_IsEnabled>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d136      	bne.n	8003238 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a65      	ldr	r2, [pc, #404]	@ (8003364 <HAL_ADC_Init+0x298>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_ADC_Init+0x112>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a63      	ldr	r2, [pc, #396]	@ (8003368 <HAL_ADC_Init+0x29c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10e      	bne.n	80031fc <HAL_ADC_Init+0x130>
 80031de:	4861      	ldr	r0, [pc, #388]	@ (8003364 <HAL_ADC_Init+0x298>)
 80031e0:	f7ff ff26 	bl	8003030 <LL_ADC_IsEnabled>
 80031e4:	4604      	mov	r4, r0
 80031e6:	4860      	ldr	r0, [pc, #384]	@ (8003368 <HAL_ADC_Init+0x29c>)
 80031e8:	f7ff ff22 	bl	8003030 <LL_ADC_IsEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	4323      	orrs	r3, r4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf0c      	ite	eq
 80031f4:	2301      	moveq	r3, #1
 80031f6:	2300      	movne	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e008      	b.n	800320e <HAL_ADC_Init+0x142>
 80031fc:	485b      	ldr	r0, [pc, #364]	@ (800336c <HAL_ADC_Init+0x2a0>)
 80031fe:	f7ff ff17 	bl	8003030 <LL_ADC_IsEnabled>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d012      	beq.n	8003238 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a53      	ldr	r2, [pc, #332]	@ (8003364 <HAL_ADC_Init+0x298>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d004      	beq.n	8003226 <HAL_ADC_Init+0x15a>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a51      	ldr	r2, [pc, #324]	@ (8003368 <HAL_ADC_Init+0x29c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d101      	bne.n	800322a <HAL_ADC_Init+0x15e>
 8003226:	4a52      	ldr	r2, [pc, #328]	@ (8003370 <HAL_ADC_Init+0x2a4>)
 8003228:	e000      	b.n	800322c <HAL_ADC_Init+0x160>
 800322a:	4a52      	ldr	r2, [pc, #328]	@ (8003374 <HAL_ADC_Init+0x2a8>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f7ff fd30 	bl	8002c98 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003238:	f7ff fd22 	bl	8002c80 <HAL_GetREVID>
 800323c:	4603      	mov	r3, r0
 800323e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003242:	4293      	cmp	r3, r2
 8003244:	d914      	bls.n	8003270 <HAL_ADC_Init+0x1a4>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d110      	bne.n	8003270 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7d5b      	ldrb	r3, [r3, #21]
 8003252:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003258:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800325e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7f1b      	ldrb	r3, [r3, #28]
 8003264:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003266:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003268:	f043 030c 	orr.w	r3, r3, #12
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	e00d      	b.n	800328c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7d5b      	ldrb	r3, [r3, #21]
 8003274:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800327a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003280:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7f1b      	ldrb	r3, [r3, #28]
 8003286:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7f1b      	ldrb	r3, [r3, #28]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d106      	bne.n	80032a2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	3b01      	subs	r3, #1
 800329a:	045b      	lsls	r3, r3, #17
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ae:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	4b2c      	ldr	r3, [pc, #176]	@ (8003378 <HAL_ADC_Init+0x2ac>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fed2 	bl	8003080 <LL_ADC_REG_IsConversionOngoing>
 80032dc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff fedf 	bl	80030a6 <LL_ADC_INJ_IsConversionOngoing>
 80032e8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d15f      	bne.n	80033b0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d15c      	bne.n	80033b0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7d1b      	ldrb	r3, [r3, #20]
 80032fa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <HAL_ADC_Init+0x2b0>)
 800330c:	4013      	ands	r3, r2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	430b      	orrs	r3, r1
 8003316:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800331e:	2b01      	cmp	r3, #1
 8003320:	d130      	bne.n	8003384 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003326:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <HAL_ADC_Init+0x2b4>)
 8003330:	4013      	ands	r3, r2
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003336:	3a01      	subs	r2, #1
 8003338:	0411      	lsls	r1, r2, #16
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800333e:	4311      	orrs	r1, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003344:	4311      	orrs	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800334a:	430a      	orrs	r2, r1
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0201 	orr.w	r2, r2, #1
 8003356:	611a      	str	r2, [r3, #16]
 8003358:	e01c      	b.n	8003394 <HAL_ADC_Init+0x2c8>
 800335a:	bf00      	nop
 800335c:	2400022c 	.word	0x2400022c
 8003360:	053e2d63 	.word	0x053e2d63
 8003364:	40022000 	.word	0x40022000
 8003368:	40022100 	.word	0x40022100
 800336c:	58026000 	.word	0x58026000
 8003370:	40022300 	.word	0x40022300
 8003374:	58026300 	.word	0x58026300
 8003378:	fff0c003 	.word	0xfff0c003
 800337c:	ffffbffc 	.word	0xffffbffc
 8003380:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fd16 	bl	8003ddc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d10c      	bne.n	80033d2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	f023 010f 	bic.w	r1, r3, #15
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80033d0:	e007      	b.n	80033e2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 020f 	bic.w	r2, r2, #15
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80033f2:	e007      	b.n	8003404 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	f043 0210 	orr.w	r2, r3, #16
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003404:	7ffb      	ldrb	r3, [r7, #31]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	@ 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop

08003410 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a55      	ldr	r2, [pc, #340]	@ (8003578 <HAL_ADC_Start_DMA+0x168>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d004      	beq.n	8003430 <HAL_ADC_Start_DMA+0x20>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a54      	ldr	r2, [pc, #336]	@ (800357c <HAL_ADC_Start_DMA+0x16c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_ADC_Start_DMA+0x24>
 8003430:	4b53      	ldr	r3, [pc, #332]	@ (8003580 <HAL_ADC_Start_DMA+0x170>)
 8003432:	e000      	b.n	8003436 <HAL_ADC_Start_DMA+0x26>
 8003434:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_ADC_Start_DMA+0x174>)
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff fd8a 	bl	8002f50 <LL_ADC_GetMultimode>
 800343c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fe1c 	bl	8003080 <LL_ADC_REG_IsConversionOngoing>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 808c 	bne.w	8003568 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_ADC_Start_DMA+0x4e>
 800345a:	2302      	movs	r3, #2
 800345c:	e087      	b.n	800356e <HAL_ADC_Start_DMA+0x15e>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b05      	cmp	r3, #5
 8003470:	d002      	beq.n	8003478 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b09      	cmp	r3, #9
 8003476:	d170      	bne.n	800355a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fb91 	bl	8003ba0 <ADC_Enable>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d163      	bne.n	8003550 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800348c:	4b3e      	ldr	r3, [pc, #248]	@ (8003588 <HAL_ADC_Start_DMA+0x178>)
 800348e:	4013      	ands	r3, r2
 8003490:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a37      	ldr	r2, [pc, #220]	@ (800357c <HAL_ADC_Start_DMA+0x16c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d002      	beq.n	80034a8 <HAL_ADC_Start_DMA+0x98>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	e000      	b.n	80034aa <HAL_ADC_Start_DMA+0x9a>
 80034a8:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <HAL_ADC_Start_DMA+0x168>)
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d002      	beq.n	80034b8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f023 0206 	bic.w	r2, r3, #6
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
 80034dc:	e002      	b.n	80034e4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034e8:	4a28      	ldr	r2, [pc, #160]	@ (800358c <HAL_ADC_Start_DMA+0x17c>)
 80034ea:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f0:	4a27      	ldr	r2, [pc, #156]	@ (8003590 <HAL_ADC_Start_DMA+0x180>)
 80034f2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f8:	4a26      	ldr	r2, [pc, #152]	@ (8003594 <HAL_ADC_Start_DMA+0x184>)
 80034fa:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	221c      	movs	r2, #28
 8003502:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0210 	orr.w	r2, r2, #16
 800351a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7ff fcb0 	bl	8002e8c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3340      	adds	r3, #64	@ 0x40
 8003536:	4619      	mov	r1, r3
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f001 fb42 	bl	8004bc4 <HAL_DMA_Start_IT>
 8003540:	4603      	mov	r3, r0
 8003542:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fd85 	bl	8003058 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800354e:	e00d      	b.n	800356c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003558:	e008      	b.n	800356c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003566:	e001      	b.n	800356c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003568:	2302      	movs	r3, #2
 800356a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40022100 	.word	0x40022100
 8003580:	40022300 	.word	0x40022300
 8003584:	58026300 	.word	0x58026300
 8003588:	fffff0fe 	.word	0xfffff0fe
 800358c:	08003cb5 	.word	0x08003cb5
 8003590:	08003d8d 	.word	0x08003d8d
 8003594:	08003da9 	.word	0x08003da9

08003598 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b08d      	sub	sp, #52	@ 0x34
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	4a65      	ldr	r2, [pc, #404]	@ (8003770 <HAL_ADC_ConfigChannel+0x1b0>)
 80035da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x2a>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e2c7      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x5ba>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fd42 	bl	8003080 <LL_ADC_REG_IsConversionOngoing>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f040 82ac 	bne.w	8003b5c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db2c      	blt.n	8003666 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003614:	2b00      	cmp	r3, #0
 8003616:	d108      	bne.n	800362a <HAL_ADC_ConfigChannel+0x6a>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	f003 031f 	and.w	r3, r3, #31
 8003622:	2201      	movs	r2, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	e016      	b.n	8003658 <HAL_ADC_ConfigChannel+0x98>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	613b      	str	r3, [r7, #16]
  return result;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003642:	2320      	movs	r3, #32
 8003644:	e003      	b.n	800364e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2201      	movs	r2, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	69d1      	ldr	r1, [r2, #28]
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6812      	ldr	r2, [r2, #0]
 8003662:	430b      	orrs	r3, r1
 8003664:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	f7ff fbde 	bl	8002e34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fcff 	bl	8003080 <LL_ADC_REG_IsConversionOngoing>
 8003682:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fd0c 	bl	80030a6 <LL_ADC_INJ_IsConversionOngoing>
 800368e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80b8 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 80b4 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f7ff fc00 	bl	8002eb2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036b2:	4b30      	ldr	r3, [pc, #192]	@ (8003774 <HAL_ADC_ConfigChannel+0x1b4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80036ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036be:	d10b      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x118>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695a      	ldr	r2, [r3, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	089b      	lsrs	r3, r3, #2
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	e01d      	b.n	8003714 <HAL_ADC_ConfigChannel+0x154>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x13e>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	e00a      	b.n	8003714 <HAL_ADC_ConfigChannel+0x154>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	089b      	lsrs	r3, r3, #2
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b04      	cmp	r3, #4
 800371c:	d02c      	beq.n	8003778 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6919      	ldr	r1, [r3, #16]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f7ff fb1b 	bl	8002d66 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6919      	ldr	r1, [r3, #16]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	7e5b      	ldrb	r3, [r3, #25]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d102      	bne.n	8003746 <HAL_ADC_ConfigChannel+0x186>
 8003740:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003744:	e000      	b.n	8003748 <HAL_ADC_ConfigChannel+0x188>
 8003746:	2300      	movs	r3, #0
 8003748:	461a      	mov	r2, r3
 800374a:	f7ff fb45 	bl	8002dd8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	6919      	ldr	r1, [r3, #16]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	7e1b      	ldrb	r3, [r3, #24]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d102      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x1a4>
 800375e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003762:	e000      	b.n	8003766 <HAL_ADC_ConfigChannel+0x1a6>
 8003764:	2300      	movs	r3, #0
 8003766:	461a      	mov	r2, r3
 8003768:	f7ff fb1d 	bl	8002da6 <LL_ADC_SetDataRightShift>
 800376c:	e04c      	b.n	8003808 <HAL_ADC_ConfigChannel+0x248>
 800376e:	bf00      	nop
 8003770:	47ff0000 	.word	0x47ff0000
 8003774:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	069b      	lsls	r3, r3, #26
 8003788:	429a      	cmp	r2, r3
 800378a:	d107      	bne.n	800379c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800379a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	069b      	lsls	r3, r3, #26
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d107      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037be:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	069b      	lsls	r3, r3, #26
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037e2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	069b      	lsls	r3, r3, #26
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d107      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003806:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fc0f 	bl	8003030 <LL_ADC_IsEnabled>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f040 81aa 	bne.w	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6819      	ldr	r1, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f7ff fb6e 	bl	8002f08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a87      	ldr	r2, [pc, #540]	@ (8003a50 <HAL_ADC_ConfigChannel+0x490>)
 8003832:	4293      	cmp	r3, r2
 8003834:	f040 809a 	bne.w	800396c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4984      	ldr	r1, [pc, #528]	@ (8003a54 <HAL_ADC_ConfigChannel+0x494>)
 8003842:	428b      	cmp	r3, r1
 8003844:	d147      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x316>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4983      	ldr	r1, [pc, #524]	@ (8003a58 <HAL_ADC_ConfigChannel+0x498>)
 800384c:	428b      	cmp	r3, r1
 800384e:	d040      	beq.n	80038d2 <HAL_ADC_ConfigChannel+0x312>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4981      	ldr	r1, [pc, #516]	@ (8003a5c <HAL_ADC_ConfigChannel+0x49c>)
 8003856:	428b      	cmp	r3, r1
 8003858:	d039      	beq.n	80038ce <HAL_ADC_ConfigChannel+0x30e>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4980      	ldr	r1, [pc, #512]	@ (8003a60 <HAL_ADC_ConfigChannel+0x4a0>)
 8003860:	428b      	cmp	r3, r1
 8003862:	d032      	beq.n	80038ca <HAL_ADC_ConfigChannel+0x30a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	497e      	ldr	r1, [pc, #504]	@ (8003a64 <HAL_ADC_ConfigChannel+0x4a4>)
 800386a:	428b      	cmp	r3, r1
 800386c:	d02b      	beq.n	80038c6 <HAL_ADC_ConfigChannel+0x306>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	497d      	ldr	r1, [pc, #500]	@ (8003a68 <HAL_ADC_ConfigChannel+0x4a8>)
 8003874:	428b      	cmp	r3, r1
 8003876:	d024      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x302>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	497b      	ldr	r1, [pc, #492]	@ (8003a6c <HAL_ADC_ConfigChannel+0x4ac>)
 800387e:	428b      	cmp	r3, r1
 8003880:	d01d      	beq.n	80038be <HAL_ADC_ConfigChannel+0x2fe>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	497a      	ldr	r1, [pc, #488]	@ (8003a70 <HAL_ADC_ConfigChannel+0x4b0>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d016      	beq.n	80038ba <HAL_ADC_ConfigChannel+0x2fa>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4978      	ldr	r1, [pc, #480]	@ (8003a74 <HAL_ADC_ConfigChannel+0x4b4>)
 8003892:	428b      	cmp	r3, r1
 8003894:	d00f      	beq.n	80038b6 <HAL_ADC_ConfigChannel+0x2f6>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4977      	ldr	r1, [pc, #476]	@ (8003a78 <HAL_ADC_ConfigChannel+0x4b8>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d008      	beq.n	80038b2 <HAL_ADC_ConfigChannel+0x2f2>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4975      	ldr	r1, [pc, #468]	@ (8003a7c <HAL_ADC_ConfigChannel+0x4bc>)
 80038a6:	428b      	cmp	r3, r1
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x2ee>
 80038aa:	4b75      	ldr	r3, [pc, #468]	@ (8003a80 <HAL_ADC_ConfigChannel+0x4c0>)
 80038ac:	e05a      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038ae:	2300      	movs	r3, #0
 80038b0:	e058      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038b2:	4b74      	ldr	r3, [pc, #464]	@ (8003a84 <HAL_ADC_ConfigChannel+0x4c4>)
 80038b4:	e056      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038b6:	4b74      	ldr	r3, [pc, #464]	@ (8003a88 <HAL_ADC_ConfigChannel+0x4c8>)
 80038b8:	e054      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003a74 <HAL_ADC_ConfigChannel+0x4b4>)
 80038bc:	e052      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038be:	4b6c      	ldr	r3, [pc, #432]	@ (8003a70 <HAL_ADC_ConfigChannel+0x4b0>)
 80038c0:	e050      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038c2:	4b72      	ldr	r3, [pc, #456]	@ (8003a8c <HAL_ADC_ConfigChannel+0x4cc>)
 80038c4:	e04e      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038c6:	4b72      	ldr	r3, [pc, #456]	@ (8003a90 <HAL_ADC_ConfigChannel+0x4d0>)
 80038c8:	e04c      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038ca:	4b72      	ldr	r3, [pc, #456]	@ (8003a94 <HAL_ADC_ConfigChannel+0x4d4>)
 80038cc:	e04a      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038ce:	4b72      	ldr	r3, [pc, #456]	@ (8003a98 <HAL_ADC_ConfigChannel+0x4d8>)
 80038d0:	e048      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e046      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4970      	ldr	r1, [pc, #448]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4dc>)
 80038dc:	428b      	cmp	r3, r1
 80038de:	d140      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x3a2>
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	495c      	ldr	r1, [pc, #368]	@ (8003a58 <HAL_ADC_ConfigChannel+0x498>)
 80038e6:	428b      	cmp	r3, r1
 80038e8:	d039      	beq.n	800395e <HAL_ADC_ConfigChannel+0x39e>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	495b      	ldr	r1, [pc, #364]	@ (8003a5c <HAL_ADC_ConfigChannel+0x49c>)
 80038f0:	428b      	cmp	r3, r1
 80038f2:	d032      	beq.n	800395a <HAL_ADC_ConfigChannel+0x39a>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4959      	ldr	r1, [pc, #356]	@ (8003a60 <HAL_ADC_ConfigChannel+0x4a0>)
 80038fa:	428b      	cmp	r3, r1
 80038fc:	d02b      	beq.n	8003956 <HAL_ADC_ConfigChannel+0x396>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4958      	ldr	r1, [pc, #352]	@ (8003a64 <HAL_ADC_ConfigChannel+0x4a4>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d024      	beq.n	8003952 <HAL_ADC_ConfigChannel+0x392>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4956      	ldr	r1, [pc, #344]	@ (8003a68 <HAL_ADC_ConfigChannel+0x4a8>)
 800390e:	428b      	cmp	r3, r1
 8003910:	d01d      	beq.n	800394e <HAL_ADC_ConfigChannel+0x38e>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4955      	ldr	r1, [pc, #340]	@ (8003a6c <HAL_ADC_ConfigChannel+0x4ac>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d016      	beq.n	800394a <HAL_ADC_ConfigChannel+0x38a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4953      	ldr	r1, [pc, #332]	@ (8003a70 <HAL_ADC_ConfigChannel+0x4b0>)
 8003922:	428b      	cmp	r3, r1
 8003924:	d00f      	beq.n	8003946 <HAL_ADC_ConfigChannel+0x386>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4952      	ldr	r1, [pc, #328]	@ (8003a74 <HAL_ADC_ConfigChannel+0x4b4>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d008      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x382>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4951      	ldr	r1, [pc, #324]	@ (8003a7c <HAL_ADC_ConfigChannel+0x4bc>)
 8003936:	428b      	cmp	r3, r1
 8003938:	d101      	bne.n	800393e <HAL_ADC_ConfigChannel+0x37e>
 800393a:	4b51      	ldr	r3, [pc, #324]	@ (8003a80 <HAL_ADC_ConfigChannel+0x4c0>)
 800393c:	e012      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 800393e:	2300      	movs	r3, #0
 8003940:	e010      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 8003942:	4b51      	ldr	r3, [pc, #324]	@ (8003a88 <HAL_ADC_ConfigChannel+0x4c8>)
 8003944:	e00e      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 8003946:	4b4b      	ldr	r3, [pc, #300]	@ (8003a74 <HAL_ADC_ConfigChannel+0x4b4>)
 8003948:	e00c      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 800394a:	4b49      	ldr	r3, [pc, #292]	@ (8003a70 <HAL_ADC_ConfigChannel+0x4b0>)
 800394c:	e00a      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 800394e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a8c <HAL_ADC_ConfigChannel+0x4cc>)
 8003950:	e008      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 8003952:	4b4f      	ldr	r3, [pc, #316]	@ (8003a90 <HAL_ADC_ConfigChannel+0x4d0>)
 8003954:	e006      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 8003956:	4b4f      	ldr	r3, [pc, #316]	@ (8003a94 <HAL_ADC_ConfigChannel+0x4d4>)
 8003958:	e004      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 800395a:	4b4f      	ldr	r3, [pc, #316]	@ (8003a98 <HAL_ADC_ConfigChannel+0x4d8>)
 800395c:	e002      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_ADC_ConfigChannel+0x3a4>
 8003962:	2300      	movs	r3, #0
 8003964:	4619      	mov	r1, r3
 8003966:	4610      	mov	r0, r2
 8003968:	f7ff f9ca 	bl	8002d00 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	f280 80fc 	bge.w	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a36      	ldr	r2, [pc, #216]	@ (8003a54 <HAL_ADC_ConfigChannel+0x494>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_ADC_ConfigChannel+0x3ca>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a45      	ldr	r2, [pc, #276]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4dc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_ADC_ConfigChannel+0x3ce>
 800398a:	4b45      	ldr	r3, [pc, #276]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x4e0>)
 800398c:	e000      	b.n	8003990 <HAL_ADC_ConfigChannel+0x3d0>
 800398e:	4b45      	ldr	r3, [pc, #276]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x4e4>)
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f9a7 	bl	8002ce4 <LL_ADC_GetCommonPathInternalCh>
 8003996:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a54 <HAL_ADC_ConfigChannel+0x494>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_ADC_ConfigChannel+0x3ec>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3d      	ldr	r2, [pc, #244]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4dc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10e      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x40a>
 80039ac:	4829      	ldr	r0, [pc, #164]	@ (8003a54 <HAL_ADC_ConfigChannel+0x494>)
 80039ae:	f7ff fb3f 	bl	8003030 <LL_ADC_IsEnabled>
 80039b2:	4604      	mov	r4, r0
 80039b4:	4839      	ldr	r0, [pc, #228]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4dc>)
 80039b6:	f7ff fb3b 	bl	8003030 <LL_ADC_IsEnabled>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4323      	orrs	r3, r4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	e008      	b.n	80039dc <HAL_ADC_ConfigChannel+0x41c>
 80039ca:	4837      	ldr	r0, [pc, #220]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x4e8>)
 80039cc:	f7ff fb30 	bl	8003030 <LL_ADC_IsEnabled>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf0c      	ite	eq
 80039d6:	2301      	moveq	r3, #1
 80039d8:	2300      	movne	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80b3 	beq.w	8003b48 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a31      	ldr	r2, [pc, #196]	@ (8003aac <HAL_ADC_ConfigChannel+0x4ec>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d165      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x4f8>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d160      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x4e8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	f040 80b6 	bne.w	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a13      	ldr	r2, [pc, #76]	@ (8003a54 <HAL_ADC_ConfigChannel+0x494>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d004      	beq.n	8003a16 <HAL_ADC_ConfigChannel+0x456>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a22      	ldr	r2, [pc, #136]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4dc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x45a>
 8003a16:	4a22      	ldr	r2, [pc, #136]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x4e0>)
 8003a18:	e000      	b.n	8003a1c <HAL_ADC_ConfigChannel+0x45c>
 8003a1a:	4a22      	ldr	r2, [pc, #136]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x4e4>)
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a22:	4619      	mov	r1, r3
 8003a24:	4610      	mov	r0, r2
 8003a26:	f7ff f94a 	bl	8002cbe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a2a:	4b21      	ldr	r3, [pc, #132]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x4f0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	4a20      	ldr	r2, [pc, #128]	@ (8003ab4 <HAL_ADC_ConfigChannel+0x4f4>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	3301      	adds	r3, #1
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a3e:	e002      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f9      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a4c:	e08f      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
 8003a4e:	bf00      	nop
 8003a50:	47ff0000 	.word	0x47ff0000
 8003a54:	40022000 	.word	0x40022000
 8003a58:	04300002 	.word	0x04300002
 8003a5c:	08600004 	.word	0x08600004
 8003a60:	0c900008 	.word	0x0c900008
 8003a64:	10c00010 	.word	0x10c00010
 8003a68:	14f00020 	.word	0x14f00020
 8003a6c:	2a000400 	.word	0x2a000400
 8003a70:	2e300800 	.word	0x2e300800
 8003a74:	32601000 	.word	0x32601000
 8003a78:	43210000 	.word	0x43210000
 8003a7c:	4b840000 	.word	0x4b840000
 8003a80:	4fb80000 	.word	0x4fb80000
 8003a84:	47520000 	.word	0x47520000
 8003a88:	36902000 	.word	0x36902000
 8003a8c:	25b00200 	.word	0x25b00200
 8003a90:	21800100 	.word	0x21800100
 8003a94:	1d500080 	.word	0x1d500080
 8003a98:	19200040 	.word	0x19200040
 8003a9c:	40022100 	.word	0x40022100
 8003aa0:	40022300 	.word	0x40022300
 8003aa4:	58026300 	.word	0x58026300
 8003aa8:	58026000 	.word	0x58026000
 8003aac:	cb840000 	.word	0xcb840000
 8003ab0:	2400022c 	.word	0x2400022c
 8003ab4:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a31      	ldr	r2, [pc, #196]	@ (8003b84 <HAL_ADC_ConfigChannel+0x5c4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d11e      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x540>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d119      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b88 <HAL_ADC_ConfigChannel+0x5c8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d14b      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a2c      	ldr	r2, [pc, #176]	@ (8003b8c <HAL_ADC_ConfigChannel+0x5cc>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x52a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8003b90 <HAL_ADC_ConfigChannel+0x5d0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x52e>
 8003aea:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <HAL_ADC_ConfigChannel+0x5d4>)
 8003aec:	e000      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x530>
 8003aee:	4a2a      	ldr	r2, [pc, #168]	@ (8003b98 <HAL_ADC_ConfigChannel+0x5d8>)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7ff f8e0 	bl	8002cbe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003afe:	e036      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a25      	ldr	r2, [pc, #148]	@ (8003b9c <HAL_ADC_ConfigChannel+0x5dc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d131      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d12c      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <HAL_ADC_ConfigChannel+0x5c8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d127      	bne.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1a      	ldr	r2, [pc, #104]	@ (8003b8c <HAL_ADC_ConfigChannel+0x5cc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d004      	beq.n	8003b32 <HAL_ADC_ConfigChannel+0x572>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a18      	ldr	r2, [pc, #96]	@ (8003b90 <HAL_ADC_ConfigChannel+0x5d0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d101      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x576>
 8003b32:	4a18      	ldr	r2, [pc, #96]	@ (8003b94 <HAL_ADC_ConfigChannel+0x5d4>)
 8003b34:	e000      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x578>
 8003b36:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <HAL_ADC_ConfigChannel+0x5d8>)
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f7ff f8bc 	bl	8002cbe <LL_ADC_SetCommonPathInternalCh>
 8003b46:	e012      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	f043 0220 	orr.w	r2, r3, #32
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003b5a:	e008      	b.n	8003b6e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3734      	adds	r7, #52	@ 0x34
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd90      	pop	{r4, r7, pc}
 8003b82:	bf00      	nop
 8003b84:	c7520000 	.word	0xc7520000
 8003b88:	58026000 	.word	0x58026000
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40022100 	.word	0x40022100
 8003b94:	40022300 	.word	0x40022300
 8003b98:	58026300 	.word	0x58026300
 8003b9c:	cfb80000 	.word	0xcfb80000

08003ba0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fa3f 	bl	8003030 <LL_ADC_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d16e      	bne.n	8003c96 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <ADC_Enable+0x100>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	f043 0210 	orr.w	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd6:	f043 0201 	orr.w	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e05a      	b.n	8003c98 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fa0e 	bl	8003008 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bec:	f7ff f818 	bl	8002c20 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca4 <ADC_Enable+0x104>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <ADC_Enable+0x66>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a29      	ldr	r2, [pc, #164]	@ (8003ca8 <ADC_Enable+0x108>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <ADC_Enable+0x6a>
 8003c06:	4b29      	ldr	r3, [pc, #164]	@ (8003cac <ADC_Enable+0x10c>)
 8003c08:	e000      	b.n	8003c0c <ADC_Enable+0x6c>
 8003c0a:	4b29      	ldr	r3, [pc, #164]	@ (8003cb0 <ADC_Enable+0x110>)
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff f99f 	bl	8002f50 <LL_ADC_GetMultimode>
 8003c12:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a23      	ldr	r2, [pc, #140]	@ (8003ca8 <ADC_Enable+0x108>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d002      	beq.n	8003c24 <ADC_Enable+0x84>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	e000      	b.n	8003c26 <ADC_Enable+0x86>
 8003c24:	4b1f      	ldr	r3, [pc, #124]	@ (8003ca4 <ADC_Enable+0x104>)
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d02c      	beq.n	8003c88 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d130      	bne.n	8003c96 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c34:	e028      	b.n	8003c88 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff f9f8 	bl	8003030 <LL_ADC_IsEnabled>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d104      	bne.n	8003c50 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff f9dc 	bl	8003008 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c50:	f7fe ffe6 	bl	8002c20 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d914      	bls.n	8003c88 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d00d      	beq.n	8003c88 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c70:	f043 0210 	orr.w	r2, r3, #16
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f043 0201 	orr.w	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e007      	b.n	8003c98 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d1cf      	bne.n	8003c36 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	8000003f 	.word	0x8000003f
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40022100 	.word	0x40022100
 8003cac:	40022300 	.word	0x40022300
 8003cb0:	58026300 	.word	0x58026300

08003cb4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d14b      	bne.n	8003d66 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d021      	beq.n	8003d2c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff f88e 	bl	8002e0e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d032      	beq.n	8003d5e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d12b      	bne.n	8003d5e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11f      	bne.n	8003d5e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d22:	f043 0201 	orr.w	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d2a:	e018      	b.n	8003d5e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d111      	bne.n	8003d5e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d105      	bne.n	8003d5e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f7fd fc1a 	bl	8001598 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d64:	e00e      	b.n	8003d84 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f7ff fc1a 	bl	80035ac <HAL_ADC_ErrorCallback>
}
 8003d78:	e004      	b.n	8003d84 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fbfc 	bl	8003598 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dc6:	f043 0204 	orr.w	r2, r3, #4
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f7ff fbec 	bl	80035ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fd4 <ADC_ConfigureBoostMode+0x1f8>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <ADC_ConfigureBoostMode+0x1c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a79      	ldr	r2, [pc, #484]	@ (8003fd8 <ADC_ConfigureBoostMode+0x1fc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d109      	bne.n	8003e0c <ADC_ConfigureBoostMode+0x30>
 8003df8:	4b78      	ldr	r3, [pc, #480]	@ (8003fdc <ADC_ConfigureBoostMode+0x200>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e008      	b.n	8003e1e <ADC_ConfigureBoostMode+0x42>
 8003e0c:	4b74      	ldr	r3, [pc, #464]	@ (8003fe0 <ADC_ConfigureBoostMode+0x204>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01c      	beq.n	8003e5c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e22:	f00a fd09 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 8003e26:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e30:	d010      	beq.n	8003e54 <ADC_ConfigureBoostMode+0x78>
 8003e32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e36:	d873      	bhi.n	8003f20 <ADC_ConfigureBoostMode+0x144>
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e3c:	d002      	beq.n	8003e44 <ADC_ConfigureBoostMode+0x68>
 8003e3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e42:	d16d      	bne.n	8003f20 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	60fb      	str	r3, [r7, #12]
        break;
 8003e52:	e068      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	60fb      	str	r3, [r7, #12]
        break;
 8003e5a:	e064      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e5c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f00b ff4e 	bl	800fd04 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e72:	d051      	beq.n	8003f18 <ADC_ConfigureBoostMode+0x13c>
 8003e74:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e78:	d854      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003e7a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003e7e:	d047      	beq.n	8003f10 <ADC_ConfigureBoostMode+0x134>
 8003e80:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003e84:	d84e      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003e86:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003e8a:	d03d      	beq.n	8003f08 <ADC_ConfigureBoostMode+0x12c>
 8003e8c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003e90:	d848      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e96:	d033      	beq.n	8003f00 <ADC_ConfigureBoostMode+0x124>
 8003e98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e9c:	d842      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003e9e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003ea2:	d029      	beq.n	8003ef8 <ADC_ConfigureBoostMode+0x11c>
 8003ea4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003ea8:	d83c      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003eaa:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003eae:	d01a      	beq.n	8003ee6 <ADC_ConfigureBoostMode+0x10a>
 8003eb0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003eb4:	d836      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003eb6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003eba:	d014      	beq.n	8003ee6 <ADC_ConfigureBoostMode+0x10a>
 8003ebc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ec0:	d830      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003ec2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ec6:	d00e      	beq.n	8003ee6 <ADC_ConfigureBoostMode+0x10a>
 8003ec8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ecc:	d82a      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003ece:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ed2:	d008      	beq.n	8003ee6 <ADC_ConfigureBoostMode+0x10a>
 8003ed4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ed8:	d824      	bhi.n	8003f24 <ADC_ConfigureBoostMode+0x148>
 8003eda:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ede:	d002      	beq.n	8003ee6 <ADC_ConfigureBoostMode+0x10a>
 8003ee0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ee4:	d11e      	bne.n	8003f24 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	0c9b      	lsrs	r3, r3, #18
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef4:	60fb      	str	r3, [r7, #12]
        break;
 8003ef6:	e016      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	60fb      	str	r3, [r7, #12]
        break;
 8003efe:	e012      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	60fb      	str	r3, [r7, #12]
        break;
 8003f06:	e00e      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	60fb      	str	r3, [r7, #12]
        break;
 8003f0e:	e00a      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	09db      	lsrs	r3, r3, #7
 8003f14:	60fb      	str	r3, [r7, #12]
        break;
 8003f16:	e006      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	60fb      	str	r3, [r7, #12]
        break;
 8003f1e:	e002      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f20:	bf00      	nop
 8003f22:	e000      	b.n	8003f26 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f24:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f26:	f7fe feab 	bl	8002c80 <HAL_GetREVID>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d815      	bhi.n	8003f60 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe4 <ADC_ConfigureBoostMode+0x208>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d908      	bls.n	8003f4e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f4c:	e03e      	b.n	8003fcc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5c:	609a      	str	r2, [r3, #8]
}
 8003f5e:	e035      	b.n	8003fcc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe8 <ADC_ConfigureBoostMode+0x20c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d808      	bhi.n	8003f80 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	e025      	b.n	8003fcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4a1a      	ldr	r2, [pc, #104]	@ (8003fec <ADC_ConfigureBoostMode+0x210>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d80a      	bhi.n	8003f9e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	e016      	b.n	8003fcc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	@ (8003ff0 <ADC_ConfigureBoostMode+0x214>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d80a      	bhi.n	8003fbc <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fb8:	609a      	str	r2, [r3, #8]
}
 8003fba:	e007      	b.n	8003fcc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40022000 	.word	0x40022000
 8003fd8:	40022100 	.word	0x40022100
 8003fdc:	40022300 	.word	0x40022300
 8003fe0:	58026300 	.word	0x58026300
 8003fe4:	01312d00 	.word	0x01312d00
 8003fe8:	005f5e10 	.word	0x005f5e10
 8003fec:	00bebc20 	.word	0x00bebc20
 8003ff0:	017d7840 	.word	0x017d7840

08003ff4 <LL_ADC_IsEnabled>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <LL_ADC_IsEnabled+0x18>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <LL_ADC_IsEnabled+0x1a>
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <LL_ADC_REG_IsConversionOngoing>:
{
 800401a:	b480      	push	{r7}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b04      	cmp	r3, #4
 800402c:	d101      	bne.n	8004032 <LL_ADC_REG_IsConversionOngoing+0x18>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b09f      	sub	sp, #124	@ 0x7c
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800405a:	2302      	movs	r3, #2
 800405c:	e0be      	b.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004066:	2300      	movs	r3, #0
 8004068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800406a:	2300      	movs	r3, #0
 800406c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a5c      	ldr	r2, [pc, #368]	@ (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d102      	bne.n	800407e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004078:	4b5b      	ldr	r3, [pc, #364]	@ (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	e001      	b.n	8004082 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800407e:	2300      	movs	r3, #0
 8004080:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10b      	bne.n	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e09d      	b.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ffb9 	bl	800401a <LL_ADC_REG_IsConversionOngoing>
 80040a8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ffb3 	bl	800401a <LL_ADC_REG_IsConversionOngoing>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d17f      	bne.n	80041ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d17c      	bne.n	80041ba <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a47      	ldr	r2, [pc, #284]	@ (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a46      	ldr	r2, [pc, #280]	@ (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040d4:	4b45      	ldr	r3, [pc, #276]	@ (80041ec <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040d6:	e000      	b.n	80040da <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040d8:	4b45      	ldr	r3, [pc, #276]	@ (80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040da:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d039      	beq.n	8004158 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	431a      	orrs	r2, r3
 80040f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a3a      	ldr	r2, [pc, #232]	@ (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a38      	ldr	r2, [pc, #224]	@ (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d10e      	bne.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800410a:	4836      	ldr	r0, [pc, #216]	@ (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800410c:	f7ff ff72 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004110:	4604      	mov	r4, r0
 8004112:	4835      	ldr	r0, [pc, #212]	@ (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004114:	f7ff ff6e 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004118:	4603      	mov	r3, r0
 800411a:	4323      	orrs	r3, r4
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf0c      	ite	eq
 8004120:	2301      	moveq	r3, #1
 8004122:	2300      	movne	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e008      	b.n	800413a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004128:	4832      	ldr	r0, [pc, #200]	@ (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800412a:	f7ff ff63 	bl	8003ff4 <LL_ADC_IsEnabled>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d047      	beq.n	80041ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800413e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	4b2d      	ldr	r3, [pc, #180]	@ (80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004144:	4013      	ands	r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	6811      	ldr	r1, [r2, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	430a      	orrs	r2, r1
 8004150:	431a      	orrs	r2, r3
 8004152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004154:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004156:	e03a      	b.n	80041ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004162:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a1e      	ldr	r2, [pc, #120]	@ (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a1d      	ldr	r2, [pc, #116]	@ (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d10e      	bne.n	8004196 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004178:	481a      	ldr	r0, [pc, #104]	@ (80041e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800417a:	f7ff ff3b 	bl	8003ff4 <LL_ADC_IsEnabled>
 800417e:	4604      	mov	r4, r0
 8004180:	4819      	ldr	r0, [pc, #100]	@ (80041e8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004182:	f7ff ff37 	bl	8003ff4 <LL_ADC_IsEnabled>
 8004186:	4603      	mov	r3, r0
 8004188:	4323      	orrs	r3, r4
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	e008      	b.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004196:	4817      	ldr	r0, [pc, #92]	@ (80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004198:	f7ff ff2c 	bl	8003ff4 <LL_ADC_IsEnabled>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d010      	beq.n	80041ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041b6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041b8:	e009      	b.n	80041ce <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80041cc:	e000      	b.n	80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041ce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80041d8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80041dc:	4618      	mov	r0, r3
 80041de:	377c      	adds	r7, #124	@ 0x7c
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}
 80041e4:	40022000 	.word	0x40022000
 80041e8:	40022100 	.word	0x40022100
 80041ec:	40022300 	.word	0x40022300
 80041f0:	58026300 	.word	0x58026300
 80041f4:	58026000 	.word	0x58026000
 80041f8:	fffff0e0 	.word	0xfffff0e0

080041fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800420c:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <__NVIC_SetPriorityGrouping+0x40>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <__NVIC_SetPriorityGrouping+0x44>)
 8004226:	4313      	orrs	r3, r2
 8004228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800422a:	4a04      	ldr	r2, [pc, #16]	@ (800423c <__NVIC_SetPriorityGrouping+0x40>)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	60d3      	str	r3, [r2, #12]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	e000ed00 	.word	0xe000ed00
 8004240:	05fa0000 	.word	0x05fa0000

08004244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004248:	4b04      	ldr	r3, [pc, #16]	@ (800425c <__NVIC_GetPriorityGrouping+0x18>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 0307 	and.w	r3, r3, #7
}
 8004252:	4618      	mov	r0, r3
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800426a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db0b      	blt.n	800428a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4907      	ldr	r1, [pc, #28]	@ (8004298 <__NVIC_EnableIRQ+0x38>)
 800427a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427e:	095b      	lsrs	r3, r3, #5
 8004280:	2001      	movs	r0, #1
 8004282:	fa00 f202 	lsl.w	r2, r0, r2
 8004286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	e000e100 	.word	0xe000e100

0800429c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	db0a      	blt.n	80042c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	490c      	ldr	r1, [pc, #48]	@ (80042e8 <__NVIC_SetPriority+0x4c>)
 80042b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ba:	0112      	lsls	r2, r2, #4
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	440b      	add	r3, r1
 80042c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042c4:	e00a      	b.n	80042dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	4908      	ldr	r1, [pc, #32]	@ (80042ec <__NVIC_SetPriority+0x50>)
 80042cc:	88fb      	ldrh	r3, [r7, #6]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	3b04      	subs	r3, #4
 80042d4:	0112      	lsls	r2, r2, #4
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	440b      	add	r3, r1
 80042da:	761a      	strb	r2, [r3, #24]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	e000e100 	.word	0xe000e100
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b089      	sub	sp, #36	@ 0x24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f1c3 0307 	rsb	r3, r3, #7
 800430a:	2b04      	cmp	r3, #4
 800430c:	bf28      	it	cs
 800430e:	2304      	movcs	r3, #4
 8004310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3304      	adds	r3, #4
 8004316:	2b06      	cmp	r3, #6
 8004318:	d902      	bls.n	8004320 <NVIC_EncodePriority+0x30>
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3b03      	subs	r3, #3
 800431e:	e000      	b.n	8004322 <NVIC_EncodePriority+0x32>
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	401a      	ands	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004338:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43d9      	mvns	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004348:	4313      	orrs	r3, r2
         );
}
 800434a:	4618      	mov	r0, r3
 800434c:	3724      	adds	r7, #36	@ 0x24
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004368:	d301      	bcc.n	800436e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800436a:	2301      	movs	r3, #1
 800436c:	e00f      	b.n	800438e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <SysTick_Config+0x40>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3b01      	subs	r3, #1
 8004374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004376:	210f      	movs	r1, #15
 8004378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800437c:	f7ff ff8e 	bl	800429c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <SysTick_Config+0x40>)
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004386:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <SysTick_Config+0x40>)
 8004388:	2207      	movs	r2, #7
 800438a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	e000e010 	.word	0xe000e010

0800439c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff ff29 	bl	80041fc <__NVIC_SetPriorityGrouping>
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b086      	sub	sp, #24
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	4603      	mov	r3, r0
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043c0:	f7ff ff40 	bl	8004244 <__NVIC_GetPriorityGrouping>
 80043c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	6978      	ldr	r0, [r7, #20]
 80043cc:	f7ff ff90 	bl	80042f0 <NVIC_EncodePriority>
 80043d0:	4602      	mov	r2, r0
 80043d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ff5f 	bl	800429c <__NVIC_SetPriority>
}
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff33 	bl	8004260 <__NVIC_EnableIRQ>
}
 80043fa:	bf00      	nop
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff ffa4 	bl	8004358 <SysTick_Config>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004420:	f3bf 8f5f 	dmb	sy
}
 8004424:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004426:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <HAL_MPU_Disable+0x28>)
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	4a06      	ldr	r2, [pc, #24]	@ (8004444 <HAL_MPU_Disable+0x28>)
 800442c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004430:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004432:	4b05      	ldr	r3, [pc, #20]	@ (8004448 <HAL_MPU_Disable+0x2c>)
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
}
 8004438:	bf00      	nop
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000ed00 	.word	0xe000ed00
 8004448:	e000ed90 	.word	0xe000ed90

0800444c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004454:	4a0b      	ldr	r2, [pc, #44]	@ (8004484 <HAL_MPU_Enable+0x38>)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_MPU_Enable+0x3c>)
 8004460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004462:	4a09      	ldr	r2, [pc, #36]	@ (8004488 <HAL_MPU_Enable+0x3c>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004468:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800446a:	f3bf 8f4f 	dsb	sy
}
 800446e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004470:	f3bf 8f6f 	isb	sy
}
 8004474:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	e000ed90 	.word	0xe000ed90
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	785a      	ldrb	r2, [r3, #1]
 8004498:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <HAL_MPU_ConfigRegion+0x7c>)
 800449a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800449c:	4b1a      	ldr	r3, [pc, #104]	@ (8004508 <HAL_MPU_ConfigRegion+0x7c>)
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <HAL_MPU_ConfigRegion+0x7c>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80044a8:	4a17      	ldr	r2, [pc, #92]	@ (8004508 <HAL_MPU_ConfigRegion+0x7c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	7b1b      	ldrb	r3, [r3, #12]
 80044b4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	7adb      	ldrb	r3, [r3, #11]
 80044ba:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7a9b      	ldrb	r3, [r3, #10]
 80044c2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80044c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	7b5b      	ldrb	r3, [r3, #13]
 80044ca:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80044cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	7b9b      	ldrb	r3, [r3, #14]
 80044d2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80044d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7bdb      	ldrb	r3, [r3, #15]
 80044da:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80044dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7a5b      	ldrb	r3, [r3, #9]
 80044e2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80044e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	7a1b      	ldrb	r3, [r3, #8]
 80044ea:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80044ec:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	7812      	ldrb	r2, [r2, #0]
 80044f2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044f4:	4a04      	ldr	r2, [pc, #16]	@ (8004508 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80044f6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044f8:	6113      	str	r3, [r2, #16]
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	e000ed90 	.word	0xe000ed90

0800450c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004514:	f7fe fb84 	bl	8002c20 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e316      	b.n	8004b52 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a66      	ldr	r2, [pc, #408]	@ (80046c4 <HAL_DMA_Init+0x1b8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d04a      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a65      	ldr	r2, [pc, #404]	@ (80046c8 <HAL_DMA_Init+0x1bc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d045      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a63      	ldr	r2, [pc, #396]	@ (80046cc <HAL_DMA_Init+0x1c0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d040      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a62      	ldr	r2, [pc, #392]	@ (80046d0 <HAL_DMA_Init+0x1c4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d03b      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a60      	ldr	r2, [pc, #384]	@ (80046d4 <HAL_DMA_Init+0x1c8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d036      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a5f      	ldr	r2, [pc, #380]	@ (80046d8 <HAL_DMA_Init+0x1cc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d031      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a5d      	ldr	r2, [pc, #372]	@ (80046dc <HAL_DMA_Init+0x1d0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02c      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5c      	ldr	r2, [pc, #368]	@ (80046e0 <HAL_DMA_Init+0x1d4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d027      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5a      	ldr	r2, [pc, #360]	@ (80046e4 <HAL_DMA_Init+0x1d8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d022      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a59      	ldr	r2, [pc, #356]	@ (80046e8 <HAL_DMA_Init+0x1dc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d01d      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a57      	ldr	r2, [pc, #348]	@ (80046ec <HAL_DMA_Init+0x1e0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a56      	ldr	r2, [pc, #344]	@ (80046f0 <HAL_DMA_Init+0x1e4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a54      	ldr	r2, [pc, #336]	@ (80046f4 <HAL_DMA_Init+0x1e8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a53      	ldr	r2, [pc, #332]	@ (80046f8 <HAL_DMA_Init+0x1ec>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a51      	ldr	r2, [pc, #324]	@ (80046fc <HAL_DMA_Init+0x1f0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_DMA_Init+0xb8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a50      	ldr	r2, [pc, #320]	@ (8004700 <HAL_DMA_Init+0x1f4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <HAL_DMA_Init+0xbc>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <HAL_DMA_Init+0xbe>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 813b 	beq.w	8004846 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a37      	ldr	r2, [pc, #220]	@ (80046c4 <HAL_DMA_Init+0x1b8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d04a      	beq.n	8004680 <HAL_DMA_Init+0x174>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a36      	ldr	r2, [pc, #216]	@ (80046c8 <HAL_DMA_Init+0x1bc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d045      	beq.n	8004680 <HAL_DMA_Init+0x174>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a34      	ldr	r2, [pc, #208]	@ (80046cc <HAL_DMA_Init+0x1c0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d040      	beq.n	8004680 <HAL_DMA_Init+0x174>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a33      	ldr	r2, [pc, #204]	@ (80046d0 <HAL_DMA_Init+0x1c4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d03b      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <HAL_DMA_Init+0x1c8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d036      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <HAL_DMA_Init+0x1cc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d031      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a2e      	ldr	r2, [pc, #184]	@ (80046dc <HAL_DMA_Init+0x1d0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d02c      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a2d      	ldr	r2, [pc, #180]	@ (80046e0 <HAL_DMA_Init+0x1d4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d027      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a2b      	ldr	r2, [pc, #172]	@ (80046e4 <HAL_DMA_Init+0x1d8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d022      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a2a      	ldr	r2, [pc, #168]	@ (80046e8 <HAL_DMA_Init+0x1dc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d01d      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a28      	ldr	r2, [pc, #160]	@ (80046ec <HAL_DMA_Init+0x1e0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a27      	ldr	r2, [pc, #156]	@ (80046f0 <HAL_DMA_Init+0x1e4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a25      	ldr	r2, [pc, #148]	@ (80046f4 <HAL_DMA_Init+0x1e8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a24      	ldr	r2, [pc, #144]	@ (80046f8 <HAL_DMA_Init+0x1ec>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_DMA_Init+0x174>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a22      	ldr	r2, [pc, #136]	@ (80046fc <HAL_DMA_Init+0x1f0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_DMA_Init+0x174>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a21      	ldr	r2, [pc, #132]	@ (8004700 <HAL_DMA_Init+0x1f4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d108      	bne.n	8004692 <HAL_DMA_Init+0x186>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e007      	b.n	80046a2 <HAL_DMA_Init+0x196>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0201 	bic.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046a2:	e02f      	b.n	8004704 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046a4:	f7fe fabc 	bl	8002c20 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d928      	bls.n	8004704 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2220      	movs	r2, #32
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e246      	b.n	8004b52 <HAL_DMA_Init+0x646>
 80046c4:	40020010 	.word	0x40020010
 80046c8:	40020028 	.word	0x40020028
 80046cc:	40020040 	.word	0x40020040
 80046d0:	40020058 	.word	0x40020058
 80046d4:	40020070 	.word	0x40020070
 80046d8:	40020088 	.word	0x40020088
 80046dc:	400200a0 	.word	0x400200a0
 80046e0:	400200b8 	.word	0x400200b8
 80046e4:	40020410 	.word	0x40020410
 80046e8:	40020428 	.word	0x40020428
 80046ec:	40020440 	.word	0x40020440
 80046f0:	40020458 	.word	0x40020458
 80046f4:	40020470 	.word	0x40020470
 80046f8:	40020488 	.word	0x40020488
 80046fc:	400204a0 	.word	0x400204a0
 8004700:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1c8      	bne.n	80046a4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4b83      	ldr	r3, [pc, #524]	@ (800492c <HAL_DMA_Init+0x420>)
 800471e:	4013      	ands	r3, r2
 8004720:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800472a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	2b04      	cmp	r3, #4
 8004756:	d107      	bne.n	8004768 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004760:	4313      	orrs	r3, r2
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004768:	4b71      	ldr	r3, [pc, #452]	@ (8004930 <HAL_DMA_Init+0x424>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b71      	ldr	r3, [pc, #452]	@ (8004934 <HAL_DMA_Init+0x428>)
 800476e:	4013      	ands	r3, r2
 8004770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004774:	d328      	bcc.n	80047c8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b28      	cmp	r3, #40	@ 0x28
 800477c:	d903      	bls.n	8004786 <HAL_DMA_Init+0x27a>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b2e      	cmp	r3, #46	@ 0x2e
 8004784:	d917      	bls.n	80047b6 <HAL_DMA_Init+0x2aa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b3e      	cmp	r3, #62	@ 0x3e
 800478c:	d903      	bls.n	8004796 <HAL_DMA_Init+0x28a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b42      	cmp	r3, #66	@ 0x42
 8004794:	d90f      	bls.n	80047b6 <HAL_DMA_Init+0x2aa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b46      	cmp	r3, #70	@ 0x46
 800479c:	d903      	bls.n	80047a6 <HAL_DMA_Init+0x29a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b48      	cmp	r3, #72	@ 0x48
 80047a4:	d907      	bls.n	80047b6 <HAL_DMA_Init+0x2aa>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b4e      	cmp	r3, #78	@ 0x4e
 80047ac:	d905      	bls.n	80047ba <HAL_DMA_Init+0x2ae>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b52      	cmp	r3, #82	@ 0x52
 80047b4:	d801      	bhi.n	80047ba <HAL_DMA_Init+0x2ae>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <HAL_DMA_Init+0x2b0>
 80047ba:	2300      	movs	r3, #0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047c6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0307 	bic.w	r3, r3, #7
 80047de:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d117      	bne.n	8004822 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00e      	beq.n	8004822 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f002 fb4d 	bl	8006ea4 <DMA_CheckFifoParam>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2240      	movs	r2, #64	@ 0x40
 8004814:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e197      	b.n	8004b52 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f002 fa88 	bl	8006d40 <DMA_CalcBaseAndBitshift>
 8004830:	4603      	mov	r3, r0
 8004832:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	223f      	movs	r2, #63	@ 0x3f
 800483e:	409a      	lsls	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	e0cd      	b.n	80049e2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a3b      	ldr	r2, [pc, #236]	@ (8004938 <HAL_DMA_Init+0x42c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a39      	ldr	r2, [pc, #228]	@ (800493c <HAL_DMA_Init+0x430>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a38      	ldr	r2, [pc, #224]	@ (8004940 <HAL_DMA_Init+0x434>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a36      	ldr	r2, [pc, #216]	@ (8004944 <HAL_DMA_Init+0x438>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a35      	ldr	r2, [pc, #212]	@ (8004948 <HAL_DMA_Init+0x43c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a33      	ldr	r2, [pc, #204]	@ (800494c <HAL_DMA_Init+0x440>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a32      	ldr	r2, [pc, #200]	@ (8004950 <HAL_DMA_Init+0x444>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_Init+0x38a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a30      	ldr	r2, [pc, #192]	@ (8004954 <HAL_DMA_Init+0x448>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_DMA_Init+0x38e>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <HAL_DMA_Init+0x390>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8097 	beq.w	80049d0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a24      	ldr	r2, [pc, #144]	@ (8004938 <HAL_DMA_Init+0x42c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d021      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <HAL_DMA_Init+0x430>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d01c      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <HAL_DMA_Init+0x434>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d017      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004944 <HAL_DMA_Init+0x438>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d012      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004948 <HAL_DMA_Init+0x43c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d00d      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	@ (800494c <HAL_DMA_Init+0x440>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d008      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004950 <HAL_DMA_Init+0x444>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <HAL_DMA_Init+0x3e4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a19      	ldr	r2, [pc, #100]	@ (8004954 <HAL_DMA_Init+0x448>)
 80048ee:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <HAL_DMA_Init+0x44c>)
 800490c:	4013      	ands	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	2b40      	cmp	r3, #64	@ 0x40
 8004916:	d021      	beq.n	800495c <HAL_DMA_Init+0x450>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b80      	cmp	r3, #128	@ 0x80
 800491e:	d102      	bne.n	8004926 <HAL_DMA_Init+0x41a>
 8004920:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004924:	e01b      	b.n	800495e <HAL_DMA_Init+0x452>
 8004926:	2300      	movs	r3, #0
 8004928:	e019      	b.n	800495e <HAL_DMA_Init+0x452>
 800492a:	bf00      	nop
 800492c:	fe10803f 	.word	0xfe10803f
 8004930:	5c001000 	.word	0x5c001000
 8004934:	ffff0000 	.word	0xffff0000
 8004938:	58025408 	.word	0x58025408
 800493c:	5802541c 	.word	0x5802541c
 8004940:	58025430 	.word	0x58025430
 8004944:	58025444 	.word	0x58025444
 8004948:	58025458 	.word	0x58025458
 800494c:	5802546c 	.word	0x5802546c
 8004950:	58025480 	.word	0x58025480
 8004954:	58025494 	.word	0x58025494
 8004958:	fffe000f 	.word	0xfffe000f
 800495c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68d2      	ldr	r2, [r2, #12]
 8004962:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800496c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	699b      	ldr	r3, [r3, #24]
 800497a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800497c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004984:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800498c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	4313      	orrs	r3, r2
 8004992:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	461a      	mov	r2, r3
 80049a2:	4b6e      	ldr	r3, [pc, #440]	@ (8004b5c <HAL_DMA_Init+0x650>)
 80049a4:	4413      	add	r3, r2
 80049a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004b60 <HAL_DMA_Init+0x654>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	091b      	lsrs	r3, r3, #4
 80049ae:	009a      	lsls	r2, r3, #2
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f002 f9c3 	bl	8006d40 <DMA_CalcBaseAndBitshift>
 80049ba:	4603      	mov	r3, r0
 80049bc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	2201      	movs	r2, #1
 80049c8:	409a      	lsls	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	e008      	b.n	80049e2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2240      	movs	r2, #64	@ 0x40
 80049d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2203      	movs	r2, #3
 80049da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e0b7      	b.n	8004b52 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a5f      	ldr	r2, [pc, #380]	@ (8004b64 <HAL_DMA_Init+0x658>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d072      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b68 <HAL_DMA_Init+0x65c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d06d      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a5c      	ldr	r2, [pc, #368]	@ (8004b6c <HAL_DMA_Init+0x660>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d068      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a5a      	ldr	r2, [pc, #360]	@ (8004b70 <HAL_DMA_Init+0x664>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d063      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a59      	ldr	r2, [pc, #356]	@ (8004b74 <HAL_DMA_Init+0x668>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d05e      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a57      	ldr	r2, [pc, #348]	@ (8004b78 <HAL_DMA_Init+0x66c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d059      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a56      	ldr	r2, [pc, #344]	@ (8004b7c <HAL_DMA_Init+0x670>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d054      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a54      	ldr	r2, [pc, #336]	@ (8004b80 <HAL_DMA_Init+0x674>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04f      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a53      	ldr	r2, [pc, #332]	@ (8004b84 <HAL_DMA_Init+0x678>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d04a      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a51      	ldr	r2, [pc, #324]	@ (8004b88 <HAL_DMA_Init+0x67c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d045      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a50      	ldr	r2, [pc, #320]	@ (8004b8c <HAL_DMA_Init+0x680>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d040      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a4e      	ldr	r2, [pc, #312]	@ (8004b90 <HAL_DMA_Init+0x684>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d03b      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b94 <HAL_DMA_Init+0x688>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d036      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a4b      	ldr	r2, [pc, #300]	@ (8004b98 <HAL_DMA_Init+0x68c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d031      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a4a      	ldr	r2, [pc, #296]	@ (8004b9c <HAL_DMA_Init+0x690>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d02c      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a48      	ldr	r2, [pc, #288]	@ (8004ba0 <HAL_DMA_Init+0x694>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d027      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a47      	ldr	r2, [pc, #284]	@ (8004ba4 <HAL_DMA_Init+0x698>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d022      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a45      	ldr	r2, [pc, #276]	@ (8004ba8 <HAL_DMA_Init+0x69c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d01d      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a44      	ldr	r2, [pc, #272]	@ (8004bac <HAL_DMA_Init+0x6a0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d018      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a42      	ldr	r2, [pc, #264]	@ (8004bb0 <HAL_DMA_Init+0x6a4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a41      	ldr	r2, [pc, #260]	@ (8004bb4 <HAL_DMA_Init+0x6a8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00e      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8004bb8 <HAL_DMA_Init+0x6ac>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d009      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a3e      	ldr	r2, [pc, #248]	@ (8004bbc <HAL_DMA_Init+0x6b0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_DMA_Init+0x5c6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bc0 <HAL_DMA_Init+0x6b4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <HAL_DMA_Init+0x5ca>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_DMA_Init+0x5cc>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d032      	beq.n	8004b42 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f002 fa5d 	bl	8006f9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b80      	cmp	r3, #128	@ 0x80
 8004ae8:	d102      	bne.n	8004af0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b04:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <HAL_DMA_Init+0x624>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d80c      	bhi.n	8004b30 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f002 fada 	bl	80070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b2c:	605a      	str	r2, [r3, #4]
 8004b2e:	e008      	b.n	8004b42 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	a7fdabf8 	.word	0xa7fdabf8
 8004b60:	cccccccd 	.word	0xcccccccd
 8004b64:	40020010 	.word	0x40020010
 8004b68:	40020028 	.word	0x40020028
 8004b6c:	40020040 	.word	0x40020040
 8004b70:	40020058 	.word	0x40020058
 8004b74:	40020070 	.word	0x40020070
 8004b78:	40020088 	.word	0x40020088
 8004b7c:	400200a0 	.word	0x400200a0
 8004b80:	400200b8 	.word	0x400200b8
 8004b84:	40020410 	.word	0x40020410
 8004b88:	40020428 	.word	0x40020428
 8004b8c:	40020440 	.word	0x40020440
 8004b90:	40020458 	.word	0x40020458
 8004b94:	40020470 	.word	0x40020470
 8004b98:	40020488 	.word	0x40020488
 8004b9c:	400204a0 	.word	0x400204a0
 8004ba0:	400204b8 	.word	0x400204b8
 8004ba4:	58025408 	.word	0x58025408
 8004ba8:	5802541c 	.word	0x5802541c
 8004bac:	58025430 	.word	0x58025430
 8004bb0:	58025444 	.word	0x58025444
 8004bb4:	58025458 	.word	0x58025458
 8004bb8:	5802546c 	.word	0x5802546c
 8004bbc:	58025480 	.word	0x58025480
 8004bc0:	58025494 	.word	0x58025494

08004bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e226      	b.n	800502e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Start_IT+0x2a>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e21f      	b.n	800502e <HAL_DMA_Start_IT+0x46a>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	f040 820a 	bne.w	8005018 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a68      	ldr	r2, [pc, #416]	@ (8004db8 <HAL_DMA_Start_IT+0x1f4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d04a      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a66      	ldr	r2, [pc, #408]	@ (8004dbc <HAL_DMA_Start_IT+0x1f8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d045      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a65      	ldr	r2, [pc, #404]	@ (8004dc0 <HAL_DMA_Start_IT+0x1fc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d040      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a63      	ldr	r2, [pc, #396]	@ (8004dc4 <HAL_DMA_Start_IT+0x200>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d03b      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a62      	ldr	r2, [pc, #392]	@ (8004dc8 <HAL_DMA_Start_IT+0x204>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d036      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a60      	ldr	r2, [pc, #384]	@ (8004dcc <HAL_DMA_Start_IT+0x208>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d031      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a5f      	ldr	r2, [pc, #380]	@ (8004dd0 <HAL_DMA_Start_IT+0x20c>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d02c      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8004dd4 <HAL_DMA_Start_IT+0x210>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d027      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd8 <HAL_DMA_Start_IT+0x214>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d022      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a5a      	ldr	r2, [pc, #360]	@ (8004ddc <HAL_DMA_Start_IT+0x218>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01d      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a59      	ldr	r2, [pc, #356]	@ (8004de0 <HAL_DMA_Start_IT+0x21c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d018      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a57      	ldr	r2, [pc, #348]	@ (8004de4 <HAL_DMA_Start_IT+0x220>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d013      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a56      	ldr	r2, [pc, #344]	@ (8004de8 <HAL_DMA_Start_IT+0x224>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d00e      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a54      	ldr	r2, [pc, #336]	@ (8004dec <HAL_DMA_Start_IT+0x228>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d009      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a53      	ldr	r2, [pc, #332]	@ (8004df0 <HAL_DMA_Start_IT+0x22c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d004      	beq.n	8004cb2 <HAL_DMA_Start_IT+0xee>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a51      	ldr	r2, [pc, #324]	@ (8004df4 <HAL_DMA_Start_IT+0x230>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d108      	bne.n	8004cc4 <HAL_DMA_Start_IT+0x100>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e007      	b.n	8004cd4 <HAL_DMA_Start_IT+0x110>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0201 	bic.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f001 fe84 	bl	80069e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a34      	ldr	r2, [pc, #208]	@ (8004db8 <HAL_DMA_Start_IT+0x1f4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <HAL_DMA_Start_IT+0x1f8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a31      	ldr	r2, [pc, #196]	@ (8004dc0 <HAL_DMA_Start_IT+0x1fc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a30      	ldr	r2, [pc, #192]	@ (8004dc4 <HAL_DMA_Start_IT+0x200>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc8 <HAL_DMA_Start_IT+0x204>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2d      	ldr	r2, [pc, #180]	@ (8004dcc <HAL_DMA_Start_IT+0x208>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd0 <HAL_DMA_Start_IT+0x20c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd4 <HAL_DMA_Start_IT+0x210>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a28      	ldr	r2, [pc, #160]	@ (8004dd8 <HAL_DMA_Start_IT+0x214>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <HAL_DMA_Start_IT+0x218>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a25      	ldr	r2, [pc, #148]	@ (8004de0 <HAL_DMA_Start_IT+0x21c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a24      	ldr	r2, [pc, #144]	@ (8004de4 <HAL_DMA_Start_IT+0x220>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a22      	ldr	r2, [pc, #136]	@ (8004de8 <HAL_DMA_Start_IT+0x224>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a21      	ldr	r2, [pc, #132]	@ (8004dec <HAL_DMA_Start_IT+0x228>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	@ (8004df0 <HAL_DMA_Start_IT+0x22c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_Start_IT+0x1bc>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004df4 <HAL_DMA_Start_IT+0x230>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d101      	bne.n	8004d84 <HAL_DMA_Start_IT+0x1c0>
 8004d80:	2301      	movs	r3, #1
 8004d82:	e000      	b.n	8004d86 <HAL_DMA_Start_IT+0x1c2>
 8004d84:	2300      	movs	r3, #0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d036      	beq.n	8004df8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f023 021e 	bic.w	r2, r3, #30
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0216 	orr.w	r2, r2, #22
 8004d9c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d03e      	beq.n	8004e24 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0208 	orr.w	r2, r2, #8
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e035      	b.n	8004e24 <HAL_DMA_Start_IT+0x260>
 8004db8:	40020010 	.word	0x40020010
 8004dbc:	40020028 	.word	0x40020028
 8004dc0:	40020040 	.word	0x40020040
 8004dc4:	40020058 	.word	0x40020058
 8004dc8:	40020070 	.word	0x40020070
 8004dcc:	40020088 	.word	0x40020088
 8004dd0:	400200a0 	.word	0x400200a0
 8004dd4:	400200b8 	.word	0x400200b8
 8004dd8:	40020410 	.word	0x40020410
 8004ddc:	40020428 	.word	0x40020428
 8004de0:	40020440 	.word	0x40020440
 8004de4:	40020458 	.word	0x40020458
 8004de8:	40020470 	.word	0x40020470
 8004dec:	40020488 	.word	0x40020488
 8004df0:	400204a0 	.word	0x400204a0
 8004df4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 020e 	bic.w	r2, r3, #14
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 020a 	orr.w	r2, r2, #10
 8004e0a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0204 	orr.w	r2, r2, #4
 8004e22:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a83      	ldr	r2, [pc, #524]	@ (8005038 <HAL_DMA_Start_IT+0x474>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d072      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a82      	ldr	r2, [pc, #520]	@ (800503c <HAL_DMA_Start_IT+0x478>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d06d      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a80      	ldr	r2, [pc, #512]	@ (8005040 <HAL_DMA_Start_IT+0x47c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d068      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a7f      	ldr	r2, [pc, #508]	@ (8005044 <HAL_DMA_Start_IT+0x480>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d063      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a7d      	ldr	r2, [pc, #500]	@ (8005048 <HAL_DMA_Start_IT+0x484>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d05e      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800504c <HAL_DMA_Start_IT+0x488>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d059      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a7a      	ldr	r2, [pc, #488]	@ (8005050 <HAL_DMA_Start_IT+0x48c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d054      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a79      	ldr	r2, [pc, #484]	@ (8005054 <HAL_DMA_Start_IT+0x490>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d04f      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a77      	ldr	r2, [pc, #476]	@ (8005058 <HAL_DMA_Start_IT+0x494>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d04a      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a76      	ldr	r2, [pc, #472]	@ (800505c <HAL_DMA_Start_IT+0x498>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d045      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a74      	ldr	r2, [pc, #464]	@ (8005060 <HAL_DMA_Start_IT+0x49c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d040      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a73      	ldr	r2, [pc, #460]	@ (8005064 <HAL_DMA_Start_IT+0x4a0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d03b      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a71      	ldr	r2, [pc, #452]	@ (8005068 <HAL_DMA_Start_IT+0x4a4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d036      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a70      	ldr	r2, [pc, #448]	@ (800506c <HAL_DMA_Start_IT+0x4a8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d031      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a6e      	ldr	r2, [pc, #440]	@ (8005070 <HAL_DMA_Start_IT+0x4ac>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d02c      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6d      	ldr	r2, [pc, #436]	@ (8005074 <HAL_DMA_Start_IT+0x4b0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d027      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8005078 <HAL_DMA_Start_IT+0x4b4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d022      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a6a      	ldr	r2, [pc, #424]	@ (800507c <HAL_DMA_Start_IT+0x4b8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d01d      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a68      	ldr	r2, [pc, #416]	@ (8005080 <HAL_DMA_Start_IT+0x4bc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d018      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a67      	ldr	r2, [pc, #412]	@ (8005084 <HAL_DMA_Start_IT+0x4c0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d013      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a65      	ldr	r2, [pc, #404]	@ (8005088 <HAL_DMA_Start_IT+0x4c4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a64      	ldr	r2, [pc, #400]	@ (800508c <HAL_DMA_Start_IT+0x4c8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d009      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a62      	ldr	r2, [pc, #392]	@ (8005090 <HAL_DMA_Start_IT+0x4cc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_DMA_Start_IT+0x350>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a61      	ldr	r2, [pc, #388]	@ (8005094 <HAL_DMA_Start_IT+0x4d0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d101      	bne.n	8004f18 <HAL_DMA_Start_IT+0x354>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_DMA_Start_IT+0x356>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01a      	beq.n	8004f54 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f3a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f52:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a37      	ldr	r2, [pc, #220]	@ (8005038 <HAL_DMA_Start_IT+0x474>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d04a      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a36      	ldr	r2, [pc, #216]	@ (800503c <HAL_DMA_Start_IT+0x478>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d045      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a34      	ldr	r2, [pc, #208]	@ (8005040 <HAL_DMA_Start_IT+0x47c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d040      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <HAL_DMA_Start_IT+0x480>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d03b      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a31      	ldr	r2, [pc, #196]	@ (8005048 <HAL_DMA_Start_IT+0x484>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d036      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a30      	ldr	r2, [pc, #192]	@ (800504c <HAL_DMA_Start_IT+0x488>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d031      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2e      	ldr	r2, [pc, #184]	@ (8005050 <HAL_DMA_Start_IT+0x48c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d02c      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <HAL_DMA_Start_IT+0x490>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d027      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005058 <HAL_DMA_Start_IT+0x494>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d022      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800505c <HAL_DMA_Start_IT+0x498>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d01d      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	@ (8005060 <HAL_DMA_Start_IT+0x49c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d018      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <HAL_DMA_Start_IT+0x4a0>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a25      	ldr	r2, [pc, #148]	@ (8005068 <HAL_DMA_Start_IT+0x4a4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d00e      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a24      	ldr	r2, [pc, #144]	@ (800506c <HAL_DMA_Start_IT+0x4a8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d009      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	@ (8005070 <HAL_DMA_Start_IT+0x4ac>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d004      	beq.n	8004ff4 <HAL_DMA_Start_IT+0x430>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <HAL_DMA_Start_IT+0x4b0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d108      	bne.n	8005006 <HAL_DMA_Start_IT+0x442>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0201 	orr.w	r2, r2, #1
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e012      	b.n	800502c <HAL_DMA_Start_IT+0x468>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0201 	orr.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e009      	b.n	800502c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800502c:	7dfb      	ldrb	r3, [r7, #23]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40020010 	.word	0x40020010
 800503c:	40020028 	.word	0x40020028
 8005040:	40020040 	.word	0x40020040
 8005044:	40020058 	.word	0x40020058
 8005048:	40020070 	.word	0x40020070
 800504c:	40020088 	.word	0x40020088
 8005050:	400200a0 	.word	0x400200a0
 8005054:	400200b8 	.word	0x400200b8
 8005058:	40020410 	.word	0x40020410
 800505c:	40020428 	.word	0x40020428
 8005060:	40020440 	.word	0x40020440
 8005064:	40020458 	.word	0x40020458
 8005068:	40020470 	.word	0x40020470
 800506c:	40020488 	.word	0x40020488
 8005070:	400204a0 	.word	0x400204a0
 8005074:	400204b8 	.word	0x400204b8
 8005078:	58025408 	.word	0x58025408
 800507c:	5802541c 	.word	0x5802541c
 8005080:	58025430 	.word	0x58025430
 8005084:	58025444 	.word	0x58025444
 8005088:	58025458 	.word	0x58025458
 800508c:	5802546c 	.word	0x5802546c
 8005090:	58025480 	.word	0x58025480
 8005094:	58025494 	.word	0x58025494

08005098 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80050a0:	f7fd fdbe 	bl	8002c20 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e2dc      	b.n	800566a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d008      	beq.n	80050ce <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2280      	movs	r2, #128	@ 0x80
 80050c0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e2cd      	b.n	800566a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a76      	ldr	r2, [pc, #472]	@ (80052ac <HAL_DMA_Abort+0x214>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d04a      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a74      	ldr	r2, [pc, #464]	@ (80052b0 <HAL_DMA_Abort+0x218>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d045      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a73      	ldr	r2, [pc, #460]	@ (80052b4 <HAL_DMA_Abort+0x21c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d040      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a71      	ldr	r2, [pc, #452]	@ (80052b8 <HAL_DMA_Abort+0x220>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d03b      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a70      	ldr	r2, [pc, #448]	@ (80052bc <HAL_DMA_Abort+0x224>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d036      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a6e      	ldr	r2, [pc, #440]	@ (80052c0 <HAL_DMA_Abort+0x228>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d031      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a6d      	ldr	r2, [pc, #436]	@ (80052c4 <HAL_DMA_Abort+0x22c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d02c      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6b      	ldr	r2, [pc, #428]	@ (80052c8 <HAL_DMA_Abort+0x230>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d027      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a6a      	ldr	r2, [pc, #424]	@ (80052cc <HAL_DMA_Abort+0x234>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d022      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a68      	ldr	r2, [pc, #416]	@ (80052d0 <HAL_DMA_Abort+0x238>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d01d      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a67      	ldr	r2, [pc, #412]	@ (80052d4 <HAL_DMA_Abort+0x23c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d018      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a65      	ldr	r2, [pc, #404]	@ (80052d8 <HAL_DMA_Abort+0x240>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d013      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a64      	ldr	r2, [pc, #400]	@ (80052dc <HAL_DMA_Abort+0x244>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00e      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a62      	ldr	r2, [pc, #392]	@ (80052e0 <HAL_DMA_Abort+0x248>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d009      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a61      	ldr	r2, [pc, #388]	@ (80052e4 <HAL_DMA_Abort+0x24c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_DMA_Abort+0xd6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a5f      	ldr	r2, [pc, #380]	@ (80052e8 <HAL_DMA_Abort+0x250>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d101      	bne.n	8005172 <HAL_DMA_Abort+0xda>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_DMA_Abort+0xdc>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 021e 	bic.w	r2, r2, #30
 8005186:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005196:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	e00a      	b.n	80051b6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 020e 	bic.w	r2, r2, #14
 80051ae:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a3c      	ldr	r2, [pc, #240]	@ (80052ac <HAL_DMA_Abort+0x214>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d072      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a3a      	ldr	r2, [pc, #232]	@ (80052b0 <HAL_DMA_Abort+0x218>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d06d      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a39      	ldr	r2, [pc, #228]	@ (80052b4 <HAL_DMA_Abort+0x21c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d068      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a37      	ldr	r2, [pc, #220]	@ (80052b8 <HAL_DMA_Abort+0x220>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d063      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a36      	ldr	r2, [pc, #216]	@ (80052bc <HAL_DMA_Abort+0x224>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d05e      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a34      	ldr	r2, [pc, #208]	@ (80052c0 <HAL_DMA_Abort+0x228>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d059      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a33      	ldr	r2, [pc, #204]	@ (80052c4 <HAL_DMA_Abort+0x22c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d054      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a31      	ldr	r2, [pc, #196]	@ (80052c8 <HAL_DMA_Abort+0x230>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d04f      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a30      	ldr	r2, [pc, #192]	@ (80052cc <HAL_DMA_Abort+0x234>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d04a      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2e      	ldr	r2, [pc, #184]	@ (80052d0 <HAL_DMA_Abort+0x238>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d045      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2d      	ldr	r2, [pc, #180]	@ (80052d4 <HAL_DMA_Abort+0x23c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d040      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2b      	ldr	r2, [pc, #172]	@ (80052d8 <HAL_DMA_Abort+0x240>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d03b      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2a      	ldr	r2, [pc, #168]	@ (80052dc <HAL_DMA_Abort+0x244>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d036      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a28      	ldr	r2, [pc, #160]	@ (80052e0 <HAL_DMA_Abort+0x248>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d031      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a27      	ldr	r2, [pc, #156]	@ (80052e4 <HAL_DMA_Abort+0x24c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d02c      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a25      	ldr	r2, [pc, #148]	@ (80052e8 <HAL_DMA_Abort+0x250>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d027      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a24      	ldr	r2, [pc, #144]	@ (80052ec <HAL_DMA_Abort+0x254>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <HAL_DMA_Abort+0x258>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01d      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a21      	ldr	r2, [pc, #132]	@ (80052f4 <HAL_DMA_Abort+0x25c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1f      	ldr	r2, [pc, #124]	@ (80052f8 <HAL_DMA_Abort+0x260>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1e      	ldr	r2, [pc, #120]	@ (80052fc <HAL_DMA_Abort+0x264>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1c      	ldr	r2, [pc, #112]	@ (8005300 <HAL_DMA_Abort+0x268>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1b      	ldr	r2, [pc, #108]	@ (8005304 <HAL_DMA_Abort+0x26c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_DMA_Abort+0x20e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a19      	ldr	r2, [pc, #100]	@ (8005308 <HAL_DMA_Abort+0x270>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d132      	bne.n	800530c <HAL_DMA_Abort+0x274>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e031      	b.n	800530e <HAL_DMA_Abort+0x276>
 80052aa:	bf00      	nop
 80052ac:	40020010 	.word	0x40020010
 80052b0:	40020028 	.word	0x40020028
 80052b4:	40020040 	.word	0x40020040
 80052b8:	40020058 	.word	0x40020058
 80052bc:	40020070 	.word	0x40020070
 80052c0:	40020088 	.word	0x40020088
 80052c4:	400200a0 	.word	0x400200a0
 80052c8:	400200b8 	.word	0x400200b8
 80052cc:	40020410 	.word	0x40020410
 80052d0:	40020428 	.word	0x40020428
 80052d4:	40020440 	.word	0x40020440
 80052d8:	40020458 	.word	0x40020458
 80052dc:	40020470 	.word	0x40020470
 80052e0:	40020488 	.word	0x40020488
 80052e4:	400204a0 	.word	0x400204a0
 80052e8:	400204b8 	.word	0x400204b8
 80052ec:	58025408 	.word	0x58025408
 80052f0:	5802541c 	.word	0x5802541c
 80052f4:	58025430 	.word	0x58025430
 80052f8:	58025444 	.word	0x58025444
 80052fc:	58025458 	.word	0x58025458
 8005300:	5802546c 	.word	0x5802546c
 8005304:	58025480 	.word	0x58025480
 8005308:	58025494 	.word	0x58025494
 800530c:	2300      	movs	r3, #0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d007      	beq.n	8005322 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005320:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a6d      	ldr	r2, [pc, #436]	@ (80054dc <HAL_DMA_Abort+0x444>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d04a      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a6b      	ldr	r2, [pc, #428]	@ (80054e0 <HAL_DMA_Abort+0x448>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d045      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a6a      	ldr	r2, [pc, #424]	@ (80054e4 <HAL_DMA_Abort+0x44c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d040      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a68      	ldr	r2, [pc, #416]	@ (80054e8 <HAL_DMA_Abort+0x450>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d03b      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a67      	ldr	r2, [pc, #412]	@ (80054ec <HAL_DMA_Abort+0x454>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d036      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a65      	ldr	r2, [pc, #404]	@ (80054f0 <HAL_DMA_Abort+0x458>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d031      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a64      	ldr	r2, [pc, #400]	@ (80054f4 <HAL_DMA_Abort+0x45c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d02c      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a62      	ldr	r2, [pc, #392]	@ (80054f8 <HAL_DMA_Abort+0x460>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d027      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a61      	ldr	r2, [pc, #388]	@ (80054fc <HAL_DMA_Abort+0x464>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d022      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a5f      	ldr	r2, [pc, #380]	@ (8005500 <HAL_DMA_Abort+0x468>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01d      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5e      	ldr	r2, [pc, #376]	@ (8005504 <HAL_DMA_Abort+0x46c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5c      	ldr	r2, [pc, #368]	@ (8005508 <HAL_DMA_Abort+0x470>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d013      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a5b      	ldr	r2, [pc, #364]	@ (800550c <HAL_DMA_Abort+0x474>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a59      	ldr	r2, [pc, #356]	@ (8005510 <HAL_DMA_Abort+0x478>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a58      	ldr	r2, [pc, #352]	@ (8005514 <HAL_DMA_Abort+0x47c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_DMA_Abort+0x32a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a56      	ldr	r2, [pc, #344]	@ (8005518 <HAL_DMA_Abort+0x480>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d108      	bne.n	80053d4 <HAL_DMA_Abort+0x33c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e007      	b.n	80053e4 <HAL_DMA_Abort+0x34c>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 0201 	bic.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053e4:	e013      	b.n	800540e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e6:	f7fd fc1b 	bl	8002c20 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b05      	cmp	r3, #5
 80053f2:	d90c      	bls.n	800540e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2203      	movs	r2, #3
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e12d      	b.n	800566a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e5      	bne.n	80053e6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a2f      	ldr	r2, [pc, #188]	@ (80054dc <HAL_DMA_Abort+0x444>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d04a      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a2d      	ldr	r2, [pc, #180]	@ (80054e0 <HAL_DMA_Abort+0x448>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d045      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a2c      	ldr	r2, [pc, #176]	@ (80054e4 <HAL_DMA_Abort+0x44c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d040      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2a      	ldr	r2, [pc, #168]	@ (80054e8 <HAL_DMA_Abort+0x450>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d03b      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a29      	ldr	r2, [pc, #164]	@ (80054ec <HAL_DMA_Abort+0x454>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d036      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a27      	ldr	r2, [pc, #156]	@ (80054f0 <HAL_DMA_Abort+0x458>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d031      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a26      	ldr	r2, [pc, #152]	@ (80054f4 <HAL_DMA_Abort+0x45c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d02c      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a24      	ldr	r2, [pc, #144]	@ (80054f8 <HAL_DMA_Abort+0x460>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d027      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a23      	ldr	r2, [pc, #140]	@ (80054fc <HAL_DMA_Abort+0x464>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a21      	ldr	r2, [pc, #132]	@ (8005500 <HAL_DMA_Abort+0x468>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01d      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a20      	ldr	r2, [pc, #128]	@ (8005504 <HAL_DMA_Abort+0x46c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d018      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1e      	ldr	r2, [pc, #120]	@ (8005508 <HAL_DMA_Abort+0x470>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1d      	ldr	r2, [pc, #116]	@ (800550c <HAL_DMA_Abort+0x474>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005510 <HAL_DMA_Abort+0x478>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005514 <HAL_DMA_Abort+0x47c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_DMA_Abort+0x422>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	@ (8005518 <HAL_DMA_Abort+0x480>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_DMA_Abort+0x426>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <HAL_DMA_Abort+0x428>
 80054be:	2300      	movs	r3, #0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02b      	beq.n	800551c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ce:	f003 031f 	and.w	r3, r3, #31
 80054d2:	223f      	movs	r2, #63	@ 0x3f
 80054d4:	409a      	lsls	r2, r3
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	e02a      	b.n	8005532 <HAL_DMA_Abort+0x49a>
 80054dc:	40020010 	.word	0x40020010
 80054e0:	40020028 	.word	0x40020028
 80054e4:	40020040 	.word	0x40020040
 80054e8:	40020058 	.word	0x40020058
 80054ec:	40020070 	.word	0x40020070
 80054f0:	40020088 	.word	0x40020088
 80054f4:	400200a0 	.word	0x400200a0
 80054f8:	400200b8 	.word	0x400200b8
 80054fc:	40020410 	.word	0x40020410
 8005500:	40020428 	.word	0x40020428
 8005504:	40020440 	.word	0x40020440
 8005508:	40020458 	.word	0x40020458
 800550c:	40020470 	.word	0x40020470
 8005510:	40020488 	.word	0x40020488
 8005514:	400204a0 	.word	0x400204a0
 8005518:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005520:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005526:	f003 031f 	and.w	r3, r3, #31
 800552a:	2201      	movs	r2, #1
 800552c:	409a      	lsls	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a4f      	ldr	r2, [pc, #316]	@ (8005674 <HAL_DMA_Abort+0x5dc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d072      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4d      	ldr	r2, [pc, #308]	@ (8005678 <HAL_DMA_Abort+0x5e0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d06d      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4c      	ldr	r2, [pc, #304]	@ (800567c <HAL_DMA_Abort+0x5e4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d068      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a4a      	ldr	r2, [pc, #296]	@ (8005680 <HAL_DMA_Abort+0x5e8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d063      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a49      	ldr	r2, [pc, #292]	@ (8005684 <HAL_DMA_Abort+0x5ec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d05e      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a47      	ldr	r2, [pc, #284]	@ (8005688 <HAL_DMA_Abort+0x5f0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d059      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a46      	ldr	r2, [pc, #280]	@ (800568c <HAL_DMA_Abort+0x5f4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d054      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a44      	ldr	r2, [pc, #272]	@ (8005690 <HAL_DMA_Abort+0x5f8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d04f      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a43      	ldr	r2, [pc, #268]	@ (8005694 <HAL_DMA_Abort+0x5fc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d04a      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a41      	ldr	r2, [pc, #260]	@ (8005698 <HAL_DMA_Abort+0x600>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d045      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a40      	ldr	r2, [pc, #256]	@ (800569c <HAL_DMA_Abort+0x604>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d040      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3e      	ldr	r2, [pc, #248]	@ (80056a0 <HAL_DMA_Abort+0x608>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d03b      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a3d      	ldr	r2, [pc, #244]	@ (80056a4 <HAL_DMA_Abort+0x60c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d036      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a3b      	ldr	r2, [pc, #236]	@ (80056a8 <HAL_DMA_Abort+0x610>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d031      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a3a      	ldr	r2, [pc, #232]	@ (80056ac <HAL_DMA_Abort+0x614>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d02c      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a38      	ldr	r2, [pc, #224]	@ (80056b0 <HAL_DMA_Abort+0x618>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d027      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a37      	ldr	r2, [pc, #220]	@ (80056b4 <HAL_DMA_Abort+0x61c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d022      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	@ (80056b8 <HAL_DMA_Abort+0x620>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01d      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a34      	ldr	r2, [pc, #208]	@ (80056bc <HAL_DMA_Abort+0x624>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d018      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a32      	ldr	r2, [pc, #200]	@ (80056c0 <HAL_DMA_Abort+0x628>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a31      	ldr	r2, [pc, #196]	@ (80056c4 <HAL_DMA_Abort+0x62c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00e      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2f      	ldr	r2, [pc, #188]	@ (80056c8 <HAL_DMA_Abort+0x630>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2e      	ldr	r2, [pc, #184]	@ (80056cc <HAL_DMA_Abort+0x634>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_DMA_Abort+0x58a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2c      	ldr	r2, [pc, #176]	@ (80056d0 <HAL_DMA_Abort+0x638>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d101      	bne.n	8005626 <HAL_DMA_Abort+0x58e>
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <HAL_DMA_Abort+0x590>
 8005626:	2300      	movs	r3, #0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d015      	beq.n	8005658 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005634:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800564c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005656:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40020010 	.word	0x40020010
 8005678:	40020028 	.word	0x40020028
 800567c:	40020040 	.word	0x40020040
 8005680:	40020058 	.word	0x40020058
 8005684:	40020070 	.word	0x40020070
 8005688:	40020088 	.word	0x40020088
 800568c:	400200a0 	.word	0x400200a0
 8005690:	400200b8 	.word	0x400200b8
 8005694:	40020410 	.word	0x40020410
 8005698:	40020428 	.word	0x40020428
 800569c:	40020440 	.word	0x40020440
 80056a0:	40020458 	.word	0x40020458
 80056a4:	40020470 	.word	0x40020470
 80056a8:	40020488 	.word	0x40020488
 80056ac:	400204a0 	.word	0x400204a0
 80056b0:	400204b8 	.word	0x400204b8
 80056b4:	58025408 	.word	0x58025408
 80056b8:	5802541c 	.word	0x5802541c
 80056bc:	58025430 	.word	0x58025430
 80056c0:	58025444 	.word	0x58025444
 80056c4:	58025458 	.word	0x58025458
 80056c8:	5802546c 	.word	0x5802546c
 80056cc:	58025480 	.word	0x58025480
 80056d0:	58025494 	.word	0x58025494

080056d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e237      	b.n	8005b56 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d004      	beq.n	80056fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2280      	movs	r2, #128	@ 0x80
 80056f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e22c      	b.n	8005b56 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a5c      	ldr	r2, [pc, #368]	@ (8005874 <HAL_DMA_Abort_IT+0x1a0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d04a      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a5b      	ldr	r2, [pc, #364]	@ (8005878 <HAL_DMA_Abort_IT+0x1a4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d045      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a59      	ldr	r2, [pc, #356]	@ (800587c <HAL_DMA_Abort_IT+0x1a8>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d040      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a58      	ldr	r2, [pc, #352]	@ (8005880 <HAL_DMA_Abort_IT+0x1ac>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d03b      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a56      	ldr	r2, [pc, #344]	@ (8005884 <HAL_DMA_Abort_IT+0x1b0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d036      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a55      	ldr	r2, [pc, #340]	@ (8005888 <HAL_DMA_Abort_IT+0x1b4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d031      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a53      	ldr	r2, [pc, #332]	@ (800588c <HAL_DMA_Abort_IT+0x1b8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d02c      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a52      	ldr	r2, [pc, #328]	@ (8005890 <HAL_DMA_Abort_IT+0x1bc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d027      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a50      	ldr	r2, [pc, #320]	@ (8005894 <HAL_DMA_Abort_IT+0x1c0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d022      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a4f      	ldr	r2, [pc, #316]	@ (8005898 <HAL_DMA_Abort_IT+0x1c4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d01d      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a4d      	ldr	r2, [pc, #308]	@ (800589c <HAL_DMA_Abort_IT+0x1c8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d018      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a4c      	ldr	r2, [pc, #304]	@ (80058a0 <HAL_DMA_Abort_IT+0x1cc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d013      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a4a      	ldr	r2, [pc, #296]	@ (80058a4 <HAL_DMA_Abort_IT+0x1d0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d00e      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a49      	ldr	r2, [pc, #292]	@ (80058a8 <HAL_DMA_Abort_IT+0x1d4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d009      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a47      	ldr	r2, [pc, #284]	@ (80058ac <HAL_DMA_Abort_IT+0x1d8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_DMA_Abort_IT+0xc8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a46      	ldr	r2, [pc, #280]	@ (80058b0 <HAL_DMA_Abort_IT+0x1dc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d101      	bne.n	80057a0 <HAL_DMA_Abort_IT+0xcc>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_DMA_Abort_IT+0xce>
 80057a0:	2300      	movs	r3, #0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 8086 	beq.w	80058b4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2204      	movs	r2, #4
 80057ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <HAL_DMA_Abort_IT+0x1a0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d04a      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <HAL_DMA_Abort_IT+0x1a4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d045      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	@ (800587c <HAL_DMA_Abort_IT+0x1a8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d040      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005880 <HAL_DMA_Abort_IT+0x1ac>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d03b      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a29      	ldr	r2, [pc, #164]	@ (8005884 <HAL_DMA_Abort_IT+0x1b0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d036      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a28      	ldr	r2, [pc, #160]	@ (8005888 <HAL_DMA_Abort_IT+0x1b4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d031      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a26      	ldr	r2, [pc, #152]	@ (800588c <HAL_DMA_Abort_IT+0x1b8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d02c      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a25      	ldr	r2, [pc, #148]	@ (8005890 <HAL_DMA_Abort_IT+0x1bc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d027      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a23      	ldr	r2, [pc, #140]	@ (8005894 <HAL_DMA_Abort_IT+0x1c0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d022      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <HAL_DMA_Abort_IT+0x1c4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01d      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a20      	ldr	r2, [pc, #128]	@ (800589c <HAL_DMA_Abort_IT+0x1c8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <HAL_DMA_Abort_IT+0x1cc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <HAL_DMA_Abort_IT+0x1d0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <HAL_DMA_Abort_IT+0x1d4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1a      	ldr	r2, [pc, #104]	@ (80058ac <HAL_DMA_Abort_IT+0x1d8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_DMA_Abort_IT+0x17c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a19      	ldr	r2, [pc, #100]	@ (80058b0 <HAL_DMA_Abort_IT+0x1dc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d108      	bne.n	8005862 <HAL_DMA_Abort_IT+0x18e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e178      	b.n	8005b54 <HAL_DMA_Abort_IT+0x480>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e16f      	b.n	8005b54 <HAL_DMA_Abort_IT+0x480>
 8005874:	40020010 	.word	0x40020010
 8005878:	40020028 	.word	0x40020028
 800587c:	40020040 	.word	0x40020040
 8005880:	40020058 	.word	0x40020058
 8005884:	40020070 	.word	0x40020070
 8005888:	40020088 	.word	0x40020088
 800588c:	400200a0 	.word	0x400200a0
 8005890:	400200b8 	.word	0x400200b8
 8005894:	40020410 	.word	0x40020410
 8005898:	40020428 	.word	0x40020428
 800589c:	40020440 	.word	0x40020440
 80058a0:	40020458 	.word	0x40020458
 80058a4:	40020470 	.word	0x40020470
 80058a8:	40020488 	.word	0x40020488
 80058ac:	400204a0 	.word	0x400204a0
 80058b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 020e 	bic.w	r2, r2, #14
 80058c2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a6c      	ldr	r2, [pc, #432]	@ (8005a7c <HAL_DMA_Abort_IT+0x3a8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d04a      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005a80 <HAL_DMA_Abort_IT+0x3ac>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d045      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a69      	ldr	r2, [pc, #420]	@ (8005a84 <HAL_DMA_Abort_IT+0x3b0>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d040      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a68      	ldr	r2, [pc, #416]	@ (8005a88 <HAL_DMA_Abort_IT+0x3b4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d03b      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a66      	ldr	r2, [pc, #408]	@ (8005a8c <HAL_DMA_Abort_IT+0x3b8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d036      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a65      	ldr	r2, [pc, #404]	@ (8005a90 <HAL_DMA_Abort_IT+0x3bc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d031      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a63      	ldr	r2, [pc, #396]	@ (8005a94 <HAL_DMA_Abort_IT+0x3c0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02c      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a62      	ldr	r2, [pc, #392]	@ (8005a98 <HAL_DMA_Abort_IT+0x3c4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d027      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a60      	ldr	r2, [pc, #384]	@ (8005a9c <HAL_DMA_Abort_IT+0x3c8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d022      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a5f      	ldr	r2, [pc, #380]	@ (8005aa0 <HAL_DMA_Abort_IT+0x3cc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d01d      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3d0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d018      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a5c      	ldr	r2, [pc, #368]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3d4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a5a      	ldr	r2, [pc, #360]	@ (8005aac <HAL_DMA_Abort_IT+0x3d8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d00e      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a59      	ldr	r2, [pc, #356]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3dc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d009      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a57      	ldr	r2, [pc, #348]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3e0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d004      	beq.n	8005964 <HAL_DMA_Abort_IT+0x290>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a56      	ldr	r2, [pc, #344]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3e4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d108      	bne.n	8005976 <HAL_DMA_Abort_IT+0x2a2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e007      	b.n	8005986 <HAL_DMA_Abort_IT+0x2b2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0201 	bic.w	r2, r2, #1
 8005984:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3c      	ldr	r2, [pc, #240]	@ (8005a7c <HAL_DMA_Abort_IT+0x3a8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d072      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a3a      	ldr	r2, [pc, #232]	@ (8005a80 <HAL_DMA_Abort_IT+0x3ac>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d06d      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a39      	ldr	r2, [pc, #228]	@ (8005a84 <HAL_DMA_Abort_IT+0x3b0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d068      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a37      	ldr	r2, [pc, #220]	@ (8005a88 <HAL_DMA_Abort_IT+0x3b4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d063      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <HAL_DMA_Abort_IT+0x3b8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d05e      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a34      	ldr	r2, [pc, #208]	@ (8005a90 <HAL_DMA_Abort_IT+0x3bc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d059      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a33      	ldr	r2, [pc, #204]	@ (8005a94 <HAL_DMA_Abort_IT+0x3c0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d054      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a31      	ldr	r2, [pc, #196]	@ (8005a98 <HAL_DMA_Abort_IT+0x3c4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d04f      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a30      	ldr	r2, [pc, #192]	@ (8005a9c <HAL_DMA_Abort_IT+0x3c8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa0 <HAL_DMA_Abort_IT+0x3cc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3d0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3d4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2a      	ldr	r2, [pc, #168]	@ (8005aac <HAL_DMA_Abort_IT+0x3d8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a28      	ldr	r2, [pc, #160]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3dc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3e0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a25      	ldr	r2, [pc, #148]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3e4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a24      	ldr	r2, [pc, #144]	@ (8005abc <HAL_DMA_Abort_IT+0x3e8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a22      	ldr	r2, [pc, #136]	@ (8005ac0 <HAL_DMA_Abort_IT+0x3ec>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	@ (8005ac4 <HAL_DMA_Abort_IT+0x3f0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	@ (8005ac8 <HAL_DMA_Abort_IT+0x3f4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	@ (8005acc <HAL_DMA_Abort_IT+0x3f8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <HAL_DMA_Abort_IT+0x3fc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad4 <HAL_DMA_Abort_IT+0x400>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_Abort_IT+0x3a2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a19      	ldr	r2, [pc, #100]	@ (8005ad8 <HAL_DMA_Abort_IT+0x404>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d132      	bne.n	8005adc <HAL_DMA_Abort_IT+0x408>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e031      	b.n	8005ade <HAL_DMA_Abort_IT+0x40a>
 8005a7a:	bf00      	nop
 8005a7c:	40020010 	.word	0x40020010
 8005a80:	40020028 	.word	0x40020028
 8005a84:	40020040 	.word	0x40020040
 8005a88:	40020058 	.word	0x40020058
 8005a8c:	40020070 	.word	0x40020070
 8005a90:	40020088 	.word	0x40020088
 8005a94:	400200a0 	.word	0x400200a0
 8005a98:	400200b8 	.word	0x400200b8
 8005a9c:	40020410 	.word	0x40020410
 8005aa0:	40020428 	.word	0x40020428
 8005aa4:	40020440 	.word	0x40020440
 8005aa8:	40020458 	.word	0x40020458
 8005aac:	40020470 	.word	0x40020470
 8005ab0:	40020488 	.word	0x40020488
 8005ab4:	400204a0 	.word	0x400204a0
 8005ab8:	400204b8 	.word	0x400204b8
 8005abc:	58025408 	.word	0x58025408
 8005ac0:	5802541c 	.word	0x5802541c
 8005ac4:	58025430 	.word	0x58025430
 8005ac8:	58025444 	.word	0x58025444
 8005acc:	58025458 	.word	0x58025458
 8005ad0:	5802546c 	.word	0x5802546c
 8005ad4:	58025480 	.word	0x58025480
 8005ad8:	58025494 	.word	0x58025494
 8005adc:	2300      	movs	r3, #0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d028      	beq.n	8005b34 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005af0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	2201      	movs	r2, #1
 8005b02:	409a      	lsls	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b10:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00c      	beq.n	8005b34 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b28:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b32:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop

08005b60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	@ 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b6c:	4b67      	ldr	r3, [pc, #412]	@ (8005d0c <HAL_DMA_IRQHandler+0x1ac>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a67      	ldr	r2, [pc, #412]	@ (8005d10 <HAL_DMA_IRQHandler+0x1b0>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	0a9b      	lsrs	r3, r3, #10
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a5f      	ldr	r2, [pc, #380]	@ (8005d14 <HAL_DMA_IRQHandler+0x1b4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d04a      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a5d      	ldr	r2, [pc, #372]	@ (8005d18 <HAL_DMA_IRQHandler+0x1b8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d045      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5c      	ldr	r2, [pc, #368]	@ (8005d1c <HAL_DMA_IRQHandler+0x1bc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d040      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5a      	ldr	r2, [pc, #360]	@ (8005d20 <HAL_DMA_IRQHandler+0x1c0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d03b      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a59      	ldr	r2, [pc, #356]	@ (8005d24 <HAL_DMA_IRQHandler+0x1c4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d036      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a57      	ldr	r2, [pc, #348]	@ (8005d28 <HAL_DMA_IRQHandler+0x1c8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d031      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a56      	ldr	r2, [pc, #344]	@ (8005d2c <HAL_DMA_IRQHandler+0x1cc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d02c      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a54      	ldr	r2, [pc, #336]	@ (8005d30 <HAL_DMA_IRQHandler+0x1d0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d027      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a53      	ldr	r2, [pc, #332]	@ (8005d34 <HAL_DMA_IRQHandler+0x1d4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d022      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a51      	ldr	r2, [pc, #324]	@ (8005d38 <HAL_DMA_IRQHandler+0x1d8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d01d      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a50      	ldr	r2, [pc, #320]	@ (8005d3c <HAL_DMA_IRQHandler+0x1dc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d018      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a4e      	ldr	r2, [pc, #312]	@ (8005d40 <HAL_DMA_IRQHandler+0x1e0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8005d44 <HAL_DMA_IRQHandler+0x1e4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d00e      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a4b      	ldr	r2, [pc, #300]	@ (8005d48 <HAL_DMA_IRQHandler+0x1e8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d009      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a4a      	ldr	r2, [pc, #296]	@ (8005d4c <HAL_DMA_IRQHandler+0x1ec>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d004      	beq.n	8005c32 <HAL_DMA_IRQHandler+0xd2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a48      	ldr	r2, [pc, #288]	@ (8005d50 <HAL_DMA_IRQHandler+0x1f0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d101      	bne.n	8005c36 <HAL_DMA_IRQHandler+0xd6>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e000      	b.n	8005c38 <HAL_DMA_IRQHandler+0xd8>
 8005c36:	2300      	movs	r3, #0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 842b 	beq.w	8006494 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c42:	f003 031f 	and.w	r3, r3, #31
 8005c46:	2208      	movs	r2, #8
 8005c48:	409a      	lsls	r2, r3
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80a2 	beq.w	8005d98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a2e      	ldr	r2, [pc, #184]	@ (8005d14 <HAL_DMA_IRQHandler+0x1b4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d04a      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a2d      	ldr	r2, [pc, #180]	@ (8005d18 <HAL_DMA_IRQHandler+0x1b8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d045      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005d1c <HAL_DMA_IRQHandler+0x1bc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d040      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2a      	ldr	r2, [pc, #168]	@ (8005d20 <HAL_DMA_IRQHandler+0x1c0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d03b      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a28      	ldr	r2, [pc, #160]	@ (8005d24 <HAL_DMA_IRQHandler+0x1c4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d036      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a27      	ldr	r2, [pc, #156]	@ (8005d28 <HAL_DMA_IRQHandler+0x1c8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d031      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <HAL_DMA_IRQHandler+0x1cc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d02c      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a24      	ldr	r2, [pc, #144]	@ (8005d30 <HAL_DMA_IRQHandler+0x1d0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d027      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <HAL_DMA_IRQHandler+0x1d4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d022      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a21      	ldr	r2, [pc, #132]	@ (8005d38 <HAL_DMA_IRQHandler+0x1d8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d01d      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <HAL_DMA_IRQHandler+0x1dc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d018      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d40 <HAL_DMA_IRQHandler+0x1e0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d013      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <HAL_DMA_IRQHandler+0x1e4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1b      	ldr	r2, [pc, #108]	@ (8005d48 <HAL_DMA_IRQHandler+0x1e8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d009      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a19      	ldr	r2, [pc, #100]	@ (8005d4c <HAL_DMA_IRQHandler+0x1ec>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x194>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a18      	ldr	r2, [pc, #96]	@ (8005d50 <HAL_DMA_IRQHandler+0x1f0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d12f      	bne.n	8005d54 <HAL_DMA_IRQHandler+0x1f4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	bf14      	ite	ne
 8005d02:	2301      	movne	r3, #1
 8005d04:	2300      	moveq	r3, #0
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	e02e      	b.n	8005d68 <HAL_DMA_IRQHandler+0x208>
 8005d0a:	bf00      	nop
 8005d0c:	2400022c 	.word	0x2400022c
 8005d10:	1b4e81b5 	.word	0x1b4e81b5
 8005d14:	40020010 	.word	0x40020010
 8005d18:	40020028 	.word	0x40020028
 8005d1c:	40020040 	.word	0x40020040
 8005d20:	40020058 	.word	0x40020058
 8005d24:	40020070 	.word	0x40020070
 8005d28:	40020088 	.word	0x40020088
 8005d2c:	400200a0 	.word	0x400200a0
 8005d30:	400200b8 	.word	0x400200b8
 8005d34:	40020410 	.word	0x40020410
 8005d38:	40020428 	.word	0x40020428
 8005d3c:	40020440 	.word	0x40020440
 8005d40:	40020458 	.word	0x40020458
 8005d44:	40020470 	.word	0x40020470
 8005d48:	40020488 	.word	0x40020488
 8005d4c:	400204a0 	.word	0x400204a0
 8005d50:	400204b8 	.word	0x400204b8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0308 	and.w	r3, r3, #8
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	bf14      	ite	ne
 8005d62:	2301      	movne	r3, #1
 8005d64:	2300      	moveq	r3, #0
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0204 	bic.w	r2, r2, #4
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d80:	f003 031f 	and.w	r3, r3, #31
 8005d84:	2208      	movs	r2, #8
 8005d86:	409a      	lsls	r2, r3
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d90:	f043 0201 	orr.w	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9c:	f003 031f 	and.w	r3, r3, #31
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	fa22 f303 	lsr.w	r3, r2, r3
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d06e      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a69      	ldr	r2, [pc, #420]	@ (8005f58 <HAL_DMA_IRQHandler+0x3f8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d04a      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a67      	ldr	r2, [pc, #412]	@ (8005f5c <HAL_DMA_IRQHandler+0x3fc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d045      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a66      	ldr	r2, [pc, #408]	@ (8005f60 <HAL_DMA_IRQHandler+0x400>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d040      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a64      	ldr	r2, [pc, #400]	@ (8005f64 <HAL_DMA_IRQHandler+0x404>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d03b      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a63      	ldr	r2, [pc, #396]	@ (8005f68 <HAL_DMA_IRQHandler+0x408>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d036      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a61      	ldr	r2, [pc, #388]	@ (8005f6c <HAL_DMA_IRQHandler+0x40c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d031      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a60      	ldr	r2, [pc, #384]	@ (8005f70 <HAL_DMA_IRQHandler+0x410>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d02c      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a5e      	ldr	r2, [pc, #376]	@ (8005f74 <HAL_DMA_IRQHandler+0x414>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d027      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a5d      	ldr	r2, [pc, #372]	@ (8005f78 <HAL_DMA_IRQHandler+0x418>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d022      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a5b      	ldr	r2, [pc, #364]	@ (8005f7c <HAL_DMA_IRQHandler+0x41c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01d      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a5a      	ldr	r2, [pc, #360]	@ (8005f80 <HAL_DMA_IRQHandler+0x420>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d018      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a58      	ldr	r2, [pc, #352]	@ (8005f84 <HAL_DMA_IRQHandler+0x424>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d013      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a57      	ldr	r2, [pc, #348]	@ (8005f88 <HAL_DMA_IRQHandler+0x428>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00e      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a55      	ldr	r2, [pc, #340]	@ (8005f8c <HAL_DMA_IRQHandler+0x42c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d009      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a54      	ldr	r2, [pc, #336]	@ (8005f90 <HAL_DMA_IRQHandler+0x430>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_IRQHandler+0x2ee>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a52      	ldr	r2, [pc, #328]	@ (8005f94 <HAL_DMA_IRQHandler+0x434>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10a      	bne.n	8005e64 <HAL_DMA_IRQHandler+0x304>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e003      	b.n	8005e6c <HAL_DMA_IRQHandler+0x30c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00d      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e74:	f003 031f 	and.w	r3, r3, #31
 8005e78:	2201      	movs	r2, #1
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e84:	f043 0202 	orr.w	r2, r3, #2
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	2204      	movs	r2, #4
 8005e96:	409a      	lsls	r2, r3
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 808f 	beq.w	8005fc0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f58 <HAL_DMA_IRQHandler+0x3f8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d04a      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005f5c <HAL_DMA_IRQHandler+0x3fc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d045      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a29      	ldr	r2, [pc, #164]	@ (8005f60 <HAL_DMA_IRQHandler+0x400>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d040      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a27      	ldr	r2, [pc, #156]	@ (8005f64 <HAL_DMA_IRQHandler+0x404>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d03b      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a26      	ldr	r2, [pc, #152]	@ (8005f68 <HAL_DMA_IRQHandler+0x408>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d036      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a24      	ldr	r2, [pc, #144]	@ (8005f6c <HAL_DMA_IRQHandler+0x40c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d031      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a23      	ldr	r2, [pc, #140]	@ (8005f70 <HAL_DMA_IRQHandler+0x410>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d02c      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a21      	ldr	r2, [pc, #132]	@ (8005f74 <HAL_DMA_IRQHandler+0x414>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d027      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a20      	ldr	r2, [pc, #128]	@ (8005f78 <HAL_DMA_IRQHandler+0x418>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d022      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1e      	ldr	r2, [pc, #120]	@ (8005f7c <HAL_DMA_IRQHandler+0x41c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01d      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f80 <HAL_DMA_IRQHandler+0x420>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d018      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1b      	ldr	r2, [pc, #108]	@ (8005f84 <HAL_DMA_IRQHandler+0x424>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f88 <HAL_DMA_IRQHandler+0x428>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d00e      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a18      	ldr	r2, [pc, #96]	@ (8005f8c <HAL_DMA_IRQHandler+0x42c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d009      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <HAL_DMA_IRQHandler+0x430>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d004      	beq.n	8005f42 <HAL_DMA_IRQHandler+0x3e2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	@ (8005f94 <HAL_DMA_IRQHandler+0x434>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d12a      	bne.n	8005f98 <HAL_DMA_IRQHandler+0x438>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf14      	ite	ne
 8005f50:	2301      	movne	r3, #1
 8005f52:	2300      	moveq	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	e023      	b.n	8005fa0 <HAL_DMA_IRQHandler+0x440>
 8005f58:	40020010 	.word	0x40020010
 8005f5c:	40020028 	.word	0x40020028
 8005f60:	40020040 	.word	0x40020040
 8005f64:	40020058 	.word	0x40020058
 8005f68:	40020070 	.word	0x40020070
 8005f6c:	40020088 	.word	0x40020088
 8005f70:	400200a0 	.word	0x400200a0
 8005f74:	400200b8 	.word	0x400200b8
 8005f78:	40020410 	.word	0x40020410
 8005f7c:	40020428 	.word	0x40020428
 8005f80:	40020440 	.word	0x40020440
 8005f84:	40020458 	.word	0x40020458
 8005f88:	40020470 	.word	0x40020470
 8005f8c:	40020488 	.word	0x40020488
 8005f90:	400204a0 	.word	0x400204a0
 8005f94:	400204b8 	.word	0x400204b8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00d      	beq.n	8005fc0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	2204      	movs	r2, #4
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb8:	f043 0204 	orr.w	r2, r3, #4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc4:	f003 031f 	and.w	r3, r3, #31
 8005fc8:	2210      	movs	r2, #16
 8005fca:	409a      	lsls	r2, r3
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80a6 	beq.w	8006122 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a85      	ldr	r2, [pc, #532]	@ (80061f0 <HAL_DMA_IRQHandler+0x690>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d04a      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a83      	ldr	r2, [pc, #524]	@ (80061f4 <HAL_DMA_IRQHandler+0x694>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d045      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a82      	ldr	r2, [pc, #520]	@ (80061f8 <HAL_DMA_IRQHandler+0x698>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a80      	ldr	r2, [pc, #512]	@ (80061fc <HAL_DMA_IRQHandler+0x69c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a7f      	ldr	r2, [pc, #508]	@ (8006200 <HAL_DMA_IRQHandler+0x6a0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d036      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a7d      	ldr	r2, [pc, #500]	@ (8006204 <HAL_DMA_IRQHandler+0x6a4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d031      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a7c      	ldr	r2, [pc, #496]	@ (8006208 <HAL_DMA_IRQHandler+0x6a8>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d02c      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a7a      	ldr	r2, [pc, #488]	@ (800620c <HAL_DMA_IRQHandler+0x6ac>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d027      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a79      	ldr	r2, [pc, #484]	@ (8006210 <HAL_DMA_IRQHandler+0x6b0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a77      	ldr	r2, [pc, #476]	@ (8006214 <HAL_DMA_IRQHandler+0x6b4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01d      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a76      	ldr	r2, [pc, #472]	@ (8006218 <HAL_DMA_IRQHandler+0x6b8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a74      	ldr	r2, [pc, #464]	@ (800621c <HAL_DMA_IRQHandler+0x6bc>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a73      	ldr	r2, [pc, #460]	@ (8006220 <HAL_DMA_IRQHandler+0x6c0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a71      	ldr	r2, [pc, #452]	@ (8006224 <HAL_DMA_IRQHandler+0x6c4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a70      	ldr	r2, [pc, #448]	@ (8006228 <HAL_DMA_IRQHandler+0x6c8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_DMA_IRQHandler+0x516>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a6e      	ldr	r2, [pc, #440]	@ (800622c <HAL_DMA_IRQHandler+0x6cc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d10a      	bne.n	800608c <HAL_DMA_IRQHandler+0x52c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b00      	cmp	r3, #0
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e009      	b.n	80060a0 <HAL_DMA_IRQHandler+0x540>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d03e      	beq.n	8006122 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060a8:	f003 031f 	and.w	r3, r3, #31
 80060ac:	2210      	movs	r2, #16
 80060ae:	409a      	lsls	r2, r3
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d018      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d108      	bne.n	80060e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d024      	beq.n	8006122 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	4798      	blx	r3
 80060e0:	e01f      	b.n	8006122 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01b      	beq.n	8006122 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
 80060f2:	e016      	b.n	8006122 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d107      	bne.n	8006112 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0208 	bic.w	r2, r2, #8
 8006110:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	2220      	movs	r2, #32
 800612c:	409a      	lsls	r2, r3
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8110 	beq.w	8006358 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a2c      	ldr	r2, [pc, #176]	@ (80061f0 <HAL_DMA_IRQHandler+0x690>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d04a      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a2b      	ldr	r2, [pc, #172]	@ (80061f4 <HAL_DMA_IRQHandler+0x694>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d045      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a29      	ldr	r2, [pc, #164]	@ (80061f8 <HAL_DMA_IRQHandler+0x698>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d040      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a28      	ldr	r2, [pc, #160]	@ (80061fc <HAL_DMA_IRQHandler+0x69c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d03b      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a26      	ldr	r2, [pc, #152]	@ (8006200 <HAL_DMA_IRQHandler+0x6a0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d036      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a25      	ldr	r2, [pc, #148]	@ (8006204 <HAL_DMA_IRQHandler+0x6a4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d031      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a23      	ldr	r2, [pc, #140]	@ (8006208 <HAL_DMA_IRQHandler+0x6a8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d02c      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a22      	ldr	r2, [pc, #136]	@ (800620c <HAL_DMA_IRQHandler+0x6ac>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d027      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a20      	ldr	r2, [pc, #128]	@ (8006210 <HAL_DMA_IRQHandler+0x6b0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d022      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1f      	ldr	r2, [pc, #124]	@ (8006214 <HAL_DMA_IRQHandler+0x6b4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d01d      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006218 <HAL_DMA_IRQHandler+0x6b8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d018      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1c      	ldr	r2, [pc, #112]	@ (800621c <HAL_DMA_IRQHandler+0x6bc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d013      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a1a      	ldr	r2, [pc, #104]	@ (8006220 <HAL_DMA_IRQHandler+0x6c0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00e      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a19      	ldr	r2, [pc, #100]	@ (8006224 <HAL_DMA_IRQHandler+0x6c4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d009      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <HAL_DMA_IRQHandler+0x6c8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d004      	beq.n	80061d8 <HAL_DMA_IRQHandler+0x678>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a16      	ldr	r2, [pc, #88]	@ (800622c <HAL_DMA_IRQHandler+0x6cc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d12b      	bne.n	8006230 <HAL_DMA_IRQHandler+0x6d0>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0310 	and.w	r3, r3, #16
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bf14      	ite	ne
 80061e6:	2301      	movne	r3, #1
 80061e8:	2300      	moveq	r3, #0
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	e02a      	b.n	8006244 <HAL_DMA_IRQHandler+0x6e4>
 80061ee:	bf00      	nop
 80061f0:	40020010 	.word	0x40020010
 80061f4:	40020028 	.word	0x40020028
 80061f8:	40020040 	.word	0x40020040
 80061fc:	40020058 	.word	0x40020058
 8006200:	40020070 	.word	0x40020070
 8006204:	40020088 	.word	0x40020088
 8006208:	400200a0 	.word	0x400200a0
 800620c:	400200b8 	.word	0x400200b8
 8006210:	40020410 	.word	0x40020410
 8006214:	40020428 	.word	0x40020428
 8006218:	40020440 	.word	0x40020440
 800621c:	40020458 	.word	0x40020458
 8006220:	40020470 	.word	0x40020470
 8006224:	40020488 	.word	0x40020488
 8006228:	400204a0 	.word	0x400204a0
 800622c:	400204b8 	.word	0x400204b8
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0302 	and.w	r3, r3, #2
 800623a:	2b00      	cmp	r3, #0
 800623c:	bf14      	ite	ne
 800623e:	2301      	movne	r3, #1
 8006240:	2300      	moveq	r3, #0
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8087 	beq.w	8006358 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2220      	movs	r2, #32
 8006254:	409a      	lsls	r2, r3
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b04      	cmp	r3, #4
 8006264:	d139      	bne.n	80062da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0216 	bic.w	r2, r2, #22
 8006274:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006284:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <HAL_DMA_IRQHandler+0x736>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0208 	bic.w	r2, r2, #8
 80062a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	223f      	movs	r2, #63	@ 0x3f
 80062b0:	409a      	lsls	r2, r3
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 834a 	beq.w	8006964 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
          }
          return;
 80062d8:	e344      	b.n	8006964 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d018      	beq.n	800631a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d108      	bne.n	8006308 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d02c      	beq.n	8006358 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	4798      	blx	r3
 8006306:	e027      	b.n	8006358 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d023      	beq.n	8006358 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
 8006318:	e01e      	b.n	8006358 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10f      	bne.n	8006348 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f022 0210 	bic.w	r2, r2, #16
 8006336:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 8306 	beq.w	800696e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	f000 8088 	beq.w	8006480 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2204      	movs	r2, #4
 8006374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7a      	ldr	r2, [pc, #488]	@ (8006568 <HAL_DMA_IRQHandler+0xa08>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d04a      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a79      	ldr	r2, [pc, #484]	@ (800656c <HAL_DMA_IRQHandler+0xa0c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d045      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a77      	ldr	r2, [pc, #476]	@ (8006570 <HAL_DMA_IRQHandler+0xa10>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d040      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a76      	ldr	r2, [pc, #472]	@ (8006574 <HAL_DMA_IRQHandler+0xa14>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d03b      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a74      	ldr	r2, [pc, #464]	@ (8006578 <HAL_DMA_IRQHandler+0xa18>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d036      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a73      	ldr	r2, [pc, #460]	@ (800657c <HAL_DMA_IRQHandler+0xa1c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d031      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a71      	ldr	r2, [pc, #452]	@ (8006580 <HAL_DMA_IRQHandler+0xa20>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d02c      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a70      	ldr	r2, [pc, #448]	@ (8006584 <HAL_DMA_IRQHandler+0xa24>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d027      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a6e      	ldr	r2, [pc, #440]	@ (8006588 <HAL_DMA_IRQHandler+0xa28>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d022      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6d      	ldr	r2, [pc, #436]	@ (800658c <HAL_DMA_IRQHandler+0xa2c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d01d      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6b      	ldr	r2, [pc, #428]	@ (8006590 <HAL_DMA_IRQHandler+0xa30>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d018      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a6a      	ldr	r2, [pc, #424]	@ (8006594 <HAL_DMA_IRQHandler+0xa34>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a68      	ldr	r2, [pc, #416]	@ (8006598 <HAL_DMA_IRQHandler+0xa38>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00e      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a67      	ldr	r2, [pc, #412]	@ (800659c <HAL_DMA_IRQHandler+0xa3c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d009      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a65      	ldr	r2, [pc, #404]	@ (80065a0 <HAL_DMA_IRQHandler+0xa40>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d004      	beq.n	8006418 <HAL_DMA_IRQHandler+0x8b8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a64      	ldr	r2, [pc, #400]	@ (80065a4 <HAL_DMA_IRQHandler+0xa44>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d108      	bne.n	800642a <HAL_DMA_IRQHandler+0x8ca>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0201 	bic.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
 8006428:	e007      	b.n	800643a <HAL_DMA_IRQHandler+0x8da>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006442:	429a      	cmp	r2, r3
 8006444:	d307      	bcc.n	8006456 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1f2      	bne.n	800643a <HAL_DMA_IRQHandler+0x8da>
 8006454:	e000      	b.n	8006458 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006456:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2203      	movs	r2, #3
 800646a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800646e:	e003      	b.n	8006478 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8272 	beq.w	800696e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
 8006492:	e26c      	b.n	800696e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a43      	ldr	r2, [pc, #268]	@ (80065a8 <HAL_DMA_IRQHandler+0xa48>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d022      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a42      	ldr	r2, [pc, #264]	@ (80065ac <HAL_DMA_IRQHandler+0xa4c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d01d      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a40      	ldr	r2, [pc, #256]	@ (80065b0 <HAL_DMA_IRQHandler+0xa50>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d018      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a3f      	ldr	r2, [pc, #252]	@ (80065b4 <HAL_DMA_IRQHandler+0xa54>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a3d      	ldr	r2, [pc, #244]	@ (80065b8 <HAL_DMA_IRQHandler+0xa58>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00e      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a3c      	ldr	r2, [pc, #240]	@ (80065bc <HAL_DMA_IRQHandler+0xa5c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d009      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a3a      	ldr	r2, [pc, #232]	@ (80065c0 <HAL_DMA_IRQHandler+0xa60>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_DMA_IRQHandler+0x984>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a39      	ldr	r2, [pc, #228]	@ (80065c4 <HAL_DMA_IRQHandler+0xa64>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d101      	bne.n	80064e8 <HAL_DMA_IRQHandler+0x988>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <HAL_DMA_IRQHandler+0x98a>
 80064e8:	2300      	movs	r3, #0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 823f 	beq.w	800696e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fc:	f003 031f 	and.w	r3, r3, #31
 8006500:	2204      	movs	r2, #4
 8006502:	409a      	lsls	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	4013      	ands	r3, r2
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80cd 	beq.w	80066a8 <HAL_DMA_IRQHandler+0xb48>
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	f003 0304 	and.w	r3, r3, #4
 8006514:	2b00      	cmp	r3, #0
 8006516:	f000 80c7 	beq.w	80066a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800651e:	f003 031f 	and.w	r3, r3, #31
 8006522:	2204      	movs	r2, #4
 8006524:	409a      	lsls	r2, r3
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d049      	beq.n	80065c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d109      	bne.n	8006552 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 8210 	beq.w	8006968 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006550:	e20a      	b.n	8006968 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 8206 	beq.w	8006968 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006564:	e200      	b.n	8006968 <HAL_DMA_IRQHandler+0xe08>
 8006566:	bf00      	nop
 8006568:	40020010 	.word	0x40020010
 800656c:	40020028 	.word	0x40020028
 8006570:	40020040 	.word	0x40020040
 8006574:	40020058 	.word	0x40020058
 8006578:	40020070 	.word	0x40020070
 800657c:	40020088 	.word	0x40020088
 8006580:	400200a0 	.word	0x400200a0
 8006584:	400200b8 	.word	0x400200b8
 8006588:	40020410 	.word	0x40020410
 800658c:	40020428 	.word	0x40020428
 8006590:	40020440 	.word	0x40020440
 8006594:	40020458 	.word	0x40020458
 8006598:	40020470 	.word	0x40020470
 800659c:	40020488 	.word	0x40020488
 80065a0:	400204a0 	.word	0x400204a0
 80065a4:	400204b8 	.word	0x400204b8
 80065a8:	58025408 	.word	0x58025408
 80065ac:	5802541c 	.word	0x5802541c
 80065b0:	58025430 	.word	0x58025430
 80065b4:	58025444 	.word	0x58025444
 80065b8:	58025458 	.word	0x58025458
 80065bc:	5802546c 	.word	0x5802546c
 80065c0:	58025480 	.word	0x58025480
 80065c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f003 0320 	and.w	r3, r3, #32
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d160      	bne.n	8006694 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7f      	ldr	r2, [pc, #508]	@ (80067d4 <HAL_DMA_IRQHandler+0xc74>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d04a      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a7d      	ldr	r2, [pc, #500]	@ (80067d8 <HAL_DMA_IRQHandler+0xc78>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d045      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a7c      	ldr	r2, [pc, #496]	@ (80067dc <HAL_DMA_IRQHandler+0xc7c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d040      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a7a      	ldr	r2, [pc, #488]	@ (80067e0 <HAL_DMA_IRQHandler+0xc80>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d03b      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a79      	ldr	r2, [pc, #484]	@ (80067e4 <HAL_DMA_IRQHandler+0xc84>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d036      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a77      	ldr	r2, [pc, #476]	@ (80067e8 <HAL_DMA_IRQHandler+0xc88>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d031      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a76      	ldr	r2, [pc, #472]	@ (80067ec <HAL_DMA_IRQHandler+0xc8c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d02c      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a74      	ldr	r2, [pc, #464]	@ (80067f0 <HAL_DMA_IRQHandler+0xc90>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d027      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a73      	ldr	r2, [pc, #460]	@ (80067f4 <HAL_DMA_IRQHandler+0xc94>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d022      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a71      	ldr	r2, [pc, #452]	@ (80067f8 <HAL_DMA_IRQHandler+0xc98>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d01d      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a70      	ldr	r2, [pc, #448]	@ (80067fc <HAL_DMA_IRQHandler+0xc9c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d018      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a6e      	ldr	r2, [pc, #440]	@ (8006800 <HAL_DMA_IRQHandler+0xca0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d013      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a6d      	ldr	r2, [pc, #436]	@ (8006804 <HAL_DMA_IRQHandler+0xca4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d00e      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6b      	ldr	r2, [pc, #428]	@ (8006808 <HAL_DMA_IRQHandler+0xca8>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d009      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a6a      	ldr	r2, [pc, #424]	@ (800680c <HAL_DMA_IRQHandler+0xcac>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d004      	beq.n	8006672 <HAL_DMA_IRQHandler+0xb12>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a68      	ldr	r2, [pc, #416]	@ (8006810 <HAL_DMA_IRQHandler+0xcb0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d108      	bne.n	8006684 <HAL_DMA_IRQHandler+0xb24>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0208 	bic.w	r2, r2, #8
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	e007      	b.n	8006694 <HAL_DMA_IRQHandler+0xb34>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8165 	beq.w	8006968 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066a6:	e15f      	b.n	8006968 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2202      	movs	r2, #2
 80066b2:	409a      	lsls	r2, r3
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80c5 	beq.w	8006848 <HAL_DMA_IRQHandler+0xce8>
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80bf 	beq.w	8006848 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2202      	movs	r2, #2
 80066d4:	409a      	lsls	r2, r3
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d018      	beq.n	8006716 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 813a 	beq.w	800696c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006700:	e134      	b.n	800696c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8130 	beq.w	800696c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006714:	e12a      	b.n	800696c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	f040 8089 	bne.w	8006834 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2b      	ldr	r2, [pc, #172]	@ (80067d4 <HAL_DMA_IRQHandler+0xc74>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d04a      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a29      	ldr	r2, [pc, #164]	@ (80067d8 <HAL_DMA_IRQHandler+0xc78>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d045      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a28      	ldr	r2, [pc, #160]	@ (80067dc <HAL_DMA_IRQHandler+0xc7c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d040      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a26      	ldr	r2, [pc, #152]	@ (80067e0 <HAL_DMA_IRQHandler+0xc80>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d03b      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a25      	ldr	r2, [pc, #148]	@ (80067e4 <HAL_DMA_IRQHandler+0xc84>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d036      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a23      	ldr	r2, [pc, #140]	@ (80067e8 <HAL_DMA_IRQHandler+0xc88>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d031      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a22      	ldr	r2, [pc, #136]	@ (80067ec <HAL_DMA_IRQHandler+0xc8c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d02c      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a20      	ldr	r2, [pc, #128]	@ (80067f0 <HAL_DMA_IRQHandler+0xc90>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d027      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a1f      	ldr	r2, [pc, #124]	@ (80067f4 <HAL_DMA_IRQHandler+0xc94>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d022      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a1d      	ldr	r2, [pc, #116]	@ (80067f8 <HAL_DMA_IRQHandler+0xc98>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01d      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a1c      	ldr	r2, [pc, #112]	@ (80067fc <HAL_DMA_IRQHandler+0xc9c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d018      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a1a      	ldr	r2, [pc, #104]	@ (8006800 <HAL_DMA_IRQHandler+0xca0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d013      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a19      	ldr	r2, [pc, #100]	@ (8006804 <HAL_DMA_IRQHandler+0xca4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d00e      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a17      	ldr	r2, [pc, #92]	@ (8006808 <HAL_DMA_IRQHandler+0xca8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d009      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a16      	ldr	r2, [pc, #88]	@ (800680c <HAL_DMA_IRQHandler+0xcac>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_DMA_IRQHandler+0xc62>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a14      	ldr	r2, [pc, #80]	@ (8006810 <HAL_DMA_IRQHandler+0xcb0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d128      	bne.n	8006814 <HAL_DMA_IRQHandler+0xcb4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0214 	bic.w	r2, r2, #20
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	e027      	b.n	8006824 <HAL_DMA_IRQHandler+0xcc4>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	40020040 	.word	0x40020040
 80067e0:	40020058 	.word	0x40020058
 80067e4:	40020070 	.word	0x40020070
 80067e8:	40020088 	.word	0x40020088
 80067ec:	400200a0 	.word	0x400200a0
 80067f0:	400200b8 	.word	0x400200b8
 80067f4:	40020410 	.word	0x40020410
 80067f8:	40020428 	.word	0x40020428
 80067fc:	40020440 	.word	0x40020440
 8006800:	40020458 	.word	0x40020458
 8006804:	40020470 	.word	0x40020470
 8006808:	40020488 	.word	0x40020488
 800680c:	400204a0 	.word	0x400204a0
 8006810:	400204b8 	.word	0x400204b8
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 020a 	bic.w	r2, r2, #10
 8006822:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8097 	beq.w	800696c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006846:	e091      	b.n	800696c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2208      	movs	r2, #8
 8006852:	409a      	lsls	r2, r3
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	4013      	ands	r3, r2
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8088 	beq.w	800696e <HAL_DMA_IRQHandler+0xe0e>
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f003 0308 	and.w	r3, r3, #8
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8082 	beq.w	800696e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a41      	ldr	r2, [pc, #260]	@ (8006974 <HAL_DMA_IRQHandler+0xe14>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d04a      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a3f      	ldr	r2, [pc, #252]	@ (8006978 <HAL_DMA_IRQHandler+0xe18>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d045      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a3e      	ldr	r2, [pc, #248]	@ (800697c <HAL_DMA_IRQHandler+0xe1c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d040      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a3c      	ldr	r2, [pc, #240]	@ (8006980 <HAL_DMA_IRQHandler+0xe20>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d03b      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a3b      	ldr	r2, [pc, #236]	@ (8006984 <HAL_DMA_IRQHandler+0xe24>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d036      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a39      	ldr	r2, [pc, #228]	@ (8006988 <HAL_DMA_IRQHandler+0xe28>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d031      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a38      	ldr	r2, [pc, #224]	@ (800698c <HAL_DMA_IRQHandler+0xe2c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d02c      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a36      	ldr	r2, [pc, #216]	@ (8006990 <HAL_DMA_IRQHandler+0xe30>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d027      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a35      	ldr	r2, [pc, #212]	@ (8006994 <HAL_DMA_IRQHandler+0xe34>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d022      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a33      	ldr	r2, [pc, #204]	@ (8006998 <HAL_DMA_IRQHandler+0xe38>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d01d      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a32      	ldr	r2, [pc, #200]	@ (800699c <HAL_DMA_IRQHandler+0xe3c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d018      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a30      	ldr	r2, [pc, #192]	@ (80069a0 <HAL_DMA_IRQHandler+0xe40>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a2f      	ldr	r2, [pc, #188]	@ (80069a4 <HAL_DMA_IRQHandler+0xe44>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d00e      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a2d      	ldr	r2, [pc, #180]	@ (80069a8 <HAL_DMA_IRQHandler+0xe48>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a2c      	ldr	r2, [pc, #176]	@ (80069ac <HAL_DMA_IRQHandler+0xe4c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_DMA_IRQHandler+0xdaa>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2a      	ldr	r2, [pc, #168]	@ (80069b0 <HAL_DMA_IRQHandler+0xe50>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <HAL_DMA_IRQHandler+0xdbc>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 021c 	bic.w	r2, r2, #28
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	e007      	b.n	800692c <HAL_DMA_IRQHandler+0xdcc>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 020e 	bic.w	r2, r2, #14
 800692a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006930:	f003 031f 	and.w	r3, r3, #31
 8006934:	2201      	movs	r2, #1
 8006936:	409a      	lsls	r2, r3
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
 8006962:	e004      	b.n	800696e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006964:	bf00      	nop
 8006966:	e002      	b.n	800696e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006968:	bf00      	nop
 800696a:	e000      	b.n	800696e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800696c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800696e:	3728      	adds	r7, #40	@ 0x28
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40020010 	.word	0x40020010
 8006978:	40020028 	.word	0x40020028
 800697c:	40020040 	.word	0x40020040
 8006980:	40020058 	.word	0x40020058
 8006984:	40020070 	.word	0x40020070
 8006988:	40020088 	.word	0x40020088
 800698c:	400200a0 	.word	0x400200a0
 8006990:	400200b8 	.word	0x400200b8
 8006994:	40020410 	.word	0x40020410
 8006998:	40020428 	.word	0x40020428
 800699c:	40020440 	.word	0x40020440
 80069a0:	40020458 	.word	0x40020458
 80069a4:	40020470 	.word	0x40020470
 80069a8:	40020488 	.word	0x40020488
 80069ac:	400204a0 	.word	0x400204a0
 80069b0:	400204b8 	.word	0x400204b8

080069b4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069c2:	b2db      	uxtb	r3, r3
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80069dc:	4618      	mov	r0, r3
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7f      	ldr	r2, [pc, #508]	@ (8006c04 <DMA_SetConfig+0x21c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d072      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a7d      	ldr	r2, [pc, #500]	@ (8006c08 <DMA_SetConfig+0x220>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d06d      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8006c0c <DMA_SetConfig+0x224>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d068      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a7a      	ldr	r2, [pc, #488]	@ (8006c10 <DMA_SetConfig+0x228>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d063      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a79      	ldr	r2, [pc, #484]	@ (8006c14 <DMA_SetConfig+0x22c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d05e      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a77      	ldr	r2, [pc, #476]	@ (8006c18 <DMA_SetConfig+0x230>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d059      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a76      	ldr	r2, [pc, #472]	@ (8006c1c <DMA_SetConfig+0x234>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d054      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a74      	ldr	r2, [pc, #464]	@ (8006c20 <DMA_SetConfig+0x238>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04f      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a73      	ldr	r2, [pc, #460]	@ (8006c24 <DMA_SetConfig+0x23c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d04a      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a71      	ldr	r2, [pc, #452]	@ (8006c28 <DMA_SetConfig+0x240>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d045      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a70      	ldr	r2, [pc, #448]	@ (8006c2c <DMA_SetConfig+0x244>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d040      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a6e      	ldr	r2, [pc, #440]	@ (8006c30 <DMA_SetConfig+0x248>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d03b      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a6d      	ldr	r2, [pc, #436]	@ (8006c34 <DMA_SetConfig+0x24c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d036      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a6b      	ldr	r2, [pc, #428]	@ (8006c38 <DMA_SetConfig+0x250>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d031      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6a      	ldr	r2, [pc, #424]	@ (8006c3c <DMA_SetConfig+0x254>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d02c      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a68      	ldr	r2, [pc, #416]	@ (8006c40 <DMA_SetConfig+0x258>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d027      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a67      	ldr	r2, [pc, #412]	@ (8006c44 <DMA_SetConfig+0x25c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d022      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a65      	ldr	r2, [pc, #404]	@ (8006c48 <DMA_SetConfig+0x260>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d01d      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a64      	ldr	r2, [pc, #400]	@ (8006c4c <DMA_SetConfig+0x264>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d018      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a62      	ldr	r2, [pc, #392]	@ (8006c50 <DMA_SetConfig+0x268>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d013      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a61      	ldr	r2, [pc, #388]	@ (8006c54 <DMA_SetConfig+0x26c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d00e      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a5f      	ldr	r2, [pc, #380]	@ (8006c58 <DMA_SetConfig+0x270>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d009      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c5c <DMA_SetConfig+0x274>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <DMA_SetConfig+0x10a>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a5c      	ldr	r2, [pc, #368]	@ (8006c60 <DMA_SetConfig+0x278>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d101      	bne.n	8006af6 <DMA_SetConfig+0x10e>
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <DMA_SetConfig+0x110>
 8006af6:	2300      	movs	r3, #0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00d      	beq.n	8006b18 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b04:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b16:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a39      	ldr	r2, [pc, #228]	@ (8006c04 <DMA_SetConfig+0x21c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d04a      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a38      	ldr	r2, [pc, #224]	@ (8006c08 <DMA_SetConfig+0x220>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d045      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a36      	ldr	r2, [pc, #216]	@ (8006c0c <DMA_SetConfig+0x224>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d040      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a35      	ldr	r2, [pc, #212]	@ (8006c10 <DMA_SetConfig+0x228>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d03b      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a33      	ldr	r2, [pc, #204]	@ (8006c14 <DMA_SetConfig+0x22c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d036      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a32      	ldr	r2, [pc, #200]	@ (8006c18 <DMA_SetConfig+0x230>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d031      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a30      	ldr	r2, [pc, #192]	@ (8006c1c <DMA_SetConfig+0x234>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d02c      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2f      	ldr	r2, [pc, #188]	@ (8006c20 <DMA_SetConfig+0x238>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d027      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8006c24 <DMA_SetConfig+0x23c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a2c      	ldr	r2, [pc, #176]	@ (8006c28 <DMA_SetConfig+0x240>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d01d      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a2a      	ldr	r2, [pc, #168]	@ (8006c2c <DMA_SetConfig+0x244>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d018      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a29      	ldr	r2, [pc, #164]	@ (8006c30 <DMA_SetConfig+0x248>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a27      	ldr	r2, [pc, #156]	@ (8006c34 <DMA_SetConfig+0x24c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00e      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a26      	ldr	r2, [pc, #152]	@ (8006c38 <DMA_SetConfig+0x250>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a24      	ldr	r2, [pc, #144]	@ (8006c3c <DMA_SetConfig+0x254>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <DMA_SetConfig+0x1d0>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a23      	ldr	r2, [pc, #140]	@ (8006c40 <DMA_SetConfig+0x258>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d101      	bne.n	8006bbc <DMA_SetConfig+0x1d4>
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <DMA_SetConfig+0x1d6>
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d059      	beq.n	8006c76 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc6:	f003 031f 	and.w	r3, r3, #31
 8006bca:	223f      	movs	r2, #63	@ 0x3f
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006be0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b40      	cmp	r3, #64	@ 0x40
 8006bf0:	d138      	bne.n	8006c64 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c02:	e086      	b.n	8006d12 <DMA_SetConfig+0x32a>
 8006c04:	40020010 	.word	0x40020010
 8006c08:	40020028 	.word	0x40020028
 8006c0c:	40020040 	.word	0x40020040
 8006c10:	40020058 	.word	0x40020058
 8006c14:	40020070 	.word	0x40020070
 8006c18:	40020088 	.word	0x40020088
 8006c1c:	400200a0 	.word	0x400200a0
 8006c20:	400200b8 	.word	0x400200b8
 8006c24:	40020410 	.word	0x40020410
 8006c28:	40020428 	.word	0x40020428
 8006c2c:	40020440 	.word	0x40020440
 8006c30:	40020458 	.word	0x40020458
 8006c34:	40020470 	.word	0x40020470
 8006c38:	40020488 	.word	0x40020488
 8006c3c:	400204a0 	.word	0x400204a0
 8006c40:	400204b8 	.word	0x400204b8
 8006c44:	58025408 	.word	0x58025408
 8006c48:	5802541c 	.word	0x5802541c
 8006c4c:	58025430 	.word	0x58025430
 8006c50:	58025444 	.word	0x58025444
 8006c54:	58025458 	.word	0x58025458
 8006c58:	5802546c 	.word	0x5802546c
 8006c5c:	58025480 	.word	0x58025480
 8006c60:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	60da      	str	r2, [r3, #12]
}
 8006c74:	e04d      	b.n	8006d12 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a29      	ldr	r2, [pc, #164]	@ (8006d20 <DMA_SetConfig+0x338>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d022      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a27      	ldr	r2, [pc, #156]	@ (8006d24 <DMA_SetConfig+0x33c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01d      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a26      	ldr	r2, [pc, #152]	@ (8006d28 <DMA_SetConfig+0x340>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d018      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a24      	ldr	r2, [pc, #144]	@ (8006d2c <DMA_SetConfig+0x344>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a23      	ldr	r2, [pc, #140]	@ (8006d30 <DMA_SetConfig+0x348>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a21      	ldr	r2, [pc, #132]	@ (8006d34 <DMA_SetConfig+0x34c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a20      	ldr	r2, [pc, #128]	@ (8006d38 <DMA_SetConfig+0x350>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <DMA_SetConfig+0x2de>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d3c <DMA_SetConfig+0x354>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d101      	bne.n	8006cca <DMA_SetConfig+0x2e2>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <DMA_SetConfig+0x2e4>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d020      	beq.n	8006d12 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2201      	movs	r2, #1
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b40      	cmp	r3, #64	@ 0x40
 8006cee:	d108      	bne.n	8006d02 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	60da      	str	r2, [r3, #12]
}
 8006d00:	e007      	b.n	8006d12 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	60da      	str	r2, [r3, #12]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	58025408 	.word	0x58025408
 8006d24:	5802541c 	.word	0x5802541c
 8006d28:	58025430 	.word	0x58025430
 8006d2c:	58025444 	.word	0x58025444
 8006d30:	58025458 	.word	0x58025458
 8006d34:	5802546c 	.word	0x5802546c
 8006d38:	58025480 	.word	0x58025480
 8006d3c:	58025494 	.word	0x58025494

08006d40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a42      	ldr	r2, [pc, #264]	@ (8006e58 <DMA_CalcBaseAndBitshift+0x118>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d04a      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a41      	ldr	r2, [pc, #260]	@ (8006e5c <DMA_CalcBaseAndBitshift+0x11c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d045      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a3f      	ldr	r2, [pc, #252]	@ (8006e60 <DMA_CalcBaseAndBitshift+0x120>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d040      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8006e64 <DMA_CalcBaseAndBitshift+0x124>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d03b      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a3c      	ldr	r2, [pc, #240]	@ (8006e68 <DMA_CalcBaseAndBitshift+0x128>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d036      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a3b      	ldr	r2, [pc, #236]	@ (8006e6c <DMA_CalcBaseAndBitshift+0x12c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d031      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a39      	ldr	r2, [pc, #228]	@ (8006e70 <DMA_CalcBaseAndBitshift+0x130>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d02c      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a38      	ldr	r2, [pc, #224]	@ (8006e74 <DMA_CalcBaseAndBitshift+0x134>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d027      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a36      	ldr	r2, [pc, #216]	@ (8006e78 <DMA_CalcBaseAndBitshift+0x138>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d022      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a35      	ldr	r2, [pc, #212]	@ (8006e7c <DMA_CalcBaseAndBitshift+0x13c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d01d      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a33      	ldr	r2, [pc, #204]	@ (8006e80 <DMA_CalcBaseAndBitshift+0x140>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d018      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a32      	ldr	r2, [pc, #200]	@ (8006e84 <DMA_CalcBaseAndBitshift+0x144>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d013      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a30      	ldr	r2, [pc, #192]	@ (8006e88 <DMA_CalcBaseAndBitshift+0x148>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00e      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a2f      	ldr	r2, [pc, #188]	@ (8006e8c <DMA_CalcBaseAndBitshift+0x14c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8006e90 <DMA_CalcBaseAndBitshift+0x150>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <DMA_CalcBaseAndBitshift+0xa8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a2c      	ldr	r2, [pc, #176]	@ (8006e94 <DMA_CalcBaseAndBitshift+0x154>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d101      	bne.n	8006dec <DMA_CalcBaseAndBitshift+0xac>
 8006de8:	2301      	movs	r3, #1
 8006dea:	e000      	b.n	8006dee <DMA_CalcBaseAndBitshift+0xae>
 8006dec:	2300      	movs	r3, #0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d024      	beq.n	8006e3c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	3b10      	subs	r3, #16
 8006dfa:	4a27      	ldr	r2, [pc, #156]	@ (8006e98 <DMA_CalcBaseAndBitshift+0x158>)
 8006dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006e00:	091b      	lsrs	r3, r3, #4
 8006e02:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	4a24      	ldr	r2, [pc, #144]	@ (8006e9c <DMA_CalcBaseAndBitshift+0x15c>)
 8006e0c:	5cd3      	ldrb	r3, [r2, r3]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d908      	bls.n	8006e2c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	4b1f      	ldr	r3, [pc, #124]	@ (8006ea0 <DMA_CalcBaseAndBitshift+0x160>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	1d1a      	adds	r2, r3, #4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e2a:	e00d      	b.n	8006e48 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	461a      	mov	r2, r3
 8006e32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <DMA_CalcBaseAndBitshift+0x160>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e3a:	e005      	b.n	8006e48 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	40020010 	.word	0x40020010
 8006e5c:	40020028 	.word	0x40020028
 8006e60:	40020040 	.word	0x40020040
 8006e64:	40020058 	.word	0x40020058
 8006e68:	40020070 	.word	0x40020070
 8006e6c:	40020088 	.word	0x40020088
 8006e70:	400200a0 	.word	0x400200a0
 8006e74:	400200b8 	.word	0x400200b8
 8006e78:	40020410 	.word	0x40020410
 8006e7c:	40020428 	.word	0x40020428
 8006e80:	40020440 	.word	0x40020440
 8006e84:	40020458 	.word	0x40020458
 8006e88:	40020470 	.word	0x40020470
 8006e8c:	40020488 	.word	0x40020488
 8006e90:	400204a0 	.word	0x400204a0
 8006e94:	400204b8 	.word	0x400204b8
 8006e98:	aaaaaaab 	.word	0xaaaaaaab
 8006e9c:	08019f70 	.word	0x08019f70
 8006ea0:	fffffc00 	.word	0xfffffc00

08006ea4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d120      	bne.n	8006efa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ebc:	2b03      	cmp	r3, #3
 8006ebe:	d858      	bhi.n	8006f72 <DMA_CheckFifoParam+0xce>
 8006ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec8 <DMA_CheckFifoParam+0x24>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006ed9 	.word	0x08006ed9
 8006ecc:	08006eeb 	.word	0x08006eeb
 8006ed0:	08006ed9 	.word	0x08006ed9
 8006ed4:	08006f73 	.word	0x08006f73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006edc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d048      	beq.n	8006f76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ee8:	e045      	b.n	8006f76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ef2:	d142      	bne.n	8006f7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006ef8:	e03f      	b.n	8006f7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f02:	d123      	bne.n	8006f4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d838      	bhi.n	8006f7e <DMA_CheckFifoParam+0xda>
 8006f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f14 <DMA_CheckFifoParam+0x70>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f25 	.word	0x08006f25
 8006f18:	08006f2b 	.word	0x08006f2b
 8006f1c:	08006f25 	.word	0x08006f25
 8006f20:	08006f3d 	.word	0x08006f3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
        break;
 8006f28:	e030      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d025      	beq.n	8006f82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f3a:	e022      	b.n	8006f82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f40:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f44:	d11f      	bne.n	8006f86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f4a:	e01c      	b.n	8006f86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d902      	bls.n	8006f5a <DMA_CheckFifoParam+0xb6>
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d003      	beq.n	8006f60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f58:	e018      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8006f5e:	e015      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f70:	e00b      	b.n	8006f8a <DMA_CheckFifoParam+0xe6>
        break;
 8006f72:	bf00      	nop
 8006f74:	e00a      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        break;
 8006f76:	bf00      	nop
 8006f78:	e008      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        break;
 8006f7a:	bf00      	nop
 8006f7c:	e006      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        break;
 8006f7e:	bf00      	nop
 8006f80:	e004      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        break;
 8006f82:	bf00      	nop
 8006f84:	e002      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
        break;
 8006f86:	bf00      	nop
 8006f88:	e000      	b.n	8006f8c <DMA_CheckFifoParam+0xe8>
    break;
 8006f8a:	bf00      	nop
    }
  }

  return status;
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop

08006f9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a38      	ldr	r2, [pc, #224]	@ (8007090 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d022      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a36      	ldr	r2, [pc, #216]	@ (8007094 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d01d      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a35      	ldr	r2, [pc, #212]	@ (8007098 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d018      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d013      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a32      	ldr	r2, [pc, #200]	@ (80070a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d00e      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a30      	ldr	r2, [pc, #192]	@ (80070a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d009      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a2f      	ldr	r2, [pc, #188]	@ (80070a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d004      	beq.n	8006ffa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80070ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d101      	bne.n	8006ffe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006ffe:	2300      	movs	r3, #0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01a      	beq.n	800703a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	b2db      	uxtb	r3, r3
 800700a:	3b08      	subs	r3, #8
 800700c:	4a28      	ldr	r2, [pc, #160]	@ (80070b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	091b      	lsrs	r3, r3, #4
 8007014:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4b26      	ldr	r3, [pc, #152]	@ (80070b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	461a      	mov	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a24      	ldr	r2, [pc, #144]	@ (80070b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007028:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f003 031f 	and.w	r3, r3, #31
 8007030:	2201      	movs	r2, #1
 8007032:	409a      	lsls	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007038:	e024      	b.n	8007084 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	3b10      	subs	r3, #16
 8007042:	4a1e      	ldr	r2, [pc, #120]	@ (80070bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007044:	fba2 2303 	umull	r2, r3, r2, r3
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4a1c      	ldr	r2, [pc, #112]	@ (80070c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d806      	bhi.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4a1b      	ldr	r2, [pc, #108]	@ (80070c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d902      	bls.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3308      	adds	r3, #8
 8007060:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4b18      	ldr	r3, [pc, #96]	@ (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	461a      	mov	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a16      	ldr	r2, [pc, #88]	@ (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007074:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f003 031f 	and.w	r3, r3, #31
 800707c:	2201      	movs	r2, #1
 800707e:	409a      	lsls	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007084:	bf00      	nop
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	58025408 	.word	0x58025408
 8007094:	5802541c 	.word	0x5802541c
 8007098:	58025430 	.word	0x58025430
 800709c:	58025444 	.word	0x58025444
 80070a0:	58025458 	.word	0x58025458
 80070a4:	5802546c 	.word	0x5802546c
 80070a8:	58025480 	.word	0x58025480
 80070ac:	58025494 	.word	0x58025494
 80070b0:	cccccccd 	.word	0xcccccccd
 80070b4:	16009600 	.word	0x16009600
 80070b8:	58025880 	.word	0x58025880
 80070bc:	aaaaaaab 	.word	0xaaaaaaab
 80070c0:	400204b8 	.word	0x400204b8
 80070c4:	4002040f 	.word	0x4002040f
 80070c8:	10008200 	.word	0x10008200
 80070cc:	40020880 	.word	0x40020880

080070d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d04a      	beq.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d847      	bhi.n	800717c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a25      	ldr	r2, [pc, #148]	@ (8007188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d022      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a24      	ldr	r2, [pc, #144]	@ (800718c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d01d      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a22      	ldr	r2, [pc, #136]	@ (8007190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d018      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a21      	ldr	r2, [pc, #132]	@ (8007194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d013      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a1f      	ldr	r2, [pc, #124]	@ (8007198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00e      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a1e      	ldr	r2, [pc, #120]	@ (800719c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1c      	ldr	r2, [pc, #112]	@ (80071a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a1b      	ldr	r2, [pc, #108]	@ (80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d101      	bne.n	8007140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007140:	2300      	movs	r3, #0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00a      	beq.n	800715c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4b17      	ldr	r3, [pc, #92]	@ (80071a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	@ (80071ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007158:	671a      	str	r2, [r3, #112]	@ 0x70
 800715a:	e009      	b.n	8007170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	4b14      	ldr	r3, [pc, #80]	@ (80071b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007160:	4413      	add	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a11      	ldr	r2, [pc, #68]	@ (80071b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800716e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3b01      	subs	r3, #1
 8007174:	2201      	movs	r2, #1
 8007176:	409a      	lsls	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	58025408 	.word	0x58025408
 800718c:	5802541c 	.word	0x5802541c
 8007190:	58025430 	.word	0x58025430
 8007194:	58025444 	.word	0x58025444
 8007198:	58025458 	.word	0x58025458
 800719c:	5802546c 	.word	0x5802546c
 80071a0:	58025480 	.word	0x58025480
 80071a4:	58025494 	.word	0x58025494
 80071a8:	1600963f 	.word	0x1600963f
 80071ac:	58025940 	.word	0x58025940
 80071b0:	1000823f 	.word	0x1000823f
 80071b4:	40020940 	.word	0x40020940

080071b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b089      	sub	sp, #36	@ 0x24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80071c6:	4b89      	ldr	r3, [pc, #548]	@ (80073ec <HAL_GPIO_Init+0x234>)
 80071c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071ca:	e194      	b.n	80074f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	2101      	movs	r1, #1
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	fa01 f303 	lsl.w	r3, r1, r3
 80071d8:	4013      	ands	r3, r2
 80071da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 8186 	beq.w	80074f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 0303 	and.w	r3, r3, #3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d005      	beq.n	80071fc <HAL_GPIO_Init+0x44>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d130      	bne.n	800725e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	005b      	lsls	r3, r3, #1
 8007206:	2203      	movs	r2, #3
 8007208:	fa02 f303 	lsl.w	r3, r2, r3
 800720c:	43db      	mvns	r3, r3
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	4013      	ands	r3, r2
 8007212:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	4313      	orrs	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007232:	2201      	movs	r2, #1
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	43db      	mvns	r3, r3
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	4013      	ands	r3, r2
 8007240:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	091b      	lsrs	r3, r3, #4
 8007248:	f003 0201 	and.w	r2, r3, #1
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	fa02 f303 	lsl.w	r3, r2, r3
 8007252:	69ba      	ldr	r2, [r7, #24]
 8007254:	4313      	orrs	r3, r2
 8007256:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d017      	beq.n	800729a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	2203      	movs	r2, #3
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	43db      	mvns	r3, r3
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	4013      	ands	r3, r2
 8007280:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	689a      	ldr	r2, [r3, #8]
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	4313      	orrs	r3, r2
 8007292:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d123      	bne.n	80072ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	08da      	lsrs	r2, r3, #3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3208      	adds	r2, #8
 80072ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	f003 0307 	and.w	r3, r3, #7
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	220f      	movs	r2, #15
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	43db      	mvns	r3, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	4013      	ands	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	fa02 f303 	lsl.w	r3, r2, r3
 80072da:	69ba      	ldr	r2, [r7, #24]
 80072dc:	4313      	orrs	r3, r2
 80072de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	08da      	lsrs	r2, r3, #3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3208      	adds	r2, #8
 80072e8:	69b9      	ldr	r1, [r7, #24]
 80072ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	2203      	movs	r2, #3
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43db      	mvns	r3, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	4013      	ands	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f003 0203 	and.w	r2, r3, #3
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	fa02 f303 	lsl.w	r3, r2, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4313      	orrs	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 80e0 	beq.w	80074f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007330:	4b2f      	ldr	r3, [pc, #188]	@ (80073f0 <HAL_GPIO_Init+0x238>)
 8007332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007336:	4a2e      	ldr	r2, [pc, #184]	@ (80073f0 <HAL_GPIO_Init+0x238>)
 8007338:	f043 0302 	orr.w	r3, r3, #2
 800733c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007340:	4b2b      	ldr	r3, [pc, #172]	@ (80073f0 <HAL_GPIO_Init+0x238>)
 8007342:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800734e:	4a29      	ldr	r2, [pc, #164]	@ (80073f4 <HAL_GPIO_Init+0x23c>)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	089b      	lsrs	r3, r3, #2
 8007354:	3302      	adds	r3, #2
 8007356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800735a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	220f      	movs	r2, #15
 8007366:	fa02 f303 	lsl.w	r3, r2, r3
 800736a:	43db      	mvns	r3, r3
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	4013      	ands	r3, r2
 8007370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a20      	ldr	r2, [pc, #128]	@ (80073f8 <HAL_GPIO_Init+0x240>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d052      	beq.n	8007420 <HAL_GPIO_Init+0x268>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1f      	ldr	r2, [pc, #124]	@ (80073fc <HAL_GPIO_Init+0x244>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d031      	beq.n	80073e6 <HAL_GPIO_Init+0x22e>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1e      	ldr	r2, [pc, #120]	@ (8007400 <HAL_GPIO_Init+0x248>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d02b      	beq.n	80073e2 <HAL_GPIO_Init+0x22a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1d      	ldr	r2, [pc, #116]	@ (8007404 <HAL_GPIO_Init+0x24c>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d025      	beq.n	80073de <HAL_GPIO_Init+0x226>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <HAL_GPIO_Init+0x250>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d01f      	beq.n	80073da <HAL_GPIO_Init+0x222>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a1b      	ldr	r2, [pc, #108]	@ (800740c <HAL_GPIO_Init+0x254>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d019      	beq.n	80073d6 <HAL_GPIO_Init+0x21e>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1a      	ldr	r2, [pc, #104]	@ (8007410 <HAL_GPIO_Init+0x258>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d013      	beq.n	80073d2 <HAL_GPIO_Init+0x21a>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a19      	ldr	r2, [pc, #100]	@ (8007414 <HAL_GPIO_Init+0x25c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d00d      	beq.n	80073ce <HAL_GPIO_Init+0x216>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a18      	ldr	r2, [pc, #96]	@ (8007418 <HAL_GPIO_Init+0x260>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d007      	beq.n	80073ca <HAL_GPIO_Init+0x212>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a17      	ldr	r2, [pc, #92]	@ (800741c <HAL_GPIO_Init+0x264>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d101      	bne.n	80073c6 <HAL_GPIO_Init+0x20e>
 80073c2:	2309      	movs	r3, #9
 80073c4:	e02d      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073c6:	230a      	movs	r3, #10
 80073c8:	e02b      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073ca:	2308      	movs	r3, #8
 80073cc:	e029      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073ce:	2307      	movs	r3, #7
 80073d0:	e027      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073d2:	2306      	movs	r3, #6
 80073d4:	e025      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073d6:	2305      	movs	r3, #5
 80073d8:	e023      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073da:	2304      	movs	r3, #4
 80073dc:	e021      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073de:	2303      	movs	r3, #3
 80073e0:	e01f      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e01d      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e01b      	b.n	8007422 <HAL_GPIO_Init+0x26a>
 80073ea:	bf00      	nop
 80073ec:	58000080 	.word	0x58000080
 80073f0:	58024400 	.word	0x58024400
 80073f4:	58000400 	.word	0x58000400
 80073f8:	58020000 	.word	0x58020000
 80073fc:	58020400 	.word	0x58020400
 8007400:	58020800 	.word	0x58020800
 8007404:	58020c00 	.word	0x58020c00
 8007408:	58021000 	.word	0x58021000
 800740c:	58021400 	.word	0x58021400
 8007410:	58021800 	.word	0x58021800
 8007414:	58021c00 	.word	0x58021c00
 8007418:	58022000 	.word	0x58022000
 800741c:	58022400 	.word	0x58022400
 8007420:	2300      	movs	r3, #0
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	f002 0203 	and.w	r2, r2, #3
 8007428:	0092      	lsls	r2, r2, #2
 800742a:	4093      	lsls	r3, r2
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	4313      	orrs	r3, r2
 8007430:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007432:	4938      	ldr	r1, [pc, #224]	@ (8007514 <HAL_GPIO_Init+0x35c>)
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	089b      	lsrs	r3, r3, #2
 8007438:	3302      	adds	r3, #2
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007466:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800746e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	43db      	mvns	r3, r3
 800747a:	69ba      	ldr	r2, [r7, #24]
 800747c:	4013      	ands	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007494:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4013      	ands	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	43db      	mvns	r3, r3
 80074d0:	69ba      	ldr	r2, [r7, #24]
 80074d2:	4013      	ands	r3, r2
 80074d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	3301      	adds	r3, #1
 80074f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	f47f ae63 	bne.w	80071cc <HAL_GPIO_Init+0x14>
  }
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	3724      	adds	r7, #36	@ 0x24
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr
 8007514:	58000400 	.word	0x58000400

08007518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	887b      	ldrh	r3, [r7, #2]
 800752a:	4013      	ands	r3, r2
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
 8007534:	e001      	b.n	800753a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	807b      	strh	r3, [r7, #2]
 8007554:	4613      	mov	r3, r2
 8007556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007558:	787b      	ldrb	r3, [r7, #1]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800755e:	887a      	ldrh	r2, [r7, #2]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007564:	e003      	b.n	800756e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007566:	887b      	ldrh	r3, [r7, #2]
 8007568:	041a      	lsls	r2, r3, #16
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	619a      	str	r2, [r3, #24]
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e08b      	b.n	80076a6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fa fb24 	bl	8001bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	@ 0x24
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f022 0201 	bic.w	r2, r2, #1
 80075be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80075dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d107      	bne.n	80075f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	e006      	b.n	8007604 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	689a      	ldr	r2, [r3, #8]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007602:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b02      	cmp	r3, #2
 800760a:	d108      	bne.n	800761e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800761a:	605a      	str	r2, [r3, #4]
 800761c:	e007      	b.n	800762e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800762c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	4b1d      	ldr	r3, [pc, #116]	@ (80076b0 <HAL_I2C_Init+0x134>)
 800763a:	430b      	orrs	r3, r1
 800763c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800764c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69d9      	ldr	r1, [r3, #28]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1a      	ldr	r2, [r3, #32]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	02008000 	.word	0x02008000

080076b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	607a      	str	r2, [r7, #4]
 80076be:	461a      	mov	r2, r3
 80076c0:	460b      	mov	r3, r1
 80076c2:	817b      	strh	r3, [r7, #10]
 80076c4:	4613      	mov	r3, r2
 80076c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	f040 80fd 	bne.w	80078d0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_I2C_Master_Transmit+0x30>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e0f6      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x21e>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076ec:	f7fb fa98 	bl	8002c20 <HAL_GetTick>
 80076f0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	2319      	movs	r3, #25
 80076f8:	2201      	movs	r2, #1
 80076fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f002 f89e 	bl	8009840 <I2C_WaitOnFlagUntilTimeout>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e0e1      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2221      	movs	r2, #33	@ 0x21
 8007712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2210      	movs	r2, #16
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	893a      	ldrh	r2, [r7, #8]
 800772e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2bff      	cmp	r3, #255	@ 0xff
 800773e:	d906      	bls.n	800774e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	22ff      	movs	r2, #255	@ 0xff
 8007744:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007746:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e007      	b.n	800775e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007752:	b29a      	uxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007758:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800775c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	d024      	beq.n	80077b0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	781a      	ldrb	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007780:	b29b      	uxth	r3, r3
 8007782:	3b01      	subs	r3, #1
 8007784:	b29a      	uxth	r2, r3
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800778e:	3b01      	subs	r3, #1
 8007790:	b29a      	uxth	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800779a:	b2db      	uxtb	r3, r3
 800779c:	3301      	adds	r3, #1
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	8979      	ldrh	r1, [r7, #10]
 80077a2:	4b4e      	ldr	r3, [pc, #312]	@ (80078dc <HAL_I2C_Master_Transmit+0x228>)
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f002 fa0d 	bl	8009bc8 <I2C_TransferConfig>
 80077ae:	e066      	b.n	800787e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	8979      	ldrh	r1, [r7, #10]
 80077b8:	4b48      	ldr	r3, [pc, #288]	@ (80078dc <HAL_I2C_Master_Transmit+0x228>)
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f002 fa02 	bl	8009bc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80077c4:	e05b      	b.n	800787e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	6a39      	ldr	r1, [r7, #32]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f002 f891 	bl	80098f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e07b      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077de:	781a      	ldrb	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b01      	subs	r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d034      	beq.n	800787e <HAL_I2C_Master_Transmit+0x1ca>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007818:	2b00      	cmp	r3, #0
 800781a:	d130      	bne.n	800787e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	2200      	movs	r2, #0
 8007824:	2180      	movs	r1, #128	@ 0x80
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f002 f80a 	bl	8009840 <I2C_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e04d      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800783a:	b29b      	uxth	r3, r3
 800783c:	2bff      	cmp	r3, #255	@ 0xff
 800783e:	d90e      	bls.n	800785e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	22ff      	movs	r2, #255	@ 0xff
 8007844:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800784a:	b2da      	uxtb	r2, r3
 800784c:	8979      	ldrh	r1, [r7, #10]
 800784e:	2300      	movs	r3, #0
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f002 f9b6 	bl	8009bc8 <I2C_TransferConfig>
 800785c:	e00f      	b.n	800787e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800786c:	b2da      	uxtb	r2, r3
 800786e:	8979      	ldrh	r1, [r7, #10]
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f002 f9a5 	bl	8009bc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007882:	b29b      	uxth	r3, r3
 8007884:	2b00      	cmp	r3, #0
 8007886:	d19e      	bne.n	80077c6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	6a39      	ldr	r1, [r7, #32]
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f002 f877 	bl	8009980 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	e01a      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2220      	movs	r2, #32
 80078a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6859      	ldr	r1, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b0c      	ldr	r3, [pc, #48]	@ (80078e0 <HAL_I2C_Master_Transmit+0x22c>)
 80078b0:	400b      	ands	r3, r1
 80078b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	80002000 	.word	0x80002000
 80078e0:	fe00e800 	.word	0xfe00e800

080078e4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08a      	sub	sp, #40	@ 0x28
 80078e8:	af02      	add	r7, sp, #8
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	461a      	mov	r2, r3
 80078f0:	460b      	mov	r3, r1
 80078f2:	817b      	strh	r3, [r7, #10]
 80078f4:	4613      	mov	r3, r2
 80078f6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b20      	cmp	r3, #32
 8007906:	f040 80ef 	bne.w	8007ae8 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007914:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007918:	d101      	bne.n	800791e <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800791a:	2302      	movs	r3, #2
 800791c:	e0e5      	b.n	8007aea <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007924:	2b01      	cmp	r3, #1
 8007926:	d101      	bne.n	800792c <HAL_I2C_Master_Transmit_DMA+0x48>
 8007928:	2302      	movs	r3, #2
 800792a:	e0de      	b.n	8007aea <HAL_I2C_Master_Transmit_DMA+0x206>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2221      	movs	r2, #33	@ 0x21
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2210      	movs	r2, #16
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	893a      	ldrh	r2, [r7, #8]
 8007954:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4a66      	ldr	r2, [pc, #408]	@ (8007af4 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800795a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4a66      	ldr	r2, [pc, #408]	@ (8007af8 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007960:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007966:	b29b      	uxth	r3, r3
 8007968:	2bff      	cmp	r3, #255	@ 0xff
 800796a:	d906      	bls.n	800797a <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	22ff      	movs	r2, #255	@ 0xff
 8007970:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007972:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007976:	61fb      	str	r3, [r7, #28]
 8007978:	e007      	b.n	800798a <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007984:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007988:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01a      	beq.n	80079c8 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007996:	781a      	ldrb	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ac:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d074      	beq.n	8007aba <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d022      	beq.n	8007a1e <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079dc:	4a47      	ldr	r2, [pc, #284]	@ (8007afc <HAL_I2C_Master_Transmit_DMA+0x218>)
 80079de:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e4:	4a46      	ldr	r2, [pc, #280]	@ (8007b00 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80079e6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	2200      	movs	r2, #0
 80079ee:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079f4:	2200      	movs	r2, #0
 80079f6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a00:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007a08:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007a0e:	f7fd f8d9 	bl	8004bc4 <HAL_DMA_Start_IT>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007a16:	7dfb      	ldrb	r3, [r7, #23]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d13a      	bne.n	8007a92 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007a1c:	e013      	b.n	8007a46 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e051      	b.n	8007aea <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	8979      	ldrh	r1, [r7, #10]
 8007a52:	4b2c      	ldr	r3, [pc, #176]	@ (8007b04 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f002 f8b5 	bl	8009bc8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a78:	2110      	movs	r1, #16
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f002 f8d6 	bl	8009c2c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e028      	b.n	8007ae4 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa6:	f043 0210 	orr.w	r2, r3, #16
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e017      	b.n	8007aea <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a12      	ldr	r2, [pc, #72]	@ (8007b08 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007abe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	8979      	ldrh	r1, [r7, #10]
 8007ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b04 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f002 f87a 	bl	8009bc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007adc:	2101      	movs	r1, #1
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f002 f8a4 	bl	8009c2c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	e000      	b.n	8007aea <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007ae8:	2302      	movs	r3, #2
  }
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3720      	adds	r7, #32
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	ffff0000 	.word	0xffff0000
 8007af8:	08008143 	.word	0x08008143
 8007afc:	080094fb 	.word	0x080094fb
 8007b00:	08009591 	.word	0x08009591
 8007b04:	80002000 	.word	0x80002000
 8007b08:	08007cd3 	.word	0x08007cd3

08007b0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
  }
}
 8007b38:	bf00      	nop
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	0a1b      	lsrs	r3, r3, #8
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	09db      	lsrs	r3, r3, #7
 8007b68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b74:	f043 0201 	orr.w	r2, r3, #1
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b84:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	0a9b      	lsrs	r3, r3, #10
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d010      	beq.n	8007bb4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	09db      	lsrs	r3, r3, #7
 8007b96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00a      	beq.n	8007bb4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ba2:	f043 0208 	orr.w	r2, r3, #8
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bb2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	0a5b      	lsrs	r3, r3, #9
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d010      	beq.n	8007be2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	09db      	lsrs	r3, r3, #7
 8007bc4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bd0:	f043 0202 	orr.w	r2, r3, #2
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007be0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 030b 	and.w	r3, r3, #11
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007bf2:	68f9      	ldr	r1, [r7, #12]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 fb45 	bl	8009284 <I2C_ITError>
  }
}
 8007bfa:	bf00      	nop
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b088      	sub	sp, #32
 8007cd6:	af02      	add	r7, sp, #8
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	60b9      	str	r1, [r7, #8]
 8007cdc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <I2C_Master_ISR_IT+0x1e>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e120      	b.n	8007f32 <I2C_Master_ISR_IT+0x260>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	091b      	lsrs	r3, r3, #4
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d013      	beq.n	8007d2c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00d      	beq.n	8007d2c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2210      	movs	r2, #16
 8007d16:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1c:	f043 0204 	orr.w	r2, r3, #4
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d24:	68f8      	ldr	r0, [r7, #12]
 8007d26:	f001 fbc4 	bl	80094b2 <I2C_Flush_TXDR>
 8007d2a:	e0ed      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	089b      	lsrs	r3, r3, #2
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d023      	beq.n	8007d80 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	089b      	lsrs	r3, r3, #2
 8007d3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d01d      	beq.n	8007d80 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f023 0304 	bic.w	r3, r3, #4
 8007d4a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007d7e:	e0c3      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	099b      	lsrs	r3, r3, #6
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d12a      	bne.n	8007de2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	085b      	lsrs	r3, r3, #1
 8007d90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d024      	beq.n	8007de2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	085b      	lsrs	r3, r3, #1
 8007d9c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01e      	beq.n	8007de2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 80ac 	beq.w	8007f08 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db4:	781a      	ldrb	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007de0:	e092      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	09db      	lsrs	r3, r3, #7
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d05d      	beq.n	8007eaa <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	099b      	lsrs	r3, r3, #6
 8007df2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d057      	beq.n	8007eaa <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d040      	beq.n	8007e86 <I2C_Master_ISR_IT+0x1b4>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d13c      	bne.n	8007e86 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e18:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	2bff      	cmp	r3, #255	@ 0xff
 8007e22:	d90e      	bls.n	8007e42 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	22ff      	movs	r2, #255	@ 0xff
 8007e28:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	8a79      	ldrh	r1, [r7, #18]
 8007e32:	2300      	movs	r3, #0
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f001 fec4 	bl	8009bc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e40:	e032      	b.n	8007ea8 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e54:	d00b      	beq.n	8007e6e <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e5a:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007e60:	8a79      	ldrh	r1, [r7, #18]
 8007e62:	2000      	movs	r0, #0
 8007e64:	9000      	str	r0, [sp, #0]
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f001 feae 	bl	8009bc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e6c:	e01c      	b.n	8007ea8 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	8a79      	ldrh	r1, [r7, #18]
 8007e76:	2300      	movs	r3, #0
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f001 fea2 	bl	8009bc8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e84:	e010      	b.n	8007ea8 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007e94:	d003      	beq.n	8007e9e <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fdde 	bl	8008a58 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e9c:	e034      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007e9e:	2140      	movs	r1, #64	@ 0x40
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f001 f9ef 	bl	8009284 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ea6:	e02f      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
 8007ea8:	e02e      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	099b      	lsrs	r3, r3, #6
 8007eae:	f003 0301 	and.w	r3, r3, #1
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d028      	beq.n	8007f08 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	099b      	lsrs	r3, r3, #6
 8007eba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d022      	beq.n	8007f08 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d119      	bne.n	8007f00 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ed6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007eda:	d015      	beq.n	8007f08 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007ee4:	d108      	bne.n	8007ef8 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	e007      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fdad 	bl	8008a58 <I2C_ITMasterSeqCplt>
 8007efe:	e003      	b.n	8007f08 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007f00:	2140      	movs	r1, #64	@ 0x40
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f001 f9be 	bl	8009284 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d009      	beq.n	8007f28 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	095b      	lsrs	r3, r3, #5
 8007f18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d003      	beq.n	8007f28 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fe34 	bl	8008b90 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b086      	sub	sp, #24
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <I2C_Slave_ISR_IT+0x24>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e0ed      	b.n	800813a <I2C_Slave_ISR_IT+0x200>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	095b      	lsrs	r3, r3, #5
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00a      	beq.n	8007f88 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007f7e:	6939      	ldr	r1, [r7, #16]
 8007f80:	68f8      	ldr	r0, [r7, #12]
 8007f82:	f000 fecf 	bl	8008d24 <I2C_ITSlaveCplt>
 8007f86:	e0d3      	b.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	091b      	lsrs	r3, r3, #4
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d04d      	beq.n	8008030 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	091b      	lsrs	r3, r3, #4
 8007f98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d047      	beq.n	8008030 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d128      	bne.n	8007ffc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b28      	cmp	r3, #40	@ 0x28
 8007fb4:	d108      	bne.n	8007fc8 <I2C_Slave_ISR_IT+0x8e>
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fbc:	d104      	bne.n	8007fc8 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fbe:	6939      	ldr	r1, [r7, #16]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f001 f909 	bl	80091d8 <I2C_ITListenCplt>
 8007fc6:	e032      	b.n	800802e <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b29      	cmp	r3, #41	@ 0x29
 8007fd2:	d10e      	bne.n	8007ff2 <I2C_Slave_ISR_IT+0xb8>
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007fda:	d00a      	beq.n	8007ff2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2210      	movs	r2, #16
 8007fe2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f001 fa64 	bl	80094b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f000 fd71 	bl	8008ad2 <I2C_ITSlaveSeqCplt>
 8007ff0:	e01d      	b.n	800802e <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2210      	movs	r2, #16
 8007ff8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007ffa:	e096      	b.n	800812a <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2210      	movs	r2, #16
 8008002:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008008:	f043 0204 	orr.w	r2, r3, #4
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <I2C_Slave_ISR_IT+0xe6>
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800801c:	f040 8085 	bne.w	800812a <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008024:	4619      	mov	r1, r3
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f001 f92c 	bl	8009284 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800802c:	e07d      	b.n	800812a <I2C_Slave_ISR_IT+0x1f0>
 800802e:	e07c      	b.n	800812a <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	089b      	lsrs	r3, r3, #2
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d030      	beq.n	800809e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	089b      	lsrs	r3, r3, #2
 8008040:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008044:	2b00      	cmp	r3, #0
 8008046:	d02a      	beq.n	800809e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d018      	beq.n	8008084 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800805c:	b2d2      	uxtb	r2, r2
 800805e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800806e:	3b01      	subs	r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d14f      	bne.n	800812e <I2C_Slave_ISR_IT+0x1f4>
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008094:	d04b      	beq.n	800812e <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fd1b 	bl	8008ad2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800809c:	e047      	b.n	800812e <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	08db      	lsrs	r3, r3, #3
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	08db      	lsrs	r3, r3, #3
 80080ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80080b6:	6939      	ldr	r1, [r7, #16]
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f000 fc49 	bl	8008950 <I2C_ITAddrCplt>
 80080be:	e037      	b.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	085b      	lsrs	r3, r3, #1
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d031      	beq.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	085b      	lsrs	r3, r3, #1
 80080d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d02b      	beq.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d018      	beq.n	8008114 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008112:	e00d      	b.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800811a:	d002      	beq.n	8008122 <I2C_Slave_ISR_IT+0x1e8>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 fcd5 	bl	8008ad2 <I2C_ITSlaveSeqCplt>
 8008128:	e002      	b.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800812a:	bf00      	nop
 800812c:	e000      	b.n	8008130 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800812e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3718      	adds	r7, #24
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b088      	sub	sp, #32
 8008146:	af02      	add	r7, sp, #8
 8008148:	60f8      	str	r0, [r7, #12]
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <I2C_Master_ISR_DMA+0x1a>
 8008158:	2302      	movs	r3, #2
 800815a:	e0e1      	b.n	8008320 <I2C_Master_ISR_DMA+0x1de>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	091b      	lsrs	r3, r3, #4
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d017      	beq.n	80081a0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	091b      	lsrs	r3, r3, #4
 8008174:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008178:	2b00      	cmp	r3, #0
 800817a:	d011      	beq.n	80081a0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2210      	movs	r2, #16
 8008182:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008188:	f043 0204 	orr.w	r2, r3, #4
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008190:	2120      	movs	r1, #32
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f001 fd4a 	bl	8009c2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f001 f98a 	bl	80094b2 <I2C_Flush_TXDR>
 800819e:	e0ba      	b.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	09db      	lsrs	r3, r3, #7
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d072      	beq.n	8008292 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	099b      	lsrs	r3, r3, #6
 80081b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d06c      	beq.n	8008292 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081c6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d04e      	beq.n	8008270 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081de:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2bff      	cmp	r3, #255	@ 0xff
 80081e8:	d906      	bls.n	80081f8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22ff      	movs	r2, #255	@ 0xff
 80081ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80081f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e010      	b.n	800821a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008206:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800820a:	d003      	beq.n	8008214 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e002      	b.n	800821a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008214:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008218:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800821e:	b2da      	uxtb	r2, r3
 8008220:	8a79      	ldrh	r1, [r7, #18]
 8008222:	2300      	movs	r3, #0
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f001 fccd 	bl	8009bc8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	b29a      	uxth	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b22      	cmp	r3, #34	@ 0x22
 800824a:	d108      	bne.n	800825e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800825a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800825c:	e05b      	b.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800826c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800826e:	e052      	b.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800827a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800827e:	d003      	beq.n	8008288 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fbe9 	bl	8008a58 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008286:	e046      	b.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008288:	2140      	movs	r1, #64	@ 0x40
 800828a:	68f8      	ldr	r0, [r7, #12]
 800828c:	f000 fffa 	bl	8009284 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008290:	e041      	b.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	099b      	lsrs	r3, r3, #6
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d029      	beq.n	80082f2 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	099b      	lsrs	r3, r3, #6
 80082a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d023      	beq.n	80082f2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d119      	bne.n	80082e8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082c2:	d027      	beq.n	8008314 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082cc:	d108      	bne.n	80082e0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082dc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80082de:	e019      	b.n	8008314 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fbb9 	bl	8008a58 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80082e6:	e015      	b.n	8008314 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80082e8:	2140      	movs	r1, #64	@ 0x40
 80082ea:	68f8      	ldr	r0, [r7, #12]
 80082ec:	f000 ffca 	bl	8009284 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80082f0:	e010      	b.n	8008314 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 0301 	and.w	r3, r3, #1
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	095b      	lsrs	r3, r3, #5
 8008302:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008306:	2b00      	cmp	r3, #0
 8008308:	d005      	beq.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 fc3f 	bl	8008b90 <I2C_ITMasterCplt>
 8008312:	e000      	b.n	8008316 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008314:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b088      	sub	sp, #32
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8008334:	4b92      	ldr	r3, [pc, #584]	@ (8008580 <I2C_Mem_ISR_DMA+0x258>)
 8008336:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800833e:	2b01      	cmp	r3, #1
 8008340:	d101      	bne.n	8008346 <I2C_Mem_ISR_DMA+0x1e>
 8008342:	2302      	movs	r3, #2
 8008344:	e118      	b.n	8008578 <I2C_Mem_ISR_DMA+0x250>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	091b      	lsrs	r3, r3, #4
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d017      	beq.n	800838a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	091b      	lsrs	r3, r3, #4
 800835e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008362:	2b00      	cmp	r3, #0
 8008364:	d011      	beq.n	800838a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2210      	movs	r2, #16
 800836c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008372:	f043 0204 	orr.w	r2, r3, #4
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800837a:	2120      	movs	r1, #32
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f001 fc55 	bl	8009c2c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f001 f895 	bl	80094b2 <I2C_Flush_TXDR>
 8008388:	e0f1      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	085b      	lsrs	r3, r3, #1
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00f      	beq.n	80083b6 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80083aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80083b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80083b4:	e0db      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	09db      	lsrs	r3, r3, #7
 80083ba:	f003 0301 	and.w	r3, r3, #1
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d060      	beq.n	8008484 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	099b      	lsrs	r3, r3, #6
 80083c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d05a      	beq.n	8008484 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80083ce:	2101      	movs	r1, #1
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f001 fcaf 	bl	8009d34 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80083d6:	2110      	movs	r1, #16
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f001 fc27 	bl	8009c2c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d048      	beq.n	800847a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	2bff      	cmp	r3, #255	@ 0xff
 80083f0:	d910      	bls.n	8008414 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	22ff      	movs	r2, #255	@ 0xff
 80083f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083fc:	b299      	uxth	r1, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008402:	b2da      	uxtb	r2, r3
 8008404:	2300      	movs	r3, #0
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f001 fbdb 	bl	8009bc8 <I2C_TransferConfig>
 8008412:	e011      	b.n	8008438 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008418:	b29a      	uxth	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008422:	b299      	uxth	r1, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008428:	b2da      	uxtb	r2, r3
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f001 fbc8 	bl	8009bc8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008442:	1ad3      	subs	r3, r2, r3
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b22      	cmp	r3, #34	@ 0x22
 8008454:	d108      	bne.n	8008468 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008464:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008466:	e082      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008476:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008478:	e079      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800847a:	2140      	movs	r1, #64	@ 0x40
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 ff01 	bl	8009284 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008482:	e074      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	099b      	lsrs	r3, r3, #6
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d05e      	beq.n	800854e <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	099b      	lsrs	r3, r3, #6
 8008494:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008498:	2b00      	cmp	r3, #0
 800849a:	d058      	beq.n	800854e <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800849c:	2101      	movs	r1, #1
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f001 fc48 	bl	8009d34 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80084a4:	2110      	movs	r1, #16
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f001 fbc0 	bl	8009c2c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b22      	cmp	r3, #34	@ 0x22
 80084b6:	d101      	bne.n	80084bc <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80084b8:	4b32      	ldr	r3, [pc, #200]	@ (8008584 <I2C_Mem_ISR_DMA+0x25c>)
 80084ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2bff      	cmp	r3, #255	@ 0xff
 80084c4:	d910      	bls.n	80084e8 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	22ff      	movs	r2, #255	@ 0xff
 80084ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d0:	b299      	uxth	r1, r3
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d6:	b2da      	uxtb	r2, r3
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 fb71 	bl	8009bc8 <I2C_TransferConfig>
 80084e6:	e011      	b.n	800850c <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f6:	b299      	uxth	r1, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f001 fb5e 	bl	8009bc8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	b29a      	uxth	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b22      	cmp	r3, #34	@ 0x22
 8008528:	d108      	bne.n	800853c <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008538:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800853a:	e018      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800854a:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800854c:	e00f      	b.n	800856e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	095b      	lsrs	r3, r3, #5
 8008552:	f003 0301 	and.w	r3, r3, #1
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008566:	68b9      	ldr	r1, [r7, #8]
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fb11 	bl	8008b90 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	80002000 	.word	0x80002000
 8008584:	80002400 	.word	0x80002400

08008588 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008598:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <I2C_Slave_ISR_DMA+0x24>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e1cc      	b.n	8008946 <I2C_Slave_ISR_DMA+0x3be>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00a      	beq.n	80085d6 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d004      	beq.n	80085d6 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fba8 	bl	8008d24 <I2C_ITSlaveCplt>
 80085d4:	e1b2      	b.n	800893c <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	091b      	lsrs	r3, r3, #4
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 819c 	beq.w	800891c <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	091b      	lsrs	r3, r3, #4
 80085e8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8195 	beq.w	800891c <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	0b9b      	lsrs	r3, r3, #14
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	0bdb      	lsrs	r3, r3, #15
 8008602:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 8181 	beq.w	800890e <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d07c      	beq.n	800870e <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	0bdb      	lsrs	r3, r3, #15
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d076      	beq.n	800870e <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a75      	ldr	r2, [pc, #468]	@ (80087fc <I2C_Slave_ISR_DMA+0x274>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d059      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a73      	ldr	r2, [pc, #460]	@ (8008800 <I2C_Slave_ISR_DMA+0x278>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d053      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a71      	ldr	r2, [pc, #452]	@ (8008804 <I2C_Slave_ISR_DMA+0x27c>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d04d      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a6f      	ldr	r2, [pc, #444]	@ (8008808 <I2C_Slave_ISR_DMA+0x280>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d047      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a6d      	ldr	r2, [pc, #436]	@ (800880c <I2C_Slave_ISR_DMA+0x284>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d041      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a6b      	ldr	r2, [pc, #428]	@ (8008810 <I2C_Slave_ISR_DMA+0x288>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d03b      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a69      	ldr	r2, [pc, #420]	@ (8008814 <I2C_Slave_ISR_DMA+0x28c>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d035      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a67      	ldr	r2, [pc, #412]	@ (8008818 <I2C_Slave_ISR_DMA+0x290>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d02f      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a65      	ldr	r2, [pc, #404]	@ (800881c <I2C_Slave_ISR_DMA+0x294>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d029      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a63      	ldr	r2, [pc, #396]	@ (8008820 <I2C_Slave_ISR_DMA+0x298>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d023      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a61      	ldr	r2, [pc, #388]	@ (8008824 <I2C_Slave_ISR_DMA+0x29c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d01d      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a5f      	ldr	r2, [pc, #380]	@ (8008828 <I2C_Slave_ISR_DMA+0x2a0>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d017      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a5d      	ldr	r2, [pc, #372]	@ (800882c <I2C_Slave_ISR_DMA+0x2a4>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d011      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a5b      	ldr	r2, [pc, #364]	@ (8008830 <I2C_Slave_ISR_DMA+0x2a8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00b      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a59      	ldr	r2, [pc, #356]	@ (8008834 <I2C_Slave_ISR_DMA+0x2ac>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d005      	beq.n	80086e0 <I2C_Slave_ISR_DMA+0x158>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a57      	ldr	r2, [pc, #348]	@ (8008838 <I2C_Slave_ISR_DMA+0x2b0>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d109      	bne.n	80086f4 <I2C_Slave_ISR_DMA+0x16c>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bf0c      	ite	eq
 80086ec:	2301      	moveq	r3, #1
 80086ee:	2300      	movne	r3, #0
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	e008      	b.n	8008706 <I2C_Slave_ISR_DMA+0x17e>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bf0c      	ite	eq
 8008700:	2301      	moveq	r3, #1
 8008702:	2300      	movne	r3, #0
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800870a:	2301      	movs	r3, #1
 800870c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 809f 	beq.w	8008856 <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	0b9b      	lsrs	r3, r3, #14
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 8098 	beq.w	8008856 <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a33      	ldr	r2, [pc, #204]	@ (80087fc <I2C_Slave_ISR_DMA+0x274>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d059      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a31      	ldr	r2, [pc, #196]	@ (8008800 <I2C_Slave_ISR_DMA+0x278>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d053      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a2f      	ldr	r2, [pc, #188]	@ (8008804 <I2C_Slave_ISR_DMA+0x27c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d04d      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2d      	ldr	r2, [pc, #180]	@ (8008808 <I2C_Slave_ISR_DMA+0x280>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d047      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a2b      	ldr	r2, [pc, #172]	@ (800880c <I2C_Slave_ISR_DMA+0x284>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d041      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a29      	ldr	r2, [pc, #164]	@ (8008810 <I2C_Slave_ISR_DMA+0x288>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d03b      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a27      	ldr	r2, [pc, #156]	@ (8008814 <I2C_Slave_ISR_DMA+0x28c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d035      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a25      	ldr	r2, [pc, #148]	@ (8008818 <I2C_Slave_ISR_DMA+0x290>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d02f      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a23      	ldr	r2, [pc, #140]	@ (800881c <I2C_Slave_ISR_DMA+0x294>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d029      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a21      	ldr	r2, [pc, #132]	@ (8008820 <I2C_Slave_ISR_DMA+0x298>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d023      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008824 <I2C_Slave_ISR_DMA+0x29c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d01d      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008828 <I2C_Slave_ISR_DMA+0x2a0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d017      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a1b      	ldr	r2, [pc, #108]	@ (800882c <I2C_Slave_ISR_DMA+0x2a4>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d011      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a19      	ldr	r2, [pc, #100]	@ (8008830 <I2C_Slave_ISR_DMA+0x2a8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d00b      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a17      	ldr	r2, [pc, #92]	@ (8008834 <I2C_Slave_ISR_DMA+0x2ac>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d005      	beq.n	80087e6 <I2C_Slave_ISR_DMA+0x25e>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a15      	ldr	r2, [pc, #84]	@ (8008838 <I2C_Slave_ISR_DMA+0x2b0>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d12a      	bne.n	800883c <I2C_Slave_ISR_DMA+0x2b4>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	bf0c      	ite	eq
 80087f2:	2301      	moveq	r3, #1
 80087f4:	2300      	movne	r3, #0
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	e029      	b.n	800884e <I2C_Slave_ISR_DMA+0x2c6>
 80087fa:	bf00      	nop
 80087fc:	40020010 	.word	0x40020010
 8008800:	40020028 	.word	0x40020028
 8008804:	40020040 	.word	0x40020040
 8008808:	40020058 	.word	0x40020058
 800880c:	40020070 	.word	0x40020070
 8008810:	40020088 	.word	0x40020088
 8008814:	400200a0 	.word	0x400200a0
 8008818:	400200b8 	.word	0x400200b8
 800881c:	40020410 	.word	0x40020410
 8008820:	40020428 	.word	0x40020428
 8008824:	40020440 	.word	0x40020440
 8008828:	40020458 	.word	0x40020458
 800882c:	40020470 	.word	0x40020470
 8008830:	40020488 	.word	0x40020488
 8008834:	400204a0 	.word	0x400204a0
 8008838:	400204b8 	.word	0x400204b8
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	bf0c      	ite	eq
 8008848:	2301      	moveq	r3, #1
 800884a:	2300      	movne	r3, #0
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8008852:	2301      	movs	r3, #1
 8008854:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d128      	bne.n	80088ae <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008862:	b2db      	uxtb	r3, r3
 8008864:	2b28      	cmp	r3, #40	@ 0x28
 8008866:	d108      	bne.n	800887a <I2C_Slave_ISR_DMA+0x2f2>
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886e:	d104      	bne.n	800887a <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fcb0 	bl	80091d8 <I2C_ITListenCplt>
 8008878:	e048      	b.n	800890c <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b29      	cmp	r3, #41	@ 0x29
 8008884:	d10e      	bne.n	80088a4 <I2C_Slave_ISR_DMA+0x31c>
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800888c:	d00a      	beq.n	80088a4 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2210      	movs	r2, #16
 8008894:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fe0b 	bl	80094b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f918 	bl	8008ad2 <I2C_ITSlaveSeqCplt>
 80088a2:	e033      	b.n	800890c <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2210      	movs	r2, #16
 80088aa:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80088ac:	e034      	b.n	8008918 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2210      	movs	r2, #16
 80088b4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ba:	f043 0204 	orr.w	r2, r3, #4
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <I2C_Slave_ISR_DMA+0x350>
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088d6:	d11f      	bne.n	8008918 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80088d8:	7dfb      	ldrb	r3, [r7, #23]
 80088da:	2b21      	cmp	r3, #33	@ 0x21
 80088dc:	d002      	beq.n	80088e4 <I2C_Slave_ISR_DMA+0x35c>
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	2b29      	cmp	r3, #41	@ 0x29
 80088e2:	d103      	bne.n	80088ec <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2221      	movs	r2, #33	@ 0x21
 80088e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80088ea:	e008      	b.n	80088fe <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	2b22      	cmp	r3, #34	@ 0x22
 80088f0:	d002      	beq.n	80088f8 <I2C_Slave_ISR_DMA+0x370>
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088f6:	d102      	bne.n	80088fe <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2222      	movs	r2, #34	@ 0x22
 80088fc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008902:	4619      	mov	r1, r3
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fcbd 	bl	8009284 <I2C_ITError>
      if (treatdmanack == 1U)
 800890a:	e005      	b.n	8008918 <I2C_Slave_ISR_DMA+0x390>
 800890c:	e004      	b.n	8008918 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2210      	movs	r2, #16
 8008914:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008916:	e011      	b.n	800893c <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008918:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800891a:	e00f      	b.n	800893c <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	08db      	lsrs	r3, r3, #3
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d009      	beq.n	800893c <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	08db      	lsrs	r3, r3, #3
 800892c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008934:	68b9      	ldr	r1, [r7, #8]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f80a 	bl	8008950 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3720      	adds	r7, #32
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop

08008950 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008966:	2b28      	cmp	r3, #40	@ 0x28
 8008968:	d16a      	bne.n	8008a40 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	0c1b      	lsrs	r3, r3, #16
 8008972:	b2db      	uxtb	r3, r3
 8008974:	f003 0301 	and.w	r3, r3, #1
 8008978:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	0c1b      	lsrs	r3, r3, #16
 8008982:	b29b      	uxth	r3, r3
 8008984:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8008988:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	b29b      	uxth	r3, r3
 8008992:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008996:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80089a4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d138      	bne.n	8008a20 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80089ae:	897b      	ldrh	r3, [r7, #10]
 80089b0:	09db      	lsrs	r3, r3, #7
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	89bb      	ldrh	r3, [r7, #12]
 80089b6:	4053      	eors	r3, r2
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f003 0306 	and.w	r3, r3, #6
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d11c      	bne.n	80089fc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80089c2:	897b      	ldrh	r3, [r7, #10]
 80089c4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d13b      	bne.n	8008a50 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2208      	movs	r2, #8
 80089e4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80089ee:	89ba      	ldrh	r2, [r7, #12]
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	4619      	mov	r1, r3
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7ff f92c 	bl	8007c52 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80089fa:	e029      	b.n	8008a50 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80089fc:	893b      	ldrh	r3, [r7, #8]
 80089fe:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f001 f995 	bl	8009d34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a12:	89ba      	ldrh	r2, [r7, #12]
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7ff f91a 	bl	8007c52 <HAL_I2C_AddrCallback>
}
 8008a1e:	e017      	b.n	8008a50 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a20:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f001 f985 	bl	8009d34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a32:	89ba      	ldrh	r2, [r7, #12]
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4619      	mov	r1, r3
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff f90a 	bl	8007c52 <HAL_I2C_AddrCallback>
}
 8008a3e:	e007      	b.n	8008a50 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2208      	movs	r2, #8
 8008a46:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008a50:	bf00      	nop
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	2b21      	cmp	r3, #33	@ 0x21
 8008a72:	d115      	bne.n	8008aa0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2220      	movs	r2, #32
 8008a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2211      	movs	r2, #17
 8008a80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008a88:	2101      	movs	r1, #1
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 f952 	bl	8009d34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff f8b2 	bl	8007c02 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008a9e:	e014      	b.n	8008aca <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2220      	movs	r2, #32
 8008aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2212      	movs	r2, #18
 8008aac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008ab4:	2102      	movs	r1, #2
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 f93c 	bl	8009d34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7ff f8a6 	bl	8007c16 <HAL_I2C_MasterRxCpltCallback>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	0b9b      	lsrs	r3, r3, #14
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d008      	beq.n	8008b08 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e00d      	b.n	8008b24 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	0bdb      	lsrs	r3, r3, #15
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b22:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b29      	cmp	r3, #41	@ 0x29
 8008b2e:	d112      	bne.n	8008b56 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2228      	movs	r2, #40	@ 0x28
 8008b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2221      	movs	r2, #33	@ 0x21
 8008b3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b3e:	2101      	movs	r1, #1
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 f8f7 	bl	8009d34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7ff f86b 	bl	8007c2a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b54:	e017      	b.n	8008b86 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b60:	d111      	bne.n	8008b86 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2228      	movs	r2, #40	@ 0x28
 8008b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2222      	movs	r2, #34	@ 0x22
 8008b6e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008b70:	2102      	movs	r1, #2
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f001 f8de 	bl	8009d34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff f85c 	bl	8007c3e <HAL_I2C_SlaveRxCpltCallback>
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b21      	cmp	r3, #33	@ 0x21
 8008bb0:	d107      	bne.n	8008bc2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 f8bd 	bl	8009d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2211      	movs	r2, #17
 8008bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008bc0:	e00c      	b.n	8008bdc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b22      	cmp	r3, #34	@ 0x22
 8008bcc:	d106      	bne.n	8008bdc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008bce:	2102      	movs	r1, #2
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 f8af 	bl	8009d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2212      	movs	r2, #18
 8008bda:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6859      	ldr	r1, [r3, #4]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b4d      	ldr	r3, [pc, #308]	@ (8008d1c <I2C_ITMasterCplt+0x18c>)
 8008be8:	400b      	ands	r3, r1
 8008bea:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8008d20 <I2C_ITMasterCplt+0x190>)
 8008bf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2210      	movs	r2, #16
 8008c0a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c10:	f043 0204 	orr.w	r2, r3, #4
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b60      	cmp	r3, #96	@ 0x60
 8008c22:	d10b      	bne.n	8008c3c <I2C_ITMasterCplt+0xac>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	089b      	lsrs	r3, r3, #2
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fc38 	bl	80094b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c46:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b60      	cmp	r3, #96	@ 0x60
 8008c52:	d002      	beq.n	8008c5a <I2C_ITMasterCplt+0xca>
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 fb0f 	bl	8009284 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c66:	e054      	b.n	8008d12 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	2b21      	cmp	r3, #33	@ 0x21
 8008c72:	d124      	bne.n	8008cbe <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2220      	movs	r2, #32
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b40      	cmp	r3, #64	@ 0x40
 8008c8c:	d10b      	bne.n	8008ca6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fe ffef 	bl	8007c82 <HAL_I2C_MemTxCpltCallback>
}
 8008ca4:	e035      	b.n	8008d12 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7fe ffa3 	bl	8007c02 <HAL_I2C_MasterTxCpltCallback>
}
 8008cbc:	e029      	b.n	8008d12 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b22      	cmp	r3, #34	@ 0x22
 8008cc8:	d123      	bne.n	8008d12 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b40      	cmp	r3, #64	@ 0x40
 8008ce2:	d10b      	bne.n	8008cfc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7fe ffce 	bl	8007c96 <HAL_I2C_MemRxCpltCallback>
}
 8008cfa:	e00a      	b.n	8008d12 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7fe ff82 	bl	8007c16 <HAL_I2C_MasterRxCpltCallback>
}
 8008d12:	bf00      	nop
 8008d14:	3718      	adds	r7, #24
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	fe00e800 	.word	0xfe00e800
 8008d20:	ffff0000 	.word	0xffff0000

08008d24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d46:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d50:	7afb      	ldrb	r3, [r7, #11]
 8008d52:	2b21      	cmp	r3, #33	@ 0x21
 8008d54:	d002      	beq.n	8008d5c <I2C_ITSlaveCplt+0x38>
 8008d56:	7afb      	ldrb	r3, [r7, #11]
 8008d58:	2b29      	cmp	r3, #41	@ 0x29
 8008d5a:	d108      	bne.n	8008d6e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008d5c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 ffe7 	bl	8009d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2221      	movs	r2, #33	@ 0x21
 8008d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d6c:	e019      	b.n	8008da2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d6e:	7afb      	ldrb	r3, [r7, #11]
 8008d70:	2b22      	cmp	r3, #34	@ 0x22
 8008d72:	d002      	beq.n	8008d7a <I2C_ITSlaveCplt+0x56>
 8008d74:	7afb      	ldrb	r3, [r7, #11]
 8008d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d78:	d108      	bne.n	8008d8c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008d7a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 ffd8 	bl	8009d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2222      	movs	r2, #34	@ 0x22
 8008d88:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d8a:	e00a      	b.n	8008da2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008d8c:	7afb      	ldrb	r3, [r7, #11]
 8008d8e:	2b28      	cmp	r3, #40	@ 0x28
 8008d90:	d107      	bne.n	8008da2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008d92:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 ffcc 	bl	8009d34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685a      	ldr	r2, [r3, #4]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008db0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6859      	ldr	r1, [r3, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b80      	ldr	r3, [pc, #512]	@ (8008fc0 <I2C_ITSlaveCplt+0x29c>)
 8008dbe:	400b      	ands	r3, r1
 8008dc0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fb75 	bl	80094b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	0b9b      	lsrs	r3, r3, #14
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d07a      	beq.n	8008eca <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008de2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8112 	beq.w	8009012 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a73      	ldr	r2, [pc, #460]	@ (8008fc4 <I2C_ITSlaveCplt+0x2a0>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d059      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a71      	ldr	r2, [pc, #452]	@ (8008fc8 <I2C_ITSlaveCplt+0x2a4>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d053      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a6f      	ldr	r2, [pc, #444]	@ (8008fcc <I2C_ITSlaveCplt+0x2a8>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d04d      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a6d      	ldr	r2, [pc, #436]	@ (8008fd0 <I2C_ITSlaveCplt+0x2ac>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d047      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a6b      	ldr	r2, [pc, #428]	@ (8008fd4 <I2C_ITSlaveCplt+0x2b0>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d041      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a69      	ldr	r2, [pc, #420]	@ (8008fd8 <I2C_ITSlaveCplt+0x2b4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d03b      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a67      	ldr	r2, [pc, #412]	@ (8008fdc <I2C_ITSlaveCplt+0x2b8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d035      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a65      	ldr	r2, [pc, #404]	@ (8008fe0 <I2C_ITSlaveCplt+0x2bc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d02f      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a63      	ldr	r2, [pc, #396]	@ (8008fe4 <I2C_ITSlaveCplt+0x2c0>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d029      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a61      	ldr	r2, [pc, #388]	@ (8008fe8 <I2C_ITSlaveCplt+0x2c4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d023      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fec <I2C_ITSlaveCplt+0x2c8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01d      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a5d      	ldr	r2, [pc, #372]	@ (8008ff0 <I2C_ITSlaveCplt+0x2cc>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d017      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a5b      	ldr	r2, [pc, #364]	@ (8008ff4 <I2C_ITSlaveCplt+0x2d0>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d011      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a59      	ldr	r2, [pc, #356]	@ (8008ff8 <I2C_ITSlaveCplt+0x2d4>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00b      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a57      	ldr	r2, [pc, #348]	@ (8008ffc <I2C_ITSlaveCplt+0x2d8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d005      	beq.n	8008eae <I2C_ITSlaveCplt+0x18a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a55      	ldr	r2, [pc, #340]	@ (8009000 <I2C_ITSlaveCplt+0x2dc>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d105      	bne.n	8008eba <I2C_ITSlaveCplt+0x196>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	e004      	b.n	8008ec4 <I2C_ITSlaveCplt+0x1a0>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008ec8:	e0a3      	b.n	8009012 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	0bdb      	lsrs	r3, r3, #15
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 809d 	beq.w	8009012 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ee6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8090 	beq.w	8009012 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a32      	ldr	r2, [pc, #200]	@ (8008fc4 <I2C_ITSlaveCplt+0x2a0>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d059      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a30      	ldr	r2, [pc, #192]	@ (8008fc8 <I2C_ITSlaveCplt+0x2a4>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d053      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a2e      	ldr	r2, [pc, #184]	@ (8008fcc <I2C_ITSlaveCplt+0x2a8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d04d      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8008fd0 <I2C_ITSlaveCplt+0x2ac>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d047      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd4 <I2C_ITSlaveCplt+0x2b0>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d041      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a28      	ldr	r2, [pc, #160]	@ (8008fd8 <I2C_ITSlaveCplt+0x2b4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d03b      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a26      	ldr	r2, [pc, #152]	@ (8008fdc <I2C_ITSlaveCplt+0x2b8>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d035      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a24      	ldr	r2, [pc, #144]	@ (8008fe0 <I2C_ITSlaveCplt+0x2bc>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d02f      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a22      	ldr	r2, [pc, #136]	@ (8008fe4 <I2C_ITSlaveCplt+0x2c0>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d029      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a20      	ldr	r2, [pc, #128]	@ (8008fe8 <I2C_ITSlaveCplt+0x2c4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d023      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a1e      	ldr	r2, [pc, #120]	@ (8008fec <I2C_ITSlaveCplt+0x2c8>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d01d      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff0 <I2C_ITSlaveCplt+0x2cc>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d017      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff4 <I2C_ITSlaveCplt+0x2d0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d011      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a18      	ldr	r2, [pc, #96]	@ (8008ff8 <I2C_ITSlaveCplt+0x2d4>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d00b      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a16      	ldr	r2, [pc, #88]	@ (8008ffc <I2C_ITSlaveCplt+0x2d8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d005      	beq.n	8008fb2 <I2C_ITSlaveCplt+0x28e>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a14      	ldr	r2, [pc, #80]	@ (8009000 <I2C_ITSlaveCplt+0x2dc>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d128      	bne.n	8009004 <I2C_ITSlaveCplt+0x2e0>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	e027      	b.n	800900e <I2C_ITSlaveCplt+0x2ea>
 8008fbe:	bf00      	nop
 8008fc0:	fe00e800 	.word	0xfe00e800
 8008fc4:	40020010 	.word	0x40020010
 8008fc8:	40020028 	.word	0x40020028
 8008fcc:	40020040 	.word	0x40020040
 8008fd0:	40020058 	.word	0x40020058
 8008fd4:	40020070 	.word	0x40020070
 8008fd8:	40020088 	.word	0x40020088
 8008fdc:	400200a0 	.word	0x400200a0
 8008fe0:	400200b8 	.word	0x400200b8
 8008fe4:	40020410 	.word	0x40020410
 8008fe8:	40020428 	.word	0x40020428
 8008fec:	40020440 	.word	0x40020440
 8008ff0:	40020458 	.word	0x40020458
 8008ff4:	40020470 	.word	0x40020470
 8008ff8:	40020488 	.word	0x40020488
 8008ffc:	400204a0 	.word	0x400204a0
 8009000:	400204b8 	.word	0x400204b8
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	b29b      	uxth	r3, r3
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	089b      	lsrs	r3, r3, #2
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d020      	beq.n	8009060 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009030:	b2d2      	uxtb	r2, r2
 8009032:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00c      	beq.n	8009060 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d005      	beq.n	8009076 <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906e:	f043 0204 	orr.w	r2, r3, #4
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b00      	cmp	r3, #0
 8009080:	d04a      	beq.n	8009118 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	091b      	lsrs	r3, r3, #4
 8009086:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800908a:	2b00      	cmp	r3, #0
 800908c:	d044      	beq.n	8009118 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009092:	b29b      	uxth	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d128      	bne.n	80090ea <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b28      	cmp	r3, #40	@ 0x28
 80090a2:	d108      	bne.n	80090b6 <I2C_ITSlaveCplt+0x392>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090aa:	d104      	bne.n	80090b6 <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80090ac:	6979      	ldr	r1, [r7, #20]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f892 	bl	80091d8 <I2C_ITListenCplt>
 80090b4:	e030      	b.n	8009118 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b29      	cmp	r3, #41	@ 0x29
 80090c0:	d10e      	bne.n	80090e0 <I2C_ITSlaveCplt+0x3bc>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80090c8:	d00a      	beq.n	80090e0 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2210      	movs	r2, #16
 80090d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f9ed 	bl	80094b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fcfa 	bl	8008ad2 <I2C_ITSlaveSeqCplt>
 80090de:	e01b      	b.n	8009118 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	2210      	movs	r2, #16
 80090e6:	61da      	str	r2, [r3, #28]
 80090e8:	e016      	b.n	8009118 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2210      	movs	r2, #16
 80090f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f6:	f043 0204 	orr.w	r2, r3, #4
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d003      	beq.n	800910c <I2C_ITSlaveCplt+0x3e8>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800910a:	d105      	bne.n	8009118 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f8b6 	bl	8009284 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800912a:	2b00      	cmp	r3, #0
 800912c:	d010      	beq.n	8009150 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f8a5 	bl	8009284 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b28      	cmp	r3, #40	@ 0x28
 8009144:	d141      	bne.n	80091ca <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009146:	6979      	ldr	r1, [r7, #20]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f845 	bl	80091d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800914e:	e03c      	b.n	80091ca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009158:	d014      	beq.n	8009184 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f7ff fcb9 	bl	8008ad2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a1c      	ldr	r2, [pc, #112]	@ (80091d4 <I2C_ITSlaveCplt+0x4b0>)
 8009164:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7fe fd76 	bl	8007c6e <HAL_I2C_ListenCpltCallback>
}
 8009182:	e022      	b.n	80091ca <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b22      	cmp	r3, #34	@ 0x22
 800918e:	d10e      	bne.n	80091ae <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7fe fd49 	bl	8007c3e <HAL_I2C_SlaveRxCpltCallback>
}
 80091ac:	e00d      	b.n	80091ca <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2220      	movs	r2, #32
 80091b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7fe fd30 	bl	8007c2a <HAL_I2C_SlaveTxCpltCallback>
}
 80091ca:	bf00      	nop
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	ffff0000 	.word	0xffff0000

080091d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a26      	ldr	r2, [pc, #152]	@ (8009280 <I2C_ITListenCplt+0xa8>)
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	089b      	lsrs	r3, r3, #2
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d022      	beq.n	8009256 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800922c:	2b00      	cmp	r3, #0
 800922e:	d012      	beq.n	8009256 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009234:	3b01      	subs	r3, #1
 8009236:	b29a      	uxth	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800924e:	f043 0204 	orr.w	r2, r3, #4
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009256:	f248 0103 	movw	r1, #32771	@ 0x8003
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fd6a 	bl	8009d34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2210      	movs	r2, #16
 8009266:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7fe fcfc 	bl	8007c6e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	ffff0000 	.word	0xffff0000

08009284 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009294:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4a6d      	ldr	r2, [pc, #436]	@ (8009458 <I2C_ITError+0x1d4>)
 80092a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	431a      	orrs	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
 80092b8:	2b28      	cmp	r3, #40	@ 0x28
 80092ba:	d005      	beq.n	80092c8 <I2C_ITError+0x44>
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b29      	cmp	r3, #41	@ 0x29
 80092c0:	d002      	beq.n	80092c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c6:	d10b      	bne.n	80092e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092c8:	2103      	movs	r1, #3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fd32 	bl	8009d34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2228      	movs	r2, #40	@ 0x28
 80092d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a60      	ldr	r2, [pc, #384]	@ (800945c <I2C_ITError+0x1d8>)
 80092dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80092de:	e030      	b.n	8009342 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092e0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fd25 	bl	8009d34 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f8e1 	bl	80094b2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b60      	cmp	r3, #96	@ 0x60
 80092fa:	d01f      	beq.n	800933c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2220      	movs	r2, #32
 8009300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699b      	ldr	r3, [r3, #24]
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b20      	cmp	r3, #32
 8009310:	d114      	bne.n	800933c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	f003 0310 	and.w	r3, r3, #16
 800931c:	2b10      	cmp	r3, #16
 800931e:	d109      	bne.n	8009334 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2210      	movs	r2, #16
 8009326:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800932c:	f043 0204 	orr.w	r2, r3, #4
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2220      	movs	r2, #32
 800933a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009346:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934c:	2b00      	cmp	r3, #0
 800934e:	d039      	beq.n	80093c4 <I2C_ITError+0x140>
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b11      	cmp	r3, #17
 8009354:	d002      	beq.n	800935c <I2C_ITError+0xd8>
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b21      	cmp	r3, #33	@ 0x21
 800935a:	d133      	bne.n	80093c4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800936a:	d107      	bne.n	800937c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800937a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009380:	4618      	mov	r0, r3
 8009382:	f7fd fb17 	bl	80069b4 <HAL_DMA_GetState>
 8009386:	4603      	mov	r3, r0
 8009388:	2b01      	cmp	r3, #1
 800938a:	d017      	beq.n	80093bc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009390:	4a33      	ldr	r2, [pc, #204]	@ (8009460 <I2C_ITError+0x1dc>)
 8009392:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fc f997 	bl	80056d4 <HAL_DMA_Abort_IT>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d04d      	beq.n	8009448 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80093b6:	4610      	mov	r0, r2
 80093b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093ba:	e045      	b.n	8009448 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f851 	bl	8009464 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093c2:	e041      	b.n	8009448 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d039      	beq.n	8009440 <I2C_ITError+0x1bc>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b12      	cmp	r3, #18
 80093d0:	d002      	beq.n	80093d8 <I2C_ITError+0x154>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b22      	cmp	r3, #34	@ 0x22
 80093d6:	d133      	bne.n	8009440 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e6:	d107      	bne.n	80093f8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fd fad9 	bl	80069b4 <HAL_DMA_GetState>
 8009402:	4603      	mov	r3, r0
 8009404:	2b01      	cmp	r3, #1
 8009406:	d017      	beq.n	8009438 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800940c:	4a14      	ldr	r2, [pc, #80]	@ (8009460 <I2C_ITError+0x1dc>)
 800940e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941c:	4618      	mov	r0, r3
 800941e:	f7fc f959 	bl	80056d4 <HAL_DMA_Abort_IT>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d011      	beq.n	800944c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800942c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009432:	4610      	mov	r0, r2
 8009434:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009436:	e009      	b.n	800944c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f813 	bl	8009464 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800943e:	e005      	b.n	800944c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f80f 	bl	8009464 <I2C_TreatErrorCallback>
  }
}
 8009446:	e002      	b.n	800944e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009448:	bf00      	nop
 800944a:	e000      	b.n	800944e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800944c:	bf00      	nop
}
 800944e:	bf00      	nop
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	ffff0000 	.word	0xffff0000
 800945c:	08007f3b 	.word	0x08007f3b
 8009460:	08009805 	.word	0x08009805

08009464 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b60      	cmp	r3, #96	@ 0x60
 8009476:	d10e      	bne.n	8009496 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2220      	movs	r2, #32
 800947c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f7fe fc15 	bl	8007cbe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009494:	e009      	b.n	80094aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fe fc00 	bl	8007caa <HAL_I2C_ErrorCallback>
}
 80094aa:	bf00      	nop
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d103      	bne.n	80094d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	2200      	movs	r2, #0
 80094ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d007      	beq.n	80094ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f042 0201 	orr.w	r2, r2, #1
 80094ec:	619a      	str	r2, [r3, #24]
  }
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009506:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009516:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009522:	2120      	movs	r1, #32
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 fb81 	bl	8009c2c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800952a:	e02d      	b.n	8009588 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009534:	441a      	add	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800953e:	b29b      	uxth	r3, r3
 8009540:	2bff      	cmp	r3, #255	@ 0xff
 8009542:	d903      	bls.n	800954c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	22ff      	movs	r2, #255	@ 0xff
 8009548:	851a      	strh	r2, [r3, #40]	@ 0x28
 800954a:	e004      	b.n	8009556 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800955e:	4619      	mov	r1, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3328      	adds	r3, #40	@ 0x28
 8009566:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800956c:	f7fb fb2a 	bl	8004bc4 <HAL_DMA_Start_IT>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009576:	2110      	movs	r1, #16
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f7ff fe83 	bl	8009284 <I2C_ITError>
}
 800957e:	e003      	b.n	8009588 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009580:	2140      	movs	r1, #64	@ 0x40
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 fb52 	bl	8009c2c <I2C_Enable_IRQ>
}
 8009588:	bf00      	nop
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d076      	beq.n	8009698 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a71      	ldr	r2, [pc, #452]	@ (8009778 <I2C_DMAError+0x1e8>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d059      	beq.n	800966a <I2C_DMAError+0xda>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a6f      	ldr	r2, [pc, #444]	@ (800977c <I2C_DMAError+0x1ec>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d053      	beq.n	800966a <I2C_DMAError+0xda>
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a6d      	ldr	r2, [pc, #436]	@ (8009780 <I2C_DMAError+0x1f0>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d04d      	beq.n	800966a <I2C_DMAError+0xda>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a6b      	ldr	r2, [pc, #428]	@ (8009784 <I2C_DMAError+0x1f4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d047      	beq.n	800966a <I2C_DMAError+0xda>
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a69      	ldr	r2, [pc, #420]	@ (8009788 <I2C_DMAError+0x1f8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d041      	beq.n	800966a <I2C_DMAError+0xda>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a67      	ldr	r2, [pc, #412]	@ (800978c <I2C_DMAError+0x1fc>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d03b      	beq.n	800966a <I2C_DMAError+0xda>
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a65      	ldr	r2, [pc, #404]	@ (8009790 <I2C_DMAError+0x200>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d035      	beq.n	800966a <I2C_DMAError+0xda>
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a63      	ldr	r2, [pc, #396]	@ (8009794 <I2C_DMAError+0x204>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d02f      	beq.n	800966a <I2C_DMAError+0xda>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a61      	ldr	r2, [pc, #388]	@ (8009798 <I2C_DMAError+0x208>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d029      	beq.n	800966a <I2C_DMAError+0xda>
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a5f      	ldr	r2, [pc, #380]	@ (800979c <I2C_DMAError+0x20c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d023      	beq.n	800966a <I2C_DMAError+0xda>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a5d      	ldr	r2, [pc, #372]	@ (80097a0 <I2C_DMAError+0x210>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d01d      	beq.n	800966a <I2C_DMAError+0xda>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a5b      	ldr	r2, [pc, #364]	@ (80097a4 <I2C_DMAError+0x214>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d017      	beq.n	800966a <I2C_DMAError+0xda>
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a59      	ldr	r2, [pc, #356]	@ (80097a8 <I2C_DMAError+0x218>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d011      	beq.n	800966a <I2C_DMAError+0xda>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a57      	ldr	r2, [pc, #348]	@ (80097ac <I2C_DMAError+0x21c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00b      	beq.n	800966a <I2C_DMAError+0xda>
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a55      	ldr	r2, [pc, #340]	@ (80097b0 <I2C_DMAError+0x220>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d005      	beq.n	800966a <I2C_DMAError+0xda>
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a53      	ldr	r2, [pc, #332]	@ (80097b4 <I2C_DMAError+0x224>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d109      	bne.n	800967e <I2C_DMAError+0xee>
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	bf0c      	ite	eq
 8009676:	2301      	moveq	r3, #1
 8009678:	2300      	movne	r3, #0
 800967a:	b2db      	uxtb	r3, r3
 800967c:	e008      	b.n	8009690 <I2C_DMAError+0x100>
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	bf0c      	ite	eq
 800968a:	2301      	moveq	r3, #1
 800968c:	2300      	movne	r3, #0
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8009694:	2301      	movs	r3, #1
 8009696:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 8098 	beq.w	80097d2 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a33      	ldr	r2, [pc, #204]	@ (8009778 <I2C_DMAError+0x1e8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d059      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a31      	ldr	r2, [pc, #196]	@ (800977c <I2C_DMAError+0x1ec>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d053      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a2f      	ldr	r2, [pc, #188]	@ (8009780 <I2C_DMAError+0x1f0>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d04d      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009784 <I2C_DMAError+0x1f4>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d047      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a2b      	ldr	r2, [pc, #172]	@ (8009788 <I2C_DMAError+0x1f8>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d041      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a29      	ldr	r2, [pc, #164]	@ (800978c <I2C_DMAError+0x1fc>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d03b      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a27      	ldr	r2, [pc, #156]	@ (8009790 <I2C_DMAError+0x200>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d035      	beq.n	8009762 <I2C_DMAError+0x1d2>
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a25      	ldr	r2, [pc, #148]	@ (8009794 <I2C_DMAError+0x204>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d02f      	beq.n	8009762 <I2C_DMAError+0x1d2>
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a23      	ldr	r2, [pc, #140]	@ (8009798 <I2C_DMAError+0x208>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d029      	beq.n	8009762 <I2C_DMAError+0x1d2>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a21      	ldr	r2, [pc, #132]	@ (800979c <I2C_DMAError+0x20c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d023      	beq.n	8009762 <I2C_DMAError+0x1d2>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a1f      	ldr	r2, [pc, #124]	@ (80097a0 <I2C_DMAError+0x210>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d01d      	beq.n	8009762 <I2C_DMAError+0x1d2>
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a1d      	ldr	r2, [pc, #116]	@ (80097a4 <I2C_DMAError+0x214>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d017      	beq.n	8009762 <I2C_DMAError+0x1d2>
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a1b      	ldr	r2, [pc, #108]	@ (80097a8 <I2C_DMAError+0x218>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d011      	beq.n	8009762 <I2C_DMAError+0x1d2>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a19      	ldr	r2, [pc, #100]	@ (80097ac <I2C_DMAError+0x21c>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00b      	beq.n	8009762 <I2C_DMAError+0x1d2>
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a17      	ldr	r2, [pc, #92]	@ (80097b0 <I2C_DMAError+0x220>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d005      	beq.n	8009762 <I2C_DMAError+0x1d2>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a15      	ldr	r2, [pc, #84]	@ (80097b4 <I2C_DMAError+0x224>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d12a      	bne.n	80097b8 <I2C_DMAError+0x228>
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	2b00      	cmp	r3, #0
 800976c:	bf0c      	ite	eq
 800976e:	2301      	moveq	r3, #1
 8009770:	2300      	movne	r3, #0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	e029      	b.n	80097ca <I2C_DMAError+0x23a>
 8009776:	bf00      	nop
 8009778:	40020010 	.word	0x40020010
 800977c:	40020028 	.word	0x40020028
 8009780:	40020040 	.word	0x40020040
 8009784:	40020058 	.word	0x40020058
 8009788:	40020070 	.word	0x40020070
 800978c:	40020088 	.word	0x40020088
 8009790:	400200a0 	.word	0x400200a0
 8009794:	400200b8 	.word	0x400200b8
 8009798:	40020410 	.word	0x40020410
 800979c:	40020428 	.word	0x40020428
 80097a0:	40020440 	.word	0x40020440
 80097a4:	40020458 	.word	0x40020458
 80097a8:	40020470 	.word	0x40020470
 80097ac:	40020488 	.word	0x40020488
 80097b0:	400204a0 	.word	0x400204a0
 80097b4:	400204b8 	.word	0x400204b8
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	bf0c      	ite	eq
 80097c4:	2301      	moveq	r3, #1
 80097c6:	2300      	movne	r3, #0
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80097ce:	2301      	movs	r3, #1
 80097d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7fd f8fc 	bl	80069d0 <HAL_DMA_GetError>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d00e      	beq.n	80097fc <I2C_DMAError+0x26c>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80097f2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80097f4:	2110      	movs	r1, #16
 80097f6:	68b8      	ldr	r0, [r7, #8]
 80097f8:	f7ff fd44 	bl	8009284 <I2C_ITError>
  }
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009810:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800981e:	2200      	movs	r2, #0
 8009820:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d003      	beq.n	8009832 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800982e:	2200      	movs	r2, #0
 8009830:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f7ff fe16 	bl	8009464 <I2C_TreatErrorCallback>
}
 8009838:	bf00      	nop
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	603b      	str	r3, [r7, #0]
 800984c:	4613      	mov	r3, r2
 800984e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009850:	e03b      	b.n	80098ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f8d6 	bl	8009a08 <I2C_IsErrorOccurred>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e041      	b.n	80098ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800986c:	d02d      	beq.n	80098ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800986e:	f7f9 f9d7 	bl	8002c20 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <I2C_WaitOnFlagUntilTimeout+0x44>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d122      	bne.n	80098ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	699a      	ldr	r2, [r3, #24]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4013      	ands	r3, r2
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	429a      	cmp	r2, r3
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d113      	bne.n	80098ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a6:	f043 0220 	orr.w	r2, r3, #32
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e00f      	b.n	80098ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699a      	ldr	r2, [r3, #24]
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	4013      	ands	r3, r2
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	bf0c      	ite	eq
 80098da:	2301      	moveq	r3, #1
 80098dc:	2300      	movne	r3, #0
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	79fb      	ldrb	r3, [r7, #7]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d0b4      	beq.n	8009852 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098fe:	e033      	b.n	8009968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f87f 	bl	8009a08 <I2C_IsErrorOccurred>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e031      	b.n	8009978 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800991a:	d025      	beq.n	8009968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800991c:	f7f9 f980 	bl	8002c20 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	429a      	cmp	r2, r3
 800992a:	d302      	bcc.n	8009932 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11a      	bne.n	8009968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b02      	cmp	r3, #2
 800993e:	d013      	beq.n	8009968 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009944:	f043 0220 	orr.w	r2, r3, #32
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e007      	b.n	8009978 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	f003 0302 	and.w	r3, r3, #2
 8009972:	2b02      	cmp	r3, #2
 8009974:	d1c4      	bne.n	8009900 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800998c:	e02f      	b.n	80099ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68b9      	ldr	r1, [r7, #8]
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f838 	bl	8009a08 <I2C_IsErrorOccurred>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e02d      	b.n	80099fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a2:	f7f9 f93d 	bl	8002c20 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d302      	bcc.n	80099b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d11a      	bne.n	80099ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d013      	beq.n	80099ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e007      	b.n	80099fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b20      	cmp	r3, #32
 80099fa:	d1c8      	bne.n	800998e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b08a      	sub	sp, #40	@ 0x28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	f003 0310 	and.w	r3, r3, #16
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d068      	beq.n	8009b06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	2210      	movs	r2, #16
 8009a3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a3c:	e049      	b.n	8009ad2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a44:	d045      	beq.n	8009ad2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a46:	f7f9 f8eb 	bl	8002c20 <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d302      	bcc.n	8009a5c <I2C_IsErrorOccurred+0x54>
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d13a      	bne.n	8009ad2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a7e:	d121      	bne.n	8009ac4 <I2C_IsErrorOccurred+0xbc>
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a86:	d01d      	beq.n	8009ac4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a88:	7cfb      	ldrb	r3, [r7, #19]
 8009a8a:	2b20      	cmp	r3, #32
 8009a8c:	d01a      	beq.n	8009ac4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a9e:	f7f9 f8bf 	bl	8002c20 <HAL_GetTick>
 8009aa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aa4:	e00e      	b.n	8009ac4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009aa6:	f7f9 f8bb 	bl	8002c20 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	2b19      	cmp	r3, #25
 8009ab2:	d907      	bls.n	8009ac4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ab4:	6a3b      	ldr	r3, [r7, #32]
 8009ab6:	f043 0320 	orr.w	r3, r3, #32
 8009aba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009ac2:	e006      	b.n	8009ad2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	d1e9      	bne.n	8009aa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	f003 0320 	and.w	r3, r3, #32
 8009adc:	2b20      	cmp	r3, #32
 8009ade:	d003      	beq.n	8009ae8 <I2C_IsErrorOccurred+0xe0>
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d0aa      	beq.n	8009a3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d103      	bne.n	8009af8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2220      	movs	r2, #32
 8009af6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	f043 0304 	orr.w	r3, r3, #4
 8009afe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	f043 0301 	orr.w	r3, r3, #1
 8009b1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f043 0308 	orr.w	r3, r3, #8
 8009b40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00b      	beq.n	8009b74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b5c:	6a3b      	ldr	r3, [r7, #32]
 8009b5e:	f043 0302 	orr.w	r3, r3, #2
 8009b62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d01c      	beq.n	8009bb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff fc98 	bl	80094b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6859      	ldr	r1, [r3, #4]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc4 <I2C_IsErrorOccurred+0x1bc>)
 8009b8e:	400b      	ands	r3, r1
 8009b90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3728      	adds	r7, #40	@ 0x28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	fe00e800 	.word	0xfe00e800

08009bc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	60f8      	str	r0, [r7, #12]
 8009bd0:	607b      	str	r3, [r7, #4]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	817b      	strh	r3, [r7, #10]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bda:	897b      	ldrh	r3, [r7, #10]
 8009bdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009be0:	7a7b      	ldrb	r3, [r7, #9]
 8009be2:	041b      	lsls	r3, r3, #16
 8009be4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009be8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bf6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	6a3b      	ldr	r3, [r7, #32]
 8009c00:	0d5b      	lsrs	r3, r3, #21
 8009c02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009c06:	4b08      	ldr	r3, [pc, #32]	@ (8009c28 <I2C_TransferConfig+0x60>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	43db      	mvns	r3, r3
 8009c0c:	ea02 0103 	and.w	r1, r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c1a:	bf00      	nop
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	03ff63ff 	.word	0x03ff63ff

08009c2c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c40:	4a39      	ldr	r2, [pc, #228]	@ (8009d28 <I2C_Enable_IRQ+0xfc>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d032      	beq.n	8009cac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009c4a:	4a38      	ldr	r2, [pc, #224]	@ (8009d2c <I2C_Enable_IRQ+0x100>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d02d      	beq.n	8009cac <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009c54:	4a36      	ldr	r2, [pc, #216]	@ (8009d30 <I2C_Enable_IRQ+0x104>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d028      	beq.n	8009cac <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da03      	bge.n	8009c6a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009c68:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c6a:	887b      	ldrh	r3, [r7, #2]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d003      	beq.n	8009c7c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009c7a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c7c:	887b      	ldrh	r3, [r7, #2]
 8009c7e:	f003 0302 	and.w	r3, r3, #2
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009c8c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009c8e:	887b      	ldrh	r3, [r7, #2]
 8009c90:	2b10      	cmp	r3, #16
 8009c92:	d103      	bne.n	8009c9c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009c9a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009c9c:	887b      	ldrh	r3, [r7, #2]
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d133      	bne.n	8009d0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f043 0320 	orr.w	r3, r3, #32
 8009ca8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009caa:	e02e      	b.n	8009d0a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da03      	bge.n	8009cbc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009cba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009cbc:	887b      	ldrh	r3, [r7, #2]
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009ccc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009cce:	887b      	ldrh	r3, [r7, #2]
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009cde:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009ce0:	887b      	ldrh	r3, [r7, #2]
 8009ce2:	2b10      	cmp	r3, #16
 8009ce4:	d103      	bne.n	8009cee <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009cec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cee:	887b      	ldrh	r3, [r7, #2]
 8009cf0:	2b20      	cmp	r3, #32
 8009cf2:	d103      	bne.n	8009cfc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009cfa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009cfc:	887b      	ldrh	r3, [r7, #2]
 8009cfe:	2b40      	cmp	r3, #64	@ 0x40
 8009d00:	d103      	bne.n	8009d0a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d08:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	6819      	ldr	r1, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	601a      	str	r2, [r3, #0]
}
 8009d1a:	bf00      	nop
 8009d1c:	3714      	adds	r7, #20
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	08008143 	.word	0x08008143
 8009d2c:	08008589 	.word	0x08008589
 8009d30:	08008329 	.word	0x08008329

08009d34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009d40:	2300      	movs	r3, #0
 8009d42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d44:	887b      	ldrh	r3, [r7, #2]
 8009d46:	f003 0301 	and.w	r3, r3, #1
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00f      	beq.n	8009d6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009d54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d62:	2b28      	cmp	r3, #40	@ 0x28
 8009d64:	d003      	beq.n	8009d6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d6e:	887b      	ldrh	r3, [r7, #2]
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00f      	beq.n	8009d98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009d7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d8c:	2b28      	cmp	r3, #40	@ 0x28
 8009d8e:	d003      	beq.n	8009d98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009d98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da03      	bge.n	8009da8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009da6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009da8:	887b      	ldrh	r3, [r7, #2]
 8009daa:	2b10      	cmp	r3, #16
 8009dac:	d103      	bne.n	8009db6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009db4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009db6:	887b      	ldrh	r3, [r7, #2]
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d103      	bne.n	8009dc4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f043 0320 	orr.w	r3, r3, #32
 8009dc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009dc4:	887b      	ldrh	r3, [r7, #2]
 8009dc6:	2b40      	cmp	r3, #64	@ 0x40
 8009dc8:	d103      	bne.n	8009dd2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dd0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6819      	ldr	r1, [r3, #0]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	43da      	mvns	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	400a      	ands	r2, r1
 8009de2:	601a      	str	r2, [r3, #0]
}
 8009de4:	bf00      	nop
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b20      	cmp	r3, #32
 8009e04:	d138      	bne.n	8009e78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d101      	bne.n	8009e14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e10:	2302      	movs	r3, #2
 8009e12:	e032      	b.n	8009e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2224      	movs	r2, #36	@ 0x24
 8009e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 0201 	bic.w	r2, r2, #1
 8009e32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6819      	ldr	r1, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f042 0201 	orr.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2220      	movs	r2, #32
 8009e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	e000      	b.n	8009e7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e78:	2302      	movs	r3, #2
  }
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	370c      	adds	r7, #12
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	2b20      	cmp	r3, #32
 8009e9a:	d139      	bne.n	8009f10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e033      	b.n	8009f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2224      	movs	r2, #36	@ 0x24
 8009eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0201 	bic.w	r2, r2, #1
 8009ec8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ed8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	68fa      	ldr	r2, [r7, #12]
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68fa      	ldr	r2, [r7, #12]
 8009eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0201 	orr.w	r2, r2, #1
 8009efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	e000      	b.n	8009f12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f10:	2302      	movs	r3, #2
  }
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
	...

08009f20 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e070      	b.n	800a014 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d106      	bne.n	8009f4c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7f7 ff58 	bl	8001dfc <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0201 	bic.w	r2, r2, #1
 8009f72:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009f82:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009f92:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fa2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a19      	ldr	r2, [pc, #100]	@ (800a01c <HAL_JPEG_Init+0xfc>)
 8009fb8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4a18      	ldr	r2, [pc, #96]	@ (800a020 <HAL_JPEG_Init+0x100>)
 8009fbe:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 fccd 	bl	800a96c <JPEG_Set_HuffEnc_Mem>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d004      	beq.n	8009fe2 <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e018      	b.n	800a014 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009ff0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	0801a158 	.word	0x0801a158
 800a020:	0801a198 	.word	0x0801a198

0800a024 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <HAL_JPEG_GetInfo+0x16>
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e083      	b.n	800a146 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	f003 0303 	and.w	r3, r3, #3
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d103      	bne.n	800a054 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2210      	movs	r2, #16
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e017      	b.n	800a084 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	f003 0303 	and.w	r3, r3, #3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d103      	bne.n	800a06a <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	e00c      	b.n	800a084 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f003 0303 	and.w	r3, r3, #3
 800a074:	2b03      	cmp	r3, #3
 800a076:	d103      	bne.n	800a080 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2230      	movs	r2, #48	@ 0x30
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e001      	b.n	800a084 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e060      	b.n	800a146 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	0c1b      	lsrs	r3, r3, #16
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	0c1b      	lsrs	r3, r3, #16
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b10      	cmp	r3, #16
 800a0a6:	d003      	beq.n	800a0b0 <HAL_JPEG_GetInfo+0x8c>
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b30      	cmp	r3, #48	@ 0x30
 800a0ae:	d140      	bne.n	800a132 <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	691b      	ldr	r3, [r3, #16]
 800a0b6:	091b      	lsrs	r3, r3, #4
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	091b      	lsrs	r3, r3, #4
 800a0c6:	f003 030f 	and.w	r3, r3, #15
 800a0ca:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	091b      	lsrs	r3, r3, #4
 800a0d4:	f003 030f 	and.w	r3, r3, #15
 800a0d8:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d109      	bne.n	800a0f4 <HAL_JPEG_GetInfo+0xd0>
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d106      	bne.n	800a0f4 <HAL_JPEG_GetInfo+0xd0>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	605a      	str	r2, [r3, #4]
 800a0f2:	e01d      	b.n	800a130 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <HAL_JPEG_GetInfo+0xea>
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d106      	bne.n	800a10e <HAL_JPEG_GetInfo+0xea>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d103      	bne.n	800a10e <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2200      	movs	r2, #0
 800a10a:	605a      	str	r2, [r3, #4]
 800a10c:	e010      	b.n	800a130 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d109      	bne.n	800a128 <HAL_JPEG_GetInfo+0x104>
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <HAL_JPEG_GetInfo+0x104>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d103      	bne.n	800a128 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	2201      	movs	r2, #1
 800a124:	605a      	str	r2, [r3, #4]
 800a126:	e003      	b.n	800a130 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2200      	movs	r2, #0
 800a12c:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a12e:	e003      	b.n	800a138 <HAL_JPEG_GetInfo+0x114>
 800a130:	e002      	b.n	800a138 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2200      	movs	r2, #0
 800a136:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 fd09 	bl	800bb50 <JPEG_GetQuality>
 800a13e:	4602      	mov	r2, r0
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	60f8      	str	r0, [r7, #12]
 800a156:	60b9      	str	r1, [r7, #8]
 800a158:	607a      	str	r2, [r7, #4]
 800a15a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d005      	beq.n	800a16e <HAL_JPEG_Decode_DMA+0x20>
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <HAL_JPEG_Decode_DMA+0x20>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e04c      	b.n	800a20c <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d101      	bne.n	800a180 <HAL_JPEG_Decode_DMA+0x32>
 800a17c:	2302      	movs	r3, #2
 800a17e:	e045      	b.n	800a20c <HAL_JPEG_Decode_DMA+0xbe>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b01      	cmp	r3, #1
 800a192:	d134      	bne.n	800a1fe <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2204      	movs	r2, #4
 800a198:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a0:	f023 020f 	bic.w	r2, r3, #15
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ac:	f043 020e 	orr.w	r2, r3, #14
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	683a      	ldr	r2, [r7, #0]
 800a1be:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fe49 	bl	800ae70 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f001 f96a 	bl	800b4b8 <JPEG_DMA_StartProcess>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00f      	beq.n	800a20a <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2206      	movs	r2, #6
 800a1ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e006      	b.n	800a20c <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2200      	movs	r2, #0
 800a202:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800a206:	2302      	movs	r3, #2
 800a208:	e000      	b.n	800a20c <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a226:	f003 030c 	and.w	r3, r3, #12
 800a22a:	2b0c      	cmp	r3, #12
 800a22c:	d116      	bne.n	800a25c <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d005      	beq.n	800a244 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a23c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d033      	beq.n	800a2b6 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a252:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	655a      	str	r2, [r3, #84]	@ 0x54
 800a25a:	e02c      	b.n	800a2b6 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a260:	f003 030c 	and.w	r3, r3, #12
 800a264:	2b08      	cmp	r3, #8
 800a266:	d126      	bne.n	800a2b6 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d009      	beq.n	800a286 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a276:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f043 0306 	orr.w	r3, r3, #6
 800a284:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	f003 0302 	and.w	r3, r3, #2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d009      	beq.n	800a2a4 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a294:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800a2a2:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	43da      	mvns	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	400a      	ands	r2, r1
 800a2b4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3714      	adds	r7, #20
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800a2ce:	bf00      	nop
 800a2d0:	370c      	adds	r7, #12
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a312:	b2db      	uxtb	r3, r3
 800a314:	3b03      	subs	r3, #3
 800a316:	2b01      	cmp	r3, #1
 800a318:	d813      	bhi.n	800a342 <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a31e:	f003 030c 	and.w	r3, r3, #12
 800a322:	2b08      	cmp	r3, #8
 800a324:	d103      	bne.n	800a32e <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fe16 	bl	800af58 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800a32c:	e00b      	b.n	800a346 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a332:	f003 030c 	and.w	r3, r3, #12
 800a336:	2b0c      	cmp	r3, #12
 800a338:	d105      	bne.n	800a346 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f001 f956 	bl	800b5ec <JPEG_DMA_ContinueProcess>
      break;
 800a340:	e001      	b.n	800a346 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800a342:	bf00      	nop
 800a344:	e000      	b.n	800a348 <HAL_JPEG_IRQHandler+0x44>
      break;
 800a346:	bf00      	nop
  }
}
 800a348:	bf00      	nop
 800a34a:	3708      	adds	r7, #8
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a350:	b480      	push	{r7}
 800a352:	b08b      	sub	sp, #44	@ 0x2c
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800a362:	2300      	movs	r3, #0
 800a364:	61fb      	str	r3, [r7, #28]
 800a366:	e020      	b.n	800a3aa <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	4413      	add	r3, r2
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800a372:	6a3a      	ldr	r2, [r7, #32]
 800a374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a376:	4413      	add	r3, r2
 800a378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a37c:	d90f      	bls.n	800a39e <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e055      	b.n	800a42e <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	b2da      	uxtb	r2, r3
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	440b      	add	r3, r1
 800a38c:	3201      	adds	r2, #1
 800a38e:	b2d2      	uxtb	r2, r2
 800a390:	701a      	strb	r2, [r3, #0]
      p++;
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	3301      	adds	r3, #1
 800a396:	623b      	str	r3, [r7, #32]
      i--;
 800a398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39a:	3b01      	subs	r3, #1
 800a39c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800a39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1ee      	bne.n	800a382 <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800a3a4:	69fb      	ldr	r3, [r7, #28]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	61fb      	str	r3, [r7, #28]
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	2b0f      	cmp	r3, #15
 800a3ae:	d9db      	bls.n	800a368 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6a3a      	ldr	r2, [r7, #32]
 800a3be:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	617b      	str	r3, [r7, #20]
  p = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800a3ce:	e027      	b.n	800a420 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800a3d0:	6a3b      	ldr	r3, [r7, #32]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	69ba      	ldr	r2, [r7, #24]
 800a3da:	601a      	str	r2, [r3, #0]
      p++;
 800a3dc:	6a3b      	ldr	r3, [r7, #32]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	623b      	str	r3, [r7, #32]
      code++;
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d0eb      	beq.n	800a3d0 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2b1f      	cmp	r3, #31
 800a3fc:	d901      	bls.n	800a402 <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e015      	b.n	800a42e <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a402:	2201      	movs	r2, #1
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	69ba      	ldr	r2, [r7, #24]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d301      	bcc.n	800a414 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e00c      	b.n	800a42e <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	61bb      	str	r3, [r7, #24]
    si++;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	3301      	adds	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800a420:	68ba      	ldr	r2, [r7, #8]
 800a422:	6a3b      	ldr	r3, [r7, #32]
 800a424:	4413      	add	r3, r2
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1dd      	bne.n	800a3e8 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800a42c:	2300      	movs	r3, #0
}
 800a42e:	4618      	mov	r0, r3
 800a430:	372c      	adds	r7, #44	@ 0x2c
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr

0800a43a <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800a440:	af00      	add	r7, sp, #0
 800a442:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a446:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a44a:	6018      	str	r0, [r3, #0]
 800a44c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a450:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a454:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a456:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a45a:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a45e:	6818      	ldr	r0, [r3, #0]
 800a460:	f107 0308 	add.w	r3, r7, #8
 800a464:	f107 020c 	add.w	r2, r7, #12
 800a468:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800a46c:	f7ff ff70 	bl	800a350 <JPEG_Bits_To_SizeCodes>
 800a470:	4603      	mov	r3, r0
 800a472:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800a476:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a47e:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800a482:	e075      	b.n	800a570 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800a48a:	e067      	b.n	800a55c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800a48c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a490:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a49a:	4413      	add	r3, r2
 800a49c:	3310      	adds	r3, #16
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800a4a4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d103      	bne.n	800a4b4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800a4ac:	23a0      	movs	r3, #160	@ 0xa0
 800a4ae:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a4b2:	e021      	b.n	800a4f8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a4b4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4b8:	2bf0      	cmp	r3, #240	@ 0xf0
 800a4ba:	d103      	bne.n	800a4c4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800a4bc:	23a1      	movs	r3, #161	@ 0xa1
 800a4be:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a4c2:	e019      	b.n	800a4f8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800a4c4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4c8:	091b      	lsrs	r3, r3, #4
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800a4d2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800a4de:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a4f0:	4413      	add	r3, r2
 800a4f2:	3b01      	subs	r3, #1
 800a4f4:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a4f8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4fc:	2ba1      	cmp	r3, #161	@ 0xa1
 800a4fe:	d901      	bls.n	800a504 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a500:	2301      	movs	r3, #1
 800a502:	e035      	b.n	800a570 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a504:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a508:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a50c:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a514:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a518:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a51c:	6819      	ldr	r1, [r3, #0]
 800a51e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a522:	3328      	adds	r3, #40	@ 0x28
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	440b      	add	r3, r1
 800a528:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a52a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a52e:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800a532:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a536:	4413      	add	r3, r2
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	b2d9      	uxtb	r1, r3
 800a53e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a542:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a54c:	4413      	add	r3, r2
 800a54e:	460a      	mov	r2, r1
 800a550:	701a      	strb	r2, [r3, #0]
      k++;
 800a552:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a556:	3301      	adds	r3, #1
 800a558:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800a55c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a560:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d38e      	bcc.n	800a48c <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800a580:	af00      	add	r7, sp, #0
 800a582:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a586:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a58a:	6018      	str	r0, [r3, #0]
 800a58c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a590:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a594:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a596:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a59a:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800a5a4:	f107 0208 	add.w	r2, r7, #8
 800a5a8:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800a5ac:	f7ff fed0 	bl	800a350 <JPEG_Bits_To_SizeCodes>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800a5b6:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a5be:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a5c2:	e048      	b.n	800a656 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800a5ca:	e03d      	b.n	800a648 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800a5cc:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a5d0:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a5da:	4413      	add	r3, r2
 800a5dc:	3310      	adds	r3, #16
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a5e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a5e8:	2b0b      	cmp	r3, #11
 800a5ea:	d901      	bls.n	800a5f0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e032      	b.n	800a656 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a5f0:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a5f4:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800a5f8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a5fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a600:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a604:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a608:	6819      	ldr	r1, [r3, #0]
 800a60a:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a60e:	3302      	adds	r3, #2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	440b      	add	r3, r1
 800a614:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a616:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a61a:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800a61e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a622:	4413      	add	r3, r2
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	3b01      	subs	r3, #1
 800a628:	b2d9      	uxtb	r1, r3
 800a62a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a62e:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a638:	4413      	add	r3, r2
 800a63a:	460a      	mov	r2, r1
 800a63c:	701a      	strb	r2, [r3, #0]
      k++;
 800a63e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a642:	3301      	adds	r3, #1
 800a644:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800a648:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800a64c:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a650:	429a      	cmp	r2, r3
 800a652:	d3bb      	bcc.n	800a5cc <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b09a      	sub	sp, #104	@ 0x68
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a674:	687a      	ldr	r2, [r7, #4]
 800a676:	429a      	cmp	r2, r3
 800a678:	d106      	bne.n	800a688 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a682:	3318      	adds	r3, #24
 800a684:	663b      	str	r3, [r7, #96]	@ 0x60
 800a686:	e00f      	b.n	800a6a8 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	429a      	cmp	r2, r3
 800a694:	d106      	bne.n	800a6a4 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a69e:	3318      	adds	r3, #24
 800a6a0:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6a2:	e001      	b.n	800a6a8 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e059      	b.n	800a75c <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d055      	beq.n	800a75a <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a6ae:	f107 0314 	add.w	r3, r7, #20
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68b8      	ldr	r0, [r7, #8]
 800a6b6:	f7ff ff60 	bl	800a57a <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800a6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800a6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6cc:	e046      	b.n	800a75c <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800a6ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a6d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6d4:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a6d8:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a6da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6dc:	3304      	adds	r3, #4
 800a6de:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a6e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6e2:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a6e6:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800a6e8:	230c      	movs	r3, #12
 800a6ea:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800a6ec:	e032      	b.n	800a754 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800a6ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800a6f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6f6:	3b04      	subs	r3, #4
 800a6f8:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a6fa:	f107 0214 	add.w	r2, r7, #20
 800a6fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a700:	4413      	add	r3, r2
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	021b      	lsls	r3, r3, #8
 800a706:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a70a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a70c:	3302      	adds	r3, #2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	3368      	adds	r3, #104	@ 0x68
 800a712:	443b      	add	r3, r7
 800a714:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	4313      	orrs	r3, r2
 800a71c:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800a71e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a720:	3b01      	subs	r3, #1
 800a722:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a724:	f107 0214 	add.w	r2, r7, #20
 800a728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a72a:	4413      	add	r3, r2
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	021b      	lsls	r3, r3, #8
 800a730:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a736:	3302      	adds	r3, #2
 800a738:	009b      	lsls	r3, r3, #2
 800a73a:	3368      	adds	r3, #104	@ 0x68
 800a73c:	443b      	add	r3, r7
 800a73e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a742:	b2db      	uxtb	r3, r3
 800a744:	4313      	orrs	r3, r2
 800a746:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a74a:	041a      	lsls	r2, r3, #16
 800a74c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a74e:	431a      	orrs	r2, r3
 800a750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a752:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a756:	2b01      	cmp	r3, #1
 800a758:	d8c9      	bhi.n	800a6ee <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3768      	adds	r7, #104	@ 0x68
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a770:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a774:	6018      	str	r0, [r3, #0]
 800a776:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a77a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a77e:	6019      	str	r1, [r3, #0]
 800a780:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a784:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800a788:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a78a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a78e:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a79a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a79e:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a7a2:	6812      	ldr	r2, [r2, #0]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d10c      	bne.n	800a7c2 <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a7a8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7ac:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7b8:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a7bc:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a7c0:	e01d      	b.n	800a7fe <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a7c2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7c6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a7d2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a7d6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d10c      	bne.n	800a7fa <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a7e0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7e4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a7f0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a7f4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a7f8:	e001      	b.n	800a7fe <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e0a8      	b.n	800a950 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800a7fe:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a802:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 80a0 	beq.w	800a94e <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800a80e:	f107 0214 	add.w	r2, r7, #20
 800a812:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a816:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a81a:	4611      	mov	r1, r2
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	f7ff fe0c 	bl	800a43a <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800a822:	4603      	mov	r3, r0
 800a824:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800a828:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800a830:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a834:	e08c      	b.n	800a950 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800a836:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a83a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a83e:	2300      	movs	r3, #0
 800a840:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a844:	e00e      	b.n	800a864 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800a846:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a84a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a84e:	601a      	str	r2, [r3, #0]
      addressDef++;
 800a850:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a854:	3304      	adds	r3, #4
 800a856:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a85a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a85e:	3301      	adds	r3, #1
 800a860:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a864:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d9ec      	bls.n	800a846 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800a86c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a870:	4a3a      	ldr	r2, [pc, #232]	@ (800a95c <JPEG_Set_HuffAC_Mem+0x1f8>)
 800a872:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a874:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a878:	3304      	adds	r3, #4
 800a87a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800a87e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a882:	4a37      	ldr	r2, [pc, #220]	@ (800a960 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800a884:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a886:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a88a:	3304      	adds	r3, #4
 800a88c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800a890:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a894:	4a33      	ldr	r2, [pc, #204]	@ (800a964 <JPEG_Set_HuffAC_Mem+0x200>)
 800a896:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a898:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a89c:	3304      	adds	r3, #4
 800a89e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800a8a2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8a6:	4a30      	ldr	r2, [pc, #192]	@ (800a968 <JPEG_Set_HuffAC_Mem+0x204>)
 800a8a8:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800a8aa:	23a2      	movs	r3, #162	@ 0xa2
 800a8ac:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800a8b0:	e049      	b.n	800a946 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800a8b2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800a8bc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a8c0:	3b04      	subs	r3, #4
 800a8c2:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a8c6:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a8ca:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a8ce:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a8d2:	4413      	add	r3, r2
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a8dc:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a8e0:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a8e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a8e8:	3328      	adds	r3, #40	@ 0x28
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	440b      	add	r3, r1
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800a8f8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a902:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a906:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a90a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a90e:	4413      	add	r3, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	021b      	lsls	r3, r3, #8
 800a914:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a918:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a91c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a920:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a924:	3328      	adds	r3, #40	@ 0x28
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	440b      	add	r3, r1
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a934:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800a938:	041a      	lsls	r2, r3, #16
 800a93a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a93e:	431a      	orrs	r2, r3
 800a940:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a944:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a946:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d8b1      	bhi.n	800a8b2 <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	0fd10fd0 	.word	0x0fd10fd0
 800a960:	0fd30fd2 	.word	0x0fd30fd2
 800a964:	0fd50fd4 	.word	0x0fd50fd4
 800a968:	0fd70fd6 	.word	0x0fd70fd6

0800a96c <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f84d 	bl	800aa14 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a982:	461a      	mov	r2, r3
 800a984:	491f      	ldr	r1, [pc, #124]	@ (800aa04 <JPEG_Set_HuffEnc_Mem+0x98>)
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff feec 	bl	800a764 <JPEG_Set_HuffAC_Mem>
 800a98c:	4603      	mov	r3, r0
 800a98e:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a990:	7bfb      	ldrb	r3, [r7, #15]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	e030      	b.n	800a9fc <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4918      	ldr	r1, [pc, #96]	@ (800aa08 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff fedc 	bl	800a764 <JPEG_Set_HuffAC_Mem>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	e020      	b.n	800a9fc <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4911      	ldr	r1, [pc, #68]	@ (800aa0c <JPEG_Set_HuffEnc_Mem+0xa0>)
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7ff fe4a 	bl	800a660 <JPEG_Set_HuffDC_Mem>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	e010      	b.n	800a9fc <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	490a      	ldr	r1, [pc, #40]	@ (800aa10 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f7ff fe3a 	bl	800a660 <JPEG_Set_HuffDC_Mem>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800a9f6:	7bfb      	ldrb	r3, [r7, #15]
 800a9f8:	e000      	b.n	800a9fc <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	08019fb0 	.word	0x08019fb0
 800aa08:	0801a064 	.word	0x0801a064
 800aa0c:	08019f78 	.word	0x08019f78
 800aa10:	08019f94 	.word	0x08019f94

0800aa14 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b08b      	sub	sp, #44	@ 0x2c
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800aa1c:	4b80      	ldr	r3, [pc, #512]	@ (800ac20 <JPEG_Set_Huff_DHTMem+0x20c>)
 800aa1e:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800aa20:	4b80      	ldr	r3, [pc, #512]	@ (800ac24 <JPEG_Set_Huff_DHTMem+0x210>)
 800aa22:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800aa24:	4b80      	ldr	r3, [pc, #512]	@ (800ac28 <JPEG_Set_Huff_DHTMem+0x214>)
 800aa26:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800aa28:	4b80      	ldr	r3, [pc, #512]	@ (800ac2c <JPEG_Set_Huff_DHTMem+0x218>)
 800aa2a:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aa34:	330c      	adds	r3, #12
 800aa36:	623b      	str	r3, [r7, #32]
  index = 16;
 800aa38:	2310      	movs	r3, #16
 800aa3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aa3c:	e01d      	b.n	800aa7a <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa40:	3b01      	subs	r3, #1
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	5cd3      	ldrb	r3, [r2, r3]
 800aa46:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800aa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa4a:	3b02      	subs	r3, #2
 800aa4c:	6979      	ldr	r1, [r7, #20]
 800aa4e:	5ccb      	ldrb	r3, [r1, r3]
 800aa50:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aa52:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	3b03      	subs	r3, #3
 800aa58:	6979      	ldr	r1, [r7, #20]
 800aa5a:	5ccb      	ldrb	r3, [r1, r3]
 800aa5c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800aa5e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800aa60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa62:	3a04      	subs	r2, #4
 800aa64:	6979      	ldr	r1, [r7, #20]
 800aa66:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800aa68:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aa6a:	6a3b      	ldr	r3, [r7, #32]
 800aa6c:	601a      	str	r2, [r3, #0]
    address--;
 800aa6e:	6a3b      	ldr	r3, [r7, #32]
 800aa70:	3b04      	subs	r3, #4
 800aa72:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800aa74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa76:	3b04      	subs	r3, #4
 800aa78:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aa7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7c:	2b03      	cmp	r3, #3
 800aa7e:	d8de      	bhi.n	800aa3e <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aa88:	3318      	adds	r3, #24
 800aa8a:	623b      	str	r3, [r7, #32]
  index = 12;
 800aa8c:	230c      	movs	r3, #12
 800aa8e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aa90:	e021      	b.n	800aad6 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	3b01      	subs	r3, #1
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	4413      	add	r3, r2
 800aa9a:	7c1b      	ldrb	r3, [r3, #16]
 800aa9c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa0:	3b02      	subs	r3, #2
 800aaa2:	6979      	ldr	r1, [r7, #20]
 800aaa4:	440b      	add	r3, r1
 800aaa6:	7c1b      	ldrb	r3, [r3, #16]
 800aaa8:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aaaa:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	3b03      	subs	r3, #3
 800aab0:	6979      	ldr	r1, [r7, #20]
 800aab2:	440b      	add	r3, r1
 800aab4:	7c1b      	ldrb	r3, [r3, #16]
 800aab6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800aab8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800aaba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aabc:	3a04      	subs	r2, #4
 800aabe:	6979      	ldr	r1, [r7, #20]
 800aac0:	440a      	add	r2, r1
 800aac2:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800aac4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	601a      	str	r2, [r3, #0]
    address--;
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	3b04      	subs	r3, #4
 800aace:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad2:	3b04      	subs	r3, #4
 800aad4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d8da      	bhi.n	800aa92 <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aae4:	3328      	adds	r3, #40	@ 0x28
 800aae6:	623b      	str	r3, [r7, #32]
  index = 16;
 800aae8:	2310      	movs	r3, #16
 800aaea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aaec:	e01d      	b.n	800ab2a <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aaee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	69fa      	ldr	r2, [r7, #28]
 800aaf4:	5cd3      	ldrb	r3, [r2, r3]
 800aaf6:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	3b02      	subs	r3, #2
 800aafc:	69f9      	ldr	r1, [r7, #28]
 800aafe:	5ccb      	ldrb	r3, [r1, r3]
 800ab00:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab02:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ab04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab06:	3b03      	subs	r3, #3
 800ab08:	69f9      	ldr	r1, [r7, #28]
 800ab0a:	5ccb      	ldrb	r3, [r1, r3]
 800ab0c:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab0e:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800ab10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab12:	3a04      	subs	r2, #4
 800ab14:	69f9      	ldr	r1, [r7, #28]
 800ab16:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ab18:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	601a      	str	r2, [r3, #0]
    address--;
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	3b04      	subs	r3, #4
 800ab22:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	3b04      	subs	r3, #4
 800ab28:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d8de      	bhi.n	800aaee <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ab38:	33cc      	adds	r3, #204	@ 0xcc
 800ab3a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800ab3c:	6a3b      	ldr	r3, [r7, #32]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	4b3b      	ldr	r3, [pc, #236]	@ (800ac30 <JPEG_Set_Huff_DHTMem+0x21c>)
 800ab42:	4013      	ands	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800ab4c:	021a      	lsls	r2, r3, #8
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	3b04      	subs	r3, #4
 800ab66:	623b      	str	r3, [r7, #32]
  index = 160;
 800ab68:	23a0      	movs	r3, #160	@ 0xa0
 800ab6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab6c:	e021      	b.n	800abb2 <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab70:	3b01      	subs	r3, #1
 800ab72:	69fa      	ldr	r2, [r7, #28]
 800ab74:	4413      	add	r3, r2
 800ab76:	7c1b      	ldrb	r3, [r3, #16]
 800ab78:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800ab7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7c:	3b02      	subs	r3, #2
 800ab7e:	69f9      	ldr	r1, [r7, #28]
 800ab80:	440b      	add	r3, r1
 800ab82:	7c1b      	ldrb	r3, [r3, #16]
 800ab84:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ab86:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800ab88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab8a:	3b03      	subs	r3, #3
 800ab8c:	69f9      	ldr	r1, [r7, #28]
 800ab8e:	440b      	add	r3, r1
 800ab90:	7c1b      	ldrb	r3, [r3, #16]
 800ab92:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800ab94:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800ab96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab98:	3a04      	subs	r2, #4
 800ab9a:	69f9      	ldr	r1, [r7, #28]
 800ab9c:	440a      	add	r2, r1
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800aba0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aba2:	6a3b      	ldr	r3, [r7, #32]
 800aba4:	601a      	str	r2, [r3, #0]
    address--;
 800aba6:	6a3b      	ldr	r3, [r7, #32]
 800aba8:	3b04      	subs	r3, #4
 800abaa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800abac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abae:	3b04      	subs	r3, #4
 800abb0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d8da      	bhi.n	800ab6e <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800abc0:	33cc      	adds	r3, #204	@ 0xcc
 800abc2:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800abc4:	6a3b      	ldr	r3, [r7, #32]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	061a      	lsls	r2, r3, #24
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	431a      	orrs	r2, r3
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	781b      	ldrb	r3, [r3, #0]
 800abda:	041b      	lsls	r3, r3, #16
 800abdc:	4313      	orrs	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]
  *address = value;
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800abee:	33dc      	adds	r3, #220	@ 0xdc
 800abf0:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	4b0e      	ldr	r3, [pc, #56]	@ (800ac30 <JPEG_Set_Huff_DHTMem+0x21c>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	7bdb      	ldrb	r3, [r3, #15]
 800ac00:	021a      	lsls	r2, r3, #8
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	7b92      	ldrb	r2, [r2, #14]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ac0e:	6a3b      	ldr	r3, [r7, #32]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	3b04      	subs	r3, #4
 800ac18:	623b      	str	r3, [r7, #32]
  index = 12;
 800ac1a:	230c      	movs	r3, #12
 800ac1c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ac1e:	e027      	b.n	800ac70 <JPEG_Set_Huff_DHTMem+0x25c>
 800ac20:	08019fb0 	.word	0x08019fb0
 800ac24:	0801a064 	.word	0x0801a064
 800ac28:	08019f78 	.word	0x08019f78
 800ac2c:	08019f94 	.word	0x08019f94
 800ac30:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac36:	3301      	adds	r3, #1
 800ac38:	693a      	ldr	r2, [r7, #16]
 800ac3a:	5cd3      	ldrb	r3, [r2, r3]
 800ac3c:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800ac3e:	6939      	ldr	r1, [r7, #16]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	440b      	add	r3, r1
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac48:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	6939      	ldr	r1, [r7, #16]
 800ac50:	5ccb      	ldrb	r3, [r1, r3]
 800ac52:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800ac54:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800ac56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac58:	3a02      	subs	r2, #2
 800ac5a:	6939      	ldr	r1, [r7, #16]
 800ac5c:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ac5e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac60:	6a3b      	ldr	r3, [r7, #32]
 800ac62:	601a      	str	r2, [r3, #0]
    address--;
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	3b04      	subs	r3, #4
 800ac68:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	3b04      	subs	r3, #4
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	d8de      	bhi.n	800ac34 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ac7e:	33dc      	adds	r3, #220	@ 0xdc
 800ac80:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	7c5b      	ldrb	r3, [r3, #17]
 800ac8e:	061a      	lsls	r2, r3, #24
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	431a      	orrs	r2, r3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	7c1b      	ldrb	r3, [r3, #16]
 800ac98:	041b      	lsls	r3, r3, #16
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ac9e:	6a3b      	ldr	r3, [r7, #32]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800acac:	33e8      	adds	r3, #232	@ 0xe8
 800acae:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	4b6d      	ldr	r3, [pc, #436]	@ (800ae6c <JPEG_Set_Huff_DHTMem+0x458>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	7edb      	ldrb	r3, [r3, #27]
 800acbe:	021a      	lsls	r2, r3, #8
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	693a      	ldr	r2, [r7, #16]
 800acc6:	7e92      	ldrb	r2, [r2, #26]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
  *address = value;
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	68fa      	ldr	r2, [r7, #12]
 800acd0:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	3b04      	subs	r3, #4
 800acd6:	623b      	str	r3, [r7, #32]
  index = 8;
 800acd8:	2308      	movs	r3, #8
 800acda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800acdc:	e021      	b.n	800ad22 <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	3301      	adds	r3, #1
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	4413      	add	r3, r2
 800ace6:	7c1b      	ldrb	r3, [r3, #16]
 800ace8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800acea:	6939      	ldr	r1, [r7, #16]
 800acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acee:	440b      	add	r3, r1
 800acf0:	3310      	adds	r3, #16
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800acf6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	3b01      	subs	r3, #1
 800acfc:	6939      	ldr	r1, [r7, #16]
 800acfe:	440b      	add	r3, r1
 800ad00:	7c1b      	ldrb	r3, [r3, #16]
 800ad02:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800ad04:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800ad06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad08:	3a02      	subs	r2, #2
 800ad0a:	6939      	ldr	r1, [r7, #16]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ad10:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	601a      	str	r2, [r3, #0]
    address--;
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	3b04      	subs	r3, #4
 800ad1a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	3b04      	subs	r3, #4
 800ad20:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d8da      	bhi.n	800acde <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ad30:	33e8      	adds	r3, #232	@ 0xe8
 800ad32:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	785b      	ldrb	r3, [r3, #1]
 800ad40:	061a      	lsls	r2, r3, #24
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	431a      	orrs	r2, r3
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	041b      	lsls	r3, r3, #16
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	68fa      	ldr	r2, [r7, #12]
 800ad54:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ad5e:	33f8      	adds	r3, #248	@ 0xf8
 800ad60:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	4b41      	ldr	r3, [pc, #260]	@ (800ae6c <JPEG_Set_Huff_DHTMem+0x458>)
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	7bdb      	ldrb	r3, [r3, #15]
 800ad70:	021a      	lsls	r2, r3, #8
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4313      	orrs	r3, r2
 800ad76:	69ba      	ldr	r2, [r7, #24]
 800ad78:	7b92      	ldrb	r2, [r2, #14]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	68fa      	ldr	r2, [r7, #12]
 800ad82:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800ad84:	6a3b      	ldr	r3, [r7, #32]
 800ad86:	3b04      	subs	r3, #4
 800ad88:	623b      	str	r3, [r7, #32]
  index = 12;
 800ad8a:	230c      	movs	r3, #12
 800ad8c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ad8e:	e01d      	b.n	800adcc <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ad90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad92:	3301      	adds	r3, #1
 800ad94:	69ba      	ldr	r2, [r7, #24]
 800ad96:	5cd3      	ldrb	r3, [r2, r3]
 800ad98:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800ad9a:	69b9      	ldr	r1, [r7, #24]
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9e:	440b      	add	r3, r1
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ada4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ada6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada8:	3b01      	subs	r3, #1
 800adaa:	69b9      	ldr	r1, [r7, #24]
 800adac:	5ccb      	ldrb	r3, [r1, r3]
 800adae:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800adb0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800adb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adb4:	3a02      	subs	r2, #2
 800adb6:	69b9      	ldr	r1, [r7, #24]
 800adb8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800adba:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	601a      	str	r2, [r3, #0]
    address--;
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	3b04      	subs	r3, #4
 800adc4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	3b04      	subs	r3, #4
 800adca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800adcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adce:	2b03      	cmp	r3, #3
 800add0:	d8de      	bhi.n	800ad90 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800adda:	33f8      	adds	r3, #248	@ 0xf8
 800addc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	7c5b      	ldrb	r3, [r3, #17]
 800adea:	061a      	lsls	r2, r3, #24
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	431a      	orrs	r2, r3
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	7c1b      	ldrb	r3, [r3, #16]
 800adf4:	041b      	lsls	r3, r3, #16
 800adf6:	4313      	orrs	r3, r2
 800adf8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ae08:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ae0c:	623b      	str	r3, [r7, #32]
  index = 160;
 800ae0e:	23a0      	movs	r3, #160	@ 0xa0
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ae12:	e021      	b.n	800ae58 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	3301      	adds	r3, #1
 800ae18:	69ba      	ldr	r2, [r7, #24]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	7c1b      	ldrb	r3, [r3, #16]
 800ae1e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ae20:	69b9      	ldr	r1, [r7, #24]
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	440b      	add	r3, r1
 800ae26:	3310      	adds	r3, #16
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ae2c:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae30:	3b01      	subs	r3, #1
 800ae32:	69b9      	ldr	r1, [r7, #24]
 800ae34:	440b      	add	r3, r1
 800ae36:	7c1b      	ldrb	r3, [r3, #16]
 800ae38:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ae3a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800ae3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae3e:	3a02      	subs	r2, #2
 800ae40:	69b9      	ldr	r1, [r7, #24]
 800ae42:	440a      	add	r2, r1
 800ae44:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ae46:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	601a      	str	r2, [r3, #0]
    address--;
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	3b04      	subs	r3, #4
 800ae50:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ae52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae54:	3b04      	subs	r3, #4
 800ae56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d8da      	bhi.n	800ae14 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800ae5e:	bf00      	nop
 800ae60:	bf00      	nop
 800ae62:	372c      	adds	r7, #44	@ 0x2c
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	ffff0000 	.word	0xffff0000

0800ae70 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae88:	f003 0303 	and.w	r3, r3, #3
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d108      	bne.n	800aea2 <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685a      	ldr	r2, [r3, #4]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0208 	orr.w	r2, r2, #8
 800ae9e:	605a      	str	r2, [r3, #4]
 800aea0:	e007      	b.n	800aeb2 <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f022 0208 	bic.w	r2, r2, #8
 800aeb0:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f022 0201 	bic.w	r2, r2, #1
 800aec0:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aed0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aee0:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aef0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af00:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f042 0201 	orr.w	r2, r2, #1
 800af10:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af16:	f003 030c 	and.w	r3, r3, #12
 800af1a:	2b08      	cmp	r3, #8
 800af1c:	d108      	bne.n	800af30 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800af2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800af2e:	e00d      	b.n	800af4c <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af34:	f003 030c 	and.w	r3, r3, #12
 800af38:	2b0c      	cmp	r3, #12
 800af3a:	d107      	bne.n	800af4c <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af64:	f003 0303 	and.w	r3, r3, #3
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d125      	bne.n	800afb8 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af76:	2b00      	cmp	r3, #0
 800af78:	d01e      	beq.n	800afb8 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	3304      	adds	r3, #4
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff f84f 	bl	800a024 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3304      	adds	r3, #4
 800af90:	4619      	mov	r1, r3
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f7ff f996 	bl	800a2c4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afa6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afb6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afbc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d116      	bne.n	800aff2 <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afca:	f003 0302 	and.w	r3, r3, #2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800afd2:	2108      	movs	r1, #8
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 f988 	bl	800b2ea <JPEG_ReadInputData>
 800afda:	e00a      	b.n	800aff2 <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800afea:	2101      	movs	r1, #1
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f97c 	bl	800b2ea <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d116      	bne.n	800b02c <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b004:	f003 0308 	and.w	r3, r3, #8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800b00c:	2108      	movs	r1, #8
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f864 	bl	800b0dc <JPEG_StoreOutputData>
 800b014:	e00a      	b.n	800b02c <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b01c:	f003 0310 	and.w	r3, r3, #16
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800b024:	2101      	movs	r1, #1
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f858 	bl	800b0dc <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b036:	2b20      	cmp	r3, #32
 800b038:	d14b      	bne.n	800b0d2 <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f022 0201 	bic.w	r2, r2, #1
 800b048:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b04e:	f003 030c 	and.w	r3, r3, #12
 800b052:	2b08      	cmp	r3, #8
 800b054:	d107      	bne.n	800b066 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b064:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b074:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00a      	beq.n	800b094 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	69d9      	ldr	r1, [r3, #28]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	461a      	mov	r2, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7f6 fa63 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2200      	movs	r2, #0
 800b092:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b098:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b09e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f003 0303 	and.w	r3, r3, #3
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	d103      	bne.n	800b0c8 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7f6 fa19 	bl	80014f8 <HAL_JPEG_DecodeCpltCallback>
 800b0c6:	e002      	b.n	800b0ce <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	f7ff f906 	bl	800a2da <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e000      	b.n	800b0d4 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d34b      	bcc.n	800b190 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	617b      	str	r3, [r7, #20]
 800b0fc:	e031      	b.n	800b162 <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b104:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	69da      	ldr	r2, [r3, #28]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b10e:	4413      	add	r3, r2
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	b2d2      	uxtb	r2, r2
 800b114:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	0a19      	lsrs	r1, r3, #8
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	69da      	ldr	r2, [r3, #28]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b122:	3301      	adds	r3, #1
 800b124:	4413      	add	r3, r2
 800b126:	b2ca      	uxtb	r2, r1
 800b128:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	0c19      	lsrs	r1, r3, #16
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	69da      	ldr	r2, [r3, #28]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b136:	3302      	adds	r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	b2ca      	uxtb	r2, r1
 800b13c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	0e19      	lsrs	r1, r3, #24
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b14a:	3303      	adds	r3, #3
 800b14c:	4413      	add	r3, r2
 800b14e:	b2ca      	uxtb	r2, r1
 800b150:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b156:	1d1a      	adds	r2, r3, #4
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	3301      	adds	r3, #1
 800b160:	617b      	str	r3, [r7, #20]
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d3c9      	bcc.n	800b0fe <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b172:	429a      	cmp	r2, r3
 800b174:	f040 80b5 	bne.w	800b2e2 <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	69d9      	ldr	r1, [r3, #28]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b180:	461a      	mov	r2, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f7f6 f9e6 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800b18e:	e0a8      	b.n	800b2e2 <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b198:	429a      	cmp	r2, r3
 800b19a:	f240 80a2 	bls.w	800b2e2 <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	089b      	lsrs	r3, r3, #2
 800b1aa:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	e031      	b.n	800b216 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1b8:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	69da      	ldr	r2, [r3, #28]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c2:	4413      	add	r3, r2
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	b2d2      	uxtb	r2, r2
 800b1c8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	0a19      	lsrs	r1, r3, #8
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69da      	ldr	r2, [r3, #28]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	b2ca      	uxtb	r2, r1
 800b1dc:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	0c19      	lsrs	r1, r3, #16
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	69da      	ldr	r2, [r3, #28]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ea:	3302      	adds	r3, #2
 800b1ec:	4413      	add	r3, r2
 800b1ee:	b2ca      	uxtb	r2, r1
 800b1f0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	0e19      	lsrs	r1, r3, #24
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69da      	ldr	r2, [r3, #28]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fe:	3303      	adds	r3, #3
 800b200:	4413      	add	r3, r2
 800b202:	b2ca      	uxtb	r2, r1
 800b204:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20a:	1d1a      	adds	r2, r3, #4
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	3301      	adds	r3, #1
 800b214:	617b      	str	r3, [r7, #20]
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d3c9      	bcc.n	800b1b2 <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b226:	429a      	cmp	r2, r3
 800b228:	d10b      	bne.n	800b242 <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	69d9      	ldr	r1, [r3, #28]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b232:	461a      	mov	r2, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7f6 f98d 	bl	8001554 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2200      	movs	r2, #0
 800b23e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b240:	e04f      	b.n	800b2e2 <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b254:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800b256:	2300      	movs	r3, #0
 800b258:	617b      	str	r3, [r7, #20]
 800b25a:	e015      	b.n	800b288 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	f003 0303 	and.w	r3, r3, #3
 800b262:	00db      	lsls	r3, r3, #3
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	fa22 f103 	lsr.w	r1, r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	69da      	ldr	r2, [r3, #28]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	4413      	add	r3, r2
 800b274:	b2ca      	uxtb	r2, r1
 800b276:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	3301      	adds	r3, #1
 800b286:	617b      	str	r3, [r7, #20]
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d3e5      	bcc.n	800b25c <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69d9      	ldr	r1, [r3, #28]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b298:	461a      	mov	r2, r3
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f7f6 f95a 	bl	8001554 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f1c3 0304 	rsb	r3, r3, #4
 800b2ac:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	617b      	str	r3, [r7, #20]
 800b2b2:	e013      	b.n	800b2dc <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	00db      	lsls	r3, r3, #3
 800b2b8:	68ba      	ldr	r2, [r7, #8]
 800b2ba:	fa22 f103 	lsr.w	r1, r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69da      	ldr	r2, [r3, #28]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c6:	4413      	add	r3, r2
 800b2c8:	b2ca      	uxtb	r2, r1
 800b2ca:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d9e8      	bls.n	800b2b4 <JPEG_StoreOutputData+0x1d8>
}
 800b2e2:	bf00      	nop
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b088      	sub	sp, #32
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <JPEG_ReadInputData+0x1c>
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d104      	bne.n	800b310 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800b306:	2101      	movs	r1, #1
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7fe ff83 	bl	800a214 <HAL_JPEG_Pause>
 800b30e:	e028      	b.n	800b362 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6a1b      	ldr	r3, [r3, #32]
 800b318:	429a      	cmp	r2, r3
 800b31a:	d906      	bls.n	800b32a <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	e01b      	b.n	800b362 <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	429a      	cmp	r2, r3
 800b334:	d115      	bne.n	800b362 <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6a1b      	ldr	r3, [r3, #32]
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7fe ffd6 	bl	800a2ee <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b346:	2b04      	cmp	r3, #4
 800b348:	d905      	bls.n	800b356 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34e:	f023 0203 	bic.w	r2, r3, #3
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b360:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f040 809f 	bne.w	800b4ae <JPEG_ReadInputData+0x1c4>
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 809b 	beq.w	800b4ae <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	089b      	lsrs	r3, r3, #2
 800b37c:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d335      	bcc.n	800b3f2 <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800b386:	2300      	movs	r3, #0
 800b388:	61bb      	str	r3, [r7, #24]
 800b38a:	e02d      	b.n	800b3e8 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6a1b      	ldr	r3, [r3, #32]
 800b390:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	699a      	ldr	r2, [r3, #24]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4413      	add	r3, r2
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	699a      	ldr	r2, [r3, #24]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	4413      	add	r3, r2
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3ac:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6999      	ldr	r1, [r3, #24]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3302      	adds	r3, #2
 800b3b8:	440b      	add	r3, r1
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b3be:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	699a      	ldr	r2, [r3, #24]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3303      	adds	r3, #3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b3d4:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3d6:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	1d1a      	adds	r2, r3, #4
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	69ba      	ldr	r2, [r7, #24]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d3cd      	bcc.n	800b38c <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800b3f0:	e05d      	b.n	800b4ae <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d035      	beq.n	800b464 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	61bb      	str	r3, [r7, #24]
 800b3fc:	e02d      	b.n	800b45a <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	699a      	ldr	r2, [r3, #24]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4413      	add	r3, r2
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	699a      	ldr	r2, [r3, #24]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	3301      	adds	r3, #1
 800b418:	4413      	add	r3, r2
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b41e:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6999      	ldr	r1, [r3, #24]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3302      	adds	r3, #2
 800b42a:	440b      	add	r3, r1
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b430:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	699a      	ldr	r2, [r3, #24]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3303      	adds	r3, #3
 800b43c:	4413      	add	r3, r2
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b446:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b448:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6a1b      	ldr	r3, [r3, #32]
 800b44e:	1d1a      	adds	r2, r3, #4
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	3301      	adds	r3, #1
 800b458:	61bb      	str	r3, [r7, #24]
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d3cd      	bcc.n	800b3fe <JPEG_ReadInputData+0x114>
}
 800b462:	e024      	b.n	800b4ae <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800b468:	2300      	movs	r3, #0
 800b46a:	61bb      	str	r3, [r7, #24]
 800b46c:	e017      	b.n	800b49e <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	699a      	ldr	r2, [r3, #24]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	4413      	add	r3, r2
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	f003 0303 	and.w	r3, r3, #3
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	fa02 f303 	lsl.w	r3, r2, r3
 800b488:	697a      	ldr	r2, [r7, #20]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800b498:	69bb      	ldr	r3, [r7, #24]
 800b49a:	3301      	adds	r3, #1
 800b49c:	61bb      	str	r3, [r7, #24]
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d3e3      	bcc.n	800b46e <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	697a      	ldr	r2, [r7, #20]
 800b4ac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b4ae:	bf00      	nop
 800b4b0:	3720      	adds	r7, #32
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b4b8:	b590      	push	{r4, r7, lr}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af02      	add	r7, sp, #8
 800b4be:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4c6:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ce:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d804      	bhi.n	800b4e4 <JPEG_DMA_StartProcess+0x2c>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d901      	bls.n	800b4e8 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e074      	b.n	800b5d2 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ec:	4a3b      	ldr	r2, [pc, #236]	@ (800b5dc <JPEG_DMA_StartProcess+0x124>)
 800b4ee:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4f4:	4a3a      	ldr	r2, [pc, #232]	@ (800b5e0 <JPEG_DMA_StartProcess+0x128>)
 800b4f6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4fc:	4a39      	ldr	r2, [pc, #228]	@ (800b5e4 <JPEG_DMA_StartProcess+0x12c>)
 800b4fe:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b504:	4a36      	ldr	r2, [pc, #216]	@ (800b5e0 <JPEG_DMA_StartProcess+0x128>)
 800b506:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b50c:	4a36      	ldr	r2, [pc, #216]	@ (800b5e8 <JPEG_DMA_StartProcess+0x130>)
 800b50e:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d002      	beq.n	800b51c <JPEG_DMA_StartProcess+0x64>
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d107      	bne.n	800b52c <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b520:	f043 0204 	orr.w	r2, r3, #4
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e052      	b.n	800b5d2 <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b534:	68f9      	ldr	r1, [r7, #12]
 800b536:	fbb3 f1f1 	udiv	r1, r3, r1
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	fb00 f101 	mul.w	r1, r0, r1
 800b540:	1a5b      	subs	r3, r3, r1
 800b542:	1ad2      	subs	r2, r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	fbb3 f1f1 	udiv	r1, r3, r1
 800b556:	68b8      	ldr	r0, [r7, #8]
 800b558:	fb00 f101 	mul.w	r1, r0, r1
 800b55c:	1a5b      	subs	r3, r3, r1
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3344      	adds	r3, #68	@ 0x44
 800b56e:	4619      	mov	r1, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	69db      	ldr	r3, [r3, #28]
 800b574:	461c      	mov	r4, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b57a:	2201      	movs	r2, #1
 800b57c:	9200      	str	r2, [sp, #0]
 800b57e:	4622      	mov	r2, r4
 800b580:	f000 fbe2 	bl	800bd48 <HAL_MDMA_Start_IT>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d007      	beq.n	800b59a <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b58e:	f043 0204 	orr.w	r2, r3, #4
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b596:	2301      	movs	r3, #1
 800b598:	e01b      	b.n	800b5d2 <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	699b      	ldr	r3, [r3, #24]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	3340      	adds	r3, #64	@ 0x40
 800b5aa:	461c      	mov	r4, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	9200      	str	r2, [sp, #0]
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	f000 fbc7 	bl	800bd48 <HAL_MDMA_Start_IT>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d007      	beq.n	800b5d0 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5c4:	f043 0204 	orr.w	r2, r3, #4
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e000      	b.n	800b5d2 <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800b5d0:	2300      	movs	r3, #0
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3714      	adds	r7, #20
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd90      	pop	{r4, r7, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800b8eb 	.word	0x0800b8eb
 800b5e0:	0800bad9 	.word	0x0800bad9
 800b5e4:	0800ba17 	.word	0x0800ba17
 800b5e8:	0800bb29 	.word	0x0800bb29

0800b5ec <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5f8:	f003 0303 	and.w	r3, r3, #3
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d125      	bne.n	800b64c <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d01e      	beq.n	800b64c <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	3304      	adds	r3, #4
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7fe fd05 	bl	800a024 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	3304      	adds	r3, #4
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7fe fe4c 	bl	800a2c4 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b63a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b64a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b652:	f003 0320 	and.w	r3, r3, #32
 800b656:	2b00      	cmp	r3, #0
 800b658:	d039      	beq.n	800b6ce <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b65e:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f022 0201 	bic.w	r2, r2, #1
 800b674:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b684:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b694:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b69a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d104      	bne.n	800b6ae <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f000 fbce 	bl	800be4a <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d105      	bne.n	800b6c8 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 fbc2 	bl	800be4a <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800b6c6:	e002      	b.n	800b6ce <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f804 	bl	800b6d6 <JPEG_DMA_EndProcess>
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b6ee:	1ad2      	subs	r2, r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d10a      	bne.n	800b716 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	69d9      	ldr	r1, [r3, #28]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b708:	461a      	mov	r2, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7f5 ff22 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b71c:	f003 0310 	and.w	r3, r3, #16
 800b720:	2b00      	cmp	r3, #0
 800b722:	d134      	bne.n	800b78e <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00a      	beq.n	800b742 <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	69d9      	ldr	r1, [r3, #28]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b734:	461a      	mov	r2, r3
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	f7f5 ff0c 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f022 0201 	bic.w	r2, r2, #1
 800b750:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b756:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b75c:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d103      	bne.n	800b786 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f7f5 feba 	bl	80014f8 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b784:	e00c      	b.n	800b7a0 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7fe fda7 	bl	800a2da <HAL_JPEG_EncodeCpltCallback>
}
 800b78c:	e008      	b.n	800b7a0 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f804 	bl	800b7a8 <JPEG_DMA_PollResidualData>
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b7b0:	2310      	movs	r3, #16
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	e04f      	b.n	800b856 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d146      	bne.n	800b850 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c8:	f003 0310 	and.w	r3, r3, #16
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d03f      	beq.n	800b850 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7d6:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	69da      	ldr	r2, [r3, #28]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e0:	4413      	add	r3, r2
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	b2d2      	uxtb	r2, r2
 800b7e6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	0a19      	lsrs	r1, r3, #8
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69da      	ldr	r2, [r3, #28]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	b2ca      	uxtb	r2, r1
 800b7fa:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0c19      	lsrs	r1, r3, #16
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	69da      	ldr	r2, [r3, #28]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b808:	3302      	adds	r3, #2
 800b80a:	4413      	add	r3, r2
 800b80c:	b2ca      	uxtb	r2, r1
 800b80e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	0e19      	lsrs	r1, r3, #24
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	69da      	ldr	r2, [r3, #28]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81c:	3303      	adds	r3, #3
 800b81e:	4413      	add	r3, r2
 800b820:	b2ca      	uxtb	r2, r1
 800b822:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b828:	1d1a      	adds	r2, r3, #4
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b836:	429a      	cmp	r2, r3
 800b838:	d10a      	bne.n	800b850 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	69d9      	ldr	r1, [r3, #28]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b842:	461a      	mov	r2, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7f5 fe85 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	3b01      	subs	r3, #1
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1ac      	bne.n	800b7b6 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b860:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b868:	f003 0310 	and.w	r3, r3, #16
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d004      	beq.n	800b87a <JPEG_DMA_PollResidualData+0xd2>
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b876:	2b00      	cmp	r3, #0
 800b878:	d133      	bne.n	800b8e2 <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f022 0201 	bic.w	r2, r2, #1
 800b888:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69d9      	ldr	r1, [r3, #28]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b89a:	461a      	mov	r2, r3
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7f5 fe59 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ac:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8b2:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	f003 0303 	and.w	r3, r3, #3
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d103      	bne.n	800b8dc <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f7f5 fe0f 	bl	80014f8 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b8da:	e002      	b.n	800b8e2 <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7fe fcfc 	bl	800a2da <HAL_JPEG_EncodeCpltCallback>
}
 800b8e2:	bf00      	nop
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b8ea:	b590      	push	{r4, r7, lr}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af02      	add	r7, sp, #8
 800b8f0:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8f6:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b906:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b90c:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b910:	4013      	ands	r3, r2
 800b912:	2b0c      	cmp	r3, #12
 800b914:	d17c      	bne.n	800ba10 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b91c:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	695b      	ldr	r3, [r3, #20]
 800b928:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b92c:	1ad2      	subs	r2, r2, r3
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	4619      	mov	r1, r3
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7fe fcd8 	bl	800a2ee <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	429a      	cmp	r2, r3
 800b946:	d81f      	bhi.n	800b988 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10d      	bne.n	800b96a <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b952:	f043 0204 	orr.w	r2, r3, #4
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2206      	movs	r2, #6
 800b95e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	f7f5 fdd8 	bl	8001518 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b968:	e052      	b.n	800ba10 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	fbb3 f1f1 	udiv	r1, r3, r1
 800b978:	68b8      	ldr	r0, [r7, #8]
 800b97a:	fb00 f101 	mul.w	r1, r0, r1
 800b97e:	1a5b      	subs	r3, r3, r1
 800b980:	1ad2      	subs	r2, r2, r3
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	629a      	str	r2, [r3, #40]	@ 0x28
 800b986:	e010      	b.n	800b9aa <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00c      	beq.n	800b9aa <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b994:	f003 0303 	and.w	r3, r3, #3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d006      	beq.n	800b9aa <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9a0:	089b      	lsrs	r3, r3, #2
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	009a      	lsls	r2, r3, #2
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d124      	bne.n	800ba00 <JPEG_MDMAInCpltCallback+0x116>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d020      	beq.n	800ba00 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3340      	adds	r3, #64	@ 0x40
 800b9ce:	461c      	mov	r4, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	9200      	str	r2, [sp, #0]
 800b9d8:	4622      	mov	r2, r4
 800b9da:	f000 f9b5 	bl	800bd48 <HAL_MDMA_Start_IT>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00d      	beq.n	800ba00 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9e8:	f043 0204 	orr.w	r2, r3, #4
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2206      	movs	r2, #6
 800b9f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f7f5 fd8d 	bl	8001518 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b9fe:	e007      	b.n	800ba10 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ba0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd90      	pop	{r4, r7, pc}

0800ba16 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800ba16:	b590      	push	{r4, r7, lr}
 800ba18:	b087      	sub	sp, #28
 800ba1a:	af02      	add	r7, sp, #8
 800ba1c:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba22:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ba32:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba38:	f248 030c 	movw	r3, #32780	@ 0x800c
 800ba3c:	4013      	ands	r3, r2
 800ba3e:	2b0c      	cmp	r3, #12
 800ba40:	d147      	bne.n	800bad2 <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba48:	f003 0320 	and.w	r3, r3, #32
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d138      	bne.n	800bac2 <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800ba5e:	1ad2      	subs	r2, r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	69d9      	ldr	r1, [r3, #28]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	68f8      	ldr	r0, [r7, #12]
 800ba70:	f7f5 fd70 	bl	8001554 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d120      	bne.n	800bac2 <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3344      	adds	r3, #68	@ 0x44
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	69db      	ldr	r3, [r3, #28]
 800ba90:	461c      	mov	r4, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba96:	2201      	movs	r2, #1
 800ba98:	9200      	str	r2, [sp, #0]
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	f000 f954 	bl	800bd48 <HAL_MDMA_Start_IT>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00d      	beq.n	800bac2 <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baaa:	f043 0204 	orr.w	r2, r3, #4
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2206      	movs	r2, #6
 800bab6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f7f5 fd2c 	bl	8001518 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800bac0:	e007      	b.n	800bad2 <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bad0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd90      	pop	{r4, r7, pc}

0800bad8 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae4:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f022 0201 	bic.w	r2, r2, #1
 800baf4:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bb04:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb12:	f043 0204 	orr.w	r2, r3, #4
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7f5 fcfc 	bl	8001518 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800bb20:	bf00      	nop
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb34:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d002      	beq.n	800bb48 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7ff fdc7 	bl	800b6d6 <JPEG_DMA_EndProcess>
  }
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b08b      	sub	sp, #44	@ 0x2c
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3350      	adds	r3, #80	@ 0x50
 800bb62:	61bb      	str	r3, [r7, #24]

  i = 0;
 800bb64:	2300      	movs	r3, #0
 800bb66:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800bb68:	e042      	b.n	800bbf0 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800bb6a:	69bb      	ldr	r3, [r7, #24]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800bb70:	2300      	movs	r3, #0
 800bb72:	61fb      	str	r3, [r7, #28]
 800bb74:	e033      	b.n	800bbde <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d103      	bne.n	800bb92 <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	3364      	adds	r3, #100	@ 0x64
 800bb8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb90:	e022      	b.n	800bbd8 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2264      	movs	r2, #100	@ 0x64
 800bb96:	fb02 f303 	mul.w	r3, r2, r3
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bb9e:	6a38      	ldr	r0, [r7, #32]
 800bba0:	69f9      	ldr	r1, [r7, #28]
 800bba2:	4401      	add	r1, r0
 800bba4:	4818      	ldr	r0, [pc, #96]	@ (800bc08 <JPEG_GetQuality+0xb8>)
 800bba6:	5c41      	ldrb	r1, [r0, r1]
 800bba8:	440a      	add	r2, r1
 800bbaa:	7812      	ldrb	r2, [r2, #0]
 800bbac:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbb0:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b64      	cmp	r3, #100	@ 0x64
 800bbb6:	d807      	bhi.n	800bbc8 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800bbbe:	085b      	lsrs	r3, r3, #1
 800bbc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc2:	4413      	add	r3, r2
 800bbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbc6:	e007      	b.n	800bbd8 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800bbc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbd4:	4413      	add	r3, r2
 800bbd6:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d9c8      	bls.n	800bb76 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	3304      	adds	r3, #4
 800bbee:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	2b3c      	cmp	r3, #60	@ 0x3c
 800bbf4:	d9b9      	bls.n	800bb6a <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	099b      	lsrs	r3, r3, #6
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	372c      	adds	r7, #44	@ 0x2c
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop
 800bc08:	0801a118 	.word	0x0801a118

0800bc0c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc14:	f7f7 f804 	bl	8002c20 <HAL_GetTick>
 800bc18:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e03b      	b.n	800bc9c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2200      	movs	r2, #0
 800bc28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f022 0201 	bic.w	r2, r2, #1
 800bc42:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bc44:	e00f      	b.n	800bc66 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bc46:	f7f6 ffeb 	bl	8002c20 <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b05      	cmp	r3, #5
 800bc52:	d908      	bls.n	800bc66 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2240      	movs	r2, #64	@ 0x40
 800bc58:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2203      	movs	r2, #3
 800bc5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e01a      	b.n	800bc9c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1e8      	bne.n	800bc46 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fad3 	bl	800c220 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2201      	movs	r2, #1
 800bc96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d101      	bne.n	800bcbe <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e03e      	b.n	800bd3c <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d101      	bne.n	800bccc <HAL_MDMA_ConfigPostRequestMask+0x28>
 800bcc8:	2302      	movs	r3, #2
 800bcca:	e037      	b.n	800bd3c <HAL_MDMA_ConfigPostRequestMask+0x98>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d126      	bne.n	800bd2e <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d11c      	bne.n	800bd28 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d108      	bne.n	800bd16 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	691a      	ldr	r2, [r3, #16]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800bd12:	611a      	str	r2, [r3, #16]
 800bd14:	e00d      	b.n	800bd32 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bd24:	611a      	str	r2, [r3, #16]
 800bd26:	e004      	b.n	800bd32 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	75fb      	strb	r3, [r7, #23]
 800bd2c:	e001      	b.n	800bd32 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	371c      	adds	r7, #28
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af02      	add	r7, sp, #8
 800bd4e:	60f8      	str	r0, [r7, #12]
 800bd50:	60b9      	str	r1, [r7, #8]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	e070      	b.n	800be42 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_MDMA_Start_IT+0x26>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e069      	b.n	800be42 <HAL_MDMA_Start_IT+0xfa>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd7c:	b2db      	uxtb	r3, r3
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d158      	bne.n	800be34 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2202      	movs	r2, #2
 800bd86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68da      	ldr	r2, [r3, #12]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0201 	bic.w	r2, r2, #1
 800bd9e:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 f9c8 	bl	800c140 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68da      	ldr	r2, [r3, #12]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f042 0206 	orr.w	r2, r2, #6
 800bdbe:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d007      	beq.n	800bdd8 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68da      	ldr	r2, [r3, #12]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f042 0210 	orr.w	r2, r2, #16
 800bdd6:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d007      	beq.n	800bdf0 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f042 0208 	orr.w	r2, r2, #8
 800bdee:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0220 	orr.w	r2, r2, #32
 800be06:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f042 0201 	orr.w	r2, r2, #1
 800be16:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be20:	d10e      	bne.n	800be40 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68da      	ldr	r2, [r3, #12]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800be30:	60da      	str	r2, [r3, #12]
 800be32:	e005      	b.n	800be40 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800be3c:	2302      	movs	r3, #2
 800be3e:	e000      	b.n	800be42 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800be40:	2300      	movs	r3, #0
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e017      	b.n	800be8c <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be62:	b2db      	uxtb	r3, r3
 800be64:	2b02      	cmp	r3, #2
 800be66:	d004      	beq.n	800be72 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2280      	movs	r2, #128	@ 0x80
 800be6c:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e00c      	b.n	800be8c <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2204      	movs	r2, #4
 800be76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68da      	ldr	r2, [r3, #12]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f022 0201 	bic.w	r2, r2, #1
 800be88:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b086      	sub	sp, #24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bea4:	4b91      	ldr	r3, [pc, #580]	@ (800c0ec <HAL_MDMA_IRQHandler+0x254>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a91      	ldr	r2, [pc, #580]	@ (800c0f0 <HAL_MDMA_IRQHandler+0x258>)
 800beaa:	fba2 2303 	umull	r2, r3, r2, r3
 800beae:	0a9b      	lsrs	r3, r3, #10
 800beb0:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	461a      	mov	r2, r3
 800beb8:	4b8e      	ldr	r3, [pc, #568]	@ (800c0f4 <HAL_MDMA_IRQHandler+0x25c>)
 800beba:	4413      	add	r3, r2
 800bebc:	099b      	lsrs	r3, r3, #6
 800bebe:	f003 031f 	and.w	r3, r3, #31
 800bec2:	2201      	movs	r2, #1
 800bec4:	fa02 f303 	lsl.w	r3, r2, r3
 800bec8:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800beca:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	4013      	ands	r3, r2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	f000 812d 	beq.w	800c134 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0301 	and.w	r3, r3, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d054      	beq.n	800bf92 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	f003 0302 	and.w	r3, r3, #2
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d04d      	beq.n	800bf92 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 0202 	bic.w	r2, r2, #2
 800bf04:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d106      	bne.n	800bf26 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf1c:	f043 0201 	orr.w	r2, r3, #1
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	669a      	str	r2, [r3, #104]	@ 0x68
 800bf24:	e005      	b.n	800bf32 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf2a:	f043 0202 	orr.w	r2, r3, #2
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf40:	f043 0204 	orr.w	r2, r3, #4
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d005      	beq.n	800bf5e <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf56:	f043 0208 	orr.w	r2, r3, #8
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d005      	beq.n	800bf74 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf6c:	f043 0210 	orr.w	r2, r3, #16
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d005      	beq.n	800bf8a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf82:	f043 0220 	orr.w	r2, r3, #32
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f003 0310 	and.w	r3, r3, #16
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d012      	beq.n	800bfc6 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d00b      	beq.n	800bfc6 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2210      	movs	r2, #16
 800bfb4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d003      	beq.n	800bfc6 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0308 	and.w	r3, r3, #8
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d012      	beq.n	800bffa <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f003 0310 	and.w	r3, r3, #16
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00b      	beq.n	800bffa <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	2208      	movs	r2, #8
 800bfe8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d003      	beq.n	800bffa <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d012      	beq.n	800c02e <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	f003 0308 	and.w	r3, r3, #8
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00b      	beq.n	800c02e <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2204      	movs	r2, #4
 800c01c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c022:	2b00      	cmp	r3, #0
 800c024:	d003      	beq.n	800c02e <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f003 0302 	and.w	r3, r3, #2
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d039      	beq.n	800c0b0 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	f003 0304 	and.w	r3, r3, #4
 800c046:	2b00      	cmp	r3, #0
 800c048:	d032      	beq.n	800c0b0 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	68da      	ldr	r2, [r3, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800c058:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b04      	cmp	r3, #4
 800c064:	d110      	bne.n	800c088 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d05c      	beq.n	800c138 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	4798      	blx	r3
        }
        return;
 800c086:	e057      	b.n	800c138 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	2202      	movs	r2, #2
 800c08e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d003      	beq.n	800c0b0 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d040      	beq.n	800c13a <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2204      	movs	r2, #4
 800c0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68da      	ldr	r2, [r3, #12]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f022 0201 	bic.w	r2, r2, #1
 800c0ce:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	60bb      	str	r3, [r7, #8]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d30d      	bcc.n	800c0f8 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1f2      	bne.n	800c0d0 <HAL_MDMA_IRQHandler+0x238>
 800c0ea:	e006      	b.n	800c0fa <HAL_MDMA_IRQHandler+0x262>
 800c0ec:	2400022c 	.word	0x2400022c
 800c0f0:	1b4e81b5 	.word	0x1b4e81b5
 800c0f4:	adffffc0 	.word	0xadffffc0
        break;
 800c0f8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	f003 0301 	and.w	r3, r3, #1
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d004      	beq.n	800c11a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2203      	movs	r2, #3
 800c114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c118:	e003      	b.n	800c122 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2201      	movs	r2, #1
 800c11e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c126:	2b00      	cmp	r3, #0
 800c128:	d007      	beq.n	800c13a <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	4798      	blx	r3
 800c132:	e002      	b.n	800c13a <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800c134:	bf00      	nop
 800c136:	e000      	b.n	800c13a <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800c138:	bf00      	nop
    }
  }
}
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800c140:	b480      	push	{r7}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	695a      	ldr	r2, [r3, #20]
 800c154:	4b31      	ldr	r3, [pc, #196]	@ (800c21c <MDMA_SetConfig+0xdc>)
 800c156:	4013      	ands	r3, r2
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	6812      	ldr	r2, [r2, #0]
 800c162:	430b      	orrs	r3, r1
 800c164:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	695b      	ldr	r3, [r3, #20]
 800c16c:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	3b01      	subs	r3, #1
 800c174:	051a      	lsls	r2, r3, #20
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	430a      	orrs	r2, r1
 800c17c:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	221f      	movs	r2, #31
 800c184:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c19c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1a4:	d002      	beq.n	800c1ac <MDMA_SetConfig+0x6c>
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d108      	bne.n	800c1be <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c1ba:	629a      	str	r2, [r3, #40]	@ 0x28
 800c1bc:	e007      	b.n	800c1ce <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c1cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c1d4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1dc:	d002      	beq.n	800c1e4 <MDMA_SetConfig+0xa4>
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d108      	bne.n	800c1f6 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c1f2:	629a      	str	r2, [r3, #40]	@ 0x28
 800c1f4:	e007      	b.n	800c206 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c210:	bf00      	nop
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	fffe0000 	.word	0xfffe0000

0800c220 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	68d9      	ldr	r1, [r3, #12]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	430a      	orrs	r2, r1
 800c236:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	695a      	ldr	r2, [r3, #20]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c246:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a1b      	ldr	r3, [r3, #32]
 800c24c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c252:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c258:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c25e:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c264:	3b01      	subs	r3, #1
 800c266:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800c268:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c274:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c276:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c280:	d107      	bne.n	800c292 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	691a      	ldr	r2, [r3, #16]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c290:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2200      	movs	r2, #0
 800c298:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	da11      	bge.n	800c2c6 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	695a      	ldr	r2, [r3, #20]
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c2b0:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b6:	425b      	negs	r3, r3
 800c2b8:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	b292      	uxth	r2, r2
 800c2c2:	621a      	str	r2, [r3, #32]
 800c2c4:	e006      	b.n	800c2d4 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	b292      	uxth	r2, r2
 800c2d2:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	da15      	bge.n	800c308 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	695a      	ldr	r2, [r3, #20]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c2ea:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f0:	425b      	negs	r3, r3
 800c2f2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	6a19      	ldr	r1, [r3, #32]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	041a      	lsls	r2, r3, #16
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	621a      	str	r2, [r3, #32]
 800c306:	e009      	b.n	800c31c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6a19      	ldr	r1, [r3, #32]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c312:	041a      	lsls	r2, r3, #16
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	430a      	orrs	r2, r1
 800c31a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c324:	d006      	beq.n	800c334 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685a      	ldr	r2, [r3, #4]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	629a      	str	r2, [r3, #40]	@ 0x28
 800c332:	e003      	b.n	800c33c <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	2200      	movs	r2, #0
 800c33a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2200      	movs	r2, #0
 800c342:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c344:	bf00      	nop
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af02      	add	r7, sp, #8
 800c356:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d101      	bne.n	800c362 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e0fe      	b.n	800c560 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d106      	bne.n	800c37c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f00c fbce 	bl	8018b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2203      	movs	r2, #3
 800c380:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4618      	mov	r0, r3
 800c38a:	f008 f86e 	bl	801446a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	7c1a      	ldrb	r2, [r3, #16]
 800c396:	f88d 2000 	strb.w	r2, [sp]
 800c39a:	3304      	adds	r3, #4
 800c39c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c39e:	f007 ff3f 	bl	8014220 <USB_CoreInit>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d005      	beq.n	800c3b4 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2202      	movs	r2, #2
 800c3ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e0d5      	b.n	800c560 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2100      	movs	r1, #0
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f008 f866 	bl	801448c <USB_SetCurrentMode>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d005      	beq.n	800c3d2 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e0c6      	b.n	800c560 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	73fb      	strb	r3, [r7, #15]
 800c3d6:	e04a      	b.n	800c46e <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c3d8:	7bfa      	ldrb	r2, [r7, #15]
 800c3da:	6879      	ldr	r1, [r7, #4]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	4413      	add	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	440b      	add	r3, r1
 800c3e6:	3315      	adds	r3, #21
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c3ec:	7bfa      	ldrb	r2, [r7, #15]
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	4613      	mov	r3, r2
 800c3f2:	00db      	lsls	r3, r3, #3
 800c3f4:	4413      	add	r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	440b      	add	r3, r1
 800c3fa:	3314      	adds	r3, #20
 800c3fc:	7bfa      	ldrb	r2, [r7, #15]
 800c3fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c400:	7bfa      	ldrb	r2, [r7, #15]
 800c402:	7bfb      	ldrb	r3, [r7, #15]
 800c404:	b298      	uxth	r0, r3
 800c406:	6879      	ldr	r1, [r7, #4]
 800c408:	4613      	mov	r3, r2
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	332e      	adds	r3, #46	@ 0x2e
 800c414:	4602      	mov	r2, r0
 800c416:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c418:	7bfa      	ldrb	r2, [r7, #15]
 800c41a:	6879      	ldr	r1, [r7, #4]
 800c41c:	4613      	mov	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	4413      	add	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	440b      	add	r3, r1
 800c426:	3318      	adds	r3, #24
 800c428:	2200      	movs	r2, #0
 800c42a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c42c:	7bfa      	ldrb	r2, [r7, #15]
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	4613      	mov	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	4413      	add	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	440b      	add	r3, r1
 800c43a:	331c      	adds	r3, #28
 800c43c:	2200      	movs	r2, #0
 800c43e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c440:	7bfa      	ldrb	r2, [r7, #15]
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	4613      	mov	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	3320      	adds	r3, #32
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c454:	7bfa      	ldrb	r2, [r7, #15]
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	3324      	adds	r3, #36	@ 0x24
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	3301      	adds	r3, #1
 800c46c:	73fb      	strb	r3, [r7, #15]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	791b      	ldrb	r3, [r3, #4]
 800c472:	7bfa      	ldrb	r2, [r7, #15]
 800c474:	429a      	cmp	r2, r3
 800c476:	d3af      	bcc.n	800c3d8 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c478:	2300      	movs	r3, #0
 800c47a:	73fb      	strb	r3, [r7, #15]
 800c47c:	e044      	b.n	800c508 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c47e:	7bfa      	ldrb	r2, [r7, #15]
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	4613      	mov	r3, r2
 800c484:	00db      	lsls	r3, r3, #3
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	440b      	add	r3, r1
 800c48c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c490:	2200      	movs	r2, #0
 800c492:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c494:	7bfa      	ldrb	r2, [r7, #15]
 800c496:	6879      	ldr	r1, [r7, #4]
 800c498:	4613      	mov	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	440b      	add	r3, r1
 800c4a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c4a6:	7bfa      	ldrb	r2, [r7, #15]
 800c4a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c4aa:	7bfa      	ldrb	r2, [r7, #15]
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	4413      	add	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	440b      	add	r3, r1
 800c4b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c4c0:	7bfa      	ldrb	r2, [r7, #15]
 800c4c2:	6879      	ldr	r1, [r7, #4]
 800c4c4:	4613      	mov	r3, r2
 800c4c6:	00db      	lsls	r3, r3, #3
 800c4c8:	4413      	add	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	440b      	add	r3, r1
 800c4ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c4d6:	7bfa      	ldrb	r2, [r7, #15]
 800c4d8:	6879      	ldr	r1, [r7, #4]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	4413      	add	r3, r2
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	440b      	add	r3, r1
 800c4e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c4ec:	7bfa      	ldrb	r2, [r7, #15]
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	440b      	add	r3, r1
 800c4fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	3301      	adds	r3, #1
 800c506:	73fb      	strb	r3, [r7, #15]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	791b      	ldrb	r3, [r3, #4]
 800c50c:	7bfa      	ldrb	r2, [r7, #15]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d3b5      	bcc.n	800c47e <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7c1a      	ldrb	r2, [r3, #16]
 800c51a:	f88d 2000 	strb.w	r2, [sp]
 800c51e:	3304      	adds	r3, #4
 800c520:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c522:	f007 ffff 	bl	8014524 <USB_DevInit>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d005      	beq.n	800c538 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2202      	movs	r2, #2
 800c530:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	e013      	b.n	800c560 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	7b1b      	ldrb	r3, [r3, #12]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d102      	bne.n	800c554 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 f96e 	bl	800d830 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4618      	mov	r0, r3
 800c55a:	f009 f842 	bl	80155e2 <USB_DevDisconnect>

  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c57c:	2b01      	cmp	r3, #1
 800c57e:	d101      	bne.n	800c584 <HAL_PCD_Start+0x1c>
 800c580:	2302      	movs	r3, #2
 800c582:	e022      	b.n	800c5ca <HAL_PCD_Start+0x62>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2201      	movs	r2, #1
 800c588:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c594:	2b00      	cmp	r3, #0
 800c596:	d009      	beq.n	800c5ac <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d105      	bne.n	800c5ac <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f007 ff49 	bl	8014448 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f008 fff0 	bl	80155a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
}
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}

0800c5d2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c5d2:	b590      	push	{r4, r7, lr}
 800c5d4:	b08d      	sub	sp, #52	@ 0x34
 800c5d6:	af00      	add	r7, sp, #0
 800c5d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e0:	6a3b      	ldr	r3, [r7, #32]
 800c5e2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f009 f8ae 	bl	801574a <USB_GetMode>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f040 84b9 	bne.w	800cf68 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f009 f812 	bl	8015624 <USB_ReadInterrupts>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 84af 	beq.w	800cf66 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	0a1b      	lsrs	r3, r3, #8
 800c612:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4618      	mov	r0, r3
 800c622:	f008 ffff 	bl	8015624 <USB_ReadInterrupts>
 800c626:	4603      	mov	r3, r0
 800c628:	f003 0302 	and.w	r3, r3, #2
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d107      	bne.n	800c640 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	695a      	ldr	r2, [r3, #20]
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f002 0202 	and.w	r2, r2, #2
 800c63e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4618      	mov	r0, r3
 800c646:	f008 ffed 	bl	8015624 <USB_ReadInterrupts>
 800c64a:	4603      	mov	r3, r0
 800c64c:	f003 0310 	and.w	r3, r3, #16
 800c650:	2b10      	cmp	r3, #16
 800c652:	d161      	bne.n	800c718 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	699a      	ldr	r2, [r3, #24]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f022 0210 	bic.w	r2, r2, #16
 800c662:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c664:	6a3b      	ldr	r3, [r7, #32]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c66a:	69bb      	ldr	r3, [r7, #24]
 800c66c:	f003 020f 	and.w	r2, r3, #15
 800c670:	4613      	mov	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	4413      	add	r3, r2
 800c680:	3304      	adds	r3, #4
 800c682:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c68a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c68e:	d124      	bne.n	800c6da <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c690:	69ba      	ldr	r2, [r7, #24]
 800c692:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c696:	4013      	ands	r3, r2
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d035      	beq.n	800c708 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c6a0:	69bb      	ldr	r3, [r7, #24]
 800c6a2:	091b      	lsrs	r3, r3, #4
 800c6a4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c6a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6a38      	ldr	r0, [r7, #32]
 800c6b0:	f008 fe24 	bl	80152fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	68da      	ldr	r2, [r3, #12]
 800c6b8:	69bb      	ldr	r3, [r7, #24]
 800c6ba:	091b      	lsrs	r3, r3, #4
 800c6bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6c0:	441a      	add	r2, r3
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	695a      	ldr	r2, [r3, #20]
 800c6ca:	69bb      	ldr	r3, [r7, #24]
 800c6cc:	091b      	lsrs	r3, r3, #4
 800c6ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6d2:	441a      	add	r2, r3
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	615a      	str	r2, [r3, #20]
 800c6d8:	e016      	b.n	800c708 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c6e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c6e4:	d110      	bne.n	800c708 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6a38      	ldr	r0, [r7, #32]
 800c6f2:	f008 fe03 	bl	80152fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	695a      	ldr	r2, [r3, #20]
 800c6fa:	69bb      	ldr	r3, [r7, #24]
 800c6fc:	091b      	lsrs	r3, r3, #4
 800c6fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c702:	441a      	add	r2, r3
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	699a      	ldr	r2, [r3, #24]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f042 0210 	orr.w	r2, r2, #16
 800c716:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4618      	mov	r0, r3
 800c71e:	f008 ff81 	bl	8015624 <USB_ReadInterrupts>
 800c722:	4603      	mov	r3, r0
 800c724:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c728:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c72c:	f040 80a7 	bne.w	800c87e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c730:	2300      	movs	r3, #0
 800c732:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4618      	mov	r0, r3
 800c73a:	f008 ff86 	bl	801564a <USB_ReadDevAllOutEpInterrupt>
 800c73e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c740:	e099      	b.n	800c876 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c744:	f003 0301 	and.w	r3, r3, #1
 800c748:	2b00      	cmp	r3, #0
 800c74a:	f000 808e 	beq.w	800c86a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c754:	b2d2      	uxtb	r2, r2
 800c756:	4611      	mov	r1, r2
 800c758:	4618      	mov	r0, r3
 800c75a:	f008 ffaa 	bl	80156b2 <USB_ReadDevOutEPInterrupt>
 800c75e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00c      	beq.n	800c784 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c76c:	015a      	lsls	r2, r3, #5
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	4413      	add	r3, r2
 800c772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c776:	461a      	mov	r2, r3
 800c778:	2301      	movs	r3, #1
 800c77a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c77c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fed0 	bl	800d524 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	f003 0308 	and.w	r3, r3, #8
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00c      	beq.n	800c7a8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c79a:	461a      	mov	r2, r3
 800c79c:	2308      	movs	r3, #8
 800c79e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c7a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 ffa6 	bl	800d6f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f003 0310 	and.w	r3, r3, #16
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d008      	beq.n	800c7c4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b4:	015a      	lsls	r2, r3, #5
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7be:	461a      	mov	r2, r3
 800c7c0:	2310      	movs	r3, #16
 800c7c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	f003 0302 	and.w	r3, r3, #2
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d030      	beq.n	800c830 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c7ce:	6a3b      	ldr	r3, [r7, #32]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7d6:	2b80      	cmp	r3, #128	@ 0x80
 800c7d8:	d109      	bne.n	800c7ee <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	69fa      	ldr	r2, [r7, #28]
 800c7e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c7ec:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c7ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	4413      	add	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	4413      	add	r3, r2
 800c800:	3304      	adds	r3, #4
 800c802:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	78db      	ldrb	r3, [r3, #3]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d108      	bne.n	800c81e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2200      	movs	r2, #0
 800c810:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c814:	b2db      	uxtb	r3, r3
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f00c faa3 	bl	8018d64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c820:	015a      	lsls	r2, r3, #5
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	4413      	add	r3, r2
 800c826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c82a:	461a      	mov	r2, r3
 800c82c:	2302      	movs	r3, #2
 800c82e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	f003 0320 	and.w	r3, r3, #32
 800c836:	2b00      	cmp	r3, #0
 800c838:	d008      	beq.n	800c84c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	015a      	lsls	r2, r3, #5
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	4413      	add	r3, r2
 800c842:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c846:	461a      	mov	r2, r3
 800c848:	2320      	movs	r3, #32
 800c84a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d009      	beq.n	800c86a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	015a      	lsls	r2, r3, #5
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	4413      	add	r3, r2
 800c85e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c862:	461a      	mov	r2, r3
 800c864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c868:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86c:	3301      	adds	r3, #1
 800c86e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c872:	085b      	lsrs	r3, r3, #1
 800c874:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f47f af62 	bne.w	800c742 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4618      	mov	r0, r3
 800c884:	f008 fece 	bl	8015624 <USB_ReadInterrupts>
 800c888:	4603      	mov	r3, r0
 800c88a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c88e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c892:	f040 80db 	bne.w	800ca4c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f008 feef 	bl	801567e <USB_ReadDevAllInEpInterrupt>
 800c8a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c8a6:	e0cd      	b.n	800ca44 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f000 80c2 	beq.w	800ca38 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	4611      	mov	r1, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f008 ff15 	bl	80156ee <USB_ReadDevInEPInterrupt>
 800c8c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d057      	beq.n	800c980 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	f003 030f 	and.w	r3, r3, #15
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8dc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	43db      	mvns	r3, r3
 800c8ea:	69f9      	ldr	r1, [r7, #28]
 800c8ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c900:	461a      	mov	r2, r3
 800c902:	2301      	movs	r3, #1
 800c904:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	799b      	ldrb	r3, [r3, #6]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d132      	bne.n	800c974 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c912:	4613      	mov	r3, r2
 800c914:	00db      	lsls	r3, r3, #3
 800c916:	4413      	add	r3, r2
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	440b      	add	r3, r1
 800c91c:	3320      	adds	r3, #32
 800c91e:	6819      	ldr	r1, [r3, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c924:	4613      	mov	r3, r2
 800c926:	00db      	lsls	r3, r3, #3
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4403      	add	r3, r0
 800c92e:	331c      	adds	r3, #28
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4419      	add	r1, r3
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c938:	4613      	mov	r3, r2
 800c93a:	00db      	lsls	r3, r3, #3
 800c93c:	4413      	add	r3, r2
 800c93e:	009b      	lsls	r3, r3, #2
 800c940:	4403      	add	r3, r0
 800c942:	3320      	adds	r3, #32
 800c944:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d113      	bne.n	800c974 <HAL_PCD_IRQHandler+0x3a2>
 800c94c:	6879      	ldr	r1, [r7, #4]
 800c94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c950:	4613      	mov	r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	4413      	add	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	440b      	add	r3, r1
 800c95a:	3324      	adds	r3, #36	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d108      	bne.n	800c974 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c96c:	461a      	mov	r2, r3
 800c96e:	2101      	movs	r1, #1
 800c970:	f008 ff1e 	bl	80157b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c976:	b2db      	uxtb	r3, r3
 800c978:	4619      	mov	r1, r3
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f00c f96d 	bl	8018c5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	f003 0308 	and.w	r3, r3, #8
 800c986:	2b00      	cmp	r3, #0
 800c988:	d008      	beq.n	800c99c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	015a      	lsls	r2, r3, #5
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	4413      	add	r3, r2
 800c992:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c996:	461a      	mov	r2, r3
 800c998:	2308      	movs	r3, #8
 800c99a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	f003 0310 	and.w	r3, r3, #16
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d008      	beq.n	800c9b8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a8:	015a      	lsls	r2, r3, #5
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9b2:	461a      	mov	r2, r3
 800c9b4:	2310      	movs	r3, #16
 800c9b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d008      	beq.n	800c9d4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c4:	015a      	lsls	r2, r3, #5
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	2340      	movs	r3, #64	@ 0x40
 800c9d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f003 0302 	and.w	r3, r3, #2
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d023      	beq.n	800ca26 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c9de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9e0:	6a38      	ldr	r0, [r7, #32]
 800c9e2:	f007 fefd 	bl	80147e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c9e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	00db      	lsls	r3, r3, #3
 800c9ec:	4413      	add	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	3310      	adds	r3, #16
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	3304      	adds	r3, #4
 800c9f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	78db      	ldrb	r3, [r3, #3]
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d108      	bne.n	800ca14 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2200      	movs	r2, #0
 800ca06:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f00c f9ba 	bl	8018d88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ca14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca16:	015a      	lsls	r2, r3, #5
 800ca18:	69fb      	ldr	r3, [r7, #28]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca20:	461a      	mov	r2, r3
 800ca22:	2302      	movs	r3, #2
 800ca24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ca30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 fcea 	bl	800d40c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	085b      	lsrs	r3, r3, #1
 800ca42:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ca44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f47f af2e 	bne.w	800c8a8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f008 fde7 	bl	8015624 <USB_ReadInterrupts>
 800ca56:	4603      	mov	r3, r0
 800ca58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca60:	d122      	bne.n	800caa8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	69fa      	ldr	r2, [r7, #28]
 800ca6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca70:	f023 0301 	bic.w	r3, r3, #1
 800ca74:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d108      	bne.n	800ca92 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ca88:	2100      	movs	r1, #0
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f000 fef4 	bl	800d878 <HAL_PCDEx_LPM_Callback>
 800ca90:	e002      	b.n	800ca98 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f00c f958 	bl	8018d48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	695a      	ldr	r2, [r3, #20]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800caa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	f008 fdb9 	bl	8015624 <USB_ReadInterrupts>
 800cab2:	4603      	mov	r3, r0
 800cab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cabc:	d112      	bne.n	800cae4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d102      	bne.n	800cad4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f00c f914 	bl	8018cfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	695a      	ldr	r2, [r3, #20]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800cae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4618      	mov	r0, r3
 800caea:	f008 fd9b 	bl	8015624 <USB_ReadInterrupts>
 800caee:	4603      	mov	r3, r0
 800caf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caf4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800caf8:	d121      	bne.n	800cb3e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	695a      	ldr	r2, [r3, #20]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800cb08:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d111      	bne.n	800cb38 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb22:	089b      	lsrs	r3, r3, #2
 800cb24:	f003 020f 	and.w	r2, r3, #15
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cb2e:	2101      	movs	r1, #1
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fea1 	bl	800d878 <HAL_PCDEx_LPM_Callback>
 800cb36:	e002      	b.n	800cb3e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f00c f8df 	bl	8018cfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4618      	mov	r0, r3
 800cb44:	f008 fd6e 	bl	8015624 <USB_ReadInterrupts>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cb4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb52:	f040 80b7 	bne.w	800ccc4 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cb56:	69fb      	ldr	r3, [r7, #28]
 800cb58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	69fa      	ldr	r2, [r7, #28]
 800cb60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb64:	f023 0301 	bic.w	r3, r3, #1
 800cb68:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2110      	movs	r1, #16
 800cb70:	4618      	mov	r0, r3
 800cb72:	f007 fe35 	bl	80147e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb76:	2300      	movs	r3, #0
 800cb78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb7a:	e046      	b.n	800cc0a <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7e:	015a      	lsls	r2, r3, #5
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	4413      	add	r3, r2
 800cb84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb88:	461a      	mov	r2, r3
 800cb8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cb8e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb92:	015a      	lsls	r2, r3, #5
 800cb94:	69fb      	ldr	r3, [r7, #28]
 800cb96:	4413      	add	r3, r2
 800cb98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cba0:	0151      	lsls	r1, r2, #5
 800cba2:	69fa      	ldr	r2, [r7, #28]
 800cba4:	440a      	add	r2, r1
 800cba6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cbaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cbae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb2:	015a      	lsls	r2, r3, #5
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	4413      	add	r3, r2
 800cbb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cbc2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	69fb      	ldr	r3, [r7, #28]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbd4:	0151      	lsls	r1, r2, #5
 800cbd6:	69fa      	ldr	r2, [r7, #28]
 800cbd8:	440a      	add	r2, r1
 800cbda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cbe2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe6:	015a      	lsls	r2, r3, #5
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	4413      	add	r3, r2
 800cbec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbf4:	0151      	lsls	r1, r2, #5
 800cbf6:	69fa      	ldr	r2, [r7, #28]
 800cbf8:	440a      	add	r2, r1
 800cbfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cbfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cc02:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc06:	3301      	adds	r3, #1
 800cc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	791b      	ldrb	r3, [r3, #4]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d3b2      	bcc.n	800cb7c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cc16:	69fb      	ldr	r3, [r7, #28]
 800cc18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc1c:	69db      	ldr	r3, [r3, #28]
 800cc1e:	69fa      	ldr	r2, [r7, #28]
 800cc20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc24:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800cc28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	7bdb      	ldrb	r3, [r3, #15]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d016      	beq.n	800cc60 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc3c:	69fa      	ldr	r2, [r7, #28]
 800cc3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc42:	f043 030b 	orr.w	r3, r3, #11
 800cc46:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cc4a:	69fb      	ldr	r3, [r7, #28]
 800cc4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc52:	69fa      	ldr	r2, [r7, #28]
 800cc54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc58:	f043 030b 	orr.w	r3, r3, #11
 800cc5c:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc5e:	e015      	b.n	800cc8c <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc66:	695a      	ldr	r2, [r3, #20]
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc6e:	4619      	mov	r1, r3
 800cc70:	f242 032b 	movw	r3, #8235	@ 0x202b
 800cc74:	4313      	orrs	r3, r2
 800cc76:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc7e:	691b      	ldr	r3, [r3, #16]
 800cc80:	69fa      	ldr	r2, [r7, #28]
 800cc82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc86:	f043 030b 	orr.w	r3, r3, #11
 800cc8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	69fa      	ldr	r2, [r7, #28]
 800cc96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc9a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800cc9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6818      	ldr	r0, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ccae:	461a      	mov	r2, r3
 800ccb0:	f008 fd7e 	bl	80157b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	695a      	ldr	r2, [r3, #20]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ccc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f008 fcab 	bl	8015624 <USB_ReadInterrupts>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ccd8:	d123      	bne.n	800cd22 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f008 fd42 	bl	8015768 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f007 fdf2 	bl	80148d2 <USB_GetDevSpeed>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681c      	ldr	r4, [r3, #0]
 800ccfa:	f001 fd9d 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 800ccfe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cd04:	461a      	mov	r2, r3
 800cd06:	4620      	mov	r0, r4
 800cd08:	f007 fafc 	bl	8014304 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f00b ffcc 	bl	8018caa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	695a      	ldr	r2, [r3, #20]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800cd20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f008 fc7c 	bl	8015624 <USB_ReadInterrupts>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	f003 0308 	and.w	r3, r3, #8
 800cd32:	2b08      	cmp	r3, #8
 800cd34:	d10a      	bne.n	800cd4c <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f00b ffa9 	bl	8018c8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	695a      	ldr	r2, [r3, #20]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f002 0208 	and.w	r2, r2, #8
 800cd4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f008 fc67 	bl	8015624 <USB_ReadInterrupts>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd5c:	2b80      	cmp	r3, #128	@ 0x80
 800cd5e:	d123      	bne.n	800cda8 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	699b      	ldr	r3, [r3, #24]
 800cd64:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd68:	6a3b      	ldr	r3, [r7, #32]
 800cd6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd70:	e014      	b.n	800cd9c <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800cd72:	6879      	ldr	r1, [r7, #4]
 800cd74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd76:	4613      	mov	r3, r2
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	4413      	add	r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	440b      	add	r3, r1
 800cd80:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	2b01      	cmp	r3, #1
 800cd88:	d105      	bne.n	800cd96 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	4619      	mov	r1, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fb0a 	bl	800d3aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd98:	3301      	adds	r3, #1
 800cd9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	791b      	ldrb	r3, [r3, #4]
 800cda0:	461a      	mov	r2, r3
 800cda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda4:	4293      	cmp	r3, r2
 800cda6:	d3e4      	bcc.n	800cd72 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4618      	mov	r0, r3
 800cdae:	f008 fc39 	bl	8015624 <USB_ReadInterrupts>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cdb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdbc:	d13c      	bne.n	800ce38 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdc2:	e02b      	b.n	800ce1c <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdd8:	4613      	mov	r3, r2
 800cdda:	00db      	lsls	r3, r3, #3
 800cddc:	4413      	add	r3, r2
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	440b      	add	r3, r1
 800cde2:	3318      	adds	r3, #24
 800cde4:	781b      	ldrb	r3, [r3, #0]
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d115      	bne.n	800ce16 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800cdea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	da12      	bge.n	800ce16 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800cdf0:	6879      	ldr	r1, [r7, #4]
 800cdf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	4413      	add	r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	440b      	add	r3, r1
 800cdfe:	3317      	adds	r3, #23
 800ce00:	2201      	movs	r2, #1
 800ce02:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ce04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	4619      	mov	r1, r3
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 faca 	bl	800d3aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ce16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce18:	3301      	adds	r3, #1
 800ce1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	791b      	ldrb	r3, [r3, #4]
 800ce20:	461a      	mov	r2, r3
 800ce22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d3cd      	bcc.n	800cdc4 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	695a      	ldr	r2, [r3, #20]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ce36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f008 fbf1 	bl	8015624 <USB_ReadInterrupts>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce4c:	d156      	bne.n	800cefc <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ce4e:	2301      	movs	r3, #1
 800ce50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce52:	e045      	b.n	800cee0 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ce54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce56:	015a      	lsls	r2, r3, #5
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce68:	4613      	mov	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	4413      	add	r3, r2
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	440b      	add	r3, r1
 800ce72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d12e      	bne.n	800ceda <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ce7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	da2b      	bge.n	800ceda <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	0c1a      	lsrs	r2, r3, #16
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ce8c:	4053      	eors	r3, r2
 800ce8e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d121      	bne.n	800ceda <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	440b      	add	r3, r1
 800cea4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cea8:	2201      	movs	r2, #1
 800ceaa:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ceac:	6a3b      	ldr	r3, [r7, #32]
 800ceae:	699b      	ldr	r3, [r3, #24]
 800ceb0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ceb4:	6a3b      	ldr	r3, [r7, #32]
 800ceb6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	695b      	ldr	r3, [r3, #20]
 800cebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d10a      	bne.n	800ceda <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	69fa      	ldr	r2, [r7, #28]
 800cece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ced2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ced6:	6053      	str	r3, [r2, #4]
            break;
 800ced8:	e008      	b.n	800ceec <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ceda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cedc:	3301      	adds	r3, #1
 800cede:	627b      	str	r3, [r7, #36]	@ 0x24
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	791b      	ldrb	r3, [r3, #4]
 800cee4:	461a      	mov	r2, r3
 800cee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d3b3      	bcc.n	800ce54 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	695a      	ldr	r2, [r3, #20]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800cefa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f008 fb8f 	bl	8015624 <USB_ReadInterrupts>
 800cf06:	4603      	mov	r3, r0
 800cf08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf10:	d10a      	bne.n	800cf28 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f00b ff4a 	bl	8018dac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	695a      	ldr	r2, [r3, #20]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800cf26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f008 fb79 	bl	8015624 <USB_ReadInterrupts>
 800cf32:	4603      	mov	r3, r0
 800cf34:	f003 0304 	and.w	r3, r3, #4
 800cf38:	2b04      	cmp	r3, #4
 800cf3a:	d115      	bne.n	800cf68 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	f003 0304 	and.w	r3, r3, #4
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d002      	beq.n	800cf54 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f00b ff3a 	bl	8018dc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6859      	ldr	r1, [r3, #4]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	69ba      	ldr	r2, [r7, #24]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	605a      	str	r2, [r3, #4]
 800cf64:	e000      	b.n	800cf68 <HAL_PCD_IRQHandler+0x996>
      return;
 800cf66:	bf00      	nop
    }
  }
}
 800cf68:	3734      	adds	r7, #52	@ 0x34
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd90      	pop	{r4, r7, pc}

0800cf6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b082      	sub	sp, #8
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	460b      	mov	r3, r1
 800cf78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d101      	bne.n	800cf88 <HAL_PCD_SetAddress+0x1a>
 800cf84:	2302      	movs	r3, #2
 800cf86:	e012      	b.n	800cfae <HAL_PCD_SetAddress+0x40>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	78fa      	ldrb	r2, [r7, #3]
 800cf9c:	4611      	mov	r1, r2
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f008 fad8 	bl	8015554 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cfb6:	b580      	push	{r7, lr}
 800cfb8:	b084      	sub	sp, #16
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	4608      	mov	r0, r1
 800cfc0:	4611      	mov	r1, r2
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	70fb      	strb	r3, [r7, #3]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	803b      	strh	r3, [r7, #0]
 800cfcc:	4613      	mov	r3, r2
 800cfce:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cfd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	da0f      	bge.n	800cffc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	f003 020f 	and.w	r2, r3, #15
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	00db      	lsls	r3, r3, #3
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	3310      	adds	r3, #16
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	4413      	add	r3, r2
 800cff0:	3304      	adds	r3, #4
 800cff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2201      	movs	r2, #1
 800cff8:	705a      	strb	r2, [r3, #1]
 800cffa:	e00f      	b.n	800d01c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cffc:	78fb      	ldrb	r3, [r7, #3]
 800cffe:	f003 020f 	and.w	r2, r3, #15
 800d002:	4613      	mov	r3, r2
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	4413      	add	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	4413      	add	r3, r2
 800d012:	3304      	adds	r3, #4
 800d014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d01c:	78fb      	ldrb	r3, [r7, #3]
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	b2da      	uxtb	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800d028:	883b      	ldrh	r3, [r7, #0]
 800d02a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	78ba      	ldrb	r2, [r7, #2]
 800d036:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	785b      	ldrb	r3, [r3, #1]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d004      	beq.n	800d04a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	461a      	mov	r2, r3
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d04a:	78bb      	ldrb	r3, [r7, #2]
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d102      	bne.n	800d056 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2200      	movs	r2, #0
 800d054:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d101      	bne.n	800d064 <HAL_PCD_EP_Open+0xae>
 800d060:	2302      	movs	r3, #2
 800d062:	e00e      	b.n	800d082 <HAL_PCD_EP_Open+0xcc>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	68f9      	ldr	r1, [r7, #12]
 800d072:	4618      	mov	r0, r3
 800d074:	f007 fc52 	bl	801491c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d080:	7afb      	ldrb	r3, [r7, #11]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}

0800d08a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b084      	sub	sp, #16
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	460b      	mov	r3, r1
 800d094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	da0f      	bge.n	800d0be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d09e:	78fb      	ldrb	r3, [r7, #3]
 800d0a0:	f003 020f 	and.w	r2, r3, #15
 800d0a4:	4613      	mov	r3, r2
 800d0a6:	00db      	lsls	r3, r3, #3
 800d0a8:	4413      	add	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	3310      	adds	r3, #16
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	3304      	adds	r3, #4
 800d0b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	705a      	strb	r2, [r3, #1]
 800d0bc:	e00f      	b.n	800d0de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0be:	78fb      	ldrb	r3, [r7, #3]
 800d0c0:	f003 020f 	and.w	r2, r3, #15
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	00db      	lsls	r3, r3, #3
 800d0c8:	4413      	add	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	4413      	add	r3, r2
 800d0d4:	3304      	adds	r3, #4
 800d0d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0de:	78fb      	ldrb	r3, [r7, #3]
 800d0e0:	f003 030f 	and.w	r3, r3, #15
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d101      	bne.n	800d0f8 <HAL_PCD_EP_Close+0x6e>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e00e      	b.n	800d116 <HAL_PCD_EP_Close+0x8c>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68f9      	ldr	r1, [r7, #12]
 800d106:	4618      	mov	r0, r3
 800d108:	f007 fc90 	bl	8014a2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b086      	sub	sp, #24
 800d122:	af00      	add	r7, sp, #0
 800d124:	60f8      	str	r0, [r7, #12]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
 800d12a:	460b      	mov	r3, r1
 800d12c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d12e:	7afb      	ldrb	r3, [r7, #11]
 800d130:	f003 020f 	and.w	r2, r3, #15
 800d134:	4613      	mov	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	4413      	add	r3, r2
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	4413      	add	r3, r2
 800d144:	3304      	adds	r3, #4
 800d146:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2200      	movs	r2, #0
 800d158:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	2200      	movs	r2, #0
 800d15e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d160:	7afb      	ldrb	r3, [r7, #11]
 800d162:	f003 030f 	and.w	r3, r3, #15
 800d166:	b2da      	uxtb	r2, r3
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	799b      	ldrb	r3, [r3, #6]
 800d170:	2b01      	cmp	r3, #1
 800d172:	d102      	bne.n	800d17a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6818      	ldr	r0, [r3, #0]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	799b      	ldrb	r3, [r3, #6]
 800d182:	461a      	mov	r2, r3
 800d184:	6979      	ldr	r1, [r7, #20]
 800d186:	f007 fd2d 	bl	8014be4 <USB_EPStartXfer>

  return HAL_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3718      	adds	r7, #24
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	460b      	mov	r3, r1
 800d19e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d1a0:	78fb      	ldrb	r3, [r7, #3]
 800d1a2:	f003 020f 	and.w	r2, r3, #15
 800d1a6:	6879      	ldr	r1, [r7, #4]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	4413      	add	r3, r2
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	440b      	add	r3, r1
 800d1b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d1b6:	681b      	ldr	r3, [r3, #0]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	60f8      	str	r0, [r7, #12]
 800d1cc:	607a      	str	r2, [r7, #4]
 800d1ce:	603b      	str	r3, [r7, #0]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1d4:	7afb      	ldrb	r3, [r7, #11]
 800d1d6:	f003 020f 	and.w	r2, r3, #15
 800d1da:	4613      	mov	r3, r2
 800d1dc:	00db      	lsls	r3, r3, #3
 800d1de:	4413      	add	r3, r2
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	3310      	adds	r3, #16
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	4413      	add	r3, r2
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	2201      	movs	r2, #1
 800d202:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d204:	7afb      	ldrb	r3, [r7, #11]
 800d206:	f003 030f 	and.w	r3, r3, #15
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	799b      	ldrb	r3, [r3, #6]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d102      	bne.n	800d21e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	799b      	ldrb	r3, [r3, #6]
 800d226:	461a      	mov	r2, r3
 800d228:	6979      	ldr	r1, [r7, #20]
 800d22a:	f007 fcdb 	bl	8014be4 <USB_EPStartXfer>

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	460b      	mov	r3, r1
 800d242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d244:	78fb      	ldrb	r3, [r7, #3]
 800d246:	f003 030f 	and.w	r3, r3, #15
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	7912      	ldrb	r2, [r2, #4]
 800d24e:	4293      	cmp	r3, r2
 800d250:	d901      	bls.n	800d256 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	e04f      	b.n	800d2f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	da0f      	bge.n	800d27e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	f003 020f 	and.w	r2, r3, #15
 800d264:	4613      	mov	r3, r2
 800d266:	00db      	lsls	r3, r3, #3
 800d268:	4413      	add	r3, r2
 800d26a:	009b      	lsls	r3, r3, #2
 800d26c:	3310      	adds	r3, #16
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	4413      	add	r3, r2
 800d272:	3304      	adds	r3, #4
 800d274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2201      	movs	r2, #1
 800d27a:	705a      	strb	r2, [r3, #1]
 800d27c:	e00d      	b.n	800d29a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d27e:	78fa      	ldrb	r2, [r7, #3]
 800d280:	4613      	mov	r3, r2
 800d282:	00db      	lsls	r3, r3, #3
 800d284:	4413      	add	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	4413      	add	r3, r2
 800d290:	3304      	adds	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2a0:	78fb      	ldrb	r3, [r7, #3]
 800d2a2:	f003 030f 	and.w	r3, r3, #15
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d101      	bne.n	800d2ba <HAL_PCD_EP_SetStall+0x82>
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	e01d      	b.n	800d2f6 <HAL_PCD_EP_SetStall+0xbe>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	68f9      	ldr	r1, [r7, #12]
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f008 f86f 	bl	80153ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d2ce:	78fb      	ldrb	r3, [r7, #3]
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d109      	bne.n	800d2ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6818      	ldr	r0, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7999      	ldrb	r1, [r3, #6]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f008 fa62 	bl	80157b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	3710      	adds	r7, #16
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}

0800d2fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d2fe:	b580      	push	{r7, lr}
 800d300:	b084      	sub	sp, #16
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	460b      	mov	r3, r1
 800d308:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d30a:	78fb      	ldrb	r3, [r7, #3]
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	7912      	ldrb	r2, [r2, #4]
 800d314:	4293      	cmp	r3, r2
 800d316:	d901      	bls.n	800d31c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e042      	b.n	800d3a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d320:	2b00      	cmp	r3, #0
 800d322:	da0f      	bge.n	800d344 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d324:	78fb      	ldrb	r3, [r7, #3]
 800d326:	f003 020f 	and.w	r2, r3, #15
 800d32a:	4613      	mov	r3, r2
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	4413      	add	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	3310      	adds	r3, #16
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4413      	add	r3, r2
 800d338:	3304      	adds	r3, #4
 800d33a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2201      	movs	r2, #1
 800d340:	705a      	strb	r2, [r3, #1]
 800d342:	e00f      	b.n	800d364 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d344:	78fb      	ldrb	r3, [r7, #3]
 800d346:	f003 020f 	and.w	r2, r3, #15
 800d34a:	4613      	mov	r3, r2
 800d34c:	00db      	lsls	r3, r3, #3
 800d34e:	4413      	add	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	4413      	add	r3, r2
 800d35a:	3304      	adds	r3, #4
 800d35c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	2200      	movs	r2, #0
 800d362:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	f003 030f 	and.w	r3, r3, #15
 800d370:	b2da      	uxtb	r2, r3
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d101      	bne.n	800d384 <HAL_PCD_EP_ClrStall+0x86>
 800d380:	2302      	movs	r3, #2
 800d382:	e00e      	b.n	800d3a2 <HAL_PCD_EP_ClrStall+0xa4>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2201      	movs	r2, #1
 800d388:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	68f9      	ldr	r1, [r7, #12]
 800d392:	4618      	mov	r0, r3
 800d394:	f008 f878 	bl	8015488 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b084      	sub	sp, #16
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d3b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	da0c      	bge.n	800d3d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3be:	78fb      	ldrb	r3, [r7, #3]
 800d3c0:	f003 020f 	and.w	r2, r3, #15
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	00db      	lsls	r3, r3, #3
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	3310      	adds	r3, #16
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	60fb      	str	r3, [r7, #12]
 800d3d6:	e00c      	b.n	800d3f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3d8:	78fb      	ldrb	r3, [r7, #3]
 800d3da:	f003 020f 	and.w	r2, r3, #15
 800d3de:	4613      	mov	r3, r2
 800d3e0:	00db      	lsls	r3, r3, #3
 800d3e2:	4413      	add	r3, r2
 800d3e4:	009b      	lsls	r3, r3, #2
 800d3e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	3304      	adds	r3, #4
 800d3f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	68f9      	ldr	r1, [r7, #12]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f007 fe97 	bl	801512c <USB_EPStopXfer>
 800d3fe:	4603      	mov	r3, r0
 800d400:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d402:	7afb      	ldrb	r3, [r7, #11]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3710      	adds	r7, #16
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b08a      	sub	sp, #40	@ 0x28
 800d410:	af02      	add	r7, sp, #8
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d420:	683a      	ldr	r2, [r7, #0]
 800d422:	4613      	mov	r3, r2
 800d424:	00db      	lsls	r3, r3, #3
 800d426:	4413      	add	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	3310      	adds	r3, #16
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4413      	add	r3, r2
 800d430:	3304      	adds	r3, #4
 800d432:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	695a      	ldr	r2, [r3, #20]
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	691b      	ldr	r3, [r3, #16]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d901      	bls.n	800d444 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d440:	2301      	movs	r3, #1
 800d442:	e06b      	b.n	800d51c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	691a      	ldr	r2, [r3, #16]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	695b      	ldr	r3, [r3, #20]
 800d44c:	1ad3      	subs	r3, r2, r3
 800d44e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	69fa      	ldr	r2, [r7, #28]
 800d456:	429a      	cmp	r2, r3
 800d458:	d902      	bls.n	800d460 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	689b      	ldr	r3, [r3, #8]
 800d45e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	3303      	adds	r3, #3
 800d464:	089b      	lsrs	r3, r3, #2
 800d466:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d468:	e02a      	b.n	800d4c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	691a      	ldr	r2, [r3, #16]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	1ad3      	subs	r3, r2, r3
 800d474:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	69fa      	ldr	r2, [r7, #28]
 800d47c:	429a      	cmp	r2, r3
 800d47e:	d902      	bls.n	800d486 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	3303      	adds	r3, #3
 800d48a:	089b      	lsrs	r3, r3, #2
 800d48c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	68d9      	ldr	r1, [r3, #12]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	b2da      	uxtb	r2, r3
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d49e:	9300      	str	r3, [sp, #0]
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	6978      	ldr	r0, [r7, #20]
 800d4a4:	f007 feec 	bl	8015280 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	441a      	add	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	695a      	ldr	r2, [r3, #20]
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	441a      	add	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	015a      	lsls	r2, r3, #5
 800d4c4:	693b      	ldr	r3, [r7, #16]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4cc:	699b      	ldr	r3, [r3, #24]
 800d4ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d4d0:	69ba      	ldr	r2, [r7, #24]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d809      	bhi.n	800d4ea <PCD_WriteEmptyTxFifo+0xde>
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	695a      	ldr	r2, [r3, #20]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d203      	bcs.n	800d4ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	691b      	ldr	r3, [r3, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1bf      	bne.n	800d46a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	691a      	ldr	r2, [r3, #16]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d811      	bhi.n	800d51a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	2201      	movs	r2, #1
 800d4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d502:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d50a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	43db      	mvns	r3, r3
 800d510:	6939      	ldr	r1, [r7, #16]
 800d512:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d516:	4013      	ands	r3, r2
 800d518:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d51a:	2300      	movs	r3, #0
}
 800d51c:	4618      	mov	r0, r3
 800d51e:	3720      	adds	r7, #32
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}

0800d524 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b088      	sub	sp, #32
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	333c      	adds	r3, #60	@ 0x3c
 800d53c:	3304      	adds	r3, #4
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	015a      	lsls	r2, r3, #5
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	4413      	add	r3, r2
 800d54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d54e:	689b      	ldr	r3, [r3, #8]
 800d550:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	799b      	ldrb	r3, [r3, #6]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d17b      	bne.n	800d652 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	f003 0308 	and.w	r3, r3, #8
 800d560:	2b00      	cmp	r3, #0
 800d562:	d015      	beq.n	800d590 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	4a61      	ldr	r2, [pc, #388]	@ (800d6ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	f240 80b9 	bls.w	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d574:	2b00      	cmp	r3, #0
 800d576:	f000 80b3 	beq.w	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	015a      	lsls	r2, r3, #5
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	4413      	add	r3, r2
 800d582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d586:	461a      	mov	r2, r3
 800d588:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d58c:	6093      	str	r3, [r2, #8]
 800d58e:	e0a7      	b.n	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d009      	beq.n	800d5ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	015a      	lsls	r2, r3, #5
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	2320      	movs	r3, #32
 800d5aa:	6093      	str	r3, [r2, #8]
 800d5ac:	e098      	b.n	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f040 8093 	bne.w	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	4a4b      	ldr	r2, [pc, #300]	@ (800d6ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d90f      	bls.n	800d5e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5d8:	461a      	mov	r2, r3
 800d5da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5de:	6093      	str	r3, [r2, #8]
 800d5e0:	e07e      	b.n	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d5e2:	683a      	ldr	r2, [r7, #0]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	6a1a      	ldr	r2, [r3, #32]
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	0159      	lsls	r1, r3, #5
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	440b      	add	r3, r1
 800d604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d608:	691b      	ldr	r3, [r3, #16]
 800d60a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d60e:	1ad2      	subs	r2, r2, r3
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d114      	bne.n	800d644 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d109      	bne.n	800d636 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6818      	ldr	r0, [r3, #0]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d62c:	461a      	mov	r2, r3
 800d62e:	2101      	movs	r1, #1
 800d630:	f008 f8be 	bl	80157b0 <USB_EP0_OutStart>
 800d634:	e006      	b.n	800d644 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	695b      	ldr	r3, [r3, #20]
 800d63e:	441a      	add	r2, r3
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	b2db      	uxtb	r3, r3
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f00b faea 	bl	8018c24 <HAL_PCD_DataOutStageCallback>
 800d650:	e046      	b.n	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	4a26      	ldr	r2, [pc, #152]	@ (800d6f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d124      	bne.n	800d6a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00a      	beq.n	800d67a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	015a      	lsls	r2, r3, #5
 800d668:	69bb      	ldr	r3, [r7, #24]
 800d66a:	4413      	add	r3, r2
 800d66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d670:	461a      	mov	r2, r3
 800d672:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d676:	6093      	str	r3, [r2, #8]
 800d678:	e032      	b.n	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	f003 0320 	and.w	r3, r3, #32
 800d680:	2b00      	cmp	r3, #0
 800d682:	d008      	beq.n	800d696 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	015a      	lsls	r2, r3, #5
 800d688:	69bb      	ldr	r3, [r7, #24]
 800d68a:	4413      	add	r3, r2
 800d68c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d690:	461a      	mov	r2, r3
 800d692:	2320      	movs	r3, #32
 800d694:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	4619      	mov	r1, r3
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f00b fac1 	bl	8018c24 <HAL_PCD_DataOutStageCallback>
 800d6a2:	e01d      	b.n	800d6e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d114      	bne.n	800d6d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d6aa:	6879      	ldr	r1, [r7, #4]
 800d6ac:	683a      	ldr	r2, [r7, #0]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	4413      	add	r3, r2
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	440b      	add	r3, r1
 800d6b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d108      	bne.n	800d6d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6818      	ldr	r0, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	f008 f86e 	bl	80157b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f00b faa2 	bl	8018c24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	4f54300a 	.word	0x4f54300a
 800d6f0:	4f54310a 	.word	0x4f54310a

0800d6f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	333c      	adds	r3, #60	@ 0x3c
 800d70c:	3304      	adds	r3, #4
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	015a      	lsls	r2, r3, #5
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	4413      	add	r3, r2
 800d71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4a15      	ldr	r2, [pc, #84]	@ (800d77c <PCD_EP_OutSetupPacket_int+0x88>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d90e      	bls.n	800d748 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d730:	2b00      	cmp	r3, #0
 800d732:	d009      	beq.n	800d748 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	015a      	lsls	r2, r3, #5
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	4413      	add	r3, r2
 800d73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d740:	461a      	mov	r2, r3
 800d742:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d746:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f00b fa59 	bl	8018c00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	4a0a      	ldr	r2, [pc, #40]	@ (800d77c <PCD_EP_OutSetupPacket_int+0x88>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d90c      	bls.n	800d770 <PCD_EP_OutSetupPacket_int+0x7c>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	799b      	ldrb	r3, [r3, #6]
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d108      	bne.n	800d770 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d768:	461a      	mov	r2, r3
 800d76a:	2101      	movs	r1, #1
 800d76c:	f008 f820 	bl	80157b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3718      	adds	r7, #24
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	4f54300a 	.word	0x4f54300a

0800d780 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	460b      	mov	r3, r1
 800d78a:	70fb      	strb	r3, [r7, #3]
 800d78c:	4613      	mov	r3, r2
 800d78e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d796:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d798:	78fb      	ldrb	r3, [r7, #3]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d107      	bne.n	800d7ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d79e:	883b      	ldrh	r3, [r7, #0]
 800d7a0:	0419      	lsls	r1, r3, #16
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	68ba      	ldr	r2, [r7, #8]
 800d7a8:	430a      	orrs	r2, r1
 800d7aa:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7ac:	e028      	b.n	800d800 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7b4:	0c1b      	lsrs	r3, r3, #16
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7bc:	2300      	movs	r3, #0
 800d7be:	73fb      	strb	r3, [r7, #15]
 800d7c0:	e00d      	b.n	800d7de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	7bfb      	ldrb	r3, [r7, #15]
 800d7c8:	3340      	adds	r3, #64	@ 0x40
 800d7ca:	009b      	lsls	r3, r3, #2
 800d7cc:	4413      	add	r3, r2
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	0c1b      	lsrs	r3, r3, #16
 800d7d2:	68ba      	ldr	r2, [r7, #8]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	73fb      	strb	r3, [r7, #15]
 800d7de:	7bfa      	ldrb	r2, [r7, #15]
 800d7e0:	78fb      	ldrb	r3, [r7, #3]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d3ec      	bcc.n	800d7c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d7e8:	883b      	ldrh	r3, [r7, #0]
 800d7ea:	0418      	lsls	r0, r3, #16
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6819      	ldr	r1, [r3, #0]
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	4302      	orrs	r2, r0
 800d7f8:	3340      	adds	r3, #64	@ 0x40
 800d7fa:	009b      	lsls	r3, r3, #2
 800d7fc:	440b      	add	r3, r1
 800d7fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	460b      	mov	r3, r1
 800d818:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	887a      	ldrh	r2, [r7, #2]
 800d820:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d85e:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <HAL_PCDEx_ActivateLPM+0x44>)
 800d860:	4313      	orrs	r3, r2
 800d862:	68fa      	ldr	r2, [r7, #12]
 800d864:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d866:	2300      	movs	r3, #0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr
 800d874:	10000003 	.word	0x10000003

0800d878 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	460b      	mov	r3, r1
 800d882:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d898:	4b19      	ldr	r3, [pc, #100]	@ (800d900 <HAL_PWREx_ConfigSupply+0x70>)
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	f003 0304 	and.w	r3, r3, #4
 800d8a0:	2b04      	cmp	r3, #4
 800d8a2:	d00a      	beq.n	800d8ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d8a4:	4b16      	ldr	r3, [pc, #88]	@ (800d900 <HAL_PWREx_ConfigSupply+0x70>)
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	f003 0307 	and.w	r3, r3, #7
 800d8ac:	687a      	ldr	r2, [r7, #4]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d001      	beq.n	800d8b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e01f      	b.n	800d8f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e01d      	b.n	800d8f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d8ba:	4b11      	ldr	r3, [pc, #68]	@ (800d900 <HAL_PWREx_ConfigSupply+0x70>)
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	f023 0207 	bic.w	r2, r3, #7
 800d8c2:	490f      	ldr	r1, [pc, #60]	@ (800d900 <HAL_PWREx_ConfigSupply+0x70>)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d8ca:	f7f5 f9a9 	bl	8002c20 <HAL_GetTick>
 800d8ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8d0:	e009      	b.n	800d8e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d8d2:	f7f5 f9a5 	bl	8002c20 <HAL_GetTick>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d8e0:	d901      	bls.n	800d8e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e007      	b.n	800d8f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8e6:	4b06      	ldr	r3, [pc, #24]	@ (800d900 <HAL_PWREx_ConfigSupply+0x70>)
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d8ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8f2:	d1ee      	bne.n	800d8d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d8f4:	2300      	movs	r3, #0
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	58024800 	.word	0x58024800

0800d904 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d908:	4b05      	ldr	r3, [pc, #20]	@ (800d920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	4a04      	ldr	r2, [pc, #16]	@ (800d920 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d90e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d912:	60d3      	str	r3, [r2, #12]
}
 800d914:	bf00      	nop
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	58024800 	.word	0x58024800

0800d924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b08c      	sub	sp, #48	@ 0x30
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d102      	bne.n	800d938 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	f000 bc48 	b.w	800e1c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f003 0301 	and.w	r3, r3, #1
 800d940:	2b00      	cmp	r3, #0
 800d942:	f000 8088 	beq.w	800da56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d946:	4b99      	ldr	r3, [pc, #612]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d94e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d950:	4b96      	ldr	r3, [pc, #600]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d954:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d958:	2b10      	cmp	r3, #16
 800d95a:	d007      	beq.n	800d96c <HAL_RCC_OscConfig+0x48>
 800d95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d95e:	2b18      	cmp	r3, #24
 800d960:	d111      	bne.n	800d986 <HAL_RCC_OscConfig+0x62>
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	f003 0303 	and.w	r3, r3, #3
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d10c      	bne.n	800d986 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d96c:	4b8f      	ldr	r3, [pc, #572]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d06d      	beq.n	800da54 <HAL_RCC_OscConfig+0x130>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d169      	bne.n	800da54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d980:	2301      	movs	r3, #1
 800d982:	f000 bc21 	b.w	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d98e:	d106      	bne.n	800d99e <HAL_RCC_OscConfig+0x7a>
 800d990:	4b86      	ldr	r3, [pc, #536]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a85      	ldr	r2, [pc, #532]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	e02e      	b.n	800d9fc <HAL_RCC_OscConfig+0xd8>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d10c      	bne.n	800d9c0 <HAL_RCC_OscConfig+0x9c>
 800d9a6:	4b81      	ldr	r3, [pc, #516]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a80      	ldr	r2, [pc, #512]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	4b7e      	ldr	r3, [pc, #504]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a7d      	ldr	r2, [pc, #500]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d9bc:	6013      	str	r3, [r2, #0]
 800d9be:	e01d      	b.n	800d9fc <HAL_RCC_OscConfig+0xd8>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9c8:	d10c      	bne.n	800d9e4 <HAL_RCC_OscConfig+0xc0>
 800d9ca:	4b78      	ldr	r3, [pc, #480]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a77      	ldr	r2, [pc, #476]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d9d4:	6013      	str	r3, [r2, #0]
 800d9d6:	4b75      	ldr	r3, [pc, #468]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4a74      	ldr	r2, [pc, #464]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9e0:	6013      	str	r3, [r2, #0]
 800d9e2:	e00b      	b.n	800d9fc <HAL_RCC_OscConfig+0xd8>
 800d9e4:	4b71      	ldr	r3, [pc, #452]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a70      	ldr	r2, [pc, #448]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d9ee:	6013      	str	r3, [r2, #0]
 800d9f0:	4b6e      	ldr	r3, [pc, #440]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	4a6d      	ldr	r2, [pc, #436]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800d9f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d9fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d013      	beq.n	800da2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da04:	f7f5 f90c 	bl	8002c20 <HAL_GetTick>
 800da08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da0a:	e008      	b.n	800da1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da0c:	f7f5 f908 	bl	8002c20 <HAL_GetTick>
 800da10:	4602      	mov	r2, r0
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	1ad3      	subs	r3, r2, r3
 800da16:	2b64      	cmp	r3, #100	@ 0x64
 800da18:	d901      	bls.n	800da1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da1a:	2303      	movs	r3, #3
 800da1c:	e3d4      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da1e:	4b63      	ldr	r3, [pc, #396]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0f0      	beq.n	800da0c <HAL_RCC_OscConfig+0xe8>
 800da2a:	e014      	b.n	800da56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da2c:	f7f5 f8f8 	bl	8002c20 <HAL_GetTick>
 800da30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da32:	e008      	b.n	800da46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da34:	f7f5 f8f4 	bl	8002c20 <HAL_GetTick>
 800da38:	4602      	mov	r2, r0
 800da3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	2b64      	cmp	r3, #100	@ 0x64
 800da40:	d901      	bls.n	800da46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800da42:	2303      	movs	r3, #3
 800da44:	e3c0      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da46:	4b59      	ldr	r3, [pc, #356]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d1f0      	bne.n	800da34 <HAL_RCC_OscConfig+0x110>
 800da52:	e000      	b.n	800da56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 0302 	and.w	r3, r3, #2
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f000 80ca 	beq.w	800dbf8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da64:	4b51      	ldr	r3, [pc, #324]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da6e:	4b4f      	ldr	r3, [pc, #316]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800da70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800da74:	6a3b      	ldr	r3, [r7, #32]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d007      	beq.n	800da8a <HAL_RCC_OscConfig+0x166>
 800da7a:	6a3b      	ldr	r3, [r7, #32]
 800da7c:	2b18      	cmp	r3, #24
 800da7e:	d156      	bne.n	800db2e <HAL_RCC_OscConfig+0x20a>
 800da80:	69fb      	ldr	r3, [r7, #28]
 800da82:	f003 0303 	and.w	r3, r3, #3
 800da86:	2b00      	cmp	r3, #0
 800da88:	d151      	bne.n	800db2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800da8a:	4b48      	ldr	r3, [pc, #288]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 0304 	and.w	r3, r3, #4
 800da92:	2b00      	cmp	r3, #0
 800da94:	d005      	beq.n	800daa2 <HAL_RCC_OscConfig+0x17e>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	68db      	ldr	r3, [r3, #12]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d101      	bne.n	800daa2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	e392      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800daa2:	4b42      	ldr	r3, [pc, #264]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f023 0219 	bic.w	r2, r3, #25
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	493f      	ldr	r1, [pc, #252]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800dab0:	4313      	orrs	r3, r2
 800dab2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dab4:	f7f5 f8b4 	bl	8002c20 <HAL_GetTick>
 800dab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800daba:	e008      	b.n	800dace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dabc:	f7f5 f8b0 	bl	8002c20 <HAL_GetTick>
 800dac0:	4602      	mov	r2, r0
 800dac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d901      	bls.n	800dace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800daca:	2303      	movs	r3, #3
 800dacc:	e37c      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dace:	4b37      	ldr	r3, [pc, #220]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f003 0304 	and.w	r3, r3, #4
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d0f0      	beq.n	800dabc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dada:	f7f5 f8d1 	bl	8002c80 <HAL_GetREVID>
 800dade:	4603      	mov	r3, r0
 800dae0:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d817      	bhi.n	800db18 <HAL_RCC_OscConfig+0x1f4>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	2b40      	cmp	r3, #64	@ 0x40
 800daee:	d108      	bne.n	800db02 <HAL_RCC_OscConfig+0x1de>
 800daf0:	4b2e      	ldr	r3, [pc, #184]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800daf8:	4a2c      	ldr	r2, [pc, #176]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800dafa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dafe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db00:	e07a      	b.n	800dbf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db02:	4b2a      	ldr	r3, [pc, #168]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	031b      	lsls	r3, r3, #12
 800db10:	4926      	ldr	r1, [pc, #152]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db12:	4313      	orrs	r3, r2
 800db14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db16:	e06f      	b.n	800dbf8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db18:	4b24      	ldr	r3, [pc, #144]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	061b      	lsls	r3, r3, #24
 800db26:	4921      	ldr	r1, [pc, #132]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db28:	4313      	orrs	r3, r2
 800db2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db2c:	e064      	b.n	800dbf8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d047      	beq.n	800dbc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800db36:	4b1d      	ldr	r3, [pc, #116]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f023 0219 	bic.w	r2, r3, #25
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	491a      	ldr	r1, [pc, #104]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db44:	4313      	orrs	r3, r2
 800db46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db48:	f7f5 f86a 	bl	8002c20 <HAL_GetTick>
 800db4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db4e:	e008      	b.n	800db62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db50:	f7f5 f866 	bl	8002c20 <HAL_GetTick>
 800db54:	4602      	mov	r2, r0
 800db56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db58:	1ad3      	subs	r3, r2, r3
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d901      	bls.n	800db62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800db5e:	2303      	movs	r3, #3
 800db60:	e332      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db62:	4b12      	ldr	r3, [pc, #72]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0304 	and.w	r3, r3, #4
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0f0      	beq.n	800db50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db6e:	f7f5 f887 	bl	8002c80 <HAL_GetREVID>
 800db72:	4603      	mov	r3, r0
 800db74:	f241 0203 	movw	r2, #4099	@ 0x1003
 800db78:	4293      	cmp	r3, r2
 800db7a:	d819      	bhi.n	800dbb0 <HAL_RCC_OscConfig+0x28c>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	2b40      	cmp	r3, #64	@ 0x40
 800db82:	d108      	bne.n	800db96 <HAL_RCC_OscConfig+0x272>
 800db84:	4b09      	ldr	r3, [pc, #36]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db86:	685b      	ldr	r3, [r3, #4]
 800db88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800db8c:	4a07      	ldr	r2, [pc, #28]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db92:	6053      	str	r3, [r2, #4]
 800db94:	e030      	b.n	800dbf8 <HAL_RCC_OscConfig+0x2d4>
 800db96:	4b05      	ldr	r3, [pc, #20]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	031b      	lsls	r3, r3, #12
 800dba4:	4901      	ldr	r1, [pc, #4]	@ (800dbac <HAL_RCC_OscConfig+0x288>)
 800dba6:	4313      	orrs	r3, r2
 800dba8:	604b      	str	r3, [r1, #4]
 800dbaa:	e025      	b.n	800dbf8 <HAL_RCC_OscConfig+0x2d4>
 800dbac:	58024400 	.word	0x58024400
 800dbb0:	4b9a      	ldr	r3, [pc, #616]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	061b      	lsls	r3, r3, #24
 800dbbe:	4997      	ldr	r1, [pc, #604]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	604b      	str	r3, [r1, #4]
 800dbc4:	e018      	b.n	800dbf8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbc6:	4b95      	ldr	r3, [pc, #596]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a94      	ldr	r2, [pc, #592]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dbcc:	f023 0301 	bic.w	r3, r3, #1
 800dbd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbd2:	f7f5 f825 	bl	8002c20 <HAL_GetTick>
 800dbd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dbd8:	e008      	b.n	800dbec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dbda:	f7f5 f821 	bl	8002c20 <HAL_GetTick>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe2:	1ad3      	subs	r3, r2, r3
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d901      	bls.n	800dbec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	e2ed      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dbec:	4b8b      	ldr	r3, [pc, #556]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1f0      	bne.n	800dbda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f003 0310 	and.w	r3, r3, #16
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 80a9 	beq.w	800dd58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc06:	4b85      	ldr	r3, [pc, #532]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc08:	691b      	ldr	r3, [r3, #16]
 800dc0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc0e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dc10:	4b82      	ldr	r3, [pc, #520]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc14:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	2b08      	cmp	r3, #8
 800dc1a:	d007      	beq.n	800dc2c <HAL_RCC_OscConfig+0x308>
 800dc1c:	69bb      	ldr	r3, [r7, #24]
 800dc1e:	2b18      	cmp	r3, #24
 800dc20:	d13a      	bne.n	800dc98 <HAL_RCC_OscConfig+0x374>
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	f003 0303 	and.w	r3, r3, #3
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d135      	bne.n	800dc98 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc2c:	4b7b      	ldr	r3, [pc, #492]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d005      	beq.n	800dc44 <HAL_RCC_OscConfig+0x320>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	69db      	ldr	r3, [r3, #28]
 800dc3c:	2b80      	cmp	r3, #128	@ 0x80
 800dc3e:	d001      	beq.n	800dc44 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	e2c1      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc44:	f7f5 f81c 	bl	8002c80 <HAL_GetREVID>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d817      	bhi.n	800dc82 <HAL_RCC_OscConfig+0x35e>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a1b      	ldr	r3, [r3, #32]
 800dc56:	2b20      	cmp	r3, #32
 800dc58:	d108      	bne.n	800dc6c <HAL_RCC_OscConfig+0x348>
 800dc5a:	4b70      	ldr	r3, [pc, #448]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800dc62:	4a6e      	ldr	r2, [pc, #440]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc68:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc6a:	e075      	b.n	800dd58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc6c:	4b6b      	ldr	r3, [pc, #428]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a1b      	ldr	r3, [r3, #32]
 800dc78:	069b      	lsls	r3, r3, #26
 800dc7a:	4968      	ldr	r1, [pc, #416]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc7c:	4313      	orrs	r3, r2
 800dc7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc80:	e06a      	b.n	800dd58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc82:	4b66      	ldr	r3, [pc, #408]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a1b      	ldr	r3, [r3, #32]
 800dc8e:	061b      	lsls	r3, r3, #24
 800dc90:	4962      	ldr	r1, [pc, #392]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dc92:	4313      	orrs	r3, r2
 800dc94:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc96:	e05f      	b.n	800dd58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	69db      	ldr	r3, [r3, #28]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d042      	beq.n	800dd26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dca0:	4b5e      	ldr	r3, [pc, #376]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a5d      	ldr	r2, [pc, #372]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcac:	f7f4 ffb8 	bl	8002c20 <HAL_GetTick>
 800dcb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dcb2:	e008      	b.n	800dcc6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dcb4:	f7f4 ffb4 	bl	8002c20 <HAL_GetTick>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d901      	bls.n	800dcc6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800dcc2:	2303      	movs	r3, #3
 800dcc4:	e280      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dcc6:	4b55      	ldr	r3, [pc, #340]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0f0      	beq.n	800dcb4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dcd2:	f7f4 ffd5 	bl	8002c80 <HAL_GetREVID>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d817      	bhi.n	800dd10 <HAL_RCC_OscConfig+0x3ec>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6a1b      	ldr	r3, [r3, #32]
 800dce4:	2b20      	cmp	r3, #32
 800dce6:	d108      	bne.n	800dcfa <HAL_RCC_OscConfig+0x3d6>
 800dce8:	4b4c      	ldr	r3, [pc, #304]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800dcf0:	4a4a      	ldr	r2, [pc, #296]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dcf2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dcf6:	6053      	str	r3, [r2, #4]
 800dcf8:	e02e      	b.n	800dd58 <HAL_RCC_OscConfig+0x434>
 800dcfa:	4b48      	ldr	r3, [pc, #288]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	069b      	lsls	r3, r3, #26
 800dd08:	4944      	ldr	r1, [pc, #272]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd0a:	4313      	orrs	r3, r2
 800dd0c:	604b      	str	r3, [r1, #4]
 800dd0e:	e023      	b.n	800dd58 <HAL_RCC_OscConfig+0x434>
 800dd10:	4b42      	ldr	r3, [pc, #264]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6a1b      	ldr	r3, [r3, #32]
 800dd1c:	061b      	lsls	r3, r3, #24
 800dd1e:	493f      	ldr	r1, [pc, #252]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd20:	4313      	orrs	r3, r2
 800dd22:	60cb      	str	r3, [r1, #12]
 800dd24:	e018      	b.n	800dd58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dd26:	4b3d      	ldr	r3, [pc, #244]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	4a3c      	ldr	r2, [pc, #240]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd32:	f7f4 ff75 	bl	8002c20 <HAL_GetTick>
 800dd36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dd38:	e008      	b.n	800dd4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dd3a:	f7f4 ff71 	bl	8002c20 <HAL_GetTick>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	1ad3      	subs	r3, r2, r3
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d901      	bls.n	800dd4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dd48:	2303      	movs	r3, #3
 800dd4a:	e23d      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dd4c:	4b33      	ldr	r3, [pc, #204]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1f0      	bne.n	800dd3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f003 0308 	and.w	r3, r3, #8
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d036      	beq.n	800ddd2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d019      	beq.n	800dda0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd6c:	4b2b      	ldr	r3, [pc, #172]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd70:	4a2a      	ldr	r2, [pc, #168]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd72:	f043 0301 	orr.w	r3, r3, #1
 800dd76:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd78:	f7f4 ff52 	bl	8002c20 <HAL_GetTick>
 800dd7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dd7e:	e008      	b.n	800dd92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dd80:	f7f4 ff4e 	bl	8002c20 <HAL_GetTick>
 800dd84:	4602      	mov	r2, r0
 800dd86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd88:	1ad3      	subs	r3, r2, r3
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d901      	bls.n	800dd92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800dd8e:	2303      	movs	r3, #3
 800dd90:	e21a      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dd92:	4b22      	ldr	r3, [pc, #136]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dd94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d0f0      	beq.n	800dd80 <HAL_RCC_OscConfig+0x45c>
 800dd9e:	e018      	b.n	800ddd2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800dda0:	4b1e      	ldr	r3, [pc, #120]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dda2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dda4:	4a1d      	ldr	r2, [pc, #116]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dda6:	f023 0301 	bic.w	r3, r3, #1
 800ddaa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddac:	f7f4 ff38 	bl	8002c20 <HAL_GetTick>
 800ddb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ddb2:	e008      	b.n	800ddc6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ddb4:	f7f4 ff34 	bl	8002c20 <HAL_GetTick>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d901      	bls.n	800ddc6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e200      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ddc6:	4b15      	ldr	r3, [pc, #84]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800ddc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddca:	f003 0302 	and.w	r3, r3, #2
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1f0      	bne.n	800ddb4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d039      	beq.n	800de52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01c      	beq.n	800de20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dde6:	4b0d      	ldr	r3, [pc, #52]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a0c      	ldr	r2, [pc, #48]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800ddec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ddf0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ddf2:	f7f4 ff15 	bl	8002c20 <HAL_GetTick>
 800ddf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ddf8:	e008      	b.n	800de0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ddfa:	f7f4 ff11 	bl	8002c20 <HAL_GetTick>
 800ddfe:	4602      	mov	r2, r0
 800de00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	2b02      	cmp	r3, #2
 800de06:	d901      	bls.n	800de0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e1dd      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800de0c:	4b03      	ldr	r3, [pc, #12]	@ (800de1c <HAL_RCC_OscConfig+0x4f8>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d0f0      	beq.n	800ddfa <HAL_RCC_OscConfig+0x4d6>
 800de18:	e01b      	b.n	800de52 <HAL_RCC_OscConfig+0x52e>
 800de1a:	bf00      	nop
 800de1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800de20:	4b9b      	ldr	r3, [pc, #620]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a9a      	ldr	r2, [pc, #616]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800de26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800de2c:	f7f4 fef8 	bl	8002c20 <HAL_GetTick>
 800de30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800de32:	e008      	b.n	800de46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de34:	f7f4 fef4 	bl	8002c20 <HAL_GetTick>
 800de38:	4602      	mov	r2, r0
 800de3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d901      	bls.n	800de46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	e1c0      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800de46:	4b92      	ldr	r3, [pc, #584]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1f0      	bne.n	800de34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f003 0304 	and.w	r3, r3, #4
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 8081 	beq.w	800df62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800de60:	4b8c      	ldr	r3, [pc, #560]	@ (800e094 <HAL_RCC_OscConfig+0x770>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4a8b      	ldr	r2, [pc, #556]	@ (800e094 <HAL_RCC_OscConfig+0x770>)
 800de66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de6c:	f7f4 fed8 	bl	8002c20 <HAL_GetTick>
 800de70:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de72:	e008      	b.n	800de86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de74:	f7f4 fed4 	bl	8002c20 <HAL_GetTick>
 800de78:	4602      	mov	r2, r0
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	1ad3      	subs	r3, r2, r3
 800de7e:	2b64      	cmp	r3, #100	@ 0x64
 800de80:	d901      	bls.n	800de86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800de82:	2303      	movs	r3, #3
 800de84:	e1a0      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de86:	4b83      	ldr	r3, [pc, #524]	@ (800e094 <HAL_RCC_OscConfig+0x770>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d0f0      	beq.n	800de74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	2b01      	cmp	r3, #1
 800de98:	d106      	bne.n	800dea8 <HAL_RCC_OscConfig+0x584>
 800de9a:	4b7d      	ldr	r3, [pc, #500]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800de9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de9e:	4a7c      	ldr	r2, [pc, #496]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dea0:	f043 0301 	orr.w	r3, r3, #1
 800dea4:	6713      	str	r3, [r2, #112]	@ 0x70
 800dea6:	e02d      	b.n	800df04 <HAL_RCC_OscConfig+0x5e0>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10c      	bne.n	800deca <HAL_RCC_OscConfig+0x5a6>
 800deb0:	4b77      	ldr	r3, [pc, #476]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800deb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deb4:	4a76      	ldr	r2, [pc, #472]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800deb6:	f023 0301 	bic.w	r3, r3, #1
 800deba:	6713      	str	r3, [r2, #112]	@ 0x70
 800debc:	4b74      	ldr	r3, [pc, #464]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800debe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dec0:	4a73      	ldr	r2, [pc, #460]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dec2:	f023 0304 	bic.w	r3, r3, #4
 800dec6:	6713      	str	r3, [r2, #112]	@ 0x70
 800dec8:	e01c      	b.n	800df04 <HAL_RCC_OscConfig+0x5e0>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	689b      	ldr	r3, [r3, #8]
 800dece:	2b05      	cmp	r3, #5
 800ded0:	d10c      	bne.n	800deec <HAL_RCC_OscConfig+0x5c8>
 800ded2:	4b6f      	ldr	r3, [pc, #444]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800ded4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ded6:	4a6e      	ldr	r2, [pc, #440]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800ded8:	f043 0304 	orr.w	r3, r3, #4
 800dedc:	6713      	str	r3, [r2, #112]	@ 0x70
 800dede:	4b6c      	ldr	r3, [pc, #432]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dee2:	4a6b      	ldr	r2, [pc, #428]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dee4:	f043 0301 	orr.w	r3, r3, #1
 800dee8:	6713      	str	r3, [r2, #112]	@ 0x70
 800deea:	e00b      	b.n	800df04 <HAL_RCC_OscConfig+0x5e0>
 800deec:	4b68      	ldr	r3, [pc, #416]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800deee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800def0:	4a67      	ldr	r2, [pc, #412]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800def2:	f023 0301 	bic.w	r3, r3, #1
 800def6:	6713      	str	r3, [r2, #112]	@ 0x70
 800def8:	4b65      	ldr	r3, [pc, #404]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800defa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800defc:	4a64      	ldr	r2, [pc, #400]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800defe:	f023 0304 	bic.w	r3, r3, #4
 800df02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	689b      	ldr	r3, [r3, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d015      	beq.n	800df38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df0c:	f7f4 fe88 	bl	8002c20 <HAL_GetTick>
 800df10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df12:	e00a      	b.n	800df2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df14:	f7f4 fe84 	bl	8002c20 <HAL_GetTick>
 800df18:	4602      	mov	r2, r0
 800df1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df22:	4293      	cmp	r3, r2
 800df24:	d901      	bls.n	800df2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800df26:	2303      	movs	r3, #3
 800df28:	e14e      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df2a:	4b59      	ldr	r3, [pc, #356]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800df2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2e:	f003 0302 	and.w	r3, r3, #2
 800df32:	2b00      	cmp	r3, #0
 800df34:	d0ee      	beq.n	800df14 <HAL_RCC_OscConfig+0x5f0>
 800df36:	e014      	b.n	800df62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df38:	f7f4 fe72 	bl	8002c20 <HAL_GetTick>
 800df3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800df3e:	e00a      	b.n	800df56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df40:	f7f4 fe6e 	bl	8002c20 <HAL_GetTick>
 800df44:	4602      	mov	r2, r0
 800df46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df4e:	4293      	cmp	r3, r2
 800df50:	d901      	bls.n	800df56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800df52:	2303      	movs	r3, #3
 800df54:	e138      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800df56:	4b4e      	ldr	r3, [pc, #312]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800df58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df5a:	f003 0302 	and.w	r3, r3, #2
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1ee      	bne.n	800df40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	f000 812d 	beq.w	800e1c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800df6c:	4b48      	ldr	r3, [pc, #288]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df74:	2b18      	cmp	r3, #24
 800df76:	f000 80bd 	beq.w	800e0f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df7e:	2b02      	cmp	r3, #2
 800df80:	f040 809e 	bne.w	800e0c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800df84:	4b42      	ldr	r3, [pc, #264]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a41      	ldr	r2, [pc, #260]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800df8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800df8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df90:	f7f4 fe46 	bl	8002c20 <HAL_GetTick>
 800df94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800df96:	e008      	b.n	800dfaa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df98:	f7f4 fe42 	bl	8002c20 <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d901      	bls.n	800dfaa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e10e      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dfaa:	4b39      	ldr	r3, [pc, #228]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1f0      	bne.n	800df98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dfb6:	4b36      	ldr	r3, [pc, #216]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dfb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dfba:	4b37      	ldr	r3, [pc, #220]	@ (800e098 <HAL_RCC_OscConfig+0x774>)
 800dfbc:	4013      	ands	r3, r2
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dfc6:	0112      	lsls	r2, r2, #4
 800dfc8:	430a      	orrs	r2, r1
 800dfca:	4931      	ldr	r1, [pc, #196]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800dfcc:	4313      	orrs	r3, r2
 800dfce:	628b      	str	r3, [r1, #40]	@ 0x28
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfde:	3b01      	subs	r3, #1
 800dfe0:	025b      	lsls	r3, r3, #9
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	431a      	orrs	r2, r3
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfea:	3b01      	subs	r3, #1
 800dfec:	041b      	lsls	r3, r3, #16
 800dfee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dff2:	431a      	orrs	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dff8:	3b01      	subs	r3, #1
 800dffa:	061b      	lsls	r3, r3, #24
 800dffc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e000:	4923      	ldr	r1, [pc, #140]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e002:	4313      	orrs	r3, r2
 800e004:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e006:	4b22      	ldr	r3, [pc, #136]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e00a:	4a21      	ldr	r2, [pc, #132]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e00c:	f023 0301 	bic.w	r3, r3, #1
 800e010:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e012:	4b1f      	ldr	r3, [pc, #124]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e016:	4b21      	ldr	r3, [pc, #132]	@ (800e09c <HAL_RCC_OscConfig+0x778>)
 800e018:	4013      	ands	r3, r2
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e01e:	00d2      	lsls	r2, r2, #3
 800e020:	491b      	ldr	r1, [pc, #108]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e022:	4313      	orrs	r3, r2
 800e024:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e026:	4b1a      	ldr	r3, [pc, #104]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e02a:	f023 020c 	bic.w	r2, r3, #12
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e032:	4917      	ldr	r1, [pc, #92]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e034:	4313      	orrs	r3, r2
 800e036:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e038:	4b15      	ldr	r3, [pc, #84]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e03a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03c:	f023 0202 	bic.w	r2, r3, #2
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e044:	4912      	ldr	r1, [pc, #72]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e046:	4313      	orrs	r3, r2
 800e048:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e04a:	4b11      	ldr	r3, [pc, #68]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e04e:	4a10      	ldr	r2, [pc, #64]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e056:	4b0e      	ldr	r3, [pc, #56]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e05a:	4a0d      	ldr	r2, [pc, #52]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e05c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e060:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e062:	4b0b      	ldr	r3, [pc, #44]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e066:	4a0a      	ldr	r2, [pc, #40]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e06c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e06e:	4b08      	ldr	r3, [pc, #32]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e072:	4a07      	ldr	r2, [pc, #28]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e074:	f043 0301 	orr.w	r3, r3, #1
 800e078:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e07a:	4b05      	ldr	r3, [pc, #20]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a04      	ldr	r2, [pc, #16]	@ (800e090 <HAL_RCC_OscConfig+0x76c>)
 800e080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e086:	f7f4 fdcb 	bl	8002c20 <HAL_GetTick>
 800e08a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e08c:	e011      	b.n	800e0b2 <HAL_RCC_OscConfig+0x78e>
 800e08e:	bf00      	nop
 800e090:	58024400 	.word	0x58024400
 800e094:	58024800 	.word	0x58024800
 800e098:	fffffc0c 	.word	0xfffffc0c
 800e09c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0a0:	f7f4 fdbe 	bl	8002c20 <HAL_GetTick>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d901      	bls.n	800e0b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	e08a      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e0b2:	4b47      	ldr	r3, [pc, #284]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d0f0      	beq.n	800e0a0 <HAL_RCC_OscConfig+0x77c>
 800e0be:	e082      	b.n	800e1c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0c0:	4b43      	ldr	r3, [pc, #268]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4a42      	ldr	r2, [pc, #264]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e0ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0cc:	f7f4 fda8 	bl	8002c20 <HAL_GetTick>
 800e0d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0d2:	e008      	b.n	800e0e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0d4:	f7f4 fda4 	bl	8002c20 <HAL_GetTick>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	2b02      	cmp	r3, #2
 800e0e0:	d901      	bls.n	800e0e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e070      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0e6:	4b3a      	ldr	r3, [pc, #232]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d1f0      	bne.n	800e0d4 <HAL_RCC_OscConfig+0x7b0>
 800e0f2:	e068      	b.n	800e1c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e0f4:	4b36      	ldr	r3, [pc, #216]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e0fa:	4b35      	ldr	r3, [pc, #212]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e104:	2b01      	cmp	r3, #1
 800e106:	d031      	beq.n	800e16c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	f003 0203 	and.w	r2, r3, #3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e112:	429a      	cmp	r2, r3
 800e114:	d12a      	bne.n	800e16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	091b      	lsrs	r3, r3, #4
 800e11a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e122:	429a      	cmp	r2, r3
 800e124:	d122      	bne.n	800e16c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e130:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e132:	429a      	cmp	r2, r3
 800e134:	d11a      	bne.n	800e16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	0a5b      	lsrs	r3, r3, #9
 800e13a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e142:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e144:	429a      	cmp	r2, r3
 800e146:	d111      	bne.n	800e16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	0c1b      	lsrs	r3, r3, #16
 800e14c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e154:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e156:	429a      	cmp	r2, r3
 800e158:	d108      	bne.n	800e16c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	0e1b      	lsrs	r3, r3, #24
 800e15e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e166:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e168:	429a      	cmp	r2, r3
 800e16a:	d001      	beq.n	800e170 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	e02b      	b.n	800e1c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e170:	4b17      	ldr	r3, [pc, #92]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e174:	08db      	lsrs	r3, r3, #3
 800e176:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e17a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e180:	693a      	ldr	r2, [r7, #16]
 800e182:	429a      	cmp	r2, r3
 800e184:	d01f      	beq.n	800e1c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e186:	4b12      	ldr	r3, [pc, #72]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e18a:	4a11      	ldr	r2, [pc, #68]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e18c:	f023 0301 	bic.w	r3, r3, #1
 800e190:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e192:	f7f4 fd45 	bl	8002c20 <HAL_GetTick>
 800e196:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e198:	bf00      	nop
 800e19a:	f7f4 fd41 	bl	8002c20 <HAL_GetTick>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d0f9      	beq.n	800e19a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e1a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e1a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1aa:	4b0a      	ldr	r3, [pc, #40]	@ (800e1d4 <HAL_RCC_OscConfig+0x8b0>)
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e1b2:	00d2      	lsls	r2, r2, #3
 800e1b4:	4906      	ldr	r1, [pc, #24]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e1ba:	4b05      	ldr	r3, [pc, #20]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1be:	4a04      	ldr	r2, [pc, #16]	@ (800e1d0 <HAL_RCC_OscConfig+0x8ac>)
 800e1c0:	f043 0301 	orr.w	r3, r3, #1
 800e1c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3730      	adds	r7, #48	@ 0x30
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	58024400 	.word	0x58024400
 800e1d4:	ffff0007 	.word	0xffff0007

0800e1d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d101      	bne.n	800e1ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e19c      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e1ec:	4b8a      	ldr	r3, [pc, #552]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f003 030f 	and.w	r3, r3, #15
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	429a      	cmp	r2, r3
 800e1f8:	d910      	bls.n	800e21c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e1fa:	4b87      	ldr	r3, [pc, #540]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f023 020f 	bic.w	r2, r3, #15
 800e202:	4985      	ldr	r1, [pc, #532]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	4313      	orrs	r3, r2
 800e208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e20a:	4b83      	ldr	r3, [pc, #524]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 030f 	and.w	r3, r3, #15
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d001      	beq.n	800e21c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e218:	2301      	movs	r3, #1
 800e21a:	e184      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f003 0304 	and.w	r3, r3, #4
 800e224:	2b00      	cmp	r3, #0
 800e226:	d010      	beq.n	800e24a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	691a      	ldr	r2, [r3, #16]
 800e22c:	4b7b      	ldr	r3, [pc, #492]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e22e:	699b      	ldr	r3, [r3, #24]
 800e230:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e234:	429a      	cmp	r2, r3
 800e236:	d908      	bls.n	800e24a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e238:	4b78      	ldr	r3, [pc, #480]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	691b      	ldr	r3, [r3, #16]
 800e244:	4975      	ldr	r1, [pc, #468]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e246:	4313      	orrs	r3, r2
 800e248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	f003 0308 	and.w	r3, r3, #8
 800e252:	2b00      	cmp	r3, #0
 800e254:	d010      	beq.n	800e278 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	695a      	ldr	r2, [r3, #20]
 800e25a:	4b70      	ldr	r3, [pc, #448]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e262:	429a      	cmp	r2, r3
 800e264:	d908      	bls.n	800e278 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e266:	4b6d      	ldr	r3, [pc, #436]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e268:	69db      	ldr	r3, [r3, #28]
 800e26a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	695b      	ldr	r3, [r3, #20]
 800e272:	496a      	ldr	r1, [pc, #424]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e274:	4313      	orrs	r3, r2
 800e276:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f003 0310 	and.w	r3, r3, #16
 800e280:	2b00      	cmp	r3, #0
 800e282:	d010      	beq.n	800e2a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	699a      	ldr	r2, [r3, #24]
 800e288:	4b64      	ldr	r3, [pc, #400]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e28a:	69db      	ldr	r3, [r3, #28]
 800e28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e290:	429a      	cmp	r2, r3
 800e292:	d908      	bls.n	800e2a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e294:	4b61      	ldr	r3, [pc, #388]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	699b      	ldr	r3, [r3, #24]
 800e2a0:	495e      	ldr	r1, [pc, #376]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f003 0320 	and.w	r3, r3, #32
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d010      	beq.n	800e2d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	69da      	ldr	r2, [r3, #28]
 800e2b6:	4b59      	ldr	r3, [pc, #356]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2b8:	6a1b      	ldr	r3, [r3, #32]
 800e2ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d908      	bls.n	800e2d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e2c2:	4b56      	ldr	r3, [pc, #344]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2c4:	6a1b      	ldr	r3, [r3, #32]
 800e2c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	69db      	ldr	r3, [r3, #28]
 800e2ce:	4953      	ldr	r1, [pc, #332]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f003 0302 	and.w	r3, r3, #2
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d010      	beq.n	800e302 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	68da      	ldr	r2, [r3, #12]
 800e2e4:	4b4d      	ldr	r3, [pc, #308]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	f003 030f 	and.w	r3, r3, #15
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d908      	bls.n	800e302 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e2f0:	4b4a      	ldr	r3, [pc, #296]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2f2:	699b      	ldr	r3, [r3, #24]
 800e2f4:	f023 020f 	bic.w	r2, r3, #15
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	4947      	ldr	r1, [pc, #284]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d055      	beq.n	800e3ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e30e:	4b43      	ldr	r3, [pc, #268]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e310:	699b      	ldr	r3, [r3, #24]
 800e312:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	689b      	ldr	r3, [r3, #8]
 800e31a:	4940      	ldr	r1, [pc, #256]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e31c:	4313      	orrs	r3, r2
 800e31e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	2b02      	cmp	r3, #2
 800e326:	d107      	bne.n	800e338 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e328:	4b3c      	ldr	r3, [pc, #240]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e330:	2b00      	cmp	r3, #0
 800e332:	d121      	bne.n	800e378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e334:	2301      	movs	r3, #1
 800e336:	e0f6      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	2b03      	cmp	r3, #3
 800e33e:	d107      	bne.n	800e350 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e340:	4b36      	ldr	r3, [pc, #216]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d115      	bne.n	800e378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e34c:	2301      	movs	r3, #1
 800e34e:	e0ea      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d107      	bne.n	800e368 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e358:	4b30      	ldr	r3, [pc, #192]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e360:	2b00      	cmp	r3, #0
 800e362:	d109      	bne.n	800e378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	e0de      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e368:	4b2c      	ldr	r3, [pc, #176]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f003 0304 	and.w	r3, r3, #4
 800e370:	2b00      	cmp	r3, #0
 800e372:	d101      	bne.n	800e378 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	e0d6      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e378:	4b28      	ldr	r3, [pc, #160]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e37a:	691b      	ldr	r3, [r3, #16]
 800e37c:	f023 0207 	bic.w	r2, r3, #7
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	4925      	ldr	r1, [pc, #148]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e386:	4313      	orrs	r3, r2
 800e388:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e38a:	f7f4 fc49 	bl	8002c20 <HAL_GetTick>
 800e38e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e390:	e00a      	b.n	800e3a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e392:	f7f4 fc45 	bl	8002c20 <HAL_GetTick>
 800e396:	4602      	mov	r2, r0
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	1ad3      	subs	r3, r2, r3
 800e39c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d901      	bls.n	800e3a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e3a4:	2303      	movs	r3, #3
 800e3a6:	e0be      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e3a8:	4b1c      	ldr	r3, [pc, #112]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	00db      	lsls	r3, r3, #3
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d1eb      	bne.n	800e392 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f003 0302 	and.w	r3, r3, #2
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d010      	beq.n	800e3e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68da      	ldr	r2, [r3, #12]
 800e3ca:	4b14      	ldr	r3, [pc, #80]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	f003 030f 	and.w	r3, r3, #15
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d208      	bcs.n	800e3e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e3d6:	4b11      	ldr	r3, [pc, #68]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	f023 020f 	bic.w	r2, r3, #15
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	490e      	ldr	r1, [pc, #56]	@ (800e41c <HAL_RCC_ClockConfig+0x244>)
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e3e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f003 030f 	and.w	r3, r3, #15
 800e3f0:	683a      	ldr	r2, [r7, #0]
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d214      	bcs.n	800e420 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e3f6:	4b08      	ldr	r3, [pc, #32]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f023 020f 	bic.w	r2, r3, #15
 800e3fe:	4906      	ldr	r1, [pc, #24]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	4313      	orrs	r3, r2
 800e404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e406:	4b04      	ldr	r3, [pc, #16]	@ (800e418 <HAL_RCC_ClockConfig+0x240>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f003 030f 	and.w	r3, r3, #15
 800e40e:	683a      	ldr	r2, [r7, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d005      	beq.n	800e420 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e414:	2301      	movs	r3, #1
 800e416:	e086      	b.n	800e526 <HAL_RCC_ClockConfig+0x34e>
 800e418:	52002000 	.word	0x52002000
 800e41c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f003 0304 	and.w	r3, r3, #4
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d010      	beq.n	800e44e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	691a      	ldr	r2, [r3, #16]
 800e430:	4b3f      	ldr	r3, [pc, #252]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e438:	429a      	cmp	r2, r3
 800e43a:	d208      	bcs.n	800e44e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e43c:	4b3c      	ldr	r3, [pc, #240]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e43e:	699b      	ldr	r3, [r3, #24]
 800e440:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	4939      	ldr	r1, [pc, #228]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e44a:	4313      	orrs	r3, r2
 800e44c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f003 0308 	and.w	r3, r3, #8
 800e456:	2b00      	cmp	r3, #0
 800e458:	d010      	beq.n	800e47c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	695a      	ldr	r2, [r3, #20]
 800e45e:	4b34      	ldr	r3, [pc, #208]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e460:	69db      	ldr	r3, [r3, #28]
 800e462:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e466:	429a      	cmp	r2, r3
 800e468:	d208      	bcs.n	800e47c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e46a:	4b31      	ldr	r3, [pc, #196]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	695b      	ldr	r3, [r3, #20]
 800e476:	492e      	ldr	r1, [pc, #184]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e478:	4313      	orrs	r3, r2
 800e47a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f003 0310 	and.w	r3, r3, #16
 800e484:	2b00      	cmp	r3, #0
 800e486:	d010      	beq.n	800e4aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	699a      	ldr	r2, [r3, #24]
 800e48c:	4b28      	ldr	r3, [pc, #160]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e48e:	69db      	ldr	r3, [r3, #28]
 800e490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e494:	429a      	cmp	r2, r3
 800e496:	d208      	bcs.n	800e4aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e498:	4b25      	ldr	r3, [pc, #148]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	4922      	ldr	r1, [pc, #136]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f003 0320 	and.w	r3, r3, #32
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d010      	beq.n	800e4d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	69da      	ldr	r2, [r3, #28]
 800e4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e4bc:	6a1b      	ldr	r3, [r3, #32]
 800e4be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d208      	bcs.n	800e4d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e4c6:	4b1a      	ldr	r3, [pc, #104]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e4c8:	6a1b      	ldr	r3, [r3, #32]
 800e4ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	69db      	ldr	r3, [r3, #28]
 800e4d2:	4917      	ldr	r1, [pc, #92]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e4d8:	f000 f834 	bl	800e544 <HAL_RCC_GetSysClockFreq>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	4b14      	ldr	r3, [pc, #80]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	0a1b      	lsrs	r3, r3, #8
 800e4e4:	f003 030f 	and.w	r3, r3, #15
 800e4e8:	4912      	ldr	r1, [pc, #72]	@ (800e534 <HAL_RCC_ClockConfig+0x35c>)
 800e4ea:	5ccb      	ldrb	r3, [r1, r3]
 800e4ec:	f003 031f 	and.w	r3, r3, #31
 800e4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800e4f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e4f6:	4b0e      	ldr	r3, [pc, #56]	@ (800e530 <HAL_RCC_ClockConfig+0x358>)
 800e4f8:	699b      	ldr	r3, [r3, #24]
 800e4fa:	f003 030f 	and.w	r3, r3, #15
 800e4fe:	4a0d      	ldr	r2, [pc, #52]	@ (800e534 <HAL_RCC_ClockConfig+0x35c>)
 800e500:	5cd3      	ldrb	r3, [r2, r3]
 800e502:	f003 031f 	and.w	r3, r3, #31
 800e506:	693a      	ldr	r2, [r7, #16]
 800e508:	fa22 f303 	lsr.w	r3, r2, r3
 800e50c:	4a0a      	ldr	r2, [pc, #40]	@ (800e538 <HAL_RCC_ClockConfig+0x360>)
 800e50e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e510:	4a0a      	ldr	r2, [pc, #40]	@ (800e53c <HAL_RCC_ClockConfig+0x364>)
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e516:	4b0a      	ldr	r3, [pc, #40]	@ (800e540 <HAL_RCC_ClockConfig+0x368>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7f4 fb36 	bl	8002b8c <HAL_InitTick>
 800e520:	4603      	mov	r3, r0
 800e522:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e524:	7bfb      	ldrb	r3, [r7, #15]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	58024400 	.word	0x58024400
 800e534:	08019ca8 	.word	0x08019ca8
 800e538:	24000230 	.word	0x24000230
 800e53c:	2400022c 	.word	0x2400022c
 800e540:	24000234 	.word	0x24000234

0800e544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e544:	b480      	push	{r7}
 800e546:	b089      	sub	sp, #36	@ 0x24
 800e548:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e54a:	4bb3      	ldr	r3, [pc, #716]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e552:	2b18      	cmp	r3, #24
 800e554:	f200 8155 	bhi.w	800e802 <HAL_RCC_GetSysClockFreq+0x2be>
 800e558:	a201      	add	r2, pc, #4	@ (adr r2, 800e560 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55e:	bf00      	nop
 800e560:	0800e5c5 	.word	0x0800e5c5
 800e564:	0800e803 	.word	0x0800e803
 800e568:	0800e803 	.word	0x0800e803
 800e56c:	0800e803 	.word	0x0800e803
 800e570:	0800e803 	.word	0x0800e803
 800e574:	0800e803 	.word	0x0800e803
 800e578:	0800e803 	.word	0x0800e803
 800e57c:	0800e803 	.word	0x0800e803
 800e580:	0800e5eb 	.word	0x0800e5eb
 800e584:	0800e803 	.word	0x0800e803
 800e588:	0800e803 	.word	0x0800e803
 800e58c:	0800e803 	.word	0x0800e803
 800e590:	0800e803 	.word	0x0800e803
 800e594:	0800e803 	.word	0x0800e803
 800e598:	0800e803 	.word	0x0800e803
 800e59c:	0800e803 	.word	0x0800e803
 800e5a0:	0800e5f1 	.word	0x0800e5f1
 800e5a4:	0800e803 	.word	0x0800e803
 800e5a8:	0800e803 	.word	0x0800e803
 800e5ac:	0800e803 	.word	0x0800e803
 800e5b0:	0800e803 	.word	0x0800e803
 800e5b4:	0800e803 	.word	0x0800e803
 800e5b8:	0800e803 	.word	0x0800e803
 800e5bc:	0800e803 	.word	0x0800e803
 800e5c0:	0800e5f7 	.word	0x0800e5f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5c4:	4b94      	ldr	r3, [pc, #592]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f003 0320 	and.w	r3, r3, #32
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d009      	beq.n	800e5e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5d0:	4b91      	ldr	r3, [pc, #580]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	08db      	lsrs	r3, r3, #3
 800e5d6:	f003 0303 	and.w	r3, r3, #3
 800e5da:	4a90      	ldr	r2, [pc, #576]	@ (800e81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800e5e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e5e2:	e111      	b.n	800e808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e5e4:	4b8d      	ldr	r3, [pc, #564]	@ (800e81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e5e6:	61bb      	str	r3, [r7, #24]
      break;
 800e5e8:	e10e      	b.n	800e808 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e5ea:	4b8d      	ldr	r3, [pc, #564]	@ (800e820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e5ec:	61bb      	str	r3, [r7, #24]
      break;
 800e5ee:	e10b      	b.n	800e808 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e5f0:	4b8c      	ldr	r3, [pc, #560]	@ (800e824 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e5f2:	61bb      	str	r3, [r7, #24]
      break;
 800e5f4:	e108      	b.n	800e808 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e5f6:	4b88      	ldr	r3, [pc, #544]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5fa:	f003 0303 	and.w	r3, r3, #3
 800e5fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e600:	4b85      	ldr	r3, [pc, #532]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e604:	091b      	lsrs	r3, r3, #4
 800e606:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e60a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e60c:	4b82      	ldr	r3, [pc, #520]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e616:	4b80      	ldr	r3, [pc, #512]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e61a:	08db      	lsrs	r3, r3, #3
 800e61c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	fb02 f303 	mul.w	r3, r2, r3
 800e626:	ee07 3a90 	vmov	s15, r3
 800e62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e62e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	f000 80e1 	beq.w	800e7fc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	f000 8083 	beq.w	800e748 <HAL_RCC_GetSysClockFreq+0x204>
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b02      	cmp	r3, #2
 800e646:	f200 80a1 	bhi.w	800e78c <HAL_RCC_GetSysClockFreq+0x248>
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d003      	beq.n	800e658 <HAL_RCC_GetSysClockFreq+0x114>
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d056      	beq.n	800e704 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e656:	e099      	b.n	800e78c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e658:	4b6f      	ldr	r3, [pc, #444]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0320 	and.w	r3, r3, #32
 800e660:	2b00      	cmp	r3, #0
 800e662:	d02d      	beq.n	800e6c0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e664:	4b6c      	ldr	r3, [pc, #432]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	08db      	lsrs	r3, r3, #3
 800e66a:	f003 0303 	and.w	r3, r3, #3
 800e66e:	4a6b      	ldr	r2, [pc, #428]	@ (800e81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e670:	fa22 f303 	lsr.w	r3, r2, r3
 800e674:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	ee07 3a90 	vmov	s15, r3
 800e67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	ee07 3a90 	vmov	s15, r3
 800e686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e68e:	4b62      	ldr	r3, [pc, #392]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e696:	ee07 3a90 	vmov	s15, r3
 800e69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6a2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6ba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e6be:	e087      	b.n	800e7d0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	ee07 3a90 	vmov	s15, r3
 800e6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e82c <HAL_RCC_GetSysClockFreq+0x2e8>
 800e6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6d2:	4b51      	ldr	r3, [pc, #324]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6da:	ee07 3a90 	vmov	s15, r3
 800e6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6e6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e702:	e065      	b.n	800e7d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	ee07 3a90 	vmov	s15, r3
 800e70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e70e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e716:	4b40      	ldr	r3, [pc, #256]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e71e:	ee07 3a90 	vmov	s15, r3
 800e722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e726:	ed97 6a02 	vldr	s12, [r7, #8]
 800e72a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e746:	e043      	b.n	800e7d0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	ee07 3a90 	vmov	s15, r3
 800e74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e752:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e834 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e75a:	4b2f      	ldr	r3, [pc, #188]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e762:	ee07 3a90 	vmov	s15, r3
 800e766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e76e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e77a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e78a:	e021      	b.n	800e7d0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	ee07 3a90 	vmov	s15, r3
 800e792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e796:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e79e:	4b1e      	ldr	r3, [pc, #120]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7a6:	ee07 3a90 	vmov	s15, r3
 800e7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800e7b2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e7ce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e7d0:	4b11      	ldr	r3, [pc, #68]	@ (800e818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7d4:	0a5b      	lsrs	r3, r3, #9
 800e7d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7da:	3301      	adds	r3, #1
 800e7dc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	ee07 3a90 	vmov	s15, r3
 800e7e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e7e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e7ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e7f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e7f4:	ee17 3a90 	vmov	r3, s15
 800e7f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e7fa:	e005      	b.n	800e808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	61bb      	str	r3, [r7, #24]
      break;
 800e800:	e002      	b.n	800e808 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e802:	4b07      	ldr	r3, [pc, #28]	@ (800e820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e804:	61bb      	str	r3, [r7, #24]
      break;
 800e806:	bf00      	nop
  }

  return sysclockfreq;
 800e808:	69bb      	ldr	r3, [r7, #24]
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3724      	adds	r7, #36	@ 0x24
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	58024400 	.word	0x58024400
 800e81c:	03d09000 	.word	0x03d09000
 800e820:	003d0900 	.word	0x003d0900
 800e824:	017d7840 	.word	0x017d7840
 800e828:	46000000 	.word	0x46000000
 800e82c:	4c742400 	.word	0x4c742400
 800e830:	4a742400 	.word	0x4a742400
 800e834:	4bbebc20 	.word	0x4bbebc20

0800e838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e83e:	f7ff fe81 	bl	800e544 <HAL_RCC_GetSysClockFreq>
 800e842:	4602      	mov	r2, r0
 800e844:	4b10      	ldr	r3, [pc, #64]	@ (800e888 <HAL_RCC_GetHCLKFreq+0x50>)
 800e846:	699b      	ldr	r3, [r3, #24]
 800e848:	0a1b      	lsrs	r3, r3, #8
 800e84a:	f003 030f 	and.w	r3, r3, #15
 800e84e:	490f      	ldr	r1, [pc, #60]	@ (800e88c <HAL_RCC_GetHCLKFreq+0x54>)
 800e850:	5ccb      	ldrb	r3, [r1, r3]
 800e852:	f003 031f 	and.w	r3, r3, #31
 800e856:	fa22 f303 	lsr.w	r3, r2, r3
 800e85a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e85c:	4b0a      	ldr	r3, [pc, #40]	@ (800e888 <HAL_RCC_GetHCLKFreq+0x50>)
 800e85e:	699b      	ldr	r3, [r3, #24]
 800e860:	f003 030f 	and.w	r3, r3, #15
 800e864:	4a09      	ldr	r2, [pc, #36]	@ (800e88c <HAL_RCC_GetHCLKFreq+0x54>)
 800e866:	5cd3      	ldrb	r3, [r2, r3]
 800e868:	f003 031f 	and.w	r3, r3, #31
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	fa22 f303 	lsr.w	r3, r2, r3
 800e872:	4a07      	ldr	r2, [pc, #28]	@ (800e890 <HAL_RCC_GetHCLKFreq+0x58>)
 800e874:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e876:	4a07      	ldr	r2, [pc, #28]	@ (800e894 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e87c:	4b04      	ldr	r3, [pc, #16]	@ (800e890 <HAL_RCC_GetHCLKFreq+0x58>)
 800e87e:	681b      	ldr	r3, [r3, #0]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	58024400 	.word	0x58024400
 800e88c:	08019ca8 	.word	0x08019ca8
 800e890:	24000230 	.word	0x24000230
 800e894:	2400022c 	.word	0x2400022c

0800e898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e89c:	f7ff ffcc 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	4b06      	ldr	r3, [pc, #24]	@ (800e8bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800e8a4:	69db      	ldr	r3, [r3, #28]
 800e8a6:	091b      	lsrs	r3, r3, #4
 800e8a8:	f003 0307 	and.w	r3, r3, #7
 800e8ac:	4904      	ldr	r1, [pc, #16]	@ (800e8c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e8ae:	5ccb      	ldrb	r3, [r1, r3]
 800e8b0:	f003 031f 	and.w	r3, r3, #31
 800e8b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	58024400 	.word	0x58024400
 800e8c0:	08019ca8 	.word	0x08019ca8

0800e8c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e8c8:	f7ff ffb6 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	4b06      	ldr	r3, [pc, #24]	@ (800e8e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e8d0:	69db      	ldr	r3, [r3, #28]
 800e8d2:	0a1b      	lsrs	r3, r3, #8
 800e8d4:	f003 0307 	and.w	r3, r3, #7
 800e8d8:	4904      	ldr	r1, [pc, #16]	@ (800e8ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800e8da:	5ccb      	ldrb	r3, [r1, r3]
 800e8dc:	f003 031f 	and.w	r3, r3, #31
 800e8e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	58024400 	.word	0x58024400
 800e8ec:	08019ca8 	.word	0x08019ca8

0800e8f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e8f4:	b0ca      	sub	sp, #296	@ 0x128
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e902:	2300      	movs	r3, #0
 800e904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e910:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e914:	2500      	movs	r5, #0
 800e916:	ea54 0305 	orrs.w	r3, r4, r5
 800e91a:	d049      	beq.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e91c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e920:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e926:	d02f      	beq.n	800e988 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e928:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e92c:	d828      	bhi.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e92e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e932:	d01a      	beq.n	800e96a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e938:	d822      	bhi.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d003      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e93e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e942:	d007      	beq.n	800e954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e944:	e01c      	b.n	800e980 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e946:	4bb8      	ldr	r3, [pc, #736]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e94a:	4ab7      	ldr	r2, [pc, #732]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e94c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e950:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e952:	e01a      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e958:	3308      	adds	r3, #8
 800e95a:	2102      	movs	r1, #2
 800e95c:	4618      	mov	r0, r3
 800e95e:	f002 fb61 	bl	8011024 <RCCEx_PLL2_Config>
 800e962:	4603      	mov	r3, r0
 800e964:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e968:	e00f      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e96a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e96e:	3328      	adds	r3, #40	@ 0x28
 800e970:	2102      	movs	r1, #2
 800e972:	4618      	mov	r0, r3
 800e974:	f002 fc08 	bl	8011188 <RCCEx_PLL3_Config>
 800e978:	4603      	mov	r3, r0
 800e97a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e97e:	e004      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e980:	2301      	movs	r3, #1
 800e982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e986:	e000      	b.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e98a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e992:	4ba5      	ldr	r3, [pc, #660]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e996:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e99e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e9a0:	4aa1      	ldr	r2, [pc, #644]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9a2:	430b      	orrs	r3, r1
 800e9a4:	6513      	str	r3, [r2, #80]	@ 0x50
 800e9a6:	e003      	b.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e9bc:	f04f 0900 	mov.w	r9, #0
 800e9c0:	ea58 0309 	orrs.w	r3, r8, r9
 800e9c4:	d047      	beq.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9cc:	2b04      	cmp	r3, #4
 800e9ce:	d82a      	bhi.n	800ea26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d6:	bf00      	nop
 800e9d8:	0800e9ed 	.word	0x0800e9ed
 800e9dc:	0800e9fb 	.word	0x0800e9fb
 800e9e0:	0800ea11 	.word	0x0800ea11
 800e9e4:	0800ea2f 	.word	0x0800ea2f
 800e9e8:	0800ea2f 	.word	0x0800ea2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9ec:	4b8e      	ldr	r3, [pc, #568]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f0:	4a8d      	ldr	r2, [pc, #564]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e9f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800e9f8:	e01a      	b.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e9fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9fe:	3308      	adds	r3, #8
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f002 fb0e 	bl	8011024 <RCCEx_PLL2_Config>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea0e:	e00f      	b.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea14:	3328      	adds	r3, #40	@ 0x28
 800ea16:	2100      	movs	r1, #0
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f002 fbb5 	bl	8011188 <RCCEx_PLL3_Config>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea24:	e004      	b.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea2c:	e000      	b.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ea2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d10a      	bne.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ea38:	4b7b      	ldr	r3, [pc, #492]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea3c:	f023 0107 	bic.w	r1, r3, #7
 800ea40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea46:	4a78      	ldr	r2, [pc, #480]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea48:	430b      	orrs	r3, r1
 800ea4a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ea4c:	e003      	b.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ea56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800ea62:	f04f 0b00 	mov.w	fp, #0
 800ea66:	ea5a 030b 	orrs.w	r3, sl, fp
 800ea6a:	d04c      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ea6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea76:	d030      	beq.n	800eada <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ea78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea7c:	d829      	bhi.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ea7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ea80:	d02d      	beq.n	800eade <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ea82:	2bc0      	cmp	r3, #192	@ 0xc0
 800ea84:	d825      	bhi.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ea86:	2b80      	cmp	r3, #128	@ 0x80
 800ea88:	d018      	beq.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ea8a:	2b80      	cmp	r3, #128	@ 0x80
 800ea8c:	d821      	bhi.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ea92:	2b40      	cmp	r3, #64	@ 0x40
 800ea94:	d007      	beq.n	800eaa6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ea96:	e01c      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea98:	4b63      	ldr	r3, [pc, #396]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9c:	4a62      	ldr	r2, [pc, #392]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eaa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eaa4:	e01c      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaaa:	3308      	adds	r3, #8
 800eaac:	2100      	movs	r1, #0
 800eaae:	4618      	mov	r0, r3
 800eab0:	f002 fab8 	bl	8011024 <RCCEx_PLL2_Config>
 800eab4:	4603      	mov	r3, r0
 800eab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eaba:	e011      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eac0:	3328      	adds	r3, #40	@ 0x28
 800eac2:	2100      	movs	r1, #0
 800eac4:	4618      	mov	r0, r3
 800eac6:	f002 fb5f 	bl	8011188 <RCCEx_PLL3_Config>
 800eaca:	4603      	mov	r3, r0
 800eacc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ead0:	e006      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ead8:	e002      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eada:	bf00      	nop
 800eadc:	e000      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eade:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d10a      	bne.n	800eafe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800eae8:	4b4f      	ldr	r3, [pc, #316]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eaea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eaec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800eaf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eaf6:	4a4c      	ldr	r2, [pc, #304]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eaf8:	430b      	orrs	r3, r1
 800eafa:	6513      	str	r3, [r2, #80]	@ 0x50
 800eafc:	e003      	b.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eafe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800eb12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800eb16:	2300      	movs	r3, #0
 800eb18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800eb1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800eb20:	460b      	mov	r3, r1
 800eb22:	4313      	orrs	r3, r2
 800eb24:	d053      	beq.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800eb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800eb2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb32:	d035      	beq.n	800eba0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800eb34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb38:	d82e      	bhi.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb3e:	d031      	beq.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800eb40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb44:	d828      	bhi.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb4a:	d01a      	beq.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800eb4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb50:	d822      	bhi.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800eb56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb5a:	d007      	beq.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800eb5c:	e01c      	b.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb5e:	4b32      	ldr	r3, [pc, #200]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb62:	4a31      	ldr	r2, [pc, #196]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb6a:	e01c      	b.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb70:	3308      	adds	r3, #8
 800eb72:	2100      	movs	r1, #0
 800eb74:	4618      	mov	r0, r3
 800eb76:	f002 fa55 	bl	8011024 <RCCEx_PLL2_Config>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eb80:	e011      	b.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb86:	3328      	adds	r3, #40	@ 0x28
 800eb88:	2100      	movs	r1, #0
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f002 fafc 	bl	8011188 <RCCEx_PLL3_Config>
 800eb90:	4603      	mov	r3, r0
 800eb92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb96:	e006      	b.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb9e:	e002      	b.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eba0:	bf00      	nop
 800eba2:	e000      	b.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800eba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10b      	bne.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ebae:	4b1e      	ldr	r3, [pc, #120]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ebb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ebbe:	4a1a      	ldr	r2, [pc, #104]	@ (800ec28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebc0:	430b      	orrs	r3, r1
 800ebc2:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebc4:	e003      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ebce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ebda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ebe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ebe8:	460b      	mov	r3, r1
 800ebea:	4313      	orrs	r3, r2
 800ebec:	d056      	beq.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ebee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ebf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ebfa:	d038      	beq.n	800ec6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ebfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec00:	d831      	bhi.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec06:	d034      	beq.n	800ec72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ec08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec0c:	d82b      	bhi.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec12:	d01d      	beq.n	800ec50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ec14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec18:	d825      	bhi.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d006      	beq.n	800ec2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ec1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec22:	d00a      	beq.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ec24:	e01f      	b.n	800ec66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec26:	bf00      	nop
 800ec28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec2c:	4ba2      	ldr	r3, [pc, #648]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec30:	4aa1      	ldr	r2, [pc, #644]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec38:	e01c      	b.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec3e:	3308      	adds	r3, #8
 800ec40:	2100      	movs	r1, #0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f002 f9ee 	bl	8011024 <RCCEx_PLL2_Config>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ec4e:	e011      	b.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec54:	3328      	adds	r3, #40	@ 0x28
 800ec56:	2100      	movs	r1, #0
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f002 fa95 	bl	8011188 <RCCEx_PLL3_Config>
 800ec5e:	4603      	mov	r3, r0
 800ec60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec64:	e006      	b.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec6c:	e002      	b.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ec6e:	bf00      	nop
 800ec70:	e000      	b.n	800ec74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ec72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10b      	bne.n	800ec94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ec7c:	4b8e      	ldr	r3, [pc, #568]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ec80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ec84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ec8c:	4a8a      	ldr	r2, [pc, #552]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec8e:	430b      	orrs	r3, r1
 800ec90:	6593      	str	r3, [r2, #88]	@ 0x58
 800ec92:	e003      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ec98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ec9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800eca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ecac:	2300      	movs	r3, #0
 800ecae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ecb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ecb6:	460b      	mov	r3, r1
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	d03a      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ecbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecc2:	2b30      	cmp	r3, #48	@ 0x30
 800ecc4:	d01f      	beq.n	800ed06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ecc6:	2b30      	cmp	r3, #48	@ 0x30
 800ecc8:	d819      	bhi.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ecca:	2b20      	cmp	r3, #32
 800eccc:	d00c      	beq.n	800ece8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ecce:	2b20      	cmp	r3, #32
 800ecd0:	d815      	bhi.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d019      	beq.n	800ed0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ecd6:	2b10      	cmp	r3, #16
 800ecd8:	d111      	bne.n	800ecfe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecda:	4b77      	ldr	r3, [pc, #476]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ecdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecde:	4a76      	ldr	r2, [pc, #472]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ece0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ece4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ece6:	e011      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ece8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecec:	3308      	adds	r3, #8
 800ecee:	2102      	movs	r1, #2
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f002 f997 	bl	8011024 <RCCEx_PLL2_Config>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ecfc:	e006      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ed04:	e002      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed06:	bf00      	nop
 800ed08:	e000      	b.n	800ed0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10a      	bne.n	800ed2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ed14:	4b68      	ldr	r3, [pc, #416]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ed1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed22:	4a65      	ldr	r2, [pc, #404]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed24:	430b      	orrs	r3, r1
 800ed26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ed28:	e003      	b.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ed32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ed3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ed42:	2300      	movs	r3, #0
 800ed44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	d051      	beq.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ed52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed5c:	d035      	beq.n	800edca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ed5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed62:	d82e      	bhi.n	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed68:	d031      	beq.n	800edce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ed6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed6e:	d828      	bhi.n	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed74:	d01a      	beq.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ed76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed7a:	d822      	bhi.n	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ed80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed84:	d007      	beq.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ed86:	e01c      	b.n	800edc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed88:	4b4b      	ldr	r3, [pc, #300]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed8c:	4a4a      	ldr	r2, [pc, #296]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ed94:	e01c      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ed96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed9a:	3308      	adds	r3, #8
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f002 f940 	bl	8011024 <RCCEx_PLL2_Config>
 800eda4:	4603      	mov	r3, r0
 800eda6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edaa:	e011      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edb0:	3328      	adds	r3, #40	@ 0x28
 800edb2:	2100      	movs	r1, #0
 800edb4:	4618      	mov	r0, r3
 800edb6:	f002 f9e7 	bl	8011188 <RCCEx_PLL3_Config>
 800edba:	4603      	mov	r3, r0
 800edbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edc0:	e006      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edc2:	2301      	movs	r3, #1
 800edc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800edc8:	e002      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800edca:	bf00      	nop
 800edcc:	e000      	b.n	800edd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800edce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d10a      	bne.n	800edee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800edd8:	4b37      	ldr	r3, [pc, #220]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eddc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ede0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ede4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ede6:	4a34      	ldr	r2, [pc, #208]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ede8:	430b      	orrs	r3, r1
 800edea:	6513      	str	r3, [r2, #80]	@ 0x50
 800edec:	e003      	b.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800edf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edfe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ee02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ee06:	2300      	movs	r3, #0
 800ee08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ee0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ee10:	460b      	mov	r3, r1
 800ee12:	4313      	orrs	r3, r2
 800ee14:	d056      	beq.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ee16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee20:	d033      	beq.n	800ee8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ee22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee26:	d82c      	bhi.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ee2c:	d02f      	beq.n	800ee8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ee2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ee32:	d826      	bhi.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee38:	d02b      	beq.n	800ee92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ee3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee3e:	d820      	bhi.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee44:	d012      	beq.n	800ee6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ee46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee4a:	d81a      	bhi.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d022      	beq.n	800ee96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ee50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee54:	d115      	bne.n	800ee82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	2101      	movs	r1, #1
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f002 f8e0 	bl	8011024 <RCCEx_PLL2_Config>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee6a:	e015      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee70:	3328      	adds	r3, #40	@ 0x28
 800ee72:	2101      	movs	r1, #1
 800ee74:	4618      	mov	r0, r3
 800ee76:	f002 f987 	bl	8011188 <RCCEx_PLL3_Config>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee80:	e00a      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ee88:	e006      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee8a:	bf00      	nop
 800ee8c:	e004      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee8e:	bf00      	nop
 800ee90:	e002      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee92:	bf00      	nop
 800ee94:	e000      	b.n	800ee98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800ee96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ee98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d10d      	bne.n	800eebc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eea0:	4b05      	ldr	r3, [pc, #20]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eea4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800eea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eeac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eeae:	4a02      	ldr	r2, [pc, #8]	@ (800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eeb0:	430b      	orrs	r3, r1
 800eeb2:	6513      	str	r3, [r2, #80]	@ 0x50
 800eeb4:	e006      	b.n	800eec4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800eeb6:	bf00      	nop
 800eeb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800eec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800eed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eed4:	2300      	movs	r3, #0
 800eed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eeda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800eede:	460b      	mov	r3, r1
 800eee0:	4313      	orrs	r3, r2
 800eee2:	d055      	beq.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800eee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eee8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800eeec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eef0:	d033      	beq.n	800ef5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800eef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800eef6:	d82c      	bhi.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800eef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eefc:	d02f      	beq.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800eefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef02:	d826      	bhi.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ef08:	d02b      	beq.n	800ef62 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ef0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ef0e:	d820      	bhi.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef14:	d012      	beq.n	800ef3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ef16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef1a:	d81a      	bhi.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d022      	beq.n	800ef66 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ef20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef24:	d115      	bne.n	800ef52 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef2a:	3308      	adds	r3, #8
 800ef2c:	2101      	movs	r1, #1
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f002 f878 	bl	8011024 <RCCEx_PLL2_Config>
 800ef34:	4603      	mov	r3, r0
 800ef36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef3a:	e015      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef40:	3328      	adds	r3, #40	@ 0x28
 800ef42:	2101      	movs	r1, #1
 800ef44:	4618      	mov	r0, r3
 800ef46:	f002 f91f 	bl	8011188 <RCCEx_PLL3_Config>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef50:	e00a      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ef52:	2301      	movs	r3, #1
 800ef54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef58:	e006      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef5a:	bf00      	nop
 800ef5c:	e004      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef5e:	bf00      	nop
 800ef60:	e002      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef62:	bf00      	nop
 800ef64:	e000      	b.n	800ef68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d10b      	bne.n	800ef88 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ef70:	4ba3      	ldr	r3, [pc, #652]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef74:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ef78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ef80:	4a9f      	ldr	r2, [pc, #636]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef82:	430b      	orrs	r3, r1
 800ef84:	6593      	str	r3, [r2, #88]	@ 0x58
 800ef86:	e003      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ef90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ef9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800efa0:	2300      	movs	r3, #0
 800efa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800efaa:	460b      	mov	r3, r1
 800efac:	4313      	orrs	r3, r2
 800efae:	d037      	beq.n	800f020 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800efb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efba:	d00e      	beq.n	800efda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800efbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efc0:	d816      	bhi.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d018      	beq.n	800eff8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800efc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800efca:	d111      	bne.n	800eff0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800efcc:	4b8c      	ldr	r3, [pc, #560]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efd0:	4a8b      	ldr	r2, [pc, #556]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800efd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800efd8:	e00f      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800efda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efde:	3308      	adds	r3, #8
 800efe0:	2101      	movs	r1, #1
 800efe2:	4618      	mov	r0, r3
 800efe4:	f002 f81e 	bl	8011024 <RCCEx_PLL2_Config>
 800efe8:	4603      	mov	r3, r0
 800efea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800efee:	e004      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eff0:	2301      	movs	r3, #1
 800eff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eff6:	e000      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800eff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800effa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800effe:	2b00      	cmp	r3, #0
 800f000:	d10a      	bne.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f002:	4b7f      	ldr	r3, [pc, #508]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f004:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f006:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f00e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f010:	4a7b      	ldr	r2, [pc, #492]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f012:	430b      	orrs	r3, r1
 800f014:	6513      	str	r3, [r2, #80]	@ 0x50
 800f016:	e003      	b.n	800f020 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f01c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f028:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800f02c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f030:	2300      	movs	r3, #0
 800f032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f036:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800f03a:	460b      	mov	r3, r1
 800f03c:	4313      	orrs	r3, r2
 800f03e:	d039      	beq.n	800f0b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f044:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f046:	2b03      	cmp	r3, #3
 800f048:	d81c      	bhi.n	800f084 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f04a:	a201      	add	r2, pc, #4	@ (adr r2, 800f050 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f050:	0800f08d 	.word	0x0800f08d
 800f054:	0800f061 	.word	0x0800f061
 800f058:	0800f06f 	.word	0x0800f06f
 800f05c:	0800f08d 	.word	0x0800f08d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f060:	4b67      	ldr	r3, [pc, #412]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f064:	4a66      	ldr	r2, [pc, #408]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f06a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f06c:	e00f      	b.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f072:	3308      	adds	r3, #8
 800f074:	2102      	movs	r1, #2
 800f076:	4618      	mov	r0, r3
 800f078:	f001 ffd4 	bl	8011024 <RCCEx_PLL2_Config>
 800f07c:	4603      	mov	r3, r0
 800f07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f082:	e004      	b.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f084:	2301      	movs	r3, #1
 800f086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f08a:	e000      	b.n	800f08e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f08e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10a      	bne.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f096:	4b5a      	ldr	r3, [pc, #360]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f09a:	f023 0103 	bic.w	r1, r3, #3
 800f09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0a4:	4a56      	ldr	r2, [pc, #344]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0a6:	430b      	orrs	r3, r1
 800f0a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0aa:	e003      	b.n	800f0b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800f0c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f0ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	f000 809f 	beq.w	800f214 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f0d6:	4b4b      	ldr	r3, [pc, #300]	@ (800f204 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a4a      	ldr	r2, [pc, #296]	@ (800f204 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f0dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f0e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f0e2:	f7f3 fd9d 	bl	8002c20 <HAL_GetTick>
 800f0e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f0ea:	e00b      	b.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f0ec:	f7f3 fd98 	bl	8002c20 <HAL_GetTick>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	2b64      	cmp	r3, #100	@ 0x64
 800f0fa:	d903      	bls.n	800f104 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f102:	e005      	b.n	800f110 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f104:	4b3f      	ldr	r3, [pc, #252]	@ (800f204 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d0ed      	beq.n	800f0ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f114:	2b00      	cmp	r3, #0
 800f116:	d179      	bne.n	800f20c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f118:	4b39      	ldr	r3, [pc, #228]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f11a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f120:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f124:	4053      	eors	r3, r2
 800f126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d015      	beq.n	800f15a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f12e:	4b34      	ldr	r3, [pc, #208]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f136:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f13a:	4b31      	ldr	r3, [pc, #196]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f13e:	4a30      	ldr	r2, [pc, #192]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f144:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f146:	4b2e      	ldr	r3, [pc, #184]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f14a:	4a2d      	ldr	r2, [pc, #180]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f14c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f150:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f152:	4a2b      	ldr	r2, [pc, #172]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f158:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f15e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f162:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f166:	d118      	bne.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f168:	f7f3 fd5a 	bl	8002c20 <HAL_GetTick>
 800f16c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f170:	e00d      	b.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f172:	f7f3 fd55 	bl	8002c20 <HAL_GetTick>
 800f176:	4602      	mov	r2, r0
 800f178:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f17c:	1ad2      	subs	r2, r2, r3
 800f17e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f182:	429a      	cmp	r2, r3
 800f184:	d903      	bls.n	800f18e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f186:	2303      	movs	r3, #3
 800f188:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800f18c:	e005      	b.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f18e:	4b1c      	ldr	r3, [pc, #112]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f192:	f003 0302 	and.w	r3, r3, #2
 800f196:	2b00      	cmp	r3, #0
 800f198:	d0eb      	beq.n	800f172 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f19a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d129      	bne.n	800f1f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f1a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f1aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1b2:	d10e      	bne.n	800f1d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f1b4:	4b12      	ldr	r3, [pc, #72]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1b6:	691b      	ldr	r3, [r3, #16]
 800f1b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800f1bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f1c4:	091a      	lsrs	r2, r3, #4
 800f1c6:	4b10      	ldr	r3, [pc, #64]	@ (800f208 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f1c8:	4013      	ands	r3, r2
 800f1ca:	4a0d      	ldr	r2, [pc, #52]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1cc:	430b      	orrs	r3, r1
 800f1ce:	6113      	str	r3, [r2, #16]
 800f1d0:	e005      	b.n	800f1de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1d4:	691b      	ldr	r3, [r3, #16]
 800f1d6:	4a0a      	ldr	r2, [pc, #40]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f1dc:	6113      	str	r3, [r2, #16]
 800f1de:	4b08      	ldr	r3, [pc, #32]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f1e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f1ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1ee:	4a04      	ldr	r2, [pc, #16]	@ (800f200 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1f0:	430b      	orrs	r3, r1
 800f1f2:	6713      	str	r3, [r2, #112]	@ 0x70
 800f1f4:	e00e      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f1f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800f1fe:	e009      	b.n	800f214 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f200:	58024400 	.word	0x58024400
 800f204:	58024800 	.word	0x58024800
 800f208:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f20c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f21c:	f002 0301 	and.w	r3, r2, #1
 800f220:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f224:	2300      	movs	r3, #0
 800f226:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f22a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f22e:	460b      	mov	r3, r1
 800f230:	4313      	orrs	r3, r2
 800f232:	f000 8089 	beq.w	800f348 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f23a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f23c:	2b28      	cmp	r3, #40	@ 0x28
 800f23e:	d86b      	bhi.n	800f318 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f240:	a201      	add	r2, pc, #4	@ (adr r2, 800f248 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f246:	bf00      	nop
 800f248:	0800f321 	.word	0x0800f321
 800f24c:	0800f319 	.word	0x0800f319
 800f250:	0800f319 	.word	0x0800f319
 800f254:	0800f319 	.word	0x0800f319
 800f258:	0800f319 	.word	0x0800f319
 800f25c:	0800f319 	.word	0x0800f319
 800f260:	0800f319 	.word	0x0800f319
 800f264:	0800f319 	.word	0x0800f319
 800f268:	0800f2ed 	.word	0x0800f2ed
 800f26c:	0800f319 	.word	0x0800f319
 800f270:	0800f319 	.word	0x0800f319
 800f274:	0800f319 	.word	0x0800f319
 800f278:	0800f319 	.word	0x0800f319
 800f27c:	0800f319 	.word	0x0800f319
 800f280:	0800f319 	.word	0x0800f319
 800f284:	0800f319 	.word	0x0800f319
 800f288:	0800f303 	.word	0x0800f303
 800f28c:	0800f319 	.word	0x0800f319
 800f290:	0800f319 	.word	0x0800f319
 800f294:	0800f319 	.word	0x0800f319
 800f298:	0800f319 	.word	0x0800f319
 800f29c:	0800f319 	.word	0x0800f319
 800f2a0:	0800f319 	.word	0x0800f319
 800f2a4:	0800f319 	.word	0x0800f319
 800f2a8:	0800f321 	.word	0x0800f321
 800f2ac:	0800f319 	.word	0x0800f319
 800f2b0:	0800f319 	.word	0x0800f319
 800f2b4:	0800f319 	.word	0x0800f319
 800f2b8:	0800f319 	.word	0x0800f319
 800f2bc:	0800f319 	.word	0x0800f319
 800f2c0:	0800f319 	.word	0x0800f319
 800f2c4:	0800f319 	.word	0x0800f319
 800f2c8:	0800f321 	.word	0x0800f321
 800f2cc:	0800f319 	.word	0x0800f319
 800f2d0:	0800f319 	.word	0x0800f319
 800f2d4:	0800f319 	.word	0x0800f319
 800f2d8:	0800f319 	.word	0x0800f319
 800f2dc:	0800f319 	.word	0x0800f319
 800f2e0:	0800f319 	.word	0x0800f319
 800f2e4:	0800f319 	.word	0x0800f319
 800f2e8:	0800f321 	.word	0x0800f321
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f2ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f2f0:	3308      	adds	r3, #8
 800f2f2:	2101      	movs	r1, #1
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f001 fe95 	bl	8011024 <RCCEx_PLL2_Config>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f300:	e00f      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f306:	3328      	adds	r3, #40	@ 0x28
 800f308:	2101      	movs	r1, #1
 800f30a:	4618      	mov	r0, r3
 800f30c:	f001 ff3c 	bl	8011188 <RCCEx_PLL3_Config>
 800f310:	4603      	mov	r3, r0
 800f312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f316:	e004      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f318:	2301      	movs	r3, #1
 800f31a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f31e:	e000      	b.n	800f322 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f320:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f322:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f326:	2b00      	cmp	r3, #0
 800f328:	d10a      	bne.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f32a:	4bbf      	ldr	r3, [pc, #764]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f32c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f32e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f338:	4abb      	ldr	r2, [pc, #748]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f33a:	430b      	orrs	r3, r1
 800f33c:	6553      	str	r3, [r2, #84]	@ 0x54
 800f33e:	e003      	b.n	800f348 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f344:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f350:	f002 0302 	and.w	r3, r2, #2
 800f354:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f358:	2300      	movs	r3, #0
 800f35a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f35e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f362:	460b      	mov	r3, r1
 800f364:	4313      	orrs	r3, r2
 800f366:	d041      	beq.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f36c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f36e:	2b05      	cmp	r3, #5
 800f370:	d824      	bhi.n	800f3bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f372:	a201      	add	r2, pc, #4	@ (adr r2, 800f378 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f378:	0800f3c5 	.word	0x0800f3c5
 800f37c:	0800f391 	.word	0x0800f391
 800f380:	0800f3a7 	.word	0x0800f3a7
 800f384:	0800f3c5 	.word	0x0800f3c5
 800f388:	0800f3c5 	.word	0x0800f3c5
 800f38c:	0800f3c5 	.word	0x0800f3c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f394:	3308      	adds	r3, #8
 800f396:	2101      	movs	r1, #1
 800f398:	4618      	mov	r0, r3
 800f39a:	f001 fe43 	bl	8011024 <RCCEx_PLL2_Config>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3a4:	e00f      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3aa:	3328      	adds	r3, #40	@ 0x28
 800f3ac:	2101      	movs	r1, #1
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f001 feea 	bl	8011188 <RCCEx_PLL3_Config>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3ba:	e004      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f3c2:	e000      	b.n	800f3c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f3c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d10a      	bne.n	800f3e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f3ce:	4b96      	ldr	r3, [pc, #600]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3d2:	f023 0107 	bic.w	r1, r3, #7
 800f3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3dc:	4a92      	ldr	r2, [pc, #584]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800f3e2:	e003      	b.n	800f3ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3f4:	f002 0304 	and.w	r3, r2, #4
 800f3f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f402:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800f406:	460b      	mov	r3, r1
 800f408:	4313      	orrs	r3, r2
 800f40a:	d044      	beq.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f410:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f414:	2b05      	cmp	r3, #5
 800f416:	d825      	bhi.n	800f464 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f418:	a201      	add	r2, pc, #4	@ (adr r2, 800f420 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41e:	bf00      	nop
 800f420:	0800f46d 	.word	0x0800f46d
 800f424:	0800f439 	.word	0x0800f439
 800f428:	0800f44f 	.word	0x0800f44f
 800f42c:	0800f46d 	.word	0x0800f46d
 800f430:	0800f46d 	.word	0x0800f46d
 800f434:	0800f46d 	.word	0x0800f46d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f43c:	3308      	adds	r3, #8
 800f43e:	2101      	movs	r1, #1
 800f440:	4618      	mov	r0, r3
 800f442:	f001 fdef 	bl	8011024 <RCCEx_PLL2_Config>
 800f446:	4603      	mov	r3, r0
 800f448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f44c:	e00f      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f44e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f452:	3328      	adds	r3, #40	@ 0x28
 800f454:	2101      	movs	r1, #1
 800f456:	4618      	mov	r0, r3
 800f458:	f001 fe96 	bl	8011188 <RCCEx_PLL3_Config>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f462:	e004      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f464:	2301      	movs	r3, #1
 800f466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f46a:	e000      	b.n	800f46e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f46c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f46e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f472:	2b00      	cmp	r3, #0
 800f474:	d10b      	bne.n	800f48e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f476:	4b6c      	ldr	r3, [pc, #432]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f47a:	f023 0107 	bic.w	r1, r3, #7
 800f47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f486:	4a68      	ldr	r2, [pc, #416]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f488:	430b      	orrs	r3, r1
 800f48a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f48c:	e003      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f48e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f492:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	f002 0320 	and.w	r3, r2, #32
 800f4a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f4ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	d055      	beq.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4c2:	d033      	beq.n	800f52c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f4c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4c8:	d82c      	bhi.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4ce:	d02f      	beq.n	800f530 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f4d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4d4:	d826      	bhi.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4da:	d02b      	beq.n	800f534 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f4dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f4e0:	d820      	bhi.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4e6:	d012      	beq.n	800f50e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f4e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f4ec:	d81a      	bhi.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d022      	beq.n	800f538 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f4f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4f6:	d115      	bne.n	800f524 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	2100      	movs	r1, #0
 800f500:	4618      	mov	r0, r3
 800f502:	f001 fd8f 	bl	8011024 <RCCEx_PLL2_Config>
 800f506:	4603      	mov	r3, r0
 800f508:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f50c:	e015      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f512:	3328      	adds	r3, #40	@ 0x28
 800f514:	2102      	movs	r1, #2
 800f516:	4618      	mov	r0, r3
 800f518:	f001 fe36 	bl	8011188 <RCCEx_PLL3_Config>
 800f51c:	4603      	mov	r3, r0
 800f51e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f522:	e00a      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f524:	2301      	movs	r3, #1
 800f526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f52a:	e006      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f52c:	bf00      	nop
 800f52e:	e004      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f530:	bf00      	nop
 800f532:	e002      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f534:	bf00      	nop
 800f536:	e000      	b.n	800f53a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f53a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f542:	4b39      	ldr	r3, [pc, #228]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f546:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f552:	4a35      	ldr	r2, [pc, #212]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f554:	430b      	orrs	r3, r1
 800f556:	6553      	str	r3, [r2, #84]	@ 0x54
 800f558:	e003      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f55a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f55e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f56e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f572:	2300      	movs	r3, #0
 800f574:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f578:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f57c:	460b      	mov	r3, r1
 800f57e:	4313      	orrs	r3, r2
 800f580:	d058      	beq.n	800f634 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f586:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f58a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f58e:	d033      	beq.n	800f5f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f590:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f594:	d82c      	bhi.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f59a:	d02f      	beq.n	800f5fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f59c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5a0:	d826      	bhi.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5a6:	d02b      	beq.n	800f600 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f5a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5ac:	d820      	bhi.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5b2:	d012      	beq.n	800f5da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f5b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5b8:	d81a      	bhi.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d022      	beq.n	800f604 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f5be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5c2:	d115      	bne.n	800f5f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f5c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f001 fd29 	bl	8011024 <RCCEx_PLL2_Config>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f5d8:	e015      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f5da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5de:	3328      	adds	r3, #40	@ 0x28
 800f5e0:	2102      	movs	r1, #2
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f001 fdd0 	bl	8011188 <RCCEx_PLL3_Config>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f5ee:	e00a      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f5f6:	e006      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f5f8:	bf00      	nop
 800f5fa:	e004      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f5fc:	bf00      	nop
 800f5fe:	e002      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f600:	bf00      	nop
 800f602:	e000      	b.n	800f606 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f606:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10e      	bne.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f60e:	4b06      	ldr	r3, [pc, #24]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f612:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f61a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f61e:	4a02      	ldr	r2, [pc, #8]	@ (800f628 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f620:	430b      	orrs	r3, r1
 800f622:	6593      	str	r3, [r2, #88]	@ 0x58
 800f624:	e006      	b.n	800f634 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f626:	bf00      	nop
 800f628:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f62c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f640:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f644:	2300      	movs	r3, #0
 800f646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f64a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f64e:	460b      	mov	r3, r1
 800f650:	4313      	orrs	r3, r2
 800f652:	d055      	beq.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f658:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f65c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f660:	d033      	beq.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f662:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f666:	d82c      	bhi.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f66c:	d02f      	beq.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f66e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f672:	d826      	bhi.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f674:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f678:	d02b      	beq.n	800f6d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f67a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f67e:	d820      	bhi.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f680:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f684:	d012      	beq.n	800f6ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f686:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f68a:	d81a      	bhi.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d022      	beq.n	800f6d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f694:	d115      	bne.n	800f6c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f69a:	3308      	adds	r3, #8
 800f69c:	2100      	movs	r1, #0
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f001 fcc0 	bl	8011024 <RCCEx_PLL2_Config>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6aa:	e015      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6b0:	3328      	adds	r3, #40	@ 0x28
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f001 fd67 	bl	8011188 <RCCEx_PLL3_Config>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6c0:	e00a      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f6c8:	e006      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6ca:	bf00      	nop
 800f6cc:	e004      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6ce:	bf00      	nop
 800f6d0:	e002      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6d2:	bf00      	nop
 800f6d4:	e000      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f6d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d10b      	bne.n	800f6f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f6e0:	4ba1      	ldr	r3, [pc, #644]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f6e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f6e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f6f0:	4a9d      	ldr	r2, [pc, #628]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f6f2:	430b      	orrs	r3, r1
 800f6f4:	6593      	str	r3, [r2, #88]	@ 0x58
 800f6f6:	e003      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f6fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f708:	f002 0308 	and.w	r3, r2, #8
 800f70c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f710:	2300      	movs	r3, #0
 800f712:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f716:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f71a:	460b      	mov	r3, r1
 800f71c:	4313      	orrs	r3, r2
 800f71e:	d01e      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f72c:	d10c      	bne.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f732:	3328      	adds	r3, #40	@ 0x28
 800f734:	2102      	movs	r1, #2
 800f736:	4618      	mov	r0, r3
 800f738:	f001 fd26 	bl	8011188 <RCCEx_PLL3_Config>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d002      	beq.n	800f748 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f742:	2301      	movs	r3, #1
 800f744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f748:	4b87      	ldr	r3, [pc, #540]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f74c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f758:	4a83      	ldr	r2, [pc, #524]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f75a:	430b      	orrs	r3, r1
 800f75c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f75e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f766:	f002 0310 	and.w	r3, r2, #16
 800f76a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f76e:	2300      	movs	r3, #0
 800f770:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f774:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f778:	460b      	mov	r3, r1
 800f77a:	4313      	orrs	r3, r2
 800f77c:	d01e      	beq.n	800f7bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f78a:	d10c      	bne.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f790:	3328      	adds	r3, #40	@ 0x28
 800f792:	2102      	movs	r1, #2
 800f794:	4618      	mov	r0, r3
 800f796:	f001 fcf7 	bl	8011188 <RCCEx_PLL3_Config>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f7a6:	4b70      	ldr	r3, [pc, #448]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f7b6:	4a6c      	ldr	r2, [pc, #432]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7b8:	430b      	orrs	r3, r1
 800f7ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f7bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f7c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f7d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	d03e      	beq.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f7dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f7e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7e8:	d022      	beq.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f7ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f7ee:	d81b      	bhi.n	800f828 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d003      	beq.n	800f7fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f7f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7f8:	d00b      	beq.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f7fa:	e015      	b.n	800f828 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f800:	3308      	adds	r3, #8
 800f802:	2100      	movs	r1, #0
 800f804:	4618      	mov	r0, r3
 800f806:	f001 fc0d 	bl	8011024 <RCCEx_PLL2_Config>
 800f80a:	4603      	mov	r3, r0
 800f80c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f810:	e00f      	b.n	800f832 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f816:	3328      	adds	r3, #40	@ 0x28
 800f818:	2102      	movs	r1, #2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f001 fcb4 	bl	8011188 <RCCEx_PLL3_Config>
 800f820:	4603      	mov	r3, r0
 800f822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f826:	e004      	b.n	800f832 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f828:	2301      	movs	r3, #1
 800f82a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f82e:	e000      	b.n	800f832 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f830:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10b      	bne.n	800f852 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f83a:	4b4b      	ldr	r3, [pc, #300]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f83c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f83e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f84a:	4a47      	ldr	r2, [pc, #284]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f84c:	430b      	orrs	r3, r1
 800f84e:	6593      	str	r3, [r2, #88]	@ 0x58
 800f850:	e003      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f856:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f85a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f862:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f866:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f868:	2300      	movs	r3, #0
 800f86a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f86c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f870:	460b      	mov	r3, r1
 800f872:	4313      	orrs	r3, r2
 800f874:	d03b      	beq.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f87e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f882:	d01f      	beq.n	800f8c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f884:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f888:	d818      	bhi.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f88a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f88e:	d003      	beq.n	800f898 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f894:	d007      	beq.n	800f8a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f896:	e011      	b.n	800f8bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f898:	4b33      	ldr	r3, [pc, #204]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f89c:	4a32      	ldr	r2, [pc, #200]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f89e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f8a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8a4:	e00f      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8aa:	3328      	adds	r3, #40	@ 0x28
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f001 fc6a 	bl	8011188 <RCCEx_PLL3_Config>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8ba:	e004      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f8c2:	e000      	b.n	800f8c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f8c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d10b      	bne.n	800f8e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8ce:	4b26      	ldr	r3, [pc, #152]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f8d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8de:	4a22      	ldr	r2, [pc, #136]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8e0:	430b      	orrs	r3, r1
 800f8e2:	6553      	str	r3, [r2, #84]	@ 0x54
 800f8e4:	e003      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f8ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f8fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800f900:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f904:	460b      	mov	r3, r1
 800f906:	4313      	orrs	r3, r2
 800f908:	d034      	beq.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f90e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f910:	2b00      	cmp	r3, #0
 800f912:	d003      	beq.n	800f91c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f918:	d007      	beq.n	800f92a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f91a:	e011      	b.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f91c:	4b12      	ldr	r3, [pc, #72]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f920:	4a11      	ldr	r2, [pc, #68]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f928:	e00e      	b.n	800f948 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f92e:	3308      	adds	r3, #8
 800f930:	2102      	movs	r1, #2
 800f932:	4618      	mov	r0, r3
 800f934:	f001 fb76 	bl	8011024 <RCCEx_PLL2_Config>
 800f938:	4603      	mov	r3, r0
 800f93a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f93e:	e003      	b.n	800f948 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f946:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10d      	bne.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f950:	4b05      	ldr	r3, [pc, #20]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f954:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f95c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f95e:	4a02      	ldr	r2, [pc, #8]	@ (800f968 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f960:	430b      	orrs	r3, r1
 800f962:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f964:	e006      	b.n	800f974 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f966:	bf00      	nop
 800f968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f96c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f980:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f982:	2300      	movs	r3, #0
 800f984:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f986:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f98a:	460b      	mov	r3, r1
 800f98c:	4313      	orrs	r3, r2
 800f98e:	d00c      	beq.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f994:	3328      	adds	r3, #40	@ 0x28
 800f996:	2102      	movs	r1, #2
 800f998:	4618      	mov	r0, r3
 800f99a:	f001 fbf5 	bl	8011188 <RCCEx_PLL3_Config>
 800f99e:	4603      	mov	r3, r0
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d002      	beq.n	800f9aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f9aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f9b6:	663b      	str	r3, [r7, #96]	@ 0x60
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800f9bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	4313      	orrs	r3, r2
 800f9c4:	d038      	beq.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f9c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9d2:	d018      	beq.n	800fa06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f9d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9d8:	d811      	bhi.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f9da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9de:	d014      	beq.n	800fa0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800f9e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9e4:	d80b      	bhi.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d011      	beq.n	800fa0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800f9ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f9ee:	d106      	bne.n	800f9fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f9f0:	4bc3      	ldr	r3, [pc, #780]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9f4:	4ac2      	ldr	r2, [pc, #776]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800f9f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f9fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800f9fc:	e008      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fa04:	e004      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa06:	bf00      	nop
 800fa08:	e002      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa0a:	bf00      	nop
 800fa0c:	e000      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d10b      	bne.n	800fa30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fa18:	4bb9      	ldr	r3, [pc, #740]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800fa20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa28:	4ab5      	ldr	r2, [pc, #724]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa2a:	430b      	orrs	r3, r1
 800fa2c:	6553      	str	r3, [r2, #84]	@ 0x54
 800fa2e:	e003      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800fa44:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa46:	2300      	movs	r3, #0
 800fa48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800fa4e:	460b      	mov	r3, r1
 800fa50:	4313      	orrs	r3, r2
 800fa52:	d009      	beq.n	800fa68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa54:	4baa      	ldr	r3, [pc, #680]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa62:	4aa7      	ldr	r2, [pc, #668]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa64:	430b      	orrs	r3, r1
 800fa66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800fa74:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa76:	2300      	movs	r3, #0
 800fa78:	657b      	str	r3, [r7, #84]	@ 0x54
 800fa7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800fa7e:	460b      	mov	r3, r1
 800fa80:	4313      	orrs	r3, r2
 800fa82:	d00a      	beq.n	800fa9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800fa84:	4b9e      	ldr	r3, [pc, #632]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800fa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fa94:	4a9a      	ldr	r2, [pc, #616]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa96:	430b      	orrs	r3, r1
 800fa98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800faa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800faa8:	2300      	movs	r3, #0
 800faaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800faac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fab0:	460b      	mov	r3, r1
 800fab2:	4313      	orrs	r3, r2
 800fab4:	d009      	beq.n	800faca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fab6:	4b92      	ldr	r3, [pc, #584]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800faba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800fabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fac4:	4a8e      	ldr	r2, [pc, #568]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fac6:	430b      	orrs	r3, r1
 800fac8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800faca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800face:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800fad6:	643b      	str	r3, [r7, #64]	@ 0x40
 800fad8:	2300      	movs	r3, #0
 800fada:	647b      	str	r3, [r7, #68]	@ 0x44
 800fadc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800fae0:	460b      	mov	r3, r1
 800fae2:	4313      	orrs	r3, r2
 800fae4:	d00e      	beq.n	800fb04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fae6:	4b86      	ldr	r3, [pc, #536]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fae8:	691b      	ldr	r3, [r3, #16]
 800faea:	4a85      	ldr	r2, [pc, #532]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800faf0:	6113      	str	r3, [r2, #16]
 800faf2:	4b83      	ldr	r3, [pc, #524]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faf4:	6919      	ldr	r1, [r3, #16]
 800faf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fafa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fafe:	4a80      	ldr	r2, [pc, #512]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb00:	430b      	orrs	r3, r1
 800fb02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fb04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800fb10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fb12:	2300      	movs	r3, #0
 800fb14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	d009      	beq.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fb20:	4b77      	ldr	r3, [pc, #476]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fb28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb2e:	4a74      	ldr	r2, [pc, #464]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb30:	430b      	orrs	r3, r1
 800fb32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800fb40:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb42:	2300      	movs	r3, #0
 800fb44:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	d00a      	beq.n	800fb66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb50:	4b6b      	ldr	r3, [pc, #428]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800fb58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb60:	4a67      	ldr	r2, [pc, #412]	@ (800fd00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb62:	430b      	orrs	r3, r1
 800fb64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb6e:	2100      	movs	r1, #0
 800fb70:	62b9      	str	r1, [r7, #40]	@ 0x28
 800fb72:	f003 0301 	and.w	r3, r3, #1
 800fb76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fb78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	d011      	beq.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb86:	3308      	adds	r3, #8
 800fb88:	2100      	movs	r1, #0
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 fa4a 	bl	8011024 <RCCEx_PLL2_Config>
 800fb90:	4603      	mov	r3, r0
 800fb92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fb96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d003      	beq.n	800fba6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbae:	2100      	movs	r1, #0
 800fbb0:	6239      	str	r1, [r7, #32]
 800fbb2:	f003 0302 	and.w	r3, r3, #2
 800fbb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	4313      	orrs	r3, r2
 800fbc0:	d011      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fbc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbc6:	3308      	adds	r3, #8
 800fbc8:	2101      	movs	r1, #1
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f001 fa2a 	bl	8011024 <RCCEx_PLL2_Config>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fbd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d003      	beq.n	800fbe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fbe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	2100      	movs	r1, #0
 800fbf0:	61b9      	str	r1, [r7, #24]
 800fbf2:	f003 0304 	and.w	r3, r3, #4
 800fbf6:	61fb      	str	r3, [r7, #28]
 800fbf8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	4313      	orrs	r3, r2
 800fc00:	d011      	beq.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc06:	3308      	adds	r3, #8
 800fc08:	2102      	movs	r1, #2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f001 fa0a 	bl	8011024 <RCCEx_PLL2_Config>
 800fc10:	4603      	mov	r3, r0
 800fc12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fc16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d003      	beq.n	800fc26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	2100      	movs	r1, #0
 800fc30:	6139      	str	r1, [r7, #16]
 800fc32:	f003 0308 	and.w	r3, r3, #8
 800fc36:	617b      	str	r3, [r7, #20]
 800fc38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fc3c:	460b      	mov	r3, r1
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	d011      	beq.n	800fc66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc46:	3328      	adds	r3, #40	@ 0x28
 800fc48:	2100      	movs	r1, #0
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f001 fa9c 	bl	8011188 <RCCEx_PLL3_Config>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800fc56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6e:	2100      	movs	r1, #0
 800fc70:	60b9      	str	r1, [r7, #8]
 800fc72:	f003 0310 	and.w	r3, r3, #16
 800fc76:	60fb      	str	r3, [r7, #12]
 800fc78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	d011      	beq.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fc82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc86:	3328      	adds	r3, #40	@ 0x28
 800fc88:	2101      	movs	r1, #1
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f001 fa7c 	bl	8011188 <RCCEx_PLL3_Config>
 800fc90:	4603      	mov	r3, r0
 800fc92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fc96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d003      	beq.n	800fca6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fca2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcae:	2100      	movs	r1, #0
 800fcb0:	6039      	str	r1, [r7, #0]
 800fcb2:	f003 0320 	and.w	r3, r3, #32
 800fcb6:	607b      	str	r3, [r7, #4]
 800fcb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	d011      	beq.n	800fce6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcc6:	3328      	adds	r3, #40	@ 0x28
 800fcc8:	2102      	movs	r1, #2
 800fcca:	4618      	mov	r0, r3
 800fccc:	f001 fa5c 	bl	8011188 <RCCEx_PLL3_Config>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fcd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800fce6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d101      	bne.n	800fcf2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e000      	b.n	800fcf4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fcf2:	2301      	movs	r3, #1
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd00:	58024400 	.word	0x58024400

0800fd04 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b090      	sub	sp, #64	@ 0x40
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fd0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd12:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800fd16:	430b      	orrs	r3, r1
 800fd18:	f040 8094 	bne.w	800fe44 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fd1c:	4b9e      	ldr	r3, [pc, #632]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd20:	f003 0307 	and.w	r3, r3, #7
 800fd24:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd28:	2b04      	cmp	r3, #4
 800fd2a:	f200 8087 	bhi.w	800fe3c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd34 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd34:	0800fd49 	.word	0x0800fd49
 800fd38:	0800fd71 	.word	0x0800fd71
 800fd3c:	0800fd99 	.word	0x0800fd99
 800fd40:	0800fe35 	.word	0x0800fe35
 800fd44:	0800fdc1 	.word	0x0800fdc1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd48:	4b93      	ldr	r3, [pc, #588]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd54:	d108      	bne.n	800fd68 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f001 f810 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd64:	f000 bd45 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd6c:	f000 bd41 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd70:	4b89      	ldr	r3, [pc, #548]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fd78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fd7c:	d108      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd7e:	f107 0318 	add.w	r3, r7, #24
 800fd82:	4618      	mov	r0, r3
 800fd84:	f000 fd54 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd8c:	f000 bd31 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd94:	f000 bd2d 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fd98:	4b7f      	ldr	r3, [pc, #508]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fda0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fda4:	d108      	bne.n	800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fda6:	f107 030c 	add.w	r3, r7, #12
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fe94 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb4:	f000 bd1d 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdbc:	f000 bd19 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fdc0:	4b75      	ldr	r3, [pc, #468]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fdc8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fdca:	4b73      	ldr	r3, [pc, #460]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f003 0304 	and.w	r3, r3, #4
 800fdd2:	2b04      	cmp	r3, #4
 800fdd4:	d10c      	bne.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fdd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d109      	bne.n	800fdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fddc:	4b6e      	ldr	r3, [pc, #440]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	08db      	lsrs	r3, r3, #3
 800fde2:	f003 0303 	and.w	r3, r3, #3
 800fde6:	4a6d      	ldr	r2, [pc, #436]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fde8:	fa22 f303 	lsr.w	r3, r2, r3
 800fdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fdee:	e01f      	b.n	800fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fdf0:	4b69      	ldr	r3, [pc, #420]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fdfc:	d106      	bne.n	800fe0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe04:	d102      	bne.n	800fe0c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe06:	4b66      	ldr	r3, [pc, #408]	@ (800ffa0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fe08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe0a:	e011      	b.n	800fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe0c:	4b62      	ldr	r3, [pc, #392]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe18:	d106      	bne.n	800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fe1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe20:	d102      	bne.n	800fe28 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fe22:	4b60      	ldr	r3, [pc, #384]	@ (800ffa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fe24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe26:	e003      	b.n	800fe30 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fe2c:	f000 bce1 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fe30:	f000 bcdf 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe34:	4b5c      	ldr	r3, [pc, #368]	@ (800ffa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fe36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe38:	f000 bcdb 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe40:	f000 bcd7 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fe44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe48:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800fe4c:	430b      	orrs	r3, r1
 800fe4e:	f040 80ad 	bne.w	800ffac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fe52:	4b51      	ldr	r3, [pc, #324]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe56:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800fe5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fe5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe62:	d056      	beq.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800fe64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe6a:	f200 8090 	bhi.w	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe70:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe72:	f000 8088 	beq.w	800ff86 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800fe76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe78:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe7a:	f200 8088 	bhi.w	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe80:	2b80      	cmp	r3, #128	@ 0x80
 800fe82:	d032      	beq.n	800feea <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe86:	2b80      	cmp	r3, #128	@ 0x80
 800fe88:	f200 8081 	bhi.w	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d003      	beq.n	800fe9a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800fe92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe94:	2b40      	cmp	r3, #64	@ 0x40
 800fe96:	d014      	beq.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fe98:	e079      	b.n	800ff8e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fe9a:	4b3f      	ldr	r3, [pc, #252]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fea6:	d108      	bne.n	800feba <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800feac:	4618      	mov	r0, r3
 800feae:	f000 ff67 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800feb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800feb6:	f000 bc9c 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800febe:	f000 bc98 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fec2:	4b35      	ldr	r3, [pc, #212]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800feca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fece:	d108      	bne.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fed0:	f107 0318 	add.w	r3, r7, #24
 800fed4:	4618      	mov	r0, r3
 800fed6:	f000 fcab 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fede:	f000 bc88 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fee2:	2300      	movs	r3, #0
 800fee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee6:	f000 bc84 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800feea:	4b2b      	ldr	r3, [pc, #172]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fef2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fef6:	d108      	bne.n	800ff0a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fef8:	f107 030c 	add.w	r3, r7, #12
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fdeb 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff06:	f000 bc74 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff0e:	f000 bc70 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ff12:	4b21      	ldr	r3, [pc, #132]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ff1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ff1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f003 0304 	and.w	r3, r3, #4
 800ff24:	2b04      	cmp	r3, #4
 800ff26:	d10c      	bne.n	800ff42 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ff28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d109      	bne.n	800ff42 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	08db      	lsrs	r3, r3, #3
 800ff34:	f003 0303 	and.w	r3, r3, #3
 800ff38:	4a18      	ldr	r2, [pc, #96]	@ (800ff9c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ff3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff40:	e01f      	b.n	800ff82 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ff42:	4b15      	ldr	r3, [pc, #84]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff4e:	d106      	bne.n	800ff5e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ff50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff56:	d102      	bne.n	800ff5e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ff58:	4b11      	ldr	r3, [pc, #68]	@ (800ffa0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ff5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff5c:	e011      	b.n	800ff82 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ff5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ff98 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ff6a:	d106      	bne.n	800ff7a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ff6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff72:	d102      	bne.n	800ff7a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ff74:	4b0b      	ldr	r3, [pc, #44]	@ (800ffa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ff76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff78:	e003      	b.n	800ff82 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ff7e:	f000 bc38 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ff82:	f000 bc36 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ff86:	4b08      	ldr	r3, [pc, #32]	@ (800ffa8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ff88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff8a:	f000 bc32 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff92:	f000 bc2e 	b.w	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ff96:	bf00      	nop
 800ff98:	58024400 	.word	0x58024400
 800ff9c:	03d09000 	.word	0x03d09000
 800ffa0:	003d0900 	.word	0x003d0900
 800ffa4:	017d7840 	.word	0x017d7840
 800ffa8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ffac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffb0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ffb4:	430b      	orrs	r3, r1
 800ffb6:	f040 809c 	bne.w	80100f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ffba:	4b9e      	ldr	r3, [pc, #632]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffbe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ffc2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ffc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ffca:	d054      	beq.n	8010076 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ffd2:	f200 808b 	bhi.w	80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ffd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ffdc:	f000 8083 	beq.w	80100e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ffe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffe2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ffe6:	f200 8081 	bhi.w	80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ffea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fff0:	d02f      	beq.n	8010052 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800fff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fff8:	d878      	bhi.n	80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d004      	beq.n	801000a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010002:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010006:	d012      	beq.n	801002e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010008:	e070      	b.n	80100ec <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801000a:	4b8a      	ldr	r3, [pc, #552]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010016:	d107      	bne.n	8010028 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010018:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801001c:	4618      	mov	r0, r3
 801001e:	f000 feaf 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010026:	e3e4      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010028:	2300      	movs	r3, #0
 801002a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801002c:	e3e1      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801002e:	4b81      	ldr	r3, [pc, #516]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801003a:	d107      	bne.n	801004c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801003c:	f107 0318 	add.w	r3, r7, #24
 8010040:	4618      	mov	r0, r3
 8010042:	f000 fbf5 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801004a:	e3d2      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801004c:	2300      	movs	r3, #0
 801004e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010050:	e3cf      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010052:	4b78      	ldr	r3, [pc, #480]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801005a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801005e:	d107      	bne.n	8010070 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010060:	f107 030c 	add.w	r3, r7, #12
 8010064:	4618      	mov	r0, r3
 8010066:	f000 fd37 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801006e:	e3c0      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010070:	2300      	movs	r3, #0
 8010072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010074:	e3bd      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010076:	4b6f      	ldr	r3, [pc, #444]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801007a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801007e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010080:	4b6c      	ldr	r3, [pc, #432]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f003 0304 	and.w	r3, r3, #4
 8010088:	2b04      	cmp	r3, #4
 801008a:	d10c      	bne.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801008c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801008e:	2b00      	cmp	r3, #0
 8010090:	d109      	bne.n	80100a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010092:	4b68      	ldr	r3, [pc, #416]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	08db      	lsrs	r3, r3, #3
 8010098:	f003 0303 	and.w	r3, r3, #3
 801009c:	4a66      	ldr	r2, [pc, #408]	@ (8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801009e:	fa22 f303 	lsr.w	r3, r2, r3
 80100a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100a4:	e01e      	b.n	80100e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100a6:	4b63      	ldr	r3, [pc, #396]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100b2:	d106      	bne.n	80100c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80100b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100ba:	d102      	bne.n	80100c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100bc:	4b5f      	ldr	r3, [pc, #380]	@ (801023c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80100be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100c0:	e010      	b.n	80100e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100c2:	4b5c      	ldr	r3, [pc, #368]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80100ce:	d106      	bne.n	80100de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80100d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100d6:	d102      	bne.n	80100de <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80100d8:	4b59      	ldr	r3, [pc, #356]	@ (8010240 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80100da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100dc:	e002      	b.n	80100e4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80100de:	2300      	movs	r3, #0
 80100e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80100e2:	e386      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80100e4:	e385      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80100e6:	4b57      	ldr	r3, [pc, #348]	@ (8010244 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80100e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100ea:	e382      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80100ec:	2300      	movs	r3, #0
 80100ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100f0:	e37f      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80100f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100f6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80100fa:	430b      	orrs	r3, r1
 80100fc:	f040 80a7 	bne.w	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010100:	4b4c      	ldr	r3, [pc, #304]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010104:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010108:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801010a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801010c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010110:	d055      	beq.n	80101be <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8010112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010118:	f200 8096 	bhi.w	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801011c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801011e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010122:	f000 8084 	beq.w	801022e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8010126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010128:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801012c:	f200 808c 	bhi.w	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010136:	d030      	beq.n	801019a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801013e:	f200 8083 	bhi.w	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010144:	2b00      	cmp	r3, #0
 8010146:	d004      	beq.n	8010152 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801014a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801014e:	d012      	beq.n	8010176 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010150:	e07a      	b.n	8010248 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010152:	4b38      	ldr	r3, [pc, #224]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801015a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801015e:	d107      	bne.n	8010170 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010164:	4618      	mov	r0, r3
 8010166:	f000 fe0b 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801016a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801016c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801016e:	e340      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010170:	2300      	movs	r3, #0
 8010172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010174:	e33d      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010176:	4b2f      	ldr	r3, [pc, #188]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801017e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010182:	d107      	bne.n	8010194 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010184:	f107 0318 	add.w	r3, r7, #24
 8010188:	4618      	mov	r0, r3
 801018a:	f000 fb51 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801018e:	69bb      	ldr	r3, [r7, #24]
 8010190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010192:	e32e      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010194:	2300      	movs	r3, #0
 8010196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010198:	e32b      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801019a:	4b26      	ldr	r3, [pc, #152]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80101a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101a6:	d107      	bne.n	80101b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101a8:	f107 030c 	add.w	r3, r7, #12
 80101ac:	4618      	mov	r0, r3
 80101ae:	f000 fc93 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101b6:	e31c      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101b8:	2300      	movs	r3, #0
 80101ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101bc:	e319      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80101be:	4b1d      	ldr	r3, [pc, #116]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80101c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80101c8:	4b1a      	ldr	r3, [pc, #104]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b04      	cmp	r3, #4
 80101d2:	d10c      	bne.n	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80101d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d109      	bne.n	80101ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80101da:	4b16      	ldr	r3, [pc, #88]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	08db      	lsrs	r3, r3, #3
 80101e0:	f003 0303 	and.w	r3, r3, #3
 80101e4:	4a14      	ldr	r2, [pc, #80]	@ (8010238 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80101e6:	fa22 f303 	lsr.w	r3, r2, r3
 80101ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80101ec:	e01e      	b.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80101ee:	4b11      	ldr	r3, [pc, #68]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80101f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101fa:	d106      	bne.n	801020a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80101fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010202:	d102      	bne.n	801020a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010204:	4b0d      	ldr	r3, [pc, #52]	@ (801023c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8010206:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010208:	e010      	b.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801020a:	4b0a      	ldr	r3, [pc, #40]	@ (8010234 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010212:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010216:	d106      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801021a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801021e:	d102      	bne.n	8010226 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010220:	4b07      	ldr	r3, [pc, #28]	@ (8010240 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010224:	e002      	b.n	801022c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010226:	2300      	movs	r3, #0
 8010228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801022a:	e2e2      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801022c:	e2e1      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801022e:	4b05      	ldr	r3, [pc, #20]	@ (8010244 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010232:	e2de      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010234:	58024400 	.word	0x58024400
 8010238:	03d09000 	.word	0x03d09000
 801023c:	003d0900 	.word	0x003d0900
 8010240:	017d7840 	.word	0x017d7840
 8010244:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010248:	2300      	movs	r3, #0
 801024a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801024c:	e2d1      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801024e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010252:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8010256:	430b      	orrs	r3, r1
 8010258:	f040 809c 	bne.w	8010394 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801025c:	4b93      	ldr	r3, [pc, #588]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801025e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010260:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8010264:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010268:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801026c:	d054      	beq.n	8010318 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801026e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010274:	f200 808b 	bhi.w	801038e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8010278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801027e:	f000 8083 	beq.w	8010388 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8010282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010284:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010288:	f200 8081 	bhi.w	801038e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801028c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801028e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010292:	d02f      	beq.n	80102f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8010294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801029a:	d878      	bhi.n	801038e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801029c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d004      	beq.n	80102ac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80102a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102a8:	d012      	beq.n	80102d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80102aa:	e070      	b.n	801038e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102ac:	4b7f      	ldr	r3, [pc, #508]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102b8:	d107      	bne.n	80102ca <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102be:	4618      	mov	r0, r3
 80102c0:	f000 fd5e 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102c8:	e293      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102ce:	e290      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80102d0:	4b76      	ldr	r3, [pc, #472]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80102d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80102dc:	d107      	bne.n	80102ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80102de:	f107 0318 	add.w	r3, r7, #24
 80102e2:	4618      	mov	r0, r3
 80102e4:	f000 faa4 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102ec:	e281      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102ee:	2300      	movs	r3, #0
 80102f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f2:	e27e      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80102f4:	4b6d      	ldr	r3, [pc, #436]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80102fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010300:	d107      	bne.n	8010312 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010302:	f107 030c 	add.w	r3, r7, #12
 8010306:	4618      	mov	r0, r3
 8010308:	f000 fbe6 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010310:	e26f      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010316:	e26c      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010318:	4b64      	ldr	r3, [pc, #400]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801031a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801031c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010320:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010322:	4b62      	ldr	r3, [pc, #392]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f003 0304 	and.w	r3, r3, #4
 801032a:	2b04      	cmp	r3, #4
 801032c:	d10c      	bne.n	8010348 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801032e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010330:	2b00      	cmp	r3, #0
 8010332:	d109      	bne.n	8010348 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010334:	4b5d      	ldr	r3, [pc, #372]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	08db      	lsrs	r3, r3, #3
 801033a:	f003 0303 	and.w	r3, r3, #3
 801033e:	4a5c      	ldr	r2, [pc, #368]	@ (80104b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010340:	fa22 f303 	lsr.w	r3, r2, r3
 8010344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010346:	e01e      	b.n	8010386 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010348:	4b58      	ldr	r3, [pc, #352]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010354:	d106      	bne.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8010356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801035c:	d102      	bne.n	8010364 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801035e:	4b55      	ldr	r3, [pc, #340]	@ (80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010362:	e010      	b.n	8010386 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010364:	4b51      	ldr	r3, [pc, #324]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801036c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010370:	d106      	bne.n	8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8010372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010378:	d102      	bne.n	8010380 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801037a:	4b4f      	ldr	r3, [pc, #316]	@ (80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801037c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801037e:	e002      	b.n	8010386 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010380:	2300      	movs	r3, #0
 8010382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010384:	e235      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010386:	e234      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010388:	4b4c      	ldr	r3, [pc, #304]	@ (80104bc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801038a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801038c:	e231      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010392:	e22e      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8010394:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010398:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801039c:	430b      	orrs	r3, r1
 801039e:	f040 808f 	bne.w	80104c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80103a2:	4b42      	ldr	r3, [pc, #264]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103a6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80103aa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80103ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80103b2:	d06b      	beq.n	801048c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80103b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103b6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80103ba:	d874      	bhi.n	80104a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80103c2:	d056      	beq.n	8010472 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80103c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80103ca:	d86c      	bhi.n	80104a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80103d2:	d03b      	beq.n	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80103d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80103da:	d864      	bhi.n	80104a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80103e2:	d021      	beq.n	8010428 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80103ea:	d85c      	bhi.n	80104a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d004      	beq.n	80103fc <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80103f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103f8:	d004      	beq.n	8010404 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80103fa:	e054      	b.n	80104a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80103fc:	f7fe fa4c 	bl	800e898 <HAL_RCC_GetPCLK1Freq>
 8010400:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010402:	e1f6      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010404:	4b29      	ldr	r3, [pc, #164]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801040c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010410:	d107      	bne.n	8010422 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010412:	f107 0318 	add.w	r3, r7, #24
 8010416:	4618      	mov	r0, r3
 8010418:	f000 fa0a 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010420:	e1e7      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010422:	2300      	movs	r3, #0
 8010424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010426:	e1e4      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010428:	4b20      	ldr	r3, [pc, #128]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010434:	d107      	bne.n	8010446 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010436:	f107 030c 	add.w	r3, r7, #12
 801043a:	4618      	mov	r0, r3
 801043c:	f000 fb4c 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010444:	e1d5      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010446:	2300      	movs	r3, #0
 8010448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801044a:	e1d2      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801044c:	4b17      	ldr	r3, [pc, #92]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f003 0304 	and.w	r3, r3, #4
 8010454:	2b04      	cmp	r3, #4
 8010456:	d109      	bne.n	801046c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010458:	4b14      	ldr	r3, [pc, #80]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	08db      	lsrs	r3, r3, #3
 801045e:	f003 0303 	and.w	r3, r3, #3
 8010462:	4a13      	ldr	r2, [pc, #76]	@ (80104b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010464:	fa22 f303 	lsr.w	r3, r2, r3
 8010468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801046a:	e1c2      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010470:	e1bf      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010472:	4b0e      	ldr	r3, [pc, #56]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801047a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801047e:	d102      	bne.n	8010486 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8010480:	4b0c      	ldr	r3, [pc, #48]	@ (80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010484:	e1b5      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010486:	2300      	movs	r3, #0
 8010488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801048a:	e1b2      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801048c:	4b07      	ldr	r3, [pc, #28]	@ (80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010494:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010498:	d102      	bne.n	80104a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801049a:	4b07      	ldr	r3, [pc, #28]	@ (80104b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801049c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801049e:	e1a8      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104a0:	2300      	movs	r3, #0
 80104a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104a4:	e1a5      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104aa:	e1a2      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104ac:	58024400 	.word	0x58024400
 80104b0:	03d09000 	.word	0x03d09000
 80104b4:	003d0900 	.word	0x003d0900
 80104b8:	017d7840 	.word	0x017d7840
 80104bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80104c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104c4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80104c8:	430b      	orrs	r3, r1
 80104ca:	d173      	bne.n	80105b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80104cc:	4b9c      	ldr	r3, [pc, #624]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80104d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80104d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104dc:	d02f      	beq.n	801053e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80104de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104e4:	d863      	bhi.n	80105ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80104e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d004      	beq.n	80104f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80104ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80104f2:	d012      	beq.n	801051a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80104f4:	e05b      	b.n	80105ae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104f6:	4b92      	ldr	r3, [pc, #584]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80104fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010502:	d107      	bne.n	8010514 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010504:	f107 0318 	add.w	r3, r7, #24
 8010508:	4618      	mov	r0, r3
 801050a:	f000 f991 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010512:	e16e      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010518:	e16b      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801051a:	4b89      	ldr	r3, [pc, #548]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010522:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010526:	d107      	bne.n	8010538 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010528:	f107 030c 	add.w	r3, r7, #12
 801052c:	4618      	mov	r0, r3
 801052e:	f000 fad3 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010536:	e15c      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010538:	2300      	movs	r3, #0
 801053a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801053c:	e159      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801053e:	4b80      	ldr	r3, [pc, #512]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010542:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010546:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010548:	4b7d      	ldr	r3, [pc, #500]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	f003 0304 	and.w	r3, r3, #4
 8010550:	2b04      	cmp	r3, #4
 8010552:	d10c      	bne.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8010554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010556:	2b00      	cmp	r3, #0
 8010558:	d109      	bne.n	801056e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801055a:	4b79      	ldr	r3, [pc, #484]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	08db      	lsrs	r3, r3, #3
 8010560:	f003 0303 	and.w	r3, r3, #3
 8010564:	4a77      	ldr	r2, [pc, #476]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010566:	fa22 f303 	lsr.w	r3, r2, r3
 801056a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801056c:	e01e      	b.n	80105ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801056e:	4b74      	ldr	r3, [pc, #464]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010576:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801057a:	d106      	bne.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801057c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801057e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010582:	d102      	bne.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010584:	4b70      	ldr	r3, [pc, #448]	@ (8010748 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010588:	e010      	b.n	80105ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801058a:	4b6d      	ldr	r3, [pc, #436]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010596:	d106      	bne.n	80105a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8010598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801059a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801059e:	d102      	bne.n	80105a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80105a0:	4b6a      	ldr	r3, [pc, #424]	@ (801074c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80105a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105a4:	e002      	b.n	80105ac <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80105aa:	e122      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105ac:	e121      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105b2:	e11e      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80105b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105b8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80105bc:	430b      	orrs	r3, r1
 80105be:	d133      	bne.n	8010628 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80105c0:	4b5f      	ldr	r3, [pc, #380]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80105ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d004      	beq.n	80105da <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80105d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105d6:	d012      	beq.n	80105fe <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80105d8:	e023      	b.n	8010622 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105da:	4b59      	ldr	r3, [pc, #356]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80105e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80105e6:	d107      	bne.n	80105f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80105ec:	4618      	mov	r0, r3
 80105ee:	f000 fbc7 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80105f6:	e0fc      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80105f8:	2300      	movs	r3, #0
 80105fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105fc:	e0f9      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80105fe:	4b50      	ldr	r3, [pc, #320]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801060a:	d107      	bne.n	801061c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801060c:	f107 0318 	add.w	r3, r7, #24
 8010610:	4618      	mov	r0, r3
 8010612:	f000 f90d 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801061a:	e0ea      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801061c:	2300      	movs	r3, #0
 801061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010620:	e0e7      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010626:	e0e4      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010628:	e9d7 2300 	ldrd	r2, r3, [r7]
 801062c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8010630:	430b      	orrs	r3, r1
 8010632:	f040 808d 	bne.w	8010750 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8010636:	4b42      	ldr	r3, [pc, #264]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801063a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801063e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010646:	d06b      	beq.n	8010720 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801064a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801064e:	d874      	bhi.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010656:	d056      	beq.n	8010706 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801065a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801065e:	d86c      	bhi.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010662:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010666:	d03b      	beq.n	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801066e:	d864      	bhi.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010676:	d021      	beq.n	80106bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8010678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801067e:	d85c      	bhi.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010682:	2b00      	cmp	r3, #0
 8010684:	d004      	beq.n	8010690 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8010686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801068c:	d004      	beq.n	8010698 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801068e:	e054      	b.n	801073a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010690:	f000 f8b8 	bl	8010804 <HAL_RCCEx_GetD3PCLK1Freq>
 8010694:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010696:	e0ac      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010698:	4b29      	ldr	r3, [pc, #164]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80106a4:	d107      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106a6:	f107 0318 	add.w	r3, r7, #24
 80106aa:	4618      	mov	r0, r3
 80106ac:	f000 f8c0 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106b4:	e09d      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106ba:	e09a      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80106bc:	4b20      	ldr	r3, [pc, #128]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106c8:	d107      	bne.n	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106ca:	f107 030c 	add.w	r3, r7, #12
 80106ce:	4618      	mov	r0, r3
 80106d0:	f000 fa02 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106d8:	e08b      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106de:	e088      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80106e0:	4b17      	ldr	r3, [pc, #92]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	f003 0304 	and.w	r3, r3, #4
 80106e8:	2b04      	cmp	r3, #4
 80106ea:	d109      	bne.n	8010700 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80106ec:	4b14      	ldr	r3, [pc, #80]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	08db      	lsrs	r3, r3, #3
 80106f2:	f003 0303 	and.w	r3, r3, #3
 80106f6:	4a13      	ldr	r2, [pc, #76]	@ (8010744 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80106f8:	fa22 f303 	lsr.w	r3, r2, r3
 80106fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106fe:	e078      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010700:	2300      	movs	r3, #0
 8010702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010704:	e075      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010706:	4b0e      	ldr	r3, [pc, #56]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801070e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010712:	d102      	bne.n	801071a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8010714:	4b0c      	ldr	r3, [pc, #48]	@ (8010748 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8010716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010718:	e06b      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801071e:	e068      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010720:	4b07      	ldr	r3, [pc, #28]	@ (8010740 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010728:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801072c:	d102      	bne.n	8010734 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801072e:	4b07      	ldr	r3, [pc, #28]	@ (801074c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010732:	e05e      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010734:	2300      	movs	r3, #0
 8010736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010738:	e05b      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801073a:	2300      	movs	r3, #0
 801073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801073e:	e058      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010740:	58024400 	.word	0x58024400
 8010744:	03d09000 	.word	0x03d09000
 8010748:	003d0900 	.word	0x003d0900
 801074c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010754:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8010758:	430b      	orrs	r3, r1
 801075a:	d148      	bne.n	80107ee <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801075c:	4b27      	ldr	r3, [pc, #156]	@ (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801075e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010760:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010764:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801076c:	d02a      	beq.n	80107c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801076e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010774:	d838      	bhi.n	80107e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8010776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010778:	2b00      	cmp	r3, #0
 801077a:	d004      	beq.n	8010786 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801077c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801077e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010782:	d00d      	beq.n	80107a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8010784:	e030      	b.n	80107e8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010786:	4b1d      	ldr	r3, [pc, #116]	@ (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801078e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010792:	d102      	bne.n	801079a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8010794:	4b1a      	ldr	r3, [pc, #104]	@ (8010800 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8010796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010798:	e02b      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801079a:	2300      	movs	r3, #0
 801079c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801079e:	e028      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80107a0:	4b16      	ldr	r3, [pc, #88]	@ (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80107a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80107ac:	d107      	bne.n	80107be <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107b2:	4618      	mov	r0, r3
 80107b4:	f000 fae4 	bl	8010d80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107bc:	e019      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107be:	2300      	movs	r3, #0
 80107c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107c2:	e016      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107c4:	4b0d      	ldr	r3, [pc, #52]	@ (80107fc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80107cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80107d0:	d107      	bne.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107d2:	f107 0318 	add.w	r3, r7, #24
 80107d6:	4618      	mov	r0, r3
 80107d8:	f000 f82a 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107e0:	e007      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107e2:	2300      	movs	r3, #0
 80107e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107e6:	e004      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80107e8:	2300      	movs	r3, #0
 80107ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107ec:	e001      	b.n	80107f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80107ee:	2300      	movs	r3, #0
 80107f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80107f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3740      	adds	r7, #64	@ 0x40
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	58024400 	.word	0x58024400
 8010800:	017d7840 	.word	0x017d7840

08010804 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010804:	b580      	push	{r7, lr}
 8010806:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010808:	f7fe f816 	bl	800e838 <HAL_RCC_GetHCLKFreq>
 801080c:	4602      	mov	r2, r0
 801080e:	4b06      	ldr	r3, [pc, #24]	@ (8010828 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010810:	6a1b      	ldr	r3, [r3, #32]
 8010812:	091b      	lsrs	r3, r3, #4
 8010814:	f003 0307 	and.w	r3, r3, #7
 8010818:	4904      	ldr	r1, [pc, #16]	@ (801082c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801081a:	5ccb      	ldrb	r3, [r1, r3]
 801081c:	f003 031f 	and.w	r3, r3, #31
 8010820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010824:	4618      	mov	r0, r3
 8010826:	bd80      	pop	{r7, pc}
 8010828:	58024400 	.word	0x58024400
 801082c:	08019ca8 	.word	0x08019ca8

08010830 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010830:	b480      	push	{r7}
 8010832:	b089      	sub	sp, #36	@ 0x24
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010838:	4ba1      	ldr	r3, [pc, #644]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801083a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801083c:	f003 0303 	and.w	r3, r3, #3
 8010840:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8010842:	4b9f      	ldr	r3, [pc, #636]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010846:	0b1b      	lsrs	r3, r3, #12
 8010848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801084c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801084e:	4b9c      	ldr	r3, [pc, #624]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010852:	091b      	lsrs	r3, r3, #4
 8010854:	f003 0301 	and.w	r3, r3, #1
 8010858:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801085a:	4b99      	ldr	r3, [pc, #612]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801085c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801085e:	08db      	lsrs	r3, r3, #3
 8010860:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010864:	693a      	ldr	r2, [r7, #16]
 8010866:	fb02 f303 	mul.w	r3, r2, r3
 801086a:	ee07 3a90 	vmov	s15, r3
 801086e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010872:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	2b00      	cmp	r3, #0
 801087a:	f000 8111 	beq.w	8010aa0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	2b02      	cmp	r3, #2
 8010882:	f000 8083 	beq.w	801098c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010886:	69bb      	ldr	r3, [r7, #24]
 8010888:	2b02      	cmp	r3, #2
 801088a:	f200 80a1 	bhi.w	80109d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d003      	beq.n	801089c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	2b01      	cmp	r3, #1
 8010898:	d056      	beq.n	8010948 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801089a:	e099      	b.n	80109d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801089c:	4b88      	ldr	r3, [pc, #544]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	f003 0320 	and.w	r3, r3, #32
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d02d      	beq.n	8010904 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108a8:	4b85      	ldr	r3, [pc, #532]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	08db      	lsrs	r3, r3, #3
 80108ae:	f003 0303 	and.w	r3, r3, #3
 80108b2:	4a84      	ldr	r2, [pc, #528]	@ (8010ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80108b4:	fa22 f303 	lsr.w	r3, r2, r3
 80108b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	ee07 3a90 	vmov	s15, r3
 80108c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	ee07 3a90 	vmov	s15, r3
 80108ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108d2:	4b7b      	ldr	r3, [pc, #492]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108da:	ee07 3a90 	vmov	s15, r3
 80108de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80108e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80108ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80108ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80108f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80108fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010902:	e087      	b.n	8010a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	ee07 3a90 	vmov	s15, r3
 801090a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801090e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010acc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010916:	4b6a      	ldr	r3, [pc, #424]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801091a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801091e:	ee07 3a90 	vmov	s15, r3
 8010922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010926:	ed97 6a03 	vldr	s12, [r7, #12]
 801092a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801092e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801093a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801093e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010946:	e065      	b.n	8010a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010948:	697b      	ldr	r3, [r7, #20]
 801094a:	ee07 3a90 	vmov	s15, r3
 801094e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010952:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801095a:	4b59      	ldr	r3, [pc, #356]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801095c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801095e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010962:	ee07 3a90 	vmov	s15, r3
 8010966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801096a:	ed97 6a03 	vldr	s12, [r7, #12]
 801096e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801097a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801097e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801098a:	e043      	b.n	8010a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	ee07 3a90 	vmov	s15, r3
 8010992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010996:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801099a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801099e:	4b48      	ldr	r3, [pc, #288]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109a6:	ee07 3a90 	vmov	s15, r3
 80109aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80109b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80109b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109ce:	e021      	b.n	8010a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	ee07 3a90 	vmov	s15, r3
 80109d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80109de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109e2:	4b37      	ldr	r3, [pc, #220]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109ea:	ee07 3a90 	vmov	s15, r3
 80109ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80109f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80109fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010a14:	4b2a      	ldr	r3, [pc, #168]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a18:	0a5b      	lsrs	r3, r3, #9
 8010a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a1e:	ee07 3a90 	vmov	s15, r3
 8010a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a3a:	ee17 2a90 	vmov	r2, s15
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010a42:	4b1f      	ldr	r3, [pc, #124]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a46:	0c1b      	lsrs	r3, r3, #16
 8010a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a4c:	ee07 3a90 	vmov	s15, r3
 8010a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a68:	ee17 2a90 	vmov	r2, s15
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010a70:	4b13      	ldr	r3, [pc, #76]	@ (8010ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a74:	0e1b      	lsrs	r3, r3, #24
 8010a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a7a:	ee07 3a90 	vmov	s15, r3
 8010a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a96:	ee17 2a90 	vmov	r2, s15
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010a9e:	e008      	b.n	8010ab2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	609a      	str	r2, [r3, #8]
}
 8010ab2:	bf00      	nop
 8010ab4:	3724      	adds	r7, #36	@ 0x24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	58024400 	.word	0x58024400
 8010ac4:	03d09000 	.word	0x03d09000
 8010ac8:	46000000 	.word	0x46000000
 8010acc:	4c742400 	.word	0x4c742400
 8010ad0:	4a742400 	.word	0x4a742400
 8010ad4:	4bbebc20 	.word	0x4bbebc20

08010ad8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b089      	sub	sp, #36	@ 0x24
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ae4:	f003 0303 	and.w	r3, r3, #3
 8010ae8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010aea:	4b9f      	ldr	r3, [pc, #636]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aee:	0d1b      	lsrs	r3, r3, #20
 8010af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010af4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010af6:	4b9c      	ldr	r3, [pc, #624]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010afa:	0a1b      	lsrs	r3, r3, #8
 8010afc:	f003 0301 	and.w	r3, r3, #1
 8010b00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010b02:	4b99      	ldr	r3, [pc, #612]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b06:	08db      	lsrs	r3, r3, #3
 8010b08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b0c:	693a      	ldr	r2, [r7, #16]
 8010b0e:	fb02 f303 	mul.w	r3, r2, r3
 8010b12:	ee07 3a90 	vmov	s15, r3
 8010b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f000 8111 	beq.w	8010d48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010b26:	69bb      	ldr	r3, [r7, #24]
 8010b28:	2b02      	cmp	r3, #2
 8010b2a:	f000 8083 	beq.w	8010c34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010b2e:	69bb      	ldr	r3, [r7, #24]
 8010b30:	2b02      	cmp	r3, #2
 8010b32:	f200 80a1 	bhi.w	8010c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d003      	beq.n	8010b44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010b3c:	69bb      	ldr	r3, [r7, #24]
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d056      	beq.n	8010bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010b42:	e099      	b.n	8010c78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b44:	4b88      	ldr	r3, [pc, #544]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	f003 0320 	and.w	r3, r3, #32
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d02d      	beq.n	8010bac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b50:	4b85      	ldr	r3, [pc, #532]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	08db      	lsrs	r3, r3, #3
 8010b56:	f003 0303 	and.w	r3, r3, #3
 8010b5a:	4a84      	ldr	r2, [pc, #528]	@ (8010d6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8010b60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	ee07 3a90 	vmov	s15, r3
 8010b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	ee07 3a90 	vmov	s15, r3
 8010b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b82:	ee07 3a90 	vmov	s15, r3
 8010b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010b8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010baa:	e087      	b.n	8010cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bac:	697b      	ldr	r3, [r7, #20]
 8010bae:	ee07 3a90 	vmov	s15, r3
 8010bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010d74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bc6:	ee07 3a90 	vmov	s15, r3
 8010bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bd2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010bee:	e065      	b.n	8010cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	ee07 3a90 	vmov	s15, r3
 8010bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bfa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c02:	4b59      	ldr	r3, [pc, #356]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c0a:	ee07 3a90 	vmov	s15, r3
 8010c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c32:	e043      	b.n	8010cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	ee07 3a90 	vmov	s15, r3
 8010c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c46:	4b48      	ldr	r3, [pc, #288]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c4e:	ee07 3a90 	vmov	s15, r3
 8010c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c76:	e021      	b.n	8010cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c78:	697b      	ldr	r3, [r7, #20]
 8010c7a:	ee07 3a90 	vmov	s15, r3
 8010c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c8a:	4b37      	ldr	r3, [pc, #220]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c92:	ee07 3a90 	vmov	s15, r3
 8010c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010cba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cc0:	0a5b      	lsrs	r3, r3, #9
 8010cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cc6:	ee07 3a90 	vmov	s15, r3
 8010cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8010cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ce2:	ee17 2a90 	vmov	r2, s15
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010cea:	4b1f      	ldr	r3, [pc, #124]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cee:	0c1b      	lsrs	r3, r3, #16
 8010cf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cf4:	ee07 3a90 	vmov	s15, r3
 8010cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cfc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d04:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d10:	ee17 2a90 	vmov	r2, s15
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010d18:	4b13      	ldr	r3, [pc, #76]	@ (8010d68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d1c:	0e1b      	lsrs	r3, r3, #24
 8010d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d22:	ee07 3a90 	vmov	s15, r3
 8010d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d3e:	ee17 2a90 	vmov	r2, s15
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010d46:	e008      	b.n	8010d5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2200      	movs	r2, #0
 8010d52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2200      	movs	r2, #0
 8010d58:	609a      	str	r2, [r3, #8]
}
 8010d5a:	bf00      	nop
 8010d5c:	3724      	adds	r7, #36	@ 0x24
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	58024400 	.word	0x58024400
 8010d6c:	03d09000 	.word	0x03d09000
 8010d70:	46000000 	.word	0x46000000
 8010d74:	4c742400 	.word	0x4c742400
 8010d78:	4a742400 	.word	0x4a742400
 8010d7c:	4bbebc20 	.word	0x4bbebc20

08010d80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b089      	sub	sp, #36	@ 0x24
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010d88:	4ba0      	ldr	r3, [pc, #640]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d8c:	f003 0303 	and.w	r3, r3, #3
 8010d90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010d92:	4b9e      	ldr	r3, [pc, #632]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d96:	091b      	lsrs	r3, r3, #4
 8010d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010d9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010d9e:	4b9b      	ldr	r3, [pc, #620]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010da8:	4b98      	ldr	r3, [pc, #608]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dac:	08db      	lsrs	r3, r3, #3
 8010dae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010db2:	693a      	ldr	r2, [r7, #16]
 8010db4:	fb02 f303 	mul.w	r3, r2, r3
 8010db8:	ee07 3a90 	vmov	s15, r3
 8010dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 8111 	beq.w	8010fee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	2b02      	cmp	r3, #2
 8010dd0:	f000 8083 	beq.w	8010eda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	2b02      	cmp	r3, #2
 8010dd8:	f200 80a1 	bhi.w	8010f1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010ddc:	69bb      	ldr	r3, [r7, #24]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d003      	beq.n	8010dea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d056      	beq.n	8010e96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010de8:	e099      	b.n	8010f1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010dea:	4b88      	ldr	r3, [pc, #544]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f003 0320 	and.w	r3, r3, #32
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d02d      	beq.n	8010e52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010df6:	4b85      	ldr	r3, [pc, #532]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	08db      	lsrs	r3, r3, #3
 8010dfc:	f003 0303 	and.w	r3, r3, #3
 8010e00:	4a83      	ldr	r2, [pc, #524]	@ (8011010 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010e02:	fa22 f303 	lsr.w	r3, r2, r3
 8010e06:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	ee07 3a90 	vmov	s15, r3
 8010e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	ee07 3a90 	vmov	s15, r3
 8010e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e20:	4b7a      	ldr	r3, [pc, #488]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e28:	ee07 3a90 	vmov	s15, r3
 8010e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e30:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e34:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8011014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e40:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e4c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010e50:	e087      	b.n	8010f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	ee07 3a90 	vmov	s15, r3
 8010e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e5c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e64:	4b69      	ldr	r3, [pc, #420]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e6c:	ee07 3a90 	vmov	s15, r3
 8010e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e78:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8011014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010e94:	e065      	b.n	8010f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	ee07 3a90 	vmov	s15, r3
 8010e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ea0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801101c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ea8:	4b58      	ldr	r3, [pc, #352]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eb0:	ee07 3a90 	vmov	s15, r3
 8010eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ebc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8011014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ed8:	e043      	b.n	8010f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	ee07 3a90 	vmov	s15, r3
 8010ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ee4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8011020 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eec:	4b47      	ldr	r3, [pc, #284]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ef4:	ee07 3a90 	vmov	s15, r3
 8010ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f00:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8011014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f1c:	e021      	b.n	8010f62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	ee07 3a90 	vmov	s15, r3
 8010f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f28:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011018 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f30:	4b36      	ldr	r3, [pc, #216]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f38:	ee07 3a90 	vmov	s15, r3
 8010f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f44:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011014 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010f62:	4b2a      	ldr	r3, [pc, #168]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f66:	0a5b      	lsrs	r3, r3, #9
 8010f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f6c:	ee07 3a90 	vmov	s15, r3
 8010f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010f88:	ee17 2a90 	vmov	r2, s15
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010f90:	4b1e      	ldr	r3, [pc, #120]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f94:	0c1b      	lsrs	r3, r3, #16
 8010f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f9a:	ee07 3a90 	vmov	s15, r3
 8010f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fb6:	ee17 2a90 	vmov	r2, s15
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010fbe:	4b13      	ldr	r3, [pc, #76]	@ (801100c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fc2:	0e1b      	lsrs	r3, r3, #24
 8010fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fc8:	ee07 3a90 	vmov	s15, r3
 8010fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fe4:	ee17 2a90 	vmov	r2, s15
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010fec:	e008      	b.n	8011000 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	609a      	str	r2, [r3, #8]
}
 8011000:	bf00      	nop
 8011002:	3724      	adds	r7, #36	@ 0x24
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr
 801100c:	58024400 	.word	0x58024400
 8011010:	03d09000 	.word	0x03d09000
 8011014:	46000000 	.word	0x46000000
 8011018:	4c742400 	.word	0x4c742400
 801101c:	4a742400 	.word	0x4a742400
 8011020:	4bbebc20 	.word	0x4bbebc20

08011024 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801102e:	2300      	movs	r3, #0
 8011030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011032:	4b53      	ldr	r3, [pc, #332]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011036:	f003 0303 	and.w	r3, r3, #3
 801103a:	2b03      	cmp	r3, #3
 801103c:	d101      	bne.n	8011042 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801103e:	2301      	movs	r3, #1
 8011040:	e099      	b.n	8011176 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8011042:	4b4f      	ldr	r3, [pc, #316]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	4a4e      	ldr	r2, [pc, #312]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011048:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801104c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801104e:	f7f1 fde7 	bl	8002c20 <HAL_GetTick>
 8011052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011054:	e008      	b.n	8011068 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011056:	f7f1 fde3 	bl	8002c20 <HAL_GetTick>
 801105a:	4602      	mov	r2, r0
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	2b02      	cmp	r3, #2
 8011062:	d901      	bls.n	8011068 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011064:	2303      	movs	r3, #3
 8011066:	e086      	b.n	8011176 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011068:	4b45      	ldr	r3, [pc, #276]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1f0      	bne.n	8011056 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8011074:	4b42      	ldr	r3, [pc, #264]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011078:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	031b      	lsls	r3, r3, #12
 8011082:	493f      	ldr	r1, [pc, #252]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011084:	4313      	orrs	r3, r2
 8011086:	628b      	str	r3, [r1, #40]	@ 0x28
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	3b01      	subs	r3, #1
 801108e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	3b01      	subs	r3, #1
 8011098:	025b      	lsls	r3, r3, #9
 801109a:	b29b      	uxth	r3, r3
 801109c:	431a      	orrs	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	3b01      	subs	r3, #1
 80110a4:	041b      	lsls	r3, r3, #16
 80110a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80110aa:	431a      	orrs	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	691b      	ldr	r3, [r3, #16]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	061b      	lsls	r3, r3, #24
 80110b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80110b8:	4931      	ldr	r1, [pc, #196]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110ba:	4313      	orrs	r3, r2
 80110bc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80110be:	4b30      	ldr	r3, [pc, #192]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	492d      	ldr	r1, [pc, #180]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110cc:	4313      	orrs	r3, r2
 80110ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80110d0:	4b2b      	ldr	r3, [pc, #172]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110d4:	f023 0220 	bic.w	r2, r3, #32
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	699b      	ldr	r3, [r3, #24]
 80110dc:	4928      	ldr	r1, [pc, #160]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110de:	4313      	orrs	r3, r2
 80110e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80110e2:	4b27      	ldr	r3, [pc, #156]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110e6:	4a26      	ldr	r2, [pc, #152]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110e8:	f023 0310 	bic.w	r3, r3, #16
 80110ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80110ee:	4b24      	ldr	r3, [pc, #144]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80110f2:	4b24      	ldr	r3, [pc, #144]	@ (8011184 <RCCEx_PLL2_Config+0x160>)
 80110f4:	4013      	ands	r3, r2
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	69d2      	ldr	r2, [r2, #28]
 80110fa:	00d2      	lsls	r2, r2, #3
 80110fc:	4920      	ldr	r1, [pc, #128]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 80110fe:	4313      	orrs	r3, r2
 8011100:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011102:	4b1f      	ldr	r3, [pc, #124]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011106:	4a1e      	ldr	r2, [pc, #120]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011108:	f043 0310 	orr.w	r3, r3, #16
 801110c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d106      	bne.n	8011122 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011114:	4b1a      	ldr	r3, [pc, #104]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011118:	4a19      	ldr	r2, [pc, #100]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 801111a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801111e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011120:	e00f      	b.n	8011142 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d106      	bne.n	8011136 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011128:	4b15      	ldr	r3, [pc, #84]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 801112a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801112c:	4a14      	ldr	r2, [pc, #80]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 801112e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011132:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011134:	e005      	b.n	8011142 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8011136:	4b12      	ldr	r3, [pc, #72]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801113a:	4a11      	ldr	r2, [pc, #68]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 801113c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011140:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8011142:	4b0f      	ldr	r3, [pc, #60]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	4a0e      	ldr	r2, [pc, #56]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 8011148:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801114c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801114e:	f7f1 fd67 	bl	8002c20 <HAL_GetTick>
 8011152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011154:	e008      	b.n	8011168 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8011156:	f7f1 fd63 	bl	8002c20 <HAL_GetTick>
 801115a:	4602      	mov	r2, r0
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	2b02      	cmp	r3, #2
 8011162:	d901      	bls.n	8011168 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011164:	2303      	movs	r3, #3
 8011166:	e006      	b.n	8011176 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011168:	4b05      	ldr	r3, [pc, #20]	@ (8011180 <RCCEx_PLL2_Config+0x15c>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011170:	2b00      	cmp	r3, #0
 8011172:	d0f0      	beq.n	8011156 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8011174:	7bfb      	ldrb	r3, [r7, #15]
}
 8011176:	4618      	mov	r0, r3
 8011178:	3710      	adds	r7, #16
 801117a:	46bd      	mov	sp, r7
 801117c:	bd80      	pop	{r7, pc}
 801117e:	bf00      	nop
 8011180:	58024400 	.word	0x58024400
 8011184:	ffff0007 	.word	0xffff0007

08011188 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b084      	sub	sp, #16
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011192:	2300      	movs	r3, #0
 8011194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011196:	4b53      	ldr	r3, [pc, #332]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801119a:	f003 0303 	and.w	r3, r3, #3
 801119e:	2b03      	cmp	r3, #3
 80111a0:	d101      	bne.n	80111a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80111a2:	2301      	movs	r3, #1
 80111a4:	e099      	b.n	80112da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80111a6:	4b4f      	ldr	r3, [pc, #316]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4a4e      	ldr	r2, [pc, #312]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80111ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111b2:	f7f1 fd35 	bl	8002c20 <HAL_GetTick>
 80111b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80111b8:	e008      	b.n	80111cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80111ba:	f7f1 fd31 	bl	8002c20 <HAL_GetTick>
 80111be:	4602      	mov	r2, r0
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	2b02      	cmp	r3, #2
 80111c6:	d901      	bls.n	80111cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80111c8:	2303      	movs	r3, #3
 80111ca:	e086      	b.n	80112da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80111cc:	4b45      	ldr	r3, [pc, #276]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d1f0      	bne.n	80111ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80111d8:	4b42      	ldr	r3, [pc, #264]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80111da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111dc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	051b      	lsls	r3, r3, #20
 80111e6:	493f      	ldr	r1, [pc, #252]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80111e8:	4313      	orrs	r3, r2
 80111ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	3b01      	subs	r3, #1
 80111f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	689b      	ldr	r3, [r3, #8]
 80111fa:	3b01      	subs	r3, #1
 80111fc:	025b      	lsls	r3, r3, #9
 80111fe:	b29b      	uxth	r3, r3
 8011200:	431a      	orrs	r2, r3
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	3b01      	subs	r3, #1
 8011208:	041b      	lsls	r3, r3, #16
 801120a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801120e:	431a      	orrs	r2, r3
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	691b      	ldr	r3, [r3, #16]
 8011214:	3b01      	subs	r3, #1
 8011216:	061b      	lsls	r3, r3, #24
 8011218:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801121c:	4931      	ldr	r1, [pc, #196]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801121e:	4313      	orrs	r3, r2
 8011220:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011222:	4b30      	ldr	r3, [pc, #192]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	695b      	ldr	r3, [r3, #20]
 801122e:	492d      	ldr	r1, [pc, #180]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011230:	4313      	orrs	r3, r2
 8011232:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8011234:	4b2b      	ldr	r3, [pc, #172]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011238:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	699b      	ldr	r3, [r3, #24]
 8011240:	4928      	ldr	r1, [pc, #160]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011242:	4313      	orrs	r3, r2
 8011244:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8011246:	4b27      	ldr	r3, [pc, #156]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801124a:	4a26      	ldr	r2, [pc, #152]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801124c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011250:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8011252:	4b24      	ldr	r3, [pc, #144]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011256:	4b24      	ldr	r3, [pc, #144]	@ (80112e8 <RCCEx_PLL3_Config+0x160>)
 8011258:	4013      	ands	r3, r2
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	69d2      	ldr	r2, [r2, #28]
 801125e:	00d2      	lsls	r2, r2, #3
 8011260:	4920      	ldr	r1, [pc, #128]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011262:	4313      	orrs	r3, r2
 8011264:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8011266:	4b1f      	ldr	r3, [pc, #124]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801126a:	4a1e      	ldr	r2, [pc, #120]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801126c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011270:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d106      	bne.n	8011286 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8011278:	4b1a      	ldr	r3, [pc, #104]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801127a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801127c:	4a19      	ldr	r2, [pc, #100]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801127e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8011282:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011284:	e00f      	b.n	80112a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	2b01      	cmp	r3, #1
 801128a:	d106      	bne.n	801129a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801128c:	4b15      	ldr	r3, [pc, #84]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011290:	4a14      	ldr	r2, [pc, #80]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 8011292:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011296:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011298:	e005      	b.n	80112a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801129a:	4b12      	ldr	r3, [pc, #72]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 801129c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801129e:	4a11      	ldr	r2, [pc, #68]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80112a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80112a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80112a6:	4b0f      	ldr	r3, [pc, #60]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4a0e      	ldr	r2, [pc, #56]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80112ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80112b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112b2:	f7f1 fcb5 	bl	8002c20 <HAL_GetTick>
 80112b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80112b8:	e008      	b.n	80112cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80112ba:	f7f1 fcb1 	bl	8002c20 <HAL_GetTick>
 80112be:	4602      	mov	r2, r0
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	2b02      	cmp	r3, #2
 80112c6:	d901      	bls.n	80112cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80112c8:	2303      	movs	r3, #3
 80112ca:	e006      	b.n	80112da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80112cc:	4b05      	ldr	r3, [pc, #20]	@ (80112e4 <RCCEx_PLL3_Config+0x15c>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d0f0      	beq.n	80112ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80112d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	58024400 	.word	0x58024400
 80112e8:	ffff0007 	.word	0xffff0007

080112ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80112fa:	2301      	movs	r3, #1
 80112fc:	e10f      	b.n	801151e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a87      	ldr	r2, [pc, #540]	@ (8011528 <HAL_SPI_Init+0x23c>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d00f      	beq.n	801132e <HAL_SPI_Init+0x42>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	4a86      	ldr	r2, [pc, #536]	@ (801152c <HAL_SPI_Init+0x240>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d00a      	beq.n	801132e <HAL_SPI_Init+0x42>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a84      	ldr	r2, [pc, #528]	@ (8011530 <HAL_SPI_Init+0x244>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d005      	beq.n	801132e <HAL_SPI_Init+0x42>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	2b0f      	cmp	r3, #15
 8011328:	d901      	bls.n	801132e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801132a:	2301      	movs	r3, #1
 801132c:	e0f7      	b.n	801151e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 ff6c 	bl	801220c <SPI_GetPacketSize>
 8011334:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a7b      	ldr	r2, [pc, #492]	@ (8011528 <HAL_SPI_Init+0x23c>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d00c      	beq.n	801135a <HAL_SPI_Init+0x6e>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4a79      	ldr	r2, [pc, #484]	@ (801152c <HAL_SPI_Init+0x240>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d007      	beq.n	801135a <HAL_SPI_Init+0x6e>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4a78      	ldr	r2, [pc, #480]	@ (8011530 <HAL_SPI_Init+0x244>)
 8011350:	4293      	cmp	r3, r2
 8011352:	d002      	beq.n	801135a <HAL_SPI_Init+0x6e>
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	2b08      	cmp	r3, #8
 8011358:	d811      	bhi.n	801137e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801135e:	4a72      	ldr	r2, [pc, #456]	@ (8011528 <HAL_SPI_Init+0x23c>)
 8011360:	4293      	cmp	r3, r2
 8011362:	d009      	beq.n	8011378 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	4a70      	ldr	r2, [pc, #448]	@ (801152c <HAL_SPI_Init+0x240>)
 801136a:	4293      	cmp	r3, r2
 801136c:	d004      	beq.n	8011378 <HAL_SPI_Init+0x8c>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	4a6f      	ldr	r2, [pc, #444]	@ (8011530 <HAL_SPI_Init+0x244>)
 8011374:	4293      	cmp	r3, r2
 8011376:	d104      	bne.n	8011382 <HAL_SPI_Init+0x96>
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b10      	cmp	r3, #16
 801137c:	d901      	bls.n	8011382 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801137e:	2301      	movs	r3, #1
 8011380:	e0cd      	b.n	801151e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011388:	b2db      	uxtb	r3, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	d106      	bne.n	801139c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011396:	6878      	ldr	r0, [r7, #4]
 8011398:	f7f0 fdee 	bl	8001f78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2202      	movs	r2, #2
 80113a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	f022 0201 	bic.w	r2, r2, #1
 80113b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80113be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	699b      	ldr	r3, [r3, #24]
 80113c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80113c8:	d119      	bne.n	80113fe <HAL_SPI_Init+0x112>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80113d2:	d103      	bne.n	80113dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d008      	beq.n	80113ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d10c      	bne.n	80113fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80113e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113ec:	d107      	bne.n	80113fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80113fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00f      	beq.n	801142a <HAL_SPI_Init+0x13e>
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	68db      	ldr	r3, [r3, #12]
 801140e:	2b06      	cmp	r3, #6
 8011410:	d90b      	bls.n	801142a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	430a      	orrs	r2, r1
 8011426:	601a      	str	r2, [r3, #0]
 8011428:	e007      	b.n	801143a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	69da      	ldr	r2, [r3, #28]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011442:	431a      	orrs	r2, r3
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	431a      	orrs	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801144c:	ea42 0103 	orr.w	r1, r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	68da      	ldr	r2, [r3, #12]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	430a      	orrs	r2, r1
 801145a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011464:	431a      	orrs	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801146a:	431a      	orrs	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	699b      	ldr	r3, [r3, #24]
 8011470:	431a      	orrs	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	691b      	ldr	r3, [r3, #16]
 8011476:	431a      	orrs	r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	695b      	ldr	r3, [r3, #20]
 801147c:	431a      	orrs	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a1b      	ldr	r3, [r3, #32]
 8011482:	431a      	orrs	r2, r3
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	431a      	orrs	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801148e:	431a      	orrs	r2, r3
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	689b      	ldr	r3, [r3, #8]
 8011494:	431a      	orrs	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801149a:	ea42 0103 	orr.w	r1, r2, r3
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	430a      	orrs	r2, r1
 80114a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d113      	bne.n	80114da <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	689b      	ldr	r3, [r3, #8]
 80114b8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80114c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	689b      	ldr	r3, [r3, #8]
 80114cc:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80114d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f022 0201 	bic.w	r2, r2, #1
 80114e8:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	685b      	ldr	r3, [r3, #4]
 80114ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d00a      	beq.n	801150c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	68db      	ldr	r3, [r3, #12]
 80114fc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	430a      	orrs	r2, r1
 801150a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2201      	movs	r2, #1
 8011518:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	40013000 	.word	0x40013000
 801152c:	40003800 	.word	0x40003800
 8011530:	40003c00 	.word	0x40003c00

08011534 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b088      	sub	sp, #32
 8011538:	af02      	add	r7, sp, #8
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	603b      	str	r3, [r7, #0]
 8011540:	4613      	mov	r3, r2
 8011542:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	3320      	adds	r3, #32
 801154a:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801154c:	f7f1 fb68 	bl	8002c20 <HAL_GetTick>
 8011550:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011558:	b2db      	uxtb	r3, r3
 801155a:	2b01      	cmp	r3, #1
 801155c:	d001      	beq.n	8011562 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 801155e:	2302      	movs	r3, #2
 8011560:	e1d1      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <HAL_SPI_Transmit+0x3a>
 8011568:	88fb      	ldrh	r3, [r7, #6]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d101      	bne.n	8011572 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 801156e:	2301      	movs	r3, #1
 8011570:	e1c9      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011578:	2b01      	cmp	r3, #1
 801157a:	d101      	bne.n	8011580 <HAL_SPI_Transmit+0x4c>
 801157c:	2302      	movs	r3, #2
 801157e:	e1c2      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2201      	movs	r2, #1
 8011584:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2203      	movs	r2, #3
 801158c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2200      	movs	r2, #0
 8011594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	68ba      	ldr	r2, [r7, #8]
 801159c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	88fa      	ldrh	r2, [r7, #6]
 80115a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	88fa      	ldrh	r2, [r7, #6]
 80115aa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	2200      	movs	r2, #0
 80115b2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2200      	movs	r2, #0
 80115b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2200      	movs	r2, #0
 80115c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2200      	movs	r2, #0
 80115ce:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	689b      	ldr	r3, [r3, #8]
 80115d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80115d8:	d108      	bne.n	80115ec <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	e009      	b.n	8011600 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80115fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	4b96      	ldr	r3, [pc, #600]	@ (8011860 <HAL_SPI_Transmit+0x32c>)
 8011608:	4013      	ands	r3, r2
 801160a:	88f9      	ldrh	r1, [r7, #6]
 801160c:	68fa      	ldr	r2, [r7, #12]
 801160e:	6812      	ldr	r2, [r2, #0]
 8011610:	430b      	orrs	r3, r1
 8011612:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	681a      	ldr	r2, [r3, #0]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	f042 0201 	orr.w	r2, r2, #1
 8011622:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801162c:	d107      	bne.n	801163e <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801163c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	2b0f      	cmp	r3, #15
 8011644:	d947      	bls.n	80116d6 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011646:	e03f      	b.n	80116c8 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	695b      	ldr	r3, [r3, #20]
 801164e:	f003 0302 	and.w	r3, r3, #2
 8011652:	2b02      	cmp	r3, #2
 8011654:	d114      	bne.n	8011680 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	6812      	ldr	r2, [r2, #0]
 8011660:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011666:	1d1a      	adds	r2, r3, #4
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011672:	b29b      	uxth	r3, r3
 8011674:	3b01      	subs	r3, #1
 8011676:	b29a      	uxth	r2, r3
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801167e:	e023      	b.n	80116c8 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011680:	f7f1 face 	bl	8002c20 <HAL_GetTick>
 8011684:	4602      	mov	r2, r0
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	1ad3      	subs	r3, r2, r3
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	429a      	cmp	r2, r3
 801168e:	d803      	bhi.n	8011698 <HAL_SPI_Transmit+0x164>
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011696:	d102      	bne.n	801169e <HAL_SPI_Transmit+0x16a>
 8011698:	683b      	ldr	r3, [r7, #0]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d114      	bne.n	80116c8 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f000 fce6 	bl	8012070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80116aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2201      	movs	r2, #1
 80116b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2200      	movs	r2, #0
 80116c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80116c4:	2303      	movs	r3, #3
 80116c6:	e11e      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116ce:	b29b      	uxth	r3, r3
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1b9      	bne.n	8011648 <HAL_SPI_Transmit+0x114>
 80116d4:	e0f1      	b.n	80118ba <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	68db      	ldr	r3, [r3, #12]
 80116da:	2b07      	cmp	r3, #7
 80116dc:	f240 80e6 	bls.w	80118ac <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80116e0:	e05d      	b.n	801179e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	695b      	ldr	r3, [r3, #20]
 80116e8:	f003 0302 	and.w	r3, r3, #2
 80116ec:	2b02      	cmp	r3, #2
 80116ee:	d132      	bne.n	8011756 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d918      	bls.n	801172e <HAL_SPI_Transmit+0x1fa>
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011700:	2b00      	cmp	r3, #0
 8011702:	d014      	beq.n	801172e <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6812      	ldr	r2, [r2, #0]
 801170e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011714:	1d1a      	adds	r2, r3, #4
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011720:	b29b      	uxth	r3, r3
 8011722:	3b02      	subs	r3, #2
 8011724:	b29a      	uxth	r2, r3
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801172c:	e037      	b.n	801179e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011732:	881a      	ldrh	r2, [r3, #0]
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801173c:	1c9a      	adds	r2, r3, #2
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011748:	b29b      	uxth	r3, r3
 801174a:	3b01      	subs	r3, #1
 801174c:	b29a      	uxth	r2, r3
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011754:	e023      	b.n	801179e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011756:	f7f1 fa63 	bl	8002c20 <HAL_GetTick>
 801175a:	4602      	mov	r2, r0
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	683a      	ldr	r2, [r7, #0]
 8011762:	429a      	cmp	r2, r3
 8011764:	d803      	bhi.n	801176e <HAL_SPI_Transmit+0x23a>
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801176c:	d102      	bne.n	8011774 <HAL_SPI_Transmit+0x240>
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d114      	bne.n	801179e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f000 fc7b 	bl	8012070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011780:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2201      	movs	r2, #1
 801178e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 801179a:	2303      	movs	r3, #3
 801179c:	e0b3      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d19b      	bne.n	80116e2 <HAL_SPI_Transmit+0x1ae>
 80117aa:	e086      	b.n	80118ba <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	695b      	ldr	r3, [r3, #20]
 80117b2:	f003 0302 	and.w	r3, r3, #2
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	d154      	bne.n	8011864 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d918      	bls.n	80117f8 <HAL_SPI_Transmit+0x2c4>
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117ca:	2b40      	cmp	r3, #64	@ 0x40
 80117cc:	d914      	bls.n	80117f8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	6812      	ldr	r2, [r2, #0]
 80117d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80117de:	1d1a      	adds	r2, r3, #4
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117ea:	b29b      	uxth	r3, r3
 80117ec:	3b04      	subs	r3, #4
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80117f6:	e059      	b.n	80118ac <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117fe:	b29b      	uxth	r3, r3
 8011800:	2b01      	cmp	r3, #1
 8011802:	d917      	bls.n	8011834 <HAL_SPI_Transmit+0x300>
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011808:	2b00      	cmp	r3, #0
 801180a:	d013      	beq.n	8011834 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011810:	881a      	ldrh	r2, [r3, #0]
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801181a:	1c9a      	adds	r2, r3, #2
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011826:	b29b      	uxth	r3, r3
 8011828:	3b02      	subs	r3, #2
 801182a:	b29a      	uxth	r2, r3
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011832:	e03b      	b.n	80118ac <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	3320      	adds	r3, #32
 801183e:	7812      	ldrb	r2, [r2, #0]
 8011840:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011846:	1c5a      	adds	r2, r3, #1
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011852:	b29b      	uxth	r3, r3
 8011854:	3b01      	subs	r3, #1
 8011856:	b29a      	uxth	r2, r3
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801185e:	e025      	b.n	80118ac <HAL_SPI_Transmit+0x378>
 8011860:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011864:	f7f1 f9dc 	bl	8002c20 <HAL_GetTick>
 8011868:	4602      	mov	r2, r0
 801186a:	693b      	ldr	r3, [r7, #16]
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	683a      	ldr	r2, [r7, #0]
 8011870:	429a      	cmp	r2, r3
 8011872:	d803      	bhi.n	801187c <HAL_SPI_Transmit+0x348>
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801187a:	d102      	bne.n	8011882 <HAL_SPI_Transmit+0x34e>
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d114      	bne.n	80118ac <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f000 fbf4 	bl	8012070 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801188e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2201      	movs	r2, #1
 801189c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80118a8:	2303      	movs	r3, #3
 80118aa:	e02c      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	f47f af79 	bne.w	80117ac <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	9300      	str	r3, [sp, #0]
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	2200      	movs	r2, #0
 80118c2:	2108      	movs	r1, #8
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f000 fc73 	bl	80121b0 <SPI_WaitOnFlagUntilTimeout>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d007      	beq.n	80118e0 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118d6:	f043 0220 	orr.w	r2, r3, #32
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80118e0:	68f8      	ldr	r0, [r7, #12]
 80118e2:	f000 fbc5 	bl	8012070 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2201      	movs	r2, #1
 80118ea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	2200      	movs	r2, #0
 80118f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d001      	beq.n	8011904 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011900:	2301      	movs	r3, #1
 8011902:	e000      	b.n	8011906 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8011904:	2300      	movs	r3, #0
  }
}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
 801190e:	bf00      	nop

08011910 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	4613      	mov	r3, r2
 801191c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b01      	cmp	r3, #1
 8011928:	d001      	beq.n	801192e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801192a:	2302      	movs	r3, #2
 801192c:	e126      	b.n	8011b7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <HAL_SPI_Transmit_DMA+0x2a>
 8011934:	88fb      	ldrh	r3, [r7, #6]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d101      	bne.n	801193e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801193a:	2301      	movs	r3, #1
 801193c:	e11e      	b.n	8011b7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011944:	2b01      	cmp	r3, #1
 8011946:	d101      	bne.n	801194c <HAL_SPI_Transmit_DMA+0x3c>
 8011948:	2302      	movs	r3, #2
 801194a:	e117      	b.n	8011b7c <HAL_SPI_Transmit_DMA+0x26c>
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2201      	movs	r2, #1
 8011950:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2203      	movs	r2, #3
 8011958:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2200      	movs	r2, #0
 8011960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	68ba      	ldr	r2, [r7, #8]
 8011968:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	88fa      	ldrh	r2, [r7, #6]
 801196e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	88fa      	ldrh	r2, [r7, #6]
 8011976:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	2200      	movs	r2, #0
 801197e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2200      	movs	r2, #0
 8011984:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2200      	movs	r2, #0
 801198a:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2200      	movs	r2, #0
 8011990:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	2200      	movs	r2, #0
 8011998:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	689b      	ldr	r3, [r3, #8]
 80119a0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80119a4:	d108      	bne.n	80119b8 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	e009      	b.n	80119cc <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80119ca:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	2b0f      	cmp	r3, #15
 80119d2:	d905      	bls.n	80119e0 <HAL_SPI_Transmit_DMA+0xd0>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119d8:	699b      	ldr	r3, [r3, #24]
 80119da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80119de:	d10f      	bne.n	8011a00 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80119e4:	2b07      	cmp	r3, #7
 80119e6:	d911      	bls.n	8011a0c <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119ec:	699b      	ldr	r3, [r3, #24]
 80119ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80119f2:	d00b      	beq.n	8011a0c <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80119f8:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80119fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80119fe:	d005      	beq.n	8011a0c <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2200      	movs	r2, #0
 8011a04:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8011a08:	2301      	movs	r3, #1
 8011a0a:	e0b7      	b.n	8011b7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	68db      	ldr	r3, [r3, #12]
 8011a10:	2b07      	cmp	r3, #7
 8011a12:	d820      	bhi.n	8011a56 <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a18:	699b      	ldr	r3, [r3, #24]
 8011a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a1e:	d109      	bne.n	8011a34 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	3301      	adds	r3, #1
 8011a2a:	105b      	asrs	r3, r3, #1
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a38:	699b      	ldr	r3, [r3, #24]
 8011a3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a3e:	d11e      	bne.n	8011a7e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	3303      	adds	r3, #3
 8011a4a:	109b      	asrs	r3, r3, #2
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011a54:	e013      	b.n	8011a7e <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	2b0f      	cmp	r3, #15
 8011a5c:	d80f      	bhi.n	8011a7e <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a62:	699b      	ldr	r3, [r3, #24]
 8011a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a68:	d109      	bne.n	8011a7e <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	3301      	adds	r3, #1
 8011a74:	105b      	asrs	r3, r3, #1
 8011a76:	b29a      	uxth	r2, r3
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a82:	4a40      	ldr	r2, [pc, #256]	@ (8011b84 <HAL_SPI_Transmit_DMA+0x274>)
 8011a84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8011b88 <HAL_SPI_Transmit_DMA+0x278>)
 8011a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a92:	4a3e      	ldr	r2, [pc, #248]	@ (8011b8c <HAL_SPI_Transmit_DMA+0x27c>)
 8011a94:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	689a      	ldr	r2, [r3, #8]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011aac:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	3320      	adds	r3, #32
 8011abe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011ac6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011ac8:	f7f3 f87c 	bl	8004bc4 <HAL_DMA_Start_IT>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d011      	beq.n	8011af6 <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ad8:	f043 0210 	orr.w	r2, r3, #16
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2200      	movs	r2, #0
 8011aee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8011af2:	2301      	movs	r3, #1
 8011af4:	e042      	b.n	8011b7c <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011afa:	69db      	ldr	r3, [r3, #28]
 8011afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b00:	d108      	bne.n	8011b14 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	6859      	ldr	r1, [r3, #4]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681a      	ldr	r2, [r3, #0]
 8011b0c:	4b20      	ldr	r3, [pc, #128]	@ (8011b90 <HAL_SPI_Transmit_DMA+0x280>)
 8011b0e:	400b      	ands	r3, r1
 8011b10:	6053      	str	r3, [r2, #4]
 8011b12:	e009      	b.n	8011b28 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	685a      	ldr	r2, [r3, #4]
 8011b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8011b90 <HAL_SPI_Transmit_DMA+0x280>)
 8011b1c:	4013      	ands	r3, r2
 8011b1e:	88f9      	ldrh	r1, [r7, #6]
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	6812      	ldr	r2, [r2, #0]
 8011b24:	430b      	orrs	r3, r1
 8011b26:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	689a      	ldr	r2, [r3, #8]
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011b36:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	691a      	ldr	r2, [r3, #16]
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8011b46:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f042 0201 	orr.w	r2, r2, #1
 8011b56:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011b60:	d107      	bne.n	8011b72 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b70:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3710      	adds	r7, #16
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	08011fdb 	.word	0x08011fdb
 8011b88:	08011f95 	.word	0x08011f95
 8011b8c:	08011ff7 	.word	0x08011ff7
 8011b90:	ffff0000 	.word	0xffff0000

08011b94 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b08a      	sub	sp, #40	@ 0x28
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	691b      	ldr	r3, [r3, #16]
 8011ba2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	695b      	ldr	r3, [r3, #20]
 8011baa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011bac:	6a3a      	ldr	r2, [r7, #32]
 8011bae:	69fb      	ldr	r3, [r7, #28]
 8011bb0:	4013      	ands	r3, r2
 8011bb2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	689b      	ldr	r3, [r3, #8]
 8011bba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011bc6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	3330      	adds	r3, #48	@ 0x30
 8011bce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d010      	beq.n	8011bfc <HAL_SPI_IRQHandler+0x68>
 8011bda:	6a3b      	ldr	r3, [r7, #32]
 8011bdc:	f003 0308 	and.w	r3, r3, #8
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00b      	beq.n	8011bfc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	699a      	ldr	r2, [r3, #24]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011bf2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f000 f9c3 	bl	8011f80 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011bfa:	e192      	b.n	8011f22 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d113      	bne.n	8011c2e <HAL_SPI_IRQHandler+0x9a>
 8011c06:	69bb      	ldr	r3, [r7, #24]
 8011c08:	f003 0320 	and.w	r3, r3, #32
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d10e      	bne.n	8011c2e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d009      	beq.n	8011c2e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c26:	6878      	ldr	r0, [r7, #4]
 8011c28:	4798      	blx	r3
    handled = 1UL;
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d10f      	bne.n	8011c58 <HAL_SPI_IRQHandler+0xc4>
 8011c38:	69bb      	ldr	r3, [r7, #24]
 8011c3a:	f003 0301 	and.w	r3, r3, #1
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d00a      	beq.n	8011c58 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d105      	bne.n	8011c58 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	4798      	blx	r3
    handled = 1UL;
 8011c54:	2301      	movs	r3, #1
 8011c56:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011c58:	69bb      	ldr	r3, [r7, #24]
 8011c5a:	f003 0320 	and.w	r3, r3, #32
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10f      	bne.n	8011c82 <HAL_SPI_IRQHandler+0xee>
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	f003 0302 	and.w	r3, r3, #2
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d00a      	beq.n	8011c82 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011c6c:	69bb      	ldr	r3, [r7, #24]
 8011c6e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d105      	bne.n	8011c82 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	4798      	blx	r3
    handled = 1UL;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f040 8147 	bne.w	8011f18 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	f003 0308 	and.w	r3, r3, #8
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f000 808b 	beq.w	8011dac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	699a      	ldr	r2, [r3, #24]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	f042 0208 	orr.w	r2, r2, #8
 8011ca4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	699a      	ldr	r2, [r3, #24]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	f042 0210 	orr.w	r2, r2, #16
 8011cb4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	699a      	ldr	r2, [r3, #24]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011cc4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	691a      	ldr	r2, [r3, #16]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	f022 0208 	bic.w	r2, r2, #8
 8011cd4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	689b      	ldr	r3, [r3, #8]
 8011cdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d13d      	bne.n	8011d60 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011ce4:	e036      	b.n	8011d54 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	2b0f      	cmp	r3, #15
 8011cec:	d90b      	bls.n	8011d06 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cf6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011cf8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011cfe:	1d1a      	adds	r2, r3, #4
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	665a      	str	r2, [r3, #100]	@ 0x64
 8011d04:	e01d      	b.n	8011d42 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	68db      	ldr	r3, [r3, #12]
 8011d0a:	2b07      	cmp	r3, #7
 8011d0c:	d90b      	bls.n	8011d26 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d12:	68fa      	ldr	r2, [r7, #12]
 8011d14:	8812      	ldrh	r2, [r2, #0]
 8011d16:	b292      	uxth	r2, r2
 8011d18:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d1e:	1c9a      	adds	r2, r3, #2
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	665a      	str	r2, [r3, #100]	@ 0x64
 8011d24:	e00d      	b.n	8011d42 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d32:	7812      	ldrb	r2, [r2, #0]
 8011d34:	b2d2      	uxtb	r2, r2
 8011d36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d3c:	1c5a      	adds	r2, r3, #1
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d48:	b29b      	uxth	r3, r3
 8011d4a:	3b01      	subs	r3, #1
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d5a:	b29b      	uxth	r3, r3
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d1c2      	bne.n	8011ce6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 f985 	bl	8012070 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d003      	beq.n	8011d80 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 f8f7 	bl	8011f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011d7e:	e0d0      	b.n	8011f22 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011d80:	7cfb      	ldrb	r3, [r7, #19]
 8011d82:	2b05      	cmp	r3, #5
 8011d84:	d103      	bne.n	8011d8e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 f8dc 	bl	8011f44 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011d8c:	e0c6      	b.n	8011f1c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011d8e:	7cfb      	ldrb	r3, [r7, #19]
 8011d90:	2b04      	cmp	r3, #4
 8011d92:	d103      	bne.n	8011d9c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 f8cb 	bl	8011f30 <HAL_SPI_RxCpltCallback>
    return;
 8011d9a:	e0bf      	b.n	8011f1c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011d9c:	7cfb      	ldrb	r3, [r7, #19]
 8011d9e:	2b03      	cmp	r3, #3
 8011da0:	f040 80bc 	bne.w	8011f1c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7ef fbe7 	bl	8001578 <HAL_SPI_TxCpltCallback>
    return;
 8011daa:	e0b7      	b.n	8011f1c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011dac:	69bb      	ldr	r3, [r7, #24]
 8011dae:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	f000 80b5 	beq.w	8011f22 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00f      	beq.n	8011de2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011dc8:	f043 0204 	orr.w	r2, r3, #4
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	699a      	ldr	r2, [r3, #24]
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011de0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00f      	beq.n	8011e0c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011df2:	f043 0201 	orr.w	r2, r3, #1
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	699a      	ldr	r2, [r3, #24]
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e0a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00f      	beq.n	8011e36 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e1c:	f043 0208 	orr.w	r2, r3, #8
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	699a      	ldr	r2, [r3, #24]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011e34:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011e36:	69bb      	ldr	r3, [r7, #24]
 8011e38:	f003 0320 	and.w	r3, r3, #32
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00f      	beq.n	8011e60 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	699a      	ldr	r2, [r3, #24]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f042 0220 	orr.w	r2, r2, #32
 8011e5e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d05a      	beq.n	8011f20 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	681a      	ldr	r2, [r3, #0]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f022 0201 	bic.w	r2, r2, #1
 8011e78:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	6919      	ldr	r1, [r3, #16]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	4b28      	ldr	r3, [pc, #160]	@ (8011f28 <HAL_SPI_IRQHandler+0x394>)
 8011e86:	400b      	ands	r3, r1
 8011e88:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011e90:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011e94:	d138      	bne.n	8011f08 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	689a      	ldr	r2, [r3, #8]
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011ea4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d013      	beq.n	8011ed6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8011f2c <HAL_SPI_IRQHandler+0x398>)
 8011eb4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7f3 fc0a 	bl	80056d4 <HAL_DMA_Abort_IT>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d007      	beq.n	8011ed6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ecc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d020      	beq.n	8011f20 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ee2:	4a12      	ldr	r2, [pc, #72]	@ (8011f2c <HAL_SPI_IRQHandler+0x398>)
 8011ee4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7f3 fbf2 	bl	80056d4 <HAL_DMA_Abort_IT>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d014      	beq.n	8011f20 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011efc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011f06:	e00b      	b.n	8011f20 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 f82b 	bl	8011f6c <HAL_SPI_ErrorCallback>
    return;
 8011f16:	e003      	b.n	8011f20 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011f18:	bf00      	nop
 8011f1a:	e002      	b.n	8011f22 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011f1c:	bf00      	nop
 8011f1e:	e000      	b.n	8011f22 <HAL_SPI_IRQHandler+0x38e>
    return;
 8011f20:	bf00      	nop
  }
}
 8011f22:	3728      	adds	r7, #40	@ 0x28
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	fffffc94 	.word	0xfffffc94
 8011f2c:	0801203d 	.word	0x0801203d

08011f30 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f30:	b480      	push	{r7}
 8011f32:	b083      	sub	sp, #12
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011f38:	bf00      	nop
 8011f3a:	370c      	adds	r7, #12
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f42:	4770      	bx	lr

08011f44 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011f4c:	bf00      	nop
 8011f4e:	370c      	adds	r7, #12
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr

08011f58 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011f60:	bf00      	nop
 8011f62:	370c      	adds	r7, #12
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011f74:	bf00      	nop
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011f88:	bf00      	nop
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b084      	sub	sp, #16
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fa0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	2b07      	cmp	r3, #7
 8011fac:	d011      	beq.n	8011fd2 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011fb2:	69db      	ldr	r3, [r3, #28]
 8011fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011fb8:	d103      	bne.n	8011fc2 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8011fba:	68f8      	ldr	r0, [r7, #12]
 8011fbc:	f7ef fadc 	bl	8001578 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011fc0:	e007      	b.n	8011fd2 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	691a      	ldr	r2, [r3, #16]
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	f042 0208 	orr.w	r2, r2, #8
 8011fd0:	611a      	str	r2, [r3, #16]
}
 8011fd2:	bf00      	nop
 8011fd4:	3710      	adds	r7, #16
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}

08011fda <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011fda:	b580      	push	{r7, lr}
 8011fdc:	b084      	sub	sp, #16
 8011fde:	af00      	add	r7, sp, #0
 8011fe0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fe6:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8011fe8:	68f8      	ldr	r0, [r7, #12]
 8011fea:	f7ff ffb5 	bl	8011f58 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011fee:	bf00      	nop
 8011ff0:	3710      	adds	r7, #16
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}

08011ff6 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011ff6:	b580      	push	{r7, lr}
 8011ff8:	b084      	sub	sp, #16
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012002:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7f4 fce3 	bl	80069d0 <HAL_DMA_GetError>
 801200a:	4603      	mov	r3, r0
 801200c:	2b02      	cmp	r3, #2
 801200e:	d011      	beq.n	8012034 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f000 f82d 	bl	8012070 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801201c:	f043 0210 	orr.w	r2, r3, #16
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2201      	movs	r2, #1
 801202a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f7ff ff9c 	bl	8011f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8012034:	bf00      	nop
 8012036:	3710      	adds	r7, #16
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012048:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2200      	movs	r2, #0
 801204e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2200      	movs	r2, #0
 8012056:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	2201      	movs	r2, #1
 801205e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012062:	68f8      	ldr	r0, [r7, #12]
 8012064:	f7ff ff82 	bl	8011f6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012068:	bf00      	nop
 801206a:	3710      	adds	r7, #16
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012070:	b480      	push	{r7}
 8012072:	b085      	sub	sp, #20
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	695b      	ldr	r3, [r3, #20]
 801207e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	699a      	ldr	r2, [r3, #24]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f042 0208 	orr.w	r2, r2, #8
 801208e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	699a      	ldr	r2, [r3, #24]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	f042 0210 	orr.w	r2, r2, #16
 801209e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	681a      	ldr	r2, [r3, #0]
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	f022 0201 	bic.w	r2, r2, #1
 80120ae:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	6919      	ldr	r1, [r3, #16]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	4b3c      	ldr	r3, [pc, #240]	@ (80121ac <SPI_CloseTransfer+0x13c>)
 80120bc:	400b      	ands	r3, r1
 80120be:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	689a      	ldr	r2, [r3, #8]
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80120ce:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b04      	cmp	r3, #4
 80120da:	d014      	beq.n	8012106 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	f003 0320 	and.w	r3, r3, #32
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00f      	beq.n	8012106 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80120ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	699a      	ldr	r2, [r3, #24]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f042 0220 	orr.w	r2, r2, #32
 8012104:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801210c:	b2db      	uxtb	r3, r3
 801210e:	2b03      	cmp	r3, #3
 8012110:	d014      	beq.n	801213c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012118:	2b00      	cmp	r3, #0
 801211a:	d00f      	beq.n	801213c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012122:	f043 0204 	orr.w	r2, r3, #4
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	699a      	ldr	r2, [r3, #24]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801213a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012142:	2b00      	cmp	r3, #0
 8012144:	d00f      	beq.n	8012166 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801214c:	f043 0201 	orr.w	r2, r3, #1
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	699a      	ldr	r2, [r3, #24]
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012164:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00f      	beq.n	8012190 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012176:	f043 0208 	orr.w	r2, r3, #8
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	699a      	ldr	r2, [r3, #24]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801218e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2200      	movs	r2, #0
 8012194:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80121a0:	bf00      	nop
 80121a2:	3714      	adds	r7, #20
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	fffffc90 	.word	0xfffffc90

080121b0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	603b      	str	r3, [r7, #0]
 80121bc:	4613      	mov	r3, r2
 80121be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80121c0:	e010      	b.n	80121e4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80121c2:	f7f0 fd2d 	bl	8002c20 <HAL_GetTick>
 80121c6:	4602      	mov	r2, r0
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	683a      	ldr	r2, [r7, #0]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d803      	bhi.n	80121da <SPI_WaitOnFlagUntilTimeout+0x2a>
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121d8:	d102      	bne.n	80121e0 <SPI_WaitOnFlagUntilTimeout+0x30>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d101      	bne.n	80121e4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80121e0:	2303      	movs	r3, #3
 80121e2:	e00f      	b.n	8012204 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	695a      	ldr	r2, [r3, #20]
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	4013      	ands	r3, r2
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	bf0c      	ite	eq
 80121f4:	2301      	moveq	r3, #1
 80121f6:	2300      	movne	r3, #0
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	461a      	mov	r2, r3
 80121fc:	79fb      	ldrb	r3, [r7, #7]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d0df      	beq.n	80121c2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012202:	2300      	movs	r3, #0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3710      	adds	r7, #16
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801220c:	b480      	push	{r7}
 801220e:	b085      	sub	sp, #20
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012218:	095b      	lsrs	r3, r3, #5
 801221a:	3301      	adds	r3, #1
 801221c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	3301      	adds	r3, #1
 8012224:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	3307      	adds	r3, #7
 801222a:	08db      	lsrs	r3, r3, #3
 801222c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	fb02 f303 	mul.w	r3, r2, r3
}
 8012236:	4618      	mov	r0, r3
 8012238:	3714      	adds	r7, #20
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr

08012242 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012242:	b580      	push	{r7, lr}
 8012244:	b082      	sub	sp, #8
 8012246:	af00      	add	r7, sp, #0
 8012248:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012250:	2301      	movs	r3, #1
 8012252:	e042      	b.n	80122da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801225a:	2b00      	cmp	r3, #0
 801225c:	d106      	bne.n	801226c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	2200      	movs	r2, #0
 8012262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012266:	6878      	ldr	r0, [r7, #4]
 8012268:	f7ef ff1a 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2224      	movs	r2, #36	@ 0x24
 8012270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f022 0201 	bic.w	r2, r2, #1
 8012282:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012288:	2b00      	cmp	r3, #0
 801228a:	d002      	beq.n	8012292 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f001 fa6b 	bl	8013768 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f000 fd00 	bl	8012c98 <UART_SetConfig>
 8012298:	4603      	mov	r3, r0
 801229a:	2b01      	cmp	r3, #1
 801229c:	d101      	bne.n	80122a2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801229e:	2301      	movs	r3, #1
 80122a0:	e01b      	b.n	80122da <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	685a      	ldr	r2, [r3, #4]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80122b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80122c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f042 0201 	orr.w	r2, r2, #1
 80122d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f001 faea 	bl	80138ac <UART_CheckIdleState>
 80122d8:	4603      	mov	r3, r0
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3708      	adds	r7, #8
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b08a      	sub	sp, #40	@ 0x28
 80122e6:	af02      	add	r7, sp, #8
 80122e8:	60f8      	str	r0, [r7, #12]
 80122ea:	60b9      	str	r1, [r7, #8]
 80122ec:	603b      	str	r3, [r7, #0]
 80122ee:	4613      	mov	r3, r2
 80122f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80122f8:	2b20      	cmp	r3, #32
 80122fa:	d17b      	bne.n	80123f4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d002      	beq.n	8012308 <HAL_UART_Transmit+0x26>
 8012302:	88fb      	ldrh	r3, [r7, #6]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d101      	bne.n	801230c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012308:	2301      	movs	r3, #1
 801230a:	e074      	b.n	80123f6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2200      	movs	r2, #0
 8012310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2221      	movs	r2, #33	@ 0x21
 8012318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801231c:	f7f0 fc80 	bl	8002c20 <HAL_GetTick>
 8012320:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	88fa      	ldrh	r2, [r7, #6]
 8012326:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	88fa      	ldrh	r2, [r7, #6]
 801232e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	689b      	ldr	r3, [r3, #8]
 8012336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801233a:	d108      	bne.n	801234e <HAL_UART_Transmit+0x6c>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d104      	bne.n	801234e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012344:	2300      	movs	r3, #0
 8012346:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	61bb      	str	r3, [r7, #24]
 801234c:	e003      	b.n	8012356 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012352:	2300      	movs	r3, #0
 8012354:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012356:	e030      	b.n	80123ba <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	9300      	str	r3, [sp, #0]
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	2200      	movs	r2, #0
 8012360:	2180      	movs	r1, #128	@ 0x80
 8012362:	68f8      	ldr	r0, [r7, #12]
 8012364:	f001 fb4c 	bl	8013a00 <UART_WaitOnFlagUntilTimeout>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	d005      	beq.n	801237a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	2220      	movs	r2, #32
 8012372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8012376:	2303      	movs	r3, #3
 8012378:	e03d      	b.n	80123f6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10b      	bne.n	8012398 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	461a      	mov	r2, r3
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801238e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8012390:	69bb      	ldr	r3, [r7, #24]
 8012392:	3302      	adds	r3, #2
 8012394:	61bb      	str	r3, [r7, #24]
 8012396:	e007      	b.n	80123a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	781a      	ldrb	r2, [r3, #0]
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	3301      	adds	r3, #1
 80123a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80123ae:	b29b      	uxth	r3, r3
 80123b0:	3b01      	subs	r3, #1
 80123b2:	b29a      	uxth	r2, r3
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80123c0:	b29b      	uxth	r3, r3
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1c8      	bne.n	8012358 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	2200      	movs	r2, #0
 80123ce:	2140      	movs	r1, #64	@ 0x40
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	f001 fb15 	bl	8013a00 <UART_WaitOnFlagUntilTimeout>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d005      	beq.n	80123e8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2220      	movs	r2, #32
 80123e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80123e4:	2303      	movs	r3, #3
 80123e6:	e006      	b.n	80123f6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2220      	movs	r2, #32
 80123ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80123f0:	2300      	movs	r3, #0
 80123f2:	e000      	b.n	80123f6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80123f4:	2302      	movs	r3, #2
  }
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3720      	adds	r7, #32
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
	...

08012400 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b08a      	sub	sp, #40	@ 0x28
 8012404:	af00      	add	r7, sp, #0
 8012406:	60f8      	str	r0, [r7, #12]
 8012408:	60b9      	str	r1, [r7, #8]
 801240a:	4613      	mov	r3, r2
 801240c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012414:	2b20      	cmp	r3, #32
 8012416:	d137      	bne.n	8012488 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d002      	beq.n	8012424 <HAL_UART_Receive_DMA+0x24>
 801241e:	88fb      	ldrh	r3, [r7, #6]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d101      	bne.n	8012428 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8012424:	2301      	movs	r3, #1
 8012426:	e030      	b.n	801248a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	2200      	movs	r2, #0
 801242c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	4a18      	ldr	r2, [pc, #96]	@ (8012494 <HAL_UART_Receive_DMA+0x94>)
 8012434:	4293      	cmp	r3, r2
 8012436:	d01f      	beq.n	8012478 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012442:	2b00      	cmp	r3, #0
 8012444:	d018      	beq.n	8012478 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801244c:	697b      	ldr	r3, [r7, #20]
 801244e:	e853 3f00 	ldrex	r3, [r3]
 8012452:	613b      	str	r3, [r7, #16]
   return(result);
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801245a:	627b      	str	r3, [r7, #36]	@ 0x24
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	461a      	mov	r2, r3
 8012462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012464:	623b      	str	r3, [r7, #32]
 8012466:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012468:	69f9      	ldr	r1, [r7, #28]
 801246a:	6a3a      	ldr	r2, [r7, #32]
 801246c:	e841 2300 	strex	r3, r2, [r1]
 8012470:	61bb      	str	r3, [r7, #24]
   return(result);
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1e6      	bne.n	8012446 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012478:	88fb      	ldrh	r3, [r7, #6]
 801247a:	461a      	mov	r2, r3
 801247c:	68b9      	ldr	r1, [r7, #8]
 801247e:	68f8      	ldr	r0, [r7, #12]
 8012480:	f001 fb2c 	bl	8013adc <UART_Start_Receive_DMA>
 8012484:	4603      	mov	r3, r0
 8012486:	e000      	b.n	801248a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012488:	2302      	movs	r3, #2
  }
}
 801248a:	4618      	mov	r0, r3
 801248c:	3728      	adds	r7, #40	@ 0x28
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
 8012492:	bf00      	nop
 8012494:	58000c00 	.word	0x58000c00

08012498 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b0ba      	sub	sp, #232	@ 0xe8
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	69db      	ldr	r3, [r3, #28]
 80124a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	689b      	ldr	r3, [r3, #8]
 80124ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80124be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80124c2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80124c6:	4013      	ands	r3, r2
 80124c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80124cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d11b      	bne.n	801250c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80124d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80124d8:	f003 0320 	and.w	r3, r3, #32
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d015      	beq.n	801250c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80124e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80124e4:	f003 0320 	and.w	r3, r3, #32
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d105      	bne.n	80124f8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80124ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80124f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d009      	beq.n	801250c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 8393 	beq.w	8012c28 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	4798      	blx	r3
      }
      return;
 801250a:	e38d      	b.n	8012c28 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801250c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012510:	2b00      	cmp	r3, #0
 8012512:	f000 8123 	beq.w	801275c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012516:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801251a:	4b8d      	ldr	r3, [pc, #564]	@ (8012750 <HAL_UART_IRQHandler+0x2b8>)
 801251c:	4013      	ands	r3, r2
 801251e:	2b00      	cmp	r3, #0
 8012520:	d106      	bne.n	8012530 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012522:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8012526:	4b8b      	ldr	r3, [pc, #556]	@ (8012754 <HAL_UART_IRQHandler+0x2bc>)
 8012528:	4013      	ands	r3, r2
 801252a:	2b00      	cmp	r3, #0
 801252c:	f000 8116 	beq.w	801275c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012534:	f003 0301 	and.w	r3, r3, #1
 8012538:	2b00      	cmp	r3, #0
 801253a:	d011      	beq.n	8012560 <HAL_UART_IRQHandler+0xc8>
 801253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012544:	2b00      	cmp	r3, #0
 8012546:	d00b      	beq.n	8012560 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2201      	movs	r2, #1
 801254e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012556:	f043 0201 	orr.w	r2, r3, #1
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012564:	f003 0302 	and.w	r3, r3, #2
 8012568:	2b00      	cmp	r3, #0
 801256a:	d011      	beq.n	8012590 <HAL_UART_IRQHandler+0xf8>
 801256c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012570:	f003 0301 	and.w	r3, r3, #1
 8012574:	2b00      	cmp	r3, #0
 8012576:	d00b      	beq.n	8012590 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	2202      	movs	r2, #2
 801257e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012586:	f043 0204 	orr.w	r2, r3, #4
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012594:	f003 0304 	and.w	r3, r3, #4
 8012598:	2b00      	cmp	r3, #0
 801259a:	d011      	beq.n	80125c0 <HAL_UART_IRQHandler+0x128>
 801259c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80125a0:	f003 0301 	and.w	r3, r3, #1
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	2204      	movs	r2, #4
 80125ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80125b6:	f043 0202 	orr.w	r2, r3, #2
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80125c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125c4:	f003 0308 	and.w	r3, r3, #8
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d017      	beq.n	80125fc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80125cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125d0:	f003 0320 	and.w	r3, r3, #32
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d105      	bne.n	80125e4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80125d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80125dc:	4b5c      	ldr	r3, [pc, #368]	@ (8012750 <HAL_UART_IRQHandler+0x2b8>)
 80125de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d00b      	beq.n	80125fc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	2208      	movs	r2, #8
 80125ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80125f2:	f043 0208 	orr.w	r2, r3, #8
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80125fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012604:	2b00      	cmp	r3, #0
 8012606:	d012      	beq.n	801262e <HAL_UART_IRQHandler+0x196>
 8012608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801260c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012610:	2b00      	cmp	r3, #0
 8012612:	d00c      	beq.n	801262e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801261c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012624:	f043 0220 	orr.w	r2, r3, #32
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 82f9 	beq.w	8012c2c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801263a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801263e:	f003 0320 	and.w	r3, r3, #32
 8012642:	2b00      	cmp	r3, #0
 8012644:	d013      	beq.n	801266e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801264a:	f003 0320 	and.w	r3, r3, #32
 801264e:	2b00      	cmp	r3, #0
 8012650:	d105      	bne.n	801265e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801265a:	2b00      	cmp	r3, #0
 801265c:	d007      	beq.n	801266e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012662:	2b00      	cmp	r3, #0
 8012664:	d003      	beq.n	801266e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012674:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012682:	2b40      	cmp	r3, #64	@ 0x40
 8012684:	d005      	beq.n	8012692 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801268a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801268e:	2b00      	cmp	r3, #0
 8012690:	d054      	beq.n	801273c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	f001 fb0a 	bl	8013cac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126a2:	2b40      	cmp	r3, #64	@ 0x40
 80126a4:	d146      	bne.n	8012734 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	3308      	adds	r3, #8
 80126ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80126b4:	e853 3f00 	ldrex	r3, [r3]
 80126b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80126bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80126c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	3308      	adds	r3, #8
 80126ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80126d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80126d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80126de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80126e2:	e841 2300 	strex	r3, r2, [r1]
 80126e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80126ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d1d9      	bne.n	80126a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d017      	beq.n	801272c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012702:	4a15      	ldr	r2, [pc, #84]	@ (8012758 <HAL_UART_IRQHandler+0x2c0>)
 8012704:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801270c:	4618      	mov	r0, r3
 801270e:	f7f2 ffe1 	bl	80056d4 <HAL_DMA_Abort_IT>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d019      	beq.n	801274c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801271e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012720:	687a      	ldr	r2, [r7, #4]
 8012722:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012726:	4610      	mov	r0, r2
 8012728:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801272a:	e00f      	b.n	801274c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 fa9d 	bl	8012c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012732:	e00b      	b.n	801274c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 fa99 	bl	8012c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801273a:	e007      	b.n	801274c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 fa95 	bl	8012c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2200      	movs	r2, #0
 8012746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801274a:	e26f      	b.n	8012c2c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801274c:	bf00      	nop
    return;
 801274e:	e26d      	b.n	8012c2c <HAL_UART_IRQHandler+0x794>
 8012750:	10000001 	.word	0x10000001
 8012754:	04000120 	.word	0x04000120
 8012758:	08013f5f 	.word	0x08013f5f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012760:	2b01      	cmp	r3, #1
 8012762:	f040 8203 	bne.w	8012b6c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801276a:	f003 0310 	and.w	r3, r3, #16
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 81fc 	beq.w	8012b6c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012778:	f003 0310 	and.w	r3, r3, #16
 801277c:	2b00      	cmp	r3, #0
 801277e:	f000 81f5 	beq.w	8012b6c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2210      	movs	r2, #16
 8012788:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012794:	2b40      	cmp	r3, #64	@ 0x40
 8012796:	f040 816d 	bne.w	8012a74 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	4aa4      	ldr	r2, [pc, #656]	@ (8012a34 <HAL_UART_IRQHandler+0x59c>)
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d068      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4aa1      	ldr	r2, [pc, #644]	@ (8012a38 <HAL_UART_IRQHandler+0x5a0>)
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d061      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	4a9f      	ldr	r2, [pc, #636]	@ (8012a3c <HAL_UART_IRQHandler+0x5a4>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d05a      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a9c      	ldr	r2, [pc, #624]	@ (8012a40 <HAL_UART_IRQHandler+0x5a8>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d053      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4a9a      	ldr	r2, [pc, #616]	@ (8012a44 <HAL_UART_IRQHandler+0x5ac>)
 80127dc:	4293      	cmp	r3, r2
 80127de:	d04c      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	4a97      	ldr	r2, [pc, #604]	@ (8012a48 <HAL_UART_IRQHandler+0x5b0>)
 80127ea:	4293      	cmp	r3, r2
 80127ec:	d045      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	4a95      	ldr	r2, [pc, #596]	@ (8012a4c <HAL_UART_IRQHandler+0x5b4>)
 80127f8:	4293      	cmp	r3, r2
 80127fa:	d03e      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4a92      	ldr	r2, [pc, #584]	@ (8012a50 <HAL_UART_IRQHandler+0x5b8>)
 8012806:	4293      	cmp	r3, r2
 8012808:	d037      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a90      	ldr	r2, [pc, #576]	@ (8012a54 <HAL_UART_IRQHandler+0x5bc>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d030      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a8d      	ldr	r2, [pc, #564]	@ (8012a58 <HAL_UART_IRQHandler+0x5c0>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d029      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	4a8b      	ldr	r2, [pc, #556]	@ (8012a5c <HAL_UART_IRQHandler+0x5c4>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d022      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	4a88      	ldr	r2, [pc, #544]	@ (8012a60 <HAL_UART_IRQHandler+0x5c8>)
 801283e:	4293      	cmp	r3, r2
 8012840:	d01b      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	4a86      	ldr	r2, [pc, #536]	@ (8012a64 <HAL_UART_IRQHandler+0x5cc>)
 801284c:	4293      	cmp	r3, r2
 801284e:	d014      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4a83      	ldr	r2, [pc, #524]	@ (8012a68 <HAL_UART_IRQHandler+0x5d0>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d00d      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a81      	ldr	r2, [pc, #516]	@ (8012a6c <HAL_UART_IRQHandler+0x5d4>)
 8012868:	4293      	cmp	r3, r2
 801286a:	d006      	beq.n	801287a <HAL_UART_IRQHandler+0x3e2>
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4a7e      	ldr	r2, [pc, #504]	@ (8012a70 <HAL_UART_IRQHandler+0x5d8>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d106      	bne.n	8012888 <HAL_UART_IRQHandler+0x3f0>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	685b      	ldr	r3, [r3, #4]
 8012884:	b29b      	uxth	r3, r3
 8012886:	e005      	b.n	8012894 <HAL_UART_IRQHandler+0x3fc>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	b29b      	uxth	r3, r3
 8012894:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801289c:	2b00      	cmp	r3, #0
 801289e:	f000 80ad 	beq.w	80129fc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80128a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80128ac:	429a      	cmp	r2, r3
 80128ae:	f080 80a5 	bcs.w	80129fc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80128b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80128c2:	69db      	ldr	r3, [r3, #28]
 80128c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128c8:	f000 8087 	beq.w	80129da <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80128d8:	e853 3f00 	ldrex	r3, [r3]
 80128dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80128e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80128e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80128e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	461a      	mov	r2, r3
 80128f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80128f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80128fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8012902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012906:	e841 2300 	strex	r3, r2, [r1]
 801290a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1da      	bne.n	80128cc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	3308      	adds	r3, #8
 801291c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801291e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012920:	e853 3f00 	ldrex	r3, [r3]
 8012924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8012926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012928:	f023 0301 	bic.w	r3, r3, #1
 801292c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	3308      	adds	r3, #8
 8012936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801293a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801293e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8012942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012946:	e841 2300 	strex	r3, r2, [r1]
 801294a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801294c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801294e:	2b00      	cmp	r3, #0
 8012950:	d1e1      	bne.n	8012916 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	3308      	adds	r3, #8
 8012958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801295a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801295c:	e853 3f00 	ldrex	r3, [r3]
 8012960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8012962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	3308      	adds	r3, #8
 8012972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801297a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801297c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801297e:	e841 2300 	strex	r3, r2, [r1]
 8012982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8012984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012986:	2b00      	cmp	r3, #0
 8012988:	d1e3      	bne.n	8012952 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	2220      	movs	r2, #32
 801298e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2200      	movs	r2, #0
 8012996:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801299e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129a0:	e853 3f00 	ldrex	r3, [r3]
 80129a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80129a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129a8:	f023 0310 	bic.w	r3, r3, #16
 80129ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	461a      	mov	r2, r3
 80129b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80129bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80129c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80129c2:	e841 2300 	strex	r3, r2, [r1]
 80129c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80129c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d1e4      	bne.n	8012998 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7f2 fb5f 	bl	8005098 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2202      	movs	r2, #2
 80129de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	1ad3      	subs	r3, r2, r3
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	4619      	mov	r1, r3
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f943 	bl	8012c80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80129fa:	e119      	b.n	8012c30 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012a06:	429a      	cmp	r2, r3
 8012a08:	f040 8112 	bne.w	8012c30 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a12:	69db      	ldr	r3, [r3, #28]
 8012a14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a18:	f040 810a 	bne.w	8012c30 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2202      	movs	r2, #2
 8012a20:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012a28:	4619      	mov	r1, r3
 8012a2a:	6878      	ldr	r0, [r7, #4]
 8012a2c:	f000 f928 	bl	8012c80 <HAL_UARTEx_RxEventCallback>
      return;
 8012a30:	e0fe      	b.n	8012c30 <HAL_UART_IRQHandler+0x798>
 8012a32:	bf00      	nop
 8012a34:	40020010 	.word	0x40020010
 8012a38:	40020028 	.word	0x40020028
 8012a3c:	40020040 	.word	0x40020040
 8012a40:	40020058 	.word	0x40020058
 8012a44:	40020070 	.word	0x40020070
 8012a48:	40020088 	.word	0x40020088
 8012a4c:	400200a0 	.word	0x400200a0
 8012a50:	400200b8 	.word	0x400200b8
 8012a54:	40020410 	.word	0x40020410
 8012a58:	40020428 	.word	0x40020428
 8012a5c:	40020440 	.word	0x40020440
 8012a60:	40020458 	.word	0x40020458
 8012a64:	40020470 	.word	0x40020470
 8012a68:	40020488 	.word	0x40020488
 8012a6c:	400204a0 	.word	0x400204a0
 8012a70:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f000 80cf 	beq.w	8012c34 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8012a96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f000 80ca 	beq.w	8012c34 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa8:	e853 3f00 	ldrex	r3, [r3]
 8012aac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ab0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	461a      	mov	r2, r3
 8012abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ac4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ac6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012aca:	e841 2300 	strex	r3, r2, [r1]
 8012ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d1e4      	bne.n	8012aa0 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	3308      	adds	r3, #8
 8012adc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ae0:	e853 3f00 	ldrex	r3, [r3]
 8012ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8012ae6:	6a3a      	ldr	r2, [r7, #32]
 8012ae8:	4b55      	ldr	r3, [pc, #340]	@ (8012c40 <HAL_UART_IRQHandler+0x7a8>)
 8012aea:	4013      	ands	r3, r2
 8012aec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	3308      	adds	r3, #8
 8012af6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012afa:	633a      	str	r2, [r7, #48]	@ 0x30
 8012afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b02:	e841 2300 	strex	r3, r2, [r1]
 8012b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d1e3      	bne.n	8012ad6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2220      	movs	r2, #32
 8012b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2200      	movs	r2, #0
 8012b1a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2200      	movs	r2, #0
 8012b20:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	e853 3f00 	ldrex	r3, [r3]
 8012b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f023 0310 	bic.w	r3, r3, #16
 8012b36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012b44:	61fb      	str	r3, [r7, #28]
 8012b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b48:	69b9      	ldr	r1, [r7, #24]
 8012b4a:	69fa      	ldr	r2, [r7, #28]
 8012b4c:	e841 2300 	strex	r3, r2, [r1]
 8012b50:	617b      	str	r3, [r7, #20]
   return(result);
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1e4      	bne.n	8012b22 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2202      	movs	r2, #2
 8012b5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012b5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012b62:	4619      	mov	r1, r3
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f000 f88b 	bl	8012c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b6a:	e063      	b.n	8012c34 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00e      	beq.n	8012b96 <HAL_UART_IRQHandler+0x6fe>
 8012b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d008      	beq.n	8012b96 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012b8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f001 fa22 	bl	8013fd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012b94:	e051      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d014      	beq.n	8012bcc <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d105      	bne.n	8012bba <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012bb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d008      	beq.n	8012bcc <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d03a      	beq.n	8012c38 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	4798      	blx	r3
    }
    return;
 8012bca:	e035      	b.n	8012c38 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d009      	beq.n	8012bec <HAL_UART_IRQHandler+0x754>
 8012bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d003      	beq.n	8012bec <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f001 f9cc 	bl	8013f82 <UART_EndTransmit_IT>
    return;
 8012bea:	e026      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d009      	beq.n	8012c0c <HAL_UART_IRQHandler+0x774>
 8012bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012bfc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d003      	beq.n	8012c0c <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f001 f9fb 	bl	8014000 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c0a:	e016      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d010      	beq.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
 8012c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	da0c      	bge.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012c20:	6878      	ldr	r0, [r7, #4]
 8012c22:	f001 f9e3 	bl	8013fec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c26:	e008      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
      return;
 8012c28:	bf00      	nop
 8012c2a:	e006      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
    return;
 8012c2c:	bf00      	nop
 8012c2e:	e004      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
      return;
 8012c30:	bf00      	nop
 8012c32:	e002      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
      return;
 8012c34:	bf00      	nop
 8012c36:	e000      	b.n	8012c3a <HAL_UART_IRQHandler+0x7a2>
    return;
 8012c38:	bf00      	nop
  }
}
 8012c3a:	37e8      	adds	r7, #232	@ 0xe8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	effffffe 	.word	0xeffffffe

08012c44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012c4c:	bf00      	nop
 8012c4e:	370c      	adds	r7, #12
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012c60:	bf00      	nop
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012c74:	bf00      	nop
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	460b      	mov	r3, r1
 8012c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012c8c:	bf00      	nop
 8012c8e:	370c      	adds	r7, #12
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012c9c:	b092      	sub	sp, #72	@ 0x48
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	689a      	ldr	r2, [r3, #8]
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	431a      	orrs	r2, r3
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	695b      	ldr	r3, [r3, #20]
 8012cb6:	431a      	orrs	r2, r3
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	69db      	ldr	r3, [r3, #28]
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8012fc0 <UART_SetConfig+0x328>)
 8012cc8:	4013      	ands	r3, r2
 8012cca:	697a      	ldr	r2, [r7, #20]
 8012ccc:	6812      	ldr	r2, [r2, #0]
 8012cce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012cd0:	430b      	orrs	r3, r1
 8012cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012cde:	697b      	ldr	r3, [r7, #20]
 8012ce0:	68da      	ldr	r2, [r3, #12]
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	430a      	orrs	r2, r1
 8012ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	699b      	ldr	r3, [r3, #24]
 8012cee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	4ab3      	ldr	r2, [pc, #716]	@ (8012fc4 <UART_SetConfig+0x32c>)
 8012cf6:	4293      	cmp	r3, r2
 8012cf8:	d004      	beq.n	8012d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	6a1b      	ldr	r3, [r3, #32]
 8012cfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d00:	4313      	orrs	r3, r2
 8012d02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	689a      	ldr	r2, [r3, #8]
 8012d0a:	4baf      	ldr	r3, [pc, #700]	@ (8012fc8 <UART_SetConfig+0x330>)
 8012d0c:	4013      	ands	r3, r2
 8012d0e:	697a      	ldr	r2, [r7, #20]
 8012d10:	6812      	ldr	r2, [r2, #0]
 8012d12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012d14:	430b      	orrs	r3, r1
 8012d16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d1e:	f023 010f 	bic.w	r1, r3, #15
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d26:	697b      	ldr	r3, [r7, #20]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	430a      	orrs	r2, r1
 8012d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4aa6      	ldr	r2, [pc, #664]	@ (8012fcc <UART_SetConfig+0x334>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d177      	bne.n	8012e28 <UART_SetConfig+0x190>
 8012d38:	4ba5      	ldr	r3, [pc, #660]	@ (8012fd0 <UART_SetConfig+0x338>)
 8012d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012d40:	2b28      	cmp	r3, #40	@ 0x28
 8012d42:	d86d      	bhi.n	8012e20 <UART_SetConfig+0x188>
 8012d44:	a201      	add	r2, pc, #4	@ (adr r2, 8012d4c <UART_SetConfig+0xb4>)
 8012d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d4a:	bf00      	nop
 8012d4c:	08012df1 	.word	0x08012df1
 8012d50:	08012e21 	.word	0x08012e21
 8012d54:	08012e21 	.word	0x08012e21
 8012d58:	08012e21 	.word	0x08012e21
 8012d5c:	08012e21 	.word	0x08012e21
 8012d60:	08012e21 	.word	0x08012e21
 8012d64:	08012e21 	.word	0x08012e21
 8012d68:	08012e21 	.word	0x08012e21
 8012d6c:	08012df9 	.word	0x08012df9
 8012d70:	08012e21 	.word	0x08012e21
 8012d74:	08012e21 	.word	0x08012e21
 8012d78:	08012e21 	.word	0x08012e21
 8012d7c:	08012e21 	.word	0x08012e21
 8012d80:	08012e21 	.word	0x08012e21
 8012d84:	08012e21 	.word	0x08012e21
 8012d88:	08012e21 	.word	0x08012e21
 8012d8c:	08012e01 	.word	0x08012e01
 8012d90:	08012e21 	.word	0x08012e21
 8012d94:	08012e21 	.word	0x08012e21
 8012d98:	08012e21 	.word	0x08012e21
 8012d9c:	08012e21 	.word	0x08012e21
 8012da0:	08012e21 	.word	0x08012e21
 8012da4:	08012e21 	.word	0x08012e21
 8012da8:	08012e21 	.word	0x08012e21
 8012dac:	08012e09 	.word	0x08012e09
 8012db0:	08012e21 	.word	0x08012e21
 8012db4:	08012e21 	.word	0x08012e21
 8012db8:	08012e21 	.word	0x08012e21
 8012dbc:	08012e21 	.word	0x08012e21
 8012dc0:	08012e21 	.word	0x08012e21
 8012dc4:	08012e21 	.word	0x08012e21
 8012dc8:	08012e21 	.word	0x08012e21
 8012dcc:	08012e11 	.word	0x08012e11
 8012dd0:	08012e21 	.word	0x08012e21
 8012dd4:	08012e21 	.word	0x08012e21
 8012dd8:	08012e21 	.word	0x08012e21
 8012ddc:	08012e21 	.word	0x08012e21
 8012de0:	08012e21 	.word	0x08012e21
 8012de4:	08012e21 	.word	0x08012e21
 8012de8:	08012e21 	.word	0x08012e21
 8012dec:	08012e19 	.word	0x08012e19
 8012df0:	2301      	movs	r3, #1
 8012df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012df6:	e222      	b.n	801323e <UART_SetConfig+0x5a6>
 8012df8:	2304      	movs	r3, #4
 8012dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012dfe:	e21e      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e00:	2308      	movs	r3, #8
 8012e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e06:	e21a      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e08:	2310      	movs	r3, #16
 8012e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e0e:	e216      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e10:	2320      	movs	r3, #32
 8012e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e16:	e212      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e18:	2340      	movs	r3, #64	@ 0x40
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e1e:	e20e      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e20:	2380      	movs	r3, #128	@ 0x80
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e26:	e20a      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4a69      	ldr	r2, [pc, #420]	@ (8012fd4 <UART_SetConfig+0x33c>)
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d130      	bne.n	8012e94 <UART_SetConfig+0x1fc>
 8012e32:	4b67      	ldr	r3, [pc, #412]	@ (8012fd0 <UART_SetConfig+0x338>)
 8012e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e36:	f003 0307 	and.w	r3, r3, #7
 8012e3a:	2b05      	cmp	r3, #5
 8012e3c:	d826      	bhi.n	8012e8c <UART_SetConfig+0x1f4>
 8012e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8012e44 <UART_SetConfig+0x1ac>)
 8012e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e44:	08012e5d 	.word	0x08012e5d
 8012e48:	08012e65 	.word	0x08012e65
 8012e4c:	08012e6d 	.word	0x08012e6d
 8012e50:	08012e75 	.word	0x08012e75
 8012e54:	08012e7d 	.word	0x08012e7d
 8012e58:	08012e85 	.word	0x08012e85
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e62:	e1ec      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e64:	2304      	movs	r3, #4
 8012e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e6a:	e1e8      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e6c:	2308      	movs	r3, #8
 8012e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e72:	e1e4      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e74:	2310      	movs	r3, #16
 8012e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e7a:	e1e0      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e7c:	2320      	movs	r3, #32
 8012e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e82:	e1dc      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e84:	2340      	movs	r3, #64	@ 0x40
 8012e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e8a:	e1d8      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e8c:	2380      	movs	r3, #128	@ 0x80
 8012e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e92:	e1d4      	b.n	801323e <UART_SetConfig+0x5a6>
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4a4f      	ldr	r2, [pc, #316]	@ (8012fd8 <UART_SetConfig+0x340>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d130      	bne.n	8012f00 <UART_SetConfig+0x268>
 8012e9e:	4b4c      	ldr	r3, [pc, #304]	@ (8012fd0 <UART_SetConfig+0x338>)
 8012ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ea2:	f003 0307 	and.w	r3, r3, #7
 8012ea6:	2b05      	cmp	r3, #5
 8012ea8:	d826      	bhi.n	8012ef8 <UART_SetConfig+0x260>
 8012eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8012eb0 <UART_SetConfig+0x218>)
 8012eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb0:	08012ec9 	.word	0x08012ec9
 8012eb4:	08012ed1 	.word	0x08012ed1
 8012eb8:	08012ed9 	.word	0x08012ed9
 8012ebc:	08012ee1 	.word	0x08012ee1
 8012ec0:	08012ee9 	.word	0x08012ee9
 8012ec4:	08012ef1 	.word	0x08012ef1
 8012ec8:	2300      	movs	r3, #0
 8012eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ece:	e1b6      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ed0:	2304      	movs	r3, #4
 8012ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ed6:	e1b2      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ed8:	2308      	movs	r3, #8
 8012eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ede:	e1ae      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ee0:	2310      	movs	r3, #16
 8012ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ee6:	e1aa      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ee8:	2320      	movs	r3, #32
 8012eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eee:	e1a6      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ef0:	2340      	movs	r3, #64	@ 0x40
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ef6:	e1a2      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ef8:	2380      	movs	r3, #128	@ 0x80
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012efe:	e19e      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4a35      	ldr	r2, [pc, #212]	@ (8012fdc <UART_SetConfig+0x344>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d130      	bne.n	8012f6c <UART_SetConfig+0x2d4>
 8012f0a:	4b31      	ldr	r3, [pc, #196]	@ (8012fd0 <UART_SetConfig+0x338>)
 8012f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f0e:	f003 0307 	and.w	r3, r3, #7
 8012f12:	2b05      	cmp	r3, #5
 8012f14:	d826      	bhi.n	8012f64 <UART_SetConfig+0x2cc>
 8012f16:	a201      	add	r2, pc, #4	@ (adr r2, 8012f1c <UART_SetConfig+0x284>)
 8012f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f1c:	08012f35 	.word	0x08012f35
 8012f20:	08012f3d 	.word	0x08012f3d
 8012f24:	08012f45 	.word	0x08012f45
 8012f28:	08012f4d 	.word	0x08012f4d
 8012f2c:	08012f55 	.word	0x08012f55
 8012f30:	08012f5d 	.word	0x08012f5d
 8012f34:	2300      	movs	r3, #0
 8012f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f3a:	e180      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f3c:	2304      	movs	r3, #4
 8012f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f42:	e17c      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f44:	2308      	movs	r3, #8
 8012f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f4a:	e178      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f4c:	2310      	movs	r3, #16
 8012f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f52:	e174      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f54:	2320      	movs	r3, #32
 8012f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f5a:	e170      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f5c:	2340      	movs	r3, #64	@ 0x40
 8012f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f62:	e16c      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f64:	2380      	movs	r3, #128	@ 0x80
 8012f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6a:	e168      	b.n	801323e <UART_SetConfig+0x5a6>
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	4a1b      	ldr	r2, [pc, #108]	@ (8012fe0 <UART_SetConfig+0x348>)
 8012f72:	4293      	cmp	r3, r2
 8012f74:	d142      	bne.n	8012ffc <UART_SetConfig+0x364>
 8012f76:	4b16      	ldr	r3, [pc, #88]	@ (8012fd0 <UART_SetConfig+0x338>)
 8012f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f7a:	f003 0307 	and.w	r3, r3, #7
 8012f7e:	2b05      	cmp	r3, #5
 8012f80:	d838      	bhi.n	8012ff4 <UART_SetConfig+0x35c>
 8012f82:	a201      	add	r2, pc, #4	@ (adr r2, 8012f88 <UART_SetConfig+0x2f0>)
 8012f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f88:	08012fa1 	.word	0x08012fa1
 8012f8c:	08012fa9 	.word	0x08012fa9
 8012f90:	08012fb1 	.word	0x08012fb1
 8012f94:	08012fb9 	.word	0x08012fb9
 8012f98:	08012fe5 	.word	0x08012fe5
 8012f9c:	08012fed 	.word	0x08012fed
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fa6:	e14a      	b.n	801323e <UART_SetConfig+0x5a6>
 8012fa8:	2304      	movs	r3, #4
 8012faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fae:	e146      	b.n	801323e <UART_SetConfig+0x5a6>
 8012fb0:	2308      	movs	r3, #8
 8012fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fb6:	e142      	b.n	801323e <UART_SetConfig+0x5a6>
 8012fb8:	2310      	movs	r3, #16
 8012fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fbe:	e13e      	b.n	801323e <UART_SetConfig+0x5a6>
 8012fc0:	cfff69f3 	.word	0xcfff69f3
 8012fc4:	58000c00 	.word	0x58000c00
 8012fc8:	11fff4ff 	.word	0x11fff4ff
 8012fcc:	40011000 	.word	0x40011000
 8012fd0:	58024400 	.word	0x58024400
 8012fd4:	40004400 	.word	0x40004400
 8012fd8:	40004800 	.word	0x40004800
 8012fdc:	40004c00 	.word	0x40004c00
 8012fe0:	40005000 	.word	0x40005000
 8012fe4:	2320      	movs	r3, #32
 8012fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fea:	e128      	b.n	801323e <UART_SetConfig+0x5a6>
 8012fec:	2340      	movs	r3, #64	@ 0x40
 8012fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ff2:	e124      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ff4:	2380      	movs	r3, #128	@ 0x80
 8012ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ffa:	e120      	b.n	801323e <UART_SetConfig+0x5a6>
 8012ffc:	697b      	ldr	r3, [r7, #20]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	4acb      	ldr	r2, [pc, #812]	@ (8013330 <UART_SetConfig+0x698>)
 8013002:	4293      	cmp	r3, r2
 8013004:	d176      	bne.n	80130f4 <UART_SetConfig+0x45c>
 8013006:	4bcb      	ldr	r3, [pc, #812]	@ (8013334 <UART_SetConfig+0x69c>)
 8013008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801300a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801300e:	2b28      	cmp	r3, #40	@ 0x28
 8013010:	d86c      	bhi.n	80130ec <UART_SetConfig+0x454>
 8013012:	a201      	add	r2, pc, #4	@ (adr r2, 8013018 <UART_SetConfig+0x380>)
 8013014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013018:	080130bd 	.word	0x080130bd
 801301c:	080130ed 	.word	0x080130ed
 8013020:	080130ed 	.word	0x080130ed
 8013024:	080130ed 	.word	0x080130ed
 8013028:	080130ed 	.word	0x080130ed
 801302c:	080130ed 	.word	0x080130ed
 8013030:	080130ed 	.word	0x080130ed
 8013034:	080130ed 	.word	0x080130ed
 8013038:	080130c5 	.word	0x080130c5
 801303c:	080130ed 	.word	0x080130ed
 8013040:	080130ed 	.word	0x080130ed
 8013044:	080130ed 	.word	0x080130ed
 8013048:	080130ed 	.word	0x080130ed
 801304c:	080130ed 	.word	0x080130ed
 8013050:	080130ed 	.word	0x080130ed
 8013054:	080130ed 	.word	0x080130ed
 8013058:	080130cd 	.word	0x080130cd
 801305c:	080130ed 	.word	0x080130ed
 8013060:	080130ed 	.word	0x080130ed
 8013064:	080130ed 	.word	0x080130ed
 8013068:	080130ed 	.word	0x080130ed
 801306c:	080130ed 	.word	0x080130ed
 8013070:	080130ed 	.word	0x080130ed
 8013074:	080130ed 	.word	0x080130ed
 8013078:	080130d5 	.word	0x080130d5
 801307c:	080130ed 	.word	0x080130ed
 8013080:	080130ed 	.word	0x080130ed
 8013084:	080130ed 	.word	0x080130ed
 8013088:	080130ed 	.word	0x080130ed
 801308c:	080130ed 	.word	0x080130ed
 8013090:	080130ed 	.word	0x080130ed
 8013094:	080130ed 	.word	0x080130ed
 8013098:	080130dd 	.word	0x080130dd
 801309c:	080130ed 	.word	0x080130ed
 80130a0:	080130ed 	.word	0x080130ed
 80130a4:	080130ed 	.word	0x080130ed
 80130a8:	080130ed 	.word	0x080130ed
 80130ac:	080130ed 	.word	0x080130ed
 80130b0:	080130ed 	.word	0x080130ed
 80130b4:	080130ed 	.word	0x080130ed
 80130b8:	080130e5 	.word	0x080130e5
 80130bc:	2301      	movs	r3, #1
 80130be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130c2:	e0bc      	b.n	801323e <UART_SetConfig+0x5a6>
 80130c4:	2304      	movs	r3, #4
 80130c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ca:	e0b8      	b.n	801323e <UART_SetConfig+0x5a6>
 80130cc:	2308      	movs	r3, #8
 80130ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130d2:	e0b4      	b.n	801323e <UART_SetConfig+0x5a6>
 80130d4:	2310      	movs	r3, #16
 80130d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130da:	e0b0      	b.n	801323e <UART_SetConfig+0x5a6>
 80130dc:	2320      	movs	r3, #32
 80130de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130e2:	e0ac      	b.n	801323e <UART_SetConfig+0x5a6>
 80130e4:	2340      	movs	r3, #64	@ 0x40
 80130e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ea:	e0a8      	b.n	801323e <UART_SetConfig+0x5a6>
 80130ec:	2380      	movs	r3, #128	@ 0x80
 80130ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130f2:	e0a4      	b.n	801323e <UART_SetConfig+0x5a6>
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	4a8f      	ldr	r2, [pc, #572]	@ (8013338 <UART_SetConfig+0x6a0>)
 80130fa:	4293      	cmp	r3, r2
 80130fc:	d130      	bne.n	8013160 <UART_SetConfig+0x4c8>
 80130fe:	4b8d      	ldr	r3, [pc, #564]	@ (8013334 <UART_SetConfig+0x69c>)
 8013100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013102:	f003 0307 	and.w	r3, r3, #7
 8013106:	2b05      	cmp	r3, #5
 8013108:	d826      	bhi.n	8013158 <UART_SetConfig+0x4c0>
 801310a:	a201      	add	r2, pc, #4	@ (adr r2, 8013110 <UART_SetConfig+0x478>)
 801310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013110:	08013129 	.word	0x08013129
 8013114:	08013131 	.word	0x08013131
 8013118:	08013139 	.word	0x08013139
 801311c:	08013141 	.word	0x08013141
 8013120:	08013149 	.word	0x08013149
 8013124:	08013151 	.word	0x08013151
 8013128:	2300      	movs	r3, #0
 801312a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801312e:	e086      	b.n	801323e <UART_SetConfig+0x5a6>
 8013130:	2304      	movs	r3, #4
 8013132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013136:	e082      	b.n	801323e <UART_SetConfig+0x5a6>
 8013138:	2308      	movs	r3, #8
 801313a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801313e:	e07e      	b.n	801323e <UART_SetConfig+0x5a6>
 8013140:	2310      	movs	r3, #16
 8013142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013146:	e07a      	b.n	801323e <UART_SetConfig+0x5a6>
 8013148:	2320      	movs	r3, #32
 801314a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801314e:	e076      	b.n	801323e <UART_SetConfig+0x5a6>
 8013150:	2340      	movs	r3, #64	@ 0x40
 8013152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013156:	e072      	b.n	801323e <UART_SetConfig+0x5a6>
 8013158:	2380      	movs	r3, #128	@ 0x80
 801315a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801315e:	e06e      	b.n	801323e <UART_SetConfig+0x5a6>
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4a75      	ldr	r2, [pc, #468]	@ (801333c <UART_SetConfig+0x6a4>)
 8013166:	4293      	cmp	r3, r2
 8013168:	d130      	bne.n	80131cc <UART_SetConfig+0x534>
 801316a:	4b72      	ldr	r3, [pc, #456]	@ (8013334 <UART_SetConfig+0x69c>)
 801316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801316e:	f003 0307 	and.w	r3, r3, #7
 8013172:	2b05      	cmp	r3, #5
 8013174:	d826      	bhi.n	80131c4 <UART_SetConfig+0x52c>
 8013176:	a201      	add	r2, pc, #4	@ (adr r2, 801317c <UART_SetConfig+0x4e4>)
 8013178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801317c:	08013195 	.word	0x08013195
 8013180:	0801319d 	.word	0x0801319d
 8013184:	080131a5 	.word	0x080131a5
 8013188:	080131ad 	.word	0x080131ad
 801318c:	080131b5 	.word	0x080131b5
 8013190:	080131bd 	.word	0x080131bd
 8013194:	2300      	movs	r3, #0
 8013196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801319a:	e050      	b.n	801323e <UART_SetConfig+0x5a6>
 801319c:	2304      	movs	r3, #4
 801319e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131a2:	e04c      	b.n	801323e <UART_SetConfig+0x5a6>
 80131a4:	2308      	movs	r3, #8
 80131a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131aa:	e048      	b.n	801323e <UART_SetConfig+0x5a6>
 80131ac:	2310      	movs	r3, #16
 80131ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131b2:	e044      	b.n	801323e <UART_SetConfig+0x5a6>
 80131b4:	2320      	movs	r3, #32
 80131b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ba:	e040      	b.n	801323e <UART_SetConfig+0x5a6>
 80131bc:	2340      	movs	r3, #64	@ 0x40
 80131be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131c2:	e03c      	b.n	801323e <UART_SetConfig+0x5a6>
 80131c4:	2380      	movs	r3, #128	@ 0x80
 80131c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ca:	e038      	b.n	801323e <UART_SetConfig+0x5a6>
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4a5b      	ldr	r2, [pc, #364]	@ (8013340 <UART_SetConfig+0x6a8>)
 80131d2:	4293      	cmp	r3, r2
 80131d4:	d130      	bne.n	8013238 <UART_SetConfig+0x5a0>
 80131d6:	4b57      	ldr	r3, [pc, #348]	@ (8013334 <UART_SetConfig+0x69c>)
 80131d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131da:	f003 0307 	and.w	r3, r3, #7
 80131de:	2b05      	cmp	r3, #5
 80131e0:	d826      	bhi.n	8013230 <UART_SetConfig+0x598>
 80131e2:	a201      	add	r2, pc, #4	@ (adr r2, 80131e8 <UART_SetConfig+0x550>)
 80131e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131e8:	08013201 	.word	0x08013201
 80131ec:	08013209 	.word	0x08013209
 80131f0:	08013211 	.word	0x08013211
 80131f4:	08013219 	.word	0x08013219
 80131f8:	08013221 	.word	0x08013221
 80131fc:	08013229 	.word	0x08013229
 8013200:	2302      	movs	r3, #2
 8013202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013206:	e01a      	b.n	801323e <UART_SetConfig+0x5a6>
 8013208:	2304      	movs	r3, #4
 801320a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801320e:	e016      	b.n	801323e <UART_SetConfig+0x5a6>
 8013210:	2308      	movs	r3, #8
 8013212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013216:	e012      	b.n	801323e <UART_SetConfig+0x5a6>
 8013218:	2310      	movs	r3, #16
 801321a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801321e:	e00e      	b.n	801323e <UART_SetConfig+0x5a6>
 8013220:	2320      	movs	r3, #32
 8013222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013226:	e00a      	b.n	801323e <UART_SetConfig+0x5a6>
 8013228:	2340      	movs	r3, #64	@ 0x40
 801322a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801322e:	e006      	b.n	801323e <UART_SetConfig+0x5a6>
 8013230:	2380      	movs	r3, #128	@ 0x80
 8013232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013236:	e002      	b.n	801323e <UART_SetConfig+0x5a6>
 8013238:	2380      	movs	r3, #128	@ 0x80
 801323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	4a3f      	ldr	r2, [pc, #252]	@ (8013340 <UART_SetConfig+0x6a8>)
 8013244:	4293      	cmp	r3, r2
 8013246:	f040 80f8 	bne.w	801343a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801324a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801324e:	2b20      	cmp	r3, #32
 8013250:	dc46      	bgt.n	80132e0 <UART_SetConfig+0x648>
 8013252:	2b02      	cmp	r3, #2
 8013254:	f2c0 8082 	blt.w	801335c <UART_SetConfig+0x6c4>
 8013258:	3b02      	subs	r3, #2
 801325a:	2b1e      	cmp	r3, #30
 801325c:	d87e      	bhi.n	801335c <UART_SetConfig+0x6c4>
 801325e:	a201      	add	r2, pc, #4	@ (adr r2, 8013264 <UART_SetConfig+0x5cc>)
 8013260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013264:	080132e7 	.word	0x080132e7
 8013268:	0801335d 	.word	0x0801335d
 801326c:	080132ef 	.word	0x080132ef
 8013270:	0801335d 	.word	0x0801335d
 8013274:	0801335d 	.word	0x0801335d
 8013278:	0801335d 	.word	0x0801335d
 801327c:	080132ff 	.word	0x080132ff
 8013280:	0801335d 	.word	0x0801335d
 8013284:	0801335d 	.word	0x0801335d
 8013288:	0801335d 	.word	0x0801335d
 801328c:	0801335d 	.word	0x0801335d
 8013290:	0801335d 	.word	0x0801335d
 8013294:	0801335d 	.word	0x0801335d
 8013298:	0801335d 	.word	0x0801335d
 801329c:	0801330f 	.word	0x0801330f
 80132a0:	0801335d 	.word	0x0801335d
 80132a4:	0801335d 	.word	0x0801335d
 80132a8:	0801335d 	.word	0x0801335d
 80132ac:	0801335d 	.word	0x0801335d
 80132b0:	0801335d 	.word	0x0801335d
 80132b4:	0801335d 	.word	0x0801335d
 80132b8:	0801335d 	.word	0x0801335d
 80132bc:	0801335d 	.word	0x0801335d
 80132c0:	0801335d 	.word	0x0801335d
 80132c4:	0801335d 	.word	0x0801335d
 80132c8:	0801335d 	.word	0x0801335d
 80132cc:	0801335d 	.word	0x0801335d
 80132d0:	0801335d 	.word	0x0801335d
 80132d4:	0801335d 	.word	0x0801335d
 80132d8:	0801335d 	.word	0x0801335d
 80132dc:	0801334f 	.word	0x0801334f
 80132e0:	2b40      	cmp	r3, #64	@ 0x40
 80132e2:	d037      	beq.n	8013354 <UART_SetConfig+0x6bc>
 80132e4:	e03a      	b.n	801335c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80132e6:	f7fd fa8d 	bl	8010804 <HAL_RCCEx_GetD3PCLK1Freq>
 80132ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80132ec:	e03c      	b.n	8013368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80132ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7fd fa9c 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80132f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80132fc:	e034      	b.n	8013368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80132fe:	f107 0318 	add.w	r3, r7, #24
 8013302:	4618      	mov	r0, r3
 8013304:	f7fd fbe8 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801330c:	e02c      	b.n	8013368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801330e:	4b09      	ldr	r3, [pc, #36]	@ (8013334 <UART_SetConfig+0x69c>)
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	f003 0320 	and.w	r3, r3, #32
 8013316:	2b00      	cmp	r3, #0
 8013318:	d016      	beq.n	8013348 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801331a:	4b06      	ldr	r3, [pc, #24]	@ (8013334 <UART_SetConfig+0x69c>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	08db      	lsrs	r3, r3, #3
 8013320:	f003 0303 	and.w	r3, r3, #3
 8013324:	4a07      	ldr	r2, [pc, #28]	@ (8013344 <UART_SetConfig+0x6ac>)
 8013326:	fa22 f303 	lsr.w	r3, r2, r3
 801332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801332c:	e01c      	b.n	8013368 <UART_SetConfig+0x6d0>
 801332e:	bf00      	nop
 8013330:	40011400 	.word	0x40011400
 8013334:	58024400 	.word	0x58024400
 8013338:	40007800 	.word	0x40007800
 801333c:	40007c00 	.word	0x40007c00
 8013340:	58000c00 	.word	0x58000c00
 8013344:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013348:	4b9d      	ldr	r3, [pc, #628]	@ (80135c0 <UART_SetConfig+0x928>)
 801334a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801334c:	e00c      	b.n	8013368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801334e:	4b9d      	ldr	r3, [pc, #628]	@ (80135c4 <UART_SetConfig+0x92c>)
 8013350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013352:	e009      	b.n	8013368 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801335a:	e005      	b.n	8013368 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801335c:	2300      	movs	r3, #0
 801335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013360:	2301      	movs	r3, #1
 8013362:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013366:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801336a:	2b00      	cmp	r3, #0
 801336c:	f000 81de 	beq.w	801372c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013374:	4a94      	ldr	r2, [pc, #592]	@ (80135c8 <UART_SetConfig+0x930>)
 8013376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801337a:	461a      	mov	r2, r3
 801337c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801337e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013382:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	685a      	ldr	r2, [r3, #4]
 8013388:	4613      	mov	r3, r2
 801338a:	005b      	lsls	r3, r3, #1
 801338c:	4413      	add	r3, r2
 801338e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013390:	429a      	cmp	r2, r3
 8013392:	d305      	bcc.n	80133a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	685b      	ldr	r3, [r3, #4]
 8013398:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801339a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801339c:	429a      	cmp	r2, r3
 801339e:	d903      	bls.n	80133a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80133a0:	2301      	movs	r3, #1
 80133a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80133a6:	e1c1      	b.n	801372c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133aa:	2200      	movs	r2, #0
 80133ac:	60bb      	str	r3, [r7, #8]
 80133ae:	60fa      	str	r2, [r7, #12]
 80133b0:	697b      	ldr	r3, [r7, #20]
 80133b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133b4:	4a84      	ldr	r2, [pc, #528]	@ (80135c8 <UART_SetConfig+0x930>)
 80133b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	2200      	movs	r2, #0
 80133be:	603b      	str	r3, [r7, #0]
 80133c0:	607a      	str	r2, [r7, #4]
 80133c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80133ca:	f7ec ffe1 	bl	8000390 <__aeabi_uldivmod>
 80133ce:	4602      	mov	r2, r0
 80133d0:	460b      	mov	r3, r1
 80133d2:	4610      	mov	r0, r2
 80133d4:	4619      	mov	r1, r3
 80133d6:	f04f 0200 	mov.w	r2, #0
 80133da:	f04f 0300 	mov.w	r3, #0
 80133de:	020b      	lsls	r3, r1, #8
 80133e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80133e4:	0202      	lsls	r2, r0, #8
 80133e6:	6979      	ldr	r1, [r7, #20]
 80133e8:	6849      	ldr	r1, [r1, #4]
 80133ea:	0849      	lsrs	r1, r1, #1
 80133ec:	2000      	movs	r0, #0
 80133ee:	460c      	mov	r4, r1
 80133f0:	4605      	mov	r5, r0
 80133f2:	eb12 0804 	adds.w	r8, r2, r4
 80133f6:	eb43 0905 	adc.w	r9, r3, r5
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	2200      	movs	r2, #0
 8013400:	469a      	mov	sl, r3
 8013402:	4693      	mov	fp, r2
 8013404:	4652      	mov	r2, sl
 8013406:	465b      	mov	r3, fp
 8013408:	4640      	mov	r0, r8
 801340a:	4649      	mov	r1, r9
 801340c:	f7ec ffc0 	bl	8000390 <__aeabi_uldivmod>
 8013410:	4602      	mov	r2, r0
 8013412:	460b      	mov	r3, r1
 8013414:	4613      	mov	r3, r2
 8013416:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801341e:	d308      	bcc.n	8013432 <UART_SetConfig+0x79a>
 8013420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013426:	d204      	bcs.n	8013432 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801342e:	60da      	str	r2, [r3, #12]
 8013430:	e17c      	b.n	801372c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8013432:	2301      	movs	r3, #1
 8013434:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013438:	e178      	b.n	801372c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	69db      	ldr	r3, [r3, #28]
 801343e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013442:	f040 80c5 	bne.w	80135d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013446:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801344a:	2b20      	cmp	r3, #32
 801344c:	dc48      	bgt.n	80134e0 <UART_SetConfig+0x848>
 801344e:	2b00      	cmp	r3, #0
 8013450:	db7b      	blt.n	801354a <UART_SetConfig+0x8b2>
 8013452:	2b20      	cmp	r3, #32
 8013454:	d879      	bhi.n	801354a <UART_SetConfig+0x8b2>
 8013456:	a201      	add	r2, pc, #4	@ (adr r2, 801345c <UART_SetConfig+0x7c4>)
 8013458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801345c:	080134e7 	.word	0x080134e7
 8013460:	080134ef 	.word	0x080134ef
 8013464:	0801354b 	.word	0x0801354b
 8013468:	0801354b 	.word	0x0801354b
 801346c:	080134f7 	.word	0x080134f7
 8013470:	0801354b 	.word	0x0801354b
 8013474:	0801354b 	.word	0x0801354b
 8013478:	0801354b 	.word	0x0801354b
 801347c:	08013507 	.word	0x08013507
 8013480:	0801354b 	.word	0x0801354b
 8013484:	0801354b 	.word	0x0801354b
 8013488:	0801354b 	.word	0x0801354b
 801348c:	0801354b 	.word	0x0801354b
 8013490:	0801354b 	.word	0x0801354b
 8013494:	0801354b 	.word	0x0801354b
 8013498:	0801354b 	.word	0x0801354b
 801349c:	08013517 	.word	0x08013517
 80134a0:	0801354b 	.word	0x0801354b
 80134a4:	0801354b 	.word	0x0801354b
 80134a8:	0801354b 	.word	0x0801354b
 80134ac:	0801354b 	.word	0x0801354b
 80134b0:	0801354b 	.word	0x0801354b
 80134b4:	0801354b 	.word	0x0801354b
 80134b8:	0801354b 	.word	0x0801354b
 80134bc:	0801354b 	.word	0x0801354b
 80134c0:	0801354b 	.word	0x0801354b
 80134c4:	0801354b 	.word	0x0801354b
 80134c8:	0801354b 	.word	0x0801354b
 80134cc:	0801354b 	.word	0x0801354b
 80134d0:	0801354b 	.word	0x0801354b
 80134d4:	0801354b 	.word	0x0801354b
 80134d8:	0801354b 	.word	0x0801354b
 80134dc:	0801353d 	.word	0x0801353d
 80134e0:	2b40      	cmp	r3, #64	@ 0x40
 80134e2:	d02e      	beq.n	8013542 <UART_SetConfig+0x8aa>
 80134e4:	e031      	b.n	801354a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80134e6:	f7fb f9d7 	bl	800e898 <HAL_RCC_GetPCLK1Freq>
 80134ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80134ec:	e033      	b.n	8013556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80134ee:	f7fb f9e9 	bl	800e8c4 <HAL_RCC_GetPCLK2Freq>
 80134f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80134f4:	e02f      	b.n	8013556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7fd f998 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013504:	e027      	b.n	8013556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013506:	f107 0318 	add.w	r3, r7, #24
 801350a:	4618      	mov	r0, r3
 801350c:	f7fd fae4 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013510:	69fb      	ldr	r3, [r7, #28]
 8013512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013514:	e01f      	b.n	8013556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013516:	4b2d      	ldr	r3, [pc, #180]	@ (80135cc <UART_SetConfig+0x934>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f003 0320 	and.w	r3, r3, #32
 801351e:	2b00      	cmp	r3, #0
 8013520:	d009      	beq.n	8013536 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013522:	4b2a      	ldr	r3, [pc, #168]	@ (80135cc <UART_SetConfig+0x934>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	08db      	lsrs	r3, r3, #3
 8013528:	f003 0303 	and.w	r3, r3, #3
 801352c:	4a24      	ldr	r2, [pc, #144]	@ (80135c0 <UART_SetConfig+0x928>)
 801352e:	fa22 f303 	lsr.w	r3, r2, r3
 8013532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013534:	e00f      	b.n	8013556 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013536:	4b22      	ldr	r3, [pc, #136]	@ (80135c0 <UART_SetConfig+0x928>)
 8013538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801353a:	e00c      	b.n	8013556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801353c:	4b21      	ldr	r3, [pc, #132]	@ (80135c4 <UART_SetConfig+0x92c>)
 801353e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013540:	e009      	b.n	8013556 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013548:	e005      	b.n	8013556 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801354a:	2300      	movs	r3, #0
 801354c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801354e:	2301      	movs	r3, #1
 8013550:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013554:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013558:	2b00      	cmp	r3, #0
 801355a:	f000 80e7 	beq.w	801372c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013562:	4a19      	ldr	r2, [pc, #100]	@ (80135c8 <UART_SetConfig+0x930>)
 8013564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013568:	461a      	mov	r2, r3
 801356a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801356c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013570:	005a      	lsls	r2, r3, #1
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	085b      	lsrs	r3, r3, #1
 8013578:	441a      	add	r2, r3
 801357a:	697b      	ldr	r3, [r7, #20]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013582:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013586:	2b0f      	cmp	r3, #15
 8013588:	d916      	bls.n	80135b8 <UART_SetConfig+0x920>
 801358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801358c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013590:	d212      	bcs.n	80135b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013594:	b29b      	uxth	r3, r3
 8013596:	f023 030f 	bic.w	r3, r3, #15
 801359a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801359c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801359e:	085b      	lsrs	r3, r3, #1
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	f003 0307 	and.w	r3, r3, #7
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80135aa:	4313      	orrs	r3, r2
 80135ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80135b4:	60da      	str	r2, [r3, #12]
 80135b6:	e0b9      	b.n	801372c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80135b8:	2301      	movs	r3, #1
 80135ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80135be:	e0b5      	b.n	801372c <UART_SetConfig+0xa94>
 80135c0:	03d09000 	.word	0x03d09000
 80135c4:	003d0900 	.word	0x003d0900
 80135c8:	0801a1d8 	.word	0x0801a1d8
 80135cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80135d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80135d4:	2b20      	cmp	r3, #32
 80135d6:	dc49      	bgt.n	801366c <UART_SetConfig+0x9d4>
 80135d8:	2b00      	cmp	r3, #0
 80135da:	db7c      	blt.n	80136d6 <UART_SetConfig+0xa3e>
 80135dc:	2b20      	cmp	r3, #32
 80135de:	d87a      	bhi.n	80136d6 <UART_SetConfig+0xa3e>
 80135e0:	a201      	add	r2, pc, #4	@ (adr r2, 80135e8 <UART_SetConfig+0x950>)
 80135e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e6:	bf00      	nop
 80135e8:	08013673 	.word	0x08013673
 80135ec:	0801367b 	.word	0x0801367b
 80135f0:	080136d7 	.word	0x080136d7
 80135f4:	080136d7 	.word	0x080136d7
 80135f8:	08013683 	.word	0x08013683
 80135fc:	080136d7 	.word	0x080136d7
 8013600:	080136d7 	.word	0x080136d7
 8013604:	080136d7 	.word	0x080136d7
 8013608:	08013693 	.word	0x08013693
 801360c:	080136d7 	.word	0x080136d7
 8013610:	080136d7 	.word	0x080136d7
 8013614:	080136d7 	.word	0x080136d7
 8013618:	080136d7 	.word	0x080136d7
 801361c:	080136d7 	.word	0x080136d7
 8013620:	080136d7 	.word	0x080136d7
 8013624:	080136d7 	.word	0x080136d7
 8013628:	080136a3 	.word	0x080136a3
 801362c:	080136d7 	.word	0x080136d7
 8013630:	080136d7 	.word	0x080136d7
 8013634:	080136d7 	.word	0x080136d7
 8013638:	080136d7 	.word	0x080136d7
 801363c:	080136d7 	.word	0x080136d7
 8013640:	080136d7 	.word	0x080136d7
 8013644:	080136d7 	.word	0x080136d7
 8013648:	080136d7 	.word	0x080136d7
 801364c:	080136d7 	.word	0x080136d7
 8013650:	080136d7 	.word	0x080136d7
 8013654:	080136d7 	.word	0x080136d7
 8013658:	080136d7 	.word	0x080136d7
 801365c:	080136d7 	.word	0x080136d7
 8013660:	080136d7 	.word	0x080136d7
 8013664:	080136d7 	.word	0x080136d7
 8013668:	080136c9 	.word	0x080136c9
 801366c:	2b40      	cmp	r3, #64	@ 0x40
 801366e:	d02e      	beq.n	80136ce <UART_SetConfig+0xa36>
 8013670:	e031      	b.n	80136d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013672:	f7fb f911 	bl	800e898 <HAL_RCC_GetPCLK1Freq>
 8013676:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013678:	e033      	b.n	80136e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801367a:	f7fb f923 	bl	800e8c4 <HAL_RCC_GetPCLK2Freq>
 801367e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013680:	e02f      	b.n	80136e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013686:	4618      	mov	r0, r3
 8013688:	f7fd f8d2 	bl	8010830 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801368e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013690:	e027      	b.n	80136e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013692:	f107 0318 	add.w	r3, r7, #24
 8013696:	4618      	mov	r0, r3
 8013698:	f7fd fa1e 	bl	8010ad8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136a0:	e01f      	b.n	80136e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136a2:	4b2d      	ldr	r3, [pc, #180]	@ (8013758 <UART_SetConfig+0xac0>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f003 0320 	and.w	r3, r3, #32
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d009      	beq.n	80136c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80136ae:	4b2a      	ldr	r3, [pc, #168]	@ (8013758 <UART_SetConfig+0xac0>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	08db      	lsrs	r3, r3, #3
 80136b4:	f003 0303 	and.w	r3, r3, #3
 80136b8:	4a28      	ldr	r2, [pc, #160]	@ (801375c <UART_SetConfig+0xac4>)
 80136ba:	fa22 f303 	lsr.w	r3, r2, r3
 80136be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80136c0:	e00f      	b.n	80136e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80136c2:	4b26      	ldr	r3, [pc, #152]	@ (801375c <UART_SetConfig+0xac4>)
 80136c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136c6:	e00c      	b.n	80136e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136c8:	4b25      	ldr	r3, [pc, #148]	@ (8013760 <UART_SetConfig+0xac8>)
 80136ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136cc:	e009      	b.n	80136e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80136d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136d4:	e005      	b.n	80136e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80136d6:	2300      	movs	r3, #0
 80136d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80136da:	2301      	movs	r3, #1
 80136dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80136e0:	bf00      	nop
    }

    if (pclk != 0U)
 80136e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d021      	beq.n	801372c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136ec:	4a1d      	ldr	r2, [pc, #116]	@ (8013764 <UART_SetConfig+0xacc>)
 80136ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136f2:	461a      	mov	r2, r3
 80136f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	685b      	ldr	r3, [r3, #4]
 80136fe:	085b      	lsrs	r3, r3, #1
 8013700:	441a      	add	r2, r3
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	685b      	ldr	r3, [r3, #4]
 8013706:	fbb2 f3f3 	udiv	r3, r2, r3
 801370a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801370c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801370e:	2b0f      	cmp	r3, #15
 8013710:	d909      	bls.n	8013726 <UART_SetConfig+0xa8e>
 8013712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013718:	d205      	bcs.n	8013726 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801371a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801371c:	b29a      	uxth	r2, r3
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	60da      	str	r2, [r3, #12]
 8013724:	e002      	b.n	801372c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013726:	2301      	movs	r3, #1
 8013728:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	2201      	movs	r2, #1
 8013730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	2201      	movs	r2, #1
 8013738:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	2200      	movs	r2, #0
 8013740:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8013742:	697b      	ldr	r3, [r7, #20]
 8013744:	2200      	movs	r2, #0
 8013746:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013748:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801374c:	4618      	mov	r0, r3
 801374e:	3748      	adds	r7, #72	@ 0x48
 8013750:	46bd      	mov	sp, r7
 8013752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013756:	bf00      	nop
 8013758:	58024400 	.word	0x58024400
 801375c:	03d09000 	.word	0x03d09000
 8013760:	003d0900 	.word	0x003d0900
 8013764:	0801a1d8 	.word	0x0801a1d8

08013768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013768:	b480      	push	{r7}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013774:	f003 0308 	and.w	r3, r3, #8
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00a      	beq.n	8013792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	430a      	orrs	r2, r1
 8013790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013796:	f003 0301 	and.w	r3, r3, #1
 801379a:	2b00      	cmp	r3, #0
 801379c:	d00a      	beq.n	80137b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	685b      	ldr	r3, [r3, #4]
 80137a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	430a      	orrs	r2, r1
 80137b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137b8:	f003 0302 	and.w	r3, r3, #2
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d00a      	beq.n	80137d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	430a      	orrs	r2, r1
 80137d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137da:	f003 0304 	and.w	r3, r3, #4
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00a      	beq.n	80137f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	685b      	ldr	r3, [r3, #4]
 80137e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	430a      	orrs	r2, r1
 80137f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137fc:	f003 0310 	and.w	r3, r3, #16
 8013800:	2b00      	cmp	r3, #0
 8013802:	d00a      	beq.n	801381a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	689b      	ldr	r3, [r3, #8]
 801380a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	430a      	orrs	r2, r1
 8013818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801381e:	f003 0320 	and.w	r3, r3, #32
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00a      	beq.n	801383c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	689b      	ldr	r3, [r3, #8]
 801382c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	430a      	orrs	r2, r1
 801383a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013844:	2b00      	cmp	r3, #0
 8013846:	d01a      	beq.n	801387e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	430a      	orrs	r2, r1
 801385c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013866:	d10a      	bne.n	801387e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	685b      	ldr	r3, [r3, #4]
 801386e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	430a      	orrs	r2, r1
 801387c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013886:	2b00      	cmp	r3, #0
 8013888:	d00a      	beq.n	80138a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	430a      	orrs	r2, r1
 801389e:	605a      	str	r2, [r3, #4]
  }
}
 80138a0:	bf00      	nop
 80138a2:	370c      	adds	r7, #12
 80138a4:	46bd      	mov	sp, r7
 80138a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138aa:	4770      	bx	lr

080138ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b098      	sub	sp, #96	@ 0x60
 80138b0:	af02      	add	r7, sp, #8
 80138b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2200      	movs	r2, #0
 80138b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80138bc:	f7ef f9b0 	bl	8002c20 <HAL_GetTick>
 80138c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f003 0308 	and.w	r3, r3, #8
 80138cc:	2b08      	cmp	r3, #8
 80138ce:	d12f      	bne.n	8013930 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80138d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138d8:	2200      	movs	r2, #0
 80138da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f000 f88e 	bl	8013a00 <UART_WaitOnFlagUntilTimeout>
 80138e4:	4603      	mov	r3, r0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d022      	beq.n	8013930 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f2:	e853 3f00 	ldrex	r3, [r3]
 80138f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80138f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80138fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	461a      	mov	r2, r3
 8013906:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013908:	647b      	str	r3, [r7, #68]	@ 0x44
 801390a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801390c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801390e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013910:	e841 2300 	strex	r3, r2, [r1]
 8013914:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013918:	2b00      	cmp	r3, #0
 801391a:	d1e6      	bne.n	80138ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2220      	movs	r2, #32
 8013920:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2200      	movs	r2, #0
 8013928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801392c:	2303      	movs	r3, #3
 801392e:	e063      	b.n	80139f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	f003 0304 	and.w	r3, r3, #4
 801393a:	2b04      	cmp	r3, #4
 801393c:	d149      	bne.n	80139d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801393e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013942:	9300      	str	r3, [sp, #0]
 8013944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013946:	2200      	movs	r2, #0
 8013948:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f000 f857 	bl	8013a00 <UART_WaitOnFlagUntilTimeout>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d03c      	beq.n	80139d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801395e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013960:	e853 3f00 	ldrex	r3, [r3]
 8013964:	623b      	str	r3, [r7, #32]
   return(result);
 8013966:	6a3b      	ldr	r3, [r7, #32]
 8013968:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801396c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	461a      	mov	r2, r3
 8013974:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013976:	633b      	str	r3, [r7, #48]	@ 0x30
 8013978:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801397a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801397c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801397e:	e841 2300 	strex	r3, r2, [r1]
 8013982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013986:	2b00      	cmp	r3, #0
 8013988:	d1e6      	bne.n	8013958 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	3308      	adds	r3, #8
 8013990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	e853 3f00 	ldrex	r3, [r3]
 8013998:	60fb      	str	r3, [r7, #12]
   return(result);
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	f023 0301 	bic.w	r3, r3, #1
 80139a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	3308      	adds	r3, #8
 80139a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139aa:	61fa      	str	r2, [r7, #28]
 80139ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139ae:	69b9      	ldr	r1, [r7, #24]
 80139b0:	69fa      	ldr	r2, [r7, #28]
 80139b2:	e841 2300 	strex	r3, r2, [r1]
 80139b6:	617b      	str	r3, [r7, #20]
   return(result);
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d1e5      	bne.n	801398a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2220      	movs	r2, #32
 80139c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139ce:	2303      	movs	r3, #3
 80139d0:	e012      	b.n	80139f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2220      	movs	r2, #32
 80139d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2220      	movs	r2, #32
 80139de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2200      	movs	r2, #0
 80139e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2200      	movs	r2, #0
 80139ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80139f6:	2300      	movs	r3, #0
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3758      	adds	r7, #88	@ 0x58
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}

08013a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	60f8      	str	r0, [r7, #12]
 8013a08:	60b9      	str	r1, [r7, #8]
 8013a0a:	603b      	str	r3, [r7, #0]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a10:	e04f      	b.n	8013ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a12:	69bb      	ldr	r3, [r7, #24]
 8013a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013a18:	d04b      	beq.n	8013ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a1a:	f7ef f901 	bl	8002c20 <HAL_GetTick>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	1ad3      	subs	r3, r2, r3
 8013a24:	69ba      	ldr	r2, [r7, #24]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d302      	bcc.n	8013a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8013a2a:	69bb      	ldr	r3, [r7, #24]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d101      	bne.n	8013a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013a30:	2303      	movs	r3, #3
 8013a32:	e04e      	b.n	8013ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f003 0304 	and.w	r3, r3, #4
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d037      	beq.n	8013ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	2b80      	cmp	r3, #128	@ 0x80
 8013a46:	d034      	beq.n	8013ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	2b40      	cmp	r3, #64	@ 0x40
 8013a4c:	d031      	beq.n	8013ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	69db      	ldr	r3, [r3, #28]
 8013a54:	f003 0308 	and.w	r3, r3, #8
 8013a58:	2b08      	cmp	r3, #8
 8013a5a:	d110      	bne.n	8013a7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2208      	movs	r2, #8
 8013a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f000 f921 	bl	8013cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	2208      	movs	r2, #8
 8013a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	2200      	movs	r2, #0
 8013a76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e029      	b.n	8013ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	69db      	ldr	r3, [r3, #28]
 8013a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013a8c:	d111      	bne.n	8013ab2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a98:	68f8      	ldr	r0, [r7, #12]
 8013a9a:	f000 f907 	bl	8013cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2220      	movs	r2, #32
 8013aa2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013aae:	2303      	movs	r3, #3
 8013ab0:	e00f      	b.n	8013ad2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	69da      	ldr	r2, [r3, #28]
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	4013      	ands	r3, r2
 8013abc:	68ba      	ldr	r2, [r7, #8]
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	bf0c      	ite	eq
 8013ac2:	2301      	moveq	r3, #1
 8013ac4:	2300      	movne	r3, #0
 8013ac6:	b2db      	uxtb	r3, r3
 8013ac8:	461a      	mov	r2, r3
 8013aca:	79fb      	ldrb	r3, [r7, #7]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d0a0      	beq.n	8013a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013ad0:	2300      	movs	r3, #0
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3710      	adds	r7, #16
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
	...

08013adc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b096      	sub	sp, #88	@ 0x58
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	60f8      	str	r0, [r7, #12]
 8013ae4:	60b9      	str	r1, [r7, #8]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	68ba      	ldr	r2, [r7, #8]
 8013aee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	88fa      	ldrh	r2, [r7, #6]
 8013af4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	2200      	movs	r2, #0
 8013afc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2222      	movs	r2, #34	@ 0x22
 8013b04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d02d      	beq.n	8013b6e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b18:	4a40      	ldr	r2, [pc, #256]	@ (8013c1c <UART_Start_Receive_DMA+0x140>)
 8013b1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b22:	4a3f      	ldr	r2, [pc, #252]	@ (8013c20 <UART_Start_Receive_DMA+0x144>)
 8013b24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b2c:	4a3d      	ldr	r2, [pc, #244]	@ (8013c24 <UART_Start_Receive_DMA+0x148>)
 8013b2e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b36:	2200      	movs	r2, #0
 8013b38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	681b      	ldr	r3, [r3, #0]
 8013b44:	3324      	adds	r3, #36	@ 0x24
 8013b46:	4619      	mov	r1, r3
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b4c:	461a      	mov	r2, r3
 8013b4e:	88fb      	ldrh	r3, [r7, #6]
 8013b50:	f7f1 f838 	bl	8004bc4 <HAL_DMA_Start_IT>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d009      	beq.n	8013b6e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	2210      	movs	r2, #16
 8013b5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2220      	movs	r2, #32
 8013b66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8013b6a:	2301      	movs	r3, #1
 8013b6c:	e051      	b.n	8013c12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	691b      	ldr	r3, [r3, #16]
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d018      	beq.n	8013ba8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b7e:	e853 3f00 	ldrex	r3, [r3]
 8013b82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013b8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	461a      	mov	r2, r3
 8013b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b94:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013b96:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b98:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013b9c:	e841 2300 	strex	r3, r2, [r1]
 8013ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8013ba2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d1e6      	bne.n	8013b76 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	3308      	adds	r3, #8
 8013bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bb2:	e853 3f00 	ldrex	r3, [r3]
 8013bb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bba:	f043 0301 	orr.w	r3, r3, #1
 8013bbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	3308      	adds	r3, #8
 8013bc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bc8:	637a      	str	r2, [r7, #52]	@ 0x34
 8013bca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bcc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013bce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bd0:	e841 2300 	strex	r3, r2, [r1]
 8013bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d1e5      	bne.n	8013ba8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	3308      	adds	r3, #8
 8013be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	e853 3f00 	ldrex	r3, [r3]
 8013bea:	613b      	str	r3, [r7, #16]
   return(result);
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	3308      	adds	r3, #8
 8013bfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013bfc:	623a      	str	r2, [r7, #32]
 8013bfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c00:	69f9      	ldr	r1, [r7, #28]
 8013c02:	6a3a      	ldr	r2, [r7, #32]
 8013c04:	e841 2300 	strex	r3, r2, [r1]
 8013c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8013c0a:	69bb      	ldr	r3, [r7, #24]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d1e5      	bne.n	8013bdc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013c10:	2300      	movs	r3, #0
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3758      	adds	r7, #88	@ 0x58
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	08013d79 	.word	0x08013d79
 8013c20:	08013ea1 	.word	0x08013ea1
 8013c24:	08013edf 	.word	0x08013edf

08013c28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b08f      	sub	sp, #60	@ 0x3c
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c36:	6a3b      	ldr	r3, [r7, #32]
 8013c38:	e853 3f00 	ldrex	r3, [r3]
 8013c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013c44:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013c56:	e841 2300 	strex	r3, r2, [r1]
 8013c5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1e6      	bne.n	8013c30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	3308      	adds	r3, #8
 8013c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	e853 3f00 	ldrex	r3, [r3]
 8013c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c72:	68bb      	ldr	r3, [r7, #8]
 8013c74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	3308      	adds	r3, #8
 8013c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c82:	61ba      	str	r2, [r7, #24]
 8013c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c86:	6979      	ldr	r1, [r7, #20]
 8013c88:	69ba      	ldr	r2, [r7, #24]
 8013c8a:	e841 2300 	strex	r3, r2, [r1]
 8013c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1e5      	bne.n	8013c62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2220      	movs	r2, #32
 8013c9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013c9e:	bf00      	nop
 8013ca0:	373c      	adds	r7, #60	@ 0x3c
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca8:	4770      	bx	lr
	...

08013cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013cac:	b480      	push	{r7}
 8013cae:	b095      	sub	sp, #84	@ 0x54
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cbc:	e853 3f00 	ldrex	r3, [r3]
 8013cc0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	461a      	mov	r2, r3
 8013cd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cd2:	643b      	str	r3, [r7, #64]	@ 0x40
 8013cd4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cd6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013cd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013cda:	e841 2300 	strex	r3, r2, [r1]
 8013cde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1e6      	bne.n	8013cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	3308      	adds	r3, #8
 8013cec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cee:	6a3b      	ldr	r3, [r7, #32]
 8013cf0:	e853 3f00 	ldrex	r3, [r3]
 8013cf4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013cf6:	69fa      	ldr	r2, [r7, #28]
 8013cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8013d74 <UART_EndRxTransfer+0xc8>)
 8013cfa:	4013      	ands	r3, r2
 8013cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	3308      	adds	r3, #8
 8013d04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d0e:	e841 2300 	strex	r3, r2, [r1]
 8013d12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d1e5      	bne.n	8013ce6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d118      	bne.n	8013d54 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	e853 3f00 	ldrex	r3, [r3]
 8013d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	f023 0310 	bic.w	r3, r3, #16
 8013d36:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d40:	61bb      	str	r3, [r7, #24]
 8013d42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d44:	6979      	ldr	r1, [r7, #20]
 8013d46:	69ba      	ldr	r2, [r7, #24]
 8013d48:	e841 2300 	strex	r3, r2, [r1]
 8013d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d1e6      	bne.n	8013d22 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2220      	movs	r2, #32
 8013d58:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	2200      	movs	r2, #0
 8013d66:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013d68:	bf00      	nop
 8013d6a:	3754      	adds	r7, #84	@ 0x54
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr
 8013d74:	effffffe 	.word	0xeffffffe

08013d78 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b09c      	sub	sp, #112	@ 0x70
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013d84:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	69db      	ldr	r3, [r3, #28]
 8013d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d8e:	d071      	beq.n	8013e74 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013d90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d92:	2200      	movs	r2, #0
 8013d94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013da0:	e853 3f00 	ldrex	r3, [r3]
 8013da4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013dac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	461a      	mov	r2, r3
 8013db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013db8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013dbe:	e841 2300 	strex	r3, r2, [r1]
 8013dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d1e6      	bne.n	8013d98 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	3308      	adds	r3, #8
 8013dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd4:	e853 3f00 	ldrex	r3, [r3]
 8013dd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ddc:	f023 0301 	bic.w	r3, r3, #1
 8013de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8013de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	3308      	adds	r3, #8
 8013de8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013dea:	647a      	str	r2, [r7, #68]	@ 0x44
 8013dec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013df0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013df2:	e841 2300 	strex	r3, r2, [r1]
 8013df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013df8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d1e5      	bne.n	8013dca <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	3308      	adds	r3, #8
 8013e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e08:	e853 3f00 	ldrex	r3, [r3]
 8013e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8013e0e:	6a3b      	ldr	r3, [r7, #32]
 8013e10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e14:	663b      	str	r3, [r7, #96]	@ 0x60
 8013e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	3308      	adds	r3, #8
 8013e1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8013e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e26:	e841 2300 	strex	r3, r2, [r1]
 8013e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d1e5      	bne.n	8013dfe <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e34:	2220      	movs	r2, #32
 8013e36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e3e:	2b01      	cmp	r3, #1
 8013e40:	d118      	bne.n	8013e74 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	e853 3f00 	ldrex	r3, [r3]
 8013e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f023 0310 	bic.w	r3, r3, #16
 8013e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e60:	61fb      	str	r3, [r7, #28]
 8013e62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e64:	69b9      	ldr	r1, [r7, #24]
 8013e66:	69fa      	ldr	r2, [r7, #28]
 8013e68:	e841 2300 	strex	r3, r2, [r1]
 8013e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d1e6      	bne.n	8013e42 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e76:	2200      	movs	r2, #0
 8013e78:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e7e:	2b01      	cmp	r3, #1
 8013e80:	d107      	bne.n	8013e92 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013e82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013e88:	4619      	mov	r1, r3
 8013e8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013e8c:	f7fe fef8 	bl	8012c80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013e90:	e002      	b.n	8013e98 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013e92:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013e94:	f7ed fb0a 	bl	80014ac <HAL_UART_RxCpltCallback>
}
 8013e98:	bf00      	nop
 8013e9a:	3770      	adds	r7, #112	@ 0x70
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}

08013ea0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eac:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2201      	movs	r2, #1
 8013eb2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d109      	bne.n	8013ed0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013ec2:	085b      	lsrs	r3, r3, #1
 8013ec4:	b29b      	uxth	r3, r3
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f7fe fed9 	bl	8012c80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013ece:	e002      	b.n	8013ed6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f7fe fec1 	bl	8012c58 <HAL_UART_RxHalfCpltCallback>
}
 8013ed6:	bf00      	nop
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}

08013ede <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013ede:	b580      	push	{r7, lr}
 8013ee0:	b086      	sub	sp, #24
 8013ee2:	af00      	add	r7, sp, #0
 8013ee4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013eea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013ef2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013efa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	689b      	ldr	r3, [r3, #8]
 8013f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013f06:	2b80      	cmp	r3, #128	@ 0x80
 8013f08:	d109      	bne.n	8013f1e <UART_DMAError+0x40>
 8013f0a:	693b      	ldr	r3, [r7, #16]
 8013f0c:	2b21      	cmp	r3, #33	@ 0x21
 8013f0e:	d106      	bne.n	8013f1e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013f10:	697b      	ldr	r3, [r7, #20]
 8013f12:	2200      	movs	r2, #0
 8013f14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013f18:	6978      	ldr	r0, [r7, #20]
 8013f1a:	f7ff fe85 	bl	8013c28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013f1e:	697b      	ldr	r3, [r7, #20]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	689b      	ldr	r3, [r3, #8]
 8013f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f28:	2b40      	cmp	r3, #64	@ 0x40
 8013f2a:	d109      	bne.n	8013f40 <UART_DMAError+0x62>
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2b22      	cmp	r3, #34	@ 0x22
 8013f30:	d106      	bne.n	8013f40 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	2200      	movs	r2, #0
 8013f36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013f3a:	6978      	ldr	r0, [r7, #20]
 8013f3c:	f7ff feb6 	bl	8013cac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f46:	f043 0210 	orr.w	r2, r3, #16
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013f50:	6978      	ldr	r0, [r7, #20]
 8013f52:	f7fe fe8b 	bl	8012c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f56:	bf00      	nop
 8013f58:	3718      	adds	r7, #24
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	bd80      	pop	{r7, pc}

08013f5e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013f5e:	b580      	push	{r7, lr}
 8013f60:	b084      	sub	sp, #16
 8013f62:	af00      	add	r7, sp, #0
 8013f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013f74:	68f8      	ldr	r0, [r7, #12]
 8013f76:	f7fe fe79 	bl	8012c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f7a:	bf00      	nop
 8013f7c:	3710      	adds	r7, #16
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b088      	sub	sp, #32
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	e853 3f00 	ldrex	r3, [r3]
 8013f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8013f98:	68bb      	ldr	r3, [r7, #8]
 8013f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013f9e:	61fb      	str	r3, [r7, #28]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	461a      	mov	r2, r3
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	61bb      	str	r3, [r7, #24]
 8013faa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fac:	6979      	ldr	r1, [r7, #20]
 8013fae:	69ba      	ldr	r2, [r7, #24]
 8013fb0:	e841 2300 	strex	r3, r2, [r1]
 8013fb4:	613b      	str	r3, [r7, #16]
   return(result);
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1e6      	bne.n	8013f8a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2220      	movs	r2, #32
 8013fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f7fe fe3a 	bl	8012c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013fd0:	bf00      	nop
 8013fd2:	3720      	adds	r7, #32
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013fd8:	b480      	push	{r7}
 8013fda:	b083      	sub	sp, #12
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013fe0:	bf00      	nop
 8013fe2:	370c      	adds	r7, #12
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fea:	4770      	bx	lr

08013fec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013ff4:	bf00      	nop
 8013ff6:	370c      	adds	r7, #12
 8013ff8:	46bd      	mov	sp, r7
 8013ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ffe:	4770      	bx	lr

08014000 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014000:	b480      	push	{r7}
 8014002:	b083      	sub	sp, #12
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014008:	bf00      	nop
 801400a:	370c      	adds	r7, #12
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr

08014014 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b084      	sub	sp, #16
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014022:	2b01      	cmp	r3, #1
 8014024:	d101      	bne.n	801402a <HAL_UARTEx_EnableFifoMode+0x16>
 8014026:	2302      	movs	r3, #2
 8014028:	e02b      	b.n	8014082 <HAL_UARTEx_EnableFifoMode+0x6e>
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2201      	movs	r2, #1
 801402e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	2224      	movs	r2, #36	@ 0x24
 8014036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f022 0201 	bic.w	r2, r2, #1
 8014050:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014058:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8014060:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801406a:	6878      	ldr	r0, [r7, #4]
 801406c:	f000 f88a 	bl	8014184 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2220      	movs	r2, #32
 8014074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2200      	movs	r2, #0
 801407c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3710      	adds	r7, #16
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b084      	sub	sp, #16
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
 8014092:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801409a:	2b01      	cmp	r3, #1
 801409c:	d101      	bne.n	80140a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801409e:	2302      	movs	r3, #2
 80140a0:	e02d      	b.n	80140fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2201      	movs	r2, #1
 80140a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2224      	movs	r2, #36	@ 0x24
 80140ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	f022 0201 	bic.w	r2, r2, #1
 80140c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	689b      	ldr	r3, [r3, #8]
 80140d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	683a      	ldr	r2, [r7, #0]
 80140da:	430a      	orrs	r2, r1
 80140dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f000 f850 	bl	8014184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2220      	movs	r2, #32
 80140f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	2200      	movs	r2, #0
 80140f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80140fc:	2300      	movs	r3, #0
}
 80140fe:	4618      	mov	r0, r3
 8014100:	3710      	adds	r7, #16
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}

08014106 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014106:	b580      	push	{r7, lr}
 8014108:	b084      	sub	sp, #16
 801410a:	af00      	add	r7, sp, #0
 801410c:	6078      	str	r0, [r7, #4]
 801410e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8014116:	2b01      	cmp	r3, #1
 8014118:	d101      	bne.n	801411e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801411a:	2302      	movs	r3, #2
 801411c:	e02d      	b.n	801417a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2201      	movs	r2, #1
 8014122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2224      	movs	r2, #36	@ 0x24
 801412a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	f022 0201 	bic.w	r2, r2, #1
 8014144:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	689b      	ldr	r3, [r3, #8]
 801414c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	683a      	ldr	r2, [r7, #0]
 8014156:	430a      	orrs	r2, r1
 8014158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f000 f812 	bl	8014184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	68fa      	ldr	r2, [r7, #12]
 8014166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2220      	movs	r2, #32
 801416c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	2200      	movs	r2, #0
 8014174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
	...

08014184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014184:	b480      	push	{r7}
 8014186:	b085      	sub	sp, #20
 8014188:	af00      	add	r7, sp, #0
 801418a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014190:	2b00      	cmp	r3, #0
 8014192:	d108      	bne.n	80141a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2201      	movs	r2, #1
 8014198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2201      	movs	r2, #1
 80141a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80141a4:	e031      	b.n	801420a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80141a6:	2310      	movs	r3, #16
 80141a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80141aa:	2310      	movs	r3, #16
 80141ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	689b      	ldr	r3, [r3, #8]
 80141b4:	0e5b      	lsrs	r3, r3, #25
 80141b6:	b2db      	uxtb	r3, r3
 80141b8:	f003 0307 	and.w	r3, r3, #7
 80141bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	689b      	ldr	r3, [r3, #8]
 80141c4:	0f5b      	lsrs	r3, r3, #29
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	f003 0307 	and.w	r3, r3, #7
 80141cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80141ce:	7bbb      	ldrb	r3, [r7, #14]
 80141d0:	7b3a      	ldrb	r2, [r7, #12]
 80141d2:	4911      	ldr	r1, [pc, #68]	@ (8014218 <UARTEx_SetNbDataToProcess+0x94>)
 80141d4:	5c8a      	ldrb	r2, [r1, r2]
 80141d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80141da:	7b3a      	ldrb	r2, [r7, #12]
 80141dc:	490f      	ldr	r1, [pc, #60]	@ (801421c <UARTEx_SetNbDataToProcess+0x98>)
 80141de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80141e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80141ec:	7bfb      	ldrb	r3, [r7, #15]
 80141ee:	7b7a      	ldrb	r2, [r7, #13]
 80141f0:	4909      	ldr	r1, [pc, #36]	@ (8014218 <UARTEx_SetNbDataToProcess+0x94>)
 80141f2:	5c8a      	ldrb	r2, [r1, r2]
 80141f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80141f8:	7b7a      	ldrb	r2, [r7, #13]
 80141fa:	4908      	ldr	r1, [pc, #32]	@ (801421c <UARTEx_SetNbDataToProcess+0x98>)
 80141fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80141fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801420a:	bf00      	nop
 801420c:	3714      	adds	r7, #20
 801420e:	46bd      	mov	sp, r7
 8014210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014214:	4770      	bx	lr
 8014216:	bf00      	nop
 8014218:	0801a1f0 	.word	0x0801a1f0
 801421c:	0801a1f8 	.word	0x0801a1f8

08014220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014220:	b084      	sub	sp, #16
 8014222:	b580      	push	{r7, lr}
 8014224:	b084      	sub	sp, #16
 8014226:	af00      	add	r7, sp, #0
 8014228:	6078      	str	r0, [r7, #4]
 801422a:	f107 001c 	add.w	r0, r7, #28
 801422e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8014232:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014236:	2b01      	cmp	r3, #1
 8014238:	d121      	bne.n	801427e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801423e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	68da      	ldr	r2, [r3, #12]
 801424a:	4b2c      	ldr	r3, [pc, #176]	@ (80142fc <USB_CoreInit+0xdc>)
 801424c:	4013      	ands	r3, r2
 801424e:	687a      	ldr	r2, [r7, #4]
 8014250:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	68db      	ldr	r3, [r3, #12]
 8014256:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801425e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014262:	2b01      	cmp	r3, #1
 8014264:	d105      	bne.n	8014272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	68db      	ldr	r3, [r3, #12]
 801426a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f001 fafa 	bl	801586c <USB_CoreReset>
 8014278:	4603      	mov	r3, r0
 801427a:	73fb      	strb	r3, [r7, #15]
 801427c:	e01b      	b.n	80142b6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f001 faee 	bl	801586c <USB_CoreReset>
 8014290:	4603      	mov	r3, r0
 8014292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8014294:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014298:	2b00      	cmp	r3, #0
 801429a:	d106      	bne.n	80142aa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80142a8:	e005      	b.n	80142b6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80142b6:	7fbb      	ldrb	r3, [r7, #30]
 80142b8:	2b01      	cmp	r3, #1
 80142ba:	d116      	bne.n	80142ea <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142c0:	b29a      	uxth	r2, r3
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80142ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014300 <USB_CoreInit+0xe0>)
 80142cc:	4313      	orrs	r3, r2
 80142ce:	687a      	ldr	r2, [r7, #4]
 80142d0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	689b      	ldr	r3, [r3, #8]
 80142d6:	f043 0206 	orr.w	r2, r3, #6
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	689b      	ldr	r3, [r3, #8]
 80142e2:	f043 0220 	orr.w	r2, r3, #32
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80142ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3710      	adds	r7, #16
 80142f0:	46bd      	mov	sp, r7
 80142f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80142f6:	b004      	add	sp, #16
 80142f8:	4770      	bx	lr
 80142fa:	bf00      	nop
 80142fc:	ffbdffbf 	.word	0xffbdffbf
 8014300:	03ee0000 	.word	0x03ee0000

08014304 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014304:	b480      	push	{r7}
 8014306:	b087      	sub	sp, #28
 8014308:	af00      	add	r7, sp, #0
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	4613      	mov	r3, r2
 8014310:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014312:	79fb      	ldrb	r3, [r7, #7]
 8014314:	2b02      	cmp	r3, #2
 8014316:	d165      	bne.n	80143e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	4a41      	ldr	r2, [pc, #260]	@ (8014420 <USB_SetTurnaroundTime+0x11c>)
 801431c:	4293      	cmp	r3, r2
 801431e:	d906      	bls.n	801432e <USB_SetTurnaroundTime+0x2a>
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	4a40      	ldr	r2, [pc, #256]	@ (8014424 <USB_SetTurnaroundTime+0x120>)
 8014324:	4293      	cmp	r3, r2
 8014326:	d202      	bcs.n	801432e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014328:	230f      	movs	r3, #15
 801432a:	617b      	str	r3, [r7, #20]
 801432c:	e062      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	4a3c      	ldr	r2, [pc, #240]	@ (8014424 <USB_SetTurnaroundTime+0x120>)
 8014332:	4293      	cmp	r3, r2
 8014334:	d306      	bcc.n	8014344 <USB_SetTurnaroundTime+0x40>
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	4a3b      	ldr	r2, [pc, #236]	@ (8014428 <USB_SetTurnaroundTime+0x124>)
 801433a:	4293      	cmp	r3, r2
 801433c:	d202      	bcs.n	8014344 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801433e:	230e      	movs	r3, #14
 8014340:	617b      	str	r3, [r7, #20]
 8014342:	e057      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	4a38      	ldr	r2, [pc, #224]	@ (8014428 <USB_SetTurnaroundTime+0x124>)
 8014348:	4293      	cmp	r3, r2
 801434a:	d306      	bcc.n	801435a <USB_SetTurnaroundTime+0x56>
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	4a37      	ldr	r2, [pc, #220]	@ (801442c <USB_SetTurnaroundTime+0x128>)
 8014350:	4293      	cmp	r3, r2
 8014352:	d202      	bcs.n	801435a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014354:	230d      	movs	r3, #13
 8014356:	617b      	str	r3, [r7, #20]
 8014358:	e04c      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	4a33      	ldr	r2, [pc, #204]	@ (801442c <USB_SetTurnaroundTime+0x128>)
 801435e:	4293      	cmp	r3, r2
 8014360:	d306      	bcc.n	8014370 <USB_SetTurnaroundTime+0x6c>
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	4a32      	ldr	r2, [pc, #200]	@ (8014430 <USB_SetTurnaroundTime+0x12c>)
 8014366:	4293      	cmp	r3, r2
 8014368:	d802      	bhi.n	8014370 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801436a:	230c      	movs	r3, #12
 801436c:	617b      	str	r3, [r7, #20]
 801436e:	e041      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	4a2f      	ldr	r2, [pc, #188]	@ (8014430 <USB_SetTurnaroundTime+0x12c>)
 8014374:	4293      	cmp	r3, r2
 8014376:	d906      	bls.n	8014386 <USB_SetTurnaroundTime+0x82>
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	4a2e      	ldr	r2, [pc, #184]	@ (8014434 <USB_SetTurnaroundTime+0x130>)
 801437c:	4293      	cmp	r3, r2
 801437e:	d802      	bhi.n	8014386 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014380:	230b      	movs	r3, #11
 8014382:	617b      	str	r3, [r7, #20]
 8014384:	e036      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	4a2a      	ldr	r2, [pc, #168]	@ (8014434 <USB_SetTurnaroundTime+0x130>)
 801438a:	4293      	cmp	r3, r2
 801438c:	d906      	bls.n	801439c <USB_SetTurnaroundTime+0x98>
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	4a29      	ldr	r2, [pc, #164]	@ (8014438 <USB_SetTurnaroundTime+0x134>)
 8014392:	4293      	cmp	r3, r2
 8014394:	d802      	bhi.n	801439c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014396:	230a      	movs	r3, #10
 8014398:	617b      	str	r3, [r7, #20]
 801439a:	e02b      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801439c:	68bb      	ldr	r3, [r7, #8]
 801439e:	4a26      	ldr	r2, [pc, #152]	@ (8014438 <USB_SetTurnaroundTime+0x134>)
 80143a0:	4293      	cmp	r3, r2
 80143a2:	d906      	bls.n	80143b2 <USB_SetTurnaroundTime+0xae>
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	4a25      	ldr	r2, [pc, #148]	@ (801443c <USB_SetTurnaroundTime+0x138>)
 80143a8:	4293      	cmp	r3, r2
 80143aa:	d202      	bcs.n	80143b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80143ac:	2309      	movs	r3, #9
 80143ae:	617b      	str	r3, [r7, #20]
 80143b0:	e020      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80143b2:	68bb      	ldr	r3, [r7, #8]
 80143b4:	4a21      	ldr	r2, [pc, #132]	@ (801443c <USB_SetTurnaroundTime+0x138>)
 80143b6:	4293      	cmp	r3, r2
 80143b8:	d306      	bcc.n	80143c8 <USB_SetTurnaroundTime+0xc4>
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	4a20      	ldr	r2, [pc, #128]	@ (8014440 <USB_SetTurnaroundTime+0x13c>)
 80143be:	4293      	cmp	r3, r2
 80143c0:	d802      	bhi.n	80143c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80143c2:	2308      	movs	r3, #8
 80143c4:	617b      	str	r3, [r7, #20]
 80143c6:	e015      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	4a1d      	ldr	r2, [pc, #116]	@ (8014440 <USB_SetTurnaroundTime+0x13c>)
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d906      	bls.n	80143de <USB_SetTurnaroundTime+0xda>
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	4a1c      	ldr	r2, [pc, #112]	@ (8014444 <USB_SetTurnaroundTime+0x140>)
 80143d4:	4293      	cmp	r3, r2
 80143d6:	d202      	bcs.n	80143de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80143d8:	2307      	movs	r3, #7
 80143da:	617b      	str	r3, [r7, #20]
 80143dc:	e00a      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80143de:	2306      	movs	r3, #6
 80143e0:	617b      	str	r3, [r7, #20]
 80143e2:	e007      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80143e4:	79fb      	ldrb	r3, [r7, #7]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d102      	bne.n	80143f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80143ea:	2309      	movs	r3, #9
 80143ec:	617b      	str	r3, [r7, #20]
 80143ee:	e001      	b.n	80143f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80143f0:	2309      	movs	r3, #9
 80143f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	68db      	ldr	r3, [r3, #12]
 80143f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	68da      	ldr	r2, [r3, #12]
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	029b      	lsls	r3, r3, #10
 8014408:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801440c:	431a      	orrs	r2, r3
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	371c      	adds	r7, #28
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr
 8014420:	00d8acbf 	.word	0x00d8acbf
 8014424:	00e4e1c0 	.word	0x00e4e1c0
 8014428:	00f42400 	.word	0x00f42400
 801442c:	01067380 	.word	0x01067380
 8014430:	011a499f 	.word	0x011a499f
 8014434:	01312cff 	.word	0x01312cff
 8014438:	014ca43f 	.word	0x014ca43f
 801443c:	016e3600 	.word	0x016e3600
 8014440:	01a6ab1f 	.word	0x01a6ab1f
 8014444:	01e84800 	.word	0x01e84800

08014448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	689b      	ldr	r3, [r3, #8]
 8014454:	f043 0201 	orr.w	r2, r3, #1
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801445c:	2300      	movs	r3, #0
}
 801445e:	4618      	mov	r0, r3
 8014460:	370c      	adds	r7, #12
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr

0801446a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801446a:	b480      	push	{r7}
 801446c:	b083      	sub	sp, #12
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	689b      	ldr	r3, [r3, #8]
 8014476:	f023 0201 	bic.w	r2, r3, #1
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801447e:	2300      	movs	r3, #0
}
 8014480:	4618      	mov	r0, r3
 8014482:	370c      	adds	r7, #12
 8014484:	46bd      	mov	sp, r7
 8014486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448a:	4770      	bx	lr

0801448c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	460b      	mov	r3, r1
 8014496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014498:	2300      	movs	r3, #0
 801449a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80144a8:	78fb      	ldrb	r3, [r7, #3]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d115      	bne.n	80144da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	68db      	ldr	r3, [r3, #12]
 80144b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80144ba:	200a      	movs	r0, #10
 80144bc:	f7ee fbbc 	bl	8002c38 <HAL_Delay>
      ms += 10U;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	330a      	adds	r3, #10
 80144c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f001 f93f 	bl	801574a <USB_GetMode>
 80144cc:	4603      	mov	r3, r0
 80144ce:	2b01      	cmp	r3, #1
 80144d0:	d01e      	beq.n	8014510 <USB_SetCurrentMode+0x84>
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80144d6:	d9f0      	bls.n	80144ba <USB_SetCurrentMode+0x2e>
 80144d8:	e01a      	b.n	8014510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80144da:	78fb      	ldrb	r3, [r7, #3]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d115      	bne.n	801450c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80144ec:	200a      	movs	r0, #10
 80144ee:	f7ee fba3 	bl	8002c38 <HAL_Delay>
      ms += 10U;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	330a      	adds	r3, #10
 80144f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f001 f926 	bl	801574a <USB_GetMode>
 80144fe:	4603      	mov	r3, r0
 8014500:	2b00      	cmp	r3, #0
 8014502:	d005      	beq.n	8014510 <USB_SetCurrentMode+0x84>
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2bc7      	cmp	r3, #199	@ 0xc7
 8014508:	d9f0      	bls.n	80144ec <USB_SetCurrentMode+0x60>
 801450a:	e001      	b.n	8014510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801450c:	2301      	movs	r3, #1
 801450e:	e005      	b.n	801451c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2bc8      	cmp	r3, #200	@ 0xc8
 8014514:	d101      	bne.n	801451a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014516:	2301      	movs	r3, #1
 8014518:	e000      	b.n	801451c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801451a:	2300      	movs	r3, #0
}
 801451c:	4618      	mov	r0, r3
 801451e:	3710      	adds	r7, #16
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}

08014524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014524:	b084      	sub	sp, #16
 8014526:	b580      	push	{r7, lr}
 8014528:	b086      	sub	sp, #24
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
 801452e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8014532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014536:	2300      	movs	r3, #0
 8014538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801453e:	2300      	movs	r3, #0
 8014540:	613b      	str	r3, [r7, #16]
 8014542:	e009      	b.n	8014558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014544:	687a      	ldr	r2, [r7, #4]
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	3340      	adds	r3, #64	@ 0x40
 801454a:	009b      	lsls	r3, r3, #2
 801454c:	4413      	add	r3, r2
 801454e:	2200      	movs	r2, #0
 8014550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	3301      	adds	r3, #1
 8014556:	613b      	str	r3, [r7, #16]
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	2b0e      	cmp	r3, #14
 801455c:	d9f2      	bls.n	8014544 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801455e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014562:	2b00      	cmp	r3, #0
 8014564:	d11c      	bne.n	80145a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	68fa      	ldr	r2, [r7, #12]
 8014570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014574:	f043 0302 	orr.w	r3, r3, #2
 8014578:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801457e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	601a      	str	r2, [r3, #0]
 801459e:	e005      	b.n	80145ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80145b2:	461a      	mov	r2, r3
 80145b4:	2300      	movs	r3, #0
 80145b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80145b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80145bc:	2b01      	cmp	r3, #1
 80145be:	d10d      	bne.n	80145dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80145c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d104      	bne.n	80145d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80145c8:	2100      	movs	r1, #0
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 f968 	bl	80148a0 <USB_SetDevSpeed>
 80145d0:	e008      	b.n	80145e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80145d2:	2101      	movs	r1, #1
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 f963 	bl	80148a0 <USB_SetDevSpeed>
 80145da:	e003      	b.n	80145e4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80145dc:	2103      	movs	r1, #3
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f000 f95e 	bl	80148a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80145e4:	2110      	movs	r1, #16
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	f000 f8fa 	bl	80147e0 <USB_FlushTxFifo>
 80145ec:	4603      	mov	r3, r0
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d001      	beq.n	80145f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80145f2:	2301      	movs	r3, #1
 80145f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 f924 	bl	8014844 <USB_FlushRxFifo>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d001      	beq.n	8014606 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8014602:	2301      	movs	r3, #1
 8014604:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801460c:	461a      	mov	r2, r3
 801460e:	2300      	movs	r3, #0
 8014610:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014618:	461a      	mov	r2, r3
 801461a:	2300      	movs	r3, #0
 801461c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801461e:	68fb      	ldr	r3, [r7, #12]
 8014620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014624:	461a      	mov	r2, r3
 8014626:	2300      	movs	r3, #0
 8014628:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801462a:	2300      	movs	r3, #0
 801462c:	613b      	str	r3, [r7, #16]
 801462e:	e043      	b.n	80146b8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	015a      	lsls	r2, r3, #5
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	4413      	add	r3, r2
 8014638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014646:	d118      	bne.n	801467a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014648:	693b      	ldr	r3, [r7, #16]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d10a      	bne.n	8014664 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	015a      	lsls	r2, r3, #5
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	4413      	add	r3, r2
 8014656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801465a:	461a      	mov	r2, r3
 801465c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014660:	6013      	str	r3, [r2, #0]
 8014662:	e013      	b.n	801468c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	015a      	lsls	r2, r3, #5
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	4413      	add	r3, r2
 801466c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014670:	461a      	mov	r2, r3
 8014672:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014676:	6013      	str	r3, [r2, #0]
 8014678:	e008      	b.n	801468c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801467a:	693b      	ldr	r3, [r7, #16]
 801467c:	015a      	lsls	r2, r3, #5
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	4413      	add	r3, r2
 8014682:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014686:	461a      	mov	r2, r3
 8014688:	2300      	movs	r3, #0
 801468a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	4413      	add	r3, r2
 8014694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014698:	461a      	mov	r2, r3
 801469a:	2300      	movs	r3, #0
 801469c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	015a      	lsls	r2, r3, #5
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	4413      	add	r3, r2
 80146a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146aa:	461a      	mov	r2, r3
 80146ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80146b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80146b2:	693b      	ldr	r3, [r7, #16]
 80146b4:	3301      	adds	r3, #1
 80146b6:	613b      	str	r3, [r7, #16]
 80146b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80146bc:	461a      	mov	r2, r3
 80146be:	693b      	ldr	r3, [r7, #16]
 80146c0:	4293      	cmp	r3, r2
 80146c2:	d3b5      	bcc.n	8014630 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80146c4:	2300      	movs	r3, #0
 80146c6:	613b      	str	r3, [r7, #16]
 80146c8:	e043      	b.n	8014752 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	015a      	lsls	r2, r3, #5
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	4413      	add	r3, r2
 80146d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80146dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80146e0:	d118      	bne.n	8014714 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80146e2:	693b      	ldr	r3, [r7, #16]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d10a      	bne.n	80146fe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80146e8:	693b      	ldr	r3, [r7, #16]
 80146ea:	015a      	lsls	r2, r3, #5
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	4413      	add	r3, r2
 80146f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146f4:	461a      	mov	r2, r3
 80146f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80146fa:	6013      	str	r3, [r2, #0]
 80146fc:	e013      	b.n	8014726 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	015a      	lsls	r2, r3, #5
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	4413      	add	r3, r2
 8014706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801470a:	461a      	mov	r2, r3
 801470c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014710:	6013      	str	r3, [r2, #0]
 8014712:	e008      	b.n	8014726 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014714:	693b      	ldr	r3, [r7, #16]
 8014716:	015a      	lsls	r2, r3, #5
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	4413      	add	r3, r2
 801471c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014720:	461a      	mov	r2, r3
 8014722:	2300      	movs	r3, #0
 8014724:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	015a      	lsls	r2, r3, #5
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	4413      	add	r3, r2
 801472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014732:	461a      	mov	r2, r3
 8014734:	2300      	movs	r3, #0
 8014736:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	015a      	lsls	r2, r3, #5
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	4413      	add	r3, r2
 8014740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014744:	461a      	mov	r2, r3
 8014746:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 801474a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801474c:	693b      	ldr	r3, [r7, #16]
 801474e:	3301      	adds	r3, #1
 8014750:	613b      	str	r3, [r7, #16]
 8014752:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8014756:	461a      	mov	r2, r3
 8014758:	693b      	ldr	r3, [r7, #16]
 801475a:	4293      	cmp	r3, r2
 801475c:	d3b5      	bcc.n	80146ca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014764:	691b      	ldr	r3, [r3, #16]
 8014766:	68fa      	ldr	r2, [r7, #12]
 8014768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801476c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014770:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2200      	movs	r2, #0
 8014776:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801477e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8014780:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014784:	2b00      	cmp	r3, #0
 8014786:	d105      	bne.n	8014794 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	699b      	ldr	r3, [r3, #24]
 801478c:	f043 0210 	orr.w	r2, r3, #16
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	699a      	ldr	r2, [r3, #24]
 8014798:	4b0f      	ldr	r3, [pc, #60]	@ (80147d8 <USB_DevInit+0x2b4>)
 801479a:	4313      	orrs	r3, r2
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80147a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d005      	beq.n	80147b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	699b      	ldr	r3, [r3, #24]
 80147ac:	f043 0208 	orr.w	r2, r3, #8
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80147b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d105      	bne.n	80147c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	699a      	ldr	r2, [r3, #24]
 80147c0:	4b06      	ldr	r3, [pc, #24]	@ (80147dc <USB_DevInit+0x2b8>)
 80147c2:	4313      	orrs	r3, r2
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80147c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3718      	adds	r7, #24
 80147ce:	46bd      	mov	sp, r7
 80147d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80147d4:	b004      	add	sp, #16
 80147d6:	4770      	bx	lr
 80147d8:	803c3800 	.word	0x803c3800
 80147dc:	40000004 	.word	0x40000004

080147e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80147e0:	b480      	push	{r7}
 80147e2:	b085      	sub	sp, #20
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80147ea:	2300      	movs	r3, #0
 80147ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	3301      	adds	r3, #1
 80147f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80147fa:	d901      	bls.n	8014800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80147fc:	2303      	movs	r3, #3
 80147fe:	e01b      	b.n	8014838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	691b      	ldr	r3, [r3, #16]
 8014804:	2b00      	cmp	r3, #0
 8014806:	daf2      	bge.n	80147ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014808:	2300      	movs	r3, #0
 801480a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	019b      	lsls	r3, r3, #6
 8014810:	f043 0220 	orr.w	r2, r3, #32
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	3301      	adds	r3, #1
 801481c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014824:	d901      	bls.n	801482a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8014826:	2303      	movs	r3, #3
 8014828:	e006      	b.n	8014838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	691b      	ldr	r3, [r3, #16]
 801482e:	f003 0320 	and.w	r3, r3, #32
 8014832:	2b20      	cmp	r3, #32
 8014834:	d0f0      	beq.n	8014818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8014836:	2300      	movs	r3, #0
}
 8014838:	4618      	mov	r0, r3
 801483a:	3714      	adds	r7, #20
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr

08014844 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8014844:	b480      	push	{r7}
 8014846:	b085      	sub	sp, #20
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801484c:	2300      	movs	r3, #0
 801484e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	3301      	adds	r3, #1
 8014854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801485c:	d901      	bls.n	8014862 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801485e:	2303      	movs	r3, #3
 8014860:	e018      	b.n	8014894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	691b      	ldr	r3, [r3, #16]
 8014866:	2b00      	cmp	r3, #0
 8014868:	daf2      	bge.n	8014850 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801486a:	2300      	movs	r3, #0
 801486c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	2210      	movs	r2, #16
 8014872:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	3301      	adds	r3, #1
 8014878:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014880:	d901      	bls.n	8014886 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8014882:	2303      	movs	r3, #3
 8014884:	e006      	b.n	8014894 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	691b      	ldr	r3, [r3, #16]
 801488a:	f003 0310 	and.w	r3, r3, #16
 801488e:	2b10      	cmp	r3, #16
 8014890:	d0f0      	beq.n	8014874 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8014892:	2300      	movs	r3, #0
}
 8014894:	4618      	mov	r0, r3
 8014896:	3714      	adds	r7, #20
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80148a0:	b480      	push	{r7}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	460b      	mov	r3, r1
 80148aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148b6:	681a      	ldr	r2, [r3, #0]
 80148b8:	78fb      	ldrb	r3, [r7, #3]
 80148ba:	68f9      	ldr	r1, [r7, #12]
 80148bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148c0:	4313      	orrs	r3, r2
 80148c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80148c4:	2300      	movs	r3, #0
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3714      	adds	r7, #20
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr

080148d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80148d2:	b480      	push	{r7}
 80148d4:	b087      	sub	sp, #28
 80148d6:	af00      	add	r7, sp, #0
 80148d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148e4:	689b      	ldr	r3, [r3, #8]
 80148e6:	f003 0306 	and.w	r3, r3, #6
 80148ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d102      	bne.n	80148f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80148f2:	2300      	movs	r3, #0
 80148f4:	75fb      	strb	r3, [r7, #23]
 80148f6:	e00a      	b.n	801490e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	2b02      	cmp	r3, #2
 80148fc:	d002      	beq.n	8014904 <USB_GetDevSpeed+0x32>
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	2b06      	cmp	r3, #6
 8014902:	d102      	bne.n	801490a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8014904:	2302      	movs	r3, #2
 8014906:	75fb      	strb	r3, [r7, #23]
 8014908:	e001      	b.n	801490e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801490a:	230f      	movs	r3, #15
 801490c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801490e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014910:	4618      	mov	r0, r3
 8014912:	371c      	adds	r7, #28
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 801491c:	b480      	push	{r7}
 801491e:	b085      	sub	sp, #20
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801492a:	683b      	ldr	r3, [r7, #0]
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	785b      	ldrb	r3, [r3, #1]
 8014934:	2b01      	cmp	r3, #1
 8014936:	d139      	bne.n	80149ac <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801493e:	69da      	ldr	r2, [r3, #28]
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f003 030f 	and.w	r3, r3, #15
 8014948:	2101      	movs	r1, #1
 801494a:	fa01 f303 	lsl.w	r3, r1, r3
 801494e:	b29b      	uxth	r3, r3
 8014950:	68f9      	ldr	r1, [r7, #12]
 8014952:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014956:	4313      	orrs	r3, r2
 8014958:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	015a      	lsls	r2, r3, #5
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	4413      	add	r3, r2
 8014962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801496c:	2b00      	cmp	r3, #0
 801496e:	d153      	bne.n	8014a18 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	015a      	lsls	r2, r3, #5
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	4413      	add	r3, r2
 8014978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801497c:	681a      	ldr	r2, [r3, #0]
 801497e:	683b      	ldr	r3, [r7, #0]
 8014980:	689b      	ldr	r3, [r3, #8]
 8014982:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	791b      	ldrb	r3, [r3, #4]
 801498a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801498c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	059b      	lsls	r3, r3, #22
 8014992:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014994:	431a      	orrs	r2, r3
 8014996:	68bb      	ldr	r3, [r7, #8]
 8014998:	0159      	lsls	r1, r3, #5
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	440b      	add	r3, r1
 801499e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149a2:	4619      	mov	r1, r3
 80149a4:	4b20      	ldr	r3, [pc, #128]	@ (8014a28 <USB_ActivateEndpoint+0x10c>)
 80149a6:	4313      	orrs	r3, r2
 80149a8:	600b      	str	r3, [r1, #0]
 80149aa:	e035      	b.n	8014a18 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149b2:	69da      	ldr	r2, [r3, #28]
 80149b4:	683b      	ldr	r3, [r7, #0]
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	f003 030f 	and.w	r3, r3, #15
 80149bc:	2101      	movs	r1, #1
 80149be:	fa01 f303 	lsl.w	r3, r1, r3
 80149c2:	041b      	lsls	r3, r3, #16
 80149c4:	68f9      	ldr	r1, [r7, #12]
 80149c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149ca:	4313      	orrs	r3, r2
 80149cc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	015a      	lsls	r2, r3, #5
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	4413      	add	r3, r2
 80149d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d119      	bne.n	8014a18 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	015a      	lsls	r2, r3, #5
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	4413      	add	r3, r2
 80149ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80149f0:	681a      	ldr	r2, [r3, #0]
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	689b      	ldr	r3, [r3, #8]
 80149f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	791b      	ldrb	r3, [r3, #4]
 80149fe:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014a00:	430b      	orrs	r3, r1
 8014a02:	431a      	orrs	r2, r3
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	0159      	lsls	r1, r3, #5
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	440b      	add	r3, r1
 8014a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a10:	4619      	mov	r1, r3
 8014a12:	4b05      	ldr	r3, [pc, #20]	@ (8014a28 <USB_ActivateEndpoint+0x10c>)
 8014a14:	4313      	orrs	r3, r2
 8014a16:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014a18:	2300      	movs	r3, #0
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3714      	adds	r7, #20
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop
 8014a28:	10008000 	.word	0x10008000

08014a2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b085      	sub	sp, #20
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
 8014a34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a3a:	683b      	ldr	r3, [r7, #0]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	785b      	ldrb	r3, [r3, #1]
 8014a44:	2b01      	cmp	r3, #1
 8014a46:	d161      	bne.n	8014b0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	015a      	lsls	r2, r3, #5
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	4413      	add	r3, r2
 8014a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014a5e:	d11f      	bne.n	8014aa0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	015a      	lsls	r2, r3, #5
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	4413      	add	r3, r2
 8014a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	68ba      	ldr	r2, [r7, #8]
 8014a70:	0151      	lsls	r1, r2, #5
 8014a72:	68fa      	ldr	r2, [r7, #12]
 8014a74:	440a      	add	r2, r1
 8014a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a7a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014a7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014a80:	68bb      	ldr	r3, [r7, #8]
 8014a82:	015a      	lsls	r2, r3, #5
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	4413      	add	r3, r2
 8014a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	68ba      	ldr	r2, [r7, #8]
 8014a90:	0151      	lsls	r1, r2, #5
 8014a92:	68fa      	ldr	r2, [r7, #12]
 8014a94:	440a      	add	r2, r1
 8014a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014a9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014aa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	f003 030f 	and.w	r3, r3, #15
 8014ab0:	2101      	movs	r1, #1
 8014ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	43db      	mvns	r3, r3
 8014aba:	68f9      	ldr	r1, [r7, #12]
 8014abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ac0:	4013      	ands	r3, r2
 8014ac2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014aca:	69da      	ldr	r2, [r3, #28]
 8014acc:	683b      	ldr	r3, [r7, #0]
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	f003 030f 	and.w	r3, r3, #15
 8014ad4:	2101      	movs	r1, #1
 8014ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	43db      	mvns	r3, r3
 8014ade:	68f9      	ldr	r1, [r7, #12]
 8014ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ae4:	4013      	ands	r3, r2
 8014ae6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014ae8:	68bb      	ldr	r3, [r7, #8]
 8014aea:	015a      	lsls	r2, r3, #5
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	4413      	add	r3, r2
 8014af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014af4:	681a      	ldr	r2, [r3, #0]
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	0159      	lsls	r1, r3, #5
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	440b      	add	r3, r1
 8014afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b02:	4619      	mov	r1, r3
 8014b04:	4b35      	ldr	r3, [pc, #212]	@ (8014bdc <USB_DeactivateEndpoint+0x1b0>)
 8014b06:	4013      	ands	r3, r2
 8014b08:	600b      	str	r3, [r1, #0]
 8014b0a:	e060      	b.n	8014bce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	015a      	lsls	r2, r3, #5
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	4413      	add	r3, r2
 8014b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014b22:	d11f      	bne.n	8014b64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014b24:	68bb      	ldr	r3, [r7, #8]
 8014b26:	015a      	lsls	r2, r3, #5
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	4413      	add	r3, r2
 8014b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	68ba      	ldr	r2, [r7, #8]
 8014b34:	0151      	lsls	r1, r2, #5
 8014b36:	68fa      	ldr	r2, [r7, #12]
 8014b38:	440a      	add	r2, r1
 8014b3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014b42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	015a      	lsls	r2, r3, #5
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	4413      	add	r3, r2
 8014b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	68ba      	ldr	r2, [r7, #8]
 8014b54:	0151      	lsls	r1, r2, #5
 8014b56:	68fa      	ldr	r2, [r7, #12]
 8014b58:	440a      	add	r2, r1
 8014b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	f003 030f 	and.w	r3, r3, #15
 8014b74:	2101      	movs	r1, #1
 8014b76:	fa01 f303 	lsl.w	r3, r1, r3
 8014b7a:	041b      	lsls	r3, r3, #16
 8014b7c:	43db      	mvns	r3, r3
 8014b7e:	68f9      	ldr	r1, [r7, #12]
 8014b80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014b84:	4013      	ands	r3, r2
 8014b86:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b8e:	69da      	ldr	r2, [r3, #28]
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	781b      	ldrb	r3, [r3, #0]
 8014b94:	f003 030f 	and.w	r3, r3, #15
 8014b98:	2101      	movs	r1, #1
 8014b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8014b9e:	041b      	lsls	r3, r3, #16
 8014ba0:	43db      	mvns	r3, r3
 8014ba2:	68f9      	ldr	r1, [r7, #12]
 8014ba4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ba8:	4013      	ands	r3, r2
 8014baa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	015a      	lsls	r2, r3, #5
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	4413      	add	r3, r2
 8014bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	68bb      	ldr	r3, [r7, #8]
 8014bbc:	0159      	lsls	r1, r3, #5
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	440b      	add	r3, r1
 8014bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	4b05      	ldr	r3, [pc, #20]	@ (8014be0 <USB_DeactivateEndpoint+0x1b4>)
 8014bca:	4013      	ands	r3, r2
 8014bcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014bce:	2300      	movs	r3, #0
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3714      	adds	r7, #20
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr
 8014bdc:	ec337800 	.word	0xec337800
 8014be0:	eff37800 	.word	0xeff37800

08014be4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b08a      	sub	sp, #40	@ 0x28
 8014be8:	af02      	add	r7, sp, #8
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	4613      	mov	r3, r2
 8014bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	781b      	ldrb	r3, [r3, #0]
 8014bfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014bfc:	68bb      	ldr	r3, [r7, #8]
 8014bfe:	785b      	ldrb	r3, [r3, #1]
 8014c00:	2b01      	cmp	r3, #1
 8014c02:	f040 8185 	bne.w	8014f10 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d132      	bne.n	8014c74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014c0e:	69bb      	ldr	r3, [r7, #24]
 8014c10:	015a      	lsls	r2, r3, #5
 8014c12:	69fb      	ldr	r3, [r7, #28]
 8014c14:	4413      	add	r3, r2
 8014c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c1a:	691a      	ldr	r2, [r3, #16]
 8014c1c:	69bb      	ldr	r3, [r7, #24]
 8014c1e:	0159      	lsls	r1, r3, #5
 8014c20:	69fb      	ldr	r3, [r7, #28]
 8014c22:	440b      	add	r3, r1
 8014c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c28:	4619      	mov	r1, r3
 8014c2a:	4ba7      	ldr	r3, [pc, #668]	@ (8014ec8 <USB_EPStartXfer+0x2e4>)
 8014c2c:	4013      	ands	r3, r2
 8014c2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	015a      	lsls	r2, r3, #5
 8014c34:	69fb      	ldr	r3, [r7, #28]
 8014c36:	4413      	add	r3, r2
 8014c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c3c:	691b      	ldr	r3, [r3, #16]
 8014c3e:	69ba      	ldr	r2, [r7, #24]
 8014c40:	0151      	lsls	r1, r2, #5
 8014c42:	69fa      	ldr	r2, [r7, #28]
 8014c44:	440a      	add	r2, r1
 8014c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	015a      	lsls	r2, r3, #5
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	4413      	add	r3, r2
 8014c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c5c:	691a      	ldr	r2, [r3, #16]
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	0159      	lsls	r1, r3, #5
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	440b      	add	r3, r1
 8014c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	4b97      	ldr	r3, [pc, #604]	@ (8014ecc <USB_EPStartXfer+0x2e8>)
 8014c6e:	4013      	ands	r3, r2
 8014c70:	610b      	str	r3, [r1, #16]
 8014c72:	e097      	b.n	8014da4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c74:	69bb      	ldr	r3, [r7, #24]
 8014c76:	015a      	lsls	r2, r3, #5
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	4413      	add	r3, r2
 8014c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c80:	691a      	ldr	r2, [r3, #16]
 8014c82:	69bb      	ldr	r3, [r7, #24]
 8014c84:	0159      	lsls	r1, r3, #5
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	440b      	add	r3, r1
 8014c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c8e:	4619      	mov	r1, r3
 8014c90:	4b8e      	ldr	r3, [pc, #568]	@ (8014ecc <USB_EPStartXfer+0x2e8>)
 8014c92:	4013      	ands	r3, r2
 8014c94:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	015a      	lsls	r2, r3, #5
 8014c9a:	69fb      	ldr	r3, [r7, #28]
 8014c9c:	4413      	add	r3, r2
 8014c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ca2:	691a      	ldr	r2, [r3, #16]
 8014ca4:	69bb      	ldr	r3, [r7, #24]
 8014ca6:	0159      	lsls	r1, r3, #5
 8014ca8:	69fb      	ldr	r3, [r7, #28]
 8014caa:	440b      	add	r3, r1
 8014cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	4b85      	ldr	r3, [pc, #532]	@ (8014ec8 <USB_EPStartXfer+0x2e4>)
 8014cb4:	4013      	ands	r3, r2
 8014cb6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d11a      	bne.n	8014cf4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014cbe:	68bb      	ldr	r3, [r7, #8]
 8014cc0:	691a      	ldr	r2, [r3, #16]
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	689b      	ldr	r3, [r3, #8]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d903      	bls.n	8014cd2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	689a      	ldr	r2, [r3, #8]
 8014cce:	68bb      	ldr	r3, [r7, #8]
 8014cd0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	015a      	lsls	r2, r3, #5
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	4413      	add	r3, r2
 8014cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cde:	691b      	ldr	r3, [r3, #16]
 8014ce0:	69ba      	ldr	r2, [r7, #24]
 8014ce2:	0151      	lsls	r1, r2, #5
 8014ce4:	69fa      	ldr	r2, [r7, #28]
 8014ce6:	440a      	add	r2, r1
 8014ce8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014cec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014cf0:	6113      	str	r3, [r2, #16]
 8014cf2:	e044      	b.n	8014d7e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014cf4:	68bb      	ldr	r3, [r7, #8]
 8014cf6:	691a      	ldr	r2, [r3, #16]
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	689b      	ldr	r3, [r3, #8]
 8014cfc:	4413      	add	r3, r2
 8014cfe:	1e5a      	subs	r2, r3, #1
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	689b      	ldr	r3, [r3, #8]
 8014d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d08:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	015a      	lsls	r2, r3, #5
 8014d0e:	69fb      	ldr	r3, [r7, #28]
 8014d10:	4413      	add	r3, r2
 8014d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d16:	691a      	ldr	r2, [r3, #16]
 8014d18:	8afb      	ldrh	r3, [r7, #22]
 8014d1a:	04d9      	lsls	r1, r3, #19
 8014d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8014ed0 <USB_EPStartXfer+0x2ec>)
 8014d1e:	400b      	ands	r3, r1
 8014d20:	69b9      	ldr	r1, [r7, #24]
 8014d22:	0148      	lsls	r0, r1, #5
 8014d24:	69f9      	ldr	r1, [r7, #28]
 8014d26:	4401      	add	r1, r0
 8014d28:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014d2c:	4313      	orrs	r3, r2
 8014d2e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	791b      	ldrb	r3, [r3, #4]
 8014d34:	2b01      	cmp	r3, #1
 8014d36:	d122      	bne.n	8014d7e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	015a      	lsls	r2, r3, #5
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	4413      	add	r3, r2
 8014d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d44:	691b      	ldr	r3, [r3, #16]
 8014d46:	69ba      	ldr	r2, [r7, #24]
 8014d48:	0151      	lsls	r1, r2, #5
 8014d4a:	69fa      	ldr	r2, [r7, #28]
 8014d4c:	440a      	add	r2, r1
 8014d4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d52:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014d56:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014d58:	69bb      	ldr	r3, [r7, #24]
 8014d5a:	015a      	lsls	r2, r3, #5
 8014d5c:	69fb      	ldr	r3, [r7, #28]
 8014d5e:	4413      	add	r3, r2
 8014d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d64:	691a      	ldr	r2, [r3, #16]
 8014d66:	8afb      	ldrh	r3, [r7, #22]
 8014d68:	075b      	lsls	r3, r3, #29
 8014d6a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014d6e:	69b9      	ldr	r1, [r7, #24]
 8014d70:	0148      	lsls	r0, r1, #5
 8014d72:	69f9      	ldr	r1, [r7, #28]
 8014d74:	4401      	add	r1, r0
 8014d76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014d7a:	4313      	orrs	r3, r2
 8014d7c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014d7e:	69bb      	ldr	r3, [r7, #24]
 8014d80:	015a      	lsls	r2, r3, #5
 8014d82:	69fb      	ldr	r3, [r7, #28]
 8014d84:	4413      	add	r3, r2
 8014d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d8a:	691a      	ldr	r2, [r3, #16]
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	691b      	ldr	r3, [r3, #16]
 8014d90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014d94:	69b9      	ldr	r1, [r7, #24]
 8014d96:	0148      	lsls	r0, r1, #5
 8014d98:	69f9      	ldr	r1, [r7, #28]
 8014d9a:	4401      	add	r1, r0
 8014d9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014da0:	4313      	orrs	r3, r2
 8014da2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014da4:	79fb      	ldrb	r3, [r7, #7]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d14b      	bne.n	8014e42 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	69db      	ldr	r3, [r3, #28]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d009      	beq.n	8014dc6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	015a      	lsls	r2, r3, #5
 8014db6:	69fb      	ldr	r3, [r7, #28]
 8014db8:	4413      	add	r3, r2
 8014dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014dbe:	461a      	mov	r2, r3
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	69db      	ldr	r3, [r3, #28]
 8014dc4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	791b      	ldrb	r3, [r3, #4]
 8014dca:	2b01      	cmp	r3, #1
 8014dcc:	d128      	bne.n	8014e20 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014dce:	69fb      	ldr	r3, [r7, #28]
 8014dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014dd4:	689b      	ldr	r3, [r3, #8]
 8014dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d110      	bne.n	8014e00 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014dde:	69bb      	ldr	r3, [r7, #24]
 8014de0:	015a      	lsls	r2, r3, #5
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	4413      	add	r3, r2
 8014de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	69ba      	ldr	r2, [r7, #24]
 8014dee:	0151      	lsls	r1, r2, #5
 8014df0:	69fa      	ldr	r2, [r7, #28]
 8014df2:	440a      	add	r2, r1
 8014df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014df8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014dfc:	6013      	str	r3, [r2, #0]
 8014dfe:	e00f      	b.n	8014e20 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	015a      	lsls	r2, r3, #5
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	4413      	add	r3, r2
 8014e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	69ba      	ldr	r2, [r7, #24]
 8014e10:	0151      	lsls	r1, r2, #5
 8014e12:	69fa      	ldr	r2, [r7, #28]
 8014e14:	440a      	add	r2, r1
 8014e16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014e1e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	015a      	lsls	r2, r3, #5
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	4413      	add	r3, r2
 8014e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	69ba      	ldr	r2, [r7, #24]
 8014e30:	0151      	lsls	r1, r2, #5
 8014e32:	69fa      	ldr	r2, [r7, #28]
 8014e34:	440a      	add	r2, r1
 8014e36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014e3e:	6013      	str	r3, [r2, #0]
 8014e40:	e169      	b.n	8015116 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	015a      	lsls	r2, r3, #5
 8014e46:	69fb      	ldr	r3, [r7, #28]
 8014e48:	4413      	add	r3, r2
 8014e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	69ba      	ldr	r2, [r7, #24]
 8014e52:	0151      	lsls	r1, r2, #5
 8014e54:	69fa      	ldr	r2, [r7, #28]
 8014e56:	440a      	add	r2, r1
 8014e58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014e60:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	791b      	ldrb	r3, [r3, #4]
 8014e66:	2b01      	cmp	r3, #1
 8014e68:	d015      	beq.n	8014e96 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	691b      	ldr	r3, [r3, #16]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	f000 8151 	beq.w	8015116 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	f003 030f 	and.w	r3, r3, #15
 8014e84:	2101      	movs	r1, #1
 8014e86:	fa01 f303 	lsl.w	r3, r1, r3
 8014e8a:	69f9      	ldr	r1, [r7, #28]
 8014e8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014e90:	4313      	orrs	r3, r2
 8014e92:	634b      	str	r3, [r1, #52]	@ 0x34
 8014e94:	e13f      	b.n	8015116 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014e96:	69fb      	ldr	r3, [r7, #28]
 8014e98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014e9c:	689b      	ldr	r3, [r3, #8]
 8014e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d116      	bne.n	8014ed4 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	015a      	lsls	r2, r3, #5
 8014eaa:	69fb      	ldr	r3, [r7, #28]
 8014eac:	4413      	add	r3, r2
 8014eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	69ba      	ldr	r2, [r7, #24]
 8014eb6:	0151      	lsls	r1, r2, #5
 8014eb8:	69fa      	ldr	r2, [r7, #28]
 8014eba:	440a      	add	r2, r1
 8014ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ec0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014ec4:	6013      	str	r3, [r2, #0]
 8014ec6:	e015      	b.n	8014ef4 <USB_EPStartXfer+0x310>
 8014ec8:	e007ffff 	.word	0xe007ffff
 8014ecc:	fff80000 	.word	0xfff80000
 8014ed0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014ed4:	69bb      	ldr	r3, [r7, #24]
 8014ed6:	015a      	lsls	r2, r3, #5
 8014ed8:	69fb      	ldr	r3, [r7, #28]
 8014eda:	4413      	add	r3, r2
 8014edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	69ba      	ldr	r2, [r7, #24]
 8014ee4:	0151      	lsls	r1, r2, #5
 8014ee6:	69fa      	ldr	r2, [r7, #28]
 8014ee8:	440a      	add	r2, r1
 8014eea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014ef2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	68d9      	ldr	r1, [r3, #12]
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	781a      	ldrb	r2, [r3, #0]
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	691b      	ldr	r3, [r3, #16]
 8014f00:	b298      	uxth	r0, r3
 8014f02:	79fb      	ldrb	r3, [r7, #7]
 8014f04:	9300      	str	r3, [sp, #0]
 8014f06:	4603      	mov	r3, r0
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f000 f9b9 	bl	8015280 <USB_WritePacket>
 8014f0e:	e102      	b.n	8015116 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	015a      	lsls	r2, r3, #5
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	4413      	add	r3, r2
 8014f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f1c:	691a      	ldr	r2, [r3, #16]
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	0159      	lsls	r1, r3, #5
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	440b      	add	r3, r1
 8014f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	4b7c      	ldr	r3, [pc, #496]	@ (8015120 <USB_EPStartXfer+0x53c>)
 8014f2e:	4013      	ands	r3, r2
 8014f30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014f32:	69bb      	ldr	r3, [r7, #24]
 8014f34:	015a      	lsls	r2, r3, #5
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	4413      	add	r3, r2
 8014f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f3e:	691a      	ldr	r2, [r3, #16]
 8014f40:	69bb      	ldr	r3, [r7, #24]
 8014f42:	0159      	lsls	r1, r3, #5
 8014f44:	69fb      	ldr	r3, [r7, #28]
 8014f46:	440b      	add	r3, r1
 8014f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	4b75      	ldr	r3, [pc, #468]	@ (8015124 <USB_EPStartXfer+0x540>)
 8014f50:	4013      	ands	r3, r2
 8014f52:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014f54:	69bb      	ldr	r3, [r7, #24]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d12f      	bne.n	8014fba <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	691b      	ldr	r3, [r3, #16]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d003      	beq.n	8014f6a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	689a      	ldr	r2, [r3, #8]
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	689a      	ldr	r2, [r3, #8]
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014f72:	69bb      	ldr	r3, [r7, #24]
 8014f74:	015a      	lsls	r2, r3, #5
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	4413      	add	r3, r2
 8014f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f7e:	691a      	ldr	r2, [r3, #16]
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	6a1b      	ldr	r3, [r3, #32]
 8014f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014f88:	69b9      	ldr	r1, [r7, #24]
 8014f8a:	0148      	lsls	r0, r1, #5
 8014f8c:	69f9      	ldr	r1, [r7, #28]
 8014f8e:	4401      	add	r1, r0
 8014f90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014f94:	4313      	orrs	r3, r2
 8014f96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014f98:	69bb      	ldr	r3, [r7, #24]
 8014f9a:	015a      	lsls	r2, r3, #5
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	4413      	add	r3, r2
 8014fa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fa4:	691b      	ldr	r3, [r3, #16]
 8014fa6:	69ba      	ldr	r2, [r7, #24]
 8014fa8:	0151      	lsls	r1, r2, #5
 8014faa:	69fa      	ldr	r2, [r7, #28]
 8014fac:	440a      	add	r2, r1
 8014fae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014fb6:	6113      	str	r3, [r2, #16]
 8014fb8:	e05f      	b.n	801507a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	691b      	ldr	r3, [r3, #16]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d123      	bne.n	801500a <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014fc2:	69bb      	ldr	r3, [r7, #24]
 8014fc4:	015a      	lsls	r2, r3, #5
 8014fc6:	69fb      	ldr	r3, [r7, #28]
 8014fc8:	4413      	add	r3, r2
 8014fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fce:	691a      	ldr	r2, [r3, #16]
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	689b      	ldr	r3, [r3, #8]
 8014fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014fd8:	69b9      	ldr	r1, [r7, #24]
 8014fda:	0148      	lsls	r0, r1, #5
 8014fdc:	69f9      	ldr	r1, [r7, #28]
 8014fde:	4401      	add	r1, r0
 8014fe0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014fe4:	4313      	orrs	r3, r2
 8014fe6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	015a      	lsls	r2, r3, #5
 8014fec:	69fb      	ldr	r3, [r7, #28]
 8014fee:	4413      	add	r3, r2
 8014ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ff4:	691b      	ldr	r3, [r3, #16]
 8014ff6:	69ba      	ldr	r2, [r7, #24]
 8014ff8:	0151      	lsls	r1, r2, #5
 8014ffa:	69fa      	ldr	r2, [r7, #28]
 8014ffc:	440a      	add	r2, r1
 8014ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015002:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015006:	6113      	str	r3, [r2, #16]
 8015008:	e037      	b.n	801507a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	691a      	ldr	r2, [r3, #16]
 801500e:	68bb      	ldr	r3, [r7, #8]
 8015010:	689b      	ldr	r3, [r3, #8]
 8015012:	4413      	add	r3, r2
 8015014:	1e5a      	subs	r2, r3, #1
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	689b      	ldr	r3, [r3, #8]
 801501a:	fbb2 f3f3 	udiv	r3, r2, r3
 801501e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	8afa      	ldrh	r2, [r7, #22]
 8015026:	fb03 f202 	mul.w	r2, r3, r2
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801502e:	69bb      	ldr	r3, [r7, #24]
 8015030:	015a      	lsls	r2, r3, #5
 8015032:	69fb      	ldr	r3, [r7, #28]
 8015034:	4413      	add	r3, r2
 8015036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801503a:	691a      	ldr	r2, [r3, #16]
 801503c:	8afb      	ldrh	r3, [r7, #22]
 801503e:	04d9      	lsls	r1, r3, #19
 8015040:	4b39      	ldr	r3, [pc, #228]	@ (8015128 <USB_EPStartXfer+0x544>)
 8015042:	400b      	ands	r3, r1
 8015044:	69b9      	ldr	r1, [r7, #24]
 8015046:	0148      	lsls	r0, r1, #5
 8015048:	69f9      	ldr	r1, [r7, #28]
 801504a:	4401      	add	r1, r0
 801504c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015050:	4313      	orrs	r3, r2
 8015052:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015054:	69bb      	ldr	r3, [r7, #24]
 8015056:	015a      	lsls	r2, r3, #5
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	4413      	add	r3, r2
 801505c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015060:	691a      	ldr	r2, [r3, #16]
 8015062:	68bb      	ldr	r3, [r7, #8]
 8015064:	6a1b      	ldr	r3, [r3, #32]
 8015066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801506a:	69b9      	ldr	r1, [r7, #24]
 801506c:	0148      	lsls	r0, r1, #5
 801506e:	69f9      	ldr	r1, [r7, #28]
 8015070:	4401      	add	r1, r0
 8015072:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015076:	4313      	orrs	r3, r2
 8015078:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801507a:	79fb      	ldrb	r3, [r7, #7]
 801507c:	2b01      	cmp	r3, #1
 801507e:	d10d      	bne.n	801509c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	68db      	ldr	r3, [r3, #12]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d009      	beq.n	801509c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	68d9      	ldr	r1, [r3, #12]
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	015a      	lsls	r2, r3, #5
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	4413      	add	r3, r2
 8015094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015098:	460a      	mov	r2, r1
 801509a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	791b      	ldrb	r3, [r3, #4]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d128      	bne.n	80150f6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150aa:	689b      	ldr	r3, [r3, #8]
 80150ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d110      	bne.n	80150d6 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	015a      	lsls	r2, r3, #5
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	4413      	add	r3, r2
 80150bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	69ba      	ldr	r2, [r7, #24]
 80150c4:	0151      	lsls	r1, r2, #5
 80150c6:	69fa      	ldr	r2, [r7, #28]
 80150c8:	440a      	add	r2, r1
 80150ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80150ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80150d2:	6013      	str	r3, [r2, #0]
 80150d4:	e00f      	b.n	80150f6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	015a      	lsls	r2, r3, #5
 80150da:	69fb      	ldr	r3, [r7, #28]
 80150dc:	4413      	add	r3, r2
 80150de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	69ba      	ldr	r2, [r7, #24]
 80150e6:	0151      	lsls	r1, r2, #5
 80150e8:	69fa      	ldr	r2, [r7, #28]
 80150ea:	440a      	add	r2, r1
 80150ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80150f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80150f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80150f6:	69bb      	ldr	r3, [r7, #24]
 80150f8:	015a      	lsls	r2, r3, #5
 80150fa:	69fb      	ldr	r3, [r7, #28]
 80150fc:	4413      	add	r3, r2
 80150fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	69ba      	ldr	r2, [r7, #24]
 8015106:	0151      	lsls	r1, r2, #5
 8015108:	69fa      	ldr	r2, [r7, #28]
 801510a:	440a      	add	r2, r1
 801510c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015110:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8015114:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015116:	2300      	movs	r3, #0
}
 8015118:	4618      	mov	r0, r3
 801511a:	3720      	adds	r7, #32
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	fff80000 	.word	0xfff80000
 8015124:	e007ffff 	.word	0xe007ffff
 8015128:	1ff80000 	.word	0x1ff80000

0801512c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801512c:	b480      	push	{r7}
 801512e:	b087      	sub	sp, #28
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015136:	2300      	movs	r3, #0
 8015138:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801513a:	2300      	movs	r3, #0
 801513c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	785b      	ldrb	r3, [r3, #1]
 8015146:	2b01      	cmp	r3, #1
 8015148:	d14a      	bne.n	80151e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801514a:	683b      	ldr	r3, [r7, #0]
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	015a      	lsls	r2, r3, #5
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	4413      	add	r3, r2
 8015154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801515e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015162:	f040 8086 	bne.w	8015272 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015166:	683b      	ldr	r3, [r7, #0]
 8015168:	781b      	ldrb	r3, [r3, #0]
 801516a:	015a      	lsls	r2, r3, #5
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	4413      	add	r3, r2
 8015170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	683a      	ldr	r2, [r7, #0]
 8015178:	7812      	ldrb	r2, [r2, #0]
 801517a:	0151      	lsls	r1, r2, #5
 801517c:	693a      	ldr	r2, [r7, #16]
 801517e:	440a      	add	r2, r1
 8015180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015184:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015188:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801518a:	683b      	ldr	r3, [r7, #0]
 801518c:	781b      	ldrb	r3, [r3, #0]
 801518e:	015a      	lsls	r2, r3, #5
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	4413      	add	r3, r2
 8015194:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	683a      	ldr	r2, [r7, #0]
 801519c:	7812      	ldrb	r2, [r2, #0]
 801519e:	0151      	lsls	r1, r2, #5
 80151a0:	693a      	ldr	r2, [r7, #16]
 80151a2:	440a      	add	r2, r1
 80151a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80151a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80151ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	3301      	adds	r3, #1
 80151b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80151ba:	4293      	cmp	r3, r2
 80151bc:	d902      	bls.n	80151c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80151be:	2301      	movs	r3, #1
 80151c0:	75fb      	strb	r3, [r7, #23]
          break;
 80151c2:	e056      	b.n	8015272 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80151c4:	683b      	ldr	r3, [r7, #0]
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	015a      	lsls	r2, r3, #5
 80151ca:	693b      	ldr	r3, [r7, #16]
 80151cc:	4413      	add	r3, r2
 80151ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80151d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80151dc:	d0e7      	beq.n	80151ae <USB_EPStopXfer+0x82>
 80151de:	e048      	b.n	8015272 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80151e0:	683b      	ldr	r3, [r7, #0]
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	015a      	lsls	r2, r3, #5
 80151e6:	693b      	ldr	r3, [r7, #16]
 80151e8:	4413      	add	r3, r2
 80151ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80151f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80151f8:	d13b      	bne.n	8015272 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80151fa:	683b      	ldr	r3, [r7, #0]
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	015a      	lsls	r2, r3, #5
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	4413      	add	r3, r2
 8015204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	683a      	ldr	r2, [r7, #0]
 801520c:	7812      	ldrb	r2, [r2, #0]
 801520e:	0151      	lsls	r1, r2, #5
 8015210:	693a      	ldr	r2, [r7, #16]
 8015212:	440a      	add	r2, r1
 8015214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015218:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801521c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	015a      	lsls	r2, r3, #5
 8015224:	693b      	ldr	r3, [r7, #16]
 8015226:	4413      	add	r3, r2
 8015228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	7812      	ldrb	r2, [r2, #0]
 8015232:	0151      	lsls	r1, r2, #5
 8015234:	693a      	ldr	r2, [r7, #16]
 8015236:	440a      	add	r2, r1
 8015238:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801523c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015240:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	3301      	adds	r3, #1
 8015246:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801524e:	4293      	cmp	r3, r2
 8015250:	d902      	bls.n	8015258 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015252:	2301      	movs	r3, #1
 8015254:	75fb      	strb	r3, [r7, #23]
          break;
 8015256:	e00c      	b.n	8015272 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	781b      	ldrb	r3, [r3, #0]
 801525c:	015a      	lsls	r2, r3, #5
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	4413      	add	r3, r2
 8015262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801526c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015270:	d0e7      	beq.n	8015242 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015272:	7dfb      	ldrb	r3, [r7, #23]
}
 8015274:	4618      	mov	r0, r3
 8015276:	371c      	adds	r7, #28
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr

08015280 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8015280:	b480      	push	{r7}
 8015282:	b089      	sub	sp, #36	@ 0x24
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	4611      	mov	r1, r2
 801528c:	461a      	mov	r2, r3
 801528e:	460b      	mov	r3, r1
 8015290:	71fb      	strb	r3, [r7, #7]
 8015292:	4613      	mov	r3, r2
 8015294:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801529a:	68bb      	ldr	r3, [r7, #8]
 801529c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801529e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d123      	bne.n	80152ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80152a6:	88bb      	ldrh	r3, [r7, #4]
 80152a8:	3303      	adds	r3, #3
 80152aa:	089b      	lsrs	r3, r3, #2
 80152ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80152ae:	2300      	movs	r3, #0
 80152b0:	61bb      	str	r3, [r7, #24]
 80152b2:	e018      	b.n	80152e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80152b4:	79fb      	ldrb	r3, [r7, #7]
 80152b6:	031a      	lsls	r2, r3, #12
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	4413      	add	r3, r2
 80152bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80152c0:	461a      	mov	r2, r3
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80152c8:	69fb      	ldr	r3, [r7, #28]
 80152ca:	3301      	adds	r3, #1
 80152cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80152ce:	69fb      	ldr	r3, [r7, #28]
 80152d0:	3301      	adds	r3, #1
 80152d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	3301      	adds	r3, #1
 80152d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80152da:	69fb      	ldr	r3, [r7, #28]
 80152dc:	3301      	adds	r3, #1
 80152de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	3301      	adds	r3, #1
 80152e4:	61bb      	str	r3, [r7, #24]
 80152e6:	69ba      	ldr	r2, [r7, #24]
 80152e8:	693b      	ldr	r3, [r7, #16]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d3e2      	bcc.n	80152b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80152ee:	2300      	movs	r3, #0
}
 80152f0:	4618      	mov	r0, r3
 80152f2:	3724      	adds	r7, #36	@ 0x24
 80152f4:	46bd      	mov	sp, r7
 80152f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fa:	4770      	bx	lr

080152fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80152fc:	b480      	push	{r7}
 80152fe:	b08b      	sub	sp, #44	@ 0x2c
 8015300:	af00      	add	r7, sp, #0
 8015302:	60f8      	str	r0, [r7, #12]
 8015304:	60b9      	str	r1, [r7, #8]
 8015306:	4613      	mov	r3, r2
 8015308:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801530e:	68bb      	ldr	r3, [r7, #8]
 8015310:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015312:	88fb      	ldrh	r3, [r7, #6]
 8015314:	089b      	lsrs	r3, r3, #2
 8015316:	b29b      	uxth	r3, r3
 8015318:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801531a:	88fb      	ldrh	r3, [r7, #6]
 801531c:	f003 0303 	and.w	r3, r3, #3
 8015320:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015322:	2300      	movs	r3, #0
 8015324:	623b      	str	r3, [r7, #32]
 8015326:	e014      	b.n	8015352 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801532e:	681a      	ldr	r2, [r3, #0]
 8015330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015332:	601a      	str	r2, [r3, #0]
    pDest++;
 8015334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015336:	3301      	adds	r3, #1
 8015338:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801533c:	3301      	adds	r3, #1
 801533e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015342:	3301      	adds	r3, #1
 8015344:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015348:	3301      	adds	r3, #1
 801534a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801534c:	6a3b      	ldr	r3, [r7, #32]
 801534e:	3301      	adds	r3, #1
 8015350:	623b      	str	r3, [r7, #32]
 8015352:	6a3a      	ldr	r2, [r7, #32]
 8015354:	697b      	ldr	r3, [r7, #20]
 8015356:	429a      	cmp	r2, r3
 8015358:	d3e6      	bcc.n	8015328 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801535a:	8bfb      	ldrh	r3, [r7, #30]
 801535c:	2b00      	cmp	r3, #0
 801535e:	d01e      	beq.n	801539e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015360:	2300      	movs	r3, #0
 8015362:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015364:	69bb      	ldr	r3, [r7, #24]
 8015366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801536a:	461a      	mov	r2, r3
 801536c:	f107 0310 	add.w	r3, r7, #16
 8015370:	6812      	ldr	r2, [r2, #0]
 8015372:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015374:	693a      	ldr	r2, [r7, #16]
 8015376:	6a3b      	ldr	r3, [r7, #32]
 8015378:	b2db      	uxtb	r3, r3
 801537a:	00db      	lsls	r3, r3, #3
 801537c:	fa22 f303 	lsr.w	r3, r2, r3
 8015380:	b2da      	uxtb	r2, r3
 8015382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015384:	701a      	strb	r2, [r3, #0]
      i++;
 8015386:	6a3b      	ldr	r3, [r7, #32]
 8015388:	3301      	adds	r3, #1
 801538a:	623b      	str	r3, [r7, #32]
      pDest++;
 801538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801538e:	3301      	adds	r3, #1
 8015390:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8015392:	8bfb      	ldrh	r3, [r7, #30]
 8015394:	3b01      	subs	r3, #1
 8015396:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015398:	8bfb      	ldrh	r3, [r7, #30]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d1ea      	bne.n	8015374 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80153a0:	4618      	mov	r0, r3
 80153a2:	372c      	adds	r7, #44	@ 0x2c
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b085      	sub	sp, #20
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80153ba:	683b      	ldr	r3, [r7, #0]
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80153c0:	683b      	ldr	r3, [r7, #0]
 80153c2:	785b      	ldrb	r3, [r3, #1]
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d12c      	bne.n	8015422 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	015a      	lsls	r2, r3, #5
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	4413      	add	r3, r2
 80153d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	db12      	blt.n	8015400 <USB_EPSetStall+0x54>
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00f      	beq.n	8015400 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	015a      	lsls	r2, r3, #5
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	4413      	add	r3, r2
 80153e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	68ba      	ldr	r2, [r7, #8]
 80153f0:	0151      	lsls	r1, r2, #5
 80153f2:	68fa      	ldr	r2, [r7, #12]
 80153f4:	440a      	add	r2, r1
 80153f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80153fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80153fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	015a      	lsls	r2, r3, #5
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	4413      	add	r3, r2
 8015408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	68ba      	ldr	r2, [r7, #8]
 8015410:	0151      	lsls	r1, r2, #5
 8015412:	68fa      	ldr	r2, [r7, #12]
 8015414:	440a      	add	r2, r1
 8015416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801541a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801541e:	6013      	str	r3, [r2, #0]
 8015420:	e02b      	b.n	801547a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	015a      	lsls	r2, r3, #5
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	4413      	add	r3, r2
 801542a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	db12      	blt.n	801545a <USB_EPSetStall+0xae>
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d00f      	beq.n	801545a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	015a      	lsls	r2, r3, #5
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	4413      	add	r3, r2
 8015442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	68ba      	ldr	r2, [r7, #8]
 801544a:	0151      	lsls	r1, r2, #5
 801544c:	68fa      	ldr	r2, [r7, #12]
 801544e:	440a      	add	r2, r1
 8015450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015454:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015458:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	015a      	lsls	r2, r3, #5
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	4413      	add	r3, r2
 8015462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	68ba      	ldr	r2, [r7, #8]
 801546a:	0151      	lsls	r1, r2, #5
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	440a      	add	r2, r1
 8015470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015478:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801547a:	2300      	movs	r3, #0
}
 801547c:	4618      	mov	r0, r3
 801547e:	3714      	adds	r7, #20
 8015480:	46bd      	mov	sp, r7
 8015482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015486:	4770      	bx	lr

08015488 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8015488:	b480      	push	{r7}
 801548a:	b085      	sub	sp, #20
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801549c:	683b      	ldr	r3, [r7, #0]
 801549e:	785b      	ldrb	r3, [r3, #1]
 80154a0:	2b01      	cmp	r3, #1
 80154a2:	d128      	bne.n	80154f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	015a      	lsls	r2, r3, #5
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	4413      	add	r3, r2
 80154ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	68ba      	ldr	r2, [r7, #8]
 80154b4:	0151      	lsls	r1, r2, #5
 80154b6:	68fa      	ldr	r2, [r7, #12]
 80154b8:	440a      	add	r2, r1
 80154ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80154c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	791b      	ldrb	r3, [r3, #4]
 80154c8:	2b03      	cmp	r3, #3
 80154ca:	d003      	beq.n	80154d4 <USB_EPClearStall+0x4c>
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	791b      	ldrb	r3, [r3, #4]
 80154d0:	2b02      	cmp	r3, #2
 80154d2:	d138      	bne.n	8015546 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	015a      	lsls	r2, r3, #5
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	4413      	add	r3, r2
 80154dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	68ba      	ldr	r2, [r7, #8]
 80154e4:	0151      	lsls	r1, r2, #5
 80154e6:	68fa      	ldr	r2, [r7, #12]
 80154e8:	440a      	add	r2, r1
 80154ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80154f2:	6013      	str	r3, [r2, #0]
 80154f4:	e027      	b.n	8015546 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80154f6:	68bb      	ldr	r3, [r7, #8]
 80154f8:	015a      	lsls	r2, r3, #5
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	4413      	add	r3, r2
 80154fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	68ba      	ldr	r2, [r7, #8]
 8015506:	0151      	lsls	r1, r2, #5
 8015508:	68fa      	ldr	r2, [r7, #12]
 801550a:	440a      	add	r2, r1
 801550c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015510:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8015514:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015516:	683b      	ldr	r3, [r7, #0]
 8015518:	791b      	ldrb	r3, [r3, #4]
 801551a:	2b03      	cmp	r3, #3
 801551c:	d003      	beq.n	8015526 <USB_EPClearStall+0x9e>
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	791b      	ldrb	r3, [r3, #4]
 8015522:	2b02      	cmp	r3, #2
 8015524:	d10f      	bne.n	8015546 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	015a      	lsls	r2, r3, #5
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	4413      	add	r3, r2
 801552e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	68ba      	ldr	r2, [r7, #8]
 8015536:	0151      	lsls	r1, r2, #5
 8015538:	68fa      	ldr	r2, [r7, #12]
 801553a:	440a      	add	r2, r1
 801553c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8015544:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015546:	2300      	movs	r3, #0
}
 8015548:	4618      	mov	r0, r3
 801554a:	3714      	adds	r7, #20
 801554c:	46bd      	mov	sp, r7
 801554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015552:	4770      	bx	lr

08015554 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015554:	b480      	push	{r7}
 8015556:	b085      	sub	sp, #20
 8015558:	af00      	add	r7, sp, #0
 801555a:	6078      	str	r0, [r7, #4]
 801555c:	460b      	mov	r3, r1
 801555e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	68fa      	ldr	r2, [r7, #12]
 801556e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015572:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8015576:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801557e:	681a      	ldr	r2, [r3, #0]
 8015580:	78fb      	ldrb	r3, [r7, #3]
 8015582:	011b      	lsls	r3, r3, #4
 8015584:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8015588:	68f9      	ldr	r1, [r7, #12]
 801558a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801558e:	4313      	orrs	r3, r2
 8015590:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015592:	2300      	movs	r3, #0
}
 8015594:	4618      	mov	r0, r3
 8015596:	3714      	adds	r7, #20
 8015598:	46bd      	mov	sp, r7
 801559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559e:	4770      	bx	lr

080155a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80155a0:	b480      	push	{r7}
 80155a2:	b085      	sub	sp, #20
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	68fa      	ldr	r2, [r7, #12]
 80155b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80155ba:	f023 0303 	bic.w	r3, r3, #3
 80155be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155c6:	685b      	ldr	r3, [r3, #4]
 80155c8:	68fa      	ldr	r2, [r7, #12]
 80155ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155ce:	f023 0302 	bic.w	r3, r3, #2
 80155d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155d4:	2300      	movs	r3, #0
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3714      	adds	r7, #20
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr

080155e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80155e2:	b480      	push	{r7}
 80155e4:	b085      	sub	sp, #20
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80155f4:	681b      	ldr	r3, [r3, #0]
 80155f6:	68fa      	ldr	r2, [r7, #12]
 80155f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80155fc:	f023 0303 	bic.w	r3, r3, #3
 8015600:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015608:	685b      	ldr	r3, [r3, #4]
 801560a:	68fa      	ldr	r2, [r7, #12]
 801560c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015610:	f043 0302 	orr.w	r3, r3, #2
 8015614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015616:	2300      	movs	r3, #0
}
 8015618:	4618      	mov	r0, r3
 801561a:	3714      	adds	r7, #20
 801561c:	46bd      	mov	sp, r7
 801561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015622:	4770      	bx	lr

08015624 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8015624:	b480      	push	{r7}
 8015626:	b085      	sub	sp, #20
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	695b      	ldr	r3, [r3, #20]
 8015630:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	699b      	ldr	r3, [r3, #24]
 8015636:	68fa      	ldr	r2, [r7, #12]
 8015638:	4013      	ands	r3, r2
 801563a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801563c:	68fb      	ldr	r3, [r7, #12]
}
 801563e:	4618      	mov	r0, r3
 8015640:	3714      	adds	r7, #20
 8015642:	46bd      	mov	sp, r7
 8015644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015648:	4770      	bx	lr

0801564a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801564a:	b480      	push	{r7}
 801564c:	b085      	sub	sp, #20
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801565c:	699b      	ldr	r3, [r3, #24]
 801565e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015666:	69db      	ldr	r3, [r3, #28]
 8015668:	68ba      	ldr	r2, [r7, #8]
 801566a:	4013      	ands	r3, r2
 801566c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	0c1b      	lsrs	r3, r3, #16
}
 8015672:	4618      	mov	r0, r3
 8015674:	3714      	adds	r7, #20
 8015676:	46bd      	mov	sp, r7
 8015678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567c:	4770      	bx	lr

0801567e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801567e:	b480      	push	{r7}
 8015680:	b085      	sub	sp, #20
 8015682:	af00      	add	r7, sp, #0
 8015684:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015690:	699b      	ldr	r3, [r3, #24]
 8015692:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801569a:	69db      	ldr	r3, [r3, #28]
 801569c:	68ba      	ldr	r2, [r7, #8]
 801569e:	4013      	ands	r3, r2
 80156a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80156a2:	68bb      	ldr	r3, [r7, #8]
 80156a4:	b29b      	uxth	r3, r3
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3714      	adds	r7, #20
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr

080156b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80156b2:	b480      	push	{r7}
 80156b4:	b085      	sub	sp, #20
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	460b      	mov	r3, r1
 80156bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80156c2:	78fb      	ldrb	r3, [r7, #3]
 80156c4:	015a      	lsls	r2, r3, #5
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	4413      	add	r3, r2
 80156ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156ce:	689b      	ldr	r3, [r3, #8]
 80156d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80156d8:	695b      	ldr	r3, [r3, #20]
 80156da:	68ba      	ldr	r2, [r7, #8]
 80156dc:	4013      	ands	r3, r2
 80156de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80156e0:	68bb      	ldr	r3, [r7, #8]
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3714      	adds	r7, #20
 80156e6:	46bd      	mov	sp, r7
 80156e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ec:	4770      	bx	lr

080156ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80156ee:	b480      	push	{r7}
 80156f0:	b087      	sub	sp, #28
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	6078      	str	r0, [r7, #4]
 80156f6:	460b      	mov	r3, r1
 80156f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015704:	691b      	ldr	r3, [r3, #16]
 8015706:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801570e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015710:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8015712:	78fb      	ldrb	r3, [r7, #3]
 8015714:	f003 030f 	and.w	r3, r3, #15
 8015718:	68fa      	ldr	r2, [r7, #12]
 801571a:	fa22 f303 	lsr.w	r3, r2, r3
 801571e:	01db      	lsls	r3, r3, #7
 8015720:	b2db      	uxtb	r3, r3
 8015722:	693a      	ldr	r2, [r7, #16]
 8015724:	4313      	orrs	r3, r2
 8015726:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015728:	78fb      	ldrb	r3, [r7, #3]
 801572a:	015a      	lsls	r2, r3, #5
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	4413      	add	r3, r2
 8015730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015734:	689b      	ldr	r3, [r3, #8]
 8015736:	693a      	ldr	r2, [r7, #16]
 8015738:	4013      	ands	r3, r2
 801573a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801573c:	68bb      	ldr	r3, [r7, #8]
}
 801573e:	4618      	mov	r0, r3
 8015740:	371c      	adds	r7, #28
 8015742:	46bd      	mov	sp, r7
 8015744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015748:	4770      	bx	lr

0801574a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801574a:	b480      	push	{r7}
 801574c:	b083      	sub	sp, #12
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	695b      	ldr	r3, [r3, #20]
 8015756:	f003 0301 	and.w	r3, r3, #1
}
 801575a:	4618      	mov	r0, r3
 801575c:	370c      	adds	r7, #12
 801575e:	46bd      	mov	sp, r7
 8015760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015764:	4770      	bx	lr
	...

08015768 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015768:	b480      	push	{r7}
 801576a:	b085      	sub	sp, #20
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801577a:	681a      	ldr	r2, [r3, #0]
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015782:	4619      	mov	r1, r3
 8015784:	4b09      	ldr	r3, [pc, #36]	@ (80157ac <USB_ActivateSetup+0x44>)
 8015786:	4013      	ands	r3, r2
 8015788:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	68fa      	ldr	r2, [r7, #12]
 8015794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801579c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801579e:	2300      	movs	r3, #0
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3714      	adds	r7, #20
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr
 80157ac:	fffff800 	.word	0xfffff800

080157b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80157b0:	b480      	push	{r7}
 80157b2:	b087      	sub	sp, #28
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	60f8      	str	r0, [r7, #12]
 80157b8:	460b      	mov	r3, r1
 80157ba:	607a      	str	r2, [r7, #4]
 80157bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	333c      	adds	r3, #60	@ 0x3c
 80157c6:	3304      	adds	r3, #4
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	4a26      	ldr	r2, [pc, #152]	@ (8015868 <USB_EP0_OutStart+0xb8>)
 80157d0:	4293      	cmp	r3, r2
 80157d2:	d90a      	bls.n	80157ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80157d4:	697b      	ldr	r3, [r7, #20]
 80157d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80157e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80157e4:	d101      	bne.n	80157ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80157e6:	2300      	movs	r3, #0
 80157e8:	e037      	b.n	801585a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80157f0:	461a      	mov	r2, r3
 80157f2:	2300      	movs	r3, #0
 80157f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80157f6:	697b      	ldr	r3, [r7, #20]
 80157f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80157fc:	691b      	ldr	r3, [r3, #16]
 80157fe:	697a      	ldr	r2, [r7, #20]
 8015800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015810:	691b      	ldr	r3, [r3, #16]
 8015812:	697a      	ldr	r2, [r7, #20]
 8015814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015818:	f043 0318 	orr.w	r3, r3, #24
 801581c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015824:	691b      	ldr	r3, [r3, #16]
 8015826:	697a      	ldr	r2, [r7, #20]
 8015828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801582c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015830:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8015832:	7afb      	ldrb	r3, [r7, #11]
 8015834:	2b01      	cmp	r3, #1
 8015836:	d10f      	bne.n	8015858 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801583e:	461a      	mov	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8015844:	697b      	ldr	r3, [r7, #20]
 8015846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	697a      	ldr	r2, [r7, #20]
 801584e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015852:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8015856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015858:	2300      	movs	r3, #0
}
 801585a:	4618      	mov	r0, r3
 801585c:	371c      	adds	r7, #28
 801585e:	46bd      	mov	sp, r7
 8015860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015864:	4770      	bx	lr
 8015866:	bf00      	nop
 8015868:	4f54300a 	.word	0x4f54300a

0801586c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801586c:	b480      	push	{r7}
 801586e:	b085      	sub	sp, #20
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015874:	2300      	movs	r3, #0
 8015876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	3301      	adds	r3, #1
 801587c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8015884:	d901      	bls.n	801588a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8015886:	2303      	movs	r3, #3
 8015888:	e01b      	b.n	80158c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	691b      	ldr	r3, [r3, #16]
 801588e:	2b00      	cmp	r3, #0
 8015890:	daf2      	bge.n	8015878 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8015892:	2300      	movs	r3, #0
 8015894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	691b      	ldr	r3, [r3, #16]
 801589a:	f043 0201 	orr.w	r2, r3, #1
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	3301      	adds	r3, #1
 80158a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80158ae:	d901      	bls.n	80158b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80158b0:	2303      	movs	r3, #3
 80158b2:	e006      	b.n	80158c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	691b      	ldr	r3, [r3, #16]
 80158b8:	f003 0301 	and.w	r3, r3, #1
 80158bc:	2b01      	cmp	r3, #1
 80158be:	d0f0      	beq.n	80158a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80158c0:	2300      	movs	r3, #0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3714      	adds	r7, #20
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr

080158ce <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 80158ce:	b580      	push	{r7, lr}
 80158d0:	b082      	sub	sp, #8
 80158d2:	af00      	add	r7, sp, #0
 80158d4:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2200      	movs	r2, #0
 80158da:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	2200      	movs	r2, #0
 80158e0:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2200      	movs	r2, #0
 80158e6:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2200      	movs	r2, #0
 80158ec:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2200      	movs	r2, #0
 80158f2:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	2200      	movs	r2, #0
 80158f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2200      	movs	r2, #0
 8015900:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 8015904:	2044      	movs	r0, #68	@ 0x44
 8015906:	f003 fc3f 	bl	8019188 <malloc>
 801590a:	4603      	mov	r3, r0
 801590c:	461a      	mov	r2, r3
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 8015912:	2044      	movs	r0, #68	@ 0x44
 8015914:	f003 fc38 	bl	8019188 <malloc>
 8015918:	4603      	mov	r3, r0
 801591a:	461a      	mov	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	7e1b      	ldrb	r3, [r3, #24]
 8015924:	461a      	mov	r2, r3
 8015926:	4613      	mov	r3, r2
 8015928:	011b      	lsls	r3, r3, #4
 801592a:	4413      	add	r3, r2
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	4618      	mov	r0, r3
 8015930:	f003 fc2a 	bl	8019188 <malloc>
 8015934:	4603      	mov	r3, r0
 8015936:	461a      	mov	r2, r3
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015942:	461a      	mov	r2, r3
 8015944:	4613      	mov	r3, r2
 8015946:	011b      	lsls	r3, r3, #4
 8015948:	4413      	add	r3, r2
 801594a:	009b      	lsls	r3, r3, #2
 801594c:	4618      	mov	r0, r3
 801594e:	f003 fc1b 	bl	8019188 <malloc>
 8015952:	4603      	mov	r3, r0
 8015954:	461a      	mov	r2, r3
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6818      	ldr	r0, [r3, #0]
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	689b      	ldr	r3, [r3, #8]
 8015962:	2244      	movs	r2, #68	@ 0x44
 8015964:	4619      	mov	r1, r3
 8015966:	f7fc fd4b 	bl	8012400 <HAL_UART_Receive_DMA>
 801596a:	4603      	mov	r3, r0
}
 801596c:	4618      	mov	r0, r3
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 8015974:	b480      	push	{r7}
 8015976:	b087      	sub	sp, #28
 8015978:	af00      	add	r7, sp, #0
 801597a:	60f8      	str	r0, [r7, #12]
 801597c:	60b9      	str	r1, [r7, #8]
 801597e:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	7e9a      	ldrb	r2, [r3, #26]
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	7e5b      	ldrb	r3, [r3, #25]
 8015988:	429a      	cmp	r2, r3
 801598a:	d101      	bne.n	8015990 <XBEE_RXPacket+0x1c>
 801598c:	2301      	movs	r3, #1
 801598e:	e03c      	b.n	8015a0a <XBEE_RXPacket+0x96>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	695a      	ldr	r2, [r3, #20]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	7e9b      	ldrb	r3, [r3, #26]
 8015998:	4619      	mov	r1, r3
 801599a:	460b      	mov	r3, r1
 801599c:	011b      	lsls	r3, r3, #4
 801599e:	440b      	add	r3, r1
 80159a0:	009b      	lsls	r3, r3, #2
 80159a2:	4413      	add	r3, r2
 80159a4:	617b      	str	r3, [r7, #20]

	// Get the 16 bit packet number field
	*pkt_num = 0;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2200      	movs	r2, #0
 80159aa:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	881b      	ldrh	r3, [r3, #0]
 80159b0:	697a      	ldr	r2, [r7, #20]
 80159b2:	3201      	adds	r2, #1
 80159b4:	7812      	ldrb	r2, [r2, #0]
 80159b6:	4413      	add	r3, r2
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	881b      	ldrh	r3, [r3, #0]
 80159c2:	021b      	lsls	r3, r3, #8
 80159c4:	b29a      	uxth	r2, r3
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	881b      	ldrh	r3, [r3, #0]
 80159ce:	697a      	ldr	r2, [r7, #20]
 80159d0:	3202      	adds	r2, #2
 80159d2:	7812      	ldrb	r2, [r2, #0]
 80159d4:	4413      	add	r3, r2
 80159d6:	b29a      	uxth	r2, r3
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	1d1a      	adds	r2, r3, #4
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	601a      	str	r2, [r3, #0]

	hxbee->pktRx_idxPop += 1;
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	7e9b      	ldrb	r3, [r3, #26]
 80159e8:	3301      	adds	r3, #1
 80159ea:	b2da      	uxtb	r2, r3
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	7e9b      	ldrb	r3, [r3, #26]
 80159f4:	68fa      	ldr	r2, [r7, #12]
 80159f6:	7e12      	ldrb	r2, [r2, #24]
 80159f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80159fc:	fb01 f202 	mul.w	r2, r1, r2
 8015a00:	1a9b      	subs	r3, r3, r2
 8015a02:	b2da      	uxtb	r2, r3
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	769a      	strb	r2, [r3, #26]

	return 0;
 8015a08:	2300      	movs	r3, #0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	371c      	adds	r7, #28
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a14:	4770      	bx	lr
	...

08015a18 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b096      	sub	sp, #88	@ 0x58
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	7e5b      	ldrb	r3, [r3, #25]
 8015a24:	3301      	adds	r3, #1
 8015a26:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	7e1a      	ldrb	r2, [r3, #24]
 8015a2e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015a32:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a36:	fb01 f202 	mul.w	r2, r1, r2
 8015a3a:	1a9b      	subs	r3, r3, r2
 8015a3c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	7e9b      	ldrb	r3, [r3, #26]
 8015a44:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015a48:	429a      	cmp	r2, r3
 8015a4a:	d101      	bne.n	8015a50 <XBEE_RX_DMACallback+0x38>
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	e097      	b.n	8015b80 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	7c1b      	ldrb	r3, [r3, #16]
 8015a54:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015a5e:	2300      	movs	r3, #0
 8015a60:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8015a64:	e027      	b.n	8015ab6 <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 8015a66:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	7c12      	ldrb	r2, [r2, #16]
 8015a6e:	441a      	add	r2, r3
 8015a70:	4b45      	ldr	r3, [pc, #276]	@ (8015b88 <XBEE_RX_DMACallback+0x170>)
 8015a72:	fb83 1302 	smull	r1, r3, r3, r2
 8015a76:	1159      	asrs	r1, r3, #5
 8015a78:	17d3      	asrs	r3, r2, #31
 8015a7a:	1ac9      	subs	r1, r1, r3
 8015a7c:	460b      	mov	r3, r1
 8015a7e:	011b      	lsls	r3, r3, #4
 8015a80:	440b      	add	r3, r1
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	1ad1      	subs	r1, r2, r3
 8015a86:	460b      	mov	r3, r1
 8015a88:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	689a      	ldr	r2, [r3, #8]
 8015a90:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8015a94:	4413      	add	r3, r2
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	2baa      	cmp	r3, #170	@ 0xaa
 8015a9a:	d107      	bne.n	8015aac <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8015aa8:	741a      	strb	r2, [r3, #16]
			break;
 8015aaa:	e008      	b.n	8015abe <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015aac:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015ab0:	3301      	adds	r3, #1
 8015ab2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8015ab6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015aba:	2b43      	cmp	r3, #67	@ 0x43
 8015abc:	d9d3      	bls.n	8015a66 <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 8015abe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d101      	bne.n	8015aca <XBEE_RX_DMACallback+0xb2>
 8015ac6:	2302      	movs	r3, #2
 8015ac8:	e05a      	b.n	8015b80 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	68da      	ldr	r2, [r3, #12]
 8015ace:	f107 030c 	add.w	r3, r7, #12
 8015ad2:	4611      	mov	r1, r2
 8015ad4:	2244      	movs	r2, #68	@ 0x44
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f003 fc7a 	bl	80193d0 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	68d8      	ldr	r0, [r3, #12]
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	687a      	ldr	r2, [r7, #4]
 8015ae6:	7c12      	ldrb	r2, [r2, #16]
 8015ae8:	1899      	adds	r1, r3, r2
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	7c1b      	ldrb	r3, [r3, #16]
 8015aee:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015af2:	461a      	mov	r2, r3
 8015af4:	f003 fc6c 	bl	80193d0 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	7c1b      	ldrb	r3, [r3, #16]
 8015afc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015b00:	429a      	cmp	r2, r3
 8015b02:	d201      	bcs.n	8015b08 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8015b04:	2302      	movs	r3, #2
 8015b06:	e03b      	b.n	8015b80 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8015b08:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	7c12      	ldrb	r2, [r2, #16]
 8015b12:	1a9b      	subs	r3, r3, r2
 8015b14:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8015b18:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015b1c:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015b20:	461a      	mov	r2, r3
 8015b22:	f107 030c 	add.w	r3, r7, #12
 8015b26:	4413      	add	r3, r2
 8015b28:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015b2c:	2100      	movs	r1, #0
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f003 fc02 	bl	8019338 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8015b34:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015b38:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015b3c:	1ad3      	subs	r3, r2, r3
 8015b3e:	3344      	adds	r3, #68	@ 0x44
 8015b40:	f107 020c 	add.w	r2, r7, #12
 8015b44:	18d0      	adds	r0, r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6899      	ldr	r1, [r3, #8]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	7c1b      	ldrb	r3, [r3, #16]
 8015b4e:	461a      	mov	r2, r3
 8015b50:	f003 fc3e 	bl	80193d0 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015b5a:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	695a      	ldr	r2, [r3, #20]
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	7e5b      	ldrb	r3, [r3, #25]
 8015b64:	4619      	mov	r1, r3
 8015b66:	460b      	mov	r3, r1
 8015b68:	011b      	lsls	r3, r3, #4
 8015b6a:	440b      	add	r3, r1
 8015b6c:	009b      	lsls	r3, r3, #2
 8015b6e:	4413      	add	r3, r2
 8015b70:	4618      	mov	r0, r3
 8015b72:	f107 030c 	add.w	r3, r7, #12
 8015b76:	2244      	movs	r2, #68	@ 0x44
 8015b78:	4619      	mov	r1, r3
 8015b7a:	f003 fc29 	bl	80193d0 <memcpy>

	return 0;
 8015b7e:	2300      	movs	r3, #0
}
 8015b80:	4618      	mov	r0, r3
 8015b82:	3758      	adds	r7, #88	@ 0x58
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	78787879 	.word	0x78787879

08015b8c <AllocateValueArr>:
#include "MenuOLED.h"

// FUNCS
// ------------------------------------------------------------------------------------

uint8_t* AllocateValueArr(uint8_t num) {
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b082      	sub	sp, #8
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	4603      	mov	r3, r0
 8015b94:	71fb      	strb	r3, [r7, #7]
	return (uint8_t*)malloc(sizeof(uint8_t)*num);
 8015b96:	79fb      	ldrb	r3, [r7, #7]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f003 faf5 	bl	8019188 <malloc>
 8015b9e:	4603      	mov	r3, r0
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	3708      	adds	r7, #8
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	bd80      	pop	{r7, pc}

08015ba8 <AllocateString>:

uint8_t* AllocateString(uint8_t* src) {
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b09c      	sub	sp, #112	@ 0x70
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
	uint8_t str_tmp[100];
	uint8_t* dst = (uint8_t*)malloc(strlen(src)+1);
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f7ea fb95 	bl	80002e0 <strlen>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	3301      	adds	r3, #1
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f003 fae4 	bl	8019188 <malloc>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	strcpy(dst, src);
 8015bc4:	6879      	ldr	r1, [r7, #4]
 8015bc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015bc8:	f003 fbfa 	bl	80193c0 <strcpy>
	return dst;
 8015bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3770      	adds	r7, #112	@ 0x70
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <AllocateStringArr>:

uint8_t** AllocateStringArr(uint8_t num) {
 8015bd6:	b580      	push	{r7, lr}
 8015bd8:	b082      	sub	sp, #8
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	4603      	mov	r3, r0
 8015bde:	71fb      	strb	r3, [r7, #7]
	return (uint8_t**)malloc(sizeof(uint8_t*)*num);
 8015be0:	79fb      	ldrb	r3, [r7, #7]
 8015be2:	009b      	lsls	r3, r3, #2
 8015be4:	4618      	mov	r0, r3
 8015be6:	f003 facf 	bl	8019188 <malloc>
 8015bea:	4603      	mov	r3, r0
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	3708      	adds	r7, #8
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}

08015bf4 <AllocateProperties>:

Menu_Property* AllocateProperties(uint8_t num) {
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b082      	sub	sp, #8
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	71fb      	strb	r3, [r7, #7]
	return (Menu_Property*)malloc(sizeof(Menu_Property)*num);
 8015bfe:	79fb      	ldrb	r3, [r7, #7]
 8015c00:	011b      	lsls	r3, r3, #4
 8015c02:	4618      	mov	r0, r3
 8015c04:	f003 fac0 	bl	8019188 <malloc>
 8015c08:	4603      	mov	r3, r0
}
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	3708      	adds	r7, #8
 8015c0e:	46bd      	mov	sp, r7
 8015c10:	bd80      	pop	{r7, pc}

08015c12 <AllocatePages>:

Menu_Page* AllocatePages(uint8_t num) {
 8015c12:	b580      	push	{r7, lr}
 8015c14:	b082      	sub	sp, #8
 8015c16:	af00      	add	r7, sp, #0
 8015c18:	4603      	mov	r3, r0
 8015c1a:	71fb      	strb	r3, [r7, #7]
	return (Menu_Page*)malloc(sizeof(Menu_Page)*num);
 8015c1c:	79fa      	ldrb	r2, [r7, #7]
 8015c1e:	4613      	mov	r3, r2
 8015c20:	005b      	lsls	r3, r3, #1
 8015c22:	4413      	add	r3, r2
 8015c24:	009b      	lsls	r3, r3, #2
 8015c26:	4618      	mov	r0, r3
 8015c28:	f003 faae 	bl	8019188 <malloc>
 8015c2c:	4603      	mov	r3, r0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3708      	adds	r7, #8
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}
	...

08015c38 <MENU_Init>:

uint8_t MENU_Init(Menu_HandleTypeDef *hmenu) {
 8015c38:	b590      	push	{r4, r7, lr}
 8015c3a:	b083      	sub	sp, #12
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
	// a buncha of work incoming

	// Allocate pages
	hmenu->num_pages = 2;
 8015c40:	687b      	ldr	r3, [r7, #4]
 8015c42:	2202      	movs	r2, #2
 8015c44:	721a      	strb	r2, [r3, #8]
	hmenu->pages = AllocatePages(hmenu->num_pages);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	7a1b      	ldrb	r3, [r3, #8]
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f7ff ffe1 	bl	8015c12 <AllocatePages>
 8015c50:	4602      	mov	r2, r0
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	60da      	str	r2, [r3, #12]

	// PAGE 0 (CAMERA)
	hmenu->pages[0].title = AllocateString("CAMERA");
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	68dc      	ldr	r4, [r3, #12]
 8015c5a:	48a2      	ldr	r0, [pc, #648]	@ (8015ee4 <MENU_Init+0x2ac>)
 8015c5c:	f7ff ffa4 	bl	8015ba8 <AllocateString>
 8015c60:	4603      	mov	r3, r0
 8015c62:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].num_properties = 2;
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	2202      	movs	r2, #2
 8015c6a:	711a      	strb	r2, [r3, #4]
	hmenu->pages[0].properties = AllocateProperties(hmenu->pages[0].num_properties);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	68db      	ldr	r3, [r3, #12]
 8015c70:	791a      	ldrb	r2, [r3, #4]
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	68dc      	ldr	r4, [r3, #12]
 8015c76:	4610      	mov	r0, r2
 8015c78:	f7ff ffbc 	bl	8015bf4 <AllocateProperties>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	60a3      	str	r3, [r4, #8]

	// Camera Mode
	hmenu->pages[0].properties[0].name = AllocateString("ENCODING");
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	68db      	ldr	r3, [r3, #12]
 8015c84:	689c      	ldr	r4, [r3, #8]
 8015c86:	4898      	ldr	r0, [pc, #608]	@ (8015ee8 <MENU_Init+0x2b0>)
 8015c88:	f7ff ff8e 	bl	8015ba8 <AllocateString>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].packet_byte = 0;
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	68db      	ldr	r3, [r3, #12]
 8015c94:	689b      	ldr	r3, [r3, #8]
 8015c96:	2200      	movs	r2, #0
 8015c98:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[0].num_options = 3;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	689b      	ldr	r3, [r3, #8]
 8015ca0:	2203      	movs	r2, #3
 8015ca2:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[0].option_names = AllocateStringArr(hmenu->pages[0].properties[0].num_options);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	689b      	ldr	r3, [r3, #8]
 8015caa:	795a      	ldrb	r2, [r3, #5]
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	68db      	ldr	r3, [r3, #12]
 8015cb0:	689c      	ldr	r4, [r3, #8]
 8015cb2:	4610      	mov	r0, r2
 8015cb4:	f7ff ff8f 	bl	8015bd6 <AllocateStringArr>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[0].option_names[0] = AllocateString("JPEG");
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	68db      	ldr	r3, [r3, #12]
 8015cc0:	689b      	ldr	r3, [r3, #8]
 8015cc2:	689c      	ldr	r4, [r3, #8]
 8015cc4:	4889      	ldr	r0, [pc, #548]	@ (8015eec <MENU_Init+0x2b4>)
 8015cc6:	f7ff ff6f 	bl	8015ba8 <AllocateString>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[1] = AllocateString("GRAYSCALE");
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	68db      	ldr	r3, [r3, #12]
 8015cd2:	689b      	ldr	r3, [r3, #8]
 8015cd4:	689b      	ldr	r3, [r3, #8]
 8015cd6:	1d1c      	adds	r4, r3, #4
 8015cd8:	4885      	ldr	r0, [pc, #532]	@ (8015ef0 <MENU_Init+0x2b8>)
 8015cda:	f7ff ff65 	bl	8015ba8 <AllocateString>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[2] = AllocateString("COLOUR");
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	68db      	ldr	r3, [r3, #12]
 8015ce6:	689b      	ldr	r3, [r3, #8]
 8015ce8:	689b      	ldr	r3, [r3, #8]
 8015cea:	f103 0408 	add.w	r4, r3, #8
 8015cee:	4881      	ldr	r0, [pc, #516]	@ (8015ef4 <MENU_Init+0x2bc>)
 8015cf0:	f7ff ff5a 	bl	8015ba8 <AllocateString>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].properties[0].option_values = AllocateValueArr(hmenu->pages[0].properties[0].num_options);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	68db      	ldr	r3, [r3, #12]
 8015cfc:	689b      	ldr	r3, [r3, #8]
 8015cfe:	795a      	ldrb	r2, [r3, #5]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	68db      	ldr	r3, [r3, #12]
 8015d04:	689c      	ldr	r4, [r3, #8]
 8015d06:	4610      	mov	r0, r2
 8015d08:	f7ff ff40 	bl	8015b8c <AllocateValueArr>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	60e3      	str	r3, [r4, #12]
	hmenu->pages[0].properties[0].option_names[0] = 0x00;
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	689b      	ldr	r3, [r3, #8]
 8015d16:	689b      	ldr	r3, [r3, #8]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	601a      	str	r2, [r3, #0]
	hmenu->pages[0].properties[0].option_names[1] = 0x01;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	689b      	ldr	r3, [r3, #8]
 8015d22:	689b      	ldr	r3, [r3, #8]
 8015d24:	3304      	adds	r3, #4
 8015d26:	2201      	movs	r2, #1
 8015d28:	601a      	str	r2, [r3, #0]
	hmenu->pages[0].properties[0].option_names[2] = 0x02;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	68db      	ldr	r3, [r3, #12]
 8015d2e:	689b      	ldr	r3, [r3, #8]
 8015d30:	689b      	ldr	r3, [r3, #8]
 8015d32:	3308      	adds	r3, #8
 8015d34:	2202      	movs	r2, #2
 8015d36:	601a      	str	r2, [r3, #0]

	// Camera Quality
	hmenu->pages[0].properties[1].name = AllocateString("QUALITY");
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	689b      	ldr	r3, [r3, #8]
 8015d3e:	f103 0410 	add.w	r4, r3, #16
 8015d42:	486d      	ldr	r0, [pc, #436]	@ (8015ef8 <MENU_Init+0x2c0>)
 8015d44:	f7ff ff30 	bl	8015ba8 <AllocateString>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].packet_byte = 1;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	689b      	ldr	r3, [r3, #8]
 8015d52:	3310      	adds	r3, #16
 8015d54:	2201      	movs	r2, #1
 8015d56:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[1].num_options = 4;
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	68db      	ldr	r3, [r3, #12]
 8015d5c:	689b      	ldr	r3, [r3, #8]
 8015d5e:	3310      	adds	r3, #16
 8015d60:	2204      	movs	r2, #4
 8015d62:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[1].option_names = AllocateStringArr(hmenu->pages[0].properties[1].num_options);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	68db      	ldr	r3, [r3, #12]
 8015d68:	689b      	ldr	r3, [r3, #8]
 8015d6a:	3310      	adds	r3, #16
 8015d6c:	795a      	ldrb	r2, [r3, #5]
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	68db      	ldr	r3, [r3, #12]
 8015d72:	689b      	ldr	r3, [r3, #8]
 8015d74:	f103 0410 	add.w	r4, r3, #16
 8015d78:	4610      	mov	r0, r2
 8015d7a:	f7ff ff2c 	bl	8015bd6 <AllocateStringArr>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[1].option_names[0] = AllocateString("F**KED");
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	689b      	ldr	r3, [r3, #8]
 8015d88:	3310      	adds	r3, #16
 8015d8a:	689c      	ldr	r4, [r3, #8]
 8015d8c:	485b      	ldr	r0, [pc, #364]	@ (8015efc <MENU_Init+0x2c4>)
 8015d8e:	f7ff ff0b 	bl	8015ba8 <AllocateString>
 8015d92:	4603      	mov	r3, r0
 8015d94:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[1] = AllocateString("WORSE");
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	68db      	ldr	r3, [r3, #12]
 8015d9a:	689b      	ldr	r3, [r3, #8]
 8015d9c:	3310      	adds	r3, #16
 8015d9e:	689b      	ldr	r3, [r3, #8]
 8015da0:	1d1c      	adds	r4, r3, #4
 8015da2:	4857      	ldr	r0, [pc, #348]	@ (8015f00 <MENU_Init+0x2c8>)
 8015da4:	f7ff ff00 	bl	8015ba8 <AllocateString>
 8015da8:	4603      	mov	r3, r0
 8015daa:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[2] = AllocateString("BAD");
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	68db      	ldr	r3, [r3, #12]
 8015db0:	689b      	ldr	r3, [r3, #8]
 8015db2:	3310      	adds	r3, #16
 8015db4:	689b      	ldr	r3, [r3, #8]
 8015db6:	f103 0408 	add.w	r4, r3, #8
 8015dba:	4852      	ldr	r0, [pc, #328]	@ (8015f04 <MENU_Init+0x2cc>)
 8015dbc:	f7ff fef4 	bl	8015ba8 <AllocateString>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[3] = AllocateString("EVENTUALLY");
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	689b      	ldr	r3, [r3, #8]
 8015dca:	3310      	adds	r3, #16
 8015dcc:	689b      	ldr	r3, [r3, #8]
 8015dce:	f103 040c 	add.w	r4, r3, #12
 8015dd2:	484d      	ldr	r0, [pc, #308]	@ (8015f08 <MENU_Init+0x2d0>)
 8015dd4:	f7ff fee8 	bl	8015ba8 <AllocateString>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].properties[1].option_values = AllocateValueArr(hmenu->pages[0].properties[1].num_options);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	68db      	ldr	r3, [r3, #12]
 8015de0:	689b      	ldr	r3, [r3, #8]
 8015de2:	3310      	adds	r3, #16
 8015de4:	795a      	ldrb	r2, [r3, #5]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	68db      	ldr	r3, [r3, #12]
 8015dea:	689b      	ldr	r3, [r3, #8]
 8015dec:	f103 0410 	add.w	r4, r3, #16
 8015df0:	4610      	mov	r0, r2
 8015df2:	f7ff fecb 	bl	8015b8c <AllocateValueArr>
 8015df6:	4603      	mov	r3, r0
 8015df8:	60e3      	str	r3, [r4, #12]
	hmenu->pages[0].properties[1].option_names[0] = 0x00;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	68db      	ldr	r3, [r3, #12]
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	3310      	adds	r3, #16
 8015e02:	689b      	ldr	r3, [r3, #8]
 8015e04:	2200      	movs	r2, #0
 8015e06:	601a      	str	r2, [r3, #0]
	hmenu->pages[0].properties[1].option_names[1] = 0x01;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	68db      	ldr	r3, [r3, #12]
 8015e0c:	689b      	ldr	r3, [r3, #8]
 8015e0e:	3310      	adds	r3, #16
 8015e10:	689b      	ldr	r3, [r3, #8]
 8015e12:	3304      	adds	r3, #4
 8015e14:	2201      	movs	r2, #1
 8015e16:	601a      	str	r2, [r3, #0]
	hmenu->pages[0].properties[1].option_names[2] = 0x02;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	689b      	ldr	r3, [r3, #8]
 8015e1e:	3310      	adds	r3, #16
 8015e20:	689b      	ldr	r3, [r3, #8]
 8015e22:	3308      	adds	r3, #8
 8015e24:	2202      	movs	r2, #2
 8015e26:	601a      	str	r2, [r3, #0]
	hmenu->pages[0].properties[1].option_names[3] = 0x03;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	68db      	ldr	r3, [r3, #12]
 8015e2c:	689b      	ldr	r3, [r3, #8]
 8015e2e:	3310      	adds	r3, #16
 8015e30:	689b      	ldr	r3, [r3, #8]
 8015e32:	330c      	adds	r3, #12
 8015e34:	2203      	movs	r2, #3
 8015e36:	601a      	str	r2, [r3, #0]

	// PAGE 1 (LIGHTS)
	hmenu->pages[1].title = AllocateString("LIGHTING");
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	68db      	ldr	r3, [r3, #12]
 8015e3c:	f103 040c 	add.w	r4, r3, #12
 8015e40:	4832      	ldr	r0, [pc, #200]	@ (8015f0c <MENU_Init+0x2d4>)
 8015e42:	f7ff feb1 	bl	8015ba8 <AllocateString>
 8015e46:	4603      	mov	r3, r0
 8015e48:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].num_properties = 4;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	68db      	ldr	r3, [r3, #12]
 8015e4e:	330c      	adds	r3, #12
 8015e50:	2204      	movs	r2, #4
 8015e52:	711a      	strb	r2, [r3, #4]
	hmenu->pages[1].properties = AllocateProperties(hmenu->pages[1].num_properties);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	68db      	ldr	r3, [r3, #12]
 8015e58:	330c      	adds	r3, #12
 8015e5a:	791a      	ldrb	r2, [r3, #4]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	f103 040c 	add.w	r4, r3, #12
 8015e64:	4610      	mov	r0, r2
 8015e66:	f7ff fec5 	bl	8015bf4 <AllocateProperties>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	60a3      	str	r3, [r4, #8]

	hmenu->pages[1].properties[0].name = AllocateString("HEADLIGHTS");
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	68db      	ldr	r3, [r3, #12]
 8015e72:	330c      	adds	r3, #12
 8015e74:	689c      	ldr	r4, [r3, #8]
 8015e76:	4826      	ldr	r0, [pc, #152]	@ (8015f10 <MENU_Init+0x2d8>)
 8015e78:	f7ff fe96 	bl	8015ba8 <AllocateString>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].packet_byte = 2;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	330c      	adds	r3, #12
 8015e86:	689b      	ldr	r3, [r3, #8]
 8015e88:	2202      	movs	r2, #2
 8015e8a:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[0].num_options = 5;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	68db      	ldr	r3, [r3, #12]
 8015e90:	330c      	adds	r3, #12
 8015e92:	689b      	ldr	r3, [r3, #8]
 8015e94:	2205      	movs	r2, #5
 8015e96:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[0].option_names = AllocateStringArr(hmenu->pages[1].properties[0].num_options);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	68db      	ldr	r3, [r3, #12]
 8015e9c:	330c      	adds	r3, #12
 8015e9e:	689b      	ldr	r3, [r3, #8]
 8015ea0:	795a      	ldrb	r2, [r3, #5]
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	68db      	ldr	r3, [r3, #12]
 8015ea6:	330c      	adds	r3, #12
 8015ea8:	689c      	ldr	r4, [r3, #8]
 8015eaa:	4610      	mov	r0, r2
 8015eac:	f7ff fe93 	bl	8015bd6 <AllocateStringArr>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	60a3      	str	r3, [r4, #8]
	hmenu->pages[1].properties[0].option_names[0] = AllocateString("[    ]");
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	330c      	adds	r3, #12
 8015eba:	689b      	ldr	r3, [r3, #8]
 8015ebc:	689c      	ldr	r4, [r3, #8]
 8015ebe:	4815      	ldr	r0, [pc, #84]	@ (8015f14 <MENU_Init+0x2dc>)
 8015ec0:	f7ff fe72 	bl	8015ba8 <AllocateString>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].option_names[1] = AllocateString("[|   ]");
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	330c      	adds	r3, #12
 8015ece:	689b      	ldr	r3, [r3, #8]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	1d1c      	adds	r4, r3, #4
 8015ed4:	4810      	ldr	r0, [pc, #64]	@ (8015f18 <MENU_Init+0x2e0>)
 8015ed6:	f7ff fe67 	bl	8015ba8 <AllocateString>
 8015eda:	4603      	mov	r3, r0
 8015edc:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].option_names[2] = AllocateString("[||  ]");
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	e01c      	b.n	8015f1c <MENU_Init+0x2e4>
 8015ee2:	bf00      	nop
 8015ee4:	08019ba0 	.word	0x08019ba0
 8015ee8:	08019ba8 	.word	0x08019ba8
 8015eec:	08019bb4 	.word	0x08019bb4
 8015ef0:	08019bbc 	.word	0x08019bbc
 8015ef4:	08019bc8 	.word	0x08019bc8
 8015ef8:	08019bd0 	.word	0x08019bd0
 8015efc:	08019bd8 	.word	0x08019bd8
 8015f00:	08019be0 	.word	0x08019be0
 8015f04:	08019be8 	.word	0x08019be8
 8015f08:	08019bec 	.word	0x08019bec
 8015f0c:	08019bf8 	.word	0x08019bf8
 8015f10:	08019c04 	.word	0x08019c04
 8015f14:	08019c10 	.word	0x08019c10
 8015f18:	08019c18 	.word	0x08019c18
 8015f1c:	68db      	ldr	r3, [r3, #12]
 8015f1e:	330c      	adds	r3, #12
 8015f20:	689b      	ldr	r3, [r3, #8]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	f103 0408 	add.w	r4, r3, #8
 8015f28:	48a8      	ldr	r0, [pc, #672]	@ (80161cc <MENU_Init+0x594>)
 8015f2a:	f7ff fe3d 	bl	8015ba8 <AllocateString>
 8015f2e:	4603      	mov	r3, r0
 8015f30:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].option_names[3] = AllocateString("[||| ]");
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	68db      	ldr	r3, [r3, #12]
 8015f36:	330c      	adds	r3, #12
 8015f38:	689b      	ldr	r3, [r3, #8]
 8015f3a:	689b      	ldr	r3, [r3, #8]
 8015f3c:	f103 040c 	add.w	r4, r3, #12
 8015f40:	48a3      	ldr	r0, [pc, #652]	@ (80161d0 <MENU_Init+0x598>)
 8015f42:	f7ff fe31 	bl	8015ba8 <AllocateString>
 8015f46:	4603      	mov	r3, r0
 8015f48:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].option_names[4] = AllocateString("[||||]");
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	68db      	ldr	r3, [r3, #12]
 8015f4e:	330c      	adds	r3, #12
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	689b      	ldr	r3, [r3, #8]
 8015f54:	f103 0410 	add.w	r4, r3, #16
 8015f58:	489e      	ldr	r0, [pc, #632]	@ (80161d4 <MENU_Init+0x59c>)
 8015f5a:	f7ff fe25 	bl	8015ba8 <AllocateString>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].properties[0].option_values = AllocateValueArr(hmenu->pages[1].properties[0].num_options);
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	330c      	adds	r3, #12
 8015f68:	689b      	ldr	r3, [r3, #8]
 8015f6a:	795a      	ldrb	r2, [r3, #5]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	68db      	ldr	r3, [r3, #12]
 8015f70:	330c      	adds	r3, #12
 8015f72:	689c      	ldr	r4, [r3, #8]
 8015f74:	4610      	mov	r0, r2
 8015f76:	f7ff fe09 	bl	8015b8c <AllocateValueArr>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	60e3      	str	r3, [r4, #12]
	hmenu->pages[1].properties[0].option_names[0] = 0x00;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	68db      	ldr	r3, [r3, #12]
 8015f82:	330c      	adds	r3, #12
 8015f84:	689b      	ldr	r3, [r3, #8]
 8015f86:	689b      	ldr	r3, [r3, #8]
 8015f88:	2200      	movs	r2, #0
 8015f8a:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[0].option_names[1] = 0x01;
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	330c      	adds	r3, #12
 8015f92:	689b      	ldr	r3, [r3, #8]
 8015f94:	689b      	ldr	r3, [r3, #8]
 8015f96:	3304      	adds	r3, #4
 8015f98:	2201      	movs	r2, #1
 8015f9a:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[0].option_names[2] = 0x02;
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	68db      	ldr	r3, [r3, #12]
 8015fa0:	330c      	adds	r3, #12
 8015fa2:	689b      	ldr	r3, [r3, #8]
 8015fa4:	689b      	ldr	r3, [r3, #8]
 8015fa6:	3308      	adds	r3, #8
 8015fa8:	2202      	movs	r2, #2
 8015faa:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[0].option_names[3] = 0x03;
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	330c      	adds	r3, #12
 8015fb2:	689b      	ldr	r3, [r3, #8]
 8015fb4:	689b      	ldr	r3, [r3, #8]
 8015fb6:	330c      	adds	r3, #12
 8015fb8:	2203      	movs	r2, #3
 8015fba:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[0].option_names[4] = 0x04;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	68db      	ldr	r3, [r3, #12]
 8015fc0:	330c      	adds	r3, #12
 8015fc2:	689b      	ldr	r3, [r3, #8]
 8015fc4:	689b      	ldr	r3, [r3, #8]
 8015fc6:	3310      	adds	r3, #16
 8015fc8:	2204      	movs	r2, #4
 8015fca:	601a      	str	r2, [r3, #0]

	hmenu->pages[1].properties[1].name = AllocateString("INTERIOR R");
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	68db      	ldr	r3, [r3, #12]
 8015fd0:	330c      	adds	r3, #12
 8015fd2:	689b      	ldr	r3, [r3, #8]
 8015fd4:	f103 0410 	add.w	r4, r3, #16
 8015fd8:	487f      	ldr	r0, [pc, #508]	@ (80161d8 <MENU_Init+0x5a0>)
 8015fda:	f7ff fde5 	bl	8015ba8 <AllocateString>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].packet_byte = 3;
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	330c      	adds	r3, #12
 8015fe8:	689b      	ldr	r3, [r3, #8]
 8015fea:	3310      	adds	r3, #16
 8015fec:	2203      	movs	r2, #3
 8015fee:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[1].num_options = 5;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	68db      	ldr	r3, [r3, #12]
 8015ff4:	330c      	adds	r3, #12
 8015ff6:	689b      	ldr	r3, [r3, #8]
 8015ff8:	3310      	adds	r3, #16
 8015ffa:	2205      	movs	r2, #5
 8015ffc:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[1].option_names = AllocateStringArr(hmenu->pages[1].properties[1].num_options);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	68db      	ldr	r3, [r3, #12]
 8016002:	330c      	adds	r3, #12
 8016004:	689b      	ldr	r3, [r3, #8]
 8016006:	3310      	adds	r3, #16
 8016008:	795a      	ldrb	r2, [r3, #5]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	68db      	ldr	r3, [r3, #12]
 801600e:	330c      	adds	r3, #12
 8016010:	689b      	ldr	r3, [r3, #8]
 8016012:	f103 0410 	add.w	r4, r3, #16
 8016016:	4610      	mov	r0, r2
 8016018:	f7ff fddd 	bl	8015bd6 <AllocateStringArr>
 801601c:	4603      	mov	r3, r0
 801601e:	60a3      	str	r3, [r4, #8]
	hmenu->pages[1].properties[1].option_names[0] = AllocateString("[    ]");
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	68db      	ldr	r3, [r3, #12]
 8016024:	330c      	adds	r3, #12
 8016026:	689b      	ldr	r3, [r3, #8]
 8016028:	3310      	adds	r3, #16
 801602a:	689c      	ldr	r4, [r3, #8]
 801602c:	486b      	ldr	r0, [pc, #428]	@ (80161dc <MENU_Init+0x5a4>)
 801602e:	f7ff fdbb 	bl	8015ba8 <AllocateString>
 8016032:	4603      	mov	r3, r0
 8016034:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].option_names[1] = AllocateString("[|   ]");
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	68db      	ldr	r3, [r3, #12]
 801603a:	330c      	adds	r3, #12
 801603c:	689b      	ldr	r3, [r3, #8]
 801603e:	3310      	adds	r3, #16
 8016040:	689b      	ldr	r3, [r3, #8]
 8016042:	1d1c      	adds	r4, r3, #4
 8016044:	4866      	ldr	r0, [pc, #408]	@ (80161e0 <MENU_Init+0x5a8>)
 8016046:	f7ff fdaf 	bl	8015ba8 <AllocateString>
 801604a:	4603      	mov	r3, r0
 801604c:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].option_names[2] = AllocateString("[||  ]");
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	68db      	ldr	r3, [r3, #12]
 8016052:	330c      	adds	r3, #12
 8016054:	689b      	ldr	r3, [r3, #8]
 8016056:	3310      	adds	r3, #16
 8016058:	689b      	ldr	r3, [r3, #8]
 801605a:	f103 0408 	add.w	r4, r3, #8
 801605e:	485b      	ldr	r0, [pc, #364]	@ (80161cc <MENU_Init+0x594>)
 8016060:	f7ff fda2 	bl	8015ba8 <AllocateString>
 8016064:	4603      	mov	r3, r0
 8016066:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].option_names[3] = AllocateString("[||| ]");
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	330c      	adds	r3, #12
 801606e:	689b      	ldr	r3, [r3, #8]
 8016070:	3310      	adds	r3, #16
 8016072:	689b      	ldr	r3, [r3, #8]
 8016074:	f103 040c 	add.w	r4, r3, #12
 8016078:	4855      	ldr	r0, [pc, #340]	@ (80161d0 <MENU_Init+0x598>)
 801607a:	f7ff fd95 	bl	8015ba8 <AllocateString>
 801607e:	4603      	mov	r3, r0
 8016080:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].option_names[4] = AllocateString("[||||]");
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	68db      	ldr	r3, [r3, #12]
 8016086:	330c      	adds	r3, #12
 8016088:	689b      	ldr	r3, [r3, #8]
 801608a:	3310      	adds	r3, #16
 801608c:	689b      	ldr	r3, [r3, #8]
 801608e:	f103 0410 	add.w	r4, r3, #16
 8016092:	4850      	ldr	r0, [pc, #320]	@ (80161d4 <MENU_Init+0x59c>)
 8016094:	f7ff fd88 	bl	8015ba8 <AllocateString>
 8016098:	4603      	mov	r3, r0
 801609a:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].properties[1].option_values = AllocateValueArr(hmenu->pages[1].properties[1].num_options);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	68db      	ldr	r3, [r3, #12]
 80160a0:	330c      	adds	r3, #12
 80160a2:	689b      	ldr	r3, [r3, #8]
 80160a4:	3310      	adds	r3, #16
 80160a6:	795a      	ldrb	r2, [r3, #5]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	68db      	ldr	r3, [r3, #12]
 80160ac:	330c      	adds	r3, #12
 80160ae:	689b      	ldr	r3, [r3, #8]
 80160b0:	f103 0410 	add.w	r4, r3, #16
 80160b4:	4610      	mov	r0, r2
 80160b6:	f7ff fd69 	bl	8015b8c <AllocateValueArr>
 80160ba:	4603      	mov	r3, r0
 80160bc:	60e3      	str	r3, [r4, #12]
	hmenu->pages[1].properties[1].option_names[0] = 0x00;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	68db      	ldr	r3, [r3, #12]
 80160c2:	330c      	adds	r3, #12
 80160c4:	689b      	ldr	r3, [r3, #8]
 80160c6:	3310      	adds	r3, #16
 80160c8:	689b      	ldr	r3, [r3, #8]
 80160ca:	2200      	movs	r2, #0
 80160cc:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[1].option_names[1] = 0x01;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	68db      	ldr	r3, [r3, #12]
 80160d2:	330c      	adds	r3, #12
 80160d4:	689b      	ldr	r3, [r3, #8]
 80160d6:	3310      	adds	r3, #16
 80160d8:	689b      	ldr	r3, [r3, #8]
 80160da:	3304      	adds	r3, #4
 80160dc:	2201      	movs	r2, #1
 80160de:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[1].option_names[2] = 0x02;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	330c      	adds	r3, #12
 80160e6:	689b      	ldr	r3, [r3, #8]
 80160e8:	3310      	adds	r3, #16
 80160ea:	689b      	ldr	r3, [r3, #8]
 80160ec:	3308      	adds	r3, #8
 80160ee:	2202      	movs	r2, #2
 80160f0:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[1].option_names[3] = 0x03;
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	330c      	adds	r3, #12
 80160f8:	689b      	ldr	r3, [r3, #8]
 80160fa:	3310      	adds	r3, #16
 80160fc:	689b      	ldr	r3, [r3, #8]
 80160fe:	330c      	adds	r3, #12
 8016100:	2203      	movs	r2, #3
 8016102:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[1].option_names[4] = 0x04;
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	330c      	adds	r3, #12
 801610a:	689b      	ldr	r3, [r3, #8]
 801610c:	3310      	adds	r3, #16
 801610e:	689b      	ldr	r3, [r3, #8]
 8016110:	3310      	adds	r3, #16
 8016112:	2204      	movs	r2, #4
 8016114:	601a      	str	r2, [r3, #0]

	hmenu->pages[1].properties[2].name = AllocateString("INTERIOR G");
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	68db      	ldr	r3, [r3, #12]
 801611a:	330c      	adds	r3, #12
 801611c:	689b      	ldr	r3, [r3, #8]
 801611e:	f103 0420 	add.w	r4, r3, #32
 8016122:	4830      	ldr	r0, [pc, #192]	@ (80161e4 <MENU_Init+0x5ac>)
 8016124:	f7ff fd40 	bl	8015ba8 <AllocateString>
 8016128:	4603      	mov	r3, r0
 801612a:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].packet_byte = 4;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	68db      	ldr	r3, [r3, #12]
 8016130:	330c      	adds	r3, #12
 8016132:	689b      	ldr	r3, [r3, #8]
 8016134:	3320      	adds	r3, #32
 8016136:	2204      	movs	r2, #4
 8016138:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[2].num_options = 5;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	68db      	ldr	r3, [r3, #12]
 801613e:	330c      	adds	r3, #12
 8016140:	689b      	ldr	r3, [r3, #8]
 8016142:	3320      	adds	r3, #32
 8016144:	2205      	movs	r2, #5
 8016146:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[2].option_names = AllocateStringArr(hmenu->pages[1].properties[2].num_options);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68db      	ldr	r3, [r3, #12]
 801614c:	330c      	adds	r3, #12
 801614e:	689b      	ldr	r3, [r3, #8]
 8016150:	3320      	adds	r3, #32
 8016152:	795a      	ldrb	r2, [r3, #5]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	68db      	ldr	r3, [r3, #12]
 8016158:	330c      	adds	r3, #12
 801615a:	689b      	ldr	r3, [r3, #8]
 801615c:	f103 0420 	add.w	r4, r3, #32
 8016160:	4610      	mov	r0, r2
 8016162:	f7ff fd38 	bl	8015bd6 <AllocateStringArr>
 8016166:	4603      	mov	r3, r0
 8016168:	60a3      	str	r3, [r4, #8]
	hmenu->pages[1].properties[2].option_names[0] = AllocateString("[    ]");
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	68db      	ldr	r3, [r3, #12]
 801616e:	330c      	adds	r3, #12
 8016170:	689b      	ldr	r3, [r3, #8]
 8016172:	3320      	adds	r3, #32
 8016174:	689c      	ldr	r4, [r3, #8]
 8016176:	4819      	ldr	r0, [pc, #100]	@ (80161dc <MENU_Init+0x5a4>)
 8016178:	f7ff fd16 	bl	8015ba8 <AllocateString>
 801617c:	4603      	mov	r3, r0
 801617e:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].option_names[1] = AllocateString("[|   ]");
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	68db      	ldr	r3, [r3, #12]
 8016184:	330c      	adds	r3, #12
 8016186:	689b      	ldr	r3, [r3, #8]
 8016188:	3320      	adds	r3, #32
 801618a:	689b      	ldr	r3, [r3, #8]
 801618c:	1d1c      	adds	r4, r3, #4
 801618e:	4814      	ldr	r0, [pc, #80]	@ (80161e0 <MENU_Init+0x5a8>)
 8016190:	f7ff fd0a 	bl	8015ba8 <AllocateString>
 8016194:	4603      	mov	r3, r0
 8016196:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].option_names[2] = AllocateString("[||  ]");
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	68db      	ldr	r3, [r3, #12]
 801619c:	330c      	adds	r3, #12
 801619e:	689b      	ldr	r3, [r3, #8]
 80161a0:	3320      	adds	r3, #32
 80161a2:	689b      	ldr	r3, [r3, #8]
 80161a4:	f103 0408 	add.w	r4, r3, #8
 80161a8:	4808      	ldr	r0, [pc, #32]	@ (80161cc <MENU_Init+0x594>)
 80161aa:	f7ff fcfd 	bl	8015ba8 <AllocateString>
 80161ae:	4603      	mov	r3, r0
 80161b0:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].option_names[3] = AllocateString("[||| ]");
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	68db      	ldr	r3, [r3, #12]
 80161b6:	330c      	adds	r3, #12
 80161b8:	689b      	ldr	r3, [r3, #8]
 80161ba:	3320      	adds	r3, #32
 80161bc:	689b      	ldr	r3, [r3, #8]
 80161be:	f103 040c 	add.w	r4, r3, #12
 80161c2:	4803      	ldr	r0, [pc, #12]	@ (80161d0 <MENU_Init+0x598>)
 80161c4:	f7ff fcf0 	bl	8015ba8 <AllocateString>
 80161c8:	4603      	mov	r3, r0
 80161ca:	e00d      	b.n	80161e8 <MENU_Init+0x5b0>
 80161cc:	08019c20 	.word	0x08019c20
 80161d0:	08019c28 	.word	0x08019c28
 80161d4:	08019c30 	.word	0x08019c30
 80161d8:	08019c38 	.word	0x08019c38
 80161dc:	08019c10 	.word	0x08019c10
 80161e0:	08019c18 	.word	0x08019c18
 80161e4:	08019c44 	.word	0x08019c44
 80161e8:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].option_names[4] = AllocateString("[||||]");
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	68db      	ldr	r3, [r3, #12]
 80161ee:	330c      	adds	r3, #12
 80161f0:	689b      	ldr	r3, [r3, #8]
 80161f2:	3320      	adds	r3, #32
 80161f4:	689b      	ldr	r3, [r3, #8]
 80161f6:	f103 0410 	add.w	r4, r3, #16
 80161fa:	4876      	ldr	r0, [pc, #472]	@ (80163d4 <MENU_Init+0x79c>)
 80161fc:	f7ff fcd4 	bl	8015ba8 <AllocateString>
 8016200:	4603      	mov	r3, r0
 8016202:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].properties[2].option_values = AllocateValueArr(hmenu->pages[1].properties[2].num_options);
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	68db      	ldr	r3, [r3, #12]
 8016208:	330c      	adds	r3, #12
 801620a:	689b      	ldr	r3, [r3, #8]
 801620c:	3320      	adds	r3, #32
 801620e:	795a      	ldrb	r2, [r3, #5]
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	68db      	ldr	r3, [r3, #12]
 8016214:	330c      	adds	r3, #12
 8016216:	689b      	ldr	r3, [r3, #8]
 8016218:	f103 0420 	add.w	r4, r3, #32
 801621c:	4610      	mov	r0, r2
 801621e:	f7ff fcb5 	bl	8015b8c <AllocateValueArr>
 8016222:	4603      	mov	r3, r0
 8016224:	60e3      	str	r3, [r4, #12]
	hmenu->pages[1].properties[2].option_names[0] = 0x00;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	68db      	ldr	r3, [r3, #12]
 801622a:	330c      	adds	r3, #12
 801622c:	689b      	ldr	r3, [r3, #8]
 801622e:	3320      	adds	r3, #32
 8016230:	689b      	ldr	r3, [r3, #8]
 8016232:	2200      	movs	r2, #0
 8016234:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[2].option_names[1] = 0x01;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	330c      	adds	r3, #12
 801623c:	689b      	ldr	r3, [r3, #8]
 801623e:	3320      	adds	r3, #32
 8016240:	689b      	ldr	r3, [r3, #8]
 8016242:	3304      	adds	r3, #4
 8016244:	2201      	movs	r2, #1
 8016246:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[2].option_names[2] = 0x02;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	330c      	adds	r3, #12
 801624e:	689b      	ldr	r3, [r3, #8]
 8016250:	3320      	adds	r3, #32
 8016252:	689b      	ldr	r3, [r3, #8]
 8016254:	3308      	adds	r3, #8
 8016256:	2202      	movs	r2, #2
 8016258:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[2].option_names[3] = 0x03;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	68db      	ldr	r3, [r3, #12]
 801625e:	330c      	adds	r3, #12
 8016260:	689b      	ldr	r3, [r3, #8]
 8016262:	3320      	adds	r3, #32
 8016264:	689b      	ldr	r3, [r3, #8]
 8016266:	330c      	adds	r3, #12
 8016268:	2203      	movs	r2, #3
 801626a:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[2].option_names[4] = 0x04;
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	68db      	ldr	r3, [r3, #12]
 8016270:	330c      	adds	r3, #12
 8016272:	689b      	ldr	r3, [r3, #8]
 8016274:	3320      	adds	r3, #32
 8016276:	689b      	ldr	r3, [r3, #8]
 8016278:	3310      	adds	r3, #16
 801627a:	2204      	movs	r2, #4
 801627c:	601a      	str	r2, [r3, #0]

	hmenu->pages[1].properties[3].name = AllocateString("INTERIOR B");
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	330c      	adds	r3, #12
 8016284:	689b      	ldr	r3, [r3, #8]
 8016286:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 801628a:	4853      	ldr	r0, [pc, #332]	@ (80163d8 <MENU_Init+0x7a0>)
 801628c:	f7ff fc8c 	bl	8015ba8 <AllocateString>
 8016290:	4603      	mov	r3, r0
 8016292:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].packet_byte = 5;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	68db      	ldr	r3, [r3, #12]
 8016298:	330c      	adds	r3, #12
 801629a:	689b      	ldr	r3, [r3, #8]
 801629c:	3330      	adds	r3, #48	@ 0x30
 801629e:	2205      	movs	r2, #5
 80162a0:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[3].num_options = 5;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	68db      	ldr	r3, [r3, #12]
 80162a6:	330c      	adds	r3, #12
 80162a8:	689b      	ldr	r3, [r3, #8]
 80162aa:	3330      	adds	r3, #48	@ 0x30
 80162ac:	2205      	movs	r2, #5
 80162ae:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[3].option_names = AllocateStringArr(hmenu->pages[1].properties[3].num_options);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	330c      	adds	r3, #12
 80162b6:	689b      	ldr	r3, [r3, #8]
 80162b8:	3330      	adds	r3, #48	@ 0x30
 80162ba:	795a      	ldrb	r2, [r3, #5]
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	330c      	adds	r3, #12
 80162c2:	689b      	ldr	r3, [r3, #8]
 80162c4:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80162c8:	4610      	mov	r0, r2
 80162ca:	f7ff fc84 	bl	8015bd6 <AllocateStringArr>
 80162ce:	4603      	mov	r3, r0
 80162d0:	60a3      	str	r3, [r4, #8]
	hmenu->pages[1].properties[3].option_names[0] = AllocateString("[    ]");
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	330c      	adds	r3, #12
 80162d8:	689b      	ldr	r3, [r3, #8]
 80162da:	3330      	adds	r3, #48	@ 0x30
 80162dc:	689c      	ldr	r4, [r3, #8]
 80162de:	483f      	ldr	r0, [pc, #252]	@ (80163dc <MENU_Init+0x7a4>)
 80162e0:	f7ff fc62 	bl	8015ba8 <AllocateString>
 80162e4:	4603      	mov	r3, r0
 80162e6:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].option_names[1] = AllocateString("[|   ]");
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	68db      	ldr	r3, [r3, #12]
 80162ec:	330c      	adds	r3, #12
 80162ee:	689b      	ldr	r3, [r3, #8]
 80162f0:	3330      	adds	r3, #48	@ 0x30
 80162f2:	689b      	ldr	r3, [r3, #8]
 80162f4:	1d1c      	adds	r4, r3, #4
 80162f6:	483a      	ldr	r0, [pc, #232]	@ (80163e0 <MENU_Init+0x7a8>)
 80162f8:	f7ff fc56 	bl	8015ba8 <AllocateString>
 80162fc:	4603      	mov	r3, r0
 80162fe:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].option_names[2] = AllocateString("[||  ]");
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	330c      	adds	r3, #12
 8016306:	689b      	ldr	r3, [r3, #8]
 8016308:	3330      	adds	r3, #48	@ 0x30
 801630a:	689b      	ldr	r3, [r3, #8]
 801630c:	f103 0408 	add.w	r4, r3, #8
 8016310:	4834      	ldr	r0, [pc, #208]	@ (80163e4 <MENU_Init+0x7ac>)
 8016312:	f7ff fc49 	bl	8015ba8 <AllocateString>
 8016316:	4603      	mov	r3, r0
 8016318:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].option_names[3] = AllocateString("[||| ]");
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	68db      	ldr	r3, [r3, #12]
 801631e:	330c      	adds	r3, #12
 8016320:	689b      	ldr	r3, [r3, #8]
 8016322:	3330      	adds	r3, #48	@ 0x30
 8016324:	689b      	ldr	r3, [r3, #8]
 8016326:	f103 040c 	add.w	r4, r3, #12
 801632a:	482f      	ldr	r0, [pc, #188]	@ (80163e8 <MENU_Init+0x7b0>)
 801632c:	f7ff fc3c 	bl	8015ba8 <AllocateString>
 8016330:	4603      	mov	r3, r0
 8016332:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].option_names[4] = AllocateString("[||||]");
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	68db      	ldr	r3, [r3, #12]
 8016338:	330c      	adds	r3, #12
 801633a:	689b      	ldr	r3, [r3, #8]
 801633c:	3330      	adds	r3, #48	@ 0x30
 801633e:	689b      	ldr	r3, [r3, #8]
 8016340:	f103 0410 	add.w	r4, r3, #16
 8016344:	4823      	ldr	r0, [pc, #140]	@ (80163d4 <MENU_Init+0x79c>)
 8016346:	f7ff fc2f 	bl	8015ba8 <AllocateString>
 801634a:	4603      	mov	r3, r0
 801634c:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].properties[3].option_values = AllocateValueArr(hmenu->pages[1].properties[3].num_options);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	68db      	ldr	r3, [r3, #12]
 8016352:	330c      	adds	r3, #12
 8016354:	689b      	ldr	r3, [r3, #8]
 8016356:	3330      	adds	r3, #48	@ 0x30
 8016358:	795a      	ldrb	r2, [r3, #5]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	330c      	adds	r3, #12
 8016360:	689b      	ldr	r3, [r3, #8]
 8016362:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8016366:	4610      	mov	r0, r2
 8016368:	f7ff fc10 	bl	8015b8c <AllocateValueArr>
 801636c:	4603      	mov	r3, r0
 801636e:	60e3      	str	r3, [r4, #12]
	hmenu->pages[1].properties[3].option_names[0] = 0x00;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	68db      	ldr	r3, [r3, #12]
 8016374:	330c      	adds	r3, #12
 8016376:	689b      	ldr	r3, [r3, #8]
 8016378:	3330      	adds	r3, #48	@ 0x30
 801637a:	689b      	ldr	r3, [r3, #8]
 801637c:	2200      	movs	r2, #0
 801637e:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[3].option_names[1] = 0x01;
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	330c      	adds	r3, #12
 8016386:	689b      	ldr	r3, [r3, #8]
 8016388:	3330      	adds	r3, #48	@ 0x30
 801638a:	689b      	ldr	r3, [r3, #8]
 801638c:	3304      	adds	r3, #4
 801638e:	2201      	movs	r2, #1
 8016390:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[3].option_names[2] = 0x02;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	330c      	adds	r3, #12
 8016398:	689b      	ldr	r3, [r3, #8]
 801639a:	3330      	adds	r3, #48	@ 0x30
 801639c:	689b      	ldr	r3, [r3, #8]
 801639e:	3308      	adds	r3, #8
 80163a0:	2202      	movs	r2, #2
 80163a2:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[3].option_names[3] = 0x03;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	68db      	ldr	r3, [r3, #12]
 80163a8:	330c      	adds	r3, #12
 80163aa:	689b      	ldr	r3, [r3, #8]
 80163ac:	3330      	adds	r3, #48	@ 0x30
 80163ae:	689b      	ldr	r3, [r3, #8]
 80163b0:	330c      	adds	r3, #12
 80163b2:	2203      	movs	r2, #3
 80163b4:	601a      	str	r2, [r3, #0]
	hmenu->pages[1].properties[3].option_names[4] = 0x04;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	68db      	ldr	r3, [r3, #12]
 80163ba:	330c      	adds	r3, #12
 80163bc:	689b      	ldr	r3, [r3, #8]
 80163be:	3330      	adds	r3, #48	@ 0x30
 80163c0:	689b      	ldr	r3, [r3, #8]
 80163c2:	3310      	adds	r3, #16
 80163c4:	2204      	movs	r2, #4
 80163c6:	601a      	str	r2, [r3, #0]

	return 0;
 80163c8:	2300      	movs	r3, #0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	370c      	adds	r7, #12
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd90      	pop	{r4, r7, pc}
 80163d2:	bf00      	nop
 80163d4:	08019c30 	.word	0x08019c30
 80163d8:	08019c50 	.word	0x08019c50
 80163dc:	08019c10 	.word	0x08019c10
 80163e0:	08019c18 	.word	0x08019c18
 80163e4:	08019c20 	.word	0x08019c20
 80163e8:	08019c28 	.word	0x08019c28

080163ec <MENU_Draw>:

uint8_t MENU_Draw(Menu_HandleTypeDef *hmenu, uint32_t delta_t) {
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b086      	sub	sp, #24
 80163f0:	af02      	add	r7, sp, #8
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	6039      	str	r1, [r7, #0]
	// Do the animations
	if (hmenu->page_anim != 0xFF)
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	7c5b      	ldrb	r3, [r3, #17]
 80163fa:	2bff      	cmp	r3, #255	@ 0xff
 80163fc:	d005      	beq.n	801640a <MENU_Draw+0x1e>
		hmenu->page_anim++;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	7c5b      	ldrb	r3, [r3, #17]
 8016402:	3301      	adds	r3, #1
 8016404:	b2da      	uxtb	r2, r3
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	745a      	strb	r2, [r3, #17]

	if (hmenu->property_anim != 0xFF)
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	7d1b      	ldrb	r3, [r3, #20]
 801640e:	2bff      	cmp	r3, #255	@ 0xff
 8016410:	d005      	beq.n	801641e <MENU_Draw+0x32>
		hmenu->property_anim++;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	7d1b      	ldrb	r3, [r3, #20]
 8016416:	3301      	adds	r3, #1
 8016418:	b2da      	uxtb	r2, r3
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	751a      	strb	r2, [r3, #20]

	// Draw the title on the left
	hmenu->ssdL_handle->str_cursor = (128 - strlen(hmenu->pages[hmenu->current_page].title)*6);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	68da      	ldr	r2, [r3, #12]
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	7c1b      	ldrb	r3, [r3, #16]
 8016426:	4619      	mov	r1, r3
 8016428:	460b      	mov	r3, r1
 801642a:	005b      	lsls	r3, r3, #1
 801642c:	440b      	add	r3, r1
 801642e:	009b      	lsls	r3, r3, #2
 8016430:	4413      	add	r3, r2
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4618      	mov	r0, r3
 8016436:	f7e9 ff53 	bl	80002e0 <strlen>
 801643a:	4603      	mov	r3, r0
 801643c:	b29b      	uxth	r3, r3
 801643e:	461a      	mov	r2, r3
 8016440:	0052      	lsls	r2, r2, #1
 8016442:	4413      	add	r3, r2
 8016444:	005b      	lsls	r3, r3, #1
 8016446:	b29a      	uxth	r2, r3
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	f1c2 0280 	rsb	r2, r2, #128	@ 0x80
 8016450:	b292      	uxth	r2, r2
 8016452:	821a      	strh	r2, [r3, #16]
	MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6819      	ldr	r1, [r3, #0]
			hmenu->pages[hmenu->current_page].title,
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	68da      	ldr	r2, [r3, #12]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	7c1b      	ldrb	r3, [r3, #16]
 8016460:	4618      	mov	r0, r3
 8016462:	4603      	mov	r3, r0
 8016464:	005b      	lsls	r3, r3, #1
 8016466:	4403      	add	r3, r0
 8016468:	009b      	lsls	r3, r3, #2
 801646a:	4413      	add	r3, r2
	MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 801646c:	681a      	ldr	r2, [r3, #0]
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	7c5b      	ldrb	r3, [r3, #17]
 8016472:	2000      	movs	r0, #0
 8016474:	9000      	str	r0, [sp, #0]
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 f907 	bl	801668a <MENU_AnimateString>
			hmenu->page_anim, 0);

	// Draw the properties
	for (uint8_t i = 0; i < hmenu->pages[hmenu->current_page].num_properties; i++) {
 801647c:	2300      	movs	r3, #0
 801647e:	73fb      	strb	r3, [r7, #15]
 8016480:	e059      	b.n	8016536 <MENU_Draw+0x14a>
		// Compute offset using property anim
		hmenu->ssdL_handle->str_cursor = 10 + (2+i)*128;
 8016482:	7bfb      	ldrb	r3, [r7, #15]
 8016484:	3302      	adds	r3, #2
 8016486:	b29b      	uxth	r3, r3
 8016488:	01db      	lsls	r3, r3, #7
 801648a:	b29a      	uxth	r2, r3
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	320a      	adds	r2, #10
 8016492:	b292      	uxth	r2, r2
 8016494:	821a      	strh	r2, [r3, #16]
		if (i == hmenu->current_property) {
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	7c9b      	ldrb	r3, [r3, #18]
 801649a:	7bfa      	ldrb	r2, [r7, #15]
 801649c:	429a      	cmp	r2, r3
 801649e:	d10e      	bne.n	80164be <MENU_Draw+0xd2>
			uint8_t num_bars = hmenu->property_anim;
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	7d1b      	ldrb	r3, [r3, #20]
 80164a4:	73bb      	strb	r3, [r7, #14]
			if (num_bars > 3) num_bars = 3;
 80164a6:	7bbb      	ldrb	r3, [r7, #14]
 80164a8:	2b03      	cmp	r3, #3
 80164aa:	d901      	bls.n	80164b0 <MENU_Draw+0xc4>
 80164ac:	2303      	movs	r3, #3
 80164ae:	73bb      	strb	r3, [r7, #14]
			SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	7bba      	ldrb	r2, [r7, #14]
 80164b6:	4938      	ldr	r1, [pc, #224]	@ (8016598 <MENU_Draw+0x1ac>)
 80164b8:	4618      	mov	r0, r3
 80164ba:	f7ec f959 	bl	8002770 <SSD1306_DrawString>
		}

		// De-animate the previous property
		if (i == hmenu->last_property && hmenu->property_anim/2 <= 2) {
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	7cdb      	ldrb	r3, [r3, #19]
 80164c2:	7bfa      	ldrb	r2, [r7, #15]
 80164c4:	429a      	cmp	r2, r3
 80164c6:	d116      	bne.n	80164f6 <MENU_Draw+0x10a>
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	7d1b      	ldrb	r3, [r3, #20]
 80164cc:	2b05      	cmp	r3, #5
 80164ce:	d812      	bhi.n	80164f6 <MENU_Draw+0x10a>
			uint8_t num_bars = 2 - hmenu->property_anim/2;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	7d1b      	ldrb	r3, [r3, #20]
 80164d4:	085b      	lsrs	r3, r3, #1
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	f1c3 0302 	rsb	r3, r3, #2
 80164dc:	737b      	strb	r3, [r7, #13]
			if (num_bars > 2) num_bars = 2;
 80164de:	7b7b      	ldrb	r3, [r7, #13]
 80164e0:	2b02      	cmp	r3, #2
 80164e2:	d901      	bls.n	80164e8 <MENU_Draw+0xfc>
 80164e4:	2302      	movs	r3, #2
 80164e6:	737b      	strb	r3, [r7, #13]
			SSD1306_DrawString(hmenu->ssdL_handle, ">> ", num_bars);
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	7b7a      	ldrb	r2, [r7, #13]
 80164ee:	492a      	ldr	r1, [pc, #168]	@ (8016598 <MENU_Draw+0x1ac>)
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7ec f93d 	bl	8002770 <SSD1306_DrawString>
		}

		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	6819      	ldr	r1, [r3, #0]
				hmenu->pages[hmenu->current_page].properties[i].name,
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	68da      	ldr	r2, [r3, #12]
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	7c1b      	ldrb	r3, [r3, #16]
 8016502:	4618      	mov	r0, r3
 8016504:	4603      	mov	r3, r0
 8016506:	005b      	lsls	r3, r3, #1
 8016508:	4403      	add	r3, r0
 801650a:	009b      	lsls	r3, r3, #2
 801650c:	4413      	add	r3, r2
 801650e:	689a      	ldr	r2, [r3, #8]
 8016510:	7bfb      	ldrb	r3, [r7, #15]
 8016512:	011b      	lsls	r3, r3, #4
 8016514:	4413      	add	r3, r2
		MENU_AnimateString(hmenu, hmenu->ssdL_handle,
 8016516:	681a      	ldr	r2, [r3, #0]
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	7c58      	ldrb	r0, [r3, #17]
 801651c:	7bfb      	ldrb	r3, [r7, #15]
 801651e:	3303      	adds	r3, #3
 8016520:	b2db      	uxtb	r3, r3
 8016522:	005b      	lsls	r3, r3, #1
 8016524:	b2db      	uxtb	r3, r3
 8016526:	9300      	str	r3, [sp, #0]
 8016528:	4603      	mov	r3, r0
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f000 f8ad 	bl	801668a <MENU_AnimateString>
	for (uint8_t i = 0; i < hmenu->pages[hmenu->current_page].num_properties; i++) {
 8016530:	7bfb      	ldrb	r3, [r7, #15]
 8016532:	3301      	adds	r3, #1
 8016534:	73fb      	strb	r3, [r7, #15]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	68da      	ldr	r2, [r3, #12]
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	7c1b      	ldrb	r3, [r3, #16]
 801653e:	4619      	mov	r1, r3
 8016540:	460b      	mov	r3, r1
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	440b      	add	r3, r1
 8016546:	009b      	lsls	r3, r3, #2
 8016548:	4413      	add	r3, r2
 801654a:	791b      	ldrb	r3, [r3, #4]
 801654c:	7bfa      	ldrb	r2, [r7, #15]
 801654e:	429a      	cmp	r2, r3
 8016550:	d397      	bcc.n	8016482 <MENU_Draw+0x96>
				hmenu->page_anim, 6+i*2);
	}

	// Draw the selected property on the RIGHT
	hmenu->ssdR_handle->str_cursor = 0;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	2200      	movs	r2, #0
 8016558:	821a      	strh	r2, [r3, #16]
	MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6859      	ldr	r1, [r3, #4]
				hmenu->pages[hmenu->current_page].properties[hmenu->current_property].name,
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	68da      	ldr	r2, [r3, #12]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	7c1b      	ldrb	r3, [r3, #16]
 8016566:	4618      	mov	r0, r3
 8016568:	4603      	mov	r3, r0
 801656a:	005b      	lsls	r3, r3, #1
 801656c:	4403      	add	r3, r0
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	4413      	add	r3, r2
 8016572:	689a      	ldr	r2, [r3, #8]
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	7c9b      	ldrb	r3, [r3, #18]
 8016578:	011b      	lsls	r3, r3, #4
 801657a:	4413      	add	r3, r2
	MENU_AnimateString(hmenu, hmenu->ssdR_handle,
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	7d1b      	ldrb	r3, [r3, #20]
 8016582:	2001      	movs	r0, #1
 8016584:	9000      	str	r0, [sp, #0]
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f000 f87f 	bl	801668a <MENU_AnimateString>
				hmenu->property_anim, 1);
}
 801658c:	bf00      	nop
 801658e:	4618      	mov	r0, r3
 8016590:	3710      	adds	r7, #16
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	08019c5c 	.word	0x08019c5c

0801659c <MENU_ParseInput>:

void MENU_ParseInput(Menu_HandleTypeDef *hmenu, uint8_t inputs[4]) {
 801659c:	b480      	push	{r7}
 801659e:	b083      	sub	sp, #12
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
 80165a4:	6039      	str	r1, [r7, #0]
	if (inputs[0]) {
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	781b      	ldrb	r3, [r3, #0]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d01d      	beq.n	80165ea <MENU_ParseInput+0x4e>
		if (hmenu->current_page == 0) {
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	7c1b      	ldrb	r3, [r3, #16]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d106      	bne.n	80165c4 <MENU_ParseInput+0x28>
			hmenu->current_page = hmenu->num_pages - 1;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	7a1b      	ldrb	r3, [r3, #8]
 80165ba:	3b01      	subs	r3, #1
 80165bc:	b2da      	uxtb	r2, r3
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	741a      	strb	r2, [r3, #16]
 80165c2:	e005      	b.n	80165d0 <MENU_ParseInput+0x34>
		} else {
			hmenu->current_page--;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	7c1b      	ldrb	r3, [r3, #16]
 80165c8:	3b01      	subs	r3, #1
 80165ca:	b2da      	uxtb	r2, r3
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	741a      	strb	r2, [r3, #16]
		}
		hmenu->page_anim = 0;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2200      	movs	r2, #0
 80165d4:	745a      	strb	r2, [r3, #17]
		hmenu->property_anim = 0;
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	2200      	movs	r2, #0
 80165da:	751a      	strb	r2, [r3, #20]
		hmenu->current_property = 0;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	2200      	movs	r2, #0
 80165e0:	749a      	strb	r2, [r3, #18]
		hmenu->last_property = 0xFF;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	22ff      	movs	r2, #255	@ 0xff
 80165e6:	74da      	strb	r2, [r3, #19]
 80165e8:	e022      	b.n	8016630 <MENU_ParseInput+0x94>
	} else if (inputs[1]) {
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	3301      	adds	r3, #1
 80165ee:	781b      	ldrb	r3, [r3, #0]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d01d      	beq.n	8016630 <MENU_ParseInput+0x94>
		if (hmenu->current_page == hmenu->num_pages - 1) {
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	7c1b      	ldrb	r3, [r3, #16]
 80165f8:	461a      	mov	r2, r3
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	7a1b      	ldrb	r3, [r3, #8]
 80165fe:	3b01      	subs	r3, #1
 8016600:	429a      	cmp	r2, r3
 8016602:	d103      	bne.n	801660c <MENU_ParseInput+0x70>
			hmenu->current_page = 0;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	2200      	movs	r2, #0
 8016608:	741a      	strb	r2, [r3, #16]
 801660a:	e005      	b.n	8016618 <MENU_ParseInput+0x7c>
		} else {
			hmenu->current_page++;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	7c1b      	ldrb	r3, [r3, #16]
 8016610:	3301      	adds	r3, #1
 8016612:	b2da      	uxtb	r2, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	741a      	strb	r2, [r3, #16]
		}
		hmenu->page_anim = 0;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2200      	movs	r2, #0
 801661c:	745a      	strb	r2, [r3, #17]
		hmenu->property_anim = 0;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	2200      	movs	r2, #0
 8016622:	751a      	strb	r2, [r3, #20]
		hmenu->current_property = 0;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	2200      	movs	r2, #0
 8016628:	749a      	strb	r2, [r3, #18]
		hmenu->last_property = 0xFF;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	22ff      	movs	r2, #255	@ 0xff
 801662e:	74da      	strb	r2, [r3, #19]
	}

	if (inputs[3]) {
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	3303      	adds	r3, #3
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d021      	beq.n	801667e <MENU_ParseInput+0xe2>
		hmenu->last_property = hmenu->current_property;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	7c9a      	ldrb	r2, [r3, #18]
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	74da      	strb	r2, [r3, #19]
		if (hmenu->current_property == hmenu->pages[hmenu->current_page].num_properties - 1)
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	7c9b      	ldrb	r3, [r3, #18]
 8016646:	4618      	mov	r0, r3
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	68da      	ldr	r2, [r3, #12]
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	7c1b      	ldrb	r3, [r3, #16]
 8016650:	4619      	mov	r1, r3
 8016652:	460b      	mov	r3, r1
 8016654:	005b      	lsls	r3, r3, #1
 8016656:	440b      	add	r3, r1
 8016658:	009b      	lsls	r3, r3, #2
 801665a:	4413      	add	r3, r2
 801665c:	791b      	ldrb	r3, [r3, #4]
 801665e:	3b01      	subs	r3, #1
 8016660:	4298      	cmp	r0, r3
 8016662:	d103      	bne.n	801666c <MENU_ParseInput+0xd0>
			hmenu->current_property = 0;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2200      	movs	r2, #0
 8016668:	749a      	strb	r2, [r3, #18]
 801666a:	e005      	b.n	8016678 <MENU_ParseInput+0xdc>
		else
			hmenu->current_property++;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	7c9b      	ldrb	r3, [r3, #18]
 8016670:	3301      	adds	r3, #1
 8016672:	b2da      	uxtb	r2, r3
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	749a      	strb	r2, [r3, #18]
		hmenu->property_anim = 0;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	2200      	movs	r2, #0
 801667c:	751a      	strb	r2, [r3, #20]
	}
}
 801667e:	bf00      	nop
 8016680:	370c      	adds	r7, #12
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <MENU_AnimateString>:

void MENU_AnimateString(Menu_HandleTypeDef *hmenu, SSD1306_HandleTypeDef *hssd, uint8_t *str, uint8_t anim_val, uint8_t anim_start) {
 801668a:	b580      	push	{r7, lr}
 801668c:	b086      	sub	sp, #24
 801668e:	af00      	add	r7, sp, #0
 8016690:	60f8      	str	r0, [r7, #12]
 8016692:	60b9      	str	r1, [r7, #8]
 8016694:	607a      	str	r2, [r7, #4]
 8016696:	70fb      	strb	r3, [r7, #3]
	if (hmenu->page_anim < anim_start) return;
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	7c5b      	ldrb	r3, [r3, #17]
 801669c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d817      	bhi.n	80166d4 <MENU_AnimateString+0x4a>
	uint8_t min_len = strlen(str);
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f7e9 fe1b 	bl	80002e0 <strlen>
 80166aa:	4603      	mov	r3, r0
 80166ac:	75fb      	strb	r3, [r7, #23]
	if (min_len > anim_val - anim_start)
 80166ae:	7dfa      	ldrb	r2, [r7, #23]
 80166b0:	78f9      	ldrb	r1, [r7, #3]
 80166b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80166b6:	1acb      	subs	r3, r1, r3
 80166b8:	429a      	cmp	r2, r3
 80166ba:	dd04      	ble.n	80166c6 <MENU_AnimateString+0x3c>
		min_len = anim_val - anim_start;
 80166bc:	78fa      	ldrb	r2, [r7, #3]
 80166be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80166c2:	1ad3      	subs	r3, r2, r3
 80166c4:	75fb      	strb	r3, [r7, #23]

	SSD1306_DrawString(hssd, str, min_len);
 80166c6:	7dfb      	ldrb	r3, [r7, #23]
 80166c8:	461a      	mov	r2, r3
 80166ca:	6879      	ldr	r1, [r7, #4]
 80166cc:	68b8      	ldr	r0, [r7, #8]
 80166ce:	f7ec f84f 	bl	8002770 <SSD1306_DrawString>
 80166d2:	e000      	b.n	80166d6 <MENU_AnimateString+0x4c>
	if (hmenu->page_anim < anim_start) return;
 80166d4:	bf00      	nop
}
 80166d6:	3718      	adds	r7, #24
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b084      	sub	sp, #16
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	460b      	mov	r3, r1
 80166e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80166e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80166ec:	f002 fd08 	bl	8019100 <USBD_static_malloc>
 80166f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d109      	bne.n	801670c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	32b0      	adds	r2, #176	@ 0xb0
 8016702:	2100      	movs	r1, #0
 8016704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8016708:	2302      	movs	r3, #2
 801670a:	e0d4      	b.n	80168b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801670c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8016710:	2100      	movs	r1, #0
 8016712:	68f8      	ldr	r0, [r7, #12]
 8016714:	f002 fe10 	bl	8019338 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	32b0      	adds	r2, #176	@ 0xb0
 8016722:	68f9      	ldr	r1, [r7, #12]
 8016724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	32b0      	adds	r2, #176	@ 0xb0
 8016732:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	7c1b      	ldrb	r3, [r3, #16]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d138      	bne.n	80167b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8016744:	4b5e      	ldr	r3, [pc, #376]	@ (80168c0 <USBD_CDC_Init+0x1e4>)
 8016746:	7819      	ldrb	r1, [r3, #0]
 8016748:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801674c:	2202      	movs	r2, #2
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f002 fbb3 	bl	8018eba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8016754:	4b5a      	ldr	r3, [pc, #360]	@ (80168c0 <USBD_CDC_Init+0x1e4>)
 8016756:	781b      	ldrb	r3, [r3, #0]
 8016758:	f003 020f 	and.w	r2, r3, #15
 801675c:	6879      	ldr	r1, [r7, #4]
 801675e:	4613      	mov	r3, r2
 8016760:	009b      	lsls	r3, r3, #2
 8016762:	4413      	add	r3, r2
 8016764:	009b      	lsls	r3, r3, #2
 8016766:	440b      	add	r3, r1
 8016768:	3324      	adds	r3, #36	@ 0x24
 801676a:	2201      	movs	r2, #1
 801676c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801676e:	4b55      	ldr	r3, [pc, #340]	@ (80168c4 <USBD_CDC_Init+0x1e8>)
 8016770:	7819      	ldrb	r1, [r3, #0]
 8016772:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8016776:	2202      	movs	r2, #2
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f002 fb9e 	bl	8018eba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801677e:	4b51      	ldr	r3, [pc, #324]	@ (80168c4 <USBD_CDC_Init+0x1e8>)
 8016780:	781b      	ldrb	r3, [r3, #0]
 8016782:	f003 020f 	and.w	r2, r3, #15
 8016786:	6879      	ldr	r1, [r7, #4]
 8016788:	4613      	mov	r3, r2
 801678a:	009b      	lsls	r3, r3, #2
 801678c:	4413      	add	r3, r2
 801678e:	009b      	lsls	r3, r3, #2
 8016790:	440b      	add	r3, r1
 8016792:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016796:	2201      	movs	r2, #1
 8016798:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801679a:	4b4b      	ldr	r3, [pc, #300]	@ (80168c8 <USBD_CDC_Init+0x1ec>)
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	f003 020f 	and.w	r2, r3, #15
 80167a2:	6879      	ldr	r1, [r7, #4]
 80167a4:	4613      	mov	r3, r2
 80167a6:	009b      	lsls	r3, r3, #2
 80167a8:	4413      	add	r3, r2
 80167aa:	009b      	lsls	r3, r3, #2
 80167ac:	440b      	add	r3, r1
 80167ae:	3326      	adds	r3, #38	@ 0x26
 80167b0:	2210      	movs	r2, #16
 80167b2:	801a      	strh	r2, [r3, #0]
 80167b4:	e035      	b.n	8016822 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80167b6:	4b42      	ldr	r3, [pc, #264]	@ (80168c0 <USBD_CDC_Init+0x1e4>)
 80167b8:	7819      	ldrb	r1, [r3, #0]
 80167ba:	2340      	movs	r3, #64	@ 0x40
 80167bc:	2202      	movs	r2, #2
 80167be:	6878      	ldr	r0, [r7, #4]
 80167c0:	f002 fb7b 	bl	8018eba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80167c4:	4b3e      	ldr	r3, [pc, #248]	@ (80168c0 <USBD_CDC_Init+0x1e4>)
 80167c6:	781b      	ldrb	r3, [r3, #0]
 80167c8:	f003 020f 	and.w	r2, r3, #15
 80167cc:	6879      	ldr	r1, [r7, #4]
 80167ce:	4613      	mov	r3, r2
 80167d0:	009b      	lsls	r3, r3, #2
 80167d2:	4413      	add	r3, r2
 80167d4:	009b      	lsls	r3, r3, #2
 80167d6:	440b      	add	r3, r1
 80167d8:	3324      	adds	r3, #36	@ 0x24
 80167da:	2201      	movs	r2, #1
 80167dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80167de:	4b39      	ldr	r3, [pc, #228]	@ (80168c4 <USBD_CDC_Init+0x1e8>)
 80167e0:	7819      	ldrb	r1, [r3, #0]
 80167e2:	2340      	movs	r3, #64	@ 0x40
 80167e4:	2202      	movs	r2, #2
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f002 fb67 	bl	8018eba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80167ec:	4b35      	ldr	r3, [pc, #212]	@ (80168c4 <USBD_CDC_Init+0x1e8>)
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	f003 020f 	and.w	r2, r3, #15
 80167f4:	6879      	ldr	r1, [r7, #4]
 80167f6:	4613      	mov	r3, r2
 80167f8:	009b      	lsls	r3, r3, #2
 80167fa:	4413      	add	r3, r2
 80167fc:	009b      	lsls	r3, r3, #2
 80167fe:	440b      	add	r3, r1
 8016800:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016804:	2201      	movs	r2, #1
 8016806:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016808:	4b2f      	ldr	r3, [pc, #188]	@ (80168c8 <USBD_CDC_Init+0x1ec>)
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	f003 020f 	and.w	r2, r3, #15
 8016810:	6879      	ldr	r1, [r7, #4]
 8016812:	4613      	mov	r3, r2
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	4413      	add	r3, r2
 8016818:	009b      	lsls	r3, r3, #2
 801681a:	440b      	add	r3, r1
 801681c:	3326      	adds	r3, #38	@ 0x26
 801681e:	2210      	movs	r2, #16
 8016820:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016822:	4b29      	ldr	r3, [pc, #164]	@ (80168c8 <USBD_CDC_Init+0x1ec>)
 8016824:	7819      	ldrb	r1, [r3, #0]
 8016826:	2308      	movs	r3, #8
 8016828:	2203      	movs	r2, #3
 801682a:	6878      	ldr	r0, [r7, #4]
 801682c:	f002 fb45 	bl	8018eba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8016830:	4b25      	ldr	r3, [pc, #148]	@ (80168c8 <USBD_CDC_Init+0x1ec>)
 8016832:	781b      	ldrb	r3, [r3, #0]
 8016834:	f003 020f 	and.w	r2, r3, #15
 8016838:	6879      	ldr	r1, [r7, #4]
 801683a:	4613      	mov	r3, r2
 801683c:	009b      	lsls	r3, r3, #2
 801683e:	4413      	add	r3, r2
 8016840:	009b      	lsls	r3, r3, #2
 8016842:	440b      	add	r3, r1
 8016844:	3324      	adds	r3, #36	@ 0x24
 8016846:	2201      	movs	r2, #1
 8016848:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	2200      	movs	r2, #0
 801684e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	33b0      	adds	r3, #176	@ 0xb0
 801685c:	009b      	lsls	r3, r3, #2
 801685e:	4413      	add	r3, r2
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	2200      	movs	r2, #0
 801686a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	2200      	movs	r2, #0
 8016872:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801687c:	2b00      	cmp	r3, #0
 801687e:	d101      	bne.n	8016884 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8016880:	2302      	movs	r3, #2
 8016882:	e018      	b.n	80168b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	7c1b      	ldrb	r3, [r3, #16]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d10a      	bne.n	80168a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801688c:	4b0d      	ldr	r3, [pc, #52]	@ (80168c4 <USBD_CDC_Init+0x1e8>)
 801688e:	7819      	ldrb	r1, [r3, #0]
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801689a:	6878      	ldr	r0, [r7, #4]
 801689c:	f002 fbfc 	bl	8019098 <USBD_LL_PrepareReceive>
 80168a0:	e008      	b.n	80168b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80168a2:	4b08      	ldr	r3, [pc, #32]	@ (80168c4 <USBD_CDC_Init+0x1e8>)
 80168a4:	7819      	ldrb	r1, [r3, #0]
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80168ac:	2340      	movs	r3, #64	@ 0x40
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f002 fbf2 	bl	8019098 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80168b4:	2300      	movs	r3, #0
}
 80168b6:	4618      	mov	r0, r3
 80168b8:	3710      	adds	r7, #16
 80168ba:	46bd      	mov	sp, r7
 80168bc:	bd80      	pop	{r7, pc}
 80168be:	bf00      	nop
 80168c0:	240002c3 	.word	0x240002c3
 80168c4:	240002c4 	.word	0x240002c4
 80168c8:	240002c5 	.word	0x240002c5

080168cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b082      	sub	sp, #8
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
 80168d4:	460b      	mov	r3, r1
 80168d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80168d8:	4b3a      	ldr	r3, [pc, #232]	@ (80169c4 <USBD_CDC_DeInit+0xf8>)
 80168da:	781b      	ldrb	r3, [r3, #0]
 80168dc:	4619      	mov	r1, r3
 80168de:	6878      	ldr	r0, [r7, #4]
 80168e0:	f002 fb11 	bl	8018f06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80168e4:	4b37      	ldr	r3, [pc, #220]	@ (80169c4 <USBD_CDC_DeInit+0xf8>)
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	f003 020f 	and.w	r2, r3, #15
 80168ec:	6879      	ldr	r1, [r7, #4]
 80168ee:	4613      	mov	r3, r2
 80168f0:	009b      	lsls	r3, r3, #2
 80168f2:	4413      	add	r3, r2
 80168f4:	009b      	lsls	r3, r3, #2
 80168f6:	440b      	add	r3, r1
 80168f8:	3324      	adds	r3, #36	@ 0x24
 80168fa:	2200      	movs	r2, #0
 80168fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80168fe:	4b32      	ldr	r3, [pc, #200]	@ (80169c8 <USBD_CDC_DeInit+0xfc>)
 8016900:	781b      	ldrb	r3, [r3, #0]
 8016902:	4619      	mov	r1, r3
 8016904:	6878      	ldr	r0, [r7, #4]
 8016906:	f002 fafe 	bl	8018f06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801690a:	4b2f      	ldr	r3, [pc, #188]	@ (80169c8 <USBD_CDC_DeInit+0xfc>)
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	f003 020f 	and.w	r2, r3, #15
 8016912:	6879      	ldr	r1, [r7, #4]
 8016914:	4613      	mov	r3, r2
 8016916:	009b      	lsls	r3, r3, #2
 8016918:	4413      	add	r3, r2
 801691a:	009b      	lsls	r3, r3, #2
 801691c:	440b      	add	r3, r1
 801691e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8016922:	2200      	movs	r2, #0
 8016924:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8016926:	4b29      	ldr	r3, [pc, #164]	@ (80169cc <USBD_CDC_DeInit+0x100>)
 8016928:	781b      	ldrb	r3, [r3, #0]
 801692a:	4619      	mov	r1, r3
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f002 faea 	bl	8018f06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8016932:	4b26      	ldr	r3, [pc, #152]	@ (80169cc <USBD_CDC_DeInit+0x100>)
 8016934:	781b      	ldrb	r3, [r3, #0]
 8016936:	f003 020f 	and.w	r2, r3, #15
 801693a:	6879      	ldr	r1, [r7, #4]
 801693c:	4613      	mov	r3, r2
 801693e:	009b      	lsls	r3, r3, #2
 8016940:	4413      	add	r3, r2
 8016942:	009b      	lsls	r3, r3, #2
 8016944:	440b      	add	r3, r1
 8016946:	3324      	adds	r3, #36	@ 0x24
 8016948:	2200      	movs	r2, #0
 801694a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801694c:	4b1f      	ldr	r3, [pc, #124]	@ (80169cc <USBD_CDC_DeInit+0x100>)
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	f003 020f 	and.w	r2, r3, #15
 8016954:	6879      	ldr	r1, [r7, #4]
 8016956:	4613      	mov	r3, r2
 8016958:	009b      	lsls	r3, r3, #2
 801695a:	4413      	add	r3, r2
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	440b      	add	r3, r1
 8016960:	3326      	adds	r3, #38	@ 0x26
 8016962:	2200      	movs	r2, #0
 8016964:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	32b0      	adds	r2, #176	@ 0xb0
 8016970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d01f      	beq.n	80169b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801697e:	687a      	ldr	r2, [r7, #4]
 8016980:	33b0      	adds	r3, #176	@ 0xb0
 8016982:	009b      	lsls	r3, r3, #2
 8016984:	4413      	add	r3, r2
 8016986:	685b      	ldr	r3, [r3, #4]
 8016988:	685b      	ldr	r3, [r3, #4]
 801698a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	32b0      	adds	r2, #176	@ 0xb0
 8016996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801699a:	4618      	mov	r0, r3
 801699c:	f002 fbbe 	bl	801911c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	32b0      	adds	r2, #176	@ 0xb0
 80169aa:	2100      	movs	r1, #0
 80169ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	2200      	movs	r2, #0
 80169b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80169b8:	2300      	movs	r3, #0
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3708      	adds	r7, #8
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	240002c3 	.word	0x240002c3
 80169c8:	240002c4 	.word	0x240002c4
 80169cc:	240002c5 	.word	0x240002c5

080169d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b086      	sub	sp, #24
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	32b0      	adds	r2, #176	@ 0xb0
 80169e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80169ea:	2300      	movs	r3, #0
 80169ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80169ee:	2300      	movs	r3, #0
 80169f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80169f2:	2300      	movs	r3, #0
 80169f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80169f6:	693b      	ldr	r3, [r7, #16]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d101      	bne.n	8016a00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80169fc:	2303      	movs	r3, #3
 80169fe:	e0bf      	b.n	8016b80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	781b      	ldrb	r3, [r3, #0]
 8016a04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d050      	beq.n	8016aae <USBD_CDC_Setup+0xde>
 8016a0c:	2b20      	cmp	r3, #32
 8016a0e:	f040 80af 	bne.w	8016b70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	88db      	ldrh	r3, [r3, #6]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d03a      	beq.n	8016a90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	781b      	ldrb	r3, [r3, #0]
 8016a1e:	b25b      	sxtb	r3, r3
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	da1b      	bge.n	8016a5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a2a:	687a      	ldr	r2, [r7, #4]
 8016a2c:	33b0      	adds	r3, #176	@ 0xb0
 8016a2e:	009b      	lsls	r3, r3, #2
 8016a30:	4413      	add	r3, r2
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	689b      	ldr	r3, [r3, #8]
 8016a36:	683a      	ldr	r2, [r7, #0]
 8016a38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8016a3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016a3c:	683a      	ldr	r2, [r7, #0]
 8016a3e:	88d2      	ldrh	r2, [r2, #6]
 8016a40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016a42:	683b      	ldr	r3, [r7, #0]
 8016a44:	88db      	ldrh	r3, [r3, #6]
 8016a46:	2b07      	cmp	r3, #7
 8016a48:	bf28      	it	cs
 8016a4a:	2307      	movcs	r3, #7
 8016a4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	89fa      	ldrh	r2, [r7, #14]
 8016a52:	4619      	mov	r1, r3
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f001 fdbd 	bl	80185d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8016a5a:	e090      	b.n	8016b7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	785a      	ldrb	r2, [r3, #1]
 8016a60:	693b      	ldr	r3, [r7, #16]
 8016a62:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8016a66:	683b      	ldr	r3, [r7, #0]
 8016a68:	88db      	ldrh	r3, [r3, #6]
 8016a6a:	2b3f      	cmp	r3, #63	@ 0x3f
 8016a6c:	d803      	bhi.n	8016a76 <USBD_CDC_Setup+0xa6>
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	88db      	ldrh	r3, [r3, #6]
 8016a72:	b2da      	uxtb	r2, r3
 8016a74:	e000      	b.n	8016a78 <USBD_CDC_Setup+0xa8>
 8016a76:	2240      	movs	r2, #64	@ 0x40
 8016a78:	693b      	ldr	r3, [r7, #16]
 8016a7a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8016a7e:	6939      	ldr	r1, [r7, #16]
 8016a80:	693b      	ldr	r3, [r7, #16]
 8016a82:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8016a86:	461a      	mov	r2, r3
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f001 fdcf 	bl	801862c <USBD_CtlPrepareRx>
      break;
 8016a8e:	e076      	b.n	8016b7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	33b0      	adds	r3, #176	@ 0xb0
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	4413      	add	r3, r2
 8016a9e:	685b      	ldr	r3, [r3, #4]
 8016aa0:	689b      	ldr	r3, [r3, #8]
 8016aa2:	683a      	ldr	r2, [r7, #0]
 8016aa4:	7850      	ldrb	r0, [r2, #1]
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	6839      	ldr	r1, [r7, #0]
 8016aaa:	4798      	blx	r3
      break;
 8016aac:	e067      	b.n	8016b7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	785b      	ldrb	r3, [r3, #1]
 8016ab2:	2b0b      	cmp	r3, #11
 8016ab4:	d851      	bhi.n	8016b5a <USBD_CDC_Setup+0x18a>
 8016ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8016abc <USBD_CDC_Setup+0xec>)
 8016ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016abc:	08016aed 	.word	0x08016aed
 8016ac0:	08016b69 	.word	0x08016b69
 8016ac4:	08016b5b 	.word	0x08016b5b
 8016ac8:	08016b5b 	.word	0x08016b5b
 8016acc:	08016b5b 	.word	0x08016b5b
 8016ad0:	08016b5b 	.word	0x08016b5b
 8016ad4:	08016b5b 	.word	0x08016b5b
 8016ad8:	08016b5b 	.word	0x08016b5b
 8016adc:	08016b5b 	.word	0x08016b5b
 8016ae0:	08016b5b 	.word	0x08016b5b
 8016ae4:	08016b17 	.word	0x08016b17
 8016ae8:	08016b41 	.word	0x08016b41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	2b03      	cmp	r3, #3
 8016af6:	d107      	bne.n	8016b08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016af8:	f107 030a 	add.w	r3, r7, #10
 8016afc:	2202      	movs	r2, #2
 8016afe:	4619      	mov	r1, r3
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f001 fd67 	bl	80185d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016b06:	e032      	b.n	8016b6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016b08:	6839      	ldr	r1, [r7, #0]
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f001 fce5 	bl	80184da <USBD_CtlError>
            ret = USBD_FAIL;
 8016b10:	2303      	movs	r3, #3
 8016b12:	75fb      	strb	r3, [r7, #23]
          break;
 8016b14:	e02b      	b.n	8016b6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b1c:	b2db      	uxtb	r3, r3
 8016b1e:	2b03      	cmp	r3, #3
 8016b20:	d107      	bne.n	8016b32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016b22:	f107 030d 	add.w	r3, r7, #13
 8016b26:	2201      	movs	r2, #1
 8016b28:	4619      	mov	r1, r3
 8016b2a:	6878      	ldr	r0, [r7, #4]
 8016b2c:	f001 fd52 	bl	80185d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016b30:	e01d      	b.n	8016b6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8016b32:	6839      	ldr	r1, [r7, #0]
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f001 fcd0 	bl	80184da <USBD_CtlError>
            ret = USBD_FAIL;
 8016b3a:	2303      	movs	r3, #3
 8016b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8016b3e:	e016      	b.n	8016b6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	2b03      	cmp	r3, #3
 8016b4a:	d00f      	beq.n	8016b6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016b4c:	6839      	ldr	r1, [r7, #0]
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f001 fcc3 	bl	80184da <USBD_CtlError>
            ret = USBD_FAIL;
 8016b54:	2303      	movs	r3, #3
 8016b56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016b58:	e008      	b.n	8016b6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016b5a:	6839      	ldr	r1, [r7, #0]
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f001 fcbc 	bl	80184da <USBD_CtlError>
          ret = USBD_FAIL;
 8016b62:	2303      	movs	r3, #3
 8016b64:	75fb      	strb	r3, [r7, #23]
          break;
 8016b66:	e002      	b.n	8016b6e <USBD_CDC_Setup+0x19e>
          break;
 8016b68:	bf00      	nop
 8016b6a:	e008      	b.n	8016b7e <USBD_CDC_Setup+0x1ae>
          break;
 8016b6c:	bf00      	nop
      }
      break;
 8016b6e:	e006      	b.n	8016b7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016b70:	6839      	ldr	r1, [r7, #0]
 8016b72:	6878      	ldr	r0, [r7, #4]
 8016b74:	f001 fcb1 	bl	80184da <USBD_CtlError>
      ret = USBD_FAIL;
 8016b78:	2303      	movs	r3, #3
 8016b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8016b7c:	bf00      	nop
  }

  return (uint8_t)ret;
 8016b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3718      	adds	r7, #24
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b084      	sub	sp, #16
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
 8016b90:	460b      	mov	r3, r1
 8016b92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016b9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	32b0      	adds	r2, #176	@ 0xb0
 8016ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d101      	bne.n	8016bb2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016bae:	2303      	movs	r3, #3
 8016bb0:	e065      	b.n	8016c7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	32b0      	adds	r2, #176	@ 0xb0
 8016bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016bc2:	78fb      	ldrb	r3, [r7, #3]
 8016bc4:	f003 020f 	and.w	r2, r3, #15
 8016bc8:	6879      	ldr	r1, [r7, #4]
 8016bca:	4613      	mov	r3, r2
 8016bcc:	009b      	lsls	r3, r3, #2
 8016bce:	4413      	add	r3, r2
 8016bd0:	009b      	lsls	r3, r3, #2
 8016bd2:	440b      	add	r3, r1
 8016bd4:	3318      	adds	r3, #24
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d02f      	beq.n	8016c3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8016bdc:	78fb      	ldrb	r3, [r7, #3]
 8016bde:	f003 020f 	and.w	r2, r3, #15
 8016be2:	6879      	ldr	r1, [r7, #4]
 8016be4:	4613      	mov	r3, r2
 8016be6:	009b      	lsls	r3, r3, #2
 8016be8:	4413      	add	r3, r2
 8016bea:	009b      	lsls	r3, r3, #2
 8016bec:	440b      	add	r3, r1
 8016bee:	3318      	adds	r3, #24
 8016bf0:	681a      	ldr	r2, [r3, #0]
 8016bf2:	78fb      	ldrb	r3, [r7, #3]
 8016bf4:	f003 010f 	and.w	r1, r3, #15
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	460b      	mov	r3, r1
 8016bfc:	00db      	lsls	r3, r3, #3
 8016bfe:	440b      	add	r3, r1
 8016c00:	009b      	lsls	r3, r3, #2
 8016c02:	4403      	add	r3, r0
 8016c04:	331c      	adds	r3, #28
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	fbb2 f1f3 	udiv	r1, r2, r3
 8016c0c:	fb01 f303 	mul.w	r3, r1, r3
 8016c10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d112      	bne.n	8016c3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8016c16:	78fb      	ldrb	r3, [r7, #3]
 8016c18:	f003 020f 	and.w	r2, r3, #15
 8016c1c:	6879      	ldr	r1, [r7, #4]
 8016c1e:	4613      	mov	r3, r2
 8016c20:	009b      	lsls	r3, r3, #2
 8016c22:	4413      	add	r3, r2
 8016c24:	009b      	lsls	r3, r3, #2
 8016c26:	440b      	add	r3, r1
 8016c28:	3318      	adds	r3, #24
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016c2e:	78f9      	ldrb	r1, [r7, #3]
 8016c30:	2300      	movs	r3, #0
 8016c32:	2200      	movs	r2, #0
 8016c34:	6878      	ldr	r0, [r7, #4]
 8016c36:	f002 fa0e 	bl	8019056 <USBD_LL_Transmit>
 8016c3a:	e01f      	b.n	8016c7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016c3c:	68bb      	ldr	r3, [r7, #8]
 8016c3e:	2200      	movs	r2, #0
 8016c40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	33b0      	adds	r3, #176	@ 0xb0
 8016c4e:	009b      	lsls	r3, r3, #2
 8016c50:	4413      	add	r3, r2
 8016c52:	685b      	ldr	r3, [r3, #4]
 8016c54:	691b      	ldr	r3, [r3, #16]
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d010      	beq.n	8016c7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016c60:	687a      	ldr	r2, [r7, #4]
 8016c62:	33b0      	adds	r3, #176	@ 0xb0
 8016c64:	009b      	lsls	r3, r3, #2
 8016c66:	4413      	add	r3, r2
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	691b      	ldr	r3, [r3, #16]
 8016c6c:	68ba      	ldr	r2, [r7, #8]
 8016c6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8016c72:	68ba      	ldr	r2, [r7, #8]
 8016c74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016c78:	78fa      	ldrb	r2, [r7, #3]
 8016c7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016c7c:	2300      	movs	r3, #0
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3710      	adds	r7, #16
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}

08016c86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016c86:	b580      	push	{r7, lr}
 8016c88:	b084      	sub	sp, #16
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]
 8016c8e:	460b      	mov	r3, r1
 8016c90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	32b0      	adds	r2, #176	@ 0xb0
 8016c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ca0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	32b0      	adds	r2, #176	@ 0xb0
 8016cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d101      	bne.n	8016cb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8016cb4:	2303      	movs	r3, #3
 8016cb6:	e01a      	b.n	8016cee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016cb8:	78fb      	ldrb	r3, [r7, #3]
 8016cba:	4619      	mov	r1, r3
 8016cbc:	6878      	ldr	r0, [r7, #4]
 8016cbe:	f002 fa0c 	bl	80190da <USBD_LL_GetRxDataSize>
 8016cc2:	4602      	mov	r2, r0
 8016cc4:	68fb      	ldr	r3, [r7, #12]
 8016cc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016cd0:	687a      	ldr	r2, [r7, #4]
 8016cd2:	33b0      	adds	r3, #176	@ 0xb0
 8016cd4:	009b      	lsls	r3, r3, #2
 8016cd6:	4413      	add	r3, r2
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	68db      	ldr	r3, [r3, #12]
 8016cdc:	68fa      	ldr	r2, [r7, #12]
 8016cde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8016ce2:	68fa      	ldr	r2, [r7, #12]
 8016ce4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8016ce8:	4611      	mov	r1, r2
 8016cea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016cec:	2300      	movs	r3, #0
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	3710      	adds	r7, #16
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}

08016cf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016cf6:	b580      	push	{r7, lr}
 8016cf8:	b084      	sub	sp, #16
 8016cfa:	af00      	add	r7, sp, #0
 8016cfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	32b0      	adds	r2, #176	@ 0xb0
 8016d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d101      	bne.n	8016d18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016d14:	2303      	movs	r3, #3
 8016d16:	e024      	b.n	8016d62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d1e:	687a      	ldr	r2, [r7, #4]
 8016d20:	33b0      	adds	r3, #176	@ 0xb0
 8016d22:	009b      	lsls	r3, r3, #2
 8016d24:	4413      	add	r3, r2
 8016d26:	685b      	ldr	r3, [r3, #4]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d019      	beq.n	8016d60 <USBD_CDC_EP0_RxReady+0x6a>
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8016d32:	2bff      	cmp	r3, #255	@ 0xff
 8016d34:	d014      	beq.n	8016d60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016d3c:	687a      	ldr	r2, [r7, #4]
 8016d3e:	33b0      	adds	r3, #176	@ 0xb0
 8016d40:	009b      	lsls	r3, r3, #2
 8016d42:	4413      	add	r3, r2
 8016d44:	685b      	ldr	r3, [r3, #4]
 8016d46:	689b      	ldr	r3, [r3, #8]
 8016d48:	68fa      	ldr	r2, [r7, #12]
 8016d4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016d4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016d50:	68fa      	ldr	r2, [r7, #12]
 8016d52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8016d56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	22ff      	movs	r2, #255	@ 0xff
 8016d5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016d60:	2300      	movs	r3, #0
}
 8016d62:	4618      	mov	r0, r3
 8016d64:	3710      	adds	r7, #16
 8016d66:	46bd      	mov	sp, r7
 8016d68:	bd80      	pop	{r7, pc}
	...

08016d6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b086      	sub	sp, #24
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016d74:	2182      	movs	r1, #130	@ 0x82
 8016d76:	4818      	ldr	r0, [pc, #96]	@ (8016dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016d78:	f000 fd4f 	bl	801781a <USBD_GetEpDesc>
 8016d7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016d7e:	2101      	movs	r1, #1
 8016d80:	4815      	ldr	r0, [pc, #84]	@ (8016dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016d82:	f000 fd4a 	bl	801781a <USBD_GetEpDesc>
 8016d86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016d88:	2181      	movs	r1, #129	@ 0x81
 8016d8a:	4813      	ldr	r0, [pc, #76]	@ (8016dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016d8c:	f000 fd45 	bl	801781a <USBD_GetEpDesc>
 8016d90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016d92:	697b      	ldr	r3, [r7, #20]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d002      	beq.n	8016d9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	2210      	movs	r2, #16
 8016d9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016d9e:	693b      	ldr	r3, [r7, #16]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d006      	beq.n	8016db2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	2200      	movs	r2, #0
 8016da8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016dac:	711a      	strb	r2, [r3, #4]
 8016dae:	2200      	movs	r2, #0
 8016db0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d006      	beq.n	8016dc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2200      	movs	r2, #0
 8016dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016dc0:	711a      	strb	r2, [r3, #4]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2243      	movs	r2, #67	@ 0x43
 8016dca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016dcc:	4b02      	ldr	r3, [pc, #8]	@ (8016dd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3718      	adds	r7, #24
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	24000280 	.word	0x24000280

08016ddc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b086      	sub	sp, #24
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016de4:	2182      	movs	r1, #130	@ 0x82
 8016de6:	4818      	ldr	r0, [pc, #96]	@ (8016e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016de8:	f000 fd17 	bl	801781a <USBD_GetEpDesc>
 8016dec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016dee:	2101      	movs	r1, #1
 8016df0:	4815      	ldr	r0, [pc, #84]	@ (8016e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016df2:	f000 fd12 	bl	801781a <USBD_GetEpDesc>
 8016df6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016df8:	2181      	movs	r1, #129	@ 0x81
 8016dfa:	4813      	ldr	r0, [pc, #76]	@ (8016e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8016dfc:	f000 fd0d 	bl	801781a <USBD_GetEpDesc>
 8016e00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016e02:	697b      	ldr	r3, [r7, #20]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d002      	beq.n	8016e0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	2210      	movs	r2, #16
 8016e0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016e0e:	693b      	ldr	r3, [r7, #16]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d006      	beq.n	8016e22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	2200      	movs	r2, #0
 8016e18:	711a      	strb	r2, [r3, #4]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	f042 0202 	orr.w	r2, r2, #2
 8016e20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d006      	beq.n	8016e36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	711a      	strb	r2, [r3, #4]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	f042 0202 	orr.w	r2, r2, #2
 8016e34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	2243      	movs	r2, #67	@ 0x43
 8016e3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016e3c:	4b02      	ldr	r3, [pc, #8]	@ (8016e48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016e3e:	4618      	mov	r0, r3
 8016e40:	3718      	adds	r7, #24
 8016e42:	46bd      	mov	sp, r7
 8016e44:	bd80      	pop	{r7, pc}
 8016e46:	bf00      	nop
 8016e48:	24000280 	.word	0x24000280

08016e4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b086      	sub	sp, #24
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8016e54:	2182      	movs	r1, #130	@ 0x82
 8016e56:	4818      	ldr	r0, [pc, #96]	@ (8016eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016e58:	f000 fcdf 	bl	801781a <USBD_GetEpDesc>
 8016e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016e5e:	2101      	movs	r1, #1
 8016e60:	4815      	ldr	r0, [pc, #84]	@ (8016eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016e62:	f000 fcda 	bl	801781a <USBD_GetEpDesc>
 8016e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016e68:	2181      	movs	r1, #129	@ 0x81
 8016e6a:	4813      	ldr	r0, [pc, #76]	@ (8016eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016e6c:	f000 fcd5 	bl	801781a <USBD_GetEpDesc>
 8016e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8016e72:	697b      	ldr	r3, [r7, #20]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d002      	beq.n	8016e7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	2210      	movs	r2, #16
 8016e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016e7e:	693b      	ldr	r3, [r7, #16]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d006      	beq.n	8016e92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	2200      	movs	r2, #0
 8016e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016e8c:	711a      	strb	r2, [r3, #4]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d006      	beq.n	8016ea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016ea0:	711a      	strb	r2, [r3, #4]
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2243      	movs	r2, #67	@ 0x43
 8016eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016eac:	4b02      	ldr	r3, [pc, #8]	@ (8016eb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016eae:	4618      	mov	r0, r3
 8016eb0:	3718      	adds	r7, #24
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	24000280 	.word	0x24000280

08016ebc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b083      	sub	sp, #12
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	220a      	movs	r2, #10
 8016ec8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016eca:	4b03      	ldr	r3, [pc, #12]	@ (8016ed8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	370c      	adds	r7, #12
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr
 8016ed8:	2400023c 	.word	0x2400023c

08016edc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016edc:	b480      	push	{r7}
 8016ede:	b083      	sub	sp, #12
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	6078      	str	r0, [r7, #4]
 8016ee4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016ee6:	683b      	ldr	r3, [r7, #0]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d101      	bne.n	8016ef0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016eec:	2303      	movs	r3, #3
 8016eee:	e009      	b.n	8016f04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	33b0      	adds	r3, #176	@ 0xb0
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	4413      	add	r3, r2
 8016efe:	683a      	ldr	r2, [r7, #0]
 8016f00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8016f02:	2300      	movs	r3, #0
}
 8016f04:	4618      	mov	r0, r3
 8016f06:	370c      	adds	r7, #12
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f0e:	4770      	bx	lr

08016f10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016f10:	b480      	push	{r7}
 8016f12:	b087      	sub	sp, #28
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	60f8      	str	r0, [r7, #12]
 8016f18:	60b9      	str	r1, [r7, #8]
 8016f1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	32b0      	adds	r2, #176	@ 0xb0
 8016f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d101      	bne.n	8016f36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016f32:	2303      	movs	r3, #3
 8016f34:	e008      	b.n	8016f48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8016f36:	697b      	ldr	r3, [r7, #20]
 8016f38:	68ba      	ldr	r2, [r7, #8]
 8016f3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	687a      	ldr	r2, [r7, #4]
 8016f42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8016f46:	2300      	movs	r3, #0
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	371c      	adds	r7, #28
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f52:	4770      	bx	lr

08016f54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016f54:	b480      	push	{r7}
 8016f56:	b085      	sub	sp, #20
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
 8016f5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	32b0      	adds	r2, #176	@ 0xb0
 8016f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d101      	bne.n	8016f78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8016f74:	2303      	movs	r3, #3
 8016f76:	e004      	b.n	8016f82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	683a      	ldr	r2, [r7, #0]
 8016f7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016f80:	2300      	movs	r3, #0
}
 8016f82:	4618      	mov	r0, r3
 8016f84:	3714      	adds	r7, #20
 8016f86:	46bd      	mov	sp, r7
 8016f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8c:	4770      	bx	lr
	...

08016f90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b084      	sub	sp, #16
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	32b0      	adds	r2, #176	@ 0xb0
 8016fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fa6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016fa8:	2301      	movs	r3, #1
 8016faa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d101      	bne.n	8016fb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8016fb2:	2303      	movs	r3, #3
 8016fb4:	e025      	b.n	8017002 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8016fb6:	68bb      	ldr	r3, [r7, #8]
 8016fb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d11f      	bne.n	8017000 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	2201      	movs	r2, #1
 8016fc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8016fc8:	4b10      	ldr	r3, [pc, #64]	@ (801700c <USBD_CDC_TransmitPacket+0x7c>)
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	f003 020f 	and.w	r2, r3, #15
 8016fd0:	68bb      	ldr	r3, [r7, #8]
 8016fd2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8016fd6:	6878      	ldr	r0, [r7, #4]
 8016fd8:	4613      	mov	r3, r2
 8016fda:	009b      	lsls	r3, r3, #2
 8016fdc:	4413      	add	r3, r2
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	4403      	add	r3, r0
 8016fe2:	3318      	adds	r3, #24
 8016fe4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8016fe6:	4b09      	ldr	r3, [pc, #36]	@ (801700c <USBD_CDC_TransmitPacket+0x7c>)
 8016fe8:	7819      	ldrb	r1, [r3, #0]
 8016fea:	68bb      	ldr	r3, [r7, #8]
 8016fec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8016ff6:	6878      	ldr	r0, [r7, #4]
 8016ff8:	f002 f82d 	bl	8019056 <USBD_LL_Transmit>

    ret = USBD_OK;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8017000:	7bfb      	ldrb	r3, [r7, #15]
}
 8017002:	4618      	mov	r0, r3
 8017004:	3710      	adds	r7, #16
 8017006:	46bd      	mov	sp, r7
 8017008:	bd80      	pop	{r7, pc}
 801700a:	bf00      	nop
 801700c:	240002c3 	.word	0x240002c3

08017010 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017010:	b580      	push	{r7, lr}
 8017012:	b084      	sub	sp, #16
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	32b0      	adds	r2, #176	@ 0xb0
 8017022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017026:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	32b0      	adds	r2, #176	@ 0xb0
 8017032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d101      	bne.n	801703e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801703a:	2303      	movs	r3, #3
 801703c:	e018      	b.n	8017070 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	7c1b      	ldrb	r3, [r3, #16]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d10a      	bne.n	801705c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017046:	4b0c      	ldr	r3, [pc, #48]	@ (8017078 <USBD_CDC_ReceivePacket+0x68>)
 8017048:	7819      	ldrb	r1, [r3, #0]
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017050:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017054:	6878      	ldr	r0, [r7, #4]
 8017056:	f002 f81f 	bl	8019098 <USBD_LL_PrepareReceive>
 801705a:	e008      	b.n	801706e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801705c:	4b06      	ldr	r3, [pc, #24]	@ (8017078 <USBD_CDC_ReceivePacket+0x68>)
 801705e:	7819      	ldrb	r1, [r3, #0]
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017066:	2340      	movs	r3, #64	@ 0x40
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f002 f815 	bl	8019098 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801706e:	2300      	movs	r3, #0
}
 8017070:	4618      	mov	r0, r3
 8017072:	3710      	adds	r7, #16
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	240002c4 	.word	0x240002c4

0801707c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b086      	sub	sp, #24
 8017080:	af00      	add	r7, sp, #0
 8017082:	60f8      	str	r0, [r7, #12]
 8017084:	60b9      	str	r1, [r7, #8]
 8017086:	4613      	mov	r3, r2
 8017088:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	2b00      	cmp	r3, #0
 801708e:	d101      	bne.n	8017094 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8017090:	2303      	movs	r3, #3
 8017092:	e01f      	b.n	80170d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	2200      	movs	r2, #0
 8017098:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2200      	movs	r2, #0
 80170a0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	2200      	movs	r2, #0
 80170a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d003      	beq.n	80170ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	68ba      	ldr	r2, [r7, #8]
 80170b6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2201      	movs	r2, #1
 80170be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	79fa      	ldrb	r2, [r7, #7]
 80170c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80170c8:	68f8      	ldr	r0, [r7, #12]
 80170ca:	f001 fe8b 	bl	8018de4 <USBD_LL_Init>
 80170ce:	4603      	mov	r3, r0
 80170d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80170d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	3718      	adds	r7, #24
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}

080170dc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b084      	sub	sp, #16
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80170e6:	2300      	movs	r3, #0
 80170e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80170ea:	683b      	ldr	r3, [r7, #0]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d101      	bne.n	80170f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80170f0:	2303      	movs	r3, #3
 80170f2:	e025      	b.n	8017140 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	683a      	ldr	r2, [r7, #0]
 80170f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	32ae      	adds	r2, #174	@ 0xae
 8017106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801710a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801710c:	2b00      	cmp	r3, #0
 801710e:	d00f      	beq.n	8017130 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	32ae      	adds	r2, #174	@ 0xae
 801711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017120:	f107 020e 	add.w	r2, r7, #14
 8017124:	4610      	mov	r0, r2
 8017126:	4798      	blx	r3
 8017128:	4602      	mov	r2, r0
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017136:	1c5a      	adds	r2, r3, #1
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801713e:	2300      	movs	r3, #0
}
 8017140:	4618      	mov	r0, r3
 8017142:	3710      	adds	r7, #16
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}

08017148 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f001 fe97 	bl	8018e84 <USBD_LL_Start>
 8017156:	4603      	mov	r3, r0
}
 8017158:	4618      	mov	r0, r3
 801715a:	3708      	adds	r7, #8
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8017160:	b480      	push	{r7}
 8017162:	b083      	sub	sp, #12
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017168:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801716a:	4618      	mov	r0, r3
 801716c:	370c      	adds	r7, #12
 801716e:	46bd      	mov	sp, r7
 8017170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017174:	4770      	bx	lr

08017176 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017176:	b580      	push	{r7, lr}
 8017178:	b084      	sub	sp, #16
 801717a:	af00      	add	r7, sp, #0
 801717c:	6078      	str	r0, [r7, #4]
 801717e:	460b      	mov	r3, r1
 8017180:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8017182:	2300      	movs	r3, #0
 8017184:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801718c:	2b00      	cmp	r3, #0
 801718e:	d009      	beq.n	80171a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	78fa      	ldrb	r2, [r7, #3]
 801719a:	4611      	mov	r1, r2
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	4798      	blx	r3
 80171a0:	4603      	mov	r3, r0
 80171a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80171a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80171a6:	4618      	mov	r0, r3
 80171a8:	3710      	adds	r7, #16
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b084      	sub	sp, #16
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
 80171b6:	460b      	mov	r3, r1
 80171b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80171ba:	2300      	movs	r3, #0
 80171bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80171c4:	685b      	ldr	r3, [r3, #4]
 80171c6:	78fa      	ldrb	r2, [r7, #3]
 80171c8:	4611      	mov	r1, r2
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	4798      	blx	r3
 80171ce:	4603      	mov	r3, r0
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d001      	beq.n	80171d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80171d4:	2303      	movs	r3, #3
 80171d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80171d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80171da:	4618      	mov	r0, r3
 80171dc:	3710      	adds	r7, #16
 80171de:	46bd      	mov	sp, r7
 80171e0:	bd80      	pop	{r7, pc}

080171e2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80171e2:	b580      	push	{r7, lr}
 80171e4:	b084      	sub	sp, #16
 80171e6:	af00      	add	r7, sp, #0
 80171e8:	6078      	str	r0, [r7, #4]
 80171ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80171f2:	6839      	ldr	r1, [r7, #0]
 80171f4:	4618      	mov	r0, r3
 80171f6:	f001 f936 	bl	8018466 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	2201      	movs	r2, #1
 80171fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8017208:	461a      	mov	r2, r3
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8017216:	f003 031f 	and.w	r3, r3, #31
 801721a:	2b02      	cmp	r3, #2
 801721c:	d01a      	beq.n	8017254 <USBD_LL_SetupStage+0x72>
 801721e:	2b02      	cmp	r3, #2
 8017220:	d822      	bhi.n	8017268 <USBD_LL_SetupStage+0x86>
 8017222:	2b00      	cmp	r3, #0
 8017224:	d002      	beq.n	801722c <USBD_LL_SetupStage+0x4a>
 8017226:	2b01      	cmp	r3, #1
 8017228:	d00a      	beq.n	8017240 <USBD_LL_SetupStage+0x5e>
 801722a:	e01d      	b.n	8017268 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017232:	4619      	mov	r1, r3
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f000 fb63 	bl	8017900 <USBD_StdDevReq>
 801723a:	4603      	mov	r3, r0
 801723c:	73fb      	strb	r3, [r7, #15]
      break;
 801723e:	e020      	b.n	8017282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8017246:	4619      	mov	r1, r3
 8017248:	6878      	ldr	r0, [r7, #4]
 801724a:	f000 fbcb 	bl	80179e4 <USBD_StdItfReq>
 801724e:	4603      	mov	r3, r0
 8017250:	73fb      	strb	r3, [r7, #15]
      break;
 8017252:	e016      	b.n	8017282 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801725a:	4619      	mov	r1, r3
 801725c:	6878      	ldr	r0, [r7, #4]
 801725e:	f000 fc2d 	bl	8017abc <USBD_StdEPReq>
 8017262:	4603      	mov	r3, r0
 8017264:	73fb      	strb	r3, [r7, #15]
      break;
 8017266:	e00c      	b.n	8017282 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801726e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8017272:	b2db      	uxtb	r3, r3
 8017274:	4619      	mov	r1, r3
 8017276:	6878      	ldr	r0, [r7, #4]
 8017278:	f001 fe64 	bl	8018f44 <USBD_LL_StallEP>
 801727c:	4603      	mov	r3, r0
 801727e:	73fb      	strb	r3, [r7, #15]
      break;
 8017280:	bf00      	nop
  }

  return ret;
 8017282:	7bfb      	ldrb	r3, [r7, #15]
}
 8017284:	4618      	mov	r0, r3
 8017286:	3710      	adds	r7, #16
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}

0801728c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b086      	sub	sp, #24
 8017290:	af00      	add	r7, sp, #0
 8017292:	60f8      	str	r0, [r7, #12]
 8017294:	460b      	mov	r3, r1
 8017296:	607a      	str	r2, [r7, #4]
 8017298:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801729a:	2300      	movs	r3, #0
 801729c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801729e:	7afb      	ldrb	r3, [r7, #11]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d16e      	bne.n	8017382 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80172aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80172b2:	2b03      	cmp	r3, #3
 80172b4:	f040 8098 	bne.w	80173e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80172b8:	693b      	ldr	r3, [r7, #16]
 80172ba:	689a      	ldr	r2, [r3, #8]
 80172bc:	693b      	ldr	r3, [r7, #16]
 80172be:	68db      	ldr	r3, [r3, #12]
 80172c0:	429a      	cmp	r2, r3
 80172c2:	d913      	bls.n	80172ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80172c4:	693b      	ldr	r3, [r7, #16]
 80172c6:	689a      	ldr	r2, [r3, #8]
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	68db      	ldr	r3, [r3, #12]
 80172cc:	1ad2      	subs	r2, r2, r3
 80172ce:	693b      	ldr	r3, [r7, #16]
 80172d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80172d2:	693b      	ldr	r3, [r7, #16]
 80172d4:	68da      	ldr	r2, [r3, #12]
 80172d6:	693b      	ldr	r3, [r7, #16]
 80172d8:	689b      	ldr	r3, [r3, #8]
 80172da:	4293      	cmp	r3, r2
 80172dc:	bf28      	it	cs
 80172de:	4613      	movcs	r3, r2
 80172e0:	461a      	mov	r2, r3
 80172e2:	6879      	ldr	r1, [r7, #4]
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f001 f9be 	bl	8018666 <USBD_CtlContinueRx>
 80172ea:	e07d      	b.n	80173e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80172f2:	f003 031f 	and.w	r3, r3, #31
 80172f6:	2b02      	cmp	r3, #2
 80172f8:	d014      	beq.n	8017324 <USBD_LL_DataOutStage+0x98>
 80172fa:	2b02      	cmp	r3, #2
 80172fc:	d81d      	bhi.n	801733a <USBD_LL_DataOutStage+0xae>
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d002      	beq.n	8017308 <USBD_LL_DataOutStage+0x7c>
 8017302:	2b01      	cmp	r3, #1
 8017304:	d003      	beq.n	801730e <USBD_LL_DataOutStage+0x82>
 8017306:	e018      	b.n	801733a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8017308:	2300      	movs	r3, #0
 801730a:	75bb      	strb	r3, [r7, #22]
            break;
 801730c:	e018      	b.n	8017340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8017314:	b2db      	uxtb	r3, r3
 8017316:	4619      	mov	r1, r3
 8017318:	68f8      	ldr	r0, [r7, #12]
 801731a:	f000 fa64 	bl	80177e6 <USBD_CoreFindIF>
 801731e:	4603      	mov	r3, r0
 8017320:	75bb      	strb	r3, [r7, #22]
            break;
 8017322:	e00d      	b.n	8017340 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801732a:	b2db      	uxtb	r3, r3
 801732c:	4619      	mov	r1, r3
 801732e:	68f8      	ldr	r0, [r7, #12]
 8017330:	f000 fa66 	bl	8017800 <USBD_CoreFindEP>
 8017334:	4603      	mov	r3, r0
 8017336:	75bb      	strb	r3, [r7, #22]
            break;
 8017338:	e002      	b.n	8017340 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801733a:	2300      	movs	r3, #0
 801733c:	75bb      	strb	r3, [r7, #22]
            break;
 801733e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8017340:	7dbb      	ldrb	r3, [r7, #22]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d119      	bne.n	801737a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801734c:	b2db      	uxtb	r3, r3
 801734e:	2b03      	cmp	r3, #3
 8017350:	d113      	bne.n	801737a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8017352:	7dba      	ldrb	r2, [r7, #22]
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	32ae      	adds	r2, #174	@ 0xae
 8017358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801735c:	691b      	ldr	r3, [r3, #16]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d00b      	beq.n	801737a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8017362:	7dba      	ldrb	r2, [r7, #22]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801736a:	7dba      	ldrb	r2, [r7, #22]
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	32ae      	adds	r2, #174	@ 0xae
 8017370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017374:	691b      	ldr	r3, [r3, #16]
 8017376:	68f8      	ldr	r0, [r7, #12]
 8017378:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801737a:	68f8      	ldr	r0, [r7, #12]
 801737c:	f001 f984 	bl	8018688 <USBD_CtlSendStatus>
 8017380:	e032      	b.n	80173e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8017382:	7afb      	ldrb	r3, [r7, #11]
 8017384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017388:	b2db      	uxtb	r3, r3
 801738a:	4619      	mov	r1, r3
 801738c:	68f8      	ldr	r0, [r7, #12]
 801738e:	f000 fa37 	bl	8017800 <USBD_CoreFindEP>
 8017392:	4603      	mov	r3, r0
 8017394:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017396:	7dbb      	ldrb	r3, [r7, #22]
 8017398:	2bff      	cmp	r3, #255	@ 0xff
 801739a:	d025      	beq.n	80173e8 <USBD_LL_DataOutStage+0x15c>
 801739c:	7dbb      	ldrb	r3, [r7, #22]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d122      	bne.n	80173e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	2b03      	cmp	r3, #3
 80173ac:	d117      	bne.n	80173de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80173ae:	7dba      	ldrb	r2, [r7, #22]
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	32ae      	adds	r2, #174	@ 0xae
 80173b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173b8:	699b      	ldr	r3, [r3, #24]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d00f      	beq.n	80173de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80173be:	7dba      	ldrb	r2, [r7, #22]
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80173c6:	7dba      	ldrb	r2, [r7, #22]
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	32ae      	adds	r2, #174	@ 0xae
 80173cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80173d0:	699b      	ldr	r3, [r3, #24]
 80173d2:	7afa      	ldrb	r2, [r7, #11]
 80173d4:	4611      	mov	r1, r2
 80173d6:	68f8      	ldr	r0, [r7, #12]
 80173d8:	4798      	blx	r3
 80173da:	4603      	mov	r3, r0
 80173dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80173de:	7dfb      	ldrb	r3, [r7, #23]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d001      	beq.n	80173e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80173e4:	7dfb      	ldrb	r3, [r7, #23]
 80173e6:	e000      	b.n	80173ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80173e8:	2300      	movs	r3, #0
}
 80173ea:	4618      	mov	r0, r3
 80173ec:	3718      	adds	r7, #24
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}

080173f2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80173f2:	b580      	push	{r7, lr}
 80173f4:	b086      	sub	sp, #24
 80173f6:	af00      	add	r7, sp, #0
 80173f8:	60f8      	str	r0, [r7, #12]
 80173fa:	460b      	mov	r3, r1
 80173fc:	607a      	str	r2, [r7, #4]
 80173fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8017400:	7afb      	ldrb	r3, [r7, #11]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d16f      	bne.n	80174e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	3314      	adds	r3, #20
 801740a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8017412:	2b02      	cmp	r3, #2
 8017414:	d15a      	bne.n	80174cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8017416:	693b      	ldr	r3, [r7, #16]
 8017418:	689a      	ldr	r2, [r3, #8]
 801741a:	693b      	ldr	r3, [r7, #16]
 801741c:	68db      	ldr	r3, [r3, #12]
 801741e:	429a      	cmp	r2, r3
 8017420:	d914      	bls.n	801744c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017422:	693b      	ldr	r3, [r7, #16]
 8017424:	689a      	ldr	r2, [r3, #8]
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	68db      	ldr	r3, [r3, #12]
 801742a:	1ad2      	subs	r2, r2, r3
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017430:	693b      	ldr	r3, [r7, #16]
 8017432:	689b      	ldr	r3, [r3, #8]
 8017434:	461a      	mov	r2, r3
 8017436:	6879      	ldr	r1, [r7, #4]
 8017438:	68f8      	ldr	r0, [r7, #12]
 801743a:	f001 f8e6 	bl	801860a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801743e:	2300      	movs	r3, #0
 8017440:	2200      	movs	r2, #0
 8017442:	2100      	movs	r1, #0
 8017444:	68f8      	ldr	r0, [r7, #12]
 8017446:	f001 fe27 	bl	8019098 <USBD_LL_PrepareReceive>
 801744a:	e03f      	b.n	80174cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801744c:	693b      	ldr	r3, [r7, #16]
 801744e:	68da      	ldr	r2, [r3, #12]
 8017450:	693b      	ldr	r3, [r7, #16]
 8017452:	689b      	ldr	r3, [r3, #8]
 8017454:	429a      	cmp	r2, r3
 8017456:	d11c      	bne.n	8017492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8017458:	693b      	ldr	r3, [r7, #16]
 801745a:	685a      	ldr	r2, [r3, #4]
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017460:	429a      	cmp	r2, r3
 8017462:	d316      	bcc.n	8017492 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	685a      	ldr	r2, [r3, #4]
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801746e:	429a      	cmp	r2, r3
 8017470:	d20f      	bcs.n	8017492 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017472:	2200      	movs	r2, #0
 8017474:	2100      	movs	r1, #0
 8017476:	68f8      	ldr	r0, [r7, #12]
 8017478:	f001 f8c7 	bl	801860a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	2200      	movs	r2, #0
 8017480:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017484:	2300      	movs	r3, #0
 8017486:	2200      	movs	r2, #0
 8017488:	2100      	movs	r1, #0
 801748a:	68f8      	ldr	r0, [r7, #12]
 801748c:	f001 fe04 	bl	8019098 <USBD_LL_PrepareReceive>
 8017490:	e01c      	b.n	80174cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017498:	b2db      	uxtb	r3, r3
 801749a:	2b03      	cmp	r3, #3
 801749c:	d10f      	bne.n	80174be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80174a4:	68db      	ldr	r3, [r3, #12]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d009      	beq.n	80174be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2200      	movs	r2, #0
 80174ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80174b8:	68db      	ldr	r3, [r3, #12]
 80174ba:	68f8      	ldr	r0, [r7, #12]
 80174bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80174be:	2180      	movs	r1, #128	@ 0x80
 80174c0:	68f8      	ldr	r0, [r7, #12]
 80174c2:	f001 fd3f 	bl	8018f44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80174c6:	68f8      	ldr	r0, [r7, #12]
 80174c8:	f001 f8f1 	bl	80186ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d03a      	beq.n	801754c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80174d6:	68f8      	ldr	r0, [r7, #12]
 80174d8:	f7ff fe42 	bl	8017160 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	2200      	movs	r2, #0
 80174e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80174e4:	e032      	b.n	801754c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80174e6:	7afb      	ldrb	r3, [r7, #11]
 80174e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80174ec:	b2db      	uxtb	r3, r3
 80174ee:	4619      	mov	r1, r3
 80174f0:	68f8      	ldr	r0, [r7, #12]
 80174f2:	f000 f985 	bl	8017800 <USBD_CoreFindEP>
 80174f6:	4603      	mov	r3, r0
 80174f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80174fa:	7dfb      	ldrb	r3, [r7, #23]
 80174fc:	2bff      	cmp	r3, #255	@ 0xff
 80174fe:	d025      	beq.n	801754c <USBD_LL_DataInStage+0x15a>
 8017500:	7dfb      	ldrb	r3, [r7, #23]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d122      	bne.n	801754c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801750c:	b2db      	uxtb	r3, r3
 801750e:	2b03      	cmp	r3, #3
 8017510:	d11c      	bne.n	801754c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8017512:	7dfa      	ldrb	r2, [r7, #23]
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	32ae      	adds	r2, #174	@ 0xae
 8017518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801751c:	695b      	ldr	r3, [r3, #20]
 801751e:	2b00      	cmp	r3, #0
 8017520:	d014      	beq.n	801754c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8017522:	7dfa      	ldrb	r2, [r7, #23]
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801752a:	7dfa      	ldrb	r2, [r7, #23]
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	32ae      	adds	r2, #174	@ 0xae
 8017530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017534:	695b      	ldr	r3, [r3, #20]
 8017536:	7afa      	ldrb	r2, [r7, #11]
 8017538:	4611      	mov	r1, r2
 801753a:	68f8      	ldr	r0, [r7, #12]
 801753c:	4798      	blx	r3
 801753e:	4603      	mov	r3, r0
 8017540:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8017542:	7dbb      	ldrb	r3, [r7, #22]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d001      	beq.n	801754c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8017548:	7dbb      	ldrb	r3, [r7, #22]
 801754a:	e000      	b.n	801754e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801754c:	2300      	movs	r3, #0
}
 801754e:	4618      	mov	r0, r3
 8017550:	3718      	adds	r7, #24
 8017552:	46bd      	mov	sp, r7
 8017554:	bd80      	pop	{r7, pc}

08017556 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017556:	b580      	push	{r7, lr}
 8017558:	b084      	sub	sp, #16
 801755a:	af00      	add	r7, sp, #0
 801755c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801755e:	2300      	movs	r3, #0
 8017560:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	2201      	movs	r2, #1
 8017566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	2200      	movs	r2, #0
 801756e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	2200      	movs	r2, #0
 8017576:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	2200      	movs	r2, #0
 801757c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2200      	movs	r2, #0
 8017584:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801758e:	2b00      	cmp	r3, #0
 8017590:	d014      	beq.n	80175bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017598:	685b      	ldr	r3, [r3, #4]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d00e      	beq.n	80175bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80175a4:	685b      	ldr	r3, [r3, #4]
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	6852      	ldr	r2, [r2, #4]
 80175aa:	b2d2      	uxtb	r2, r2
 80175ac:	4611      	mov	r1, r2
 80175ae:	6878      	ldr	r0, [r7, #4]
 80175b0:	4798      	blx	r3
 80175b2:	4603      	mov	r3, r0
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d001      	beq.n	80175bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80175b8:	2303      	movs	r3, #3
 80175ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80175bc:	2340      	movs	r3, #64	@ 0x40
 80175be:	2200      	movs	r2, #0
 80175c0:	2100      	movs	r1, #0
 80175c2:	6878      	ldr	r0, [r7, #4]
 80175c4:	f001 fc79 	bl	8018eba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	2201      	movs	r2, #1
 80175cc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	2240      	movs	r2, #64	@ 0x40
 80175d4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80175d8:	2340      	movs	r3, #64	@ 0x40
 80175da:	2200      	movs	r2, #0
 80175dc:	2180      	movs	r1, #128	@ 0x80
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f001 fc6b 	bl	8018eba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2201      	movs	r2, #1
 80175e8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	2240      	movs	r2, #64	@ 0x40
 80175ee:	621a      	str	r2, [r3, #32]

  return ret;
 80175f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3710      	adds	r7, #16
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}

080175fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80175fa:	b480      	push	{r7}
 80175fc:	b083      	sub	sp, #12
 80175fe:	af00      	add	r7, sp, #0
 8017600:	6078      	str	r0, [r7, #4]
 8017602:	460b      	mov	r3, r1
 8017604:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	78fa      	ldrb	r2, [r7, #3]
 801760a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801760c:	2300      	movs	r3, #0
}
 801760e:	4618      	mov	r0, r3
 8017610:	370c      	adds	r7, #12
 8017612:	46bd      	mov	sp, r7
 8017614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017618:	4770      	bx	lr

0801761a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801761a:	b480      	push	{r7}
 801761c:	b083      	sub	sp, #12
 801761e:	af00      	add	r7, sp, #0
 8017620:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017628:	b2db      	uxtb	r3, r3
 801762a:	2b04      	cmp	r3, #4
 801762c:	d006      	beq.n	801763c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017634:	b2da      	uxtb	r2, r3
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	2204      	movs	r2, #4
 8017640:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8017644:	2300      	movs	r3, #0
}
 8017646:	4618      	mov	r0, r3
 8017648:	370c      	adds	r7, #12
 801764a:	46bd      	mov	sp, r7
 801764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017650:	4770      	bx	lr

08017652 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8017652:	b480      	push	{r7}
 8017654:	b083      	sub	sp, #12
 8017656:	af00      	add	r7, sp, #0
 8017658:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017660:	b2db      	uxtb	r3, r3
 8017662:	2b04      	cmp	r3, #4
 8017664:	d106      	bne.n	8017674 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801766c:	b2da      	uxtb	r2, r3
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8017674:	2300      	movs	r3, #0
}
 8017676:	4618      	mov	r0, r3
 8017678:	370c      	adds	r7, #12
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr

08017682 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8017682:	b580      	push	{r7, lr}
 8017684:	b082      	sub	sp, #8
 8017686:	af00      	add	r7, sp, #0
 8017688:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017690:	b2db      	uxtb	r3, r3
 8017692:	2b03      	cmp	r3, #3
 8017694:	d110      	bne.n	80176b8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801769c:	2b00      	cmp	r3, #0
 801769e:	d00b      	beq.n	80176b8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176a6:	69db      	ldr	r3, [r3, #28]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d005      	beq.n	80176b8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80176b2:	69db      	ldr	r3, [r3, #28]
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80176b8:	2300      	movs	r3, #0
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3708      	adds	r7, #8
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b082      	sub	sp, #8
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6078      	str	r0, [r7, #4]
 80176ca:	460b      	mov	r3, r1
 80176cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	32ae      	adds	r2, #174	@ 0xae
 80176d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d101      	bne.n	80176e4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80176e0:	2303      	movs	r3, #3
 80176e2:	e01c      	b.n	801771e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176ea:	b2db      	uxtb	r3, r3
 80176ec:	2b03      	cmp	r3, #3
 80176ee:	d115      	bne.n	801771c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	32ae      	adds	r2, #174	@ 0xae
 80176fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80176fe:	6a1b      	ldr	r3, [r3, #32]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d00b      	beq.n	801771c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	32ae      	adds	r2, #174	@ 0xae
 801770e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017712:	6a1b      	ldr	r3, [r3, #32]
 8017714:	78fa      	ldrb	r2, [r7, #3]
 8017716:	4611      	mov	r1, r2
 8017718:	6878      	ldr	r0, [r7, #4]
 801771a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801771c:	2300      	movs	r3, #0
}
 801771e:	4618      	mov	r0, r3
 8017720:	3708      	adds	r7, #8
 8017722:	46bd      	mov	sp, r7
 8017724:	bd80      	pop	{r7, pc}

08017726 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8017726:	b580      	push	{r7, lr}
 8017728:	b082      	sub	sp, #8
 801772a:	af00      	add	r7, sp, #0
 801772c:	6078      	str	r0, [r7, #4]
 801772e:	460b      	mov	r3, r1
 8017730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	32ae      	adds	r2, #174	@ 0xae
 801773c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d101      	bne.n	8017748 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8017744:	2303      	movs	r3, #3
 8017746:	e01c      	b.n	8017782 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801774e:	b2db      	uxtb	r3, r3
 8017750:	2b03      	cmp	r3, #3
 8017752:	d115      	bne.n	8017780 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	32ae      	adds	r2, #174	@ 0xae
 801775e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017764:	2b00      	cmp	r3, #0
 8017766:	d00b      	beq.n	8017780 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	32ae      	adds	r2, #174	@ 0xae
 8017772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017778:	78fa      	ldrb	r2, [r7, #3]
 801777a:	4611      	mov	r1, r2
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017780:	2300      	movs	r3, #0
}
 8017782:	4618      	mov	r0, r3
 8017784:	3708      	adds	r7, #8
 8017786:	46bd      	mov	sp, r7
 8017788:	bd80      	pop	{r7, pc}

0801778a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801778a:	b480      	push	{r7}
 801778c:	b083      	sub	sp, #12
 801778e:	af00      	add	r7, sp, #0
 8017790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017792:	2300      	movs	r3, #0
}
 8017794:	4618      	mov	r0, r3
 8017796:	370c      	adds	r7, #12
 8017798:	46bd      	mov	sp, r7
 801779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779e:	4770      	bx	lr

080177a0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b084      	sub	sp, #16
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80177a8:	2300      	movs	r3, #0
 80177aa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2201      	movs	r2, #1
 80177b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00e      	beq.n	80177dc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80177c4:	685b      	ldr	r3, [r3, #4]
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	6852      	ldr	r2, [r2, #4]
 80177ca:	b2d2      	uxtb	r2, r2
 80177cc:	4611      	mov	r1, r2
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	4798      	blx	r3
 80177d2:	4603      	mov	r3, r0
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d001      	beq.n	80177dc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80177d8:	2303      	movs	r3, #3
 80177da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80177dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3710      	adds	r7, #16
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}

080177e6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80177e6:	b480      	push	{r7}
 80177e8:	b083      	sub	sp, #12
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	6078      	str	r0, [r7, #4]
 80177ee:	460b      	mov	r3, r1
 80177f0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80177f2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80177f4:	4618      	mov	r0, r3
 80177f6:	370c      	adds	r7, #12
 80177f8:	46bd      	mov	sp, r7
 80177fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177fe:	4770      	bx	lr

08017800 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8017800:	b480      	push	{r7}
 8017802:	b083      	sub	sp, #12
 8017804:	af00      	add	r7, sp, #0
 8017806:	6078      	str	r0, [r7, #4]
 8017808:	460b      	mov	r3, r1
 801780a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801780c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801780e:	4618      	mov	r0, r3
 8017810:	370c      	adds	r7, #12
 8017812:	46bd      	mov	sp, r7
 8017814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017818:	4770      	bx	lr

0801781a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801781a:	b580      	push	{r7, lr}
 801781c:	b086      	sub	sp, #24
 801781e:	af00      	add	r7, sp, #0
 8017820:	6078      	str	r0, [r7, #4]
 8017822:	460b      	mov	r3, r1
 8017824:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801782e:	2300      	movs	r3, #0
 8017830:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	885b      	ldrh	r3, [r3, #2]
 8017836:	b29b      	uxth	r3, r3
 8017838:	68fa      	ldr	r2, [r7, #12]
 801783a:	7812      	ldrb	r2, [r2, #0]
 801783c:	4293      	cmp	r3, r2
 801783e:	d91f      	bls.n	8017880 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	781b      	ldrb	r3, [r3, #0]
 8017844:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8017846:	e013      	b.n	8017870 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8017848:	f107 030a 	add.w	r3, r7, #10
 801784c:	4619      	mov	r1, r3
 801784e:	6978      	ldr	r0, [r7, #20]
 8017850:	f000 f81b 	bl	801788a <USBD_GetNextDesc>
 8017854:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	785b      	ldrb	r3, [r3, #1]
 801785a:	2b05      	cmp	r3, #5
 801785c:	d108      	bne.n	8017870 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801785e:	697b      	ldr	r3, [r7, #20]
 8017860:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8017862:	693b      	ldr	r3, [r7, #16]
 8017864:	789b      	ldrb	r3, [r3, #2]
 8017866:	78fa      	ldrb	r2, [r7, #3]
 8017868:	429a      	cmp	r2, r3
 801786a:	d008      	beq.n	801787e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801786c:	2300      	movs	r3, #0
 801786e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	885b      	ldrh	r3, [r3, #2]
 8017874:	b29a      	uxth	r2, r3
 8017876:	897b      	ldrh	r3, [r7, #10]
 8017878:	429a      	cmp	r2, r3
 801787a:	d8e5      	bhi.n	8017848 <USBD_GetEpDesc+0x2e>
 801787c:	e000      	b.n	8017880 <USBD_GetEpDesc+0x66>
          break;
 801787e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8017880:	693b      	ldr	r3, [r7, #16]
}
 8017882:	4618      	mov	r0, r3
 8017884:	3718      	adds	r7, #24
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801788a:	b480      	push	{r7}
 801788c:	b085      	sub	sp, #20
 801788e:	af00      	add	r7, sp, #0
 8017890:	6078      	str	r0, [r7, #4]
 8017892:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8017898:	683b      	ldr	r3, [r7, #0]
 801789a:	881b      	ldrh	r3, [r3, #0]
 801789c:	68fa      	ldr	r2, [r7, #12]
 801789e:	7812      	ldrb	r2, [r2, #0]
 80178a0:	4413      	add	r3, r2
 80178a2:	b29a      	uxth	r2, r3
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	461a      	mov	r2, r3
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4413      	add	r3, r2
 80178b2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80178b4:	68fb      	ldr	r3, [r7, #12]
}
 80178b6:	4618      	mov	r0, r3
 80178b8:	3714      	adds	r7, #20
 80178ba:	46bd      	mov	sp, r7
 80178bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c0:	4770      	bx	lr

080178c2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80178c2:	b480      	push	{r7}
 80178c4:	b087      	sub	sp, #28
 80178c6:	af00      	add	r7, sp, #0
 80178c8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	3301      	adds	r3, #1
 80178d8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80178da:	697b      	ldr	r3, [r7, #20]
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80178e0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80178e4:	021b      	lsls	r3, r3, #8
 80178e6:	b21a      	sxth	r2, r3
 80178e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80178ec:	4313      	orrs	r3, r2
 80178ee:	b21b      	sxth	r3, r3
 80178f0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80178f2:	89fb      	ldrh	r3, [r7, #14]
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	371c      	adds	r7, #28
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr

08017900 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b084      	sub	sp, #16
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
 8017908:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801790a:	2300      	movs	r3, #0
 801790c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801790e:	683b      	ldr	r3, [r7, #0]
 8017910:	781b      	ldrb	r3, [r3, #0]
 8017912:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017916:	2b40      	cmp	r3, #64	@ 0x40
 8017918:	d005      	beq.n	8017926 <USBD_StdDevReq+0x26>
 801791a:	2b40      	cmp	r3, #64	@ 0x40
 801791c:	d857      	bhi.n	80179ce <USBD_StdDevReq+0xce>
 801791e:	2b00      	cmp	r3, #0
 8017920:	d00f      	beq.n	8017942 <USBD_StdDevReq+0x42>
 8017922:	2b20      	cmp	r3, #32
 8017924:	d153      	bne.n	80179ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	32ae      	adds	r2, #174	@ 0xae
 8017930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017934:	689b      	ldr	r3, [r3, #8]
 8017936:	6839      	ldr	r1, [r7, #0]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	4798      	blx	r3
 801793c:	4603      	mov	r3, r0
 801793e:	73fb      	strb	r3, [r7, #15]
      break;
 8017940:	e04a      	b.n	80179d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	785b      	ldrb	r3, [r3, #1]
 8017946:	2b09      	cmp	r3, #9
 8017948:	d83b      	bhi.n	80179c2 <USBD_StdDevReq+0xc2>
 801794a:	a201      	add	r2, pc, #4	@ (adr r2, 8017950 <USBD_StdDevReq+0x50>)
 801794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017950:	080179a5 	.word	0x080179a5
 8017954:	080179b9 	.word	0x080179b9
 8017958:	080179c3 	.word	0x080179c3
 801795c:	080179af 	.word	0x080179af
 8017960:	080179c3 	.word	0x080179c3
 8017964:	08017983 	.word	0x08017983
 8017968:	08017979 	.word	0x08017979
 801796c:	080179c3 	.word	0x080179c3
 8017970:	0801799b 	.word	0x0801799b
 8017974:	0801798d 	.word	0x0801798d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017978:	6839      	ldr	r1, [r7, #0]
 801797a:	6878      	ldr	r0, [r7, #4]
 801797c:	f000 fa3c 	bl	8017df8 <USBD_GetDescriptor>
          break;
 8017980:	e024      	b.n	80179cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8017982:	6839      	ldr	r1, [r7, #0]
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f000 fbcb 	bl	8018120 <USBD_SetAddress>
          break;
 801798a:	e01f      	b.n	80179cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801798c:	6839      	ldr	r1, [r7, #0]
 801798e:	6878      	ldr	r0, [r7, #4]
 8017990:	f000 fc0a 	bl	80181a8 <USBD_SetConfig>
 8017994:	4603      	mov	r3, r0
 8017996:	73fb      	strb	r3, [r7, #15]
          break;
 8017998:	e018      	b.n	80179cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801799a:	6839      	ldr	r1, [r7, #0]
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f000 fcad 	bl	80182fc <USBD_GetConfig>
          break;
 80179a2:	e013      	b.n	80179cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80179a4:	6839      	ldr	r1, [r7, #0]
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	f000 fcde 	bl	8018368 <USBD_GetStatus>
          break;
 80179ac:	e00e      	b.n	80179cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80179ae:	6839      	ldr	r1, [r7, #0]
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f000 fd0d 	bl	80183d0 <USBD_SetFeature>
          break;
 80179b6:	e009      	b.n	80179cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80179b8:	6839      	ldr	r1, [r7, #0]
 80179ba:	6878      	ldr	r0, [r7, #4]
 80179bc:	f000 fd31 	bl	8018422 <USBD_ClrFeature>
          break;
 80179c0:	e004      	b.n	80179cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80179c2:	6839      	ldr	r1, [r7, #0]
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	f000 fd88 	bl	80184da <USBD_CtlError>
          break;
 80179ca:	bf00      	nop
      }
      break;
 80179cc:	e004      	b.n	80179d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80179ce:	6839      	ldr	r1, [r7, #0]
 80179d0:	6878      	ldr	r0, [r7, #4]
 80179d2:	f000 fd82 	bl	80184da <USBD_CtlError>
      break;
 80179d6:	bf00      	nop
  }

  return ret;
 80179d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80179da:	4618      	mov	r0, r3
 80179dc:	3710      	adds	r7, #16
 80179de:	46bd      	mov	sp, r7
 80179e0:	bd80      	pop	{r7, pc}
 80179e2:	bf00      	nop

080179e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b084      	sub	sp, #16
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80179ee:	2300      	movs	r3, #0
 80179f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80179f2:	683b      	ldr	r3, [r7, #0]
 80179f4:	781b      	ldrb	r3, [r3, #0]
 80179f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80179fa:	2b40      	cmp	r3, #64	@ 0x40
 80179fc:	d005      	beq.n	8017a0a <USBD_StdItfReq+0x26>
 80179fe:	2b40      	cmp	r3, #64	@ 0x40
 8017a00:	d852      	bhi.n	8017aa8 <USBD_StdItfReq+0xc4>
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d001      	beq.n	8017a0a <USBD_StdItfReq+0x26>
 8017a06:	2b20      	cmp	r3, #32
 8017a08:	d14e      	bne.n	8017aa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017a10:	b2db      	uxtb	r3, r3
 8017a12:	3b01      	subs	r3, #1
 8017a14:	2b02      	cmp	r3, #2
 8017a16:	d840      	bhi.n	8017a9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	889b      	ldrh	r3, [r3, #4]
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	2b01      	cmp	r3, #1
 8017a20:	d836      	bhi.n	8017a90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	889b      	ldrh	r3, [r3, #4]
 8017a26:	b2db      	uxtb	r3, r3
 8017a28:	4619      	mov	r1, r3
 8017a2a:	6878      	ldr	r0, [r7, #4]
 8017a2c:	f7ff fedb 	bl	80177e6 <USBD_CoreFindIF>
 8017a30:	4603      	mov	r3, r0
 8017a32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017a34:	7bbb      	ldrb	r3, [r7, #14]
 8017a36:	2bff      	cmp	r3, #255	@ 0xff
 8017a38:	d01d      	beq.n	8017a76 <USBD_StdItfReq+0x92>
 8017a3a:	7bbb      	ldrb	r3, [r7, #14]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d11a      	bne.n	8017a76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8017a40:	7bba      	ldrb	r2, [r7, #14]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	32ae      	adds	r2, #174	@ 0xae
 8017a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a4a:	689b      	ldr	r3, [r3, #8]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d00f      	beq.n	8017a70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8017a50:	7bba      	ldrb	r2, [r7, #14]
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017a58:	7bba      	ldrb	r2, [r7, #14]
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	32ae      	adds	r2, #174	@ 0xae
 8017a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a62:	689b      	ldr	r3, [r3, #8]
 8017a64:	6839      	ldr	r1, [r7, #0]
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	4798      	blx	r3
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017a6e:	e004      	b.n	8017a7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8017a70:	2303      	movs	r3, #3
 8017a72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8017a74:	e001      	b.n	8017a7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8017a76:	2303      	movs	r3, #3
 8017a78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	88db      	ldrh	r3, [r3, #6]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d110      	bne.n	8017aa4 <USBD_StdItfReq+0xc0>
 8017a82:	7bfb      	ldrb	r3, [r7, #15]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d10d      	bne.n	8017aa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f000 fdfd 	bl	8018688 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8017a8e:	e009      	b.n	8017aa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8017a90:	6839      	ldr	r1, [r7, #0]
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f000 fd21 	bl	80184da <USBD_CtlError>
          break;
 8017a98:	e004      	b.n	8017aa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8017a9a:	6839      	ldr	r1, [r7, #0]
 8017a9c:	6878      	ldr	r0, [r7, #4]
 8017a9e:	f000 fd1c 	bl	80184da <USBD_CtlError>
          break;
 8017aa2:	e000      	b.n	8017aa6 <USBD_StdItfReq+0xc2>
          break;
 8017aa4:	bf00      	nop
      }
      break;
 8017aa6:	e004      	b.n	8017ab2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8017aa8:	6839      	ldr	r1, [r7, #0]
 8017aaa:	6878      	ldr	r0, [r7, #4]
 8017aac:	f000 fd15 	bl	80184da <USBD_CtlError>
      break;
 8017ab0:	bf00      	nop
  }

  return ret;
 8017ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ab4:	4618      	mov	r0, r3
 8017ab6:	3710      	adds	r7, #16
 8017ab8:	46bd      	mov	sp, r7
 8017aba:	bd80      	pop	{r7, pc}

08017abc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b084      	sub	sp, #16
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8017aca:	683b      	ldr	r3, [r7, #0]
 8017acc:	889b      	ldrh	r3, [r3, #4]
 8017ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8017ad8:	2b40      	cmp	r3, #64	@ 0x40
 8017ada:	d007      	beq.n	8017aec <USBD_StdEPReq+0x30>
 8017adc:	2b40      	cmp	r3, #64	@ 0x40
 8017ade:	f200 817f 	bhi.w	8017de0 <USBD_StdEPReq+0x324>
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d02a      	beq.n	8017b3c <USBD_StdEPReq+0x80>
 8017ae6:	2b20      	cmp	r3, #32
 8017ae8:	f040 817a 	bne.w	8017de0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8017aec:	7bbb      	ldrb	r3, [r7, #14]
 8017aee:	4619      	mov	r1, r3
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f7ff fe85 	bl	8017800 <USBD_CoreFindEP>
 8017af6:	4603      	mov	r3, r0
 8017af8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017afa:	7b7b      	ldrb	r3, [r7, #13]
 8017afc:	2bff      	cmp	r3, #255	@ 0xff
 8017afe:	f000 8174 	beq.w	8017dea <USBD_StdEPReq+0x32e>
 8017b02:	7b7b      	ldrb	r3, [r7, #13]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f040 8170 	bne.w	8017dea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8017b0a:	7b7a      	ldrb	r2, [r7, #13]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8017b12:	7b7a      	ldrb	r2, [r7, #13]
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	32ae      	adds	r2, #174	@ 0xae
 8017b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b1c:	689b      	ldr	r3, [r3, #8]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	f000 8163 	beq.w	8017dea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8017b24:	7b7a      	ldrb	r2, [r7, #13]
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	32ae      	adds	r2, #174	@ 0xae
 8017b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b2e:	689b      	ldr	r3, [r3, #8]
 8017b30:	6839      	ldr	r1, [r7, #0]
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	4798      	blx	r3
 8017b36:	4603      	mov	r3, r0
 8017b38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8017b3a:	e156      	b.n	8017dea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	785b      	ldrb	r3, [r3, #1]
 8017b40:	2b03      	cmp	r3, #3
 8017b42:	d008      	beq.n	8017b56 <USBD_StdEPReq+0x9a>
 8017b44:	2b03      	cmp	r3, #3
 8017b46:	f300 8145 	bgt.w	8017dd4 <USBD_StdEPReq+0x318>
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	f000 809b 	beq.w	8017c86 <USBD_StdEPReq+0x1ca>
 8017b50:	2b01      	cmp	r3, #1
 8017b52:	d03c      	beq.n	8017bce <USBD_StdEPReq+0x112>
 8017b54:	e13e      	b.n	8017dd4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b02      	cmp	r3, #2
 8017b60:	d002      	beq.n	8017b68 <USBD_StdEPReq+0xac>
 8017b62:	2b03      	cmp	r3, #3
 8017b64:	d016      	beq.n	8017b94 <USBD_StdEPReq+0xd8>
 8017b66:	e02c      	b.n	8017bc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017b68:	7bbb      	ldrb	r3, [r7, #14]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d00d      	beq.n	8017b8a <USBD_StdEPReq+0xce>
 8017b6e:	7bbb      	ldrb	r3, [r7, #14]
 8017b70:	2b80      	cmp	r3, #128	@ 0x80
 8017b72:	d00a      	beq.n	8017b8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017b74:	7bbb      	ldrb	r3, [r7, #14]
 8017b76:	4619      	mov	r1, r3
 8017b78:	6878      	ldr	r0, [r7, #4]
 8017b7a:	f001 f9e3 	bl	8018f44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017b7e:	2180      	movs	r1, #128	@ 0x80
 8017b80:	6878      	ldr	r0, [r7, #4]
 8017b82:	f001 f9df 	bl	8018f44 <USBD_LL_StallEP>
 8017b86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017b88:	e020      	b.n	8017bcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8017b8a:	6839      	ldr	r1, [r7, #0]
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f000 fca4 	bl	80184da <USBD_CtlError>
              break;
 8017b92:	e01b      	b.n	8017bcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017b94:	683b      	ldr	r3, [r7, #0]
 8017b96:	885b      	ldrh	r3, [r3, #2]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d10e      	bne.n	8017bba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017b9c:	7bbb      	ldrb	r3, [r7, #14]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d00b      	beq.n	8017bba <USBD_StdEPReq+0xfe>
 8017ba2:	7bbb      	ldrb	r3, [r7, #14]
 8017ba4:	2b80      	cmp	r3, #128	@ 0x80
 8017ba6:	d008      	beq.n	8017bba <USBD_StdEPReq+0xfe>
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	88db      	ldrh	r3, [r3, #6]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d104      	bne.n	8017bba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017bb0:	7bbb      	ldrb	r3, [r7, #14]
 8017bb2:	4619      	mov	r1, r3
 8017bb4:	6878      	ldr	r0, [r7, #4]
 8017bb6:	f001 f9c5 	bl	8018f44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017bba:	6878      	ldr	r0, [r7, #4]
 8017bbc:	f000 fd64 	bl	8018688 <USBD_CtlSendStatus>

              break;
 8017bc0:	e004      	b.n	8017bcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8017bc2:	6839      	ldr	r1, [r7, #0]
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f000 fc88 	bl	80184da <USBD_CtlError>
              break;
 8017bca:	bf00      	nop
          }
          break;
 8017bcc:	e107      	b.n	8017dde <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017bd4:	b2db      	uxtb	r3, r3
 8017bd6:	2b02      	cmp	r3, #2
 8017bd8:	d002      	beq.n	8017be0 <USBD_StdEPReq+0x124>
 8017bda:	2b03      	cmp	r3, #3
 8017bdc:	d016      	beq.n	8017c0c <USBD_StdEPReq+0x150>
 8017bde:	e04b      	b.n	8017c78 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017be0:	7bbb      	ldrb	r3, [r7, #14]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d00d      	beq.n	8017c02 <USBD_StdEPReq+0x146>
 8017be6:	7bbb      	ldrb	r3, [r7, #14]
 8017be8:	2b80      	cmp	r3, #128	@ 0x80
 8017bea:	d00a      	beq.n	8017c02 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017bec:	7bbb      	ldrb	r3, [r7, #14]
 8017bee:	4619      	mov	r1, r3
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f001 f9a7 	bl	8018f44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017bf6:	2180      	movs	r1, #128	@ 0x80
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f001 f9a3 	bl	8018f44 <USBD_LL_StallEP>
 8017bfe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017c00:	e040      	b.n	8017c84 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8017c02:	6839      	ldr	r1, [r7, #0]
 8017c04:	6878      	ldr	r0, [r7, #4]
 8017c06:	f000 fc68 	bl	80184da <USBD_CtlError>
              break;
 8017c0a:	e03b      	b.n	8017c84 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	885b      	ldrh	r3, [r3, #2]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d136      	bne.n	8017c82 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8017c14:	7bbb      	ldrb	r3, [r7, #14]
 8017c16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d004      	beq.n	8017c28 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017c1e:	7bbb      	ldrb	r3, [r7, #14]
 8017c20:	4619      	mov	r1, r3
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	f001 f9ad 	bl	8018f82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f000 fd2d 	bl	8018688 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017c2e:	7bbb      	ldrb	r3, [r7, #14]
 8017c30:	4619      	mov	r1, r3
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f7ff fde4 	bl	8017800 <USBD_CoreFindEP>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017c3c:	7b7b      	ldrb	r3, [r7, #13]
 8017c3e:	2bff      	cmp	r3, #255	@ 0xff
 8017c40:	d01f      	beq.n	8017c82 <USBD_StdEPReq+0x1c6>
 8017c42:	7b7b      	ldrb	r3, [r7, #13]
 8017c44:	2b00      	cmp	r3, #0
 8017c46:	d11c      	bne.n	8017c82 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017c48:	7b7a      	ldrb	r2, [r7, #13]
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017c50:	7b7a      	ldrb	r2, [r7, #13]
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	32ae      	adds	r2, #174	@ 0xae
 8017c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c5a:	689b      	ldr	r3, [r3, #8]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d010      	beq.n	8017c82 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017c60:	7b7a      	ldrb	r2, [r7, #13]
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	32ae      	adds	r2, #174	@ 0xae
 8017c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c6a:	689b      	ldr	r3, [r3, #8]
 8017c6c:	6839      	ldr	r1, [r7, #0]
 8017c6e:	6878      	ldr	r0, [r7, #4]
 8017c70:	4798      	blx	r3
 8017c72:	4603      	mov	r3, r0
 8017c74:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8017c76:	e004      	b.n	8017c82 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017c78:	6839      	ldr	r1, [r7, #0]
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f000 fc2d 	bl	80184da <USBD_CtlError>
              break;
 8017c80:	e000      	b.n	8017c84 <USBD_StdEPReq+0x1c8>
              break;
 8017c82:	bf00      	nop
          }
          break;
 8017c84:	e0ab      	b.n	8017dde <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	2b02      	cmp	r3, #2
 8017c90:	d002      	beq.n	8017c98 <USBD_StdEPReq+0x1dc>
 8017c92:	2b03      	cmp	r3, #3
 8017c94:	d032      	beq.n	8017cfc <USBD_StdEPReq+0x240>
 8017c96:	e097      	b.n	8017dc8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017c98:	7bbb      	ldrb	r3, [r7, #14]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d007      	beq.n	8017cae <USBD_StdEPReq+0x1f2>
 8017c9e:	7bbb      	ldrb	r3, [r7, #14]
 8017ca0:	2b80      	cmp	r3, #128	@ 0x80
 8017ca2:	d004      	beq.n	8017cae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8017ca4:	6839      	ldr	r1, [r7, #0]
 8017ca6:	6878      	ldr	r0, [r7, #4]
 8017ca8:	f000 fc17 	bl	80184da <USBD_CtlError>
                break;
 8017cac:	e091      	b.n	8017dd2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	da0b      	bge.n	8017cce <USBD_StdEPReq+0x212>
 8017cb6:	7bbb      	ldrb	r3, [r7, #14]
 8017cb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017cbc:	4613      	mov	r3, r2
 8017cbe:	009b      	lsls	r3, r3, #2
 8017cc0:	4413      	add	r3, r2
 8017cc2:	009b      	lsls	r3, r3, #2
 8017cc4:	3310      	adds	r3, #16
 8017cc6:	687a      	ldr	r2, [r7, #4]
 8017cc8:	4413      	add	r3, r2
 8017cca:	3304      	adds	r3, #4
 8017ccc:	e00b      	b.n	8017ce6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017cce:	7bbb      	ldrb	r3, [r7, #14]
 8017cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017cd4:	4613      	mov	r3, r2
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	4413      	add	r3, r2
 8017cda:	009b      	lsls	r3, r3, #2
 8017cdc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017ce0:	687a      	ldr	r2, [r7, #4]
 8017ce2:	4413      	add	r3, r2
 8017ce4:	3304      	adds	r3, #4
 8017ce6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017ce8:	68bb      	ldr	r3, [r7, #8]
 8017cea:	2200      	movs	r2, #0
 8017cec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017cee:	68bb      	ldr	r3, [r7, #8]
 8017cf0:	2202      	movs	r2, #2
 8017cf2:	4619      	mov	r1, r3
 8017cf4:	6878      	ldr	r0, [r7, #4]
 8017cf6:	f000 fc6d 	bl	80185d4 <USBD_CtlSendData>
              break;
 8017cfa:	e06a      	b.n	8017dd2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8017cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	da11      	bge.n	8017d28 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017d04:	7bbb      	ldrb	r3, [r7, #14]
 8017d06:	f003 020f 	and.w	r2, r3, #15
 8017d0a:	6879      	ldr	r1, [r7, #4]
 8017d0c:	4613      	mov	r3, r2
 8017d0e:	009b      	lsls	r3, r3, #2
 8017d10:	4413      	add	r3, r2
 8017d12:	009b      	lsls	r3, r3, #2
 8017d14:	440b      	add	r3, r1
 8017d16:	3324      	adds	r3, #36	@ 0x24
 8017d18:	881b      	ldrh	r3, [r3, #0]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d117      	bne.n	8017d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017d1e:	6839      	ldr	r1, [r7, #0]
 8017d20:	6878      	ldr	r0, [r7, #4]
 8017d22:	f000 fbda 	bl	80184da <USBD_CtlError>
                  break;
 8017d26:	e054      	b.n	8017dd2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017d28:	7bbb      	ldrb	r3, [r7, #14]
 8017d2a:	f003 020f 	and.w	r2, r3, #15
 8017d2e:	6879      	ldr	r1, [r7, #4]
 8017d30:	4613      	mov	r3, r2
 8017d32:	009b      	lsls	r3, r3, #2
 8017d34:	4413      	add	r3, r2
 8017d36:	009b      	lsls	r3, r3, #2
 8017d38:	440b      	add	r3, r1
 8017d3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017d3e:	881b      	ldrh	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d104      	bne.n	8017d4e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8017d44:	6839      	ldr	r1, [r7, #0]
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	f000 fbc7 	bl	80184da <USBD_CtlError>
                  break;
 8017d4c:	e041      	b.n	8017dd2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	da0b      	bge.n	8017d6e <USBD_StdEPReq+0x2b2>
 8017d56:	7bbb      	ldrb	r3, [r7, #14]
 8017d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017d5c:	4613      	mov	r3, r2
 8017d5e:	009b      	lsls	r3, r3, #2
 8017d60:	4413      	add	r3, r2
 8017d62:	009b      	lsls	r3, r3, #2
 8017d64:	3310      	adds	r3, #16
 8017d66:	687a      	ldr	r2, [r7, #4]
 8017d68:	4413      	add	r3, r2
 8017d6a:	3304      	adds	r3, #4
 8017d6c:	e00b      	b.n	8017d86 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017d6e:	7bbb      	ldrb	r3, [r7, #14]
 8017d70:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017d74:	4613      	mov	r3, r2
 8017d76:	009b      	lsls	r3, r3, #2
 8017d78:	4413      	add	r3, r2
 8017d7a:	009b      	lsls	r3, r3, #2
 8017d7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017d80:	687a      	ldr	r2, [r7, #4]
 8017d82:	4413      	add	r3, r2
 8017d84:	3304      	adds	r3, #4
 8017d86:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017d88:	7bbb      	ldrb	r3, [r7, #14]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d002      	beq.n	8017d94 <USBD_StdEPReq+0x2d8>
 8017d8e:	7bbb      	ldrb	r3, [r7, #14]
 8017d90:	2b80      	cmp	r3, #128	@ 0x80
 8017d92:	d103      	bne.n	8017d9c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8017d94:	68bb      	ldr	r3, [r7, #8]
 8017d96:	2200      	movs	r2, #0
 8017d98:	601a      	str	r2, [r3, #0]
 8017d9a:	e00e      	b.n	8017dba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017d9c:	7bbb      	ldrb	r3, [r7, #14]
 8017d9e:	4619      	mov	r1, r3
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f001 f90d 	bl	8018fc0 <USBD_LL_IsStallEP>
 8017da6:	4603      	mov	r3, r0
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d003      	beq.n	8017db4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	2201      	movs	r2, #1
 8017db0:	601a      	str	r2, [r3, #0]
 8017db2:	e002      	b.n	8017dba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8017db4:	68bb      	ldr	r3, [r7, #8]
 8017db6:	2200      	movs	r2, #0
 8017db8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	2202      	movs	r2, #2
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	6878      	ldr	r0, [r7, #4]
 8017dc2:	f000 fc07 	bl	80185d4 <USBD_CtlSendData>
              break;
 8017dc6:	e004      	b.n	8017dd2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8017dc8:	6839      	ldr	r1, [r7, #0]
 8017dca:	6878      	ldr	r0, [r7, #4]
 8017dcc:	f000 fb85 	bl	80184da <USBD_CtlError>
              break;
 8017dd0:	bf00      	nop
          }
          break;
 8017dd2:	e004      	b.n	8017dde <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8017dd4:	6839      	ldr	r1, [r7, #0]
 8017dd6:	6878      	ldr	r0, [r7, #4]
 8017dd8:	f000 fb7f 	bl	80184da <USBD_CtlError>
          break;
 8017ddc:	bf00      	nop
      }
      break;
 8017dde:	e005      	b.n	8017dec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8017de0:	6839      	ldr	r1, [r7, #0]
 8017de2:	6878      	ldr	r0, [r7, #4]
 8017de4:	f000 fb79 	bl	80184da <USBD_CtlError>
      break;
 8017de8:	e000      	b.n	8017dec <USBD_StdEPReq+0x330>
      break;
 8017dea:	bf00      	nop
  }

  return ret;
 8017dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	3710      	adds	r7, #16
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}
	...

08017df8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b084      	sub	sp, #16
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
 8017e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017e02:	2300      	movs	r3, #0
 8017e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017e06:	2300      	movs	r3, #0
 8017e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017e0a:	2300      	movs	r3, #0
 8017e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8017e0e:	683b      	ldr	r3, [r7, #0]
 8017e10:	885b      	ldrh	r3, [r3, #2]
 8017e12:	0a1b      	lsrs	r3, r3, #8
 8017e14:	b29b      	uxth	r3, r3
 8017e16:	3b01      	subs	r3, #1
 8017e18:	2b0e      	cmp	r3, #14
 8017e1a:	f200 8152 	bhi.w	80180c2 <USBD_GetDescriptor+0x2ca>
 8017e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8017e24 <USBD_GetDescriptor+0x2c>)
 8017e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e24:	08017e95 	.word	0x08017e95
 8017e28:	08017ead 	.word	0x08017ead
 8017e2c:	08017eed 	.word	0x08017eed
 8017e30:	080180c3 	.word	0x080180c3
 8017e34:	080180c3 	.word	0x080180c3
 8017e38:	08018063 	.word	0x08018063
 8017e3c:	0801808f 	.word	0x0801808f
 8017e40:	080180c3 	.word	0x080180c3
 8017e44:	080180c3 	.word	0x080180c3
 8017e48:	080180c3 	.word	0x080180c3
 8017e4c:	080180c3 	.word	0x080180c3
 8017e50:	080180c3 	.word	0x080180c3
 8017e54:	080180c3 	.word	0x080180c3
 8017e58:	080180c3 	.word	0x080180c3
 8017e5c:	08017e61 	.word	0x08017e61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017e66:	69db      	ldr	r3, [r3, #28]
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d00b      	beq.n	8017e84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017e72:	69db      	ldr	r3, [r3, #28]
 8017e74:	687a      	ldr	r2, [r7, #4]
 8017e76:	7c12      	ldrb	r2, [r2, #16]
 8017e78:	f107 0108 	add.w	r1, r7, #8
 8017e7c:	4610      	mov	r0, r2
 8017e7e:	4798      	blx	r3
 8017e80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017e82:	e126      	b.n	80180d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017e84:	6839      	ldr	r1, [r7, #0]
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f000 fb27 	bl	80184da <USBD_CtlError>
        err++;
 8017e8c:	7afb      	ldrb	r3, [r7, #11]
 8017e8e:	3301      	adds	r3, #1
 8017e90:	72fb      	strb	r3, [r7, #11]
      break;
 8017e92:	e11e      	b.n	80180d2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	687a      	ldr	r2, [r7, #4]
 8017e9e:	7c12      	ldrb	r2, [r2, #16]
 8017ea0:	f107 0108 	add.w	r1, r7, #8
 8017ea4:	4610      	mov	r0, r2
 8017ea6:	4798      	blx	r3
 8017ea8:	60f8      	str	r0, [r7, #12]
      break;
 8017eaa:	e112      	b.n	80180d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	7c1b      	ldrb	r3, [r3, #16]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d10d      	bne.n	8017ed0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017ebc:	f107 0208 	add.w	r2, r7, #8
 8017ec0:	4610      	mov	r0, r2
 8017ec2:	4798      	blx	r3
 8017ec4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	3301      	adds	r3, #1
 8017eca:	2202      	movs	r2, #2
 8017ecc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017ece:	e100      	b.n	80180d2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ed8:	f107 0208 	add.w	r2, r7, #8
 8017edc:	4610      	mov	r0, r2
 8017ede:	4798      	blx	r3
 8017ee0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	3301      	adds	r3, #1
 8017ee6:	2202      	movs	r2, #2
 8017ee8:	701a      	strb	r2, [r3, #0]
      break;
 8017eea:	e0f2      	b.n	80180d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017eec:	683b      	ldr	r3, [r7, #0]
 8017eee:	885b      	ldrh	r3, [r3, #2]
 8017ef0:	b2db      	uxtb	r3, r3
 8017ef2:	2b05      	cmp	r3, #5
 8017ef4:	f200 80ac 	bhi.w	8018050 <USBD_GetDescriptor+0x258>
 8017ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8017f00 <USBD_GetDescriptor+0x108>)
 8017efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017efe:	bf00      	nop
 8017f00:	08017f19 	.word	0x08017f19
 8017f04:	08017f4d 	.word	0x08017f4d
 8017f08:	08017f81 	.word	0x08017f81
 8017f0c:	08017fb5 	.word	0x08017fb5
 8017f10:	08017fe9 	.word	0x08017fe9
 8017f14:	0801801d 	.word	0x0801801d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f1e:	685b      	ldr	r3, [r3, #4]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d00b      	beq.n	8017f3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f2a:	685b      	ldr	r3, [r3, #4]
 8017f2c:	687a      	ldr	r2, [r7, #4]
 8017f2e:	7c12      	ldrb	r2, [r2, #16]
 8017f30:	f107 0108 	add.w	r1, r7, #8
 8017f34:	4610      	mov	r0, r2
 8017f36:	4798      	blx	r3
 8017f38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f3a:	e091      	b.n	8018060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017f3c:	6839      	ldr	r1, [r7, #0]
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f000 facb 	bl	80184da <USBD_CtlError>
            err++;
 8017f44:	7afb      	ldrb	r3, [r7, #11]
 8017f46:	3301      	adds	r3, #1
 8017f48:	72fb      	strb	r3, [r7, #11]
          break;
 8017f4a:	e089      	b.n	8018060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f52:	689b      	ldr	r3, [r3, #8]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d00b      	beq.n	8017f70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f5e:	689b      	ldr	r3, [r3, #8]
 8017f60:	687a      	ldr	r2, [r7, #4]
 8017f62:	7c12      	ldrb	r2, [r2, #16]
 8017f64:	f107 0108 	add.w	r1, r7, #8
 8017f68:	4610      	mov	r0, r2
 8017f6a:	4798      	blx	r3
 8017f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017f6e:	e077      	b.n	8018060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017f70:	6839      	ldr	r1, [r7, #0]
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f000 fab1 	bl	80184da <USBD_CtlError>
            err++;
 8017f78:	7afb      	ldrb	r3, [r7, #11]
 8017f7a:	3301      	adds	r3, #1
 8017f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8017f7e:	e06f      	b.n	8018060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f86:	68db      	ldr	r3, [r3, #12]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d00b      	beq.n	8017fa4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017f92:	68db      	ldr	r3, [r3, #12]
 8017f94:	687a      	ldr	r2, [r7, #4]
 8017f96:	7c12      	ldrb	r2, [r2, #16]
 8017f98:	f107 0108 	add.w	r1, r7, #8
 8017f9c:	4610      	mov	r0, r2
 8017f9e:	4798      	blx	r3
 8017fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017fa2:	e05d      	b.n	8018060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017fa4:	6839      	ldr	r1, [r7, #0]
 8017fa6:	6878      	ldr	r0, [r7, #4]
 8017fa8:	f000 fa97 	bl	80184da <USBD_CtlError>
            err++;
 8017fac:	7afb      	ldrb	r3, [r7, #11]
 8017fae:	3301      	adds	r3, #1
 8017fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8017fb2:	e055      	b.n	8018060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fba:	691b      	ldr	r3, [r3, #16]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d00b      	beq.n	8017fd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fc6:	691b      	ldr	r3, [r3, #16]
 8017fc8:	687a      	ldr	r2, [r7, #4]
 8017fca:	7c12      	ldrb	r2, [r2, #16]
 8017fcc:	f107 0108 	add.w	r1, r7, #8
 8017fd0:	4610      	mov	r0, r2
 8017fd2:	4798      	blx	r3
 8017fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017fd6:	e043      	b.n	8018060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017fd8:	6839      	ldr	r1, [r7, #0]
 8017fda:	6878      	ldr	r0, [r7, #4]
 8017fdc:	f000 fa7d 	bl	80184da <USBD_CtlError>
            err++;
 8017fe0:	7afb      	ldrb	r3, [r7, #11]
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8017fe6:	e03b      	b.n	8018060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017fee:	695b      	ldr	r3, [r3, #20]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d00b      	beq.n	801800c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017ffa:	695b      	ldr	r3, [r3, #20]
 8017ffc:	687a      	ldr	r2, [r7, #4]
 8017ffe:	7c12      	ldrb	r2, [r2, #16]
 8018000:	f107 0108 	add.w	r1, r7, #8
 8018004:	4610      	mov	r0, r2
 8018006:	4798      	blx	r3
 8018008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801800a:	e029      	b.n	8018060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801800c:	6839      	ldr	r1, [r7, #0]
 801800e:	6878      	ldr	r0, [r7, #4]
 8018010:	f000 fa63 	bl	80184da <USBD_CtlError>
            err++;
 8018014:	7afb      	ldrb	r3, [r7, #11]
 8018016:	3301      	adds	r3, #1
 8018018:	72fb      	strb	r3, [r7, #11]
          break;
 801801a:	e021      	b.n	8018060 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8018022:	699b      	ldr	r3, [r3, #24]
 8018024:	2b00      	cmp	r3, #0
 8018026:	d00b      	beq.n	8018040 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801802e:	699b      	ldr	r3, [r3, #24]
 8018030:	687a      	ldr	r2, [r7, #4]
 8018032:	7c12      	ldrb	r2, [r2, #16]
 8018034:	f107 0108 	add.w	r1, r7, #8
 8018038:	4610      	mov	r0, r2
 801803a:	4798      	blx	r3
 801803c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801803e:	e00f      	b.n	8018060 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018040:	6839      	ldr	r1, [r7, #0]
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f000 fa49 	bl	80184da <USBD_CtlError>
            err++;
 8018048:	7afb      	ldrb	r3, [r7, #11]
 801804a:	3301      	adds	r3, #1
 801804c:	72fb      	strb	r3, [r7, #11]
          break;
 801804e:	e007      	b.n	8018060 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018050:	6839      	ldr	r1, [r7, #0]
 8018052:	6878      	ldr	r0, [r7, #4]
 8018054:	f000 fa41 	bl	80184da <USBD_CtlError>
          err++;
 8018058:	7afb      	ldrb	r3, [r7, #11]
 801805a:	3301      	adds	r3, #1
 801805c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801805e:	bf00      	nop
      }
      break;
 8018060:	e037      	b.n	80180d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	7c1b      	ldrb	r3, [r3, #16]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d109      	bne.n	801807e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018072:	f107 0208 	add.w	r2, r7, #8
 8018076:	4610      	mov	r0, r2
 8018078:	4798      	blx	r3
 801807a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801807c:	e029      	b.n	80180d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801807e:	6839      	ldr	r1, [r7, #0]
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f000 fa2a 	bl	80184da <USBD_CtlError>
        err++;
 8018086:	7afb      	ldrb	r3, [r7, #11]
 8018088:	3301      	adds	r3, #1
 801808a:	72fb      	strb	r3, [r7, #11]
      break;
 801808c:	e021      	b.n	80180d2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	7c1b      	ldrb	r3, [r3, #16]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d10d      	bne.n	80180b2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801809c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801809e:	f107 0208 	add.w	r2, r7, #8
 80180a2:	4610      	mov	r0, r2
 80180a4:	4798      	blx	r3
 80180a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	3301      	adds	r3, #1
 80180ac:	2207      	movs	r2, #7
 80180ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80180b0:	e00f      	b.n	80180d2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80180b2:	6839      	ldr	r1, [r7, #0]
 80180b4:	6878      	ldr	r0, [r7, #4]
 80180b6:	f000 fa10 	bl	80184da <USBD_CtlError>
        err++;
 80180ba:	7afb      	ldrb	r3, [r7, #11]
 80180bc:	3301      	adds	r3, #1
 80180be:	72fb      	strb	r3, [r7, #11]
      break;
 80180c0:	e007      	b.n	80180d2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80180c2:	6839      	ldr	r1, [r7, #0]
 80180c4:	6878      	ldr	r0, [r7, #4]
 80180c6:	f000 fa08 	bl	80184da <USBD_CtlError>
      err++;
 80180ca:	7afb      	ldrb	r3, [r7, #11]
 80180cc:	3301      	adds	r3, #1
 80180ce:	72fb      	strb	r3, [r7, #11]
      break;
 80180d0:	bf00      	nop
  }

  if (err != 0U)
 80180d2:	7afb      	ldrb	r3, [r7, #11]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d11e      	bne.n	8018116 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80180d8:	683b      	ldr	r3, [r7, #0]
 80180da:	88db      	ldrh	r3, [r3, #6]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d016      	beq.n	801810e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80180e0:	893b      	ldrh	r3, [r7, #8]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d00e      	beq.n	8018104 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80180e6:	683b      	ldr	r3, [r7, #0]
 80180e8:	88da      	ldrh	r2, [r3, #6]
 80180ea:	893b      	ldrh	r3, [r7, #8]
 80180ec:	4293      	cmp	r3, r2
 80180ee:	bf28      	it	cs
 80180f0:	4613      	movcs	r3, r2
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80180f6:	893b      	ldrh	r3, [r7, #8]
 80180f8:	461a      	mov	r2, r3
 80180fa:	68f9      	ldr	r1, [r7, #12]
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f000 fa69 	bl	80185d4 <USBD_CtlSendData>
 8018102:	e009      	b.n	8018118 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018104:	6839      	ldr	r1, [r7, #0]
 8018106:	6878      	ldr	r0, [r7, #4]
 8018108:	f000 f9e7 	bl	80184da <USBD_CtlError>
 801810c:	e004      	b.n	8018118 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801810e:	6878      	ldr	r0, [r7, #4]
 8018110:	f000 faba 	bl	8018688 <USBD_CtlSendStatus>
 8018114:	e000      	b.n	8018118 <USBD_GetDescriptor+0x320>
    return;
 8018116:	bf00      	nop
  }
}
 8018118:	3710      	adds	r7, #16
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop

08018120 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b084      	sub	sp, #16
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
 8018128:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	889b      	ldrh	r3, [r3, #4]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d131      	bne.n	8018196 <USBD_SetAddress+0x76>
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	88db      	ldrh	r3, [r3, #6]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d12d      	bne.n	8018196 <USBD_SetAddress+0x76>
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	885b      	ldrh	r3, [r3, #2]
 801813e:	2b7f      	cmp	r3, #127	@ 0x7f
 8018140:	d829      	bhi.n	8018196 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	885b      	ldrh	r3, [r3, #2]
 8018146:	b2db      	uxtb	r3, r3
 8018148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801814c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018154:	b2db      	uxtb	r3, r3
 8018156:	2b03      	cmp	r3, #3
 8018158:	d104      	bne.n	8018164 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801815a:	6839      	ldr	r1, [r7, #0]
 801815c:	6878      	ldr	r0, [r7, #4]
 801815e:	f000 f9bc 	bl	80184da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018162:	e01d      	b.n	80181a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	7bfa      	ldrb	r2, [r7, #15]
 8018168:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801816c:	7bfb      	ldrb	r3, [r7, #15]
 801816e:	4619      	mov	r1, r3
 8018170:	6878      	ldr	r0, [r7, #4]
 8018172:	f000 ff51 	bl	8019018 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018176:	6878      	ldr	r0, [r7, #4]
 8018178:	f000 fa86 	bl	8018688 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801817c:	7bfb      	ldrb	r3, [r7, #15]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d004      	beq.n	801818c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	2202      	movs	r2, #2
 8018186:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801818a:	e009      	b.n	80181a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2201      	movs	r2, #1
 8018190:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018194:	e004      	b.n	80181a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018196:	6839      	ldr	r1, [r7, #0]
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f000 f99e 	bl	80184da <USBD_CtlError>
  }
}
 801819e:	bf00      	nop
 80181a0:	bf00      	nop
 80181a2:	3710      	adds	r7, #16
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}

080181a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b084      	sub	sp, #16
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
 80181b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80181b2:	2300      	movs	r3, #0
 80181b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80181b6:	683b      	ldr	r3, [r7, #0]
 80181b8:	885b      	ldrh	r3, [r3, #2]
 80181ba:	b2da      	uxtb	r2, r3
 80181bc:	4b4e      	ldr	r3, [pc, #312]	@ (80182f8 <USBD_SetConfig+0x150>)
 80181be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80181c0:	4b4d      	ldr	r3, [pc, #308]	@ (80182f8 <USBD_SetConfig+0x150>)
 80181c2:	781b      	ldrb	r3, [r3, #0]
 80181c4:	2b01      	cmp	r3, #1
 80181c6:	d905      	bls.n	80181d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80181c8:	6839      	ldr	r1, [r7, #0]
 80181ca:	6878      	ldr	r0, [r7, #4]
 80181cc:	f000 f985 	bl	80184da <USBD_CtlError>
    return USBD_FAIL;
 80181d0:	2303      	movs	r3, #3
 80181d2:	e08c      	b.n	80182ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	2b02      	cmp	r3, #2
 80181de:	d002      	beq.n	80181e6 <USBD_SetConfig+0x3e>
 80181e0:	2b03      	cmp	r3, #3
 80181e2:	d029      	beq.n	8018238 <USBD_SetConfig+0x90>
 80181e4:	e075      	b.n	80182d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80181e6:	4b44      	ldr	r3, [pc, #272]	@ (80182f8 <USBD_SetConfig+0x150>)
 80181e8:	781b      	ldrb	r3, [r3, #0]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d020      	beq.n	8018230 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80181ee:	4b42      	ldr	r3, [pc, #264]	@ (80182f8 <USBD_SetConfig+0x150>)
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	461a      	mov	r2, r3
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80181f8:	4b3f      	ldr	r3, [pc, #252]	@ (80182f8 <USBD_SetConfig+0x150>)
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	4619      	mov	r1, r3
 80181fe:	6878      	ldr	r0, [r7, #4]
 8018200:	f7fe ffb9 	bl	8017176 <USBD_SetClassConfig>
 8018204:	4603      	mov	r3, r0
 8018206:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018208:	7bfb      	ldrb	r3, [r7, #15]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d008      	beq.n	8018220 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801820e:	6839      	ldr	r1, [r7, #0]
 8018210:	6878      	ldr	r0, [r7, #4]
 8018212:	f000 f962 	bl	80184da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2202      	movs	r2, #2
 801821a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801821e:	e065      	b.n	80182ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8018220:	6878      	ldr	r0, [r7, #4]
 8018222:	f000 fa31 	bl	8018688 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2203      	movs	r2, #3
 801822a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801822e:	e05d      	b.n	80182ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	f000 fa29 	bl	8018688 <USBD_CtlSendStatus>
      break;
 8018236:	e059      	b.n	80182ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018238:	4b2f      	ldr	r3, [pc, #188]	@ (80182f8 <USBD_SetConfig+0x150>)
 801823a:	781b      	ldrb	r3, [r3, #0]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d112      	bne.n	8018266 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2202      	movs	r2, #2
 8018244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8018248:	4b2b      	ldr	r3, [pc, #172]	@ (80182f8 <USBD_SetConfig+0x150>)
 801824a:	781b      	ldrb	r3, [r3, #0]
 801824c:	461a      	mov	r2, r3
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018252:	4b29      	ldr	r3, [pc, #164]	@ (80182f8 <USBD_SetConfig+0x150>)
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	4619      	mov	r1, r3
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	f7fe ffa8 	bl	80171ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801825e:	6878      	ldr	r0, [r7, #4]
 8018260:	f000 fa12 	bl	8018688 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018264:	e042      	b.n	80182ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8018266:	4b24      	ldr	r3, [pc, #144]	@ (80182f8 <USBD_SetConfig+0x150>)
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	461a      	mov	r2, r3
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	429a      	cmp	r2, r3
 8018272:	d02a      	beq.n	80182ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	685b      	ldr	r3, [r3, #4]
 8018278:	b2db      	uxtb	r3, r3
 801827a:	4619      	mov	r1, r3
 801827c:	6878      	ldr	r0, [r7, #4]
 801827e:	f7fe ff96 	bl	80171ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018282:	4b1d      	ldr	r3, [pc, #116]	@ (80182f8 <USBD_SetConfig+0x150>)
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	461a      	mov	r2, r3
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801828c:	4b1a      	ldr	r3, [pc, #104]	@ (80182f8 <USBD_SetConfig+0x150>)
 801828e:	781b      	ldrb	r3, [r3, #0]
 8018290:	4619      	mov	r1, r3
 8018292:	6878      	ldr	r0, [r7, #4]
 8018294:	f7fe ff6f 	bl	8017176 <USBD_SetClassConfig>
 8018298:	4603      	mov	r3, r0
 801829a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801829c:	7bfb      	ldrb	r3, [r7, #15]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d00f      	beq.n	80182c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80182a2:	6839      	ldr	r1, [r7, #0]
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f000 f918 	bl	80184da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	685b      	ldr	r3, [r3, #4]
 80182ae:	b2db      	uxtb	r3, r3
 80182b0:	4619      	mov	r1, r3
 80182b2:	6878      	ldr	r0, [r7, #4]
 80182b4:	f7fe ff7b 	bl	80171ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	2202      	movs	r2, #2
 80182bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80182c0:	e014      	b.n	80182ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f000 f9e0 	bl	8018688 <USBD_CtlSendStatus>
      break;
 80182c8:	e010      	b.n	80182ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80182ca:	6878      	ldr	r0, [r7, #4]
 80182cc:	f000 f9dc 	bl	8018688 <USBD_CtlSendStatus>
      break;
 80182d0:	e00c      	b.n	80182ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80182d2:	6839      	ldr	r1, [r7, #0]
 80182d4:	6878      	ldr	r0, [r7, #4]
 80182d6:	f000 f900 	bl	80184da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80182da:	4b07      	ldr	r3, [pc, #28]	@ (80182f8 <USBD_SetConfig+0x150>)
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	4619      	mov	r1, r3
 80182e0:	6878      	ldr	r0, [r7, #4]
 80182e2:	f7fe ff64 	bl	80171ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80182e6:	2303      	movs	r3, #3
 80182e8:	73fb      	strb	r3, [r7, #15]
      break;
 80182ea:	bf00      	nop
  }

  return ret;
 80182ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80182ee:	4618      	mov	r0, r3
 80182f0:	3710      	adds	r7, #16
 80182f2:	46bd      	mov	sp, r7
 80182f4:	bd80      	pop	{r7, pc}
 80182f6:	bf00      	nop
 80182f8:	24029374 	.word	0x24029374

080182fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b082      	sub	sp, #8
 8018300:	af00      	add	r7, sp, #0
 8018302:	6078      	str	r0, [r7, #4]
 8018304:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018306:	683b      	ldr	r3, [r7, #0]
 8018308:	88db      	ldrh	r3, [r3, #6]
 801830a:	2b01      	cmp	r3, #1
 801830c:	d004      	beq.n	8018318 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801830e:	6839      	ldr	r1, [r7, #0]
 8018310:	6878      	ldr	r0, [r7, #4]
 8018312:	f000 f8e2 	bl	80184da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018316:	e023      	b.n	8018360 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801831e:	b2db      	uxtb	r3, r3
 8018320:	2b02      	cmp	r3, #2
 8018322:	dc02      	bgt.n	801832a <USBD_GetConfig+0x2e>
 8018324:	2b00      	cmp	r3, #0
 8018326:	dc03      	bgt.n	8018330 <USBD_GetConfig+0x34>
 8018328:	e015      	b.n	8018356 <USBD_GetConfig+0x5a>
 801832a:	2b03      	cmp	r3, #3
 801832c:	d00b      	beq.n	8018346 <USBD_GetConfig+0x4a>
 801832e:	e012      	b.n	8018356 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	2200      	movs	r2, #0
 8018334:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	3308      	adds	r3, #8
 801833a:	2201      	movs	r2, #1
 801833c:	4619      	mov	r1, r3
 801833e:	6878      	ldr	r0, [r7, #4]
 8018340:	f000 f948 	bl	80185d4 <USBD_CtlSendData>
        break;
 8018344:	e00c      	b.n	8018360 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	3304      	adds	r3, #4
 801834a:	2201      	movs	r2, #1
 801834c:	4619      	mov	r1, r3
 801834e:	6878      	ldr	r0, [r7, #4]
 8018350:	f000 f940 	bl	80185d4 <USBD_CtlSendData>
        break;
 8018354:	e004      	b.n	8018360 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018356:	6839      	ldr	r1, [r7, #0]
 8018358:	6878      	ldr	r0, [r7, #4]
 801835a:	f000 f8be 	bl	80184da <USBD_CtlError>
        break;
 801835e:	bf00      	nop
}
 8018360:	bf00      	nop
 8018362:	3708      	adds	r7, #8
 8018364:	46bd      	mov	sp, r7
 8018366:	bd80      	pop	{r7, pc}

08018368 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b082      	sub	sp, #8
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
 8018370:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018378:	b2db      	uxtb	r3, r3
 801837a:	3b01      	subs	r3, #1
 801837c:	2b02      	cmp	r3, #2
 801837e:	d81e      	bhi.n	80183be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018380:	683b      	ldr	r3, [r7, #0]
 8018382:	88db      	ldrh	r3, [r3, #6]
 8018384:	2b02      	cmp	r3, #2
 8018386:	d004      	beq.n	8018392 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018388:	6839      	ldr	r1, [r7, #0]
 801838a:	6878      	ldr	r0, [r7, #4]
 801838c:	f000 f8a5 	bl	80184da <USBD_CtlError>
        break;
 8018390:	e01a      	b.n	80183c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	2201      	movs	r2, #1
 8018396:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d005      	beq.n	80183ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	68db      	ldr	r3, [r3, #12]
 80183a6:	f043 0202 	orr.w	r2, r3, #2
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	330c      	adds	r3, #12
 80183b2:	2202      	movs	r2, #2
 80183b4:	4619      	mov	r1, r3
 80183b6:	6878      	ldr	r0, [r7, #4]
 80183b8:	f000 f90c 	bl	80185d4 <USBD_CtlSendData>
      break;
 80183bc:	e004      	b.n	80183c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80183be:	6839      	ldr	r1, [r7, #0]
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f000 f88a 	bl	80184da <USBD_CtlError>
      break;
 80183c6:	bf00      	nop
  }
}
 80183c8:	bf00      	nop
 80183ca:	3708      	adds	r7, #8
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}

080183d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b082      	sub	sp, #8
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	885b      	ldrh	r3, [r3, #2]
 80183de:	2b01      	cmp	r3, #1
 80183e0:	d107      	bne.n	80183f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	2201      	movs	r2, #1
 80183e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80183ea:	6878      	ldr	r0, [r7, #4]
 80183ec:	f000 f94c 	bl	8018688 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80183f0:	e013      	b.n	801841a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	885b      	ldrh	r3, [r3, #2]
 80183f6:	2b02      	cmp	r3, #2
 80183f8:	d10b      	bne.n	8018412 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	889b      	ldrh	r3, [r3, #4]
 80183fe:	0a1b      	lsrs	r3, r3, #8
 8018400:	b29b      	uxth	r3, r3
 8018402:	b2da      	uxtb	r2, r3
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801840a:	6878      	ldr	r0, [r7, #4]
 801840c:	f000 f93c 	bl	8018688 <USBD_CtlSendStatus>
}
 8018410:	e003      	b.n	801841a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8018412:	6839      	ldr	r1, [r7, #0]
 8018414:	6878      	ldr	r0, [r7, #4]
 8018416:	f000 f860 	bl	80184da <USBD_CtlError>
}
 801841a:	bf00      	nop
 801841c:	3708      	adds	r7, #8
 801841e:	46bd      	mov	sp, r7
 8018420:	bd80      	pop	{r7, pc}

08018422 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018422:	b580      	push	{r7, lr}
 8018424:	b082      	sub	sp, #8
 8018426:	af00      	add	r7, sp, #0
 8018428:	6078      	str	r0, [r7, #4]
 801842a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018432:	b2db      	uxtb	r3, r3
 8018434:	3b01      	subs	r3, #1
 8018436:	2b02      	cmp	r3, #2
 8018438:	d80b      	bhi.n	8018452 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	885b      	ldrh	r3, [r3, #2]
 801843e:	2b01      	cmp	r3, #1
 8018440:	d10c      	bne.n	801845c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2200      	movs	r2, #0
 8018446:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801844a:	6878      	ldr	r0, [r7, #4]
 801844c:	f000 f91c 	bl	8018688 <USBD_CtlSendStatus>
      }
      break;
 8018450:	e004      	b.n	801845c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018452:	6839      	ldr	r1, [r7, #0]
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	f000 f840 	bl	80184da <USBD_CtlError>
      break;
 801845a:	e000      	b.n	801845e <USBD_ClrFeature+0x3c>
      break;
 801845c:	bf00      	nop
  }
}
 801845e:	bf00      	nop
 8018460:	3708      	adds	r7, #8
 8018462:	46bd      	mov	sp, r7
 8018464:	bd80      	pop	{r7, pc}

08018466 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018466:	b580      	push	{r7, lr}
 8018468:	b084      	sub	sp, #16
 801846a:	af00      	add	r7, sp, #0
 801846c:	6078      	str	r0, [r7, #4]
 801846e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	781a      	ldrb	r2, [r3, #0]
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	3301      	adds	r3, #1
 8018480:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	781a      	ldrb	r2, [r3, #0]
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	3301      	adds	r3, #1
 801848e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f7ff fa16 	bl	80178c2 <SWAPBYTE>
 8018496:	4603      	mov	r3, r0
 8018498:	461a      	mov	r2, r3
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	3301      	adds	r3, #1
 80184a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	3301      	adds	r3, #1
 80184a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80184aa:	68f8      	ldr	r0, [r7, #12]
 80184ac:	f7ff fa09 	bl	80178c2 <SWAPBYTE>
 80184b0:	4603      	mov	r3, r0
 80184b2:	461a      	mov	r2, r3
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	3301      	adds	r3, #1
 80184bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	3301      	adds	r3, #1
 80184c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80184c4:	68f8      	ldr	r0, [r7, #12]
 80184c6:	f7ff f9fc 	bl	80178c2 <SWAPBYTE>
 80184ca:	4603      	mov	r3, r0
 80184cc:	461a      	mov	r2, r3
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	80da      	strh	r2, [r3, #6]
}
 80184d2:	bf00      	nop
 80184d4:	3710      	adds	r7, #16
 80184d6:	46bd      	mov	sp, r7
 80184d8:	bd80      	pop	{r7, pc}

080184da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80184da:	b580      	push	{r7, lr}
 80184dc:	b082      	sub	sp, #8
 80184de:	af00      	add	r7, sp, #0
 80184e0:	6078      	str	r0, [r7, #4]
 80184e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80184e4:	2180      	movs	r1, #128	@ 0x80
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	f000 fd2c 	bl	8018f44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80184ec:	2100      	movs	r1, #0
 80184ee:	6878      	ldr	r0, [r7, #4]
 80184f0:	f000 fd28 	bl	8018f44 <USBD_LL_StallEP>
}
 80184f4:	bf00      	nop
 80184f6:	3708      	adds	r7, #8
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b086      	sub	sp, #24
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018508:	2300      	movs	r3, #0
 801850a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d042      	beq.n	8018598 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8018516:	6938      	ldr	r0, [r7, #16]
 8018518:	f000 f842 	bl	80185a0 <USBD_GetLen>
 801851c:	4603      	mov	r3, r0
 801851e:	3301      	adds	r3, #1
 8018520:	005b      	lsls	r3, r3, #1
 8018522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018526:	d808      	bhi.n	801853a <USBD_GetString+0x3e>
 8018528:	6938      	ldr	r0, [r7, #16]
 801852a:	f000 f839 	bl	80185a0 <USBD_GetLen>
 801852e:	4603      	mov	r3, r0
 8018530:	3301      	adds	r3, #1
 8018532:	b29b      	uxth	r3, r3
 8018534:	005b      	lsls	r3, r3, #1
 8018536:	b29a      	uxth	r2, r3
 8018538:	e001      	b.n	801853e <USBD_GetString+0x42>
 801853a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8018542:	7dfb      	ldrb	r3, [r7, #23]
 8018544:	68ba      	ldr	r2, [r7, #8]
 8018546:	4413      	add	r3, r2
 8018548:	687a      	ldr	r2, [r7, #4]
 801854a:	7812      	ldrb	r2, [r2, #0]
 801854c:	701a      	strb	r2, [r3, #0]
  idx++;
 801854e:	7dfb      	ldrb	r3, [r7, #23]
 8018550:	3301      	adds	r3, #1
 8018552:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8018554:	7dfb      	ldrb	r3, [r7, #23]
 8018556:	68ba      	ldr	r2, [r7, #8]
 8018558:	4413      	add	r3, r2
 801855a:	2203      	movs	r2, #3
 801855c:	701a      	strb	r2, [r3, #0]
  idx++;
 801855e:	7dfb      	ldrb	r3, [r7, #23]
 8018560:	3301      	adds	r3, #1
 8018562:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8018564:	e013      	b.n	801858e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8018566:	7dfb      	ldrb	r3, [r7, #23]
 8018568:	68ba      	ldr	r2, [r7, #8]
 801856a:	4413      	add	r3, r2
 801856c:	693a      	ldr	r2, [r7, #16]
 801856e:	7812      	ldrb	r2, [r2, #0]
 8018570:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	3301      	adds	r3, #1
 8018576:	613b      	str	r3, [r7, #16]
    idx++;
 8018578:	7dfb      	ldrb	r3, [r7, #23]
 801857a:	3301      	adds	r3, #1
 801857c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801857e:	7dfb      	ldrb	r3, [r7, #23]
 8018580:	68ba      	ldr	r2, [r7, #8]
 8018582:	4413      	add	r3, r2
 8018584:	2200      	movs	r2, #0
 8018586:	701a      	strb	r2, [r3, #0]
    idx++;
 8018588:	7dfb      	ldrb	r3, [r7, #23]
 801858a:	3301      	adds	r3, #1
 801858c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801858e:	693b      	ldr	r3, [r7, #16]
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d1e7      	bne.n	8018566 <USBD_GetString+0x6a>
 8018596:	e000      	b.n	801859a <USBD_GetString+0x9e>
    return;
 8018598:	bf00      	nop
  }
}
 801859a:	3718      	adds	r7, #24
 801859c:	46bd      	mov	sp, r7
 801859e:	bd80      	pop	{r7, pc}

080185a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80185a0:	b480      	push	{r7}
 80185a2:	b085      	sub	sp, #20
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80185a8:	2300      	movs	r3, #0
 80185aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80185b0:	e005      	b.n	80185be <USBD_GetLen+0x1e>
  {
    len++;
 80185b2:	7bfb      	ldrb	r3, [r7, #15]
 80185b4:	3301      	adds	r3, #1
 80185b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	3301      	adds	r3, #1
 80185bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	781b      	ldrb	r3, [r3, #0]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d1f5      	bne.n	80185b2 <USBD_GetLen+0x12>
  }

  return len;
 80185c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80185c8:	4618      	mov	r0, r3
 80185ca:	3714      	adds	r7, #20
 80185cc:	46bd      	mov	sp, r7
 80185ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d2:	4770      	bx	lr

080185d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80185d4:	b580      	push	{r7, lr}
 80185d6:	b084      	sub	sp, #16
 80185d8:	af00      	add	r7, sp, #0
 80185da:	60f8      	str	r0, [r7, #12]
 80185dc:	60b9      	str	r1, [r7, #8]
 80185de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80185e0:	68fb      	ldr	r3, [r7, #12]
 80185e2:	2202      	movs	r2, #2
 80185e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	687a      	ldr	r2, [r7, #4]
 80185ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	687a      	ldr	r2, [r7, #4]
 80185f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	68ba      	ldr	r2, [r7, #8]
 80185f8:	2100      	movs	r1, #0
 80185fa:	68f8      	ldr	r0, [r7, #12]
 80185fc:	f000 fd2b 	bl	8019056 <USBD_LL_Transmit>

  return USBD_OK;
 8018600:	2300      	movs	r3, #0
}
 8018602:	4618      	mov	r0, r3
 8018604:	3710      	adds	r7, #16
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}

0801860a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801860a:	b580      	push	{r7, lr}
 801860c:	b084      	sub	sp, #16
 801860e:	af00      	add	r7, sp, #0
 8018610:	60f8      	str	r0, [r7, #12]
 8018612:	60b9      	str	r1, [r7, #8]
 8018614:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	68ba      	ldr	r2, [r7, #8]
 801861a:	2100      	movs	r1, #0
 801861c:	68f8      	ldr	r0, [r7, #12]
 801861e:	f000 fd1a 	bl	8019056 <USBD_LL_Transmit>

  return USBD_OK;
 8018622:	2300      	movs	r3, #0
}
 8018624:	4618      	mov	r0, r3
 8018626:	3710      	adds	r7, #16
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}

0801862c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b084      	sub	sp, #16
 8018630:	af00      	add	r7, sp, #0
 8018632:	60f8      	str	r0, [r7, #12]
 8018634:	60b9      	str	r1, [r7, #8]
 8018636:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	2203      	movs	r2, #3
 801863c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	687a      	ldr	r2, [r7, #4]
 8018644:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	687a      	ldr	r2, [r7, #4]
 801864c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	68ba      	ldr	r2, [r7, #8]
 8018654:	2100      	movs	r1, #0
 8018656:	68f8      	ldr	r0, [r7, #12]
 8018658:	f000 fd1e 	bl	8019098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801865c:	2300      	movs	r3, #0
}
 801865e:	4618      	mov	r0, r3
 8018660:	3710      	adds	r7, #16
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}

08018666 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8018666:	b580      	push	{r7, lr}
 8018668:	b084      	sub	sp, #16
 801866a:	af00      	add	r7, sp, #0
 801866c:	60f8      	str	r0, [r7, #12]
 801866e:	60b9      	str	r1, [r7, #8]
 8018670:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	68ba      	ldr	r2, [r7, #8]
 8018676:	2100      	movs	r1, #0
 8018678:	68f8      	ldr	r0, [r7, #12]
 801867a:	f000 fd0d 	bl	8019098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801867e:	2300      	movs	r3, #0
}
 8018680:	4618      	mov	r0, r3
 8018682:	3710      	adds	r7, #16
 8018684:	46bd      	mov	sp, r7
 8018686:	bd80      	pop	{r7, pc}

08018688 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b082      	sub	sp, #8
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2204      	movs	r2, #4
 8018694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8018698:	2300      	movs	r3, #0
 801869a:	2200      	movs	r2, #0
 801869c:	2100      	movs	r1, #0
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f000 fcd9 	bl	8019056 <USBD_LL_Transmit>

  return USBD_OK;
 80186a4:	2300      	movs	r3, #0
}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3708      	adds	r7, #8
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}

080186ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80186ae:	b580      	push	{r7, lr}
 80186b0:	b082      	sub	sp, #8
 80186b2:	af00      	add	r7, sp, #0
 80186b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	2205      	movs	r2, #5
 80186ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80186be:	2300      	movs	r3, #0
 80186c0:	2200      	movs	r2, #0
 80186c2:	2100      	movs	r1, #0
 80186c4:	6878      	ldr	r0, [r7, #4]
 80186c6:	f000 fce7 	bl	8019098 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80186ca:	2300      	movs	r3, #0
}
 80186cc:	4618      	mov	r0, r3
 80186ce:	3708      	adds	r7, #8
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}

080186d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80186d4:	b580      	push	{r7, lr}
 80186d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80186d8:	2200      	movs	r2, #0
 80186da:	4918      	ldr	r1, [pc, #96]	@ (801873c <MX_USB_DEVICE_Init+0x68>)
 80186dc:	4818      	ldr	r0, [pc, #96]	@ (8018740 <MX_USB_DEVICE_Init+0x6c>)
 80186de:	f7fe fccd 	bl	801707c <USBD_Init>
 80186e2:	4603      	mov	r3, r0
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d001      	beq.n	80186ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80186e8:	f7e9 f9ca 	bl	8001a80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80186ec:	4915      	ldr	r1, [pc, #84]	@ (8018744 <MX_USB_DEVICE_Init+0x70>)
 80186ee:	4814      	ldr	r0, [pc, #80]	@ (8018740 <MX_USB_DEVICE_Init+0x6c>)
 80186f0:	f7fe fcf4 	bl	80170dc <USBD_RegisterClass>
 80186f4:	4603      	mov	r3, r0
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d001      	beq.n	80186fe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80186fa:	f7e9 f9c1 	bl	8001a80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80186fe:	4912      	ldr	r1, [pc, #72]	@ (8018748 <MX_USB_DEVICE_Init+0x74>)
 8018700:	480f      	ldr	r0, [pc, #60]	@ (8018740 <MX_USB_DEVICE_Init+0x6c>)
 8018702:	f7fe fbeb 	bl	8016edc <USBD_CDC_RegisterInterface>
 8018706:	4603      	mov	r3, r0
 8018708:	2b00      	cmp	r3, #0
 801870a:	d001      	beq.n	8018710 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801870c:	f7e9 f9b8 	bl	8001a80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018710:	480b      	ldr	r0, [pc, #44]	@ (8018740 <MX_USB_DEVICE_Init+0x6c>)
 8018712:	f7fe fd19 	bl	8017148 <USBD_Start>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801871c:	f7e9 f9b0 	bl	8001a80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018720:	f7f5 f8f0 	bl	800d904 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8018724:	4b06      	ldr	r3, [pc, #24]	@ (8018740 <MX_USB_DEVICE_Init+0x6c>)
 8018726:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801872a:	4a05      	ldr	r2, [pc, #20]	@ (8018740 <MX_USB_DEVICE_Init+0x6c>)
 801872c:	33b0      	adds	r3, #176	@ 0xb0
 801872e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018732:	4a06      	ldr	r2, [pc, #24]	@ (801874c <MX_USB_DEVICE_Init+0x78>)
 8018734:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018736:	bf00      	nop
 8018738:	bd80      	pop	{r7, pc}
 801873a:	bf00      	nop
 801873c:	240002dc 	.word	0x240002dc
 8018740:	24029378 	.word	0x24029378
 8018744:	24000248 	.word	0x24000248
 8018748:	240002c8 	.word	0x240002c8
 801874c:	24029654 	.word	0x24029654

08018750 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018754:	2200      	movs	r2, #0
 8018756:	4905      	ldr	r1, [pc, #20]	@ (801876c <CDC_Init_FS+0x1c>)
 8018758:	4805      	ldr	r0, [pc, #20]	@ (8018770 <CDC_Init_FS+0x20>)
 801875a:	f7fe fbd9 	bl	8016f10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801875e:	4905      	ldr	r1, [pc, #20]	@ (8018774 <CDC_Init_FS+0x24>)
 8018760:	4803      	ldr	r0, [pc, #12]	@ (8018770 <CDC_Init_FS+0x20>)
 8018762:	f7fe fbf7 	bl	8016f54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018766:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018768:	4618      	mov	r0, r3
 801876a:	bd80      	pop	{r7, pc}
 801876c:	24029e58 	.word	0x24029e58
 8018770:	24029378 	.word	0x24029378
 8018774:	24029658 	.word	0x24029658

08018778 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018778:	b480      	push	{r7}
 801877a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801877c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801877e:	4618      	mov	r0, r3
 8018780:	46bd      	mov	sp, r7
 8018782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018786:	4770      	bx	lr

08018788 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018788:	b480      	push	{r7}
 801878a:	b083      	sub	sp, #12
 801878c:	af00      	add	r7, sp, #0
 801878e:	4603      	mov	r3, r0
 8018790:	6039      	str	r1, [r7, #0]
 8018792:	71fb      	strb	r3, [r7, #7]
 8018794:	4613      	mov	r3, r2
 8018796:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018798:	79fb      	ldrb	r3, [r7, #7]
 801879a:	2b23      	cmp	r3, #35	@ 0x23
 801879c:	d84a      	bhi.n	8018834 <CDC_Control_FS+0xac>
 801879e:	a201      	add	r2, pc, #4	@ (adr r2, 80187a4 <CDC_Control_FS+0x1c>)
 80187a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187a4:	08018835 	.word	0x08018835
 80187a8:	08018835 	.word	0x08018835
 80187ac:	08018835 	.word	0x08018835
 80187b0:	08018835 	.word	0x08018835
 80187b4:	08018835 	.word	0x08018835
 80187b8:	08018835 	.word	0x08018835
 80187bc:	08018835 	.word	0x08018835
 80187c0:	08018835 	.word	0x08018835
 80187c4:	08018835 	.word	0x08018835
 80187c8:	08018835 	.word	0x08018835
 80187cc:	08018835 	.word	0x08018835
 80187d0:	08018835 	.word	0x08018835
 80187d4:	08018835 	.word	0x08018835
 80187d8:	08018835 	.word	0x08018835
 80187dc:	08018835 	.word	0x08018835
 80187e0:	08018835 	.word	0x08018835
 80187e4:	08018835 	.word	0x08018835
 80187e8:	08018835 	.word	0x08018835
 80187ec:	08018835 	.word	0x08018835
 80187f0:	08018835 	.word	0x08018835
 80187f4:	08018835 	.word	0x08018835
 80187f8:	08018835 	.word	0x08018835
 80187fc:	08018835 	.word	0x08018835
 8018800:	08018835 	.word	0x08018835
 8018804:	08018835 	.word	0x08018835
 8018808:	08018835 	.word	0x08018835
 801880c:	08018835 	.word	0x08018835
 8018810:	08018835 	.word	0x08018835
 8018814:	08018835 	.word	0x08018835
 8018818:	08018835 	.word	0x08018835
 801881c:	08018835 	.word	0x08018835
 8018820:	08018835 	.word	0x08018835
 8018824:	08018835 	.word	0x08018835
 8018828:	08018835 	.word	0x08018835
 801882c:	08018835 	.word	0x08018835
 8018830:	08018835 	.word	0x08018835
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018834:	bf00      	nop
  }

  return (USBD_OK);
 8018836:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018838:	4618      	mov	r0, r3
 801883a:	370c      	adds	r7, #12
 801883c:	46bd      	mov	sp, r7
 801883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018842:	4770      	bx	lr

08018844 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b082      	sub	sp, #8
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
 801884c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801884e:	6879      	ldr	r1, [r7, #4]
 8018850:	480a      	ldr	r0, [pc, #40]	@ (801887c <CDC_Receive_FS+0x38>)
 8018852:	f7fe fb7f 	bl	8016f54 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018856:	4809      	ldr	r0, [pc, #36]	@ (801887c <CDC_Receive_FS+0x38>)
 8018858:	f7fe fbda 	bl	8017010 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 801885c:	4b08      	ldr	r3, [pc, #32]	@ (8018880 <CDC_Receive_FS+0x3c>)
 801885e:	2201      	movs	r2, #1
 8018860:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	b29a      	uxth	r2, r3
 8018868:	2364      	movs	r3, #100	@ 0x64
 801886a:	6879      	ldr	r1, [r7, #4]
 801886c:	4805      	ldr	r0, [pc, #20]	@ (8018884 <CDC_Receive_FS+0x40>)
 801886e:	f7f9 fd38 	bl	80122e2 <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8018872:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018874:	4618      	mov	r0, r3
 8018876:	3708      	adds	r7, #8
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	24029378 	.word	0x24029378
 8018880:	24029368 	.word	0x24029368
 8018884:	24000840 	.word	0x24000840

08018888 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b084      	sub	sp, #16
 801888c:	af00      	add	r7, sp, #0
 801888e:	6078      	str	r0, [r7, #4]
 8018890:	460b      	mov	r3, r1
 8018892:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018894:	2300      	movs	r3, #0
 8018896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018898:	4b0d      	ldr	r3, [pc, #52]	@ (80188d0 <CDC_Transmit_FS+0x48>)
 801889a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801889e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80188a0:	68bb      	ldr	r3, [r7, #8]
 80188a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d001      	beq.n	80188ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80188aa:	2301      	movs	r3, #1
 80188ac:	e00b      	b.n	80188c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80188ae:	887b      	ldrh	r3, [r7, #2]
 80188b0:	461a      	mov	r2, r3
 80188b2:	6879      	ldr	r1, [r7, #4]
 80188b4:	4806      	ldr	r0, [pc, #24]	@ (80188d0 <CDC_Transmit_FS+0x48>)
 80188b6:	f7fe fb2b 	bl	8016f10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80188ba:	4805      	ldr	r0, [pc, #20]	@ (80188d0 <CDC_Transmit_FS+0x48>)
 80188bc:	f7fe fb68 	bl	8016f90 <USBD_CDC_TransmitPacket>
 80188c0:	4603      	mov	r3, r0
 80188c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80188c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	3710      	adds	r7, #16
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	24029378 	.word	0x24029378

080188d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80188d4:	b480      	push	{r7}
 80188d6:	b087      	sub	sp, #28
 80188d8:	af00      	add	r7, sp, #0
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	4613      	mov	r3, r2
 80188e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80188e2:	2300      	movs	r3, #0
 80188e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80188e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188ea:	4618      	mov	r0, r3
 80188ec:	371c      	adds	r7, #28
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr
	...

080188f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	4603      	mov	r3, r0
 8018900:	6039      	str	r1, [r7, #0]
 8018902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018904:	683b      	ldr	r3, [r7, #0]
 8018906:	2212      	movs	r2, #18
 8018908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801890a:	4b03      	ldr	r3, [pc, #12]	@ (8018918 <USBD_FS_DeviceDescriptor+0x20>)
}
 801890c:	4618      	mov	r0, r3
 801890e:	370c      	adds	r7, #12
 8018910:	46bd      	mov	sp, r7
 8018912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018916:	4770      	bx	lr
 8018918:	240002fc 	.word	0x240002fc

0801891c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801891c:	b480      	push	{r7}
 801891e:	b083      	sub	sp, #12
 8018920:	af00      	add	r7, sp, #0
 8018922:	4603      	mov	r3, r0
 8018924:	6039      	str	r1, [r7, #0]
 8018926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018928:	683b      	ldr	r3, [r7, #0]
 801892a:	2204      	movs	r2, #4
 801892c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801892e:	4b03      	ldr	r3, [pc, #12]	@ (801893c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018930:	4618      	mov	r0, r3
 8018932:	370c      	adds	r7, #12
 8018934:	46bd      	mov	sp, r7
 8018936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801893a:	4770      	bx	lr
 801893c:	24000310 	.word	0x24000310

08018940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018940:	b580      	push	{r7, lr}
 8018942:	b082      	sub	sp, #8
 8018944:	af00      	add	r7, sp, #0
 8018946:	4603      	mov	r3, r0
 8018948:	6039      	str	r1, [r7, #0]
 801894a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801894c:	79fb      	ldrb	r3, [r7, #7]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d105      	bne.n	801895e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018952:	683a      	ldr	r2, [r7, #0]
 8018954:	4907      	ldr	r1, [pc, #28]	@ (8018974 <USBD_FS_ProductStrDescriptor+0x34>)
 8018956:	4808      	ldr	r0, [pc, #32]	@ (8018978 <USBD_FS_ProductStrDescriptor+0x38>)
 8018958:	f7ff fdd0 	bl	80184fc <USBD_GetString>
 801895c:	e004      	b.n	8018968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801895e:	683a      	ldr	r2, [r7, #0]
 8018960:	4904      	ldr	r1, [pc, #16]	@ (8018974 <USBD_FS_ProductStrDescriptor+0x34>)
 8018962:	4805      	ldr	r0, [pc, #20]	@ (8018978 <USBD_FS_ProductStrDescriptor+0x38>)
 8018964:	f7ff fdca 	bl	80184fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8018968:	4b02      	ldr	r3, [pc, #8]	@ (8018974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801896a:	4618      	mov	r0, r3
 801896c:	3708      	adds	r7, #8
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
 8018972:	bf00      	nop
 8018974:	2402a658 	.word	0x2402a658
 8018978:	08019c60 	.word	0x08019c60

0801897c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
 8018982:	4603      	mov	r3, r0
 8018984:	6039      	str	r1, [r7, #0]
 8018986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018988:	683a      	ldr	r2, [r7, #0]
 801898a:	4904      	ldr	r1, [pc, #16]	@ (801899c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801898c:	4804      	ldr	r0, [pc, #16]	@ (80189a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801898e:	f7ff fdb5 	bl	80184fc <USBD_GetString>
  return USBD_StrDesc;
 8018992:	4b02      	ldr	r3, [pc, #8]	@ (801899c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018994:	4618      	mov	r0, r3
 8018996:	3708      	adds	r7, #8
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}
 801899c:	2402a658 	.word	0x2402a658
 80189a0:	08019c78 	.word	0x08019c78

080189a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b082      	sub	sp, #8
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	4603      	mov	r3, r0
 80189ac:	6039      	str	r1, [r7, #0]
 80189ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	221a      	movs	r2, #26
 80189b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80189b6:	f000 f843 	bl	8018a40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80189ba:	4b02      	ldr	r3, [pc, #8]	@ (80189c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	24000314 	.word	0x24000314

080189c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b082      	sub	sp, #8
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	4603      	mov	r3, r0
 80189d0:	6039      	str	r1, [r7, #0]
 80189d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80189d4:	79fb      	ldrb	r3, [r7, #7]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d105      	bne.n	80189e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80189da:	683a      	ldr	r2, [r7, #0]
 80189dc:	4907      	ldr	r1, [pc, #28]	@ (80189fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80189de:	4808      	ldr	r0, [pc, #32]	@ (8018a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80189e0:	f7ff fd8c 	bl	80184fc <USBD_GetString>
 80189e4:	e004      	b.n	80189f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80189e6:	683a      	ldr	r2, [r7, #0]
 80189e8:	4904      	ldr	r1, [pc, #16]	@ (80189fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80189ea:	4805      	ldr	r0, [pc, #20]	@ (8018a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80189ec:	f7ff fd86 	bl	80184fc <USBD_GetString>
  }
  return USBD_StrDesc;
 80189f0:	4b02      	ldr	r3, [pc, #8]	@ (80189fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80189f2:	4618      	mov	r0, r3
 80189f4:	3708      	adds	r7, #8
 80189f6:	46bd      	mov	sp, r7
 80189f8:	bd80      	pop	{r7, pc}
 80189fa:	bf00      	nop
 80189fc:	2402a658 	.word	0x2402a658
 8018a00:	08019c8c 	.word	0x08019c8c

08018a04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b082      	sub	sp, #8
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	6039      	str	r1, [r7, #0]
 8018a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a10:	79fb      	ldrb	r3, [r7, #7]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d105      	bne.n	8018a22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a16:	683a      	ldr	r2, [r7, #0]
 8018a18:	4907      	ldr	r1, [pc, #28]	@ (8018a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a1a:	4808      	ldr	r0, [pc, #32]	@ (8018a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a1c:	f7ff fd6e 	bl	80184fc <USBD_GetString>
 8018a20:	e004      	b.n	8018a2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018a22:	683a      	ldr	r2, [r7, #0]
 8018a24:	4904      	ldr	r1, [pc, #16]	@ (8018a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018a26:	4805      	ldr	r0, [pc, #20]	@ (8018a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018a28:	f7ff fd68 	bl	80184fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a2c:	4b02      	ldr	r3, [pc, #8]	@ (8018a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018a2e:	4618      	mov	r0, r3
 8018a30:	3708      	adds	r7, #8
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}
 8018a36:	bf00      	nop
 8018a38:	2402a658 	.word	0x2402a658
 8018a3c:	08019c98 	.word	0x08019c98

08018a40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018a46:	4b0f      	ldr	r3, [pc, #60]	@ (8018a84 <Get_SerialNum+0x44>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8018a88 <Get_SerialNum+0x48>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018a52:	4b0e      	ldr	r3, [pc, #56]	@ (8018a8c <Get_SerialNum+0x4c>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018a58:	68fa      	ldr	r2, [r7, #12]
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	4413      	add	r3, r2
 8018a5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d009      	beq.n	8018a7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018a66:	2208      	movs	r2, #8
 8018a68:	4909      	ldr	r1, [pc, #36]	@ (8018a90 <Get_SerialNum+0x50>)
 8018a6a:	68f8      	ldr	r0, [r7, #12]
 8018a6c:	f000 f814 	bl	8018a98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018a70:	2204      	movs	r2, #4
 8018a72:	4908      	ldr	r1, [pc, #32]	@ (8018a94 <Get_SerialNum+0x54>)
 8018a74:	68b8      	ldr	r0, [r7, #8]
 8018a76:	f000 f80f 	bl	8018a98 <IntToUnicode>
  }
}
 8018a7a:	bf00      	nop
 8018a7c:	3710      	adds	r7, #16
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	1ff1e800 	.word	0x1ff1e800
 8018a88:	1ff1e804 	.word	0x1ff1e804
 8018a8c:	1ff1e808 	.word	0x1ff1e808
 8018a90:	24000316 	.word	0x24000316
 8018a94:	24000326 	.word	0x24000326

08018a98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018a98:	b480      	push	{r7}
 8018a9a:	b087      	sub	sp, #28
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	60f8      	str	r0, [r7, #12]
 8018aa0:	60b9      	str	r1, [r7, #8]
 8018aa2:	4613      	mov	r3, r2
 8018aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018aaa:	2300      	movs	r3, #0
 8018aac:	75fb      	strb	r3, [r7, #23]
 8018aae:	e027      	b.n	8018b00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	0f1b      	lsrs	r3, r3, #28
 8018ab4:	2b09      	cmp	r3, #9
 8018ab6:	d80b      	bhi.n	8018ad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	0f1b      	lsrs	r3, r3, #28
 8018abc:	b2da      	uxtb	r2, r3
 8018abe:	7dfb      	ldrb	r3, [r7, #23]
 8018ac0:	005b      	lsls	r3, r3, #1
 8018ac2:	4619      	mov	r1, r3
 8018ac4:	68bb      	ldr	r3, [r7, #8]
 8018ac6:	440b      	add	r3, r1
 8018ac8:	3230      	adds	r2, #48	@ 0x30
 8018aca:	b2d2      	uxtb	r2, r2
 8018acc:	701a      	strb	r2, [r3, #0]
 8018ace:	e00a      	b.n	8018ae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	0f1b      	lsrs	r3, r3, #28
 8018ad4:	b2da      	uxtb	r2, r3
 8018ad6:	7dfb      	ldrb	r3, [r7, #23]
 8018ad8:	005b      	lsls	r3, r3, #1
 8018ada:	4619      	mov	r1, r3
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	440b      	add	r3, r1
 8018ae0:	3237      	adds	r2, #55	@ 0x37
 8018ae2:	b2d2      	uxtb	r2, r2
 8018ae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018ae6:	68fb      	ldr	r3, [r7, #12]
 8018ae8:	011b      	lsls	r3, r3, #4
 8018aea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018aec:	7dfb      	ldrb	r3, [r7, #23]
 8018aee:	005b      	lsls	r3, r3, #1
 8018af0:	3301      	adds	r3, #1
 8018af2:	68ba      	ldr	r2, [r7, #8]
 8018af4:	4413      	add	r3, r2
 8018af6:	2200      	movs	r2, #0
 8018af8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018afa:	7dfb      	ldrb	r3, [r7, #23]
 8018afc:	3301      	adds	r3, #1
 8018afe:	75fb      	strb	r3, [r7, #23]
 8018b00:	7dfa      	ldrb	r2, [r7, #23]
 8018b02:	79fb      	ldrb	r3, [r7, #7]
 8018b04:	429a      	cmp	r2, r3
 8018b06:	d3d3      	bcc.n	8018ab0 <IntToUnicode+0x18>
  }
}
 8018b08:	bf00      	nop
 8018b0a:	bf00      	nop
 8018b0c:	371c      	adds	r7, #28
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b14:	4770      	bx	lr
	...

08018b18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b0ba      	sub	sp, #232	@ 0xe8
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018b20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8018b24:	2200      	movs	r2, #0
 8018b26:	601a      	str	r2, [r3, #0]
 8018b28:	605a      	str	r2, [r3, #4]
 8018b2a:	609a      	str	r2, [r3, #8]
 8018b2c:	60da      	str	r2, [r3, #12]
 8018b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018b30:	f107 0310 	add.w	r3, r7, #16
 8018b34:	22c0      	movs	r2, #192	@ 0xc0
 8018b36:	2100      	movs	r1, #0
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f000 fbfd 	bl	8019338 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	4a2c      	ldr	r2, [pc, #176]	@ (8018bf4 <HAL_PCD_MspInit+0xdc>)
 8018b44:	4293      	cmp	r3, r2
 8018b46:	d151      	bne.n	8018bec <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018b48:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8018b4c:	f04f 0300 	mov.w	r3, #0
 8018b50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8018b54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8018b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018b5c:	f107 0310 	add.w	r3, r7, #16
 8018b60:	4618      	mov	r0, r3
 8018b62:	f7f5 fec5 	bl	800e8f0 <HAL_RCCEx_PeriphCLKConfig>
 8018b66:	4603      	mov	r3, r0
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	d001      	beq.n	8018b70 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8018b6c:	f7e8 ff88 	bl	8001a80 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018b70:	f7f4 fec8 	bl	800d904 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b74:	4b20      	ldr	r3, [pc, #128]	@ (8018bf8 <HAL_PCD_MspInit+0xe0>)
 8018b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8018bf8 <HAL_PCD_MspInit+0xe0>)
 8018b7c:	f043 0301 	orr.w	r3, r3, #1
 8018b80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8018b84:	4b1c      	ldr	r3, [pc, #112]	@ (8018bf8 <HAL_PCD_MspInit+0xe0>)
 8018b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018b8a:	f003 0301 	and.w	r3, r3, #1
 8018b8e:	60fb      	str	r3, [r7, #12]
 8018b90:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018b92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b9a:	2302      	movs	r3, #2
 8018b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018bac:	230a      	movs	r3, #10
 8018bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bb2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8018bb6:	4619      	mov	r1, r3
 8018bb8:	4810      	ldr	r0, [pc, #64]	@ (8018bfc <HAL_PCD_MspInit+0xe4>)
 8018bba:	f7ee fafd 	bl	80071b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8018bf8 <HAL_PCD_MspInit+0xe0>)
 8018bc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8018bf8 <HAL_PCD_MspInit+0xe0>)
 8018bc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8018bca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8018bce:	4b0a      	ldr	r3, [pc, #40]	@ (8018bf8 <HAL_PCD_MspInit+0xe0>)
 8018bd0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018bd8:	60bb      	str	r3, [r7, #8]
 8018bda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018bdc:	2200      	movs	r2, #0
 8018bde:	2100      	movs	r1, #0
 8018be0:	2065      	movs	r0, #101	@ 0x65
 8018be2:	f7eb fbe6 	bl	80043b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018be6:	2065      	movs	r0, #101	@ 0x65
 8018be8:	f7eb fbfd 	bl	80043e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018bec:	bf00      	nop
 8018bee:	37e8      	adds	r7, #232	@ 0xe8
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	bd80      	pop	{r7, pc}
 8018bf4:	40080000 	.word	0x40080000
 8018bf8:	58024400 	.word	0x58024400
 8018bfc:	58020000 	.word	0x58020000

08018c00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b082      	sub	sp, #8
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8018c14:	4619      	mov	r1, r3
 8018c16:	4610      	mov	r0, r2
 8018c18:	f7fe fae3 	bl	80171e2 <USBD_LL_SetupStage>
}
 8018c1c:	bf00      	nop
 8018c1e:	3708      	adds	r7, #8
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}

08018c24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b082      	sub	sp, #8
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018c36:	78fa      	ldrb	r2, [r7, #3]
 8018c38:	6879      	ldr	r1, [r7, #4]
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	00db      	lsls	r3, r3, #3
 8018c3e:	4413      	add	r3, r2
 8018c40:	009b      	lsls	r3, r3, #2
 8018c42:	440b      	add	r3, r1
 8018c44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018c48:	681a      	ldr	r2, [r3, #0]
 8018c4a:	78fb      	ldrb	r3, [r7, #3]
 8018c4c:	4619      	mov	r1, r3
 8018c4e:	f7fe fb1d 	bl	801728c <USBD_LL_DataOutStage>
}
 8018c52:	bf00      	nop
 8018c54:	3708      	adds	r7, #8
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}

08018c5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c5a:	b580      	push	{r7, lr}
 8018c5c:	b082      	sub	sp, #8
 8018c5e:	af00      	add	r7, sp, #0
 8018c60:	6078      	str	r0, [r7, #4]
 8018c62:	460b      	mov	r3, r1
 8018c64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018c6c:	78fa      	ldrb	r2, [r7, #3]
 8018c6e:	6879      	ldr	r1, [r7, #4]
 8018c70:	4613      	mov	r3, r2
 8018c72:	00db      	lsls	r3, r3, #3
 8018c74:	4413      	add	r3, r2
 8018c76:	009b      	lsls	r3, r3, #2
 8018c78:	440b      	add	r3, r1
 8018c7a:	3320      	adds	r3, #32
 8018c7c:	681a      	ldr	r2, [r3, #0]
 8018c7e:	78fb      	ldrb	r3, [r7, #3]
 8018c80:	4619      	mov	r1, r3
 8018c82:	f7fe fbb6 	bl	80173f2 <USBD_LL_DataInStage>
}
 8018c86:	bf00      	nop
 8018c88:	3708      	adds	r7, #8
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}

08018c8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c8e:	b580      	push	{r7, lr}
 8018c90:	b082      	sub	sp, #8
 8018c92:	af00      	add	r7, sp, #0
 8018c94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f7fe fcf0 	bl	8017682 <USBD_LL_SOF>
}
 8018ca2:	bf00      	nop
 8018ca4:	3708      	adds	r7, #8
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}

08018caa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018caa:	b580      	push	{r7, lr}
 8018cac:	b084      	sub	sp, #16
 8018cae:	af00      	add	r7, sp, #0
 8018cb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	79db      	ldrb	r3, [r3, #7]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d102      	bne.n	8018cc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	73fb      	strb	r3, [r7, #15]
 8018cc2:	e008      	b.n	8018cd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	79db      	ldrb	r3, [r3, #7]
 8018cc8:	2b02      	cmp	r3, #2
 8018cca:	d102      	bne.n	8018cd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018ccc:	2301      	movs	r3, #1
 8018cce:	73fb      	strb	r3, [r7, #15]
 8018cd0:	e001      	b.n	8018cd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018cd2:	f7e8 fed5 	bl	8001a80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018cdc:	7bfa      	ldrb	r2, [r7, #15]
 8018cde:	4611      	mov	r1, r2
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	f7fe fc8a 	bl	80175fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018cec:	4618      	mov	r0, r3
 8018cee:	f7fe fc32 	bl	8017556 <USBD_LL_Reset>
}
 8018cf2:	bf00      	nop
 8018cf4:	3710      	adds	r7, #16
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
	...

08018cfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b082      	sub	sp, #8
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7fe fc85 	bl	801761a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	687a      	ldr	r2, [r7, #4]
 8018d1c:	6812      	ldr	r2, [r2, #0]
 8018d1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018d22:	f043 0301 	orr.w	r3, r3, #1
 8018d26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	7adb      	ldrb	r3, [r3, #11]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d005      	beq.n	8018d3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018d30:	4b04      	ldr	r3, [pc, #16]	@ (8018d44 <HAL_PCD_SuspendCallback+0x48>)
 8018d32:	691b      	ldr	r3, [r3, #16]
 8018d34:	4a03      	ldr	r2, [pc, #12]	@ (8018d44 <HAL_PCD_SuspendCallback+0x48>)
 8018d36:	f043 0306 	orr.w	r3, r3, #6
 8018d3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018d3c:	bf00      	nop
 8018d3e:	3708      	adds	r7, #8
 8018d40:	46bd      	mov	sp, r7
 8018d42:	bd80      	pop	{r7, pc}
 8018d44:	e000ed00 	.word	0xe000ed00

08018d48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b082      	sub	sp, #8
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d56:	4618      	mov	r0, r3
 8018d58:	f7fe fc7b 	bl	8017652 <USBD_LL_Resume>
}
 8018d5c:	bf00      	nop
 8018d5e:	3708      	adds	r7, #8
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}

08018d64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b082      	sub	sp, #8
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	6078      	str	r0, [r7, #4]
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d76:	78fa      	ldrb	r2, [r7, #3]
 8018d78:	4611      	mov	r1, r2
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	f7fe fcd3 	bl	8017726 <USBD_LL_IsoOUTIncomplete>
}
 8018d80:	bf00      	nop
 8018d82:	3708      	adds	r7, #8
 8018d84:	46bd      	mov	sp, r7
 8018d86:	bd80      	pop	{r7, pc}

08018d88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018d88:	b580      	push	{r7, lr}
 8018d8a:	b082      	sub	sp, #8
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
 8018d90:	460b      	mov	r3, r1
 8018d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018d9a:	78fa      	ldrb	r2, [r7, #3]
 8018d9c:	4611      	mov	r1, r2
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f7fe fc8f 	bl	80176c2 <USBD_LL_IsoINIncomplete>
}
 8018da4:	bf00      	nop
 8018da6:	3708      	adds	r7, #8
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}

08018dac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b082      	sub	sp, #8
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018dba:	4618      	mov	r0, r3
 8018dbc:	f7fe fce5 	bl	801778a <USBD_LL_DevConnected>
}
 8018dc0:	bf00      	nop
 8018dc2:	3708      	adds	r7, #8
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	bd80      	pop	{r7, pc}

08018dc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b082      	sub	sp, #8
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	f7fe fce2 	bl	80177a0 <USBD_LL_DevDisconnected>
}
 8018ddc:	bf00      	nop
 8018dde:	3708      	adds	r7, #8
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bd80      	pop	{r7, pc}

08018de4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018de4:	b580      	push	{r7, lr}
 8018de6:	b082      	sub	sp, #8
 8018de8:	af00      	add	r7, sp, #0
 8018dea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	781b      	ldrb	r3, [r3, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d13e      	bne.n	8018e72 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018df4:	4a21      	ldr	r2, [pc, #132]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e00:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018e04:	4b1d      	ldr	r3, [pc, #116]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e06:	4a1e      	ldr	r2, [pc, #120]	@ (8018e80 <USBD_LL_Init+0x9c>)
 8018e08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8018e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e0c:	2209      	movs	r2, #9
 8018e0e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018e10:	4b1a      	ldr	r3, [pc, #104]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e12:	2202      	movs	r2, #2
 8018e14:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018e16:	4b19      	ldr	r3, [pc, #100]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e18:	2200      	movs	r2, #0
 8018e1a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018e1c:	4b17      	ldr	r3, [pc, #92]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e1e:	2202      	movs	r2, #2
 8018e20:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8018e22:	4b16      	ldr	r3, [pc, #88]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e24:	2200      	movs	r2, #0
 8018e26:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018e28:	4b14      	ldr	r3, [pc, #80]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e2a:	2200      	movs	r2, #0
 8018e2c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018e2e:	4b13      	ldr	r3, [pc, #76]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e30:	2200      	movs	r2, #0
 8018e32:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8018e34:	4b11      	ldr	r3, [pc, #68]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e36:	2200      	movs	r2, #0
 8018e38:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018e3a:	4b10      	ldr	r3, [pc, #64]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e3c:	2200      	movs	r2, #0
 8018e3e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018e40:	4b0e      	ldr	r3, [pc, #56]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e42:	2200      	movs	r2, #0
 8018e44:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018e46:	480d      	ldr	r0, [pc, #52]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e48:	f7f3 fa82 	bl	800c350 <HAL_PCD_Init>
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d001      	beq.n	8018e56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8018e52:	f7e8 fe15 	bl	8001a80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018e56:	2180      	movs	r1, #128	@ 0x80
 8018e58:	4808      	ldr	r0, [pc, #32]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e5a:	f7f4 fcd8 	bl	800d80e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018e5e:	2240      	movs	r2, #64	@ 0x40
 8018e60:	2100      	movs	r1, #0
 8018e62:	4806      	ldr	r0, [pc, #24]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e64:	f7f4 fc8c 	bl	800d780 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018e68:	2280      	movs	r2, #128	@ 0x80
 8018e6a:	2101      	movs	r1, #1
 8018e6c:	4803      	ldr	r0, [pc, #12]	@ (8018e7c <USBD_LL_Init+0x98>)
 8018e6e:	f7f4 fc87 	bl	800d780 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8018e72:	2300      	movs	r3, #0
}
 8018e74:	4618      	mov	r0, r3
 8018e76:	3708      	adds	r7, #8
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}
 8018e7c:	2402a858 	.word	0x2402a858
 8018e80:	40080000 	.word	0x40080000

08018e84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b084      	sub	sp, #16
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e90:	2300      	movs	r3, #0
 8018e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f7f3 fb64 	bl	800c568 <HAL_PCD_Start>
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ea4:	7bfb      	ldrb	r3, [r7, #15]
 8018ea6:	4618      	mov	r0, r3
 8018ea8:	f000 f942 	bl	8019130 <USBD_Get_USB_Status>
 8018eac:	4603      	mov	r3, r0
 8018eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018eb2:	4618      	mov	r0, r3
 8018eb4:	3710      	adds	r7, #16
 8018eb6:	46bd      	mov	sp, r7
 8018eb8:	bd80      	pop	{r7, pc}

08018eba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018eba:	b580      	push	{r7, lr}
 8018ebc:	b084      	sub	sp, #16
 8018ebe:	af00      	add	r7, sp, #0
 8018ec0:	6078      	str	r0, [r7, #4]
 8018ec2:	4608      	mov	r0, r1
 8018ec4:	4611      	mov	r1, r2
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	4603      	mov	r3, r0
 8018eca:	70fb      	strb	r3, [r7, #3]
 8018ecc:	460b      	mov	r3, r1
 8018ece:	70bb      	strb	r3, [r7, #2]
 8018ed0:	4613      	mov	r3, r2
 8018ed2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ed8:	2300      	movs	r3, #0
 8018eda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ee2:	78bb      	ldrb	r3, [r7, #2]
 8018ee4:	883a      	ldrh	r2, [r7, #0]
 8018ee6:	78f9      	ldrb	r1, [r7, #3]
 8018ee8:	f7f4 f865 	bl	800cfb6 <HAL_PCD_EP_Open>
 8018eec:	4603      	mov	r3, r0
 8018eee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ef0:	7bfb      	ldrb	r3, [r7, #15]
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f000 f91c 	bl	8019130 <USBD_Get_USB_Status>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018efc:	7bbb      	ldrb	r3, [r7, #14]
}
 8018efe:	4618      	mov	r0, r3
 8018f00:	3710      	adds	r7, #16
 8018f02:	46bd      	mov	sp, r7
 8018f04:	bd80      	pop	{r7, pc}

08018f06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f06:	b580      	push	{r7, lr}
 8018f08:	b084      	sub	sp, #16
 8018f0a:	af00      	add	r7, sp, #0
 8018f0c:	6078      	str	r0, [r7, #4]
 8018f0e:	460b      	mov	r3, r1
 8018f10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f12:	2300      	movs	r3, #0
 8018f14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f16:	2300      	movs	r3, #0
 8018f18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f20:	78fa      	ldrb	r2, [r7, #3]
 8018f22:	4611      	mov	r1, r2
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7f4 f8b0 	bl	800d08a <HAL_PCD_EP_Close>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f2e:	7bfb      	ldrb	r3, [r7, #15]
 8018f30:	4618      	mov	r0, r3
 8018f32:	f000 f8fd 	bl	8019130 <USBD_Get_USB_Status>
 8018f36:	4603      	mov	r3, r0
 8018f38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	3710      	adds	r7, #16
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}

08018f44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f44:	b580      	push	{r7, lr}
 8018f46:	b084      	sub	sp, #16
 8018f48:	af00      	add	r7, sp, #0
 8018f4a:	6078      	str	r0, [r7, #4]
 8018f4c:	460b      	mov	r3, r1
 8018f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f54:	2300      	movs	r3, #0
 8018f56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f5e:	78fa      	ldrb	r2, [r7, #3]
 8018f60:	4611      	mov	r1, r2
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7f4 f968 	bl	800d238 <HAL_PCD_EP_SetStall>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f6c:	7bfb      	ldrb	r3, [r7, #15]
 8018f6e:	4618      	mov	r0, r3
 8018f70:	f000 f8de 	bl	8019130 <USBD_Get_USB_Status>
 8018f74:	4603      	mov	r3, r0
 8018f76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018f78:	7bbb      	ldrb	r3, [r7, #14]
}
 8018f7a:	4618      	mov	r0, r3
 8018f7c:	3710      	adds	r7, #16
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	bd80      	pop	{r7, pc}

08018f82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f82:	b580      	push	{r7, lr}
 8018f84:	b084      	sub	sp, #16
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	6078      	str	r0, [r7, #4]
 8018f8a:	460b      	mov	r3, r1
 8018f8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f92:	2300      	movs	r3, #0
 8018f94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f9c:	78fa      	ldrb	r2, [r7, #3]
 8018f9e:	4611      	mov	r1, r2
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	f7f4 f9ac 	bl	800d2fe <HAL_PCD_EP_ClrStall>
 8018fa6:	4603      	mov	r3, r0
 8018fa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018faa:	7bfb      	ldrb	r3, [r7, #15]
 8018fac:	4618      	mov	r0, r3
 8018fae:	f000 f8bf 	bl	8019130 <USBD_Get_USB_Status>
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018fb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	3710      	adds	r7, #16
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018fc0:	b480      	push	{r7}
 8018fc2:	b085      	sub	sp, #20
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
 8018fc8:	460b      	mov	r3, r1
 8018fca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018fd2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	da0b      	bge.n	8018ff4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018fdc:	78fb      	ldrb	r3, [r7, #3]
 8018fde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018fe2:	68f9      	ldr	r1, [r7, #12]
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	00db      	lsls	r3, r3, #3
 8018fe8:	4413      	add	r3, r2
 8018fea:	009b      	lsls	r3, r3, #2
 8018fec:	440b      	add	r3, r1
 8018fee:	3316      	adds	r3, #22
 8018ff0:	781b      	ldrb	r3, [r3, #0]
 8018ff2:	e00b      	b.n	801900c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018ff4:	78fb      	ldrb	r3, [r7, #3]
 8018ff6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018ffa:	68f9      	ldr	r1, [r7, #12]
 8018ffc:	4613      	mov	r3, r2
 8018ffe:	00db      	lsls	r3, r3, #3
 8019000:	4413      	add	r3, r2
 8019002:	009b      	lsls	r3, r3, #2
 8019004:	440b      	add	r3, r1
 8019006:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801900a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801900c:	4618      	mov	r0, r3
 801900e:	3714      	adds	r7, #20
 8019010:	46bd      	mov	sp, r7
 8019012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019016:	4770      	bx	lr

08019018 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b084      	sub	sp, #16
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
 8019020:	460b      	mov	r3, r1
 8019022:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019024:	2300      	movs	r3, #0
 8019026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019028:	2300      	movs	r3, #0
 801902a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019032:	78fa      	ldrb	r2, [r7, #3]
 8019034:	4611      	mov	r1, r2
 8019036:	4618      	mov	r0, r3
 8019038:	f7f3 ff99 	bl	800cf6e <HAL_PCD_SetAddress>
 801903c:	4603      	mov	r3, r0
 801903e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019040:	7bfb      	ldrb	r3, [r7, #15]
 8019042:	4618      	mov	r0, r3
 8019044:	f000 f874 	bl	8019130 <USBD_Get_USB_Status>
 8019048:	4603      	mov	r3, r0
 801904a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801904c:	7bbb      	ldrb	r3, [r7, #14]
}
 801904e:	4618      	mov	r0, r3
 8019050:	3710      	adds	r7, #16
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}

08019056 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019056:	b580      	push	{r7, lr}
 8019058:	b086      	sub	sp, #24
 801905a:	af00      	add	r7, sp, #0
 801905c:	60f8      	str	r0, [r7, #12]
 801905e:	607a      	str	r2, [r7, #4]
 8019060:	603b      	str	r3, [r7, #0]
 8019062:	460b      	mov	r3, r1
 8019064:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019066:	2300      	movs	r3, #0
 8019068:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801906a:	2300      	movs	r3, #0
 801906c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8019074:	7af9      	ldrb	r1, [r7, #11]
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	687a      	ldr	r2, [r7, #4]
 801907a:	f7f4 f8a3 	bl	800d1c4 <HAL_PCD_EP_Transmit>
 801907e:	4603      	mov	r3, r0
 8019080:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019082:	7dfb      	ldrb	r3, [r7, #23]
 8019084:	4618      	mov	r0, r3
 8019086:	f000 f853 	bl	8019130 <USBD_Get_USB_Status>
 801908a:	4603      	mov	r3, r0
 801908c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801908e:	7dbb      	ldrb	r3, [r7, #22]
}
 8019090:	4618      	mov	r0, r3
 8019092:	3718      	adds	r7, #24
 8019094:	46bd      	mov	sp, r7
 8019096:	bd80      	pop	{r7, pc}

08019098 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b086      	sub	sp, #24
 801909c:	af00      	add	r7, sp, #0
 801909e:	60f8      	str	r0, [r7, #12]
 80190a0:	607a      	str	r2, [r7, #4]
 80190a2:	603b      	str	r3, [r7, #0]
 80190a4:	460b      	mov	r3, r1
 80190a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190a8:	2300      	movs	r3, #0
 80190aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190ac:	2300      	movs	r3, #0
 80190ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80190b6:	7af9      	ldrb	r1, [r7, #11]
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	687a      	ldr	r2, [r7, #4]
 80190bc:	f7f4 f82f 	bl	800d11e <HAL_PCD_EP_Receive>
 80190c0:	4603      	mov	r3, r0
 80190c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190c4:	7dfb      	ldrb	r3, [r7, #23]
 80190c6:	4618      	mov	r0, r3
 80190c8:	f000 f832 	bl	8019130 <USBD_Get_USB_Status>
 80190cc:	4603      	mov	r3, r0
 80190ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80190d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80190d2:	4618      	mov	r0, r3
 80190d4:	3718      	adds	r7, #24
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}

080190da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80190da:	b580      	push	{r7, lr}
 80190dc:	b082      	sub	sp, #8
 80190de:	af00      	add	r7, sp, #0
 80190e0:	6078      	str	r0, [r7, #4]
 80190e2:	460b      	mov	r3, r1
 80190e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190ec:	78fa      	ldrb	r2, [r7, #3]
 80190ee:	4611      	mov	r1, r2
 80190f0:	4618      	mov	r0, r3
 80190f2:	f7f4 f84f 	bl	800d194 <HAL_PCD_EP_GetRxCount>
 80190f6:	4603      	mov	r3, r0
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3708      	adds	r7, #8
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}

08019100 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019100:	b480      	push	{r7}
 8019102:	b083      	sub	sp, #12
 8019104:	af00      	add	r7, sp, #0
 8019106:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019108:	4b03      	ldr	r3, [pc, #12]	@ (8019118 <USBD_static_malloc+0x18>)
}
 801910a:	4618      	mov	r0, r3
 801910c:	370c      	adds	r7, #12
 801910e:	46bd      	mov	sp, r7
 8019110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019114:	4770      	bx	lr
 8019116:	bf00      	nop
 8019118:	2402ad3c 	.word	0x2402ad3c

0801911c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801911c:	b480      	push	{r7}
 801911e:	b083      	sub	sp, #12
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8019124:	bf00      	nop
 8019126:	370c      	adds	r7, #12
 8019128:	46bd      	mov	sp, r7
 801912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912e:	4770      	bx	lr

08019130 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019130:	b480      	push	{r7}
 8019132:	b085      	sub	sp, #20
 8019134:	af00      	add	r7, sp, #0
 8019136:	4603      	mov	r3, r0
 8019138:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801913a:	2300      	movs	r3, #0
 801913c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801913e:	79fb      	ldrb	r3, [r7, #7]
 8019140:	2b03      	cmp	r3, #3
 8019142:	d817      	bhi.n	8019174 <USBD_Get_USB_Status+0x44>
 8019144:	a201      	add	r2, pc, #4	@ (adr r2, 801914c <USBD_Get_USB_Status+0x1c>)
 8019146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801914a:	bf00      	nop
 801914c:	0801915d 	.word	0x0801915d
 8019150:	08019163 	.word	0x08019163
 8019154:	08019169 	.word	0x08019169
 8019158:	0801916f 	.word	0x0801916f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801915c:	2300      	movs	r3, #0
 801915e:	73fb      	strb	r3, [r7, #15]
    break;
 8019160:	e00b      	b.n	801917a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019162:	2303      	movs	r3, #3
 8019164:	73fb      	strb	r3, [r7, #15]
    break;
 8019166:	e008      	b.n	801917a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019168:	2301      	movs	r3, #1
 801916a:	73fb      	strb	r3, [r7, #15]
    break;
 801916c:	e005      	b.n	801917a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801916e:	2303      	movs	r3, #3
 8019170:	73fb      	strb	r3, [r7, #15]
    break;
 8019172:	e002      	b.n	801917a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019174:	2303      	movs	r3, #3
 8019176:	73fb      	strb	r3, [r7, #15]
    break;
 8019178:	bf00      	nop
  }
  return usb_status;
 801917a:	7bfb      	ldrb	r3, [r7, #15]
}
 801917c:	4618      	mov	r0, r3
 801917e:	3714      	adds	r7, #20
 8019180:	46bd      	mov	sp, r7
 8019182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019186:	4770      	bx	lr

08019188 <malloc>:
 8019188:	4b02      	ldr	r3, [pc, #8]	@ (8019194 <malloc+0xc>)
 801918a:	4601      	mov	r1, r0
 801918c:	6818      	ldr	r0, [r3, #0]
 801918e:	f000 b825 	b.w	80191dc <_malloc_r>
 8019192:	bf00      	nop
 8019194:	24000330 	.word	0x24000330

08019198 <sbrk_aligned>:
 8019198:	b570      	push	{r4, r5, r6, lr}
 801919a:	4e0f      	ldr	r6, [pc, #60]	@ (80191d8 <sbrk_aligned+0x40>)
 801919c:	460c      	mov	r4, r1
 801919e:	6831      	ldr	r1, [r6, #0]
 80191a0:	4605      	mov	r5, r0
 80191a2:	b911      	cbnz	r1, 80191aa <sbrk_aligned+0x12>
 80191a4:	f000 f8d0 	bl	8019348 <_sbrk_r>
 80191a8:	6030      	str	r0, [r6, #0]
 80191aa:	4621      	mov	r1, r4
 80191ac:	4628      	mov	r0, r5
 80191ae:	f000 f8cb 	bl	8019348 <_sbrk_r>
 80191b2:	1c43      	adds	r3, r0, #1
 80191b4:	d103      	bne.n	80191be <sbrk_aligned+0x26>
 80191b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80191ba:	4620      	mov	r0, r4
 80191bc:	bd70      	pop	{r4, r5, r6, pc}
 80191be:	1cc4      	adds	r4, r0, #3
 80191c0:	f024 0403 	bic.w	r4, r4, #3
 80191c4:	42a0      	cmp	r0, r4
 80191c6:	d0f8      	beq.n	80191ba <sbrk_aligned+0x22>
 80191c8:	1a21      	subs	r1, r4, r0
 80191ca:	4628      	mov	r0, r5
 80191cc:	f000 f8bc 	bl	8019348 <_sbrk_r>
 80191d0:	3001      	adds	r0, #1
 80191d2:	d1f2      	bne.n	80191ba <sbrk_aligned+0x22>
 80191d4:	e7ef      	b.n	80191b6 <sbrk_aligned+0x1e>
 80191d6:	bf00      	nop
 80191d8:	2402af5c 	.word	0x2402af5c

080191dc <_malloc_r>:
 80191dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191e0:	1ccd      	adds	r5, r1, #3
 80191e2:	f025 0503 	bic.w	r5, r5, #3
 80191e6:	3508      	adds	r5, #8
 80191e8:	2d0c      	cmp	r5, #12
 80191ea:	bf38      	it	cc
 80191ec:	250c      	movcc	r5, #12
 80191ee:	2d00      	cmp	r5, #0
 80191f0:	4606      	mov	r6, r0
 80191f2:	db01      	blt.n	80191f8 <_malloc_r+0x1c>
 80191f4:	42a9      	cmp	r1, r5
 80191f6:	d904      	bls.n	8019202 <_malloc_r+0x26>
 80191f8:	230c      	movs	r3, #12
 80191fa:	6033      	str	r3, [r6, #0]
 80191fc:	2000      	movs	r0, #0
 80191fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019202:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80192d8 <_malloc_r+0xfc>
 8019206:	f000 f869 	bl	80192dc <__malloc_lock>
 801920a:	f8d8 3000 	ldr.w	r3, [r8]
 801920e:	461c      	mov	r4, r3
 8019210:	bb44      	cbnz	r4, 8019264 <_malloc_r+0x88>
 8019212:	4629      	mov	r1, r5
 8019214:	4630      	mov	r0, r6
 8019216:	f7ff ffbf 	bl	8019198 <sbrk_aligned>
 801921a:	1c43      	adds	r3, r0, #1
 801921c:	4604      	mov	r4, r0
 801921e:	d158      	bne.n	80192d2 <_malloc_r+0xf6>
 8019220:	f8d8 4000 	ldr.w	r4, [r8]
 8019224:	4627      	mov	r7, r4
 8019226:	2f00      	cmp	r7, #0
 8019228:	d143      	bne.n	80192b2 <_malloc_r+0xd6>
 801922a:	2c00      	cmp	r4, #0
 801922c:	d04b      	beq.n	80192c6 <_malloc_r+0xea>
 801922e:	6823      	ldr	r3, [r4, #0]
 8019230:	4639      	mov	r1, r7
 8019232:	4630      	mov	r0, r6
 8019234:	eb04 0903 	add.w	r9, r4, r3
 8019238:	f000 f886 	bl	8019348 <_sbrk_r>
 801923c:	4581      	cmp	r9, r0
 801923e:	d142      	bne.n	80192c6 <_malloc_r+0xea>
 8019240:	6821      	ldr	r1, [r4, #0]
 8019242:	1a6d      	subs	r5, r5, r1
 8019244:	4629      	mov	r1, r5
 8019246:	4630      	mov	r0, r6
 8019248:	f7ff ffa6 	bl	8019198 <sbrk_aligned>
 801924c:	3001      	adds	r0, #1
 801924e:	d03a      	beq.n	80192c6 <_malloc_r+0xea>
 8019250:	6823      	ldr	r3, [r4, #0]
 8019252:	442b      	add	r3, r5
 8019254:	6023      	str	r3, [r4, #0]
 8019256:	f8d8 3000 	ldr.w	r3, [r8]
 801925a:	685a      	ldr	r2, [r3, #4]
 801925c:	bb62      	cbnz	r2, 80192b8 <_malloc_r+0xdc>
 801925e:	f8c8 7000 	str.w	r7, [r8]
 8019262:	e00f      	b.n	8019284 <_malloc_r+0xa8>
 8019264:	6822      	ldr	r2, [r4, #0]
 8019266:	1b52      	subs	r2, r2, r5
 8019268:	d420      	bmi.n	80192ac <_malloc_r+0xd0>
 801926a:	2a0b      	cmp	r2, #11
 801926c:	d917      	bls.n	801929e <_malloc_r+0xc2>
 801926e:	1961      	adds	r1, r4, r5
 8019270:	42a3      	cmp	r3, r4
 8019272:	6025      	str	r5, [r4, #0]
 8019274:	bf18      	it	ne
 8019276:	6059      	strne	r1, [r3, #4]
 8019278:	6863      	ldr	r3, [r4, #4]
 801927a:	bf08      	it	eq
 801927c:	f8c8 1000 	streq.w	r1, [r8]
 8019280:	5162      	str	r2, [r4, r5]
 8019282:	604b      	str	r3, [r1, #4]
 8019284:	4630      	mov	r0, r6
 8019286:	f000 f82f 	bl	80192e8 <__malloc_unlock>
 801928a:	f104 000b 	add.w	r0, r4, #11
 801928e:	1d23      	adds	r3, r4, #4
 8019290:	f020 0007 	bic.w	r0, r0, #7
 8019294:	1ac2      	subs	r2, r0, r3
 8019296:	bf1c      	itt	ne
 8019298:	1a1b      	subne	r3, r3, r0
 801929a:	50a3      	strne	r3, [r4, r2]
 801929c:	e7af      	b.n	80191fe <_malloc_r+0x22>
 801929e:	6862      	ldr	r2, [r4, #4]
 80192a0:	42a3      	cmp	r3, r4
 80192a2:	bf0c      	ite	eq
 80192a4:	f8c8 2000 	streq.w	r2, [r8]
 80192a8:	605a      	strne	r2, [r3, #4]
 80192aa:	e7eb      	b.n	8019284 <_malloc_r+0xa8>
 80192ac:	4623      	mov	r3, r4
 80192ae:	6864      	ldr	r4, [r4, #4]
 80192b0:	e7ae      	b.n	8019210 <_malloc_r+0x34>
 80192b2:	463c      	mov	r4, r7
 80192b4:	687f      	ldr	r7, [r7, #4]
 80192b6:	e7b6      	b.n	8019226 <_malloc_r+0x4a>
 80192b8:	461a      	mov	r2, r3
 80192ba:	685b      	ldr	r3, [r3, #4]
 80192bc:	42a3      	cmp	r3, r4
 80192be:	d1fb      	bne.n	80192b8 <_malloc_r+0xdc>
 80192c0:	2300      	movs	r3, #0
 80192c2:	6053      	str	r3, [r2, #4]
 80192c4:	e7de      	b.n	8019284 <_malloc_r+0xa8>
 80192c6:	230c      	movs	r3, #12
 80192c8:	6033      	str	r3, [r6, #0]
 80192ca:	4630      	mov	r0, r6
 80192cc:	f000 f80c 	bl	80192e8 <__malloc_unlock>
 80192d0:	e794      	b.n	80191fc <_malloc_r+0x20>
 80192d2:	6005      	str	r5, [r0, #0]
 80192d4:	e7d6      	b.n	8019284 <_malloc_r+0xa8>
 80192d6:	bf00      	nop
 80192d8:	2402af60 	.word	0x2402af60

080192dc <__malloc_lock>:
 80192dc:	4801      	ldr	r0, [pc, #4]	@ (80192e4 <__malloc_lock+0x8>)
 80192de:	f000 b86d 	b.w	80193bc <__retarget_lock_acquire_recursive>
 80192e2:	bf00      	nop
 80192e4:	2402b0a0 	.word	0x2402b0a0

080192e8 <__malloc_unlock>:
 80192e8:	4801      	ldr	r0, [pc, #4]	@ (80192f0 <__malloc_unlock+0x8>)
 80192ea:	f000 b868 	b.w	80193be <__retarget_lock_release_recursive>
 80192ee:	bf00      	nop
 80192f0:	2402b0a0 	.word	0x2402b0a0

080192f4 <siprintf>:
 80192f4:	b40e      	push	{r1, r2, r3}
 80192f6:	b510      	push	{r4, lr}
 80192f8:	b09d      	sub	sp, #116	@ 0x74
 80192fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 80192fc:	9002      	str	r0, [sp, #8]
 80192fe:	9006      	str	r0, [sp, #24]
 8019300:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019304:	480a      	ldr	r0, [pc, #40]	@ (8019330 <siprintf+0x3c>)
 8019306:	9107      	str	r1, [sp, #28]
 8019308:	9104      	str	r1, [sp, #16]
 801930a:	490a      	ldr	r1, [pc, #40]	@ (8019334 <siprintf+0x40>)
 801930c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019310:	9105      	str	r1, [sp, #20]
 8019312:	2400      	movs	r4, #0
 8019314:	a902      	add	r1, sp, #8
 8019316:	6800      	ldr	r0, [r0, #0]
 8019318:	9301      	str	r3, [sp, #4]
 801931a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801931c:	f000 f90c 	bl	8019538 <_svfiprintf_r>
 8019320:	9b02      	ldr	r3, [sp, #8]
 8019322:	701c      	strb	r4, [r3, #0]
 8019324:	b01d      	add	sp, #116	@ 0x74
 8019326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801932a:	b003      	add	sp, #12
 801932c:	4770      	bx	lr
 801932e:	bf00      	nop
 8019330:	24000330 	.word	0x24000330
 8019334:	ffff0208 	.word	0xffff0208

08019338 <memset>:
 8019338:	4402      	add	r2, r0
 801933a:	4603      	mov	r3, r0
 801933c:	4293      	cmp	r3, r2
 801933e:	d100      	bne.n	8019342 <memset+0xa>
 8019340:	4770      	bx	lr
 8019342:	f803 1b01 	strb.w	r1, [r3], #1
 8019346:	e7f9      	b.n	801933c <memset+0x4>

08019348 <_sbrk_r>:
 8019348:	b538      	push	{r3, r4, r5, lr}
 801934a:	4d06      	ldr	r5, [pc, #24]	@ (8019364 <_sbrk_r+0x1c>)
 801934c:	2300      	movs	r3, #0
 801934e:	4604      	mov	r4, r0
 8019350:	4608      	mov	r0, r1
 8019352:	602b      	str	r3, [r5, #0]
 8019354:	f7e9 f80a 	bl	800236c <_sbrk>
 8019358:	1c43      	adds	r3, r0, #1
 801935a:	d102      	bne.n	8019362 <_sbrk_r+0x1a>
 801935c:	682b      	ldr	r3, [r5, #0]
 801935e:	b103      	cbz	r3, 8019362 <_sbrk_r+0x1a>
 8019360:	6023      	str	r3, [r4, #0]
 8019362:	bd38      	pop	{r3, r4, r5, pc}
 8019364:	2402b09c 	.word	0x2402b09c

08019368 <__errno>:
 8019368:	4b01      	ldr	r3, [pc, #4]	@ (8019370 <__errno+0x8>)
 801936a:	6818      	ldr	r0, [r3, #0]
 801936c:	4770      	bx	lr
 801936e:	bf00      	nop
 8019370:	24000330 	.word	0x24000330

08019374 <__libc_init_array>:
 8019374:	b570      	push	{r4, r5, r6, lr}
 8019376:	4d0d      	ldr	r5, [pc, #52]	@ (80193ac <__libc_init_array+0x38>)
 8019378:	4c0d      	ldr	r4, [pc, #52]	@ (80193b0 <__libc_init_array+0x3c>)
 801937a:	1b64      	subs	r4, r4, r5
 801937c:	10a4      	asrs	r4, r4, #2
 801937e:	2600      	movs	r6, #0
 8019380:	42a6      	cmp	r6, r4
 8019382:	d109      	bne.n	8019398 <__libc_init_array+0x24>
 8019384:	4d0b      	ldr	r5, [pc, #44]	@ (80193b4 <__libc_init_array+0x40>)
 8019386:	4c0c      	ldr	r4, [pc, #48]	@ (80193b8 <__libc_init_array+0x44>)
 8019388:	f000 fbae 	bl	8019ae8 <_init>
 801938c:	1b64      	subs	r4, r4, r5
 801938e:	10a4      	asrs	r4, r4, #2
 8019390:	2600      	movs	r6, #0
 8019392:	42a6      	cmp	r6, r4
 8019394:	d105      	bne.n	80193a2 <__libc_init_array+0x2e>
 8019396:	bd70      	pop	{r4, r5, r6, pc}
 8019398:	f855 3b04 	ldr.w	r3, [r5], #4
 801939c:	4798      	blx	r3
 801939e:	3601      	adds	r6, #1
 80193a0:	e7ee      	b.n	8019380 <__libc_init_array+0xc>
 80193a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80193a6:	4798      	blx	r3
 80193a8:	3601      	adds	r6, #1
 80193aa:	e7f2      	b.n	8019392 <__libc_init_array+0x1e>
 80193ac:	0801a23c 	.word	0x0801a23c
 80193b0:	0801a23c 	.word	0x0801a23c
 80193b4:	0801a23c 	.word	0x0801a23c
 80193b8:	0801a240 	.word	0x0801a240

080193bc <__retarget_lock_acquire_recursive>:
 80193bc:	4770      	bx	lr

080193be <__retarget_lock_release_recursive>:
 80193be:	4770      	bx	lr

080193c0 <strcpy>:
 80193c0:	4603      	mov	r3, r0
 80193c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80193c6:	f803 2b01 	strb.w	r2, [r3], #1
 80193ca:	2a00      	cmp	r2, #0
 80193cc:	d1f9      	bne.n	80193c2 <strcpy+0x2>
 80193ce:	4770      	bx	lr

080193d0 <memcpy>:
 80193d0:	440a      	add	r2, r1
 80193d2:	4291      	cmp	r1, r2
 80193d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80193d8:	d100      	bne.n	80193dc <memcpy+0xc>
 80193da:	4770      	bx	lr
 80193dc:	b510      	push	{r4, lr}
 80193de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193e6:	4291      	cmp	r1, r2
 80193e8:	d1f9      	bne.n	80193de <memcpy+0xe>
 80193ea:	bd10      	pop	{r4, pc}

080193ec <_free_r>:
 80193ec:	b538      	push	{r3, r4, r5, lr}
 80193ee:	4605      	mov	r5, r0
 80193f0:	2900      	cmp	r1, #0
 80193f2:	d041      	beq.n	8019478 <_free_r+0x8c>
 80193f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80193f8:	1f0c      	subs	r4, r1, #4
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	bfb8      	it	lt
 80193fe:	18e4      	addlt	r4, r4, r3
 8019400:	f7ff ff6c 	bl	80192dc <__malloc_lock>
 8019404:	4a1d      	ldr	r2, [pc, #116]	@ (801947c <_free_r+0x90>)
 8019406:	6813      	ldr	r3, [r2, #0]
 8019408:	b933      	cbnz	r3, 8019418 <_free_r+0x2c>
 801940a:	6063      	str	r3, [r4, #4]
 801940c:	6014      	str	r4, [r2, #0]
 801940e:	4628      	mov	r0, r5
 8019410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019414:	f7ff bf68 	b.w	80192e8 <__malloc_unlock>
 8019418:	42a3      	cmp	r3, r4
 801941a:	d908      	bls.n	801942e <_free_r+0x42>
 801941c:	6820      	ldr	r0, [r4, #0]
 801941e:	1821      	adds	r1, r4, r0
 8019420:	428b      	cmp	r3, r1
 8019422:	bf01      	itttt	eq
 8019424:	6819      	ldreq	r1, [r3, #0]
 8019426:	685b      	ldreq	r3, [r3, #4]
 8019428:	1809      	addeq	r1, r1, r0
 801942a:	6021      	streq	r1, [r4, #0]
 801942c:	e7ed      	b.n	801940a <_free_r+0x1e>
 801942e:	461a      	mov	r2, r3
 8019430:	685b      	ldr	r3, [r3, #4]
 8019432:	b10b      	cbz	r3, 8019438 <_free_r+0x4c>
 8019434:	42a3      	cmp	r3, r4
 8019436:	d9fa      	bls.n	801942e <_free_r+0x42>
 8019438:	6811      	ldr	r1, [r2, #0]
 801943a:	1850      	adds	r0, r2, r1
 801943c:	42a0      	cmp	r0, r4
 801943e:	d10b      	bne.n	8019458 <_free_r+0x6c>
 8019440:	6820      	ldr	r0, [r4, #0]
 8019442:	4401      	add	r1, r0
 8019444:	1850      	adds	r0, r2, r1
 8019446:	4283      	cmp	r3, r0
 8019448:	6011      	str	r1, [r2, #0]
 801944a:	d1e0      	bne.n	801940e <_free_r+0x22>
 801944c:	6818      	ldr	r0, [r3, #0]
 801944e:	685b      	ldr	r3, [r3, #4]
 8019450:	6053      	str	r3, [r2, #4]
 8019452:	4408      	add	r0, r1
 8019454:	6010      	str	r0, [r2, #0]
 8019456:	e7da      	b.n	801940e <_free_r+0x22>
 8019458:	d902      	bls.n	8019460 <_free_r+0x74>
 801945a:	230c      	movs	r3, #12
 801945c:	602b      	str	r3, [r5, #0]
 801945e:	e7d6      	b.n	801940e <_free_r+0x22>
 8019460:	6820      	ldr	r0, [r4, #0]
 8019462:	1821      	adds	r1, r4, r0
 8019464:	428b      	cmp	r3, r1
 8019466:	bf04      	itt	eq
 8019468:	6819      	ldreq	r1, [r3, #0]
 801946a:	685b      	ldreq	r3, [r3, #4]
 801946c:	6063      	str	r3, [r4, #4]
 801946e:	bf04      	itt	eq
 8019470:	1809      	addeq	r1, r1, r0
 8019472:	6021      	streq	r1, [r4, #0]
 8019474:	6054      	str	r4, [r2, #4]
 8019476:	e7ca      	b.n	801940e <_free_r+0x22>
 8019478:	bd38      	pop	{r3, r4, r5, pc}
 801947a:	bf00      	nop
 801947c:	2402af60 	.word	0x2402af60

08019480 <__ssputs_r>:
 8019480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019484:	688e      	ldr	r6, [r1, #8]
 8019486:	461f      	mov	r7, r3
 8019488:	42be      	cmp	r6, r7
 801948a:	680b      	ldr	r3, [r1, #0]
 801948c:	4682      	mov	sl, r0
 801948e:	460c      	mov	r4, r1
 8019490:	4690      	mov	r8, r2
 8019492:	d82d      	bhi.n	80194f0 <__ssputs_r+0x70>
 8019494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801949c:	d026      	beq.n	80194ec <__ssputs_r+0x6c>
 801949e:	6965      	ldr	r5, [r4, #20]
 80194a0:	6909      	ldr	r1, [r1, #16]
 80194a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194a6:	eba3 0901 	sub.w	r9, r3, r1
 80194aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80194ae:	1c7b      	adds	r3, r7, #1
 80194b0:	444b      	add	r3, r9
 80194b2:	106d      	asrs	r5, r5, #1
 80194b4:	429d      	cmp	r5, r3
 80194b6:	bf38      	it	cc
 80194b8:	461d      	movcc	r5, r3
 80194ba:	0553      	lsls	r3, r2, #21
 80194bc:	d527      	bpl.n	801950e <__ssputs_r+0x8e>
 80194be:	4629      	mov	r1, r5
 80194c0:	f7ff fe8c 	bl	80191dc <_malloc_r>
 80194c4:	4606      	mov	r6, r0
 80194c6:	b360      	cbz	r0, 8019522 <__ssputs_r+0xa2>
 80194c8:	6921      	ldr	r1, [r4, #16]
 80194ca:	464a      	mov	r2, r9
 80194cc:	f7ff ff80 	bl	80193d0 <memcpy>
 80194d0:	89a3      	ldrh	r3, [r4, #12]
 80194d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80194d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80194da:	81a3      	strh	r3, [r4, #12]
 80194dc:	6126      	str	r6, [r4, #16]
 80194de:	6165      	str	r5, [r4, #20]
 80194e0:	444e      	add	r6, r9
 80194e2:	eba5 0509 	sub.w	r5, r5, r9
 80194e6:	6026      	str	r6, [r4, #0]
 80194e8:	60a5      	str	r5, [r4, #8]
 80194ea:	463e      	mov	r6, r7
 80194ec:	42be      	cmp	r6, r7
 80194ee:	d900      	bls.n	80194f2 <__ssputs_r+0x72>
 80194f0:	463e      	mov	r6, r7
 80194f2:	6820      	ldr	r0, [r4, #0]
 80194f4:	4632      	mov	r2, r6
 80194f6:	4641      	mov	r1, r8
 80194f8:	f000 faa6 	bl	8019a48 <memmove>
 80194fc:	68a3      	ldr	r3, [r4, #8]
 80194fe:	1b9b      	subs	r3, r3, r6
 8019500:	60a3      	str	r3, [r4, #8]
 8019502:	6823      	ldr	r3, [r4, #0]
 8019504:	4433      	add	r3, r6
 8019506:	6023      	str	r3, [r4, #0]
 8019508:	2000      	movs	r0, #0
 801950a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801950e:	462a      	mov	r2, r5
 8019510:	f000 fab4 	bl	8019a7c <_realloc_r>
 8019514:	4606      	mov	r6, r0
 8019516:	2800      	cmp	r0, #0
 8019518:	d1e0      	bne.n	80194dc <__ssputs_r+0x5c>
 801951a:	6921      	ldr	r1, [r4, #16]
 801951c:	4650      	mov	r0, sl
 801951e:	f7ff ff65 	bl	80193ec <_free_r>
 8019522:	230c      	movs	r3, #12
 8019524:	f8ca 3000 	str.w	r3, [sl]
 8019528:	89a3      	ldrh	r3, [r4, #12]
 801952a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801952e:	81a3      	strh	r3, [r4, #12]
 8019530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019534:	e7e9      	b.n	801950a <__ssputs_r+0x8a>
	...

08019538 <_svfiprintf_r>:
 8019538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801953c:	4698      	mov	r8, r3
 801953e:	898b      	ldrh	r3, [r1, #12]
 8019540:	061b      	lsls	r3, r3, #24
 8019542:	b09d      	sub	sp, #116	@ 0x74
 8019544:	4607      	mov	r7, r0
 8019546:	460d      	mov	r5, r1
 8019548:	4614      	mov	r4, r2
 801954a:	d510      	bpl.n	801956e <_svfiprintf_r+0x36>
 801954c:	690b      	ldr	r3, [r1, #16]
 801954e:	b973      	cbnz	r3, 801956e <_svfiprintf_r+0x36>
 8019550:	2140      	movs	r1, #64	@ 0x40
 8019552:	f7ff fe43 	bl	80191dc <_malloc_r>
 8019556:	6028      	str	r0, [r5, #0]
 8019558:	6128      	str	r0, [r5, #16]
 801955a:	b930      	cbnz	r0, 801956a <_svfiprintf_r+0x32>
 801955c:	230c      	movs	r3, #12
 801955e:	603b      	str	r3, [r7, #0]
 8019560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019564:	b01d      	add	sp, #116	@ 0x74
 8019566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801956a:	2340      	movs	r3, #64	@ 0x40
 801956c:	616b      	str	r3, [r5, #20]
 801956e:	2300      	movs	r3, #0
 8019570:	9309      	str	r3, [sp, #36]	@ 0x24
 8019572:	2320      	movs	r3, #32
 8019574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019578:	f8cd 800c 	str.w	r8, [sp, #12]
 801957c:	2330      	movs	r3, #48	@ 0x30
 801957e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801971c <_svfiprintf_r+0x1e4>
 8019582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019586:	f04f 0901 	mov.w	r9, #1
 801958a:	4623      	mov	r3, r4
 801958c:	469a      	mov	sl, r3
 801958e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019592:	b10a      	cbz	r2, 8019598 <_svfiprintf_r+0x60>
 8019594:	2a25      	cmp	r2, #37	@ 0x25
 8019596:	d1f9      	bne.n	801958c <_svfiprintf_r+0x54>
 8019598:	ebba 0b04 	subs.w	fp, sl, r4
 801959c:	d00b      	beq.n	80195b6 <_svfiprintf_r+0x7e>
 801959e:	465b      	mov	r3, fp
 80195a0:	4622      	mov	r2, r4
 80195a2:	4629      	mov	r1, r5
 80195a4:	4638      	mov	r0, r7
 80195a6:	f7ff ff6b 	bl	8019480 <__ssputs_r>
 80195aa:	3001      	adds	r0, #1
 80195ac:	f000 80a7 	beq.w	80196fe <_svfiprintf_r+0x1c6>
 80195b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80195b2:	445a      	add	r2, fp
 80195b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80195b6:	f89a 3000 	ldrb.w	r3, [sl]
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	f000 809f 	beq.w	80196fe <_svfiprintf_r+0x1c6>
 80195c0:	2300      	movs	r3, #0
 80195c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80195c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195ca:	f10a 0a01 	add.w	sl, sl, #1
 80195ce:	9304      	str	r3, [sp, #16]
 80195d0:	9307      	str	r3, [sp, #28]
 80195d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80195d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80195d8:	4654      	mov	r4, sl
 80195da:	2205      	movs	r2, #5
 80195dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195e0:	484e      	ldr	r0, [pc, #312]	@ (801971c <_svfiprintf_r+0x1e4>)
 80195e2:	f7e6 fe85 	bl	80002f0 <memchr>
 80195e6:	9a04      	ldr	r2, [sp, #16]
 80195e8:	b9d8      	cbnz	r0, 8019622 <_svfiprintf_r+0xea>
 80195ea:	06d0      	lsls	r0, r2, #27
 80195ec:	bf44      	itt	mi
 80195ee:	2320      	movmi	r3, #32
 80195f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195f4:	0711      	lsls	r1, r2, #28
 80195f6:	bf44      	itt	mi
 80195f8:	232b      	movmi	r3, #43	@ 0x2b
 80195fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80195fe:	f89a 3000 	ldrb.w	r3, [sl]
 8019602:	2b2a      	cmp	r3, #42	@ 0x2a
 8019604:	d015      	beq.n	8019632 <_svfiprintf_r+0xfa>
 8019606:	9a07      	ldr	r2, [sp, #28]
 8019608:	4654      	mov	r4, sl
 801960a:	2000      	movs	r0, #0
 801960c:	f04f 0c0a 	mov.w	ip, #10
 8019610:	4621      	mov	r1, r4
 8019612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019616:	3b30      	subs	r3, #48	@ 0x30
 8019618:	2b09      	cmp	r3, #9
 801961a:	d94b      	bls.n	80196b4 <_svfiprintf_r+0x17c>
 801961c:	b1b0      	cbz	r0, 801964c <_svfiprintf_r+0x114>
 801961e:	9207      	str	r2, [sp, #28]
 8019620:	e014      	b.n	801964c <_svfiprintf_r+0x114>
 8019622:	eba0 0308 	sub.w	r3, r0, r8
 8019626:	fa09 f303 	lsl.w	r3, r9, r3
 801962a:	4313      	orrs	r3, r2
 801962c:	9304      	str	r3, [sp, #16]
 801962e:	46a2      	mov	sl, r4
 8019630:	e7d2      	b.n	80195d8 <_svfiprintf_r+0xa0>
 8019632:	9b03      	ldr	r3, [sp, #12]
 8019634:	1d19      	adds	r1, r3, #4
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	9103      	str	r1, [sp, #12]
 801963a:	2b00      	cmp	r3, #0
 801963c:	bfbb      	ittet	lt
 801963e:	425b      	neglt	r3, r3
 8019640:	f042 0202 	orrlt.w	r2, r2, #2
 8019644:	9307      	strge	r3, [sp, #28]
 8019646:	9307      	strlt	r3, [sp, #28]
 8019648:	bfb8      	it	lt
 801964a:	9204      	strlt	r2, [sp, #16]
 801964c:	7823      	ldrb	r3, [r4, #0]
 801964e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019650:	d10a      	bne.n	8019668 <_svfiprintf_r+0x130>
 8019652:	7863      	ldrb	r3, [r4, #1]
 8019654:	2b2a      	cmp	r3, #42	@ 0x2a
 8019656:	d132      	bne.n	80196be <_svfiprintf_r+0x186>
 8019658:	9b03      	ldr	r3, [sp, #12]
 801965a:	1d1a      	adds	r2, r3, #4
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	9203      	str	r2, [sp, #12]
 8019660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019664:	3402      	adds	r4, #2
 8019666:	9305      	str	r3, [sp, #20]
 8019668:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801972c <_svfiprintf_r+0x1f4>
 801966c:	7821      	ldrb	r1, [r4, #0]
 801966e:	2203      	movs	r2, #3
 8019670:	4650      	mov	r0, sl
 8019672:	f7e6 fe3d 	bl	80002f0 <memchr>
 8019676:	b138      	cbz	r0, 8019688 <_svfiprintf_r+0x150>
 8019678:	9b04      	ldr	r3, [sp, #16]
 801967a:	eba0 000a 	sub.w	r0, r0, sl
 801967e:	2240      	movs	r2, #64	@ 0x40
 8019680:	4082      	lsls	r2, r0
 8019682:	4313      	orrs	r3, r2
 8019684:	3401      	adds	r4, #1
 8019686:	9304      	str	r3, [sp, #16]
 8019688:	f814 1b01 	ldrb.w	r1, [r4], #1
 801968c:	4824      	ldr	r0, [pc, #144]	@ (8019720 <_svfiprintf_r+0x1e8>)
 801968e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019692:	2206      	movs	r2, #6
 8019694:	f7e6 fe2c 	bl	80002f0 <memchr>
 8019698:	2800      	cmp	r0, #0
 801969a:	d036      	beq.n	801970a <_svfiprintf_r+0x1d2>
 801969c:	4b21      	ldr	r3, [pc, #132]	@ (8019724 <_svfiprintf_r+0x1ec>)
 801969e:	bb1b      	cbnz	r3, 80196e8 <_svfiprintf_r+0x1b0>
 80196a0:	9b03      	ldr	r3, [sp, #12]
 80196a2:	3307      	adds	r3, #7
 80196a4:	f023 0307 	bic.w	r3, r3, #7
 80196a8:	3308      	adds	r3, #8
 80196aa:	9303      	str	r3, [sp, #12]
 80196ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80196ae:	4433      	add	r3, r6
 80196b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80196b2:	e76a      	b.n	801958a <_svfiprintf_r+0x52>
 80196b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80196b8:	460c      	mov	r4, r1
 80196ba:	2001      	movs	r0, #1
 80196bc:	e7a8      	b.n	8019610 <_svfiprintf_r+0xd8>
 80196be:	2300      	movs	r3, #0
 80196c0:	3401      	adds	r4, #1
 80196c2:	9305      	str	r3, [sp, #20]
 80196c4:	4619      	mov	r1, r3
 80196c6:	f04f 0c0a 	mov.w	ip, #10
 80196ca:	4620      	mov	r0, r4
 80196cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196d0:	3a30      	subs	r2, #48	@ 0x30
 80196d2:	2a09      	cmp	r2, #9
 80196d4:	d903      	bls.n	80196de <_svfiprintf_r+0x1a6>
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d0c6      	beq.n	8019668 <_svfiprintf_r+0x130>
 80196da:	9105      	str	r1, [sp, #20]
 80196dc:	e7c4      	b.n	8019668 <_svfiprintf_r+0x130>
 80196de:	fb0c 2101 	mla	r1, ip, r1, r2
 80196e2:	4604      	mov	r4, r0
 80196e4:	2301      	movs	r3, #1
 80196e6:	e7f0      	b.n	80196ca <_svfiprintf_r+0x192>
 80196e8:	ab03      	add	r3, sp, #12
 80196ea:	9300      	str	r3, [sp, #0]
 80196ec:	462a      	mov	r2, r5
 80196ee:	4b0e      	ldr	r3, [pc, #56]	@ (8019728 <_svfiprintf_r+0x1f0>)
 80196f0:	a904      	add	r1, sp, #16
 80196f2:	4638      	mov	r0, r7
 80196f4:	f3af 8000 	nop.w
 80196f8:	1c42      	adds	r2, r0, #1
 80196fa:	4606      	mov	r6, r0
 80196fc:	d1d6      	bne.n	80196ac <_svfiprintf_r+0x174>
 80196fe:	89ab      	ldrh	r3, [r5, #12]
 8019700:	065b      	lsls	r3, r3, #25
 8019702:	f53f af2d 	bmi.w	8019560 <_svfiprintf_r+0x28>
 8019706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019708:	e72c      	b.n	8019564 <_svfiprintf_r+0x2c>
 801970a:	ab03      	add	r3, sp, #12
 801970c:	9300      	str	r3, [sp, #0]
 801970e:	462a      	mov	r2, r5
 8019710:	4b05      	ldr	r3, [pc, #20]	@ (8019728 <_svfiprintf_r+0x1f0>)
 8019712:	a904      	add	r1, sp, #16
 8019714:	4638      	mov	r0, r7
 8019716:	f000 f879 	bl	801980c <_printf_i>
 801971a:	e7ed      	b.n	80196f8 <_svfiprintf_r+0x1c0>
 801971c:	0801a200 	.word	0x0801a200
 8019720:	0801a20a 	.word	0x0801a20a
 8019724:	00000000 	.word	0x00000000
 8019728:	08019481 	.word	0x08019481
 801972c:	0801a206 	.word	0x0801a206

08019730 <_printf_common>:
 8019730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019734:	4616      	mov	r6, r2
 8019736:	4698      	mov	r8, r3
 8019738:	688a      	ldr	r2, [r1, #8]
 801973a:	690b      	ldr	r3, [r1, #16]
 801973c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019740:	4293      	cmp	r3, r2
 8019742:	bfb8      	it	lt
 8019744:	4613      	movlt	r3, r2
 8019746:	6033      	str	r3, [r6, #0]
 8019748:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801974c:	4607      	mov	r7, r0
 801974e:	460c      	mov	r4, r1
 8019750:	b10a      	cbz	r2, 8019756 <_printf_common+0x26>
 8019752:	3301      	adds	r3, #1
 8019754:	6033      	str	r3, [r6, #0]
 8019756:	6823      	ldr	r3, [r4, #0]
 8019758:	0699      	lsls	r1, r3, #26
 801975a:	bf42      	ittt	mi
 801975c:	6833      	ldrmi	r3, [r6, #0]
 801975e:	3302      	addmi	r3, #2
 8019760:	6033      	strmi	r3, [r6, #0]
 8019762:	6825      	ldr	r5, [r4, #0]
 8019764:	f015 0506 	ands.w	r5, r5, #6
 8019768:	d106      	bne.n	8019778 <_printf_common+0x48>
 801976a:	f104 0a19 	add.w	sl, r4, #25
 801976e:	68e3      	ldr	r3, [r4, #12]
 8019770:	6832      	ldr	r2, [r6, #0]
 8019772:	1a9b      	subs	r3, r3, r2
 8019774:	42ab      	cmp	r3, r5
 8019776:	dc26      	bgt.n	80197c6 <_printf_common+0x96>
 8019778:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801977c:	6822      	ldr	r2, [r4, #0]
 801977e:	3b00      	subs	r3, #0
 8019780:	bf18      	it	ne
 8019782:	2301      	movne	r3, #1
 8019784:	0692      	lsls	r2, r2, #26
 8019786:	d42b      	bmi.n	80197e0 <_printf_common+0xb0>
 8019788:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801978c:	4641      	mov	r1, r8
 801978e:	4638      	mov	r0, r7
 8019790:	47c8      	blx	r9
 8019792:	3001      	adds	r0, #1
 8019794:	d01e      	beq.n	80197d4 <_printf_common+0xa4>
 8019796:	6823      	ldr	r3, [r4, #0]
 8019798:	6922      	ldr	r2, [r4, #16]
 801979a:	f003 0306 	and.w	r3, r3, #6
 801979e:	2b04      	cmp	r3, #4
 80197a0:	bf02      	ittt	eq
 80197a2:	68e5      	ldreq	r5, [r4, #12]
 80197a4:	6833      	ldreq	r3, [r6, #0]
 80197a6:	1aed      	subeq	r5, r5, r3
 80197a8:	68a3      	ldr	r3, [r4, #8]
 80197aa:	bf0c      	ite	eq
 80197ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80197b0:	2500      	movne	r5, #0
 80197b2:	4293      	cmp	r3, r2
 80197b4:	bfc4      	itt	gt
 80197b6:	1a9b      	subgt	r3, r3, r2
 80197b8:	18ed      	addgt	r5, r5, r3
 80197ba:	2600      	movs	r6, #0
 80197bc:	341a      	adds	r4, #26
 80197be:	42b5      	cmp	r5, r6
 80197c0:	d11a      	bne.n	80197f8 <_printf_common+0xc8>
 80197c2:	2000      	movs	r0, #0
 80197c4:	e008      	b.n	80197d8 <_printf_common+0xa8>
 80197c6:	2301      	movs	r3, #1
 80197c8:	4652      	mov	r2, sl
 80197ca:	4641      	mov	r1, r8
 80197cc:	4638      	mov	r0, r7
 80197ce:	47c8      	blx	r9
 80197d0:	3001      	adds	r0, #1
 80197d2:	d103      	bne.n	80197dc <_printf_common+0xac>
 80197d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80197d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197dc:	3501      	adds	r5, #1
 80197de:	e7c6      	b.n	801976e <_printf_common+0x3e>
 80197e0:	18e1      	adds	r1, r4, r3
 80197e2:	1c5a      	adds	r2, r3, #1
 80197e4:	2030      	movs	r0, #48	@ 0x30
 80197e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80197ea:	4422      	add	r2, r4
 80197ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80197f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80197f4:	3302      	adds	r3, #2
 80197f6:	e7c7      	b.n	8019788 <_printf_common+0x58>
 80197f8:	2301      	movs	r3, #1
 80197fa:	4622      	mov	r2, r4
 80197fc:	4641      	mov	r1, r8
 80197fe:	4638      	mov	r0, r7
 8019800:	47c8      	blx	r9
 8019802:	3001      	adds	r0, #1
 8019804:	d0e6      	beq.n	80197d4 <_printf_common+0xa4>
 8019806:	3601      	adds	r6, #1
 8019808:	e7d9      	b.n	80197be <_printf_common+0x8e>
	...

0801980c <_printf_i>:
 801980c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019810:	7e0f      	ldrb	r7, [r1, #24]
 8019812:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019814:	2f78      	cmp	r7, #120	@ 0x78
 8019816:	4691      	mov	r9, r2
 8019818:	4680      	mov	r8, r0
 801981a:	460c      	mov	r4, r1
 801981c:	469a      	mov	sl, r3
 801981e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019822:	d807      	bhi.n	8019834 <_printf_i+0x28>
 8019824:	2f62      	cmp	r7, #98	@ 0x62
 8019826:	d80a      	bhi.n	801983e <_printf_i+0x32>
 8019828:	2f00      	cmp	r7, #0
 801982a:	f000 80d1 	beq.w	80199d0 <_printf_i+0x1c4>
 801982e:	2f58      	cmp	r7, #88	@ 0x58
 8019830:	f000 80b8 	beq.w	80199a4 <_printf_i+0x198>
 8019834:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019838:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801983c:	e03a      	b.n	80198b4 <_printf_i+0xa8>
 801983e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019842:	2b15      	cmp	r3, #21
 8019844:	d8f6      	bhi.n	8019834 <_printf_i+0x28>
 8019846:	a101      	add	r1, pc, #4	@ (adr r1, 801984c <_printf_i+0x40>)
 8019848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801984c:	080198a5 	.word	0x080198a5
 8019850:	080198b9 	.word	0x080198b9
 8019854:	08019835 	.word	0x08019835
 8019858:	08019835 	.word	0x08019835
 801985c:	08019835 	.word	0x08019835
 8019860:	08019835 	.word	0x08019835
 8019864:	080198b9 	.word	0x080198b9
 8019868:	08019835 	.word	0x08019835
 801986c:	08019835 	.word	0x08019835
 8019870:	08019835 	.word	0x08019835
 8019874:	08019835 	.word	0x08019835
 8019878:	080199b7 	.word	0x080199b7
 801987c:	080198e3 	.word	0x080198e3
 8019880:	08019971 	.word	0x08019971
 8019884:	08019835 	.word	0x08019835
 8019888:	08019835 	.word	0x08019835
 801988c:	080199d9 	.word	0x080199d9
 8019890:	08019835 	.word	0x08019835
 8019894:	080198e3 	.word	0x080198e3
 8019898:	08019835 	.word	0x08019835
 801989c:	08019835 	.word	0x08019835
 80198a0:	08019979 	.word	0x08019979
 80198a4:	6833      	ldr	r3, [r6, #0]
 80198a6:	1d1a      	adds	r2, r3, #4
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	6032      	str	r2, [r6, #0]
 80198ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80198b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80198b4:	2301      	movs	r3, #1
 80198b6:	e09c      	b.n	80199f2 <_printf_i+0x1e6>
 80198b8:	6833      	ldr	r3, [r6, #0]
 80198ba:	6820      	ldr	r0, [r4, #0]
 80198bc:	1d19      	adds	r1, r3, #4
 80198be:	6031      	str	r1, [r6, #0]
 80198c0:	0606      	lsls	r6, r0, #24
 80198c2:	d501      	bpl.n	80198c8 <_printf_i+0xbc>
 80198c4:	681d      	ldr	r5, [r3, #0]
 80198c6:	e003      	b.n	80198d0 <_printf_i+0xc4>
 80198c8:	0645      	lsls	r5, r0, #25
 80198ca:	d5fb      	bpl.n	80198c4 <_printf_i+0xb8>
 80198cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80198d0:	2d00      	cmp	r5, #0
 80198d2:	da03      	bge.n	80198dc <_printf_i+0xd0>
 80198d4:	232d      	movs	r3, #45	@ 0x2d
 80198d6:	426d      	negs	r5, r5
 80198d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80198dc:	4858      	ldr	r0, [pc, #352]	@ (8019a40 <_printf_i+0x234>)
 80198de:	230a      	movs	r3, #10
 80198e0:	e011      	b.n	8019906 <_printf_i+0xfa>
 80198e2:	6821      	ldr	r1, [r4, #0]
 80198e4:	6833      	ldr	r3, [r6, #0]
 80198e6:	0608      	lsls	r0, r1, #24
 80198e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80198ec:	d402      	bmi.n	80198f4 <_printf_i+0xe8>
 80198ee:	0649      	lsls	r1, r1, #25
 80198f0:	bf48      	it	mi
 80198f2:	b2ad      	uxthmi	r5, r5
 80198f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80198f6:	4852      	ldr	r0, [pc, #328]	@ (8019a40 <_printf_i+0x234>)
 80198f8:	6033      	str	r3, [r6, #0]
 80198fa:	bf14      	ite	ne
 80198fc:	230a      	movne	r3, #10
 80198fe:	2308      	moveq	r3, #8
 8019900:	2100      	movs	r1, #0
 8019902:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019906:	6866      	ldr	r6, [r4, #4]
 8019908:	60a6      	str	r6, [r4, #8]
 801990a:	2e00      	cmp	r6, #0
 801990c:	db05      	blt.n	801991a <_printf_i+0x10e>
 801990e:	6821      	ldr	r1, [r4, #0]
 8019910:	432e      	orrs	r6, r5
 8019912:	f021 0104 	bic.w	r1, r1, #4
 8019916:	6021      	str	r1, [r4, #0]
 8019918:	d04b      	beq.n	80199b2 <_printf_i+0x1a6>
 801991a:	4616      	mov	r6, r2
 801991c:	fbb5 f1f3 	udiv	r1, r5, r3
 8019920:	fb03 5711 	mls	r7, r3, r1, r5
 8019924:	5dc7      	ldrb	r7, [r0, r7]
 8019926:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801992a:	462f      	mov	r7, r5
 801992c:	42bb      	cmp	r3, r7
 801992e:	460d      	mov	r5, r1
 8019930:	d9f4      	bls.n	801991c <_printf_i+0x110>
 8019932:	2b08      	cmp	r3, #8
 8019934:	d10b      	bne.n	801994e <_printf_i+0x142>
 8019936:	6823      	ldr	r3, [r4, #0]
 8019938:	07df      	lsls	r7, r3, #31
 801993a:	d508      	bpl.n	801994e <_printf_i+0x142>
 801993c:	6923      	ldr	r3, [r4, #16]
 801993e:	6861      	ldr	r1, [r4, #4]
 8019940:	4299      	cmp	r1, r3
 8019942:	bfde      	ittt	le
 8019944:	2330      	movle	r3, #48	@ 0x30
 8019946:	f806 3c01 	strble.w	r3, [r6, #-1]
 801994a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801994e:	1b92      	subs	r2, r2, r6
 8019950:	6122      	str	r2, [r4, #16]
 8019952:	f8cd a000 	str.w	sl, [sp]
 8019956:	464b      	mov	r3, r9
 8019958:	aa03      	add	r2, sp, #12
 801995a:	4621      	mov	r1, r4
 801995c:	4640      	mov	r0, r8
 801995e:	f7ff fee7 	bl	8019730 <_printf_common>
 8019962:	3001      	adds	r0, #1
 8019964:	d14a      	bne.n	80199fc <_printf_i+0x1f0>
 8019966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801996a:	b004      	add	sp, #16
 801996c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019970:	6823      	ldr	r3, [r4, #0]
 8019972:	f043 0320 	orr.w	r3, r3, #32
 8019976:	6023      	str	r3, [r4, #0]
 8019978:	4832      	ldr	r0, [pc, #200]	@ (8019a44 <_printf_i+0x238>)
 801997a:	2778      	movs	r7, #120	@ 0x78
 801997c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019980:	6823      	ldr	r3, [r4, #0]
 8019982:	6831      	ldr	r1, [r6, #0]
 8019984:	061f      	lsls	r7, r3, #24
 8019986:	f851 5b04 	ldr.w	r5, [r1], #4
 801998a:	d402      	bmi.n	8019992 <_printf_i+0x186>
 801998c:	065f      	lsls	r7, r3, #25
 801998e:	bf48      	it	mi
 8019990:	b2ad      	uxthmi	r5, r5
 8019992:	6031      	str	r1, [r6, #0]
 8019994:	07d9      	lsls	r1, r3, #31
 8019996:	bf44      	itt	mi
 8019998:	f043 0320 	orrmi.w	r3, r3, #32
 801999c:	6023      	strmi	r3, [r4, #0]
 801999e:	b11d      	cbz	r5, 80199a8 <_printf_i+0x19c>
 80199a0:	2310      	movs	r3, #16
 80199a2:	e7ad      	b.n	8019900 <_printf_i+0xf4>
 80199a4:	4826      	ldr	r0, [pc, #152]	@ (8019a40 <_printf_i+0x234>)
 80199a6:	e7e9      	b.n	801997c <_printf_i+0x170>
 80199a8:	6823      	ldr	r3, [r4, #0]
 80199aa:	f023 0320 	bic.w	r3, r3, #32
 80199ae:	6023      	str	r3, [r4, #0]
 80199b0:	e7f6      	b.n	80199a0 <_printf_i+0x194>
 80199b2:	4616      	mov	r6, r2
 80199b4:	e7bd      	b.n	8019932 <_printf_i+0x126>
 80199b6:	6833      	ldr	r3, [r6, #0]
 80199b8:	6825      	ldr	r5, [r4, #0]
 80199ba:	6961      	ldr	r1, [r4, #20]
 80199bc:	1d18      	adds	r0, r3, #4
 80199be:	6030      	str	r0, [r6, #0]
 80199c0:	062e      	lsls	r6, r5, #24
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	d501      	bpl.n	80199ca <_printf_i+0x1be>
 80199c6:	6019      	str	r1, [r3, #0]
 80199c8:	e002      	b.n	80199d0 <_printf_i+0x1c4>
 80199ca:	0668      	lsls	r0, r5, #25
 80199cc:	d5fb      	bpl.n	80199c6 <_printf_i+0x1ba>
 80199ce:	8019      	strh	r1, [r3, #0]
 80199d0:	2300      	movs	r3, #0
 80199d2:	6123      	str	r3, [r4, #16]
 80199d4:	4616      	mov	r6, r2
 80199d6:	e7bc      	b.n	8019952 <_printf_i+0x146>
 80199d8:	6833      	ldr	r3, [r6, #0]
 80199da:	1d1a      	adds	r2, r3, #4
 80199dc:	6032      	str	r2, [r6, #0]
 80199de:	681e      	ldr	r6, [r3, #0]
 80199e0:	6862      	ldr	r2, [r4, #4]
 80199e2:	2100      	movs	r1, #0
 80199e4:	4630      	mov	r0, r6
 80199e6:	f7e6 fc83 	bl	80002f0 <memchr>
 80199ea:	b108      	cbz	r0, 80199f0 <_printf_i+0x1e4>
 80199ec:	1b80      	subs	r0, r0, r6
 80199ee:	6060      	str	r0, [r4, #4]
 80199f0:	6863      	ldr	r3, [r4, #4]
 80199f2:	6123      	str	r3, [r4, #16]
 80199f4:	2300      	movs	r3, #0
 80199f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80199fa:	e7aa      	b.n	8019952 <_printf_i+0x146>
 80199fc:	6923      	ldr	r3, [r4, #16]
 80199fe:	4632      	mov	r2, r6
 8019a00:	4649      	mov	r1, r9
 8019a02:	4640      	mov	r0, r8
 8019a04:	47d0      	blx	sl
 8019a06:	3001      	adds	r0, #1
 8019a08:	d0ad      	beq.n	8019966 <_printf_i+0x15a>
 8019a0a:	6823      	ldr	r3, [r4, #0]
 8019a0c:	079b      	lsls	r3, r3, #30
 8019a0e:	d413      	bmi.n	8019a38 <_printf_i+0x22c>
 8019a10:	68e0      	ldr	r0, [r4, #12]
 8019a12:	9b03      	ldr	r3, [sp, #12]
 8019a14:	4298      	cmp	r0, r3
 8019a16:	bfb8      	it	lt
 8019a18:	4618      	movlt	r0, r3
 8019a1a:	e7a6      	b.n	801996a <_printf_i+0x15e>
 8019a1c:	2301      	movs	r3, #1
 8019a1e:	4632      	mov	r2, r6
 8019a20:	4649      	mov	r1, r9
 8019a22:	4640      	mov	r0, r8
 8019a24:	47d0      	blx	sl
 8019a26:	3001      	adds	r0, #1
 8019a28:	d09d      	beq.n	8019966 <_printf_i+0x15a>
 8019a2a:	3501      	adds	r5, #1
 8019a2c:	68e3      	ldr	r3, [r4, #12]
 8019a2e:	9903      	ldr	r1, [sp, #12]
 8019a30:	1a5b      	subs	r3, r3, r1
 8019a32:	42ab      	cmp	r3, r5
 8019a34:	dcf2      	bgt.n	8019a1c <_printf_i+0x210>
 8019a36:	e7eb      	b.n	8019a10 <_printf_i+0x204>
 8019a38:	2500      	movs	r5, #0
 8019a3a:	f104 0619 	add.w	r6, r4, #25
 8019a3e:	e7f5      	b.n	8019a2c <_printf_i+0x220>
 8019a40:	0801a211 	.word	0x0801a211
 8019a44:	0801a222 	.word	0x0801a222

08019a48 <memmove>:
 8019a48:	4288      	cmp	r0, r1
 8019a4a:	b510      	push	{r4, lr}
 8019a4c:	eb01 0402 	add.w	r4, r1, r2
 8019a50:	d902      	bls.n	8019a58 <memmove+0x10>
 8019a52:	4284      	cmp	r4, r0
 8019a54:	4623      	mov	r3, r4
 8019a56:	d807      	bhi.n	8019a68 <memmove+0x20>
 8019a58:	1e43      	subs	r3, r0, #1
 8019a5a:	42a1      	cmp	r1, r4
 8019a5c:	d008      	beq.n	8019a70 <memmove+0x28>
 8019a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019a66:	e7f8      	b.n	8019a5a <memmove+0x12>
 8019a68:	4402      	add	r2, r0
 8019a6a:	4601      	mov	r1, r0
 8019a6c:	428a      	cmp	r2, r1
 8019a6e:	d100      	bne.n	8019a72 <memmove+0x2a>
 8019a70:	bd10      	pop	{r4, pc}
 8019a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019a7a:	e7f7      	b.n	8019a6c <memmove+0x24>

08019a7c <_realloc_r>:
 8019a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a80:	4607      	mov	r7, r0
 8019a82:	4614      	mov	r4, r2
 8019a84:	460d      	mov	r5, r1
 8019a86:	b921      	cbnz	r1, 8019a92 <_realloc_r+0x16>
 8019a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a8c:	4611      	mov	r1, r2
 8019a8e:	f7ff bba5 	b.w	80191dc <_malloc_r>
 8019a92:	b92a      	cbnz	r2, 8019aa0 <_realloc_r+0x24>
 8019a94:	f7ff fcaa 	bl	80193ec <_free_r>
 8019a98:	4625      	mov	r5, r4
 8019a9a:	4628      	mov	r0, r5
 8019a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019aa0:	f000 f81a 	bl	8019ad8 <_malloc_usable_size_r>
 8019aa4:	4284      	cmp	r4, r0
 8019aa6:	4606      	mov	r6, r0
 8019aa8:	d802      	bhi.n	8019ab0 <_realloc_r+0x34>
 8019aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019aae:	d8f4      	bhi.n	8019a9a <_realloc_r+0x1e>
 8019ab0:	4621      	mov	r1, r4
 8019ab2:	4638      	mov	r0, r7
 8019ab4:	f7ff fb92 	bl	80191dc <_malloc_r>
 8019ab8:	4680      	mov	r8, r0
 8019aba:	b908      	cbnz	r0, 8019ac0 <_realloc_r+0x44>
 8019abc:	4645      	mov	r5, r8
 8019abe:	e7ec      	b.n	8019a9a <_realloc_r+0x1e>
 8019ac0:	42b4      	cmp	r4, r6
 8019ac2:	4622      	mov	r2, r4
 8019ac4:	4629      	mov	r1, r5
 8019ac6:	bf28      	it	cs
 8019ac8:	4632      	movcs	r2, r6
 8019aca:	f7ff fc81 	bl	80193d0 <memcpy>
 8019ace:	4629      	mov	r1, r5
 8019ad0:	4638      	mov	r0, r7
 8019ad2:	f7ff fc8b 	bl	80193ec <_free_r>
 8019ad6:	e7f1      	b.n	8019abc <_realloc_r+0x40>

08019ad8 <_malloc_usable_size_r>:
 8019ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019adc:	1f18      	subs	r0, r3, #4
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	bfbc      	itt	lt
 8019ae2:	580b      	ldrlt	r3, [r1, r0]
 8019ae4:	18c0      	addlt	r0, r0, r3
 8019ae6:	4770      	bx	lr

08019ae8 <_init>:
 8019ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aea:	bf00      	nop
 8019aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019aee:	bc08      	pop	{r3}
 8019af0:	469e      	mov	lr, r3
 8019af2:	4770      	bx	lr

08019af4 <_fini>:
 8019af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019af6:	bf00      	nop
 8019af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019afa:	bc08      	pop	{r3}
 8019afc:	469e      	mov	lr, r3
 8019afe:	4770      	bx	lr
