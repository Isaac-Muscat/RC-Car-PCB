
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d114  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bdc  0801d3b8  0801d3b8  0001e3b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801df94  0801df94  0001ef94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801df9c  0801df9c  0001ef9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801dfa0  0801dfa0  0001efa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000050c  24000000  0801dfa4  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00048ac8  2400050c  0801e4b0  0001f50c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24048fd4  0801e4b0  0001ffd4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001f50c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000354ba  00000000  00000000  0001f53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000061cd  00000000  00000000  000549f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026c0  00000000  00000000  0005abc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e2a  00000000  00000000  0005d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004097a  00000000  00000000  0005f0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00037832  00000000  00000000  0009fa2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00186e95  00000000  00000000  000d725e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0025e0f3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b628  00000000  00000000  0025e138  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  00269760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400050c 	.word	0x2400050c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d39c 	.word	0x0801d39c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000510 	.word	0x24000510
 80002dc:	0801d39c 	.word	0x0801d39c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c0:	f3bf 8f4f 	dsb	sy
}
 80006c4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <__NVIC_SystemReset+0x24>)
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <__NVIC_SystemReset+0x28>)
 80006d2:	4313      	orrs	r3, r2
 80006d4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <__NVIC_SystemReset+0x20>
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	05fa0004 	.word	0x05fa0004

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006ee:	f001 fa1b 	bl	8001b28 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f002 fea5 	bl	8003440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f955 	bl	80009a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fa:	f000 f9cd 	bl	8000a98 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fc85 	bl	800100c <MX_GPIO_Init>
  MX_MDMA_Init();
 8000702:	f000 fc63 	bl	8000fcc <MX_MDMA_Init>
  MX_DMA_Init();
 8000706:	f000 fc11 	bl	8000f2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800070a:	f000 fbbd 	bl	8000e88 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800070e:	f019 fb2b 	bl	8019d68 <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 8000712:	f000 faff 	bl	8000d14 <MX_JPEG_Init>
  MX_I2C1_Init();
 8000716:	f000 fa7d 	bl	8000c14 <MX_I2C1_Init>
  MX_SPI4_Init();
 800071a:	f000 fb0f 	bl	8000d3c <MX_SPI4_Init>
  MX_ADC1_Init();
 800071e:	f000 f9ed 	bl	8000afc <MX_ADC1_Init>
  MX_I2C2_Init();
 8000722:	f000 fab7 	bl	8000c94 <MX_I2C2_Init>
  MX_TIM5_Init();
 8000726:	f000 fb5f 	bl	8000de8 <MX_TIM5_Init>
//				  //HAL_UART_Transmit(&huart1, usb_msg, strlen(usb_msg), 1000);
//			  }
//		}


	uint8_t init_result = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 800072e:	2214      	movs	r2, #20
 8000730:	497f      	ldr	r1, [pc, #508]	@ (8000930 <main+0x248>)
 8000732:	4880      	ldr	r0, [pc, #512]	@ (8000934 <main+0x24c>)
 8000734:	f003 fb02 	bl	8003d3c <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP STC3100 -- //

	hstc.address = STC_ADDR;
 8000738:	4b7f      	ldr	r3, [pc, #508]	@ (8000938 <main+0x250>)
 800073a:	2270      	movs	r2, #112	@ 0x70
 800073c:	711a      	strb	r2, [r3, #4]
	hstc.i2c_handle = &hi2c2;
 800073e:	4b7e      	ldr	r3, [pc, #504]	@ (8000938 <main+0x250>)
 8000740:	4a7e      	ldr	r2, [pc, #504]	@ (800093c <main+0x254>)
 8000742:	601a      	str	r2, [r3, #0]
	init_result = STC3100_Init(&hstc);
 8000744:	487c      	ldr	r0, [pc, #496]	@ (8000938 <main+0x250>)
 8000746:	f002 fe4f 	bl	80033e8 <STC3100_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d00f      	beq.n	8000774 <main+0x8c>
		sprintf(usb_msg, "Failed to Init STC3100: %d\r\n", init_result);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	461a      	mov	r2, r3
 8000758:	4979      	ldr	r1, [pc, #484]	@ (8000940 <main+0x258>)
 800075a:	487a      	ldr	r0, [pc, #488]	@ (8000944 <main+0x25c>)
 800075c:	f01a fe0c 	bl	801b378 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000760:	4878      	ldr	r0, [pc, #480]	@ (8000944 <main+0x25c>)
 8000762:	f7ff fe0d 	bl	8000380 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	4619      	mov	r1, r3
 800076a:	4876      	ldr	r0, [pc, #472]	@ (8000944 <main+0x25c>)
 800076c:	f019 fbd6 	bl	8019f1c <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000770:	f7ff ffa4 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	hssd1.i2c_handle = &hi2c2;
 8000774:	4b74      	ldr	r3, [pc, #464]	@ (8000948 <main+0x260>)
 8000776:	4a71      	ldr	r2, [pc, #452]	@ (800093c <main+0x254>)
 8000778:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800077a:	4b73      	ldr	r3, [pc, #460]	@ (8000948 <main+0x260>)
 800077c:	223c      	movs	r2, #60	@ 0x3c
 800077e:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000780:	4b71      	ldr	r3, [pc, #452]	@ (8000948 <main+0x260>)
 8000782:	4a72      	ldr	r2, [pc, #456]	@ (800094c <main+0x264>)
 8000784:	609a      	str	r2, [r3, #8]
	hssd1.draw_inverted = 0;
 8000786:	4b70      	ldr	r3, [pc, #448]	@ (8000948 <main+0x260>)
 8000788:	2200      	movs	r2, #0
 800078a:	749a      	strb	r2, [r3, #18]
	hssd1.draw_scale = 0;
 800078c:	4b6e      	ldr	r3, [pc, #440]	@ (8000948 <main+0x260>)
 800078e:	2200      	movs	r2, #0
 8000790:	74da      	strb	r2, [r3, #19]
	init_result = SSD1306_Init(&hssd1);
 8000792:	486d      	ldr	r0, [pc, #436]	@ (8000948 <main+0x260>)
 8000794:	f002 f8b2 	bl	80028fc <SSD1306_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00f      	beq.n	80007c2 <main+0xda>
		sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	461a      	mov	r2, r3
 80007a6:	496a      	ldr	r1, [pc, #424]	@ (8000950 <main+0x268>)
 80007a8:	4866      	ldr	r0, [pc, #408]	@ (8000944 <main+0x25c>)
 80007aa:	f01a fde5 	bl	801b378 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007ae:	4865      	ldr	r0, [pc, #404]	@ (8000944 <main+0x25c>)
 80007b0:	f7ff fde6 	bl	8000380 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4619      	mov	r1, r3
 80007b8:	4862      	ldr	r0, [pc, #392]	@ (8000944 <main+0x25c>)
 80007ba:	f019 fbaf 	bl	8019f1c <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80007be:	f7ff ff7d 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	hssd2.i2c_handle = &hi2c1;
 80007c2:	4b64      	ldr	r3, [pc, #400]	@ (8000954 <main+0x26c>)
 80007c4:	4a64      	ldr	r2, [pc, #400]	@ (8000958 <main+0x270>)
 80007c6:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 80007c8:	4b62      	ldr	r3, [pc, #392]	@ (8000954 <main+0x26c>)
 80007ca:	223c      	movs	r2, #60	@ 0x3c
 80007cc:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 80007ce:	4b61      	ldr	r3, [pc, #388]	@ (8000954 <main+0x26c>)
 80007d0:	4a62      	ldr	r2, [pc, #392]	@ (800095c <main+0x274>)
 80007d2:	609a      	str	r2, [r3, #8]
	hssd2.draw_inverted = 0;
 80007d4:	4b5f      	ldr	r3, [pc, #380]	@ (8000954 <main+0x26c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	749a      	strb	r2, [r3, #18]
	hssd2.draw_scale = 0;
 80007da:	4b5e      	ldr	r3, [pc, #376]	@ (8000954 <main+0x26c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	74da      	strb	r2, [r3, #19]
	init_result = SSD1306_Init(&hssd2);
 80007e0:	485c      	ldr	r0, [pc, #368]	@ (8000954 <main+0x26c>)
 80007e2:	f002 f88b 	bl	80028fc <SSD1306_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00f      	beq.n	8000810 <main+0x128>
		sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	461a      	mov	r2, r3
 80007f4:	495a      	ldr	r1, [pc, #360]	@ (8000960 <main+0x278>)
 80007f6:	4853      	ldr	r0, [pc, #332]	@ (8000944 <main+0x25c>)
 80007f8:	f01a fdbe 	bl	801b378 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007fc:	4851      	ldr	r0, [pc, #324]	@ (8000944 <main+0x25c>)
 80007fe:	f7ff fdbf 	bl	8000380 <strlen>
 8000802:	4603      	mov	r3, r0
 8000804:	4619      	mov	r1, r3
 8000806:	484f      	ldr	r0, [pc, #316]	@ (8000944 <main+0x25c>)
 8000808:	f019 fb88 	bl	8019f1c <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 800080c:	f7ff ff56 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 8000810:	4b54      	ldr	r3, [pc, #336]	@ (8000964 <main+0x27c>)
 8000812:	4a55      	ldr	r2, [pc, #340]	@ (8000968 <main+0x280>)
 8000814:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <main+0x27c>)
 8000818:	2200      	movs	r2, #0
 800081a:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 800081c:	4b51      	ldr	r3, [pc, #324]	@ (8000964 <main+0x27c>)
 800081e:	4a53      	ldr	r2, [pc, #332]	@ (800096c <main+0x284>)
 8000820:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 8000822:	4b50      	ldr	r3, [pc, #320]	@ (8000964 <main+0x27c>)
 8000824:	2220      	movs	r2, #32
 8000826:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 8000828:	4b4e      	ldr	r3, [pc, #312]	@ (8000964 <main+0x27c>)
 800082a:	4a51      	ldr	r2, [pc, #324]	@ (8000970 <main+0x288>)
 800082c:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 800082e:	484d      	ldr	r0, [pc, #308]	@ (8000964 <main+0x27c>)
 8000830:	f002 fa7e 	bl	8002d30 <ST7789_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00f      	beq.n	800085e <main+0x176>
		sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	461a      	mov	r2, r3
 8000842:	494c      	ldr	r1, [pc, #304]	@ (8000974 <main+0x28c>)
 8000844:	483f      	ldr	r0, [pc, #252]	@ (8000944 <main+0x25c>)
 8000846:	f01a fd97 	bl	801b378 <siprintf>
		CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 800084a:	483e      	ldr	r0, [pc, #248]	@ (8000944 <main+0x25c>)
 800084c:	f7ff fd98 	bl	8000380 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	4619      	mov	r1, r3
 8000854:	483b      	ldr	r0, [pc, #236]	@ (8000944 <main+0x25c>)
 8000856:	f019 fb61 	bl	8019f1c <CDC_Transmit_FS>
		// This state is non-functional, reset
		NVIC_SystemReset();
 800085a:	f7ff ff2f 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}


	ST7789_Clear(&hst7789);		 // Clear the screen
 800085e:	4841      	ldr	r0, [pc, #260]	@ (8000964 <main+0x27c>)
 8000860:	f002 fb84 	bl	8002f6c <ST7789_Clear>
	ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 8000864:	483f      	ldr	r0, [pc, #252]	@ (8000964 <main+0x27c>)
 8000866:	f002 fb93 	bl	8002f90 <ST7789_Draw_NOSIG>
	st7789_state = 1;			 // Flag LCD as requested
 800086a:	4b43      	ldr	r3, [pc, #268]	@ (8000978 <main+0x290>)
 800086c:	2201      	movs	r2, #1
 800086e:	701a      	strb	r2, [r3, #0]

	// ------------------------------------------------------------ SETUP MENU -- //
	hmenu.ssdL_handle = &hssd1;
 8000870:	4b42      	ldr	r3, [pc, #264]	@ (800097c <main+0x294>)
 8000872:	4a35      	ldr	r2, [pc, #212]	@ (8000948 <main+0x260>)
 8000874:	601a      	str	r2, [r3, #0]
	hmenu.ssdR_handle = &hssd2;
 8000876:	4b41      	ldr	r3, [pc, #260]	@ (800097c <main+0x294>)
 8000878:	4a36      	ldr	r2, [pc, #216]	@ (8000954 <main+0x26c>)
 800087a:	605a      	str	r2, [r3, #4]
	hmenu.page_anim = 0;
 800087c:	4b3f      	ldr	r3, [pc, #252]	@ (800097c <main+0x294>)
 800087e:	2200      	movs	r2, #0
 8000880:	755a      	strb	r2, [r3, #21]
	//hmenu.alert_current_con = 1;
	//hmenu.alert_voltage_con = 1;
	MENU_Init(&hmenu);
 8000882:	483e      	ldr	r0, [pc, #248]	@ (800097c <main+0x294>)
 8000884:	f016 ff6e 	bl	8017764 <MENU_Init>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000888:	4a3d      	ldr	r2, [pc, #244]	@ (8000980 <main+0x298>)
 800088a:	4b3e      	ldr	r3, [pc, #248]	@ (8000984 <main+0x29c>)
 800088c:	4610      	mov	r0, r2
 800088e:	4619      	mov	r1, r3
 8000890:	f240 230e 	movw	r3, #526	@ 0x20e
 8000894:	461a      	mov	r2, r3
 8000896:	f01a fe6c 	bl	801b572 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 800089a:	4a3b      	ldr	r2, [pc, #236]	@ (8000988 <main+0x2a0>)
 800089c:	4b39      	ldr	r3, [pc, #228]	@ (8000984 <main+0x29c>)
 800089e:	4610      	mov	r0, r2
 80008a0:	4619      	mov	r1, r3
 80008a2:	f240 230e 	movw	r3, #526	@ 0x20e
 80008a6:	461a      	mov	r2, r3
 80008a8:	f01a fe63 	bl	801b572 <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 80008ac:	4b37      	ldr	r3, [pc, #220]	@ (800098c <main+0x2a4>)
 80008ae:	4a38      	ldr	r2, [pc, #224]	@ (8000990 <main+0x2a8>)
 80008b0:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 80008b2:	4b36      	ldr	r3, [pc, #216]	@ (800098c <main+0x2a4>)
 80008b4:	2205      	movs	r2, #5
 80008b6:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 80008b8:	4b34      	ldr	r3, [pc, #208]	@ (800098c <main+0x2a4>)
 80008ba:	2205      	movs	r2, #5
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 80008c0:	4832      	ldr	r0, [pc, #200]	@ (800098c <main+0x2a4>)
 80008c2:	f016 fd10 	bl	80172e6 <XBEE_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d00e      	beq.n	80008ea <main+0x202>
		sprintf(ssd_msg, " Failed to Init XBEE");
 80008cc:	4931      	ldr	r1, [pc, #196]	@ (8000994 <main+0x2ac>)
 80008ce:	4832      	ldr	r0, [pc, #200]	@ (8000998 <main+0x2b0>)
 80008d0:	f01a fd52 	bl	801b378 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80008d4:	4830      	ldr	r0, [pc, #192]	@ (8000998 <main+0x2b0>)
 80008d6:	f7ff fd53 	bl	8000380 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4619      	mov	r1, r3
 80008e0:	482d      	ldr	r0, [pc, #180]	@ (8000998 <main+0x2b0>)
 80008e2:	f001 f8fb 	bl	8001adc <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 80008e6:	f7ff fee9 	bl	80006bc <__NVIC_SystemReset>
		while (1) {}
	}

	// ------------------------------------------------------------ SETUP WATCHDOG TIMER-- //
	if (HAL_TIM_Base_Start_IT(&htim5) != HAL_OK)
 80008ea:	482c      	ldr	r0, [pc, #176]	@ (800099c <main+0x2b4>)
 80008ec:	f012 fd22 	bl	8013334 <HAL_TIM_Base_Start_IT>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00e      	beq.n	8000914 <main+0x22c>
	{
		sprintf(ssd_msg, " Failed to Start Watchdog");
 80008f6:	492a      	ldr	r1, [pc, #168]	@ (80009a0 <main+0x2b8>)
 80008f8:	4827      	ldr	r0, [pc, #156]	@ (8000998 <main+0x2b0>)
 80008fa:	f01a fd3d 	bl	801b378 <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 80008fe:	4826      	ldr	r0, [pc, #152]	@ (8000998 <main+0x2b0>)
 8000900:	f7ff fd3e 	bl	8000380 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	4823      	ldr	r0, [pc, #140]	@ (8000998 <main+0x2b0>)
 800090c:	f001 f8e6 	bl	8001adc <WriteDebug>
		// This state is non-functional, reset
		NVIC_SystemReset();
 8000910:	f7ff fed4 	bl	80006bc <__NVIC_SystemReset>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();		// Process any incoming packets
 8000914:	f000 fd38 	bl	8001388 <SCH_XBeeRX>
		SCH_PowerMon();		// Monitor Power
 8000918:	f000 fdf0 	bl	80014fc <SCH_PowerMon>
		SCH_GetInputs();	// Get user inputs
 800091c:	f000 ff62 	bl	80017e4 <SCH_GetInputs>
		//SCH_OLEDUpdate();	// Update the OLEDs
		SCH_LCDUpdate();	// Update the LCD
 8000920:	f000 ff4a 	bl	80017b8 <SCH_LCDUpdate>
		// Don't SEND anything
		// Don't bother processing images
		// Don't update the screen
		//if (wdog_network < WDOG_NETWORK_CUTOFF) {

			SCH_XBeeTX();		// Send any neccesarry outgoing packets
 8000924:	f000 fda4 	bl	8001470 <SCH_XBeeTX>
			SCH_ImageDecode();	// Decode pending MCU blocks
 8000928:	f000 fdf2 	bl	8001510 <SCH_ImageDecode>
		SCH_XBeeRX();		// Process any incoming packets
 800092c:	e7f2      	b.n	8000914 <main+0x22c>
 800092e:	bf00      	nop
 8000930:	24026c90 	.word	0x24026c90
 8000934:	24000528 	.word	0x24000528
 8000938:	24026cc4 	.word	0x24026cc4
 800093c:	24000658 	.word	0x24000658
 8000940:	0801d3b8 	.word	0x0801d3b8
 8000944:	240013d0 	.word	0x240013d0
 8000948:	24000b44 	.word	0x24000b44
 800094c:	24000b6c 	.word	0x24000b6c
 8000950:	0801d3d8 	.word	0x0801d3d8
 8000954:	24000b58 	.word	0x24000b58
 8000958:	24000604 	.word	0x24000604
 800095c:	24000f6c 	.word	0x24000f6c
 8000960:	0801d3f4 	.word	0x0801d3f4
 8000964:	24001474 	.word	0x24001474
 8000968:	240008cc 	.word	0x240008cc
 800096c:	58021000 	.word	0x58021000
 8000970:	2400148c 	.word	0x2400148c
 8000974:	0801d410 	.word	0x0801d410
 8000978:	24026c8c 	.word	0x24026c8c
 800097c:	24001434 	.word	0x24001434
 8000980:	24026d10 	.word	0x24026d10
 8000984:	24000030 	.word	0x24000030
 8000988:	24031990 	.word	0x24031990
 800098c:	24026cdc 	.word	0x24026cdc
 8000990:	24000a18 	.word	0x24000a18
 8000994:	0801d42c 	.word	0x0801d42c
 8000998:	2400136c 	.word	0x2400136c
 800099c:	240009cc 	.word	0x240009cc
 80009a0:	0801d444 	.word	0x0801d444

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09c      	sub	sp, #112	@ 0x70
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ae:	224c      	movs	r2, #76	@ 0x4c
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f01a fd45 	bl	801b442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2220      	movs	r2, #32
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f01a fd3f 	bl	801b442 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009c4:	2002      	movs	r0, #2
 80009c6:	f00d ff85 	bl	800e8d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <SystemClock_Config+0xec>)
 80009d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a90 <SystemClock_Config+0xec>)
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <SystemClock_Config+0xec>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a94 <SystemClock_Config+0xf0>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a94 <SystemClock_Config+0xf0>)
 80009ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <SystemClock_Config+0xf0>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f8:	603b      	str	r3, [r7, #0]
 80009fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009fc:	bf00      	nop
 80009fe:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <SystemClock_Config+0xf0>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a0a:	d1f8      	bne.n	80009fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a22:	2318      	movs	r3, #24
 8000a24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a26:	2302      	movs	r3, #2
 8000a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a32:	230c      	movs	r3, #12
 8000a34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a42:	4618      	mov	r0, r3
 8000a44:	f00d ff90 	bl	800e968 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a4e:	f001 f897 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	233f      	movs	r3, #63	@ 0x3f
 8000a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2303      	movs	r3, #3
 8000a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a62:	2340      	movs	r3, #64	@ 0x40
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a70:	2340      	movs	r3, #64	@ 0x40
 8000a72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2102      	movs	r1, #2
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00e fbcf 	bl	800f21c <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000a84:	f001 f87c 	bl	8001b80 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3770      	adds	r7, #112	@ 0x70
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	58000400 	.word	0x58000400
 8000a94:	58024800 	.word	0x58024800

08000a98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b0b0      	sub	sp, #192	@ 0xc0
 8000a9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	22c0      	movs	r2, #192	@ 0xc0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f01a fccc 	bl	801b442 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_I2C1;
 8000aaa:	f04f 0208 	mov.w	r2, #8
 8000aae:	f04f 0300 	mov.w	r3, #0
 8000ab2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000aba:	230c      	movs	r3, #12
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000aca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f00e ff25 	bl	800f934 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000af0:	f001 f846 	bl	8001b80 <Error_Handler>
  }
}
 8000af4:	bf00      	nop
 8000af6:	37c0      	adds	r7, #192	@ 0xc0
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	@ 0x28
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b20:	4b38      	ldr	r3, [pc, #224]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b22:	4a39      	ldr	r2, [pc, #228]	@ (8000c08 <MX_ADC1_Init+0x10c>)
 8000b24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b26:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b28:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000b2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b2e:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b34:	4b33      	ldr	r3, [pc, #204]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000b3a:	4b32      	ldr	r3, [pc, #200]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b3c:	2208      	movs	r2, #8
 8000b3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b40:	4b30      	ldr	r3, [pc, #192]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b46:	4b2f      	ldr	r3, [pc, #188]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000b4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b5e:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000b64:	4b27      	ldr	r3, [pc, #156]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b66:	2203      	movs	r2, #3
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b70:	4b24      	ldr	r3, [pc, #144]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b76:	4b23      	ldr	r3, [pc, #140]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b84:	481f      	ldr	r0, [pc, #124]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000b86:	f002 ff37 	bl	80039f8 <HAL_ADC_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b90:	f000 fff6 	bl	8001b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000ba0:	f003 fee4 	bl	800496c <HAL_ADCEx_MultiModeConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000baa:	f000 ffe9 	bl	8001b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bae:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_ADC1_Init+0x110>)
 8000bb0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb2:	2306      	movs	r3, #6
 8000bb4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bbe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	463b      	mov	r3, r7
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000bd2:	f003 f98b 	bl	8003eec <HAL_ADC_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000bdc:	f000 ffd0 	bl	8001b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_ADC1_Init+0x114>)
 8000be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000be4:	230c      	movs	r3, #12
 8000be6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_ADC1_Init+0x108>)
 8000bee:	f003 f97d 	bl	8003eec <HAL_ADC_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000bf8:	f000 ffc2 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	3728      	adds	r7, #40	@ 0x28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000528 	.word	0x24000528
 8000c08:	40022000 	.word	0x40022000
 8000c0c:	0c900008 	.word	0x0c900008
 8000c10:	10c00010 	.word	0x10c00010

08000c14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c8c <MX_I2C1_Init+0x78>)
 8000c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c20:	4a1b      	ldr	r2, [pc, #108]	@ (8000c90 <MX_I2C1_Init+0x7c>)
 8000c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c4e:	480e      	ldr	r0, [pc, #56]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c50:	f007 f92a 	bl	8007ea8 <HAL_I2C_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c5a:	f000 ff91 	bl	8001b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4809      	ldr	r0, [pc, #36]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c62:	f009 ffe3 	bl	800ac2c <HAL_I2CEx_ConfigAnalogFilter>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c6c:	f000 ff88 	bl	8001b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c70:	2100      	movs	r1, #0
 8000c72:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <MX_I2C1_Init+0x74>)
 8000c74:	f00a f825 	bl	800acc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c7e:	f000 ff7f 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	24000604 	.word	0x24000604
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	00401959 	.word	0x00401959

08000c94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <MX_I2C2_Init+0x78>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <MX_I2C2_Init+0x7c>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cce:	480e      	ldr	r0, [pc, #56]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cd0:	f007 f8ea 	bl	8007ea8 <HAL_I2C_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000cda:	f000 ff51 	bl	8001b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000ce2:	f009 ffa3 	bl	800ac2c <HAL_I2CEx_ConfigAnalogFilter>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000cec:	f000 ff48 	bl	8001b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_I2C2_Init+0x74>)
 8000cf4:	f009 ffe5 	bl	800acc2 <HAL_I2CEx_ConfigDigitalFilter>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000cfe:	f000 ff3f 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000658 	.word	0x24000658
 8000d0c:	40005800 	.word	0x40005800
 8000d10:	00401959 	.word	0x00401959

08000d14 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_JPEG_Init+0x20>)
 8000d1a:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <MX_JPEG_Init+0x24>)
 8000d1c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_JPEG_Init+0x20>)
 8000d20:	f00a f81c 	bl	800ad5c <HAL_JPEG_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000d2a:	f000 ff29 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2400079c 	.word	0x2400079c
 8000d38:	52003000 	.word	0x52003000

08000d3c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000d40:	4b27      	ldr	r3, [pc, #156]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d42:	4a28      	ldr	r2, [pc, #160]	@ (8000de4 <MX_SPI4_Init+0xa8>)
 8000d44:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d48:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d4c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000d4e:	4b24      	ldr	r3, [pc, #144]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d50:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d54:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d56:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d6a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d6e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d8e:	4b14      	ldr	r3, [pc, #80]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d94:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da2:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000da8:	4b0d      	ldr	r3, [pc, #52]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000db4:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dba:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_SPI4_Init+0xa4>)
 8000dce:	f011 faaf 	bl	8012330 <HAL_SPI_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000dd8:	f000 fed2 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240008cc 	.word	0x240008cc
 8000de4:	40013400 	.word	0x40013400

08000de8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0310 	add.w	r3, r7, #16
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e08:	4a1d      	ldr	r2, [pc, #116]	@ (8000e80 <MX_TIM5_Init+0x98>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 7499998;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <MX_TIM5_Init+0x9c>)
 8000e1c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e2a:	4814      	ldr	r0, [pc, #80]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e2c:	f012 fa2b 	bl	8013286 <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e36:	f000 fea3 	bl	8001b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	4619      	mov	r1, r3
 8000e46:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e48:	f012 fbf4 	bl	8013634 <HAL_TIM_ConfigClockSource>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000e52:	f000 fe95 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	@ (8000e7c <MX_TIM5_Init+0x94>)
 8000e64:	f012 fe4e 	bl	8013b04 <HAL_TIMEx_MasterConfigSynchronization>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000e6e:	f000 fe87 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	3720      	adds	r7, #32
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	240009cc 	.word	0x240009cc
 8000e80:	40000c00 	.word	0x40000c00
 8000e84:	007270de 	.word	0x007270de

08000e88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000e8e:	4a25      	ldr	r2, [pc, #148]	@ (8000f24 <MX_USART1_UART_Init+0x9c>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000e92:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000e94:	4a24      	ldr	r2, [pc, #144]	@ (8000f28 <MX_USART1_UART_Init+0xa0>)
 8000e96:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000eac:	220c      	movs	r2, #12
 8000eae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ed6:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000ed8:	f012 fec0 	bl	8013c5c <HAL_UART_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000ee2:	f000 fe4d 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000eea:	f014 fdda 	bl	8015aa2 <HAL_UARTEx_SetTxFifoThreshold>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000ef4:	f000 fe44 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000efc:	f014 fe0f 	bl	8015b1e <HAL_UARTEx_SetRxFifoThreshold>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000f06:	f000 fe3b 	bl	8001b80 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_USART1_UART_Init+0x98>)
 8000f0c:	f014 fd8e 	bl	8015a2c <HAL_UARTEx_EnableFifoMode>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000f16:	f000 fe33 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000a18 	.word	0x24000a18
 8000f24:	40011000 	.word	0x40011000
 8000f28:	0001b207 	.word	0x0001b207

08000f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f32:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <MX_DMA_Init+0x9c>)
 8000f34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f38:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <MX_DMA_Init+0x9c>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f42:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <MX_DMA_Init+0x9c>)
 8000f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f50:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <MX_DMA_Init+0x9c>)
 8000f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <MX_DMA_Init+0x9c>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f60:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <MX_DMA_Init+0x9c>)
 8000f62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	200b      	movs	r0, #11
 8000f74:	f003 feb3 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f78:	200b      	movs	r0, #11
 8000f7a:	f003 feca 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	200c      	movs	r0, #12
 8000f84:	f003 feab 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f88:	200c      	movs	r0, #12
 8000f8a:	f003 fec2 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	200d      	movs	r0, #13
 8000f94:	f003 fea3 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f98:	200d      	movs	r0, #13
 8000f9a:	f003 feba 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f003 fe9b 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fa8:	200e      	movs	r0, #14
 8000faa:	f003 feb2 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2038      	movs	r0, #56	@ 0x38
 8000fb4:	f003 fe93 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fb8:	2038      	movs	r0, #56	@ 0x38
 8000fba:	f003 feaa 	bl	8004d12 <HAL_NVIC_EnableIRQ>

}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	58024400 	.word	0x58024400

08000fcc <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <MX_MDMA_Init+0x3c>)
 8000fd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <MX_MDMA_Init+0x3c>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000fe2:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_MDMA_Init+0x3c>)
 8000fe4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	207a      	movs	r0, #122	@ 0x7a
 8000ff6:	f003 fe72 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ffa:	207a      	movs	r0, #122	@ 0x7a
 8000ffc:	f003 fe89 	bl	8004d12 <HAL_NVIC_EnableIRQ>

}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400

0800100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	4b4e      	ldr	r3, [pc, #312]	@ (800115c <MX_GPIO_Init+0x150>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	4a4c      	ldr	r2, [pc, #304]	@ (800115c <MX_GPIO_Init+0x150>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001032:	4b4a      	ldr	r3, [pc, #296]	@ (800115c <MX_GPIO_Init+0x150>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001040:	4b46      	ldr	r3, [pc, #280]	@ (800115c <MX_GPIO_Init+0x150>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	4a45      	ldr	r2, [pc, #276]	@ (800115c <MX_GPIO_Init+0x150>)
 8001048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001050:	4b42      	ldr	r3, [pc, #264]	@ (800115c <MX_GPIO_Init+0x150>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b3f      	ldr	r3, [pc, #252]	@ (800115c <MX_GPIO_Init+0x150>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	4a3d      	ldr	r2, [pc, #244]	@ (800115c <MX_GPIO_Init+0x150>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106e:	4b3b      	ldr	r3, [pc, #236]	@ (800115c <MX_GPIO_Init+0x150>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	4b37      	ldr	r3, [pc, #220]	@ (800115c <MX_GPIO_Init+0x150>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	4a36      	ldr	r2, [pc, #216]	@ (800115c <MX_GPIO_Init+0x150>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108c:	4b33      	ldr	r3, [pc, #204]	@ (800115c <MX_GPIO_Init+0x150>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b30      	ldr	r3, [pc, #192]	@ (800115c <MX_GPIO_Init+0x150>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a2e      	ldr	r2, [pc, #184]	@ (800115c <MX_GPIO_Init+0x150>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b2c      	ldr	r3, [pc, #176]	@ (800115c <MX_GPIO_Init+0x150>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2120      	movs	r1, #32
 80010bc:	4828      	ldr	r0, [pc, #160]	@ (8001160 <MX_GPIO_Init+0x154>)
 80010be:	f006 fed9 	bl	8007e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c8:	4826      	ldr	r0, [pc, #152]	@ (8001164 <MX_GPIO_Init+0x158>)
 80010ca:	f006 fed3 	bl	8007e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 80010ce:	2320      	movs	r3, #32
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010da:	2303      	movs	r3, #3
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	481e      	ldr	r0, [pc, #120]	@ (8001160 <MX_GPIO_Init+0x154>)
 80010e6:	f006 fcfd 	bl	8007ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LB_Pin */
  GPIO_InitStruct.Pin = BTN_LB_Pin;
 80010ea:	2320      	movs	r3, #32
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_LB_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	481a      	ldr	r0, [pc, #104]	@ (8001168 <MX_GPIO_Init+0x15c>)
 80010fe:	f006 fcf1 	bl	8007ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RB_Pin */
  GPIO_InitStruct.Pin = BTN_RB_Pin;
 8001102:	2320      	movs	r3, #32
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_RB_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4619      	mov	r1, r3
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <MX_GPIO_Init+0x158>)
 8001116:	f006 fce5 	bl	8007ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LF_Pin BTN_RF_Pin */
  GPIO_InitStruct.Pin = BTN_LF_Pin|BTN_RF_Pin;
 800111a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001124:	2301      	movs	r3, #1
 8001126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4619      	mov	r1, r3
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <MX_GPIO_Init+0x158>)
 8001130:	f006 fcd8 	bl	8007ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 8001134:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_GPIO_Init+0x158>)
 800114e:	f006 fcc9 	bl	8007ae4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	@ 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	58024400 	.word	0x58024400
 8001160:	58021000 	.word	0x58021000
 8001164:	58020800 	.word	0x58020800
 8001168:	58020000 	.word	0x58020000

0800116c <NetworkTimeout>:

/* USER CODE BEGIN 4 */

// Watchdog Fucntions
void NetworkTimeout() {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	if (wdog_network < WDOG_NETWORK_CUTOFF) {
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <NetworkTimeout+0x30>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b03      	cmp	r3, #3
 8001176:	d80f      	bhi.n	8001198 <NetworkTimeout+0x2c>
		// Increment the timeout ctr
		wdog_network++;
 8001178:	4b08      	ldr	r3, [pc, #32]	@ (800119c <NetworkTimeout+0x30>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2da      	uxtb	r2, r3
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <NetworkTimeout+0x30>)
 8001182:	701a      	strb	r2, [r3, #0]

		// A timeout occurs when wdog_network == the Cutoff
		if (wdog_network == WDOG_NETWORK_CUTOFF) {
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <NetworkTimeout+0x30>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b04      	cmp	r3, #4
 800118a:	d105      	bne.n	8001198 <NetworkTimeout+0x2c>
			ST7789_Draw_NOSIG(&hst7789); // Draw the NOSIG symbol
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <NetworkTimeout+0x34>)
 800118e:	f001 feff 	bl	8002f90 <ST7789_Draw_NOSIG>
			st7789_state = 1;			 // Flag LCD as requested
 8001192:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <NetworkTimeout+0x38>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	24000b24 	.word	0x24000b24
 80011a0:	24001474 	.word	0x24001474
 80011a4:	24026c8c 	.word	0x24026c8c

080011a8 <ParsePacket_JPEG_IMAGE>:

//  Scoping Funtions
void ParsePacket_JPEG_IMAGE(uint8_t* packet, uint16_t byte_num) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
	// Data was fully sent
	if (byte_num < jpeg_img_lastRcvPkt && jpeg_state == 0) {
 80011b4:	4b48      	ldr	r3, [pc, #288]	@ (80012d8 <ParsePacket_JPEG_IMAGE+0x130>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	887a      	ldrh	r2, [r7, #2]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d269      	bcs.n	8001292 <ParsePacket_JPEG_IMAGE+0xea>
 80011be:	4b47      	ldr	r3, [pc, #284]	@ (80012dc <ParsePacket_JPEG_IMAGE+0x134>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d165      	bne.n	8001292 <ParsePacket_JPEG_IMAGE+0xea>
		// Start the jpeg decode
		jpeg_size = jpeg_img_lastRcvPkt*PKT_DATASIZE + JPEG_HEADERSIZE;
 80011c6:	4b44      	ldr	r3, [pc, #272]	@ (80012d8 <ParsePacket_JPEG_IMAGE+0x130>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	019b      	lsls	r3, r3, #6
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b42      	ldr	r3, [pc, #264]	@ (80012e0 <ParsePacket_JPEG_IMAGE+0x138>)
 80011d6:	801a      	strh	r2, [r3, #0]
		HAL_StatusTypeDef ret;
		if (jpeg_currentraw)
 80011d8:	4b42      	ldr	r3, [pc, #264]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x13c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d01c      	beq.n	800121a <ParsePacket_JPEG_IMAGE+0x72>
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 80011e0:	4b3f      	ldr	r3, [pc, #252]	@ (80012e0 <ParsePacket_JPEG_IMAGE+0x138>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x140>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <ParsePacket_JPEG_IMAGE+0x144>)
 80011ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4b3c      	ldr	r3, [pc, #240]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x140>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4b3d      	ldr	r3, [pc, #244]	@ (80012f0 <ParsePacket_JPEG_IMAGE+0x148>)
 80011fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	019b      	lsls	r3, r3, #6
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	4b3a      	ldr	r3, [pc, #232]	@ (80012f4 <ParsePacket_JPEG_IMAGE+0x14c>)
 800120a:	4602      	mov	r2, r0
 800120c:	493a      	ldr	r1, [pc, #232]	@ (80012f8 <ParsePacket_JPEG_IMAGE+0x150>)
 800120e:	483b      	ldr	r0, [pc, #236]	@ (80012fc <ParsePacket_JPEG_IMAGE+0x154>)
 8001210:	f009 febb 	bl	800af8a <HAL_JPEG_Decode_DMA>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e01b      	b.n	8001252 <ParsePacket_JPEG_IMAGE+0xaa>
		else {
			ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality]*64);
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <ParsePacket_JPEG_IMAGE+0x138>)
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	4b31      	ldr	r3, [pc, #196]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x140>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b31      	ldr	r3, [pc, #196]	@ (80012ec <ParsePacket_JPEG_IMAGE+0x144>)
 8001228:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800122c:	461a      	mov	r2, r3
 800122e:	4b2e      	ldr	r3, [pc, #184]	@ (80012e8 <ParsePacket_JPEG_IMAGE+0x140>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	4619      	mov	r1, r3
 8001234:	4b2e      	ldr	r3, [pc, #184]	@ (80012f0 <ParsePacket_JPEG_IMAGE+0x148>)
 8001236:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800123a:	fb02 f303 	mul.w	r3, r2, r3
 800123e:	019b      	lsls	r3, r3, #6
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	4b2c      	ldr	r3, [pc, #176]	@ (80012f4 <ParsePacket_JPEG_IMAGE+0x14c>)
 8001244:	4602      	mov	r2, r0
 8001246:	492e      	ldr	r1, [pc, #184]	@ (8001300 <ParsePacket_JPEG_IMAGE+0x158>)
 8001248:	482c      	ldr	r0, [pc, #176]	@ (80012fc <ParsePacket_JPEG_IMAGE+0x154>)
 800124a:	f009 fe9e 	bl	800af8a <HAL_JPEG_Decode_DMA>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
		}
		jpeg_currentraw = !jpeg_currentraw;
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	bf0c      	ite	eq
 800125a:	2301      	moveq	r3, #1
 800125c:	2300      	movne	r3, #0
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x13c>)
 8001264:	701a      	strb	r2, [r3, #0]

		if (ret) {
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00f      	beq.n	800128c <ParsePacket_JPEG_IMAGE+0xe4>
			sprintf(ssd_msg, " JPEG FAIL %d", ret);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	461a      	mov	r2, r3
 8001270:	4924      	ldr	r1, [pc, #144]	@ (8001304 <ParsePacket_JPEG_IMAGE+0x15c>)
 8001272:	4825      	ldr	r0, [pc, #148]	@ (8001308 <ParsePacket_JPEG_IMAGE+0x160>)
 8001274:	f01a f880 	bl	801b378 <siprintf>
			WriteDebug(ssd_msg, strlen(ssd_msg));
 8001278:	4823      	ldr	r0, [pc, #140]	@ (8001308 <ParsePacket_JPEG_IMAGE+0x160>)
 800127a:	f7ff f881 	bl	8000380 <strlen>
 800127e:	4603      	mov	r3, r0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4619      	mov	r1, r3
 8001284:	4820      	ldr	r0, [pc, #128]	@ (8001308 <ParsePacket_JPEG_IMAGE+0x160>)
 8001286:	f000 fc29 	bl	8001adc <WriteDebug>
 800128a:	e002      	b.n	8001292 <ParsePacket_JPEG_IMAGE+0xea>
		} else {
			jpeg_state = 1;	// Flag JPEG as busy
 800128c:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <ParsePacket_JPEG_IMAGE+0x134>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
		}
	}
	jpeg_img_lastRcvPkt = byte_num;
 8001292:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <ParsePacket_JPEG_IMAGE+0x130>)
 8001294:	887b      	ldrh	r3, [r7, #2]
 8001296:	8013      	strh	r3, [r2, #0]

	// fill in the received data
	if (jpeg_currentraw)
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <ParsePacket_JPEG_IMAGE+0x13c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00b      	beq.n	80012b8 <ParsePacket_JPEG_IMAGE+0x110>
		memcpy(jpeg_raw1 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	019b      	lsls	r3, r3, #6
 80012a4:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80012a8:	4a13      	ldr	r2, [pc, #76]	@ (80012f8 <ParsePacket_JPEG_IMAGE+0x150>)
 80012aa:	4413      	add	r3, r2
 80012ac:	2240      	movs	r2, #64	@ 0x40
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f01a f95e 	bl	801b572 <memcpy>
	else {
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
	}
}
 80012b6:	e00a      	b.n	80012ce <ParsePacket_JPEG_IMAGE+0x126>
		memcpy(jpeg_raw2 + JPEG_HEADERSIZE + byte_num * 64, packet, 64);
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	019b      	lsls	r3, r3, #6
 80012bc:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 80012c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001300 <ParsePacket_JPEG_IMAGE+0x158>)
 80012c2:	4413      	add	r3, r2
 80012c4:	2240      	movs	r2, #64	@ 0x40
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f01a f952 	bl	801b572 <memcpy>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	24026d00 	.word	0x24026d00
 80012dc:	24047292 	.word	0x24047292
 80012e0:	24047290 	.word	0x24047290
 80012e4:	24026d0d 	.word	0x24026d0d
 80012e8:	24026d0c 	.word	0x24026d0c
 80012ec:	2400001c 	.word	0x2400001c
 80012f0:	24000024 	.word	0x24000024
 80012f4:	2403c610 	.word	0x2403c610
 80012f8:	24026d10 	.word	0x24026d10
 80012fc:	2400079c 	.word	0x2400079c
 8001300:	24031990 	.word	0x24031990
 8001304:	0801d460 	.word	0x0801d460
 8001308:	2400136c 	.word	0x2400136c

0800130c <ParsePacket_JPEG_HEADER>:

void ParsePacket_JPEG_HEADER(uint8_t* packet, uint16_t byte_num) {
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	uint16_t byte_num_conv = (0xFFFF - byte_num) - 1;
 8001318:	887b      	ldrh	r3, [r7, #2]
 800131a:	f1c3 23ff 	rsb	r3, r3, #4278255360	@ 0xff00ff00
 800131e:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 8001322:	33fe      	adds	r3, #254	@ 0xfe
 8001324:	81bb      	strh	r3, [r7, #12]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e01e      	b.n	800136a <ParsePacket_JPEG_HEADER+0x5e>
		// Bounds check on last packet
		if (byte_num*PKT_DATASIZE + i >= JPEG_HEADERSIZE)
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	019a      	lsls	r2, r3, #6
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	4413      	add	r3, r2
 8001334:	f240 220d 	movw	r2, #525	@ 0x20d
 8001338:	4293      	cmp	r3, r2
 800133a:	dc1a      	bgt.n	8001372 <ParsePacket_JPEG_HEADER+0x66>
			return;

		// Update both buffers' headers
		jpeg_raw1[byte_num*PKT_DATASIZE + i] = packet[i];
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	441a      	add	r2, r3
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	0199      	lsls	r1, r3, #6
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	440b      	add	r3, r1
 800134a:	7811      	ldrb	r1, [r2, #0]
 800134c:	4a0c      	ldr	r2, [pc, #48]	@ (8001380 <ParsePacket_JPEG_HEADER+0x74>)
 800134e:	54d1      	strb	r1, [r2, r3]
		jpeg_raw2[byte_num*PKT_DATASIZE + i] = packet[i];
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	441a      	add	r2, r3
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	0199      	lsls	r1, r3, #6
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	440b      	add	r3, r1
 800135e:	7811      	ldrb	r1, [r2, #0]
 8001360:	4a08      	ldr	r2, [pc, #32]	@ (8001384 <ParsePacket_JPEG_HEADER+0x78>)
 8001362:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < PKT_DATASIZE; i++) {
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b3f      	cmp	r3, #63	@ 0x3f
 800136e:	d9dd      	bls.n	800132c <ParsePacket_JPEG_HEADER+0x20>
 8001370:	e000      	b.n	8001374 <ParsePacket_JPEG_HEADER+0x68>
			return;
 8001372:	bf00      	nop
	}
}
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	24026d10 	.word	0x24026d10
 8001384:	24031990 	.word	0x24031990

08001388 <SCH_XBeeRX>:

// ------------------------------------------------------------ SCHDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
	// If there's a packet, process it
	// If the packet is good, push it to the screen
	uint16_t rx_byte;
	uint8_t *rx_packet;
	uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 800138e:	1d3a      	adds	r2, r7, #4
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4831      	ldr	r0, [pc, #196]	@ (800145c <SCH_XBeeRX+0xd4>)
 8001396:	f015 fff9 	bl	801738c <XBEE_RXPacket>
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	if (ret == 0) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d158      	bne.n	8001456 <SCH_XBeeRX+0xce>
		// Network is active, reset the watchdog
		wdog_network = 0;
 80013a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001460 <SCH_XBeeRX+0xd8>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

		// Packet contains telemetry
		if (rx_byte == 0xFFFF) {
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d04f      	beq.n	8001454 <SCH_XBeeRX+0xcc>
			// TODO: Parse Telemetry
			return;
		}

		// Packet contains JPEG HEADER data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte > 0xFFF0) {
 80013b4:	2000      	movs	r0, #0
 80013b6:	f000 faaf 	bl	8001918 <GetState>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d10b      	bne.n	80013d8 <SCH_XBeeRX+0x50>
 80013c0:	88bb      	ldrh	r3, [r7, #4]
 80013c2:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d906      	bls.n	80013d8 <SCH_XBeeRX+0x50>
			ParsePacket_JPEG_HEADER(rx_packet, rx_byte);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	88ba      	ldrh	r2, [r7, #4]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff9b 	bl	800130c <ParsePacket_JPEG_HEADER>
			return;
 80013d6:	e03e      	b.n	8001456 <SCH_XBeeRX+0xce>
		}

		// Packet contains JPEG IMAGE data
		if (GetState(OP_CAMERA_ENCODING) == 0 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 80013d8:	2000      	movs	r0, #0
 80013da:	f000 fa9d 	bl	8001918 <GetState>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d118      	bne.n	8001416 <SCH_XBeeRX+0x8e>
 80013e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <SCH_XBeeRX+0xdc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <SCH_XBeeRX+0xe0>)
 80013ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <SCH_XBeeRX+0xdc>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <SCH_XBeeRX+0xe4>)
 80013fa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013fe:	fb02 f303 	mul.w	r3, r2, r3
 8001402:	88ba      	ldrh	r2, [r7, #4]
 8001404:	4293      	cmp	r3, r2
 8001406:	db06      	blt.n	8001416 <SCH_XBeeRX+0x8e>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	88ba      	ldrh	r2, [r7, #4]
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff feca 	bl	80011a8 <ParsePacket_JPEG_IMAGE>
			return;
 8001414:	e01f      	b.n	8001456 <SCH_XBeeRX+0xce>
		}

		// Packet contains RAW image data
		if (GetState(OP_CAMERA_ENCODING) == 1 && rx_byte < jpeg_mcu_widths[jpeg_quality]*jpeg_mcu_heights[jpeg_quality] + 1) {
 8001416:	2000      	movs	r0, #0
 8001418:	f000 fa7e 	bl	8001918 <GetState>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d119      	bne.n	8001456 <SCH_XBeeRX+0xce>
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <SCH_XBeeRX+0xdc>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	461a      	mov	r2, r3
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <SCH_XBeeRX+0xe0>)
 800142a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800142e:	461a      	mov	r2, r3
 8001430:	4b0c      	ldr	r3, [pc, #48]	@ (8001464 <SCH_XBeeRX+0xdc>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <SCH_XBeeRX+0xe4>)
 8001438:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	88ba      	ldrh	r2, [r7, #4]
 8001442:	4293      	cmp	r3, r2
 8001444:	db07      	blt.n	8001456 <SCH_XBeeRX+0xce>
			ParsePacket_JPEG_IMAGE(rx_packet, rx_byte);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff feab 	bl	80011a8 <ParsePacket_JPEG_IMAGE>
			return;
 8001452:	e000      	b.n	8001456 <SCH_XBeeRX+0xce>
			return;
 8001454:	bf00      	nop
		}

		// TODO: Parse JPEG Header data
	}
}
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	24026cdc 	.word	0x24026cdc
 8001460:	24000b24 	.word	0x24000b24
 8001464:	24026d0c 	.word	0x24026d0c
 8001468:	2400001c 	.word	0x2400001c
 800146c:	24000024 	.word	0x24000024

08001470 <SCH_XBeeTX>:

void SCH_XBeeTX() {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_tx);
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <SCH_XBeeTX+0x78>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 fa34 	bl	80018e8 <DeltaTime>
 8001480:	6078      	str	r0, [r7, #4]
	if (delta_t < SCH_MS_TX) return;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b63      	cmp	r3, #99	@ 0x63
 8001486:	d928      	bls.n	80014da <SCH_XBeeTX+0x6a>

	// Set the tank controls just before send, minimize latency
	hmenu.state_packet[RESERVE_LTRACK_MAG] = slider_magnitude[0];
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <SCH_XBeeTX+0x7c>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	3307      	adds	r3, #7
 800148e:	4a18      	ldr	r2, [pc, #96]	@ (80014f0 <SCH_XBeeTX+0x80>)
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_MAG] = slider_magnitude[1];
 8001494:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <SCH_XBeeTX+0x7c>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	3308      	adds	r3, #8
 800149a:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <SCH_XBeeTX+0x80>)
 800149c:	7852      	ldrb	r2, [r2, #1]
 800149e:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_LTRACK_DIR] = slider_direction[0];
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <SCH_XBeeTX+0x7c>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	3309      	adds	r3, #9
 80014a6:	4a13      	ldr	r2, [pc, #76]	@ (80014f4 <SCH_XBeeTX+0x84>)
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	701a      	strb	r2, [r3, #0]
	hmenu.state_packet[RESERVE_RTRACK_DIR] = slider_direction[1];
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <SCH_XBeeTX+0x7c>)
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	330a      	adds	r3, #10
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <SCH_XBeeTX+0x84>)
 80014b4:	7852      	ldrb	r2, [r2, #1]
 80014b6:	701a      	strb	r2, [r3, #0]

	if (XBEE_TXPacket(&hxbee, hmenu.state_packet, 0xFFFF))  {
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <SCH_XBeeTX+0x7c>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	4619      	mov	r1, r3
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <SCH_XBeeTX+0x88>)
 80014c4:	f015 ffd2 	bl	801746c <XBEE_TXPacket>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d107      	bne.n	80014de <SCH_XBeeTX+0x6e>
		// Line busy, retry ASAP
		return;
	}

	// Update the timer for the next DT period
	sch_tim_tx = HAL_GetTick();
 80014ce:	f002 f83d 	bl	800354c <HAL_GetTick>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <SCH_XBeeTX+0x78>)
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	e002      	b.n	80014e0 <SCH_XBeeTX+0x70>
	if (delta_t < SCH_MS_TX) return;
 80014da:	bf00      	nop
 80014dc:	e000      	b.n	80014e0 <SCH_XBeeTX+0x70>
		return;
 80014de:	bf00      	nop
}
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	24000b28 	.word	0x24000b28
 80014ec:	24001434 	.word	0x24001434
 80014f0:	24026cbc 	.word	0x24026cbc
 80014f4:	24026cc0 	.word	0x24026cc0
 80014f8:	24026cdc 	.word	0x24026cdc

080014fc <SCH_PowerMon>:

void SCH_PowerMon() {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	STC3100_Get(&hstc);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <SCH_PowerMon+0x10>)
 8001502:	f001 ff84 	bl	800340e <STC3100_Get>

	// TODO: Update Menu

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	24026cc4 	.word	0x24026cc4

08001510 <SCH_ImageDecode>:

void SCH_ImageDecode() {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
	if (jpeg_state != 2) return;
 8001516:	4b9c      	ldr	r3, [pc, #624]	@ (8001788 <SCH_ImageDecode+0x278>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	f040 8126 	bne.w	800176c <SCH_ImageDecode+0x25c>
		// Loop through every mcu block

		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 8001520:	2300      	movs	r3, #0
 8001522:	83fb      	strh	r3, [r7, #30]
 8001524:	e0b7      	b.n	8001696 <SCH_ImageDecode+0x186>
			uint16_t mcu_idx = current_mcu_y*jpeg_mcu_widths[jpeg_quality] + mcu_x;
 8001526:	4b99      	ldr	r3, [pc, #612]	@ (800178c <SCH_ImageDecode+0x27c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b98      	ldr	r3, [pc, #608]	@ (8001790 <SCH_ImageDecode+0x280>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	4b98      	ldr	r3, [pc, #608]	@ (8001794 <SCH_ImageDecode+0x284>)
 8001534:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001538:	fb12 f303 	smulbb	r3, r2, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	8bfb      	ldrh	r3, [r7, #30]
 8001540:	4413      	add	r3, r2
 8001542:	82bb      	strh	r3, [r7, #20]

			for (uint16_t y = 0; y < 8; y++) {
 8001544:	2300      	movs	r3, #0
 8001546:	83bb      	strh	r3, [r7, #28]
 8001548:	e09e      	b.n	8001688 <SCH_ImageDecode+0x178>
				for (uint16_t x = 0; x < 8; x++) {
 800154a:	2300      	movs	r3, #0
 800154c:	837b      	strh	r3, [r7, #26]
 800154e:	e094      	b.n	800167a <SCH_ImageDecode+0x16a>
					// Bounds check
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 8001550:	8bfb      	ldrh	r3, [r7, #30]
 8001552:	00da      	lsls	r2, r3, #3
 8001554:	8b7b      	ldrh	r3, [r7, #26]
 8001556:	4413      	add	r3, r2
 8001558:	2bf0      	cmp	r3, #240	@ 0xf0
 800155a:	f300 8086 	bgt.w	800166a <SCH_ImageDecode+0x15a>
					// COLOR FORMAT
					// |RRRRR GGG|GGG BBBBB|

					uint32_t pix_x = (mcu_x*8 + x)*jpeg_scaleFactors[jpeg_quality];
 800155e:	8bfb      	ldrh	r3, [r7, #30]
 8001560:	00da      	lsls	r2, r3, #3
 8001562:	8b7b      	ldrh	r3, [r7, #26]
 8001564:	4413      	add	r3, r2
 8001566:	4a8a      	ldr	r2, [pc, #552]	@ (8001790 <SCH_ImageDecode+0x280>)
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	4611      	mov	r1, r2
 800156c:	4a8a      	ldr	r2, [pc, #552]	@ (8001798 <SCH_ImageDecode+0x288>)
 800156e:	5c52      	ldrb	r2, [r2, r1]
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	613b      	str	r3, [r7, #16]
					if (pix_x >= LCD_WIDTH-1) continue;
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2bee      	cmp	r3, #238	@ 0xee
 800157a:	d878      	bhi.n	800166e <SCH_ImageDecode+0x15e>
					pix_x = LCD_WIDTH - pix_x - 1;
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001582:	613b      	str	r3, [r7, #16]
					uint32_t pix_y = (current_mcu_y*8 + y)*jpeg_scaleFactors[jpeg_quality];
 8001584:	4b81      	ldr	r3, [pc, #516]	@ (800178c <SCH_ImageDecode+0x27c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	00da      	lsls	r2, r3, #3
 800158a:	8bbb      	ldrh	r3, [r7, #28]
 800158c:	4413      	add	r3, r2
 800158e:	4a80      	ldr	r2, [pc, #512]	@ (8001790 <SCH_ImageDecode+0x280>)
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4611      	mov	r1, r2
 8001594:	4a80      	ldr	r2, [pc, #512]	@ (8001798 <SCH_ImageDecode+0x288>)
 8001596:	5c52      	ldrb	r2, [r2, r1]
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	60fb      	str	r3, [r7, #12]
					if (pix_y >= LCD_HEIGHT-2) continue;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80015a4:	d265      	bcs.n	8001672 <SCH_ImageDecode+0x162>

					uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 80015a6:	8abb      	ldrh	r3, [r7, #20]
 80015a8:	00da      	lsls	r2, r3, #3
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	00da      	lsls	r2, r3, #3
 80015b0:	8b7b      	ldrh	r3, [r7, #26]
 80015b2:	4413      	add	r3, r2
 80015b4:	4a79      	ldr	r2, [pc, #484]	@ (800179c <SCH_ImageDecode+0x28c>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	72fb      	strb	r3, [r7, #11]
					uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 80015ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80015be:	f023 0307 	bic.w	r3, r3, #7
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	4313      	orrs	r3, r2
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	72bb      	strb	r3, [r7, #10]
					uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	08db      	lsrs	r3, r3, #3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	b25a      	sxtb	r2, r3
 80015da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	f023 031f 	bic.w	r3, r3, #31
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b25b      	sxtb	r3, r3
 80015ec:	727b      	strb	r3, [r7, #9]

					// TODO: Speed this up as much as possible, even if it means skipping lines
					// Loop through the pixels in a box
					uint8_t perfScaleFac = jpeg_scaleFactors[jpeg_quality];
 80015ee:	4b68      	ldr	r3, [pc, #416]	@ (8001790 <SCH_ImageDecode+0x280>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b68      	ldr	r3, [pc, #416]	@ (8001798 <SCH_ImageDecode+0x288>)
 80015f6:	5c9b      	ldrb	r3, [r3, r2]
 80015f8:	767b      	strb	r3, [r7, #25]
					if (perfScaleFac == 0)
 80015fa:	7e7b      	ldrb	r3, [r7, #25]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <SCH_ImageDecode+0xf4>
						perfScaleFac = 1;
 8001600:	2301      	movs	r3, #1
 8001602:	767b      	strb	r3, [r7, #25]

					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 8001604:	2300      	movs	r3, #0
 8001606:	763b      	strb	r3, [r7, #24]
 8001608:	e02a      	b.n	8001660 <SCH_ImageDecode+0x150>
						uint32_t cached_yOff = (pix_y+yOff)*LCD_WIDTH*2;	// Cache the Y offset so we don't compute it every loop
 800160a:	7e3a      	ldrb	r2, [r7, #24]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	441a      	add	r2, r3
 8001610:	4613      	mov	r3, r2
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	1a9b      	subs	r3, r3, r2
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	607b      	str	r3, [r7, #4]

						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
 800161e:	e018      	b.n	8001652 <SCH_ImageDecode+0x142>
							uint32_t cached_xOff = (pix_x+xOff)*2;
 8001620:	7dfa      	ldrb	r2, [r7, #23]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4413      	add	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	603b      	str	r3, [r7, #0]

							hst7789.vram[cached_yOff + cached_xOff    ] = msb;
 800162a:	4b5d      	ldr	r3, [pc, #372]	@ (80017a0 <SCH_ImageDecode+0x290>)
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	440b      	add	r3, r1
 8001634:	4413      	add	r3, r2
 8001636:	7aba      	ldrb	r2, [r7, #10]
 8001638:	701a      	strb	r2, [r3, #0]
							hst7789.vram[cached_yOff + cached_xOff + 1] = lsb;
 800163a:	4b59      	ldr	r3, [pc, #356]	@ (80017a0 <SCH_ImageDecode+0x290>)
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	440b      	add	r3, r1
 8001644:	3301      	adds	r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	7a7a      	ldrb	r2, [r7, #9]
 800164a:	701a      	strb	r2, [r3, #0]
						for (uint8_t xOff = 0; xOff < perfScaleFac; xOff++) {
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	3301      	adds	r3, #1
 8001650:	75fb      	strb	r3, [r7, #23]
 8001652:	7dfa      	ldrb	r2, [r7, #23]
 8001654:	7e7b      	ldrb	r3, [r7, #25]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3e2      	bcc.n	8001620 <SCH_ImageDecode+0x110>
					for (uint8_t yOff = 0; yOff < perfScaleFac; yOff++) {
 800165a:	7e3b      	ldrb	r3, [r7, #24]
 800165c:	3301      	adds	r3, #1
 800165e:	763b      	strb	r3, [r7, #24]
 8001660:	7e3a      	ldrb	r2, [r7, #24]
 8001662:	7e7b      	ldrb	r3, [r7, #25]
 8001664:	429a      	cmp	r2, r3
 8001666:	d3d0      	bcc.n	800160a <SCH_ImageDecode+0xfa>
 8001668:	e004      	b.n	8001674 <SCH_ImageDecode+0x164>
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 800166a:	bf00      	nop
 800166c:	e002      	b.n	8001674 <SCH_ImageDecode+0x164>
					if (pix_x >= LCD_WIDTH-1) continue;
 800166e:	bf00      	nop
 8001670:	e000      	b.n	8001674 <SCH_ImageDecode+0x164>
					if (pix_y >= LCD_HEIGHT-2) continue;
 8001672:	bf00      	nop
				for (uint16_t x = 0; x < 8; x++) {
 8001674:	8b7b      	ldrh	r3, [r7, #26]
 8001676:	3301      	adds	r3, #1
 8001678:	837b      	strh	r3, [r7, #26]
 800167a:	8b7b      	ldrh	r3, [r7, #26]
 800167c:	2b07      	cmp	r3, #7
 800167e:	f67f af67 	bls.w	8001550 <SCH_ImageDecode+0x40>
			for (uint16_t y = 0; y < 8; y++) {
 8001682:	8bbb      	ldrh	r3, [r7, #28]
 8001684:	3301      	adds	r3, #1
 8001686:	83bb      	strh	r3, [r7, #28]
 8001688:	8bbb      	ldrh	r3, [r7, #28]
 800168a:	2b07      	cmp	r3, #7
 800168c:	f67f af5d 	bls.w	800154a <SCH_ImageDecode+0x3a>
		for (uint16_t mcu_x = 0; mcu_x < jpeg_mcu_widths[jpeg_quality]; mcu_x++) {
 8001690:	8bfb      	ldrh	r3, [r7, #30]
 8001692:	3301      	adds	r3, #1
 8001694:	83fb      	strh	r3, [r7, #30]
 8001696:	4b3e      	ldr	r3, [pc, #248]	@ (8001790 <SCH_ImageDecode+0x280>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b3d      	ldr	r3, [pc, #244]	@ (8001794 <SCH_ImageDecode+0x284>)
 800169e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016a2:	8bfa      	ldrh	r2, [r7, #30]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f4ff af3e 	bcc.w	8001526 <SCH_ImageDecode+0x16>
					}
				}
			}
		}

		current_mcu_y++;
 80016aa:	4b38      	ldr	r3, [pc, #224]	@ (800178c <SCH_ImageDecode+0x27c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b36      	ldr	r3, [pc, #216]	@ (800178c <SCH_ImageDecode+0x27c>)
 80016b4:	701a      	strb	r2, [r3, #0]

		if (current_mcu_y >= jpeg_mcu_heights[jpeg_quality]) {
 80016b6:	4b35      	ldr	r3, [pc, #212]	@ (800178c <SCH_ImageDecode+0x27c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <SCH_ImageDecode+0x280>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4b38      	ldr	r3, [pc, #224]	@ (80017a4 <SCH_ImageDecode+0x294>)
 80016c4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d350      	bcc.n	800176e <SCH_ImageDecode+0x25e>
			current_mcu_y = 0;	// Reset the V-MCU counter
 80016cc:	4b2f      	ldr	r3, [pc, #188]	@ (800178c <SCH_ImageDecode+0x27c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]

			avg_ms_imgRecv *= 0.8;
 80016d2:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <SCH_ImageDecode+0x298>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016de:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001778 <SCH_ImageDecode+0x268>
 80016e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016ea:	ee17 2a90 	vmov	r2, s15
 80016ee:	4b2e      	ldr	r3, [pc, #184]	@ (80017a8 <SCH_ImageDecode+0x298>)
 80016f0:	601a      	str	r2, [r3, #0]
			avg_ms_imgRecv += DeltaTime(tim_ms_imgRecv)*0.2;	// Get the time since last frame
 80016f2:	4b2e      	ldr	r3, [pc, #184]	@ (80017ac <SCH_ImageDecode+0x29c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f8f6 	bl	80018e8 <DeltaTime>
 80016fc:	ee07 0a90 	vmov	s15, r0
 8001700:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001704:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8001780 <SCH_ImageDecode+0x270>
 8001708:	ee27 6b06 	vmul.f64	d6, d7, d6
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <SCH_ImageDecode+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001718:	ee36 7b07 	vadd.f64	d7, d6, d7
 800171c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001720:	ee17 2a90 	vmov	r2, s15
 8001724:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <SCH_ImageDecode+0x298>)
 8001726:	601a      	str	r2, [r3, #0]
			tim_ms_imgRecv = HAL_GetTick();						// start the frame-timer
 8001728:	f001 ff10 	bl	800354c <HAL_GetTick>
 800172c:	4603      	mov	r3, r0
 800172e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ac <SCH_ImageDecode+0x29c>)
 8001730:	6013      	str	r3, [r2, #0]

			// Plaster the FPS on top of VRAM
			if (!GetState(OP_CAMERA_FRAMETIME))
 8001732:	2002      	movs	r0, #2
 8001734:	f000 f8f0 	bl	8001918 <GetState>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d105      	bne.n	800174a <SCH_ImageDecode+0x23a>
				ST7789_Draw_DATA(&hst7789, avg_ms_imgRecv);
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <SCH_ImageDecode+0x298>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4619      	mov	r1, r3
 8001744:	4816      	ldr	r0, [pc, #88]	@ (80017a0 <SCH_ImageDecode+0x290>)
 8001746:	f001 fcbb 	bl	80030c0 <ST7789_Draw_DATA>

			jpeg_state = 0;		// Flag JPEG as idle
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <SCH_ImageDecode+0x278>)
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
			st7789_state = 1;	// Flag LCD as requested
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <SCH_ImageDecode+0x2a0>)
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]

			st_interlacing = !st_interlacing; // Toggle interlacing
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <SCH_ImageDecode+0x2a4>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	bf0c      	ite	eq
 800175e:	2301      	moveq	r3, #1
 8001760:	2300      	movne	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	461a      	mov	r2, r3
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <SCH_ImageDecode+0x2a4>)
 8001768:	701a      	strb	r2, [r3, #0]
 800176a:	e000      	b.n	800176e <SCH_ImageDecode+0x25e>
	if (jpeg_state != 2) return;
 800176c:	bf00      	nop
		}
}
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	f3af 8000 	nop.w
 8001778:	9999999a 	.word	0x9999999a
 800177c:	3fe99999 	.word	0x3fe99999
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fc99999 	.word	0x3fc99999
 8001788:	24047292 	.word	0x24047292
 800178c:	24047293 	.word	0x24047293
 8001790:	24026d0c 	.word	0x24026d0c
 8001794:	2400001c 	.word	0x2400001c
 8001798:	2400002c 	.word	0x2400002c
 800179c:	2403c610 	.word	0x2403c610
 80017a0:	24001474 	.word	0x24001474
 80017a4:	24000024 	.word	0x24000024
 80017a8:	24026d04 	.word	0x24026d04
 80017ac:	24026d08 	.word	0x24026d08
 80017b0:	24026c8c 	.word	0x24026c8c
 80017b4:	24026c8d 	.word	0x24026c8d

080017b8 <SCH_LCDUpdate>:
	// Update the screens
	SSD1306_Update(&hssd1);
	SSD1306_Update(&hssd2);
}

void SCH_LCDUpdate() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// Update the displays
	if (hst7789.spi_state == 0 && st7789_state == 1) {
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <SCH_LCDUpdate+0x24>)
 80017be:	791b      	ldrb	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <SCH_LCDUpdate+0x20>
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SCH_LCDUpdate+0x28>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <SCH_LCDUpdate+0x20>
		ST7789_UpdateAutomatic(&hst7789);
 80017cc:	4803      	ldr	r0, [pc, #12]	@ (80017dc <SCH_LCDUpdate+0x24>)
 80017ce:	f001 fbb6 	bl	8002f3e <ST7789_UpdateAutomatic>
		st7789_state = 0;
 80017d2:	4b03      	ldr	r3, [pc, #12]	@ (80017e0 <SCH_LCDUpdate+0x28>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
	}
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	24001474 	.word	0x24001474
 80017e0:	24026c8c 	.word	0x24026c8c

080017e4 <SCH_GetInputs>:

void SCH_GetInputs() {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 80017ea:	2300      	movs	r3, #0
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	e041      	b.n	8001874 <SCH_GetInputs+0x90>
		// Debounce timer
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	4a35      	ldr	r2, [pc, #212]	@ (80018c8 <SCH_GetInputs+0xe4>)
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f875 	bl	80018e8 <DeltaTime>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b13      	cmp	r3, #19
 8001802:	d933      	bls.n	800186c <SCH_GetInputs+0x88>

		// Get input
		uint8_t i_new = !HAL_GPIO_ReadPin(i_ports[i], i_pins[i]);
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4a31      	ldr	r2, [pc, #196]	@ (80018cc <SCH_GetInputs+0xe8>)
 8001808:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	4930      	ldr	r1, [pc, #192]	@ (80018d0 <SCH_GetInputs+0xec>)
 8001810:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001814:	4619      	mov	r1, r3
 8001816:	4610      	mov	r0, r2
 8001818:	f006 fb14 	bl	8007e44 <HAL_GPIO_ReadPin>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf0c      	ite	eq
 8001822:	2301      	moveq	r3, #1
 8001824:	2300      	movne	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	71bb      	strb	r3, [r7, #6]

		// Update debounce timer
		if (i_new != istate_hold[i])
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4a29      	ldr	r2, [pc, #164]	@ (80018d4 <SCH_GetInputs+0xf0>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	79ba      	ldrb	r2, [r7, #6]
 8001832:	429a      	cmp	r2, r3
 8001834:	d006      	beq.n	8001844 <SCH_GetInputs+0x60>
			istate_time[i] = HAL_GetTick();
 8001836:	79fc      	ldrb	r4, [r7, #7]
 8001838:	f001 fe88 	bl	800354c <HAL_GetTick>
 800183c:	4603      	mov	r3, r0
 800183e:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <SCH_GetInputs+0xe4>)
 8001840:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		istate_pressed[i] = i_new && !istate_hold[i];	// Just pressed
 8001844:	79bb      	ldrb	r3, [r7, #6]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d006      	beq.n	8001858 <SCH_GetInputs+0x74>
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <SCH_GetInputs+0xf0>)
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <SCH_GetInputs+0x74>
 8001854:	2201      	movs	r2, #1
 8001856:	e000      	b.n	800185a <SCH_GetInputs+0x76>
 8001858:	2200      	movs	r2, #0
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	b2d1      	uxtb	r1, r2
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <SCH_GetInputs+0xf4>)
 8001860:	54d1      	strb	r1, [r2, r3]
		istate_hold[i] = i_new;							// Update sotred val
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	491b      	ldr	r1, [pc, #108]	@ (80018d4 <SCH_GetInputs+0xf0>)
 8001866:	79ba      	ldrb	r2, [r7, #6]
 8001868:	54ca      	strb	r2, [r1, r3]
 800186a:	e000      	b.n	800186e <SCH_GetInputs+0x8a>
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 800186c:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++) {
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	3301      	adds	r3, #1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d9ba      	bls.n	80017f0 <SCH_GetInputs+0xc>
//			test_vals[i]++;
//		}
	}

	// Update the menu state
	MENU_ParseInput(&hmenu, istate_pressed);
 800187a:	4917      	ldr	r1, [pc, #92]	@ (80018d8 <SCH_GetInputs+0xf4>)
 800187c:	4817      	ldr	r0, [pc, #92]	@ (80018dc <SCH_GetInputs+0xf8>)
 800187e:	f016 f9c7 	bl	8017c10 <MENU_ParseInput>
	istate_pressed[0] = 0;
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <SCH_GetInputs+0xf4>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
	istate_pressed[1] = 0;
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <SCH_GetInputs+0xf4>)
 800188a:	2200      	movs	r2, #0
 800188c:	705a      	strb	r2, [r3, #1]
	istate_pressed[2] = 0;
 800188e:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <SCH_GetInputs+0xf4>)
 8001890:	2200      	movs	r2, #0
 8001892:	709a      	strb	r2, [r3, #2]
	istate_pressed[3] = 0;
 8001894:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <SCH_GetInputs+0xf4>)
 8001896:	2200      	movs	r2, #0
 8001898:	70da      	strb	r2, [r3, #3]

	// Update the JPEG settings
	if (jpeg_quality != GetState(OP_CAMERA_QUALITY)) {
 800189a:	2001      	movs	r0, #1
 800189c:	f000 f83c 	bl	8001918 <GetState>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <SCH_GetInputs+0xfc>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d009      	beq.n	80018c0 <SCH_GetInputs+0xdc>
		jpeg_quality = GetState(OP_CAMERA_QUALITY);
 80018ac:	2001      	movs	r0, #1
 80018ae:	f000 f833 	bl	8001918 <GetState>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b0a      	ldr	r3, [pc, #40]	@ (80018e0 <SCH_GetInputs+0xfc>)
 80018b8:	701a      	strb	r2, [r3, #0]
		// Clear the screen
		ST7789_Clear(&hst7789);
 80018ba:	480a      	ldr	r0, [pc, #40]	@ (80018e4 <SCH_GetInputs+0x100>)
 80018bc:	f001 fb56 	bl	8002f6c <ST7789_Clear>
	}

}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd90      	pop	{r4, r7, pc}
 80018c8:	24000b30 	.word	0x24000b30
 80018cc:	24000000 	.word	0x24000000
 80018d0:	24000010 	.word	0x24000010
 80018d4:	24000b2c 	.word	0x24000b2c
 80018d8:	24000b40 	.word	0x24000b40
 80018dc:	24001434 	.word	0x24001434
 80018e0:	24026d0c 	.word	0x24026d0c
 80018e4:	24001474 	.word	0x24001474

080018e8 <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

uint32_t DeltaTime(uint32_t start_t) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 80018f0:	f001 fe2c 	bl	800354c <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d204      	bcs.n	8001908 <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	3b01      	subs	r3, #1
 8001906:	e002      	b.n	800190e <DeltaTime+0x26>
	}

	return now_t - start_t;
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1ad3      	subs	r3, r2, r3
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <GetState>:

uint8_t GetState(uint8_t byte_num) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	if (byte_num >= 64) return 0;
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2b3f      	cmp	r3, #63	@ 0x3f
 8001926:	d901      	bls.n	800192c <GetState+0x14>
 8001928:	2300      	movs	r3, #0
 800192a:	e004      	b.n	8001936 <GetState+0x1e>
	return hmenu.state_packet[byte_num];
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <GetState+0x2c>)
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	24001434 	.word	0x24001434

08001948 <HAL_UART_RxCpltCallback>:

// DEBUG FUNCTIONS

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_RX_DMACallback(&hxbee);
 8001950:	4804      	ldr	r0, [pc, #16]	@ (8001964 <HAL_UART_RxCpltCallback+0x1c>)
 8001952:	f015 fdf5 	bl	8017540 <XBEE_RX_DMACallback>
 8001956:	4603      	mov	r3, r0
 8001958:	73fb      	strb	r3, [r7, #15]
	if (ret) {
//		sprintf(ssd_msg, " PKT Err: %d", ret);
//		WriteDebug(ssd_msg, strlen(ssd_msg));
	}
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24026cdc 	.word	0x24026cdc

08001968 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001972:	2202      	movs	r2, #2
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	24047292 	.word	0x24047292

08001988 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 0;
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <HAL_JPEG_ErrorCallback+0x1c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	24047292 	.word	0x24047292

080019a8 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
	// Abort if it's too long
	if (OutDataLength > JPEG_MAX_WIDTH*JPEG_MAX_HEIGHT) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f64a 4280 	movw	r2, #44160	@ 0xac80
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d906      	bls.n	80019cc <HAL_JPEG_DataReadyCallback+0x24>
		HAL_JPEG_Abort(hjpeg);
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f009 fb9e 	bl	800b100 <HAL_JPEG_Abort>
		jpeg_state = 2;
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_JPEG_DataReadyCallback+0x30>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	701a      	strb	r2, [r3, #0]
		return;
 80019ca:	e002      	b.n	80019d2 <HAL_JPEG_DataReadyCallback+0x2a>
	}

	jpeg_state = 2;
 80019cc:	4b02      	ldr	r3, [pc, #8]	@ (80019d8 <HAL_JPEG_DataReadyCallback+0x30>)
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
}
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	24047292 	.word	0x24047292

080019dc <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 80019e4:	4803      	ldr	r0, [pc, #12]	@ (80019f4 <HAL_SPI_TxCpltCallback+0x18>)
 80019e6:	f001 fcad 	bl	8003344 <ST7789_DMATransmitCplt>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	24001474 	.word	0x24001474

080019f8 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
//		// Accumulate the samples
//		// Have to pre-divide so the result fits in a uint16
//		adc_average[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
//	}

	for (int i = 0; i < 2; i++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e053      	b.n	8001aae <HAL_ADC_ConvCpltCallback+0xb6>

		adc_average[i] = adc_buffer[i]; // Skip the averaging process
 8001a06:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 8001a16:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	0bdb      	lsrs	r3, r3, #15
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4a28      	ldr	r2, [pc, #160]	@ (8001acc <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	460a      	mov	r2, r1
 8001a32:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 8001a34:	4a24      	ldr	r2, [pc, #144]	@ (8001ac8 <HAL_ADC_ConvCpltCallback+0xd0>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a3c:	09db      	lsrs	r3, r3, #7
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	b2d9      	uxtb	r1, r3
 8001a42:	4a23      	ldr	r2, [pc, #140]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	460a      	mov	r2, r1
 8001a4a:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001acc <HAL_ADC_ConvCpltCallback+0xd4>)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00a      	beq.n	8001a6e <HAL_ADC_ConvCpltCallback+0x76>
 8001a58:	4a1d      	ldr	r2, [pc, #116]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	b2d9      	uxtb	r1, r3
 8001a64:	4a1a      	ldr	r2, [pc, #104]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4413      	add	r3, r2
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 8001a6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d204      	bcs.n	8001a88 <HAL_ADC_ConvCpltCallback+0x90>
			slider_magnitude[i] = 0;
 8001a7e:	4a14      	ldr	r2, [pc, #80]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001a88:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dd04      	ble.n	8001aa8 <HAL_ADC_ConvCpltCallback+0xb0>
			slider_magnitude[i] = 0xFF;
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <HAL_ADC_ConvCpltCallback+0xd8>)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	22ff      	movs	r2, #255	@ 0xff
 8001aa6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	dda8      	ble.n	8001a06 <HAL_ADC_ConvCpltCallback+0xe>

	}
}
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	24026c90 	.word	0x24026c90
 8001ac8:	24026cb8 	.word	0x24026cb8
 8001acc:	24026cc0 	.word	0x24026cc0
 8001ad0:	24026cbc 	.word	0x24026cbc
 8001ad4:	24000018 	.word	0x24000018
 8001ad8:	24000019 	.word	0x24000019

08001adc <WriteDebug>:
		}
	}
}

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 8001ae8:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <WriteDebug+0x44>)
 8001aea:	f000 ff51 	bl	8002990 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001aee:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <WriteDebug+0x48>)
 8001af0:	f000 ff4e 	bl	8002990 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	461a      	mov	r2, r3
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4809      	ldr	r0, [pc, #36]	@ (8001b20 <WriteDebug+0x44>)
 8001afc:	f001 f89e 	bl	8002c3c <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	461a      	mov	r2, r3
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <WriteDebug+0x48>)
 8001b08:	f001 f898 	bl	8002c3c <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8001b0c:	4804      	ldr	r0, [pc, #16]	@ (8001b20 <WriteDebug+0x44>)
 8001b0e:	f000 ff53 	bl	80029b8 <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8001b12:	4804      	ldr	r0, [pc, #16]	@ (8001b24 <WriteDebug+0x48>)
 8001b14:	f000 ff50 	bl	80029b8 <SSD1306_Update>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	24000b44 	.word	0x24000b44
 8001b24:	24000b58 	.word	0x24000b58

08001b28 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001b3a:	f003 f905 	bl	8004d48 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001b4e:	2387      	movs	r3, #135	@ 0x87
 8001b50:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b56:	2300      	movs	r3, #0
 8001b58:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f923 	bl	8004db8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b72:	2004      	movs	r0, #4
 8001b74:	f003 f900 	bl	8004d78 <HAL_MPU_Enable>

}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_MspInit+0x30>)
 8001b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b98:	4a08      	ldr	r2, [pc, #32]	@ (8001bbc <HAL_MspInit+0x30>)
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_MspInit+0x30>)
 8001ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	58024400 	.word	0x58024400

08001bc0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cd8 <HAL_ADC_MspInit+0x118>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d175      	bne.n	8001cce <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001be2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001be4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001be8:	4a3c      	ldr	r2, [pc, #240]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001bea:	f043 0320 	orr.w	r3, r3, #32
 8001bee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001bf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c06:	4a35      	ldr	r2, [pc, #212]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c10:	4b32      	ldr	r3, [pc, #200]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c24:	4a2d      	ldr	r2, [pc, #180]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_ADC_MspInit+0x11c>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8001c3c:	2340      	movs	r3, #64	@ 0x40
 8001c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c40:	2303      	movs	r3, #3
 8001c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4824      	ldr	r0, [pc, #144]	@ (8001ce0 <HAL_ADC_MspInit+0x120>)
 8001c50:	f005 ff48 	bl	8007ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001c54:	2310      	movs	r3, #16
 8001c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	481f      	ldr	r0, [pc, #124]	@ (8001ce4 <HAL_ADC_MspInit+0x124>)
 8001c68:	f005 ff3c 	bl	8007ae4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 8001c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <HAL_ADC_MspInit+0x12c>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001c72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c74:	2209      	movs	r2, #9
 8001c76:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c94:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001ca6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001caa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001cb4:	f003 f8c0 	bl	8004e38 <HAL_DMA_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001cbe:	f7ff ff5f 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001cc6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001cc8:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_ADC_MspInit+0x128>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	58020000 	.word	0x58020000
 8001ce4:	58020800 	.word	0x58020800
 8001ce8:	2400058c 	.word	0x2400058c
 8001cec:	40020058 	.word	0x40020058

08001cf0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a73      	ldr	r2, [pc, #460]	@ (8001edc <HAL_I2C_MspInit+0x1ec>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d16d      	bne.n	8001dee <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	4b73      	ldr	r3, [pc, #460]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d18:	4a71      	ldr	r2, [pc, #452]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d22:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001d30:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d36:	2312      	movs	r3, #18
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d42:	2304      	movs	r3, #4
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 031c 	add.w	r3, r7, #28
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4865      	ldr	r0, [pc, #404]	@ (8001ee4 <HAL_I2C_MspInit+0x1f4>)
 8001d4e:	f005 fec9 	bl	8007ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d52:	4b63      	ldr	r3, [pc, #396]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d58:	4a61      	ldr	r2, [pc, #388]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001d5a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d62:	4b5f      	ldr	r3, [pc, #380]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001d70:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d72:	4a5e      	ldr	r2, [pc, #376]	@ (8001eec <HAL_I2C_MspInit+0x1fc>)
 8001d74:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d76:	4b5c      	ldr	r3, [pc, #368]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d78:	2222      	movs	r2, #34	@ 0x22
 8001d7a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d7e:	2240      	movs	r2, #64	@ 0x40
 8001d80:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d82:	4b59      	ldr	r3, [pc, #356]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d88:	4b57      	ldr	r3, [pc, #348]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d8e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d90:	4b55      	ldr	r3, [pc, #340]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d96:	4b54      	ldr	r3, [pc, #336]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d9c:	4b52      	ldr	r3, [pc, #328]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001da2:	4b51      	ldr	r3, [pc, #324]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001da4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001da8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001daa:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001db0:	484d      	ldr	r0, [pc, #308]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001db2:	f003 f841 	bl	8004e38 <HAL_DMA_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001dbc:	f7ff fee0 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a49      	ldr	r2, [pc, #292]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001dc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dc6:	4a48      	ldr	r2, [pc, #288]	@ (8001ee8 <HAL_I2C_MspInit+0x1f8>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	201f      	movs	r0, #31
 8001dd2:	f002 ff84 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001dd6:	201f      	movs	r0, #31
 8001dd8:	f002 ff9b 	bl	8004d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2020      	movs	r0, #32
 8001de2:	f002 ff7c 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001de6:	2020      	movs	r0, #32
 8001de8:	f002 ff93 	bl	8004d12 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dec:	e071      	b.n	8001ed2 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ef0 <HAL_I2C_MspInit+0x200>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d16c      	bne.n	8001ed2 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfe:	4a38      	ldr	r2, [pc, #224]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e08:	4b35      	ldr	r3, [pc, #212]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1c:	2312      	movs	r3, #18
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e20:	2301      	movs	r3, #1
 8001e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e28:	2304      	movs	r3, #4
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	4619      	mov	r1, r3
 8001e32:	482c      	ldr	r0, [pc, #176]	@ (8001ee4 <HAL_I2C_MspInit+0x1f4>)
 8001e34:	f005 fe56 	bl	8007ae4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e38:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e3e:	4a28      	ldr	r2, [pc, #160]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001e40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001e48:	4b25      	ldr	r3, [pc, #148]	@ (8001ee0 <HAL_I2C_MspInit+0x1f0>)
 8001e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001e56:	4b27      	ldr	r3, [pc, #156]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e58:	4a27      	ldr	r2, [pc, #156]	@ (8001ef8 <HAL_I2C_MspInit+0x208>)
 8001e5a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001e5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e62:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e64:	2240      	movs	r2, #64	@ 0x40
 8001e66:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e68:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e74:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e8a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e8e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001e96:	4817      	ldr	r0, [pc, #92]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001e98:	f002 ffce 	bl	8004e38 <HAL_DMA_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001ea2:	f7ff fe6d 	bl	8001b80 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eac:	4a11      	ldr	r2, [pc, #68]	@ (8001ef4 <HAL_I2C_MspInit+0x204>)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2021      	movs	r0, #33	@ 0x21
 8001eb8:	f002 ff11 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001ebc:	2021      	movs	r0, #33	@ 0x21
 8001ebe:	f002 ff28 	bl	8004d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2022      	movs	r0, #34	@ 0x22
 8001ec8:	f002 ff09 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001ecc:	2022      	movs	r0, #34	@ 0x22
 8001ece:	f002 ff20 	bl	8004d12 <HAL_NVIC_EnableIRQ>
}
 8001ed2:	bf00      	nop
 8001ed4:	3730      	adds	r7, #48	@ 0x30
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	58024400 	.word	0x58024400
 8001ee4:	58020400 	.word	0x58020400
 8001ee8:	240006ac 	.word	0x240006ac
 8001eec:	40020040 	.word	0x40020040
 8001ef0:	40005800 	.word	0x40005800
 8001ef4:	24000724 	.word	0x24000724
 8001ef8:	40020028 	.word	0x40020028

08001efc <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a55      	ldr	r2, [pc, #340]	@ (8002060 <HAL_JPEG_MspInit+0x164>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	f040 80a3 	bne.w	8002056 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001f10:	4b54      	ldr	r3, [pc, #336]	@ (8002064 <HAL_JPEG_MspInit+0x168>)
 8001f12:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f16:	4a53      	ldr	r2, [pc, #332]	@ (8002064 <HAL_JPEG_MspInit+0x168>)
 8001f18:	f043 0320 	orr.w	r3, r3, #32
 8001f1c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f20:	4b50      	ldr	r3, [pc, #320]	@ (8002064 <HAL_JPEG_MspInit+0x168>)
 8001f22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f30:	4a4e      	ldr	r2, [pc, #312]	@ (800206c <HAL_JPEG_MspInit+0x170>)
 8001f32:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001f34:	4b4c      	ldr	r3, [pc, #304]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f36:	2211      	movs	r2, #17
 8001f38:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001f3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001f40:	4b49      	ldr	r3, [pc, #292]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f42:	2240      	movs	r2, #64	@ 0x40
 8001f44:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001f46:	4b48      	ldr	r3, [pc, #288]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001f4c:	4b46      	ldr	r3, [pc, #280]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f4e:	2202      	movs	r2, #2
 8001f50:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001f52:	4b45      	ldr	r3, [pc, #276]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001f58:	4b43      	ldr	r3, [pc, #268]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001f5e:	4b42      	ldr	r3, [pc, #264]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001f64:	4b40      	ldr	r3, [pc, #256]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f6e:	2220      	movs	r2, #32
 8001f70:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001f72:	4b3d      	ldr	r3, [pc, #244]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f78:	4b3b      	ldr	r3, [pc, #236]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001f84:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001f8a:	4837      	ldr	r0, [pc, #220]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001f8c:	f00a fe04 	bl	800cb98 <HAL_MDMA_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001f96:	f7ff fdf3 	bl	8001b80 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4832      	ldr	r0, [pc, #200]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001fa0:	f00a fe46 	bl	800cc30 <HAL_MDMA_ConfigPostRequestMask>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001faa:	f7ff fde9 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8002068 <HAL_JPEG_MspInit+0x16c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8002074 <HAL_JPEG_MspInit+0x178>)
 8001fbe:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fc2:	2214      	movs	r2, #20
 8001fc4:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fce:	2240      	movs	r2, #64	@ 0x40
 8001fd0:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001fd2:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001fd8:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fe0:	2208      	movs	r2, #8
 8001fe2:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001ff2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8002000:	2200      	movs	r2, #0
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8002004:	4b1a      	ldr	r3, [pc, #104]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 800200a:	4b19      	ldr	r3, [pc, #100]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 800200c:	2200      	movs	r2, #0
 800200e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8002010:	4b17      	ldr	r3, [pc, #92]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8002012:	2200      	movs	r2, #0
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8002016:	4816      	ldr	r0, [pc, #88]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8002018:	f00a fdbe 	bl	800cb98 <HAL_MDMA_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8002022:	f7ff fdad 	bl	8001b80 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	4811      	ldr	r0, [pc, #68]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 800202c:	f00a fe00 	bl	800cc30 <HAL_MDMA_ConfigPostRequestMask>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8002036:	f7ff fda3 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 800203e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002040:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <HAL_JPEG_MspInit+0x174>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2079      	movs	r0, #121	@ 0x79
 800204c:	f002 fe47 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8002050:	2079      	movs	r0, #121	@ 0x79
 8002052:	f002 fe5e 	bl	8004d12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	52003000 	.word	0x52003000
 8002064:	58024400 	.word	0x58024400
 8002068:	240007f4 	.word	0x240007f4
 800206c:	52000040 	.word	0x52000040
 8002070:	24000860 	.word	0x24000860
 8002074:	52000080 	.word	0x52000080

08002078 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b0ba      	sub	sp, #232	@ 0xe8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002090:	f107 0310 	add.w	r3, r7, #16
 8002094:	22c0      	movs	r2, #192	@ 0xc0
 8002096:	2100      	movs	r1, #0
 8002098:	4618      	mov	r0, r3
 800209a:	f019 f9d2 	bl	801b442 <memset>
  if(hspi->Instance==SPI4)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a54      	ldr	r2, [pc, #336]	@ (80021f4 <HAL_SPI_MspInit+0x17c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	f040 80a1 	bne.w	80021ec <HAL_SPI_MspInit+0x174>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80020aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 16;
 80020b6:	2310      	movs	r3, #16
 80020b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 128;
 80020ba:	2380      	movs	r3, #128	@ 0x80
 80020bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 80;
 80020be:	2350      	movs	r3, #80	@ 0x50
 80020c0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80020c2:	2302      	movs	r3, #2
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80020c6:	2302      	movs	r3, #2
 80020c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80020d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020da:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020dc:	f107 0310 	add.w	r3, r7, #16
 80020e0:	4618      	mov	r0, r3
 80020e2:	f00d fc27 	bl	800f934 <HAL_RCCEx_PeriphCLKConfig>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80020ec:	f7ff fd48 	bl	8001b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80020f0:	4b41      	ldr	r3, [pc, #260]	@ (80021f8 <HAL_SPI_MspInit+0x180>)
 80020f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020f6:	4a40      	ldr	r2, [pc, #256]	@ (80021f8 <HAL_SPI_MspInit+0x180>)
 80020f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002100:	4b3d      	ldr	r3, [pc, #244]	@ (80021f8 <HAL_SPI_MspInit+0x180>)
 8002102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800210e:	4b3a      	ldr	r3, [pc, #232]	@ (80021f8 <HAL_SPI_MspInit+0x180>)
 8002110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002114:	4a38      	ldr	r2, [pc, #224]	@ (80021f8 <HAL_SPI_MspInit+0x180>)
 8002116:	f043 0310 	orr.w	r3, r3, #16
 800211a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800211e:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_SPI_MspInit+0x180>)
 8002120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800212c:	2344      	movs	r3, #68	@ 0x44
 800212e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002144:	2305      	movs	r3, #5
 8002146:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800214a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800214e:	4619      	mov	r1, r3
 8002150:	482a      	ldr	r0, [pc, #168]	@ (80021fc <HAL_SPI_MspInit+0x184>)
 8002152:	f005 fcc7 	bl	8007ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002156:	2310      	movs	r3, #16
 8002158:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800216e:	2305      	movs	r3, #5
 8002170:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002174:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002178:	4619      	mov	r1, r3
 800217a:	4820      	ldr	r0, [pc, #128]	@ (80021fc <HAL_SPI_MspInit+0x184>)
 800217c:	f005 fcb2 	bl	8007ae4 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8002180:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 8002182:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <HAL_SPI_MspInit+0x18c>)
 8002184:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002186:	4b1e      	ldr	r3, [pc, #120]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 8002188:	2254      	movs	r2, #84	@ 0x54
 800218a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218c:	4b1c      	ldr	r3, [pc, #112]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 800218e:	2240      	movs	r2, #64	@ 0x40
 8002190:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 800219a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800219e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a0:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a6:	4b16      	ldr	r3, [pc, #88]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021b2:	4b13      	ldr	r3, [pc, #76]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021b4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021b8:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021bc:	2200      	movs	r2, #0
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80021c0:	480f      	ldr	r0, [pc, #60]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021c2:	f002 fe39 	bl	8004e38 <HAL_DMA_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 80021cc:	f7ff fcd8 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021d4:	679a      	str	r2, [r3, #120]	@ 0x78
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <HAL_SPI_MspInit+0x188>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2054      	movs	r0, #84	@ 0x54
 80021e2:	f002 fd7c 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80021e6:	2054      	movs	r0, #84	@ 0x54
 80021e8:	f002 fd93 	bl	8004d12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80021ec:	bf00      	nop
 80021ee:	37e8      	adds	r7, #232	@ 0xe8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40013400 	.word	0x40013400
 80021f8:	58024400 	.word	0x58024400
 80021fc:	58021000 	.word	0x58021000
 8002200:	24000954 	.word	0x24000954
 8002204:	40020010 	.word	0x40020010

08002208 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0e      	ldr	r2, [pc, #56]	@ (8002250 <HAL_TIM_Base_MspInit+0x48>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d116      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM5_MspInit 0 */

    /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_TIM_Base_MspInit+0x4c>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002220:	4a0c      	ldr	r2, [pc, #48]	@ (8002254 <HAL_TIM_Base_MspInit+0x4c>)
 8002222:	f043 0308 	orr.w	r3, r3, #8
 8002226:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800222a:	4b0a      	ldr	r3, [pc, #40]	@ (8002254 <HAL_TIM_Base_MspInit+0x4c>)
 800222c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2032      	movs	r0, #50	@ 0x32
 800223e:	f002 fd4e 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002242:	2032      	movs	r0, #50	@ 0x32
 8002244:	f002 fd65 	bl	8004d12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM5_MspInit 1 */

  }

}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40000c00 	.word	0x40000c00
 8002254:	58024400 	.word	0x58024400

08002258 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b0ba      	sub	sp, #232	@ 0xe8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	22c0      	movs	r2, #192	@ 0xc0
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f019 f8e2 	bl	801b442 <memset>
  if(huart->Instance==USART1)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a43      	ldr	r2, [pc, #268]	@ (8002390 <HAL_UART_MspInit+0x138>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d17e      	bne.n	8002386 <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002288:	f04f 0201 	mov.w	r2, #1
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229a:	f107 0310 	add.w	r3, r7, #16
 800229e:	4618      	mov	r0, r3
 80022a0:	f00d fb48 	bl	800f934 <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022aa:	f7ff fc69 	bl	8001b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ae:	4b39      	ldr	r3, [pc, #228]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022b4:	4a37      	ldr	r2, [pc, #220]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80022be:	4b35      	ldr	r3, [pc, #212]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80022c4:	f003 0310 	and.w	r3, r3, #16
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022cc:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	4a30      	ldr	r2, [pc, #192]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022d4:	f043 0302 	orr.w	r3, r3, #2
 80022d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <HAL_UART_MspInit+0x13c>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80022ea:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80022ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002304:	2304      	movs	r3, #4
 8002306:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800230a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800230e:	4619      	mov	r1, r3
 8002310:	4821      	ldr	r0, [pc, #132]	@ (8002398 <HAL_UART_MspInit+0x140>)
 8002312:	f005 fbe7 	bl	8007ae4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 8002316:	4b21      	ldr	r3, [pc, #132]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002318:	4a21      	ldr	r2, [pc, #132]	@ (80023a0 <HAL_UART_MspInit+0x148>)
 800231a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800231c:	4b1f      	ldr	r3, [pc, #124]	@ (800239c <HAL_UART_MspInit+0x144>)
 800231e:	2229      	movs	r2, #41	@ 0x29
 8002320:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002328:	4b1c      	ldr	r3, [pc, #112]	@ (800239c <HAL_UART_MspInit+0x144>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800232e:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002330:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002334:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002336:	4b19      	ldr	r3, [pc, #100]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233c:	4b17      	ldr	r3, [pc, #92]	@ (800239c <HAL_UART_MspInit+0x144>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002348:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_UART_MspInit+0x144>)
 800234c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002350:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002354:	2200      	movs	r2, #0
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002358:	4810      	ldr	r0, [pc, #64]	@ (800239c <HAL_UART_MspInit+0x144>)
 800235a:	f002 fd6d 	bl	8004e38 <HAL_DMA_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8002364:	f7ff fc0c 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0c      	ldr	r2, [pc, #48]	@ (800239c <HAL_UART_MspInit+0x144>)
 800236c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002370:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_UART_MspInit+0x144>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2025      	movs	r0, #37	@ 0x25
 800237c:	f002 fcaf 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002380:	2025      	movs	r0, #37	@ 0x25
 8002382:	f002 fcc6 	bl	8004d12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002386:	bf00      	nop
 8002388:	37e8      	adds	r7, #232	@ 0xe8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40011000 	.word	0x40011000
 8002394:	58024400 	.word	0x58024400
 8002398:	58020400 	.word	0x58020400
 800239c:	24000aac 	.word	0x24000aac
 80023a0:	40020410 	.word	0x40020410

080023a4 <__NVIC_SystemReset>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80023a8:	f3bf 8f4f 	dsb	sy
}
 80023ac:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80023ae:	4b06      	ldr	r3, [pc, #24]	@ (80023c8 <__NVIC_SystemReset+0x24>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80023b6:	4904      	ldr	r1, [pc, #16]	@ (80023c8 <__NVIC_SystemReset+0x24>)
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <__NVIC_SystemReset+0x28>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80023be:	f3bf 8f4f 	dsb	sy
}
 80023c2:	bf00      	nop
    __NOP();
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <__NVIC_SystemReset+0x20>
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	05fa0004 	.word	0x05fa0004

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <NMI_Handler+0x4>

080023d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	// ON HARDFAULT:
	// Reset the system
	NVIC_SystemReset();
 80023dc:	f7ff ffe2 	bl	80023a4 <__NVIC_SystemReset>

080023e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e4:	bf00      	nop
 80023e6:	e7fd      	b.n	80023e4 <MemManage_Handler+0x4>

080023e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <BusFault_Handler+0x4>

080023f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <UsageFault_Handler+0x4>

080023f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002426:	f001 f87d 	bl	8003524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002434:	4802      	ldr	r0, [pc, #8]	@ (8002440 <DMA1_Stream0_IRQHandler+0x10>)
 8002436:	f004 f829 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	24000954 	.word	0x24000954

08002444 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002448:	4802      	ldr	r0, [pc, #8]	@ (8002454 <DMA1_Stream1_IRQHandler+0x10>)
 800244a:	f004 f81f 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	24000724 	.word	0x24000724

08002458 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800245c:	4802      	ldr	r0, [pc, #8]	@ (8002468 <DMA1_Stream2_IRQHandler+0x10>)
 800245e:	f004 f815 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	240006ac 	.word	0x240006ac

0800246c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002470:	4802      	ldr	r0, [pc, #8]	@ (800247c <DMA1_Stream3_IRQHandler+0x10>)
 8002472:	f004 f80b 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2400058c 	.word	0x2400058c

08002480 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002484:	4802      	ldr	r0, [pc, #8]	@ (8002490 <I2C1_EV_IRQHandler+0x10>)
 8002486:	f006 f9d3 	bl	8008830 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	24000604 	.word	0x24000604

08002494 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002498:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <I2C1_ER_IRQHandler+0x10>)
 800249a:	f006 f9e3 	bl	8008864 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	24000604 	.word	0x24000604

080024a8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80024ac:	4802      	ldr	r0, [pc, #8]	@ (80024b8 <I2C2_EV_IRQHandler+0x10>)
 80024ae:	f006 f9bf 	bl	8008830 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	24000658 	.word	0x24000658

080024bc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80024c0:	4802      	ldr	r0, [pc, #8]	@ (80024cc <I2C2_ER_IRQHandler+0x10>)
 80024c2:	f006 f9cf 	bl	8008864 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	24000658 	.word	0x24000658

080024d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024d4:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <USART1_IRQHandler+0x10>)
 80024d6:	f011 fceb 	bl	8013eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	24000a18 	.word	0x24000a18

080024e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  NetworkTimeout();
 80024e8:	f7fe fe40 	bl	800116c <NetworkTimeout>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <TIM5_IRQHandler+0x14>)
 80024ee:	f010 ff99 	bl	8013424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	240009cc 	.word	0x240009cc

080024fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <DMA2_Stream0_IRQHandler+0x10>)
 8002502:	f003 ffc3 	bl	800648c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	24000aac 	.word	0x24000aac

08002510 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002514:	4802      	ldr	r0, [pc, #8]	@ (8002520 <SPI4_IRQHandler+0x10>)
 8002516:	f010 fb5f 	bl	8012bd8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	240008cc 	.word	0x240008cc

08002524 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002528:	4802      	ldr	r0, [pc, #8]	@ (8002534 <OTG_FS_IRQHandler+0x10>)
 800252a:	f00b f874 	bl	800d616 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	24048784 	.word	0x24048784

08002538 <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 800253c:	4802      	ldr	r0, [pc, #8]	@ (8002548 <JPEG_IRQHandler+0x10>)
 800253e:	f008 fea7 	bl	800b290 <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	2400079c 	.word	0x2400079c

0800254c <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8002550:	4803      	ldr	r0, [pc, #12]	@ (8002560 <MDMA_IRQHandler+0x14>)
 8002552:	f00a fcc3 	bl	800cedc <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 8002556:	4803      	ldr	r0, [pc, #12]	@ (8002564 <MDMA_IRQHandler+0x18>)
 8002558:	f00a fcc0 	bl	800cedc <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}
 8002560:	240007f4 	.word	0x240007f4
 8002564:	24000860 	.word	0x24000860

08002568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return 1;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_kill>:

int _kill(int pid, int sig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002582:	f018 ffc1 	bl	801b508 <__errno>
 8002586:	4603      	mov	r3, r0
 8002588:	2216      	movs	r2, #22
 800258a:	601a      	str	r2, [r3, #0]
  return -1;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <_exit>:

void _exit (int status)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ffe7 	bl	8002578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025aa:	bf00      	nop
 80025ac:	e7fd      	b.n	80025aa <_exit+0x12>

080025ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e00a      	b.n	80025d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025c0:	f3af 8000 	nop.w
 80025c4:	4601      	mov	r1, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1c5a      	adds	r2, r3, #1
 80025ca:	60ba      	str	r2, [r7, #8]
 80025cc:	b2ca      	uxtb	r2, r1
 80025ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	dbf0      	blt.n	80025c0 <_read+0x12>
  }

  return len;
 80025de:	687b      	ldr	r3, [r7, #4]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e009      	b.n	800260e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	60ba      	str	r2, [r7, #8]
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbf1      	blt.n	80025fa <_write+0x12>
  }
  return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_close>:

int _close(int file)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002648:	605a      	str	r2, [r3, #4]
  return 0;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <_isatty>:

int _isatty(int file)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002660:	2301      	movs	r3, #1
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800266e:	b480      	push	{r7}
 8002670:	b085      	sub	sp, #20
 8002672:	af00      	add	r7, sp, #0
 8002674:	60f8      	str	r0, [r7, #12]
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	@ (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	@ (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	@ (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f018 ff26 	bl	801b508 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	@ (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	24080000 	.word	0x24080000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	24047298 	.word	0x24047298
 80026f0:	24048fd8 	.word	0x24048fd8

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026f8:	4b43      	ldr	r3, [pc, #268]	@ (8002808 <SystemInit+0x114>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026fe:	4a42      	ldr	r2, [pc, #264]	@ (8002808 <SystemInit+0x114>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002708:	4b40      	ldr	r3, [pc, #256]	@ (800280c <SystemInit+0x118>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	2b06      	cmp	r3, #6
 8002712:	d807      	bhi.n	8002724 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002714:	4b3d      	ldr	r3, [pc, #244]	@ (800280c <SystemInit+0x118>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 030f 	bic.w	r3, r3, #15
 800271c:	4a3b      	ldr	r2, [pc, #236]	@ (800280c <SystemInit+0x118>)
 800271e:	f043 0307 	orr.w	r3, r3, #7
 8002722:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002724:	4b3a      	ldr	r3, [pc, #232]	@ (8002810 <SystemInit+0x11c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a39      	ldr	r2, [pc, #228]	@ (8002810 <SystemInit+0x11c>)
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <SystemInit+0x11c>)
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002736:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <SystemInit+0x11c>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4935      	ldr	r1, [pc, #212]	@ (8002810 <SystemInit+0x11c>)
 800273c:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <SystemInit+0x120>)
 800273e:	4013      	ands	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002742:	4b32      	ldr	r3, [pc, #200]	@ (800280c <SystemInit+0x118>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800274e:	4b2f      	ldr	r3, [pc, #188]	@ (800280c <SystemInit+0x118>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f023 030f 	bic.w	r3, r3, #15
 8002756:	4a2d      	ldr	r2, [pc, #180]	@ (800280c <SystemInit+0x118>)
 8002758:	f043 0307 	orr.w	r3, r3, #7
 800275c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800275e:	4b2c      	ldr	r3, [pc, #176]	@ (8002810 <SystemInit+0x11c>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002764:	4b2a      	ldr	r3, [pc, #168]	@ (8002810 <SystemInit+0x11c>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800276a:	4b29      	ldr	r3, [pc, #164]	@ (8002810 <SystemInit+0x11c>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002770:	4b27      	ldr	r3, [pc, #156]	@ (8002810 <SystemInit+0x11c>)
 8002772:	4a29      	ldr	r2, [pc, #164]	@ (8002818 <SystemInit+0x124>)
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002776:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <SystemInit+0x11c>)
 8002778:	4a28      	ldr	r2, [pc, #160]	@ (800281c <SystemInit+0x128>)
 800277a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800277c:	4b24      	ldr	r3, [pc, #144]	@ (8002810 <SystemInit+0x11c>)
 800277e:	4a28      	ldr	r2, [pc, #160]	@ (8002820 <SystemInit+0x12c>)
 8002780:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002782:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <SystemInit+0x11c>)
 8002784:	2200      	movs	r2, #0
 8002786:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002788:	4b21      	ldr	r3, [pc, #132]	@ (8002810 <SystemInit+0x11c>)
 800278a:	4a25      	ldr	r2, [pc, #148]	@ (8002820 <SystemInit+0x12c>)
 800278c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <SystemInit+0x11c>)
 8002790:	2200      	movs	r2, #0
 8002792:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002794:	4b1e      	ldr	r3, [pc, #120]	@ (8002810 <SystemInit+0x11c>)
 8002796:	4a22      	ldr	r2, [pc, #136]	@ (8002820 <SystemInit+0x12c>)
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800279a:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <SystemInit+0x11c>)
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <SystemInit+0x11c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002810 <SystemInit+0x11c>)
 80027a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027ac:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <SystemInit+0x11c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002824 <SystemInit+0x130>)
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002828 <SystemInit+0x134>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027be:	d202      	bcs.n	80027c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <SystemInit+0x138>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80027c6:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <SystemInit+0x11c>)
 80027c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d113      	bne.n	80027fc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <SystemInit+0x11c>)
 80027d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027da:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <SystemInit+0x11c>)
 80027dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <SystemInit+0x13c>)
 80027e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80027ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80027ec:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <SystemInit+0x11c>)
 80027ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <SystemInit+0x11c>)
 80027f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed00 	.word	0xe000ed00
 800280c:	52002000 	.word	0x52002000
 8002810:	58024400 	.word	0x58024400
 8002814:	eaf6ed7f 	.word	0xeaf6ed7f
 8002818:	02020200 	.word	0x02020200
 800281c:	01ff0000 	.word	0x01ff0000
 8002820:	01010280 	.word	0x01010280
 8002824:	5c001000 	.word	0x5c001000
 8002828:	ffff0000 	.word	0xffff0000
 800282c:	51008108 	.word	0x51008108
 8002830:	52004000 	.word	0x52004000

08002834 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002838:	4b09      	ldr	r3, [pc, #36]	@ (8002860 <ExitRun0Mode+0x2c>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a08      	ldr	r2, [pc, #32]	@ (8002860 <ExitRun0Mode+0x2c>)
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002844:	bf00      	nop
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <ExitRun0Mode+0x2c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f9      	beq.n	8002846 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002852:	bf00      	nop
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	58024800 	.word	0x58024800

08002864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002864:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80028a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002868:	f7ff ffe4 	bl	8002834 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800286c:	f7ff ff42 	bl	80026f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002870:	480c      	ldr	r0, [pc, #48]	@ (80028a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002872:	490d      	ldr	r1, [pc, #52]	@ (80028a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002878:	e002      	b.n	8002880 <LoopCopyDataInit>

0800287a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800287c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287e:	3304      	adds	r3, #4

08002880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002884:	d3f9      	bcc.n	800287a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002886:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002888:	4c0a      	ldr	r4, [pc, #40]	@ (80028b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800288c:	e001      	b.n	8002892 <LoopFillZerobss>

0800288e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002890:	3204      	adds	r2, #4

08002892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002894:	d3fb      	bcc.n	800288e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002896:	f018 fe3d 	bl	801b514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289a:	f7fd ff25 	bl	80006e8 <main>
  bx  lr
 800289e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80028a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028a8:	2400050c 	.word	0x2400050c
  ldr r2, =_sidata
 80028ac:	0801dfa4 	.word	0x0801dfa4
  ldr r2, =_sbss
 80028b0:	2400050c 	.word	0x2400050c
  ldr r4, =_ebss
 80028b4:	24048fd4 	.word	0x24048fd4

080028b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b8:	e7fe      	b.n	80028b8 <ADC3_IRQHandler>

080028ba <SSD1306_SendCommand>:
	0x06, 0x00,       0xFF,       0x00,       0xFF,       0x00,       0xFF,       0x00        // ------ 131 - \x84 (|||)
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af02      	add	r7, sp, #8
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	733b      	strb	r3, [r7, #12]
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	b299      	uxth	r1, r3
 80028da:	f107 020c 	add.w	r2, r7, #12
 80028de:	2364      	movs	r3, #100	@ 0x64
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	2302      	movs	r3, #2
 80028e4:	f005 fb7c 	bl	8007fe0 <HAL_I2C_Master_Transmit>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SSD1306_SendCommand+0x38>
		return ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002914:	2312      	movs	r3, #18
 8002916:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002918:	2301      	movs	r3, #1
 800291a:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 800291c:	e02c      	b.n	8002978 <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	4a1a      	ldr	r2, [pc, #104]	@ (800298c <SSD1306_Init+0x90>)
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 8002926:	897b      	ldrh	r3, [r7, #10]
 8002928:	3301      	adds	r3, #1
 800292a:	817b      	strh	r3, [r7, #10]
	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 800292c:	897b      	ldrh	r3, [r7, #10]
 800292e:	4a17      	ldr	r2, [pc, #92]	@ (800298c <SSD1306_Init+0x90>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff ffc0 	bl	80028ba <SSD1306_SendCommand>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <SSD1306_Init+0x4a>
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	b2db      	uxtb	r3, r3
 8002944:	e01e      	b.n	8002984 <SSD1306_Init+0x88>
	        cmd_idx++;
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	3301      	adds	r3, #1
 800294a:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 800294c:	e00f      	b.n	800296e <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <SSD1306_Init+0x90>)
 8002952:	5cd3      	ldrb	r3, [r2, r3]
 8002954:	4619      	mov	r1, r3
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffaf 	bl	80028ba <SSD1306_SendCommand>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <SSD1306_Init+0x6c>
 8002962:	897b      	ldrh	r3, [r7, #10]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e00d      	b.n	8002984 <SSD1306_Init+0x88>
	            cmd_idx++;
 8002968:	897b      	ldrh	r3, [r7, #10]
 800296a:	3301      	adds	r3, #1
 800296c:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 800296e:	89bb      	ldrh	r3, [r7, #12]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	81ba      	strh	r2, [r7, #12]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ea      	bne.n	800294e <SSD1306_Init+0x52>
	while (n_commands--) {
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	1e5a      	subs	r2, r3, #1
 800297c:	81fa      	strh	r2, [r7, #14]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1cd      	bne.n	800291e <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	0801d604 	.word	0x0801d604

08002990 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f018 fd4a 	bl	801b442 <memset>
	return 0;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	2240      	movs	r2, #64	@ 0x40
 80029c6:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	791b      	ldrb	r3, [r3, #4]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	b299      	uxth	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	f240 4301 	movw	r3, #1025	@ 0x401
 80029dc:	f005 fd0e 	bl	80083fc <HAL_I2C_Master_Transmit_DMA>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
	...

080029ec <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	2b0a      	cmp	r3, #10
 80029fc:	d109      	bne.n	8002a12 <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	8a1b      	ldrh	r3, [r3, #16]
 8002a02:	09db      	lsrs	r3, r3, #7
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	01db      	lsls	r3, r3, #7
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e10b      	b.n	8002c2a <SSD1306_DrawChar+0x23e>
	}

	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	3b20      	subs	r3, #32
 8002a16:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	2b60      	cmp	r3, #96	@ 0x60
 8002a1c:	d905      	bls.n	8002a2a <SSD1306_DrawChar+0x3e>
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	2b7a      	cmp	r3, #122	@ 0x7a
 8002a22:	d802      	bhi.n	8002a2a <SSD1306_DrawChar+0x3e>
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	3b20      	subs	r3, #32
 8002a28:	73fb      	strb	r3, [r7, #15]
	if (ch >= 123)             newC -= 26;	// remap the rest to align with the font table
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	2b7a      	cmp	r3, #122	@ 0x7a
 8002a2e:	d902      	bls.n	8002a36 <SSD1306_DrawChar+0x4a>
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3b1a      	subs	r3, #26
 8002a34:	73fb      	strb	r3, [r7, #15]

	if (newC > 126) return ERROR;	// char is unable to be rendered
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a3a:	d901      	bls.n	8002a40 <SSD1306_DrawChar+0x54>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0f4      	b.n	8002c2a <SSD1306_DrawChar+0x23e>

	uint8_t len = ALPHNUM[newC*8];
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4a7c      	ldr	r2, [pc, #496]	@ (8002c38 <SSD1306_DrawChar+0x24c>)
 8002a46:	5cd3      	ldrb	r3, [r2, r3]
 8002a48:	733b      	strb	r3, [r7, #12]
	for (uint8_t i = 0; i < len; i++) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73bb      	strb	r3, [r7, #14]
 8002a4e:	e0d2      	b.n	8002bf6 <SSD1306_DrawChar+0x20a>

		uint8_t drawbyte = ALPHNUM[(newC*8)+1 + i];
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	1c5a      	adds	r2, r3, #1
 8002a56:	7bbb      	ldrb	r3, [r7, #14]
 8002a58:	4413      	add	r3, r2
 8002a5a:	4a77      	ldr	r2, [pc, #476]	@ (8002c38 <SSD1306_DrawChar+0x24c>)
 8002a5c:	5cd3      	ldrb	r3, [r2, r3]
 8002a5e:	737b      	strb	r3, [r7, #13]
		if (hssd->draw_inverted) drawbyte ^= 0xFF;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	7c9b      	ldrb	r3, [r3, #18]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d002      	beq.n	8002a6e <SSD1306_DrawChar+0x82>
 8002a68:	7b7b      	ldrb	r3, [r7, #13]
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	737b      	strb	r3, [r7, #13]

		if (!hssd->draw_scale) hssd->vram[hssd->str_cursor + i] = drawbyte;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7cdb      	ldrb	r3, [r3, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <SSD1306_DrawChar+0xa0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	8a12      	ldrh	r2, [r2, #16]
 8002a7e:	4611      	mov	r1, r2
 8002a80:	7bba      	ldrb	r2, [r7, #14]
 8002a82:	440a      	add	r2, r1
 8002a84:	4413      	add	r3, r2
 8002a86:	7b7a      	ldrb	r2, [r7, #13]
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e0b1      	b.n	8002bf0 <SSD1306_DrawChar+0x204>
		else {
			uint8_t drawbyte_1 =  (drawbyte & 0b00000001)       | ((drawbyte & 0b00000001) << 1) |
 8002a8c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	b25a      	sxtb	r2, r3
 8002a96:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000010) << 1) | ((drawbyte & 0b00000010) << 2) |
 8002aa8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	b25b      	sxtb	r3, r3
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_1 =  (drawbyte & 0b00000001)       | ((drawbyte & 0b00000001) << 1) |
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000010) << 1) | ((drawbyte & 0b00000010) << 2) |
 8002aba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	b25b      	sxtb	r3, r3
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	b25b      	sxtb	r3, r3
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000100) << 2) | ((drawbyte & 0b00000100) << 3) |
 8002acc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b00000010) << 1) | ((drawbyte & 0b00000010) << 2) |
 8002ada:	4313      	orrs	r3, r2
 8002adc:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00000100) << 2) | ((drawbyte & 0b00000100) << 3) |
 8002ade:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	b25b      	sxtb	r3, r3
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00001000) << 3) | ((drawbyte & 0b00001000) << 4);
 8002af0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	b25b      	sxtb	r3, r3
 8002af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afc:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b00000100) << 2) | ((drawbyte & 0b00000100) << 3) |
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00001000) << 3) | ((drawbyte & 0b00001000) << 4);
 8002b02:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	4313      	orrs	r3, r2
 8002b12:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_1 =  (drawbyte & 0b00000001)       | ((drawbyte & 0b00000001) << 1) |
 8002b14:	72fb      	strb	r3, [r7, #11]

			uint8_t drawbyte_2 = ((drawbyte & 0b00010000) >> 4) | ((drawbyte & 0b00010000) >> 3) |
 8002b16:	7b7b      	ldrb	r3, [r7, #13]
 8002b18:	111b      	asrs	r3, r3, #4
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	b25a      	sxtb	r2, r3
 8002b22:	7b7b      	ldrb	r3, [r7, #13]
 8002b24:	10db      	asrs	r3, r3, #3
 8002b26:	b25b      	sxtb	r3, r3
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00100000) >> 3) | ((drawbyte & 0b00100000) >> 2) |
 8002b32:	7b7b      	ldrb	r3, [r7, #13]
 8002b34:	10db      	asrs	r3, r3, #3
 8002b36:	b25b      	sxtb	r3, r3
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_2 = ((drawbyte & 0b00010000) >> 4) | ((drawbyte & 0b00010000) >> 3) |
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b00100000) >> 3) | ((drawbyte & 0b00100000) >> 2) |
 8002b42:	7b7b      	ldrb	r3, [r7, #13]
 8002b44:	109b      	asrs	r3, r3, #2
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b01000000) >> 2) | ((drawbyte & 0b01000000) >> 1) |
 8002b52:	7b7b      	ldrb	r3, [r7, #13]
 8002b54:	109b      	asrs	r3, r3, #2
 8002b56:	b25b      	sxtb	r3, r3
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b00100000) >> 3) | ((drawbyte & 0b00100000) >> 2) |
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b01000000) >> 2) | ((drawbyte & 0b01000000) >> 1) |
 8002b62:	7b7b      	ldrb	r3, [r7, #13]
 8002b64:	105b      	asrs	r3, r3, #1
 8002b66:	b25b      	sxtb	r3, r3
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	b25b      	sxtb	r3, r3
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b10000000) >> 1) | (drawbyte & 0b10000000);
 8002b72:	7b7b      	ldrb	r3, [r7, #13]
 8002b74:	105b      	asrs	r3, r3, #1
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	b25b      	sxtb	r3, r3
								 ((drawbyte & 0b01000000) >> 2) | ((drawbyte & 0b01000000) >> 1) |
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b25a      	sxtb	r2, r3
								 ((drawbyte & 0b10000000) >> 1) | (drawbyte & 0b10000000);
 8002b82:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	b25b      	sxtb	r3, r3
			uint8_t drawbyte_2 = ((drawbyte & 0b00010000) >> 4) | ((drawbyte & 0b00010000) >> 3) |
 8002b90:	72bb      	strb	r3, [r7, #10]

			hssd->vram[hssd->str_cursor + i*2      ] = drawbyte_1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	8a12      	ldrh	r2, [r2, #16]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	7bba      	ldrb	r2, [r7, #14]
 8002b9e:	0052      	lsls	r2, r2, #1
 8002ba0:	440a      	add	r2, r1
 8002ba2:	4413      	add	r3, r2
 8002ba4:	7afa      	ldrb	r2, [r7, #11]
 8002ba6:	701a      	strb	r2, [r3, #0]
			hssd->vram[hssd->str_cursor + i*2 + 1  ] = drawbyte_1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8a1b      	ldrh	r3, [r3, #16]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	7bbb      	ldrb	r3, [r7, #14]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4413      	add	r3, r2
 8002bbc:	7afa      	ldrb	r2, [r7, #11]
 8002bbe:	701a      	strb	r2, [r3, #0]
			hssd->vram[hssd->str_cursor + i*2 + 128] = drawbyte_2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8a1b      	ldrh	r3, [r3, #16]
 8002bc8:	4619      	mov	r1, r3
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	440b      	add	r3, r1
 8002bd0:	3380      	adds	r3, #128	@ 0x80
 8002bd2:	4413      	add	r3, r2
 8002bd4:	7aba      	ldrb	r2, [r7, #10]
 8002bd6:	701a      	strb	r2, [r3, #0]
			hssd->vram[hssd->str_cursor + i*2 + 129] = drawbyte_2;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8a1b      	ldrh	r3, [r3, #16]
 8002be0:	4619      	mov	r1, r3
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	440b      	add	r3, r1
 8002be8:	3381      	adds	r3, #129	@ 0x81
 8002bea:	4413      	add	r3, r2
 8002bec:	7aba      	ldrb	r2, [r7, #10]
 8002bee:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < len; i++) {
 8002bf0:	7bbb      	ldrb	r3, [r7, #14]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	73bb      	strb	r3, [r7, #14]
 8002bf6:	7bba      	ldrb	r2, [r7, #14]
 8002bf8:	7b3b      	ldrb	r3, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	f4ff af28 	bcc.w	8002a50 <SSD1306_DrawChar+0x64>
		}
	}
	//memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
	hssd->str_cursor += len;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8a1a      	ldrh	r2, [r3, #16]
 8002c04:	7b3b      	ldrb	r3, [r7, #12]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	821a      	strh	r2, [r3, #16]
	if (hssd->draw_scale)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7cdb      	ldrb	r3, [r3, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <SSD1306_DrawChar+0x23c>
		hssd->str_cursor += len;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	8a1a      	ldrh	r2, [r3, #16]
 8002c1c:	7b3b      	ldrb	r3, [r7, #12]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	0801d638 	.word	0x0801d638

08002c3c <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71fb      	strb	r3, [r7, #7]
	uint8_t start_line = hssd->str_cursor / 120;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8a1b      	ldrh	r3, [r3, #16]
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <SSD1306_DrawString+0x70>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < length; i++) {
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
 8002c5e:	e019      	b.n	8002c94 <SSD1306_DrawString+0x58>
		if (hssd->str_cursor / 128 > start_line) break;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8a1b      	ldrh	r3, [r3, #16]
 8002c64:	09db      	lsrs	r3, r3, #7
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	7dbb      	ldrb	r3, [r7, #22]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d816      	bhi.n	8002c9e <SSD1306_DrawString+0x62>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x00;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	4413      	add	r3, r2
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	4619      	mov	r1, r3
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f7ff feb6 	bl	80029ec <SSD1306_DrawChar>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <SSD1306_DrawString+0x52>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8a1a      	ldrh	r2, [r3, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	3301      	adds	r3, #1
 8002c92:	75fb      	strb	r3, [r7, #23]
 8002c94:	7dfa      	ldrb	r2, [r7, #23]
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3e1      	bcc.n	8002c60 <SSD1306_DrawString+0x24>
 8002c9c:	e000      	b.n	8002ca0 <SSD1306_DrawString+0x64>
		if (hssd->str_cursor / 128 > start_line) break;
 8002c9e:	bf00      	nop
	}

	return SUCCESS;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	88888889 	.word	0x88888889

08002cb0 <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6898      	ldr	r0, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	899b      	ldrh	r3, [r3, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f005 f8d4 	bl	8007e74 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	1cf9      	adds	r1, r7, #3
 8002cd2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f00f fc4e 	bl	8012578 <HAL_SPI_Transmit>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e000      	b.n	8002ce8 <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6898      	ldr	r0, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	899b      	ldrh	r3, [r3, #12]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4619      	mov	r1, r3
 8002d08:	f005 f8b4 	bl	8007e74 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	1cf9      	adds	r1, r7, #3
 8002d12:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002d16:	2201      	movs	r2, #1
 8002d18:	f00f fc2e 	bl	8012578 <HAL_SPI_Transmit>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <ST7789_SendByte_Data+0x36>
		return ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

	hst7789->update_sequence = 2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f107 0109 	add.w	r1, r7, #9
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00f fe01 	bl	8012954 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 8002d52:	200a      	movs	r0, #10
 8002d54:	f000 fc06 	bl	8003564 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 8002d58:	2313      	movs	r3, #19
 8002d5a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002d60:	e02c      	b.n	8002dbc <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd0 <ST7789_Init+0xa0>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8002d70:	897b      	ldrh	r3, [r7, #10]
 8002d72:	4a17      	ldr	r2, [pc, #92]	@ (8002dd0 <ST7789_Init+0xa0>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff99 	bl	8002cb0 <ST7789_SendByte_Command>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <ST7789_Init+0x5a>
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	e01e      	b.n	8002dc8 <ST7789_Init+0x98>
	    cmd_idx++;
 8002d8a:	897b      	ldrh	r3, [r7, #10]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 8002d90:	e00f      	b.n	8002db2 <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 8002d92:	897b      	ldrh	r3, [r7, #10]
 8002d94:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd0 <ST7789_Init+0xa0>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ffa8 	bl	8002cf0 <ST7789_SendByte_Data>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <ST7789_Init+0x7c>
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	e00d      	b.n	8002dc8 <ST7789_Init+0x98>
				cmd_idx++;
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	3301      	adds	r3, #1
 8002db0:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 8002db2:	89bb      	ldrh	r3, [r7, #12]
 8002db4:	1e5a      	subs	r2, r3, #1
 8002db6:	81ba      	strh	r2, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <ST7789_Init+0x62>
	while (n_commands--) {
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	1e5a      	subs	r2, r3, #1
 8002dc0:	81fa      	strh	r2, [r7, #14]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1cd      	bne.n	8002d62 <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	0801d890 	.word	0x0801d890

08002dd4 <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	461a      	mov	r2, r3
 8002de2:	4603      	mov	r3, r0
 8002de4:	817b      	strh	r3, [r7, #10]
 8002de6:	460b      	mov	r3, r1
 8002de8:	813b      	strh	r3, [r7, #8]
 8002dea:	4613      	mov	r3, r2
 8002dec:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 8002dee:	212a      	movs	r1, #42	@ 0x2a
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff ff5d 	bl	8002cb0 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 8002df6:	897b      	ldrh	r3, [r7, #10]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4619      	mov	r1, r3
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f7ff ff75 	bl	8002cf0 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ff6f 	bl	8002cf0 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	121b      	asrs	r3, r3, #8
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7ff ff67 	bl	8002cf0 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ff5f 	bl	8002cf0 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 8002e32:	212b      	movs	r1, #43	@ 0x2b
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff ff3b 	bl	8002cb0 <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 8002e3a:	893b      	ldrh	r3, [r7, #8]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff53 	bl	8002cf0 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 8002e4a:	893b      	ldrh	r3, [r7, #8]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4619      	mov	r1, r3
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff ff4d 	bl	8002cf0 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 8002e56:	8b3b      	ldrh	r3, [r7, #24]
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	121b      	asrs	r3, r3, #8
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4619      	mov	r1, r3
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff ff45 	bl	8002cf0 <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 8002e66:	8b3b      	ldrh	r3, [r7, #24]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff ff3d 	bl	8002cf0 <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 8002e76:	212c      	movs	r1, #44	@ 0x2c
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff ff19 	bl	8002cb0 <ST7789_SendByte_Command>
}
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b084      	sub	sp, #16
 8002e8a:	af02      	add	r7, sp, #8
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	791b      	ldrb	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <ST7789_UpdateSector+0x18>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e04b      	b.n	8002f36 <ST7789_UpdateSector+0xb0>
	if (screen_section > 2) return ERROR;
 8002e9e:	78fb      	ldrb	r3, [r7, #3]
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <ST7789_UpdateSector+0x22>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e046      	b.n	8002f36 <ST7789_UpdateSector+0xb0>

	// Flag as busy
	hst7789->spi_state = 1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	0152      	lsls	r2, r2, #5
 8002eb6:	1ad2      	subs	r2, r2, r3
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	23f0      	movs	r3, #240	@ 0xf0
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff83 	bl	8002dd4 <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6898      	ldr	r0, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	899b      	ldrh	r3, [r3, #12]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f004 ffcb 	bl	8007e74 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d013      	beq.n	8002f0c <ST7789_UpdateSector+0x86>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002ef2:	fb01 f202 	mul.w	r2, r1, r2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002efc:	4619      	mov	r1, r3
 8002efe:	f00f fd29 	bl	8012954 <HAL_SPI_Transmit_DMA>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <ST7789_UpdateSector+0xae>
			return ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e014      	b.n	8002f36 <ST7789_UpdateSector+0xb0>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002f1a:	fb01 f202 	mul.w	r2, r1, r2
 8002f1e:	4413      	add	r3, r2
 8002f20:	f248 3240 	movw	r2, #33600	@ 0x8340
 8002f24:	4619      	mov	r1, r3
 8002f26:	f00f fd15 	bl	8012954 <HAL_SPI_Transmit_DMA>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <ST7789_UpdateSector+0xae>
			return ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <ST7789_UpdateSector+0xb0>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	// Reset the sector counter
	hst7789->update_sequence = 0;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	751a      	strb	r2, [r3, #20]

	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->update_sequence)) return ERROR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7d1b      	ldrb	r3, [r3, #20]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff97 	bl	8002e86 <ST7789_UpdateSector>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <ST7789_UpdateAutomatic+0x24>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <ST7789_UpdateAutomatic+0x26>

	return SUCCESS;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	// fill VRAM with black
	memset(hst7789->vram, 0x00, LCD_WIDTH*LCD_HEIGHT*2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f018 fa5f 	bl	801b442 <memset>
	return SUCCESS;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <ST7789_Draw_NOSIG>:

uint8_t ST7789_Draw_NOSIG(ST7789_HandleTypeDef *hst7789) {
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

	// Clear the area
	uint32_t cursor = LCD_WIDTH*(LCD_HEIGHT - 7*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 7*FONTSCALE_NOSIGNAL);
 8002f98:	4b46      	ldr	r3, [pc, #280]	@ (80030b4 <ST7789_Draw_NOSIG+0x124>)
 8002f9a:	617b      	str	r3, [r7, #20]
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	e012      	b.n	8002fc8 <ST7789_Draw_NOSIG+0x38>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_NOSIGNAL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	440b      	add	r3, r1
 8002fb8:	2260      	movs	r2, #96	@ 0x60
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f018 fa40 	bl	801b442 <memset>
	for (uint32_t x = 0; x < 66*FONTSCALE_NOSIGNAL; x++) {
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8002fce:	d3e8      	bcc.n	8002fa2 <ST7789_Draw_NOSIG+0x12>
	}

	// Draw the NO SIGNAL symbol
		cursor = LCD_WIDTH*(LCD_HEIGHT - 9*FONTSCALE_NOSIGNAL)*2 + (LCD_WIDTH - 4*FONTSCALE_NOSIGNAL);
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <ST7789_Draw_NOSIG+0x128>)
 8002fd2:	617b      	str	r3, [r7, #20]
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e064      	b.n	80030a4 <ST7789_Draw_NOSIG+0x114>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73bb      	strb	r3, [r7, #14]
 8002fde:	e05b      	b.n	8003098 <ST7789_Draw_NOSIG+0x108>
				uint8_t line_byte = TXT_NOSIGNAL[c*7 + l];
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	1a9a      	subs	r2, r3, r2
 8002fe8:	7bbb      	ldrb	r3, [r7, #14]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a33      	ldr	r2, [pc, #204]	@ (80030bc <ST7789_Draw_NOSIG+0x12c>)
 8002fee:	5cd3      	ldrb	r3, [r2, r3]
 8002ff0:	72bb      	strb	r3, [r7, #10]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	737b      	strb	r3, [r7, #13]
 8002ff6:	e045      	b.n	8003084 <ST7789_Draw_NOSIG+0xf4>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8002ff8:	7aba      	ldrb	r2, [r7, #10]
 8002ffa:	7b7b      	ldrb	r3, [r7, #13]
 8002ffc:	fa42 f303 	asr.w	r3, r2, r3
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d03a      	beq.n	800307e <ST7789_Draw_NOSIG+0xee>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 8003008:	2300      	movs	r3, #0
 800300a:	733b      	strb	r3, [r7, #12]
 800300c:	e034      	b.n	8003078 <ST7789_Draw_NOSIG+0xe8>
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 800300e:	2300      	movs	r3, #0
 8003010:	72fb      	strb	r3, [r7, #11]
 8003012:	e02b      	b.n	800306c <ST7789_Draw_NOSIG+0xdc>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor    ] = 0xFF;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6919      	ldr	r1, [r3, #16]
 8003018:	7afa      	ldrb	r2, [r7, #11]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	461a      	mov	r2, r3
 8003024:	7b3b      	ldrb	r3, [r7, #12]
 8003026:	441a      	add	r2, r3
 8003028:	7b7b      	ldrb	r3, [r7, #13]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	461a      	mov	r2, r3
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	4413      	add	r3, r2
 8003036:	440b      	add	r3, r1
 8003038:	22ff      	movs	r2, #255	@ 0xff
 800303a:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_NOSIGNAL)*2 + cursor + 1] = 0xFF;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6919      	ldr	r1, [r3, #16]
 8003040:	7afa      	ldrb	r2, [r7, #11]
 8003042:	4613      	mov	r3, r2
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	1a9b      	subs	r3, r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	461a      	mov	r2, r3
 800304c:	7b3b      	ldrb	r3, [r7, #12]
 800304e:	441a      	add	r2, r3
 8003050:	7b7b      	ldrb	r3, [r7, #13]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	461a      	mov	r2, r3
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	4413      	add	r3, r2
 800305e:	3301      	adds	r3, #1
 8003060:	440b      	add	r3, r1
 8003062:	22ff      	movs	r2, #255	@ 0xff
 8003064:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_NOSIGNAL; x++) {
 8003066:	7afb      	ldrb	r3, [r7, #11]
 8003068:	3301      	adds	r3, #1
 800306a:	72fb      	strb	r3, [r7, #11]
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d9d0      	bls.n	8003014 <ST7789_Draw_NOSIG+0x84>
						for (uint8_t y = 0; y < FONTSCALE_NOSIGNAL; y++) {
 8003072:	7b3b      	ldrb	r3, [r7, #12]
 8003074:	3301      	adds	r3, #1
 8003076:	733b      	strb	r3, [r7, #12]
 8003078:	7b3b      	ldrb	r3, [r7, #12]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d9c7      	bls.n	800300e <ST7789_Draw_NOSIG+0x7e>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800307e:	7b7b      	ldrb	r3, [r7, #13]
 8003080:	3301      	adds	r3, #1
 8003082:	737b      	strb	r3, [r7, #13]
 8003084:	7b7b      	ldrb	r3, [r7, #13]
 8003086:	2b07      	cmp	r3, #7
 8003088:	d9b6      	bls.n	8002ff8 <ST7789_Draw_NOSIG+0x68>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_NOSIGNAL*2;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8003090:	617b      	str	r3, [r7, #20]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003092:	7bbb      	ldrb	r3, [r7, #14]
 8003094:	3301      	adds	r3, #1
 8003096:	73bb      	strb	r3, [r7, #14]
 8003098:	7bbb      	ldrb	r3, [r7, #14]
 800309a:	2b06      	cmp	r3, #6
 800309c:	d9a0      	bls.n	8002fe0 <ST7789_Draw_NOSIG+0x50>
		for (uint8_t c = 0; c < 9; c++) {		// Loop chars
 800309e:	7bfb      	ldrb	r3, [r7, #15]
 80030a0:	3301      	adds	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
 80030a6:	2b08      	cmp	r3, #8
 80030a8:	d997      	bls.n	8002fda <ST7789_Draw_NOSIG+0x4a>
			}
		}

		return SUCCESS;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	00022454 	.word	0x00022454
 80030b8:	00021560 	.word	0x00021560
 80030bc:	0801d8ec 	.word	0x0801d8ec

080030c0 <ST7789_Draw_DATA>:

uint8_t ST7789_Draw_DATA(ST7789_HandleTypeDef *hst7789, uint32_t frametime_ms) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08a      	sub	sp, #40	@ 0x28
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]

	uint16_t ms = frametime_ms;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if (ms > 999)
 80030ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80030d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80030d4:	d302      	bcc.n	80030dc <ST7789_Draw_DATA+0x1c>
		ms = 999;
 80030d6:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80030da:	84fb      	strh	r3, [r7, #38]	@ 0x26

	uint8_t digits[3] = {
 80030dc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80030de:	4a94      	ldr	r2, [pc, #592]	@ (8003330 <ST7789_Draw_DATA+0x270>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	4b92      	ldr	r3, [pc, #584]	@ (8003334 <ST7789_Draw_DATA+0x274>)
 80030ea:	fba3 1302 	umull	r1, r3, r3, r2
 80030ee:	08d9      	lsrs	r1, r3, #3
 80030f0:	460b      	mov	r3, r1
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	733b      	strb	r3, [r7, #12]
 8003100:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003102:	4a8c      	ldr	r2, [pc, #560]	@ (8003334 <ST7789_Draw_DATA+0x274>)
 8003104:	fba2 2303 	umull	r2, r3, r2, r3
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b89      	ldr	r3, [pc, #548]	@ (8003334 <ST7789_Draw_DATA+0x274>)
 800310e:	fba3 1302 	umull	r1, r3, r3, r2
 8003112:	08d9      	lsrs	r1, r3, #3
 8003114:	460b      	mov	r3, r1
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	b29b      	uxth	r3, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	737b      	strb	r3, [r7, #13]
 8003124:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003126:	4b83      	ldr	r3, [pc, #524]	@ (8003334 <ST7789_Draw_DATA+0x274>)
 8003128:	fba3 1302 	umull	r1, r3, r3, r2
 800312c:	08d9      	lsrs	r1, r3, #3
 800312e:	460b      	mov	r3, r1
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	73bb      	strb	r3, [r7, #14]
			(ms / 10)  % 10,
			 ms        % 10
	};

	// Clear the corner
	uint32_t cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 800313e:	4b7e      	ldr	r3, [pc, #504]	@ (8003338 <ST7789_Draw_DATA+0x278>)
 8003140:	623b      	str	r3, [r7, #32]
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e012      	b.n	800316e <ST7789_Draw_DATA+0xae>
		memset(hst7789->vram + cursor - x*LCD_WIDTH*2, 0x00, 24*FONTSCALE_FRAMETIME);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6919      	ldr	r1, [r3, #16]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	015b      	lsls	r3, r3, #5
 8003156:	461a      	mov	r2, r3
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	1a9b      	subs	r3, r3, r2
 800315c:	440b      	add	r3, r1
 800315e:	2218      	movs	r2, #24
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f018 f96d 	bl	801b442 <memset>
	for (uint32_t x = 0; x < 44*FONTSCALE_FRAMETIME; x++) {
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	2b2b      	cmp	r3, #43	@ 0x2b
 8003172:	d9e9      	bls.n	8003148 <ST7789_Draw_DATA+0x88>
	}


	// Draw the MS symbol
	cursor = (LCD_WIDTH*(LCD_HEIGHT-2) + 2)*2;
 8003174:	4b70      	ldr	r3, [pc, #448]	@ (8003338 <ST7789_Draw_DATA+0x278>)
 8003176:	623b      	str	r3, [r7, #32]
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 8003178:	2300      	movs	r3, #0
 800317a:	76fb      	strb	r3, [r7, #27]
 800317c:	e062      	b.n	8003244 <ST7789_Draw_DATA+0x184>
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 800317e:	2300      	movs	r3, #0
 8003180:	76bb      	strb	r3, [r7, #26]
 8003182:	e059      	b.n	8003238 <ST7789_Draw_DATA+0x178>
			uint8_t line_byte = TXT_MS[c*7 + l];
 8003184:	7efa      	ldrb	r2, [r7, #27]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9a      	subs	r2, r3, r2
 800318c:	7ebb      	ldrb	r3, [r7, #26]
 800318e:	4413      	add	r3, r2
 8003190:	4a6a      	ldr	r2, [pc, #424]	@ (800333c <ST7789_Draw_DATA+0x27c>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	743b      	strb	r3, [r7, #16]

			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003196:	2300      	movs	r3, #0
 8003198:	767b      	strb	r3, [r7, #25]
 800319a:	e043      	b.n	8003224 <ST7789_Draw_DATA+0x164>
				if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 800319c:	7c3a      	ldrb	r2, [r7, #16]
 800319e:	7e7b      	ldrb	r3, [r7, #25]
 80031a0:	fa42 f303 	asr.w	r3, r2, r3
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d038      	beq.n	800321e <ST7789_Draw_DATA+0x15e>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 80031ac:	2300      	movs	r3, #0
 80031ae:	763b      	strb	r3, [r7, #24]
 80031b0:	e032      	b.n	8003218 <ST7789_Draw_DATA+0x158>
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
 80031b6:	e029      	b.n	800320c <ST7789_Draw_DATA+0x14c>
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6919      	ldr	r1, [r3, #16]
 80031bc:	7dfa      	ldrb	r2, [r7, #23]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	461a      	mov	r2, r3
 80031c8:	7e3b      	ldrb	r3, [r7, #24]
 80031ca:	441a      	add	r2, r3
 80031cc:	7e7b      	ldrb	r3, [r7, #25]
 80031ce:	4413      	add	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	461a      	mov	r2, r3
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	4413      	add	r3, r2
 80031d8:	440b      	add	r3, r1
 80031da:	22ff      	movs	r2, #255	@ 0xff
 80031dc:	701a      	strb	r2, [r3, #0]
							hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6919      	ldr	r1, [r3, #16]
 80031e2:	7dfa      	ldrb	r2, [r7, #23]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	461a      	mov	r2, r3
 80031ee:	7e3b      	ldrb	r3, [r7, #24]
 80031f0:	441a      	add	r2, r3
 80031f2:	7e7b      	ldrb	r3, [r7, #25]
 80031f4:	4413      	add	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	461a      	mov	r2, r3
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	4413      	add	r3, r2
 80031fe:	3301      	adds	r3, #1
 8003200:	440b      	add	r3, r1
 8003202:	22ff      	movs	r2, #255	@ 0xff
 8003204:	701a      	strb	r2, [r3, #0]
						for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	3301      	adds	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d0d2      	beq.n	80031b8 <ST7789_Draw_DATA+0xf8>
					for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003212:	7e3b      	ldrb	r3, [r7, #24]
 8003214:	3301      	adds	r3, #1
 8003216:	763b      	strb	r3, [r7, #24]
 8003218:	7e3b      	ldrb	r3, [r7, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0c9      	beq.n	80031b2 <ST7789_Draw_DATA+0xf2>
			for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 800321e:	7e7b      	ldrb	r3, [r7, #25]
 8003220:	3301      	adds	r3, #1
 8003222:	767b      	strb	r3, [r7, #25]
 8003224:	7e7b      	ldrb	r3, [r7, #25]
 8003226:	2b07      	cmp	r3, #7
 8003228:	d9b8      	bls.n	800319c <ST7789_Draw_DATA+0xdc>
						}
					}
				}
			}
			cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 800322a:	6a3b      	ldr	r3, [r7, #32]
 800322c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003230:	623b      	str	r3, [r7, #32]
		for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003232:	7ebb      	ldrb	r3, [r7, #26]
 8003234:	3301      	adds	r3, #1
 8003236:	76bb      	strb	r3, [r7, #26]
 8003238:	7ebb      	ldrb	r3, [r7, #26]
 800323a:	2b06      	cmp	r3, #6
 800323c:	d9a2      	bls.n	8003184 <ST7789_Draw_DATA+0xc4>
	for (uint8_t c = 0; c < 3; c++) {		// Loop chars
 800323e:	7efb      	ldrb	r3, [r7, #27]
 8003240:	3301      	adds	r3, #1
 8003242:	76fb      	strb	r3, [r7, #27]
 8003244:	7efb      	ldrb	r3, [r7, #27]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d999      	bls.n	800317e <ST7789_Draw_DATA+0xbe>
		}
	}

	// Draw the Digits
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 800324a:	2300      	movs	r3, #0
 800324c:	75bb      	strb	r3, [r7, #22]
 800324e:	e067      	b.n	8003320 <ST7789_Draw_DATA+0x260>
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 8003250:	2300      	movs	r3, #0
 8003252:	757b      	strb	r3, [r7, #21]
 8003254:	e05e      	b.n	8003314 <ST7789_Draw_DATA+0x254>
				uint8_t line_byte = TXT_NUM[digits[c]*7 + l];
 8003256:	7dbb      	ldrb	r3, [r7, #22]
 8003258:	3328      	adds	r3, #40	@ 0x28
 800325a:	443b      	add	r3, r7
 800325c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8003260:	461a      	mov	r2, r3
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	1a9a      	subs	r2, r3, r2
 8003268:	7d7b      	ldrb	r3, [r7, #21]
 800326a:	4413      	add	r3, r2
 800326c:	4a34      	ldr	r2, [pc, #208]	@ (8003340 <ST7789_Draw_DATA+0x280>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	747b      	strb	r3, [r7, #17]

				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 8003272:	2300      	movs	r3, #0
 8003274:	753b      	strb	r3, [r7, #20]
 8003276:	e043      	b.n	8003300 <ST7789_Draw_DATA+0x240>
					if ((line_byte >> b) & 0x01) {	// Check if bit is 1
 8003278:	7c7a      	ldrb	r2, [r7, #17]
 800327a:	7d3b      	ldrb	r3, [r7, #20]
 800327c:	fa42 f303 	asr.w	r3, r2, r3
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d038      	beq.n	80032fa <ST7789_Draw_DATA+0x23a>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 8003288:	2300      	movs	r3, #0
 800328a:	74fb      	strb	r3, [r7, #19]
 800328c:	e032      	b.n	80032f4 <ST7789_Draw_DATA+0x234>
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 800328e:	2300      	movs	r3, #0
 8003290:	74bb      	strb	r3, [r7, #18]
 8003292:	e029      	b.n	80032e8 <ST7789_Draw_DATA+0x228>
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor    ] = 0xFF;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6919      	ldr	r1, [r3, #16]
 8003298:	7cba      	ldrb	r2, [r7, #18]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	461a      	mov	r2, r3
 80032a4:	7cfb      	ldrb	r3, [r7, #19]
 80032a6:	441a      	add	r2, r3
 80032a8:	7d3b      	ldrb	r3, [r7, #20]
 80032aa:	4413      	add	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	461a      	mov	r2, r3
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	4413      	add	r3, r2
 80032b4:	440b      	add	r3, r1
 80032b6:	22ff      	movs	r2, #255	@ 0xff
 80032b8:	701a      	strb	r2, [r3, #0]
								hst7789->vram[(x*LCD_WIDTH + y + b*FONTSCALE_FRAMETIME)*2 + cursor + 1] = 0xFF;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6919      	ldr	r1, [r3, #16]
 80032be:	7cba      	ldrb	r2, [r7, #18]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	461a      	mov	r2, r3
 80032ca:	7cfb      	ldrb	r3, [r7, #19]
 80032cc:	441a      	add	r2, r3
 80032ce:	7d3b      	ldrb	r3, [r7, #20]
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	461a      	mov	r2, r3
 80032d6:	6a3b      	ldr	r3, [r7, #32]
 80032d8:	4413      	add	r3, r2
 80032da:	3301      	adds	r3, #1
 80032dc:	440b      	add	r3, r1
 80032de:	22ff      	movs	r2, #255	@ 0xff
 80032e0:	701a      	strb	r2, [r3, #0]
							for (uint8_t x = 0; x < FONTSCALE_FRAMETIME; x++) {
 80032e2:	7cbb      	ldrb	r3, [r7, #18]
 80032e4:	3301      	adds	r3, #1
 80032e6:	74bb      	strb	r3, [r7, #18]
 80032e8:	7cbb      	ldrb	r3, [r7, #18]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0d2      	beq.n	8003294 <ST7789_Draw_DATA+0x1d4>
						for (uint8_t y = 0; y < FONTSCALE_FRAMETIME; y++) {
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	3301      	adds	r3, #1
 80032f2:	74fb      	strb	r3, [r7, #19]
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0c9      	beq.n	800328e <ST7789_Draw_DATA+0x1ce>
				for (uint8_t b = 0; b < 8; b++) {		// Loop bits
 80032fa:	7d3b      	ldrb	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	753b      	strb	r3, [r7, #20]
 8003300:	7d3b      	ldrb	r3, [r7, #20]
 8003302:	2b07      	cmp	r3, #7
 8003304:	d9b8      	bls.n	8003278 <ST7789_Draw_DATA+0x1b8>
							}
						}
					}
				}
				cursor -= LCD_WIDTH*FONTSCALE_FRAMETIME*2;
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800330c:	623b      	str	r3, [r7, #32]
			for (uint8_t l = 0; l < 7; l++) {	// Loop lines
 800330e:	7d7b      	ldrb	r3, [r7, #21]
 8003310:	3301      	adds	r3, #1
 8003312:	757b      	strb	r3, [r7, #21]
 8003314:	7d7b      	ldrb	r3, [r7, #21]
 8003316:	2b06      	cmp	r3, #6
 8003318:	d99d      	bls.n	8003256 <ST7789_Draw_DATA+0x196>
	for (uint8_t c = 0; c < 3; c++) {		// Loop digits
 800331a:	7dbb      	ldrb	r3, [r7, #22]
 800331c:	3301      	adds	r3, #1
 800331e:	75bb      	strb	r3, [r7, #22]
 8003320:	7dbb      	ldrb	r3, [r7, #22]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d994      	bls.n	8003250 <ST7789_Draw_DATA+0x190>
			}
		}

	return SUCCESS;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3728      	adds	r7, #40	@ 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	51eb851f 	.word	0x51eb851f
 8003334:	cccccccd 	.word	0xcccccccd
 8003338:	00025444 	.word	0x00025444
 800333c:	0801d92c 	.word	0x0801d92c
 8003340:	0801d944 	.word	0x0801d944

08003344 <ST7789_DMATransmitCplt>:

void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	711a      	strb	r2, [r3, #4]

	// Check the state of the update sequence
	if (hst7789->update_sequence < 2) {
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	7d1b      	ldrb	r3, [r3, #20]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d80b      	bhi.n	8003372 <ST7789_DMATransmitCplt+0x2e>
		// Immediately start the next update in the sequence
		hst7789->update_sequence++;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7d1b      	ldrb	r3, [r3, #20]
 800335e:	3301      	adds	r3, #1
 8003360:	b2da      	uxtb	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	751a      	strb	r2, [r3, #20]
		ST7789_UpdateSector(hst7789, hst7789->update_sequence);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	7d1b      	ldrb	r3, [r3, #20]
 800336a:	4619      	mov	r1, r3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff fd8a 	bl	8002e86 <ST7789_UpdateSector>
	}
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <STC3100_ReadRegister>:
 *      Author: Loochis
 */

#include "STC3100.h"

uint8_t STC3100_ReadRegister(STC3100_HandleTypeDef *hstc, uint8_t reg, uint8_t *pData, uint8_t len) {
 800337a:	b580      	push	{r7, lr}
 800337c:	b086      	sub	sp, #24
 800337e:	af02      	add	r7, sp, #8
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	461a      	mov	r2, r3
 8003386:	460b      	mov	r3, r1
 8003388:	72fb      	strb	r3, [r7, #11]
 800338a:	4613      	mov	r3, r2
 800338c:	72bb      	strb	r3, [r7, #10]
	// Start transfer, write reg addr as WRITE
	if (HAL_I2C_Master_Transmit(hstc->i2c_handle, (hstc->address) << 1, &reg, 1, 10))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	791b      	ldrb	r3, [r3, #4]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	b299      	uxth	r1, r3
 800339a:	f107 020b 	add.w	r2, r7, #11
 800339e:	230a      	movs	r3, #10
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2301      	movs	r3, #1
 80033a4:	f004 fe1c 	bl	8007fe0 <HAL_I2C_Master_Transmit>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <STC3100_ReadRegister+0x38>
		return ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e016      	b.n	80033e0 <STC3100_ReadRegister+0x66>

	// Read 2 bytes in
	if (HAL_I2C_Master_Receive(hstc->i2c_handle, ((hstc->address) << 1) | 1, pData, len, 10))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	791b      	ldrb	r3, [r3, #4]
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	b21b      	sxth	r3, r3
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	b299      	uxth	r1, r3
 80033c8:	7abb      	ldrb	r3, [r7, #10]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	220a      	movs	r2, #10
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	f004 ff1d 	bl	8008210 <HAL_I2C_Master_Receive>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <STC3100_ReadRegister+0x66>
		return ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e7ff      	b.n	80033e0 <STC3100_ReadRegister+0x66>
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <STC3100_Init>:

uint8_t STC3100_Init(STC3100_HandleTypeDef *hstc) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	return HAL_I2C_IsDeviceReady(hstc->i2c_handle, (hstc->address) << 1, 3, 100);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	791b      	ldrb	r3, [r3, #4]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	b299      	uxth	r1, r3
 80033fc:	2364      	movs	r3, #100	@ 0x64
 80033fe:	2203      	movs	r2, #3
 8003400:	f005 f910 	bl	8008624 <HAL_I2C_IsDeviceReady>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <STC3100_Get>:

uint8_t STC3100_Get(STC3100_HandleTypeDef *hstc) {
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]

	uint8_t counter[2] = {0, 0};
 8003416:	2300      	movs	r3, #0
 8003418:	81bb      	strh	r3, [r7, #12]
	uint8_t reg = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]

	if (STC3100_ReadRegister(hstc, REG_COUNTER_LOW, counter, 1))
 800341e:	f107 020c 	add.w	r2, r7, #12
 8003422:	2301      	movs	r3, #1
 8003424:	2104      	movs	r1, #4
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa7 	bl	800337a <STC3100_ReadRegister>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <STC3100_Get+0x28>
		return ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <STC3100_Get+0x2a>
//	if (HAL_I2C_Master_Transmit(hstc->i2c_handle, (hstc->address) << 1, REG_CHARGE_HIGH, 1, 10))
//		return ERROR;
//	if (HAL_I2C_Master_Receive(hstc->i2c_handle, (hstc->address) << 1, &charge, 1, 10))
//		return ERROR;

	return SUCCESS;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003446:	2003      	movs	r0, #3
 8003448:	f001 fc3e 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800344c:	f00c f89c 	bl	800f588 <HAL_RCC_GetSysClockFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b15      	ldr	r3, [pc, #84]	@ (80034a8 <HAL_Init+0x68>)
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	4913      	ldr	r1, [pc, #76]	@ (80034ac <HAL_Init+0x6c>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
 8003468:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800346a:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <HAL_Init+0x68>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	4a0e      	ldr	r2, [pc, #56]	@ (80034ac <HAL_Init+0x6c>)
 8003474:	5cd3      	ldrb	r3, [r2, r3]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	fa22 f303 	lsr.w	r3, r2, r3
 8003480:	4a0b      	ldr	r2, [pc, #44]	@ (80034b0 <HAL_Init+0x70>)
 8003482:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003484:	4a0b      	ldr	r2, [pc, #44]	@ (80034b4 <HAL_Init+0x74>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800348a:	200f      	movs	r0, #15
 800348c:	f000 f814 	bl	80034b8 <HAL_InitTick>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e002      	b.n	80034a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800349a:	f7fe fb77 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	0801d5f4 	.word	0x0801d5f4
 80034b0:	24000244 	.word	0x24000244
 80034b4:	24000240 	.word	0x24000240

080034b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <HAL_InitTick+0x60>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e021      	b.n	8003510 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <HAL_InitTick+0x64>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <HAL_InitTick+0x60>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fc23 	bl	8004d2e <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00e      	b.n	8003510 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d80a      	bhi.n	800350e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f8:	2200      	movs	r2, #0
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f001 fbed 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003504:	4a06      	ldr	r2, [pc, #24]	@ (8003520 <HAL_InitTick+0x68>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	2400024c 	.word	0x2400024c
 800351c:	24000240 	.word	0x24000240
 8003520:	24000248 	.word	0x24000248

08003524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	@ (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2400024c 	.word	0x2400024c
 8003548:	2404729c 	.word	0x2404729c

0800354c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	2404729c 	.word	0x2404729c

08003564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b0a      	ldr	r3, [pc, #40]	@ (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	2400024c 	.word	0x2400024c

080035ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035b0:	4b03      	ldr	r3, [pc, #12]	@ (80035c0 <HAL_GetREVID+0x14>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0c1b      	lsrs	r3, r3, #16
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	5c001000 	.word	0x5c001000

080035c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	431a      	orrs	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	609a      	str	r2, [r3, #8]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b083      	sub	sp, #12
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003620:	4618      	mov	r0, r3
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <LL_ADC_SetChannelPreselection+0x24>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	0e9b      	lsrs	r3, r3, #26
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2201      	movs	r2, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	e015      	b.n	800367c <LL_ADC_SetChannelPreselection+0x50>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8003666:	2320      	movs	r3, #32
 8003668:	e003      	b.n	8003672 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	2201      	movs	r2, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	69d2      	ldr	r2, [r2, #28]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003692:	b480      	push	{r7}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3360      	adds	r3, #96	@ 0x60
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	430b      	orrs	r3, r1
 80036c0:	431a      	orrs	r2, r3
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	611a      	str	r2, [r3, #16]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3360      	adds	r3, #96	@ 0x60
 8003714:	461a      	mov	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	431a      	orrs	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	601a      	str	r2, [r3, #0]
  }
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003760:	b480      	push	{r7}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3330      	adds	r3, #48	@ 0x30
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	0a1b      	lsrs	r3, r3, #8
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	4413      	add	r3, r2
 800377e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	211f      	movs	r1, #31
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	f003 011f 	and.w	r1, r3, #31
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	431a      	orrs	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	60da      	str	r2, [r3, #12]
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80037de:	b480      	push	{r7}
 80037e0:	b087      	sub	sp, #28
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3314      	adds	r3, #20
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	0e5b      	lsrs	r3, r3, #25
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	4413      	add	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0d1b      	lsrs	r3, r3, #20
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2107      	movs	r1, #7
 800380c:	fa01 f303 	lsl.w	r3, r1, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	401a      	ands	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	0d1b      	lsrs	r3, r3, #20
 8003818:	f003 031f 	and.w	r3, r3, #31
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	fa01 f303 	lsl.w	r3, r1, r3
 8003822:	431a      	orrs	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003828:	bf00      	nop
 800382a:	371c      	adds	r7, #28
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800384c:	43db      	mvns	r3, r3
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0318 	and.w	r3, r3, #24
 8003856:	4908      	ldr	r1, [pc, #32]	@ (8003878 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003858:	40d9      	lsrs	r1, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	400b      	ands	r3, r1
 800385e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003862:	431a      	orrs	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	000fffff 	.word	0x000fffff

0800387c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 031f 	and.w	r3, r3, #31
}
 800388c:	4618      	mov	r0, r3
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6093      	str	r3, [r2, #8]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	5fffffc0 	.word	0x5fffffc0

080038bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d0:	d101      	bne.n	80038d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <LL_ADC_EnableInternalRegulator+0x24>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	6fffffc0 	.word	0x6fffffc0

0800390c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800391c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003920:	d101      	bne.n	8003926 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <LL_ADC_Enable+0x24>)
 8003942:	4013      	ands	r3, r2
 8003944:	f043 0201 	orr.w	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	7fffffc0 	.word	0x7fffffc0

0800395c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <LL_ADC_IsEnabled+0x18>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <LL_ADC_IsEnabled+0x1a>
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	4b05      	ldr	r3, [pc, #20]	@ (80039a8 <LL_ADC_REG_StartConversion+0x24>)
 8003992:	4013      	ands	r3, r2
 8003994:	f043 0204 	orr.w	r2, r3, #4
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	7fffffc0 	.word	0x7fffffc0

080039ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d101      	bne.n	80039c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d101      	bne.n	80039ea <LL_ADC_INJ_IsConversionOngoing+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e18f      	b.n	8003d32 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fe f8cd 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff3f 	bl	80038bc <LL_ADC_IsDeepPowerDownEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d004      	beq.n	8003a4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff25 	bl	8003898 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff5a 	bl	800390c <LL_ADC_IsInternalRegulatorEnabled>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d114      	bne.n	8003a88 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff ff3e 	bl	80038e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a68:	4b87      	ldr	r3, [pc, #540]	@ (8003c88 <HAL_ADC_Init+0x290>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	099b      	lsrs	r3, r3, #6
 8003a6e:	4a87      	ldr	r2, [pc, #540]	@ (8003c8c <HAL_ADC_Init+0x294>)
 8003a70:	fba2 2303 	umull	r2, r3, r2, r3
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	3301      	adds	r3, #1
 8003a78:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a7a:	e002      	b.n	8003a82 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff3d 	bl	800390c <LL_ADC_IsInternalRegulatorEnabled>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f043 0210 	orr.w	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa8:	f043 0201 	orr.w	r2, r3, #1
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff77 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003abe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 8129 	bne.w	8003d20 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f040 8125 	bne.w	8003d20 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ada:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ade:	f043 0202 	orr.w	r2, r3, #2
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff ff36 	bl	800395c <LL_ADC_IsEnabled>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d136      	bne.n	8003b64 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a65      	ldr	r2, [pc, #404]	@ (8003c90 <HAL_ADC_Init+0x298>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_ADC_Init+0x112>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a63      	ldr	r2, [pc, #396]	@ (8003c94 <HAL_ADC_Init+0x29c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10e      	bne.n	8003b28 <HAL_ADC_Init+0x130>
 8003b0a:	4861      	ldr	r0, [pc, #388]	@ (8003c90 <HAL_ADC_Init+0x298>)
 8003b0c:	f7ff ff26 	bl	800395c <LL_ADC_IsEnabled>
 8003b10:	4604      	mov	r4, r0
 8003b12:	4860      	ldr	r0, [pc, #384]	@ (8003c94 <HAL_ADC_Init+0x29c>)
 8003b14:	f7ff ff22 	bl	800395c <LL_ADC_IsEnabled>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4323      	orrs	r3, r4
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	bf0c      	ite	eq
 8003b20:	2301      	moveq	r3, #1
 8003b22:	2300      	movne	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e008      	b.n	8003b3a <HAL_ADC_Init+0x142>
 8003b28:	485b      	ldr	r0, [pc, #364]	@ (8003c98 <HAL_ADC_Init+0x2a0>)
 8003b2a:	f7ff ff17 	bl	800395c <LL_ADC_IsEnabled>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d012      	beq.n	8003b64 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a53      	ldr	r2, [pc, #332]	@ (8003c90 <HAL_ADC_Init+0x298>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_ADC_Init+0x15a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a51      	ldr	r2, [pc, #324]	@ (8003c94 <HAL_ADC_Init+0x29c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_Init+0x15e>
 8003b52:	4a52      	ldr	r2, [pc, #328]	@ (8003c9c <HAL_ADC_Init+0x2a4>)
 8003b54:	e000      	b.n	8003b58 <HAL_ADC_Init+0x160>
 8003b56:	4a52      	ldr	r2, [pc, #328]	@ (8003ca0 <HAL_ADC_Init+0x2a8>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f7ff fd30 	bl	80035c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003b64:	f7ff fd22 	bl	80035ac <HAL_GetREVID>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d914      	bls.n	8003b9c <HAL_ADC_Init+0x1a4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d110      	bne.n	8003b9c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	7d5b      	ldrb	r3, [r3, #21]
 8003b7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b84:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b8a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7f1b      	ldrb	r3, [r3, #28]
 8003b90:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003b92:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b94:	f043 030c 	orr.w	r3, r3, #12
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e00d      	b.n	8003bb8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	7d5b      	ldrb	r3, [r3, #21]
 8003ba0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ba6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003bac:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	7f1b      	ldrb	r3, [r3, #28]
 8003bb2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7f1b      	ldrb	r3, [r3, #28]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	045b      	lsls	r3, r3, #17
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca4 <HAL_ADC_Init+0x2ac>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	69b9      	ldr	r1, [r7, #24]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fed2 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003c08:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fedf 	bl	80039d2 <LL_ADC_INJ_IsConversionOngoing>
 8003c14:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d15f      	bne.n	8003cdc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d15c      	bne.n	8003cdc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7d1b      	ldrb	r3, [r3, #20]
 8003c26:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_ADC_Init+0x2b0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d130      	bne.n	8003cb0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c52:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <HAL_ADC_Init+0x2b4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0411      	lsls	r1, r2, #16
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003c70:	4311      	orrs	r1, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c76:	430a      	orrs	r2, r1
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	611a      	str	r2, [r3, #16]
 8003c84:	e01c      	b.n	8003cc0 <HAL_ADC_Init+0x2c8>
 8003c86:	bf00      	nop
 8003c88:	24000240 	.word	0x24000240
 8003c8c:	053e2d63 	.word	0x053e2d63
 8003c90:	40022000 	.word	0x40022000
 8003c94:	40022100 	.word	0x40022100
 8003c98:	58026000 	.word	0x58026000
 8003c9c:	40022300 	.word	0x40022300
 8003ca0:	58026300 	.word	0x58026300
 8003ca4:	fff0c003 	.word	0xfff0c003
 8003ca8:	ffffbffc 	.word	0xffffbffc
 8003cac:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fd16 	bl	8004708 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10c      	bne.n	8003cfe <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f023 010f 	bic.w	r1, r3, #15
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	1e5a      	subs	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cfc:	e007      	b.n	8003d0e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 020f 	bic.w	r2, r2, #15
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	f023 0303 	bic.w	r3, r3, #3
 8003d16:	f043 0201 	orr.w	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d1e:	e007      	b.n	8003d30 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d24:	f043 0210 	orr.w	r2, r3, #16
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3724      	adds	r7, #36	@ 0x24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	bf00      	nop

08003d3c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a55      	ldr	r2, [pc, #340]	@ (8003ea4 <HAL_ADC_Start_DMA+0x168>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_ADC_Start_DMA+0x20>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a54      	ldr	r2, [pc, #336]	@ (8003ea8 <HAL_ADC_Start_DMA+0x16c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_ADC_Start_DMA+0x24>
 8003d5c:	4b53      	ldr	r3, [pc, #332]	@ (8003eac <HAL_ADC_Start_DMA+0x170>)
 8003d5e:	e000      	b.n	8003d62 <HAL_ADC_Start_DMA+0x26>
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_ADC_Start_DMA+0x174>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff fd8a 	bl	800387c <LL_ADC_GetMultimode>
 8003d68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fe1c 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 808c 	bne.w	8003e94 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_Start_DMA+0x4e>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e087      	b.n	8003e9a <HAL_ADC_Start_DMA+0x15e>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d002      	beq.n	8003da4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b09      	cmp	r3, #9
 8003da2:	d170      	bne.n	8003e86 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 fb91 	bl	80044cc <ADC_Enable>
 8003daa:	4603      	mov	r3, r0
 8003dac:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d163      	bne.n	8003e7c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003db8:	4b3e      	ldr	r3, [pc, #248]	@ (8003eb4 <HAL_ADC_Start_DMA+0x178>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a37      	ldr	r2, [pc, #220]	@ (8003ea8 <HAL_ADC_Start_DMA+0x16c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d002      	beq.n	8003dd4 <HAL_ADC_Start_DMA+0x98>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADC_Start_DMA+0x9a>
 8003dd4:	4b33      	ldr	r3, [pc, #204]	@ (8003ea4 <HAL_ADC_Start_DMA+0x168>)
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d002      	beq.n	8003de4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d006      	beq.n	8003e0a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e00:	f023 0206 	bic.w	r2, r3, #6
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e14:	4a28      	ldr	r2, [pc, #160]	@ (8003eb8 <HAL_ADC_Start_DMA+0x17c>)
 8003e16:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1c:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <HAL_ADC_Start_DMA+0x180>)
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e24:	4a26      	ldr	r2, [pc, #152]	@ (8003ec0 <HAL_ADC_Start_DMA+0x184>)
 8003e26:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	221c      	movs	r2, #28
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0210 	orr.w	r2, r2, #16
 8003e46:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7ff fcb0 	bl	80037b8 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3340      	adds	r3, #64	@ 0x40
 8003e62:	4619      	mov	r1, r3
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f001 fb42 	bl	80054f0 <HAL_DMA_Start_IT>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fd85 	bl	8003984 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003e7a:	e00d      	b.n	8003e98 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003e84:	e008      	b.n	8003e98 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003e92:	e001      	b.n	8003e98 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
 8003e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3718      	adds	r7, #24
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40022100 	.word	0x40022100
 8003eac:	40022300 	.word	0x40022300
 8003eb0:	58026300 	.word	0x58026300
 8003eb4:	fffff0fe 	.word	0xfffff0fe
 8003eb8:	080045e1 	.word	0x080045e1
 8003ebc:	080046b9 	.word	0x080046b9
 8003ec0:	080046d5 	.word	0x080046d5

08003ec4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b08d      	sub	sp, #52	@ 0x34
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a65      	ldr	r2, [pc, #404]	@ (800409c <HAL_ADC_ConfigChannel+0x1b0>)
 8003f06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x2a>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e2c7      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x5ba>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fd42 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f040 82ac 	bne.w	8004488 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db2c      	blt.n	8003f92 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d108      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x6a>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	0e9b      	lsrs	r3, r3, #26
 8003f4a:	f003 031f 	and.w	r3, r3, #31
 8003f4e:	2201      	movs	r2, #1
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	e016      	b.n	8003f84 <HAL_ADC_ConfigChannel+0x98>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	fa93 f3a3 	rbit	r3, r3
 8003f62:	613b      	str	r3, [r7, #16]
  return result;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003f6e:	2320      	movs	r3, #32
 8003f70:	e003      	b.n	8003f7a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	fab3 f383 	clz	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2201      	movs	r2, #1
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	69d1      	ldr	r1, [r2, #28]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7ff fbde 	bl	8003760 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fcff 	bl	80039ac <LL_ADC_REG_IsConversionOngoing>
 8003fae:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fd0c 	bl	80039d2 <LL_ADC_INJ_IsConversionOngoing>
 8003fba:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f040 80b8 	bne.w	8004134 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f040 80b4 	bne.w	8004134 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6819      	ldr	r1, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f7ff fc00 	bl	80037de <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003fde:	4b30      	ldr	r3, [pc, #192]	@ (80040a0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fea:	d10b      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x118>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	e01d      	b.n	8004040 <HAL_ADC_ConfigChannel+0x154>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_ADC_ConfigChannel+0x13e>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	089b      	lsrs	r3, r3, #2
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	e00a      	b.n	8004040 <HAL_ADC_ConfigChannel+0x154>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	089b      	lsrs	r3, r3, #2
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b04      	cmp	r3, #4
 8004048:	d02c      	beq.n	80040a4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6919      	ldr	r1, [r3, #16]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f7ff fb1b 	bl	8003692 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6919      	ldr	r1, [r3, #16]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	7e5b      	ldrb	r3, [r3, #25]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x186>
 800406c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004070:	e000      	b.n	8004074 <HAL_ADC_ConfigChannel+0x188>
 8004072:	2300      	movs	r3, #0
 8004074:	461a      	mov	r2, r3
 8004076:	f7ff fb45 	bl	8003704 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6919      	ldr	r1, [r3, #16]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	7e1b      	ldrb	r3, [r3, #24]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d102      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x1a4>
 800408a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800408e:	e000      	b.n	8004092 <HAL_ADC_ConfigChannel+0x1a6>
 8004090:	2300      	movs	r3, #0
 8004092:	461a      	mov	r2, r3
 8004094:	f7ff fb1d 	bl	80036d2 <LL_ADC_SetDataRightShift>
 8004098:	e04c      	b.n	8004134 <HAL_ADC_ConfigChannel+0x248>
 800409a:	bf00      	nop
 800409c:	47ff0000 	.word	0x47ff0000
 80040a0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	069b      	lsls	r3, r3, #26
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	069b      	lsls	r3, r3, #26
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800410e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004116:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	429a      	cmp	r2, r3
 8004122:	d107      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004132:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fc0f 	bl	800395c <LL_ADC_IsEnabled>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 81aa 	bne.w	800449a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f7ff fb6e 	bl	8003834 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4a87      	ldr	r2, [pc, #540]	@ (800437c <HAL_ADC_ConfigChannel+0x490>)
 800415e:	4293      	cmp	r3, r2
 8004160:	f040 809a 	bne.w	8004298 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4984      	ldr	r1, [pc, #528]	@ (8004380 <HAL_ADC_ConfigChannel+0x494>)
 800416e:	428b      	cmp	r3, r1
 8004170:	d147      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x316>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4983      	ldr	r1, [pc, #524]	@ (8004384 <HAL_ADC_ConfigChannel+0x498>)
 8004178:	428b      	cmp	r3, r1
 800417a:	d040      	beq.n	80041fe <HAL_ADC_ConfigChannel+0x312>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4981      	ldr	r1, [pc, #516]	@ (8004388 <HAL_ADC_ConfigChannel+0x49c>)
 8004182:	428b      	cmp	r3, r1
 8004184:	d039      	beq.n	80041fa <HAL_ADC_ConfigChannel+0x30e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4980      	ldr	r1, [pc, #512]	@ (800438c <HAL_ADC_ConfigChannel+0x4a0>)
 800418c:	428b      	cmp	r3, r1
 800418e:	d032      	beq.n	80041f6 <HAL_ADC_ConfigChannel+0x30a>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	497e      	ldr	r1, [pc, #504]	@ (8004390 <HAL_ADC_ConfigChannel+0x4a4>)
 8004196:	428b      	cmp	r3, r1
 8004198:	d02b      	beq.n	80041f2 <HAL_ADC_ConfigChannel+0x306>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	497d      	ldr	r1, [pc, #500]	@ (8004394 <HAL_ADC_ConfigChannel+0x4a8>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d024      	beq.n	80041ee <HAL_ADC_ConfigChannel+0x302>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	497b      	ldr	r1, [pc, #492]	@ (8004398 <HAL_ADC_ConfigChannel+0x4ac>)
 80041aa:	428b      	cmp	r3, r1
 80041ac:	d01d      	beq.n	80041ea <HAL_ADC_ConfigChannel+0x2fe>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	497a      	ldr	r1, [pc, #488]	@ (800439c <HAL_ADC_ConfigChannel+0x4b0>)
 80041b4:	428b      	cmp	r3, r1
 80041b6:	d016      	beq.n	80041e6 <HAL_ADC_ConfigChannel+0x2fa>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4978      	ldr	r1, [pc, #480]	@ (80043a0 <HAL_ADC_ConfigChannel+0x4b4>)
 80041be:	428b      	cmp	r3, r1
 80041c0:	d00f      	beq.n	80041e2 <HAL_ADC_ConfigChannel+0x2f6>
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4977      	ldr	r1, [pc, #476]	@ (80043a4 <HAL_ADC_ConfigChannel+0x4b8>)
 80041c8:	428b      	cmp	r3, r1
 80041ca:	d008      	beq.n	80041de <HAL_ADC_ConfigChannel+0x2f2>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4975      	ldr	r1, [pc, #468]	@ (80043a8 <HAL_ADC_ConfigChannel+0x4bc>)
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d101      	bne.n	80041da <HAL_ADC_ConfigChannel+0x2ee>
 80041d6:	4b75      	ldr	r3, [pc, #468]	@ (80043ac <HAL_ADC_ConfigChannel+0x4c0>)
 80041d8:	e05a      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041da:	2300      	movs	r3, #0
 80041dc:	e058      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041de:	4b74      	ldr	r3, [pc, #464]	@ (80043b0 <HAL_ADC_ConfigChannel+0x4c4>)
 80041e0:	e056      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041e2:	4b74      	ldr	r3, [pc, #464]	@ (80043b4 <HAL_ADC_ConfigChannel+0x4c8>)
 80041e4:	e054      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041e6:	4b6e      	ldr	r3, [pc, #440]	@ (80043a0 <HAL_ADC_ConfigChannel+0x4b4>)
 80041e8:	e052      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041ea:	4b6c      	ldr	r3, [pc, #432]	@ (800439c <HAL_ADC_ConfigChannel+0x4b0>)
 80041ec:	e050      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041ee:	4b72      	ldr	r3, [pc, #456]	@ (80043b8 <HAL_ADC_ConfigChannel+0x4cc>)
 80041f0:	e04e      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041f2:	4b72      	ldr	r3, [pc, #456]	@ (80043bc <HAL_ADC_ConfigChannel+0x4d0>)
 80041f4:	e04c      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041f6:	4b72      	ldr	r3, [pc, #456]	@ (80043c0 <HAL_ADC_ConfigChannel+0x4d4>)
 80041f8:	e04a      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041fa:	4b72      	ldr	r3, [pc, #456]	@ (80043c4 <HAL_ADC_ConfigChannel+0x4d8>)
 80041fc:	e048      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 80041fe:	2301      	movs	r3, #1
 8004200:	e046      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4970      	ldr	r1, [pc, #448]	@ (80043c8 <HAL_ADC_ConfigChannel+0x4dc>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d140      	bne.n	800428e <HAL_ADC_ConfigChannel+0x3a2>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	495c      	ldr	r1, [pc, #368]	@ (8004384 <HAL_ADC_ConfigChannel+0x498>)
 8004212:	428b      	cmp	r3, r1
 8004214:	d039      	beq.n	800428a <HAL_ADC_ConfigChannel+0x39e>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	495b      	ldr	r1, [pc, #364]	@ (8004388 <HAL_ADC_ConfigChannel+0x49c>)
 800421c:	428b      	cmp	r3, r1
 800421e:	d032      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x39a>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4959      	ldr	r1, [pc, #356]	@ (800438c <HAL_ADC_ConfigChannel+0x4a0>)
 8004226:	428b      	cmp	r3, r1
 8004228:	d02b      	beq.n	8004282 <HAL_ADC_ConfigChannel+0x396>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4958      	ldr	r1, [pc, #352]	@ (8004390 <HAL_ADC_ConfigChannel+0x4a4>)
 8004230:	428b      	cmp	r3, r1
 8004232:	d024      	beq.n	800427e <HAL_ADC_ConfigChannel+0x392>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4956      	ldr	r1, [pc, #344]	@ (8004394 <HAL_ADC_ConfigChannel+0x4a8>)
 800423a:	428b      	cmp	r3, r1
 800423c:	d01d      	beq.n	800427a <HAL_ADC_ConfigChannel+0x38e>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4955      	ldr	r1, [pc, #340]	@ (8004398 <HAL_ADC_ConfigChannel+0x4ac>)
 8004244:	428b      	cmp	r3, r1
 8004246:	d016      	beq.n	8004276 <HAL_ADC_ConfigChannel+0x38a>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4953      	ldr	r1, [pc, #332]	@ (800439c <HAL_ADC_ConfigChannel+0x4b0>)
 800424e:	428b      	cmp	r3, r1
 8004250:	d00f      	beq.n	8004272 <HAL_ADC_ConfigChannel+0x386>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4952      	ldr	r1, [pc, #328]	@ (80043a0 <HAL_ADC_ConfigChannel+0x4b4>)
 8004258:	428b      	cmp	r3, r1
 800425a:	d008      	beq.n	800426e <HAL_ADC_ConfigChannel+0x382>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4951      	ldr	r1, [pc, #324]	@ (80043a8 <HAL_ADC_ConfigChannel+0x4bc>)
 8004262:	428b      	cmp	r3, r1
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0x37e>
 8004266:	4b51      	ldr	r3, [pc, #324]	@ (80043ac <HAL_ADC_ConfigChannel+0x4c0>)
 8004268:	e012      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 800426a:	2300      	movs	r3, #0
 800426c:	e010      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 800426e:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <HAL_ADC_ConfigChannel+0x4c8>)
 8004270:	e00e      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 8004272:	4b4b      	ldr	r3, [pc, #300]	@ (80043a0 <HAL_ADC_ConfigChannel+0x4b4>)
 8004274:	e00c      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 8004276:	4b49      	ldr	r3, [pc, #292]	@ (800439c <HAL_ADC_ConfigChannel+0x4b0>)
 8004278:	e00a      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 800427a:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <HAL_ADC_ConfigChannel+0x4cc>)
 800427c:	e008      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 800427e:	4b4f      	ldr	r3, [pc, #316]	@ (80043bc <HAL_ADC_ConfigChannel+0x4d0>)
 8004280:	e006      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 8004282:	4b4f      	ldr	r3, [pc, #316]	@ (80043c0 <HAL_ADC_ConfigChannel+0x4d4>)
 8004284:	e004      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 8004286:	4b4f      	ldr	r3, [pc, #316]	@ (80043c4 <HAL_ADC_ConfigChannel+0x4d8>)
 8004288:	e002      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <HAL_ADC_ConfigChannel+0x3a4>
 800428e:	2300      	movs	r3, #0
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7ff f9ca 	bl	800362c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f280 80fc 	bge.w	800449a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a36      	ldr	r2, [pc, #216]	@ (8004380 <HAL_ADC_ConfigChannel+0x494>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <HAL_ADC_ConfigChannel+0x3ca>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a45      	ldr	r2, [pc, #276]	@ (80043c8 <HAL_ADC_ConfigChannel+0x4dc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x3ce>
 80042b6:	4b45      	ldr	r3, [pc, #276]	@ (80043cc <HAL_ADC_ConfigChannel+0x4e0>)
 80042b8:	e000      	b.n	80042bc <HAL_ADC_ConfigChannel+0x3d0>
 80042ba:	4b45      	ldr	r3, [pc, #276]	@ (80043d0 <HAL_ADC_ConfigChannel+0x4e4>)
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff f9a7 	bl	8003610 <LL_ADC_GetCommonPathInternalCh>
 80042c2:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004380 <HAL_ADC_ConfigChannel+0x494>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d004      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x3ec>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a3d      	ldr	r2, [pc, #244]	@ (80043c8 <HAL_ADC_ConfigChannel+0x4dc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d10e      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x40a>
 80042d8:	4829      	ldr	r0, [pc, #164]	@ (8004380 <HAL_ADC_ConfigChannel+0x494>)
 80042da:	f7ff fb3f 	bl	800395c <LL_ADC_IsEnabled>
 80042de:	4604      	mov	r4, r0
 80042e0:	4839      	ldr	r0, [pc, #228]	@ (80043c8 <HAL_ADC_ConfigChannel+0x4dc>)
 80042e2:	f7ff fb3b 	bl	800395c <LL_ADC_IsEnabled>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4323      	orrs	r3, r4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e008      	b.n	8004308 <HAL_ADC_ConfigChannel+0x41c>
 80042f6:	4837      	ldr	r0, [pc, #220]	@ (80043d4 <HAL_ADC_ConfigChannel+0x4e8>)
 80042f8:	f7ff fb30 	bl	800395c <LL_ADC_IsEnabled>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80b3 	beq.w	8004474 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a31      	ldr	r2, [pc, #196]	@ (80043d8 <HAL_ADC_ConfigChannel+0x4ec>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d165      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x4f8>
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d160      	bne.n	80043e4 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2b      	ldr	r2, [pc, #172]	@ (80043d4 <HAL_ADC_ConfigChannel+0x4e8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	f040 80b6 	bne.w	800449a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a13      	ldr	r2, [pc, #76]	@ (8004380 <HAL_ADC_ConfigChannel+0x494>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d004      	beq.n	8004342 <HAL_ADC_ConfigChannel+0x456>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a22      	ldr	r2, [pc, #136]	@ (80043c8 <HAL_ADC_ConfigChannel+0x4dc>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x45a>
 8004342:	4a22      	ldr	r2, [pc, #136]	@ (80043cc <HAL_ADC_ConfigChannel+0x4e0>)
 8004344:	e000      	b.n	8004348 <HAL_ADC_ConfigChannel+0x45c>
 8004346:	4a22      	ldr	r2, [pc, #136]	@ (80043d0 <HAL_ADC_ConfigChannel+0x4e4>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f7ff f94a 	bl	80035ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004356:	4b21      	ldr	r3, [pc, #132]	@ (80043dc <HAL_ADC_ConfigChannel+0x4f0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	4a20      	ldr	r2, [pc, #128]	@ (80043e0 <HAL_ADC_ConfigChannel+0x4f4>)
 800435e:	fba2 2303 	umull	r2, r3, r2, r3
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	3301      	adds	r3, #1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800436a:	e002      	b.n	8004372 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b01      	subs	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f9      	bne.n	800436c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004378:	e08f      	b.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
 800437a:	bf00      	nop
 800437c:	47ff0000 	.word	0x47ff0000
 8004380:	40022000 	.word	0x40022000
 8004384:	04300002 	.word	0x04300002
 8004388:	08600004 	.word	0x08600004
 800438c:	0c900008 	.word	0x0c900008
 8004390:	10c00010 	.word	0x10c00010
 8004394:	14f00020 	.word	0x14f00020
 8004398:	2a000400 	.word	0x2a000400
 800439c:	2e300800 	.word	0x2e300800
 80043a0:	32601000 	.word	0x32601000
 80043a4:	43210000 	.word	0x43210000
 80043a8:	4b840000 	.word	0x4b840000
 80043ac:	4fb80000 	.word	0x4fb80000
 80043b0:	47520000 	.word	0x47520000
 80043b4:	36902000 	.word	0x36902000
 80043b8:	25b00200 	.word	0x25b00200
 80043bc:	21800100 	.word	0x21800100
 80043c0:	1d500080 	.word	0x1d500080
 80043c4:	19200040 	.word	0x19200040
 80043c8:	40022100 	.word	0x40022100
 80043cc:	40022300 	.word	0x40022300
 80043d0:	58026300 	.word	0x58026300
 80043d4:	58026000 	.word	0x58026000
 80043d8:	cb840000 	.word	0xcb840000
 80043dc:	24000240 	.word	0x24000240
 80043e0:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a31      	ldr	r2, [pc, #196]	@ (80044b0 <HAL_ADC_ConfigChannel+0x5c4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d11e      	bne.n	800442c <HAL_ADC_ConfigChannel+0x540>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d119      	bne.n	800442c <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2d      	ldr	r2, [pc, #180]	@ (80044b4 <HAL_ADC_ConfigChannel+0x5c8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d14b      	bne.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2c      	ldr	r2, [pc, #176]	@ (80044b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_ADC_ConfigChannel+0x52a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2a      	ldr	r2, [pc, #168]	@ (80044bc <HAL_ADC_ConfigChannel+0x5d0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_ADC_ConfigChannel+0x52e>
 8004416:	4a2a      	ldr	r2, [pc, #168]	@ (80044c0 <HAL_ADC_ConfigChannel+0x5d4>)
 8004418:	e000      	b.n	800441c <HAL_ADC_ConfigChannel+0x530>
 800441a:	4a2a      	ldr	r2, [pc, #168]	@ (80044c4 <HAL_ADC_ConfigChannel+0x5d8>)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f7ff f8e0 	bl	80035ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800442a:	e036      	b.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a25      	ldr	r2, [pc, #148]	@ (80044c8 <HAL_ADC_ConfigChannel+0x5dc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d131      	bne.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d12c      	bne.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <HAL_ADC_ConfigChannel+0x5c8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d127      	bne.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1a      	ldr	r2, [pc, #104]	@ (80044b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_ADC_ConfigChannel+0x572>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a18      	ldr	r2, [pc, #96]	@ (80044bc <HAL_ADC_ConfigChannel+0x5d0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d101      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x576>
 800445e:	4a18      	ldr	r2, [pc, #96]	@ (80044c0 <HAL_ADC_ConfigChannel+0x5d4>)
 8004460:	e000      	b.n	8004464 <HAL_ADC_ConfigChannel+0x578>
 8004462:	4a18      	ldr	r2, [pc, #96]	@ (80044c4 <HAL_ADC_ConfigChannel+0x5d8>)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7ff f8bc 	bl	80035ea <LL_ADC_SetCommonPathInternalCh>
 8004472:	e012      	b.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004486:	e008      	b.n	800449a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448c:	f043 0220 	orr.w	r2, r3, #32
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80044a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3734      	adds	r7, #52	@ 0x34
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd90      	pop	{r4, r7, pc}
 80044ae:	bf00      	nop
 80044b0:	c7520000 	.word	0xc7520000
 80044b4:	58026000 	.word	0x58026000
 80044b8:	40022000 	.word	0x40022000
 80044bc:	40022100 	.word	0x40022100
 80044c0:	40022300 	.word	0x40022300
 80044c4:	58026300 	.word	0x58026300
 80044c8:	cfb80000 	.word	0xcfb80000

080044cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff fa3f 	bl	800395c <LL_ADC_IsEnabled>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d16e      	bne.n	80045c2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	4b38      	ldr	r3, [pc, #224]	@ (80045cc <ADC_Enable+0x100>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00d      	beq.n	800450e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f6:	f043 0210 	orr.w	r2, r3, #16
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004502:	f043 0201 	orr.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e05a      	b.n	80045c4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fa0e 	bl	8003934 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004518:	f7ff f818 	bl	800354c <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a2b      	ldr	r2, [pc, #172]	@ (80045d0 <ADC_Enable+0x104>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <ADC_Enable+0x66>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a29      	ldr	r2, [pc, #164]	@ (80045d4 <ADC_Enable+0x108>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d101      	bne.n	8004536 <ADC_Enable+0x6a>
 8004532:	4b29      	ldr	r3, [pc, #164]	@ (80045d8 <ADC_Enable+0x10c>)
 8004534:	e000      	b.n	8004538 <ADC_Enable+0x6c>
 8004536:	4b29      	ldr	r3, [pc, #164]	@ (80045dc <ADC_Enable+0x110>)
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff f99f 	bl	800387c <LL_ADC_GetMultimode>
 800453e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a23      	ldr	r2, [pc, #140]	@ (80045d4 <ADC_Enable+0x108>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d002      	beq.n	8004550 <ADC_Enable+0x84>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	e000      	b.n	8004552 <ADC_Enable+0x86>
 8004550:	4b1f      	ldr	r3, [pc, #124]	@ (80045d0 <ADC_Enable+0x104>)
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	4293      	cmp	r3, r2
 8004558:	d02c      	beq.n	80045b4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d130      	bne.n	80045c2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004560:	e028      	b.n	80045b4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff f9f8 	bl	800395c <LL_ADC_IsEnabled>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff f9dc 	bl	8003934 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800457c:	f7fe ffe6 	bl	800354c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d914      	bls.n	80045b4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d00d      	beq.n	80045b4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	f043 0201 	orr.w	r2, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e007      	b.n	80045c4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d1cf      	bne.n	8004562 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	8000003f 	.word	0x8000003f
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40022100 	.word	0x40022100
 80045d8:	40022300 	.word	0x40022300
 80045dc:	58026300 	.word	0x58026300

080045e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d14b      	bne.n	8004692 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d021      	beq.n	8004658 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f88e 	bl	800373a <LL_ADC_REG_IsTriggerSourceSWStart>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d032      	beq.n	800468a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d12b      	bne.n	800468a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004636:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d11f      	bne.n	800468a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	655a      	str	r2, [r3, #84]	@ 0x54
 8004656:	e018      	b.n	800468a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d111      	bne.n	800468a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d105      	bne.n	800468a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f7fd f9b4 	bl	80019f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004690:	e00e      	b.n	80046b0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fc1a 	bl	8003ed8 <HAL_ADC_ErrorCallback>
}
 80046a4:	e004      	b.n	80046b0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f7ff fbfc 	bl	8003ec4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f2:	f043 0204 	orr.w	r2, r3, #4
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fbec 	bl	8003ed8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a7a      	ldr	r2, [pc, #488]	@ (8004900 <ADC_ConfigureBoostMode+0x1f8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <ADC_ConfigureBoostMode+0x1c>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a79      	ldr	r2, [pc, #484]	@ (8004904 <ADC_ConfigureBoostMode+0x1fc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d109      	bne.n	8004738 <ADC_ConfigureBoostMode+0x30>
 8004724:	4b78      	ldr	r3, [pc, #480]	@ (8004908 <ADC_ConfigureBoostMode+0x200>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800472c:	2b00      	cmp	r3, #0
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e008      	b.n	800474a <ADC_ConfigureBoostMode+0x42>
 8004738:	4b74      	ldr	r3, [pc, #464]	@ (800490c <ADC_ConfigureBoostMode+0x204>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01c      	beq.n	8004788 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800474e:	f00b f895 	bl	800f87c <HAL_RCC_GetHCLKFreq>
 8004752:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800475c:	d010      	beq.n	8004780 <ADC_ConfigureBoostMode+0x78>
 800475e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004762:	d873      	bhi.n	800484c <ADC_ConfigureBoostMode+0x144>
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004768:	d002      	beq.n	8004770 <ADC_ConfigureBoostMode+0x68>
 800476a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800476e:	d16d      	bne.n	800484c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	60fb      	str	r3, [r7, #12]
        break;
 800477e:	e068      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	60fb      	str	r3, [r7, #12]
        break;
 8004786:	e064      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004788:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800478c:	f04f 0100 	mov.w	r1, #0
 8004790:	f00c fada 	bl	8010d48 <HAL_RCCEx_GetPeriphCLKFreq>
 8004794:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800479e:	d051      	beq.n	8004844 <ADC_ConfigureBoostMode+0x13c>
 80047a0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80047a4:	d854      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047a6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047aa:	d047      	beq.n	800483c <ADC_ConfigureBoostMode+0x134>
 80047ac:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80047b0:	d84e      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047b2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047b6:	d03d      	beq.n	8004834 <ADC_ConfigureBoostMode+0x12c>
 80047b8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80047bc:	d848      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c2:	d033      	beq.n	800482c <ADC_ConfigureBoostMode+0x124>
 80047c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c8:	d842      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047ca:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047ce:	d029      	beq.n	8004824 <ADC_ConfigureBoostMode+0x11c>
 80047d0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80047d4:	d83c      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047d6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047da:	d01a      	beq.n	8004812 <ADC_ConfigureBoostMode+0x10a>
 80047dc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80047e0:	d836      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047e6:	d014      	beq.n	8004812 <ADC_ConfigureBoostMode+0x10a>
 80047e8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80047ec:	d830      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f2:	d00e      	beq.n	8004812 <ADC_ConfigureBoostMode+0x10a>
 80047f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047f8:	d82a      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 80047fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80047fe:	d008      	beq.n	8004812 <ADC_ConfigureBoostMode+0x10a>
 8004800:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004804:	d824      	bhi.n	8004850 <ADC_ConfigureBoostMode+0x148>
 8004806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800480a:	d002      	beq.n	8004812 <ADC_ConfigureBoostMode+0x10a>
 800480c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004810:	d11e      	bne.n	8004850 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	0c9b      	lsrs	r3, r3, #18
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	60fb      	str	r3, [r7, #12]
        break;
 8004822:	e016      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	60fb      	str	r3, [r7, #12]
        break;
 800482a:	e012      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	60fb      	str	r3, [r7, #12]
        break;
 8004832:	e00e      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	60fb      	str	r3, [r7, #12]
        break;
 800483a:	e00a      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	09db      	lsrs	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]
        break;
 8004842:	e006      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	0a1b      	lsrs	r3, r3, #8
 8004848:	60fb      	str	r3, [r7, #12]
        break;
 800484a:	e002      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
        break;
 800484c:	bf00      	nop
 800484e:	e000      	b.n	8004852 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004850:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004852:	f7fe feab 	bl	80035ac <HAL_GetREVID>
 8004856:	4603      	mov	r3, r0
 8004858:	f241 0203 	movw	r2, #4099	@ 0x1003
 800485c:	4293      	cmp	r3, r2
 800485e:	d815      	bhi.n	800488c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a2b      	ldr	r2, [pc, #172]	@ (8004910 <ADC_ConfigureBoostMode+0x208>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d908      	bls.n	800487a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004876:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004878:	e03e      	b.n	80048f8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004888:	609a      	str	r2, [r3, #8]
}
 800488a:	e035      	b.n	80048f8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	085b      	lsrs	r3, r3, #1
 8004890:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4a1f      	ldr	r2, [pc, #124]	@ (8004914 <ADC_ConfigureBoostMode+0x20c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d808      	bhi.n	80048ac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	e025      	b.n	80048f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004918 <ADC_ConfigureBoostMode+0x210>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d80a      	bhi.n	80048ca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	e016      	b.n	80048f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4a13      	ldr	r2, [pc, #76]	@ (800491c <ADC_ConfigureBoostMode+0x214>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d80a      	bhi.n	80048e8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	e007      	b.n	80048f8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80048f6:	609a      	str	r2, [r3, #8]
}
 80048f8:	bf00      	nop
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40022000 	.word	0x40022000
 8004904:	40022100 	.word	0x40022100
 8004908:	40022300 	.word	0x40022300
 800490c:	58026300 	.word	0x58026300
 8004910:	01312d00 	.word	0x01312d00
 8004914:	005f5e10 	.word	0x005f5e10
 8004918:	00bebc20 	.word	0x00bebc20
 800491c:	017d7840 	.word	0x017d7840

08004920 <LL_ADC_IsEnabled>:
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d101      	bne.n	8004938 <LL_ADC_IsEnabled+0x18>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <LL_ADC_IsEnabled+0x1a>
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <LL_ADC_REG_IsConversionOngoing>:
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d101      	bne.n	800495e <LL_ADC_REG_IsConversionOngoing+0x18>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800496c:	b590      	push	{r4, r7, lr}
 800496e:	b09f      	sub	sp, #124	@ 0x7c
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004986:	2302      	movs	r3, #2
 8004988:	e0be      	b.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004996:	2300      	movs	r3, #0
 8004998:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a5c      	ldr	r2, [pc, #368]	@ (8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d102      	bne.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	e001      	b.n	80049ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049aa:	2300      	movs	r3, #0
 80049ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e09d      	b.n	8004b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff ffb9 	bl	8004946 <LL_ADC_REG_IsConversionOngoing>
 80049d4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ffb3 	bl	8004946 <LL_ADC_REG_IsConversionOngoing>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d17f      	bne.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d17c      	bne.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a47      	ldr	r2, [pc, #284]	@ (8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d101      	bne.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004a00:	4b45      	ldr	r3, [pc, #276]	@ (8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a02:	e000      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a04:	4b45      	ldr	r3, [pc, #276]	@ (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a06:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d039      	beq.n	8004a84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a20:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3a      	ldr	r2, [pc, #232]	@ (8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10e      	bne.n	8004a54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a36:	4836      	ldr	r0, [pc, #216]	@ (8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a38:	f7ff ff72 	bl	8004920 <LL_ADC_IsEnabled>
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4835      	ldr	r0, [pc, #212]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004a40:	f7ff ff6e 	bl	8004920 <LL_ADC_IsEnabled>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4323      	orrs	r3, r4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	e008      	b.n	8004a66 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004a54:	4832      	ldr	r0, [pc, #200]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a56:	f7ff ff63 	bl	8004920 <LL_ADC_IsEnabled>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d047      	beq.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	6811      	ldr	r1, [r2, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	6892      	ldr	r2, [r2, #8]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a82:	e03a      	b.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1e      	ldr	r2, [pc, #120]	@ (8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d10e      	bne.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004aa4:	481a      	ldr	r0, [pc, #104]	@ (8004b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004aa6:	f7ff ff3b 	bl	8004920 <LL_ADC_IsEnabled>
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4819      	ldr	r0, [pc, #100]	@ (8004b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004aae:	f7ff ff37 	bl	8004920 <LL_ADC_IsEnabled>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4323      	orrs	r3, r4
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	bf0c      	ite	eq
 8004aba:	2301      	moveq	r3, #1
 8004abc:	2300      	movne	r3, #0
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	e008      	b.n	8004ad4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ac2:	4817      	ldr	r0, [pc, #92]	@ (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004ac4:	f7ff ff2c 	bl	8004920 <LL_ADC_IsEnabled>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf0c      	ite	eq
 8004ace:	2301      	moveq	r3, #1
 8004ad0:	2300      	movne	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d010      	beq.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004ade:	4013      	ands	r3, r2
 8004ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ae2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ae4:	e009      	b.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004af8:	e000      	b.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004afa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b04:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	377c      	adds	r7, #124	@ 0x7c
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd90      	pop	{r4, r7, pc}
 8004b10:	40022000 	.word	0x40022000
 8004b14:	40022100 	.word	0x40022100
 8004b18:	40022300 	.word	0x40022300
 8004b1c:	58026300 	.word	0x58026300
 8004b20:	58026000 	.word	0x58026000
 8004b24:	fffff0e0 	.word	0xfffff0e0

08004b28 <__NVIC_SetPriorityGrouping>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b38:	4b0b      	ldr	r3, [pc, #44]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x40>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b44:	4013      	ands	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b50:	4b06      	ldr	r3, [pc, #24]	@ (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b56:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <__NVIC_SetPriorityGrouping+0x40>)
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	60d3      	str	r3, [r2, #12]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000ed00 	.word	0xe000ed00
 8004b6c:	05fa0000 	.word	0x05fa0000

08004b70 <__NVIC_GetPriorityGrouping>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b74:	4b04      	ldr	r3, [pc, #16]	@ (8004b88 <__NVIC_GetPriorityGrouping+0x18>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0307 	and.w	r3, r3, #7
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_EnableIRQ>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	db0b      	blt.n	8004bb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	4907      	ldr	r1, [pc, #28]	@ (8004bc4 <__NVIC_EnableIRQ+0x38>)
 8004ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2001      	movs	r0, #1
 8004bae:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_SetPriority>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	@ (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	@ (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	@ 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	@ 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff8e 	bl	8004bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	@ (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff29 	bl	8004b28 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cec:	f7ff ff40 	bl	8004b70 <__NVIC_GetPriorityGrouping>
 8004cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	6978      	ldr	r0, [r7, #20]
 8004cf8:	f7ff ff90 	bl	8004c1c <NVIC_EncodePriority>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d02:	4611      	mov	r1, r2
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff5f 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004d0a:	bf00      	nop
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	4603      	mov	r3, r0
 8004d1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff ff33 	bl	8004b8c <__NVIC_EnableIRQ>
}
 8004d26:	bf00      	nop
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff ffa4 	bl	8004c84 <SysTick_Config>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004d4c:	f3bf 8f5f 	dmb	sy
}
 8004d50:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <HAL_MPU_Disable+0x28>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	4a06      	ldr	r2, [pc, #24]	@ (8004d70 <HAL_MPU_Disable+0x28>)
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d5c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004d5e:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <HAL_MPU_Disable+0x2c>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	605a      	str	r2, [r3, #4]
}
 8004d64:	bf00      	nop
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	e000ed00 	.word	0xe000ed00
 8004d74:	e000ed90 	.word	0xe000ed90

08004d78 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004d80:	4a0b      	ldr	r2, [pc, #44]	@ (8004db0 <HAL_MPU_Enable+0x38>)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <HAL_MPU_Enable+0x3c>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <HAL_MPU_Enable+0x3c>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d94:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004d96:	f3bf 8f4f 	dsb	sy
}
 8004d9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d9c:	f3bf 8f6f 	isb	sy
}
 8004da0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000ed90 	.word	0xe000ed90
 8004db4:	e000ed00 	.word	0xe000ed00

08004db8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	785a      	ldrb	r2, [r3, #1]
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e34 <HAL_MPU_ConfigRegion+0x7c>)
 8004dc6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e34 <HAL_MPU_ConfigRegion+0x7c>)
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	@ (8004e34 <HAL_MPU_ConfigRegion+0x7c>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004dd4:	4a17      	ldr	r2, [pc, #92]	@ (8004e34 <HAL_MPU_ConfigRegion+0x7c>)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7b1b      	ldrb	r3, [r3, #12]
 8004de0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7adb      	ldrb	r3, [r3, #11]
 8004de6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004de8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	7a9b      	ldrb	r3, [r3, #10]
 8004dee:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004df0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	7b5b      	ldrb	r3, [r3, #13]
 8004df6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004df8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7b9b      	ldrb	r3, [r3, #14]
 8004dfe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004e00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	7bdb      	ldrb	r3, [r3, #15]
 8004e06:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	7a5b      	ldrb	r3, [r3, #9]
 8004e0e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7a1b      	ldrb	r3, [r3, #8]
 8004e16:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004e18:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	7812      	ldrb	r2, [r2, #0]
 8004e1e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e20:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004e22:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004e24:	6113      	str	r3, [r2, #16]
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000ed90 	.word	0xe000ed90

08004e38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004e40:	f7fe fb84 	bl	800354c <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e316      	b.n	800547e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a66      	ldr	r2, [pc, #408]	@ (8004ff0 <HAL_DMA_Init+0x1b8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d04a      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a65      	ldr	r2, [pc, #404]	@ (8004ff4 <HAL_DMA_Init+0x1bc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d045      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a63      	ldr	r2, [pc, #396]	@ (8004ff8 <HAL_DMA_Init+0x1c0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d040      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a62      	ldr	r2, [pc, #392]	@ (8004ffc <HAL_DMA_Init+0x1c4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d03b      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a60      	ldr	r2, [pc, #384]	@ (8005000 <HAL_DMA_Init+0x1c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d036      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5f      	ldr	r2, [pc, #380]	@ (8005004 <HAL_DMA_Init+0x1cc>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d031      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5d      	ldr	r2, [pc, #372]	@ (8005008 <HAL_DMA_Init+0x1d0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d02c      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a5c      	ldr	r2, [pc, #368]	@ (800500c <HAL_DMA_Init+0x1d4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d027      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a5a      	ldr	r2, [pc, #360]	@ (8005010 <HAL_DMA_Init+0x1d8>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d022      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a59      	ldr	r2, [pc, #356]	@ (8005014 <HAL_DMA_Init+0x1dc>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d01d      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a57      	ldr	r2, [pc, #348]	@ (8005018 <HAL_DMA_Init+0x1e0>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d018      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a56      	ldr	r2, [pc, #344]	@ (800501c <HAL_DMA_Init+0x1e4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d013      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a54      	ldr	r2, [pc, #336]	@ (8005020 <HAL_DMA_Init+0x1e8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d00e      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a53      	ldr	r2, [pc, #332]	@ (8005024 <HAL_DMA_Init+0x1ec>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d009      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a51      	ldr	r2, [pc, #324]	@ (8005028 <HAL_DMA_Init+0x1f0>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_DMA_Init+0xb8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a50      	ldr	r2, [pc, #320]	@ (800502c <HAL_DMA_Init+0x1f4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_DMA_Init+0xbc>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_DMA_Init+0xbe>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 813b 	beq.w	8005172 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a37      	ldr	r2, [pc, #220]	@ (8004ff0 <HAL_DMA_Init+0x1b8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d04a      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a36      	ldr	r2, [pc, #216]	@ (8004ff4 <HAL_DMA_Init+0x1bc>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d045      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a34      	ldr	r2, [pc, #208]	@ (8004ff8 <HAL_DMA_Init+0x1c0>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d040      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a33      	ldr	r2, [pc, #204]	@ (8004ffc <HAL_DMA_Init+0x1c4>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d03b      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a31      	ldr	r2, [pc, #196]	@ (8005000 <HAL_DMA_Init+0x1c8>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d036      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a30      	ldr	r2, [pc, #192]	@ (8005004 <HAL_DMA_Init+0x1cc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d031      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8005008 <HAL_DMA_Init+0x1d0>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02c      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2d      	ldr	r2, [pc, #180]	@ (800500c <HAL_DMA_Init+0x1d4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d027      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a2b      	ldr	r2, [pc, #172]	@ (8005010 <HAL_DMA_Init+0x1d8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d022      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a2a      	ldr	r2, [pc, #168]	@ (8005014 <HAL_DMA_Init+0x1dc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d01d      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a28      	ldr	r2, [pc, #160]	@ (8005018 <HAL_DMA_Init+0x1e0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d018      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a27      	ldr	r2, [pc, #156]	@ (800501c <HAL_DMA_Init+0x1e4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d013      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a25      	ldr	r2, [pc, #148]	@ (8005020 <HAL_DMA_Init+0x1e8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00e      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a24      	ldr	r2, [pc, #144]	@ (8005024 <HAL_DMA_Init+0x1ec>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a22      	ldr	r2, [pc, #136]	@ (8005028 <HAL_DMA_Init+0x1f0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <HAL_DMA_Init+0x174>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a21      	ldr	r2, [pc, #132]	@ (800502c <HAL_DMA_Init+0x1f4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d108      	bne.n	8004fbe <HAL_DMA_Init+0x186>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e007      	b.n	8004fce <HAL_DMA_Init+0x196>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004fce:	e02f      	b.n	8005030 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fd0:	f7fe fabc 	bl	800354c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b05      	cmp	r3, #5
 8004fdc:	d928      	bls.n	8005030 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e246      	b.n	800547e <HAL_DMA_Init+0x646>
 8004ff0:	40020010 	.word	0x40020010
 8004ff4:	40020028 	.word	0x40020028
 8004ff8:	40020040 	.word	0x40020040
 8004ffc:	40020058 	.word	0x40020058
 8005000:	40020070 	.word	0x40020070
 8005004:	40020088 	.word	0x40020088
 8005008:	400200a0 	.word	0x400200a0
 800500c:	400200b8 	.word	0x400200b8
 8005010:	40020410 	.word	0x40020410
 8005014:	40020428 	.word	0x40020428
 8005018:	40020440 	.word	0x40020440
 800501c:	40020458 	.word	0x40020458
 8005020:	40020470 	.word	0x40020470
 8005024:	40020488 	.word	0x40020488
 8005028:	400204a0 	.word	0x400204a0
 800502c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1c8      	bne.n	8004fd0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4b83      	ldr	r3, [pc, #524]	@ (8005258 <HAL_DMA_Init+0x420>)
 800504a:	4013      	ands	r3, r2
 800504c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005056:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005062:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800506e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005080:	2b04      	cmp	r3, #4
 8005082:	d107      	bne.n	8005094 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508c:	4313      	orrs	r3, r2
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	4313      	orrs	r3, r2
 8005092:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005094:	4b71      	ldr	r3, [pc, #452]	@ (800525c <HAL_DMA_Init+0x424>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b71      	ldr	r3, [pc, #452]	@ (8005260 <HAL_DMA_Init+0x428>)
 800509a:	4013      	ands	r3, r2
 800509c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050a0:	d328      	bcc.n	80050f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b28      	cmp	r3, #40	@ 0x28
 80050a8:	d903      	bls.n	80050b2 <HAL_DMA_Init+0x27a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80050b0:	d917      	bls.n	80050e2 <HAL_DMA_Init+0x2aa>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80050b8:	d903      	bls.n	80050c2 <HAL_DMA_Init+0x28a>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b42      	cmp	r3, #66	@ 0x42
 80050c0:	d90f      	bls.n	80050e2 <HAL_DMA_Init+0x2aa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b46      	cmp	r3, #70	@ 0x46
 80050c8:	d903      	bls.n	80050d2 <HAL_DMA_Init+0x29a>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b48      	cmp	r3, #72	@ 0x48
 80050d0:	d907      	bls.n	80050e2 <HAL_DMA_Init+0x2aa>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80050d8:	d905      	bls.n	80050e6 <HAL_DMA_Init+0x2ae>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b52      	cmp	r3, #82	@ 0x52
 80050e0:	d801      	bhi.n	80050e6 <HAL_DMA_Init+0x2ae>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_DMA_Init+0x2b0>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	2b04      	cmp	r3, #4
 800511c:	d117      	bne.n	800514e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f002 fb4d 	bl	80077d0 <DMA_CheckFifoParam>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	@ 0x40
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e197      	b.n	800547e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f002 fa88 	bl	800766c <DMA_CalcBaseAndBitshift>
 800515c:	4603      	mov	r3, r0
 800515e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	223f      	movs	r2, #63	@ 0x3f
 800516a:	409a      	lsls	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	e0cd      	b.n	800530e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a3b      	ldr	r2, [pc, #236]	@ (8005264 <HAL_DMA_Init+0x42c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d022      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a39      	ldr	r2, [pc, #228]	@ (8005268 <HAL_DMA_Init+0x430>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d01d      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a38      	ldr	r2, [pc, #224]	@ (800526c <HAL_DMA_Init+0x434>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d018      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a36      	ldr	r2, [pc, #216]	@ (8005270 <HAL_DMA_Init+0x438>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d013      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a35      	ldr	r2, [pc, #212]	@ (8005274 <HAL_DMA_Init+0x43c>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d00e      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a33      	ldr	r2, [pc, #204]	@ (8005278 <HAL_DMA_Init+0x440>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a32      	ldr	r2, [pc, #200]	@ (800527c <HAL_DMA_Init+0x444>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_DMA_Init+0x38a>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a30      	ldr	r2, [pc, #192]	@ (8005280 <HAL_DMA_Init+0x448>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_DMA_Init+0x38e>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <HAL_DMA_Init+0x390>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8097 	beq.w	80052fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a24      	ldr	r2, [pc, #144]	@ (8005264 <HAL_DMA_Init+0x42c>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d021      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a22      	ldr	r2, [pc, #136]	@ (8005268 <HAL_DMA_Init+0x430>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d01c      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a21      	ldr	r2, [pc, #132]	@ (800526c <HAL_DMA_Init+0x434>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d017      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <HAL_DMA_Init+0x438>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d012      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1e      	ldr	r2, [pc, #120]	@ (8005274 <HAL_DMA_Init+0x43c>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00d      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1c      	ldr	r2, [pc, #112]	@ (8005278 <HAL_DMA_Init+0x440>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d008      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <HAL_DMA_Init+0x444>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <HAL_DMA_Init+0x3e4>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <HAL_DMA_Init+0x448>)
 800521a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4b13      	ldr	r3, [pc, #76]	@ (8005284 <HAL_DMA_Init+0x44c>)
 8005238:	4013      	ands	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b40      	cmp	r3, #64	@ 0x40
 8005242:	d021      	beq.n	8005288 <HAL_DMA_Init+0x450>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b80      	cmp	r3, #128	@ 0x80
 800524a:	d102      	bne.n	8005252 <HAL_DMA_Init+0x41a>
 800524c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005250:	e01b      	b.n	800528a <HAL_DMA_Init+0x452>
 8005252:	2300      	movs	r3, #0
 8005254:	e019      	b.n	800528a <HAL_DMA_Init+0x452>
 8005256:	bf00      	nop
 8005258:	fe10803f 	.word	0xfe10803f
 800525c:	5c001000 	.word	0x5c001000
 8005260:	ffff0000 	.word	0xffff0000
 8005264:	58025408 	.word	0x58025408
 8005268:	5802541c 	.word	0x5802541c
 800526c:	58025430 	.word	0x58025430
 8005270:	58025444 	.word	0x58025444
 8005274:	58025458 	.word	0x58025458
 8005278:	5802546c 	.word	0x5802546c
 800527c:	58025480 	.word	0x58025480
 8005280:	58025494 	.word	0x58025494
 8005284:	fffe000f 	.word	0xfffe000f
 8005288:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68d2      	ldr	r2, [r2, #12]
 800528e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005290:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005298:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80052a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80052a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80052b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80052b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	4b6e      	ldr	r3, [pc, #440]	@ (8005488 <HAL_DMA_Init+0x650>)
 80052d0:	4413      	add	r3, r2
 80052d2:	4a6e      	ldr	r2, [pc, #440]	@ (800548c <HAL_DMA_Init+0x654>)
 80052d4:	fba2 2303 	umull	r2, r3, r2, r3
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	009a      	lsls	r2, r3, #2
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f002 f9c3 	bl	800766c <DMA_CalcBaseAndBitshift>
 80052e6:	4603      	mov	r3, r0
 80052e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2201      	movs	r2, #1
 80052f4:	409a      	lsls	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	605a      	str	r2, [r3, #4]
 80052fa:	e008      	b.n	800530e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2240      	movs	r2, #64	@ 0x40
 8005300:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2203      	movs	r2, #3
 8005306:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e0b7      	b.n	800547e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a5f      	ldr	r2, [pc, #380]	@ (8005490 <HAL_DMA_Init+0x658>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d072      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a5d      	ldr	r2, [pc, #372]	@ (8005494 <HAL_DMA_Init+0x65c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d06d      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a5c      	ldr	r2, [pc, #368]	@ (8005498 <HAL_DMA_Init+0x660>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d068      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5a      	ldr	r2, [pc, #360]	@ (800549c <HAL_DMA_Init+0x664>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d063      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a59      	ldr	r2, [pc, #356]	@ (80054a0 <HAL_DMA_Init+0x668>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d05e      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a57      	ldr	r2, [pc, #348]	@ (80054a4 <HAL_DMA_Init+0x66c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d059      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a56      	ldr	r2, [pc, #344]	@ (80054a8 <HAL_DMA_Init+0x670>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d054      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a54      	ldr	r2, [pc, #336]	@ (80054ac <HAL_DMA_Init+0x674>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d04f      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a53      	ldr	r2, [pc, #332]	@ (80054b0 <HAL_DMA_Init+0x678>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d04a      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a51      	ldr	r2, [pc, #324]	@ (80054b4 <HAL_DMA_Init+0x67c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d045      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a50      	ldr	r2, [pc, #320]	@ (80054b8 <HAL_DMA_Init+0x680>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d040      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a4e      	ldr	r2, [pc, #312]	@ (80054bc <HAL_DMA_Init+0x684>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d03b      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a4d      	ldr	r2, [pc, #308]	@ (80054c0 <HAL_DMA_Init+0x688>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d036      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a4b      	ldr	r2, [pc, #300]	@ (80054c4 <HAL_DMA_Init+0x68c>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d031      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4a      	ldr	r2, [pc, #296]	@ (80054c8 <HAL_DMA_Init+0x690>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d02c      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a48      	ldr	r2, [pc, #288]	@ (80054cc <HAL_DMA_Init+0x694>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d027      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a47      	ldr	r2, [pc, #284]	@ (80054d0 <HAL_DMA_Init+0x698>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d022      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a45      	ldr	r2, [pc, #276]	@ (80054d4 <HAL_DMA_Init+0x69c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01d      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a44      	ldr	r2, [pc, #272]	@ (80054d8 <HAL_DMA_Init+0x6a0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a42      	ldr	r2, [pc, #264]	@ (80054dc <HAL_DMA_Init+0x6a4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a41      	ldr	r2, [pc, #260]	@ (80054e0 <HAL_DMA_Init+0x6a8>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a3f      	ldr	r2, [pc, #252]	@ (80054e4 <HAL_DMA_Init+0x6ac>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a3e      	ldr	r2, [pc, #248]	@ (80054e8 <HAL_DMA_Init+0x6b0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_DMA_Init+0x5c6>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3c      	ldr	r2, [pc, #240]	@ (80054ec <HAL_DMA_Init+0x6b4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d101      	bne.n	8005402 <HAL_DMA_Init+0x5ca>
 80053fe:	2301      	movs	r3, #1
 8005400:	e000      	b.n	8005404 <HAL_DMA_Init+0x5cc>
 8005402:	2300      	movs	r3, #0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d032      	beq.n	800546e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f002 fa5d 	bl	80078c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	2b80      	cmp	r3, #128	@ 0x80
 8005414:	d102      	bne.n	800541c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005430:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_DMA_Init+0x624>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b08      	cmp	r3, #8
 8005440:	d80c      	bhi.n	800545c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f002 fada 	bl	80079fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800544c:	2200      	movs	r2, #0
 800544e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005458:	605a      	str	r2, [r3, #4]
 800545a:	e008      	b.n	800546e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	a7fdabf8 	.word	0xa7fdabf8
 800548c:	cccccccd 	.word	0xcccccccd
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
 80054d0:	58025408 	.word	0x58025408
 80054d4:	5802541c 	.word	0x5802541c
 80054d8:	58025430 	.word	0x58025430
 80054dc:	58025444 	.word	0x58025444
 80054e0:	58025458 	.word	0x58025458
 80054e4:	5802546c 	.word	0x5802546c
 80054e8:	58025480 	.word	0x58025480
 80054ec:	58025494 	.word	0x58025494

080054f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e226      	b.n	800595a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_DMA_Start_IT+0x2a>
 8005516:	2302      	movs	r3, #2
 8005518:	e21f      	b.n	800595a <HAL_DMA_Start_IT+0x46a>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b01      	cmp	r3, #1
 800552c:	f040 820a 	bne.w	8005944 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a68      	ldr	r2, [pc, #416]	@ (80056e4 <HAL_DMA_Start_IT+0x1f4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d04a      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a66      	ldr	r2, [pc, #408]	@ (80056e8 <HAL_DMA_Start_IT+0x1f8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d045      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a65      	ldr	r2, [pc, #404]	@ (80056ec <HAL_DMA_Start_IT+0x1fc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d040      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a63      	ldr	r2, [pc, #396]	@ (80056f0 <HAL_DMA_Start_IT+0x200>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d03b      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a62      	ldr	r2, [pc, #392]	@ (80056f4 <HAL_DMA_Start_IT+0x204>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d036      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a60      	ldr	r2, [pc, #384]	@ (80056f8 <HAL_DMA_Start_IT+0x208>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d031      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a5f      	ldr	r2, [pc, #380]	@ (80056fc <HAL_DMA_Start_IT+0x20c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d02c      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a5d      	ldr	r2, [pc, #372]	@ (8005700 <HAL_DMA_Start_IT+0x210>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d027      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a5c      	ldr	r2, [pc, #368]	@ (8005704 <HAL_DMA_Start_IT+0x214>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a5a      	ldr	r2, [pc, #360]	@ (8005708 <HAL_DMA_Start_IT+0x218>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d01d      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a59      	ldr	r2, [pc, #356]	@ (800570c <HAL_DMA_Start_IT+0x21c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a57      	ldr	r2, [pc, #348]	@ (8005710 <HAL_DMA_Start_IT+0x220>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a56      	ldr	r2, [pc, #344]	@ (8005714 <HAL_DMA_Start_IT+0x224>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a54      	ldr	r2, [pc, #336]	@ (8005718 <HAL_DMA_Start_IT+0x228>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a53      	ldr	r2, [pc, #332]	@ (800571c <HAL_DMA_Start_IT+0x22c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_DMA_Start_IT+0xee>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a51      	ldr	r2, [pc, #324]	@ (8005720 <HAL_DMA_Start_IT+0x230>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d108      	bne.n	80055f0 <HAL_DMA_Start_IT+0x100>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0201 	bic.w	r2, r2, #1
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	e007      	b.n	8005600 <HAL_DMA_Start_IT+0x110>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0201 	bic.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f001 fe84 	bl	8007314 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a34      	ldr	r2, [pc, #208]	@ (80056e4 <HAL_DMA_Start_IT+0x1f4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d04a      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a33      	ldr	r2, [pc, #204]	@ (80056e8 <HAL_DMA_Start_IT+0x1f8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d045      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a31      	ldr	r2, [pc, #196]	@ (80056ec <HAL_DMA_Start_IT+0x1fc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d040      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a30      	ldr	r2, [pc, #192]	@ (80056f0 <HAL_DMA_Start_IT+0x200>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d03b      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <HAL_DMA_Start_IT+0x204>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d036      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2d      	ldr	r2, [pc, #180]	@ (80056f8 <HAL_DMA_Start_IT+0x208>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d031      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a2b      	ldr	r2, [pc, #172]	@ (80056fc <HAL_DMA_Start_IT+0x20c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02c      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2a      	ldr	r2, [pc, #168]	@ (8005700 <HAL_DMA_Start_IT+0x210>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d027      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a28      	ldr	r2, [pc, #160]	@ (8005704 <HAL_DMA_Start_IT+0x214>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d022      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a27      	ldr	r2, [pc, #156]	@ (8005708 <HAL_DMA_Start_IT+0x218>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d01d      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a25      	ldr	r2, [pc, #148]	@ (800570c <HAL_DMA_Start_IT+0x21c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a24      	ldr	r2, [pc, #144]	@ (8005710 <HAL_DMA_Start_IT+0x220>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a22      	ldr	r2, [pc, #136]	@ (8005714 <HAL_DMA_Start_IT+0x224>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a21      	ldr	r2, [pc, #132]	@ (8005718 <HAL_DMA_Start_IT+0x228>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1f      	ldr	r2, [pc, #124]	@ (800571c <HAL_DMA_Start_IT+0x22c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_DMA_Start_IT+0x1bc>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005720 <HAL_DMA_Start_IT+0x230>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA_Start_IT+0x1c0>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_DMA_Start_IT+0x1c2>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d036      	beq.n	8005724 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f023 021e 	bic.w	r2, r3, #30
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f042 0216 	orr.w	r2, r2, #22
 80056c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d03e      	beq.n	8005750 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0208 	orr.w	r2, r2, #8
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	e035      	b.n	8005750 <HAL_DMA_Start_IT+0x260>
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f023 020e 	bic.w	r2, r3, #14
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 020a 	orr.w	r2, r2, #10
 8005736:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0204 	orr.w	r2, r2, #4
 800574e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a83      	ldr	r2, [pc, #524]	@ (8005964 <HAL_DMA_Start_IT+0x474>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d072      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a82      	ldr	r2, [pc, #520]	@ (8005968 <HAL_DMA_Start_IT+0x478>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d06d      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a80      	ldr	r2, [pc, #512]	@ (800596c <HAL_DMA_Start_IT+0x47c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d068      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7f      	ldr	r2, [pc, #508]	@ (8005970 <HAL_DMA_Start_IT+0x480>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d063      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a7d      	ldr	r2, [pc, #500]	@ (8005974 <HAL_DMA_Start_IT+0x484>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d05e      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a7c      	ldr	r2, [pc, #496]	@ (8005978 <HAL_DMA_Start_IT+0x488>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d059      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a7a      	ldr	r2, [pc, #488]	@ (800597c <HAL_DMA_Start_IT+0x48c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d054      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a79      	ldr	r2, [pc, #484]	@ (8005980 <HAL_DMA_Start_IT+0x490>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d04f      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a77      	ldr	r2, [pc, #476]	@ (8005984 <HAL_DMA_Start_IT+0x494>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d04a      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a76      	ldr	r2, [pc, #472]	@ (8005988 <HAL_DMA_Start_IT+0x498>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d045      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a74      	ldr	r2, [pc, #464]	@ (800598c <HAL_DMA_Start_IT+0x49c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d040      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a73      	ldr	r2, [pc, #460]	@ (8005990 <HAL_DMA_Start_IT+0x4a0>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d03b      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a71      	ldr	r2, [pc, #452]	@ (8005994 <HAL_DMA_Start_IT+0x4a4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d036      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a70      	ldr	r2, [pc, #448]	@ (8005998 <HAL_DMA_Start_IT+0x4a8>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d031      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a6e      	ldr	r2, [pc, #440]	@ (800599c <HAL_DMA_Start_IT+0x4ac>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02c      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a6d      	ldr	r2, [pc, #436]	@ (80059a0 <HAL_DMA_Start_IT+0x4b0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d027      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a6b      	ldr	r2, [pc, #428]	@ (80059a4 <HAL_DMA_Start_IT+0x4b4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d022      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a6a      	ldr	r2, [pc, #424]	@ (80059a8 <HAL_DMA_Start_IT+0x4b8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d01d      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a68      	ldr	r2, [pc, #416]	@ (80059ac <HAL_DMA_Start_IT+0x4bc>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d018      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a67      	ldr	r2, [pc, #412]	@ (80059b0 <HAL_DMA_Start_IT+0x4c0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a65      	ldr	r2, [pc, #404]	@ (80059b4 <HAL_DMA_Start_IT+0x4c4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a64      	ldr	r2, [pc, #400]	@ (80059b8 <HAL_DMA_Start_IT+0x4c8>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a62      	ldr	r2, [pc, #392]	@ (80059bc <HAL_DMA_Start_IT+0x4cc>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <HAL_DMA_Start_IT+0x350>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a61      	ldr	r2, [pc, #388]	@ (80059c0 <HAL_DMA_Start_IT+0x4d0>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_DMA_Start_IT+0x354>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <HAL_DMA_Start_IT+0x356>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d01a      	beq.n	8005880 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005862:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005866:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800587a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800587e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a37      	ldr	r2, [pc, #220]	@ (8005964 <HAL_DMA_Start_IT+0x474>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04a      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a36      	ldr	r2, [pc, #216]	@ (8005968 <HAL_DMA_Start_IT+0x478>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d045      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a34      	ldr	r2, [pc, #208]	@ (800596c <HAL_DMA_Start_IT+0x47c>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d040      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a33      	ldr	r2, [pc, #204]	@ (8005970 <HAL_DMA_Start_IT+0x480>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03b      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a31      	ldr	r2, [pc, #196]	@ (8005974 <HAL_DMA_Start_IT+0x484>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d036      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a30      	ldr	r2, [pc, #192]	@ (8005978 <HAL_DMA_Start_IT+0x488>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d031      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a2e      	ldr	r2, [pc, #184]	@ (800597c <HAL_DMA_Start_IT+0x48c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02c      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005980 <HAL_DMA_Start_IT+0x490>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005984 <HAL_DMA_Start_IT+0x494>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2a      	ldr	r2, [pc, #168]	@ (8005988 <HAL_DMA_Start_IT+0x498>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01d      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a28      	ldr	r2, [pc, #160]	@ (800598c <HAL_DMA_Start_IT+0x49c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a27      	ldr	r2, [pc, #156]	@ (8005990 <HAL_DMA_Start_IT+0x4a0>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a25      	ldr	r2, [pc, #148]	@ (8005994 <HAL_DMA_Start_IT+0x4a4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a24      	ldr	r2, [pc, #144]	@ (8005998 <HAL_DMA_Start_IT+0x4a8>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a22      	ldr	r2, [pc, #136]	@ (800599c <HAL_DMA_Start_IT+0x4ac>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_DMA_Start_IT+0x430>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <HAL_DMA_Start_IT+0x4b0>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d108      	bne.n	8005932 <HAL_DMA_Start_IT+0x442>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	e012      	b.n	8005958 <HAL_DMA_Start_IT+0x468>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f042 0201 	orr.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	e009      	b.n	8005958 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800594a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005958:	7dfb      	ldrb	r3, [r7, #23]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3718      	adds	r7, #24
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40020010 	.word	0x40020010
 8005968:	40020028 	.word	0x40020028
 800596c:	40020040 	.word	0x40020040
 8005970:	40020058 	.word	0x40020058
 8005974:	40020070 	.word	0x40020070
 8005978:	40020088 	.word	0x40020088
 800597c:	400200a0 	.word	0x400200a0
 8005980:	400200b8 	.word	0x400200b8
 8005984:	40020410 	.word	0x40020410
 8005988:	40020428 	.word	0x40020428
 800598c:	40020440 	.word	0x40020440
 8005990:	40020458 	.word	0x40020458
 8005994:	40020470 	.word	0x40020470
 8005998:	40020488 	.word	0x40020488
 800599c:	400204a0 	.word	0x400204a0
 80059a0:	400204b8 	.word	0x400204b8
 80059a4:	58025408 	.word	0x58025408
 80059a8:	5802541c 	.word	0x5802541c
 80059ac:	58025430 	.word	0x58025430
 80059b0:	58025444 	.word	0x58025444
 80059b4:	58025458 	.word	0x58025458
 80059b8:	5802546c 	.word	0x5802546c
 80059bc:	58025480 	.word	0x58025480
 80059c0:	58025494 	.word	0x58025494

080059c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80059cc:	f7fd fdbe 	bl	800354c <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e2dc      	b.n	8005f96 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d008      	beq.n	80059fa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2280      	movs	r2, #128	@ 0x80
 80059ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e2cd      	b.n	8005f96 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a76      	ldr	r2, [pc, #472]	@ (8005bd8 <HAL_DMA_Abort+0x214>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d04a      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a74      	ldr	r2, [pc, #464]	@ (8005bdc <HAL_DMA_Abort+0x218>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d045      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a73      	ldr	r2, [pc, #460]	@ (8005be0 <HAL_DMA_Abort+0x21c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d040      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a71      	ldr	r2, [pc, #452]	@ (8005be4 <HAL_DMA_Abort+0x220>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d03b      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a70      	ldr	r2, [pc, #448]	@ (8005be8 <HAL_DMA_Abort+0x224>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d036      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a6e      	ldr	r2, [pc, #440]	@ (8005bec <HAL_DMA_Abort+0x228>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d031      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a6d      	ldr	r2, [pc, #436]	@ (8005bf0 <HAL_DMA_Abort+0x22c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d02c      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a6b      	ldr	r2, [pc, #428]	@ (8005bf4 <HAL_DMA_Abort+0x230>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d027      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a6a      	ldr	r2, [pc, #424]	@ (8005bf8 <HAL_DMA_Abort+0x234>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d022      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a68      	ldr	r2, [pc, #416]	@ (8005bfc <HAL_DMA_Abort+0x238>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01d      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a67      	ldr	r2, [pc, #412]	@ (8005c00 <HAL_DMA_Abort+0x23c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d018      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a65      	ldr	r2, [pc, #404]	@ (8005c04 <HAL_DMA_Abort+0x240>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a64      	ldr	r2, [pc, #400]	@ (8005c08 <HAL_DMA_Abort+0x244>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a62      	ldr	r2, [pc, #392]	@ (8005c0c <HAL_DMA_Abort+0x248>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d009      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a61      	ldr	r2, [pc, #388]	@ (8005c10 <HAL_DMA_Abort+0x24c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_DMA_Abort+0xd6>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5f      	ldr	r2, [pc, #380]	@ (8005c14 <HAL_DMA_Abort+0x250>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_DMA_Abort+0xda>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <HAL_DMA_Abort+0xdc>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 021e 	bic.w	r2, r2, #30
 8005ab2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	695a      	ldr	r2, [r3, #20]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ac2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	e00a      	b.n	8005ae2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 020e 	bic.w	r2, r2, #14
 8005ada:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8005bd8 <HAL_DMA_Abort+0x214>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d072      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a3a      	ldr	r2, [pc, #232]	@ (8005bdc <HAL_DMA_Abort+0x218>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d06d      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a39      	ldr	r2, [pc, #228]	@ (8005be0 <HAL_DMA_Abort+0x21c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d068      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a37      	ldr	r2, [pc, #220]	@ (8005be4 <HAL_DMA_Abort+0x220>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d063      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a36      	ldr	r2, [pc, #216]	@ (8005be8 <HAL_DMA_Abort+0x224>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d05e      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a34      	ldr	r2, [pc, #208]	@ (8005bec <HAL_DMA_Abort+0x228>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d059      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a33      	ldr	r2, [pc, #204]	@ (8005bf0 <HAL_DMA_Abort+0x22c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d054      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a31      	ldr	r2, [pc, #196]	@ (8005bf4 <HAL_DMA_Abort+0x230>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d04f      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a30      	ldr	r2, [pc, #192]	@ (8005bf8 <HAL_DMA_Abort+0x234>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d04a      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2e      	ldr	r2, [pc, #184]	@ (8005bfc <HAL_DMA_Abort+0x238>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d045      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c00 <HAL_DMA_Abort+0x23c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d040      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2b      	ldr	r2, [pc, #172]	@ (8005c04 <HAL_DMA_Abort+0x240>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d03b      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005c08 <HAL_DMA_Abort+0x244>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d036      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a28      	ldr	r2, [pc, #160]	@ (8005c0c <HAL_DMA_Abort+0x248>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d031      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a27      	ldr	r2, [pc, #156]	@ (8005c10 <HAL_DMA_Abort+0x24c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d02c      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a25      	ldr	r2, [pc, #148]	@ (8005c14 <HAL_DMA_Abort+0x250>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d027      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a24      	ldr	r2, [pc, #144]	@ (8005c18 <HAL_DMA_Abort+0x254>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d022      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a22      	ldr	r2, [pc, #136]	@ (8005c1c <HAL_DMA_Abort+0x258>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01d      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a21      	ldr	r2, [pc, #132]	@ (8005c20 <HAL_DMA_Abort+0x25c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c24 <HAL_DMA_Abort+0x260>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <HAL_DMA_Abort+0x264>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <HAL_DMA_Abort+0x268>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <HAL_DMA_Abort+0x26c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_DMA_Abort+0x20e>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <HAL_DMA_Abort+0x270>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d132      	bne.n	8005c38 <HAL_DMA_Abort+0x274>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e031      	b.n	8005c3a <HAL_DMA_Abort+0x276>
 8005bd6:	bf00      	nop
 8005bd8:	40020010 	.word	0x40020010
 8005bdc:	40020028 	.word	0x40020028
 8005be0:	40020040 	.word	0x40020040
 8005be4:	40020058 	.word	0x40020058
 8005be8:	40020070 	.word	0x40020070
 8005bec:	40020088 	.word	0x40020088
 8005bf0:	400200a0 	.word	0x400200a0
 8005bf4:	400200b8 	.word	0x400200b8
 8005bf8:	40020410 	.word	0x40020410
 8005bfc:	40020428 	.word	0x40020428
 8005c00:	40020440 	.word	0x40020440
 8005c04:	40020458 	.word	0x40020458
 8005c08:	40020470 	.word	0x40020470
 8005c0c:	40020488 	.word	0x40020488
 8005c10:	400204a0 	.word	0x400204a0
 8005c14:	400204b8 	.word	0x400204b8
 8005c18:	58025408 	.word	0x58025408
 8005c1c:	5802541c 	.word	0x5802541c
 8005c20:	58025430 	.word	0x58025430
 8005c24:	58025444 	.word	0x58025444
 8005c28:	58025458 	.word	0x58025458
 8005c2c:	5802546c 	.word	0x5802546c
 8005c30:	58025480 	.word	0x58025480
 8005c34:	58025494 	.word	0x58025494
 8005c38:	2300      	movs	r3, #0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a6d      	ldr	r2, [pc, #436]	@ (8005e08 <HAL_DMA_Abort+0x444>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d04a      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8005e0c <HAL_DMA_Abort+0x448>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d045      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a6a      	ldr	r2, [pc, #424]	@ (8005e10 <HAL_DMA_Abort+0x44c>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d040      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a68      	ldr	r2, [pc, #416]	@ (8005e14 <HAL_DMA_Abort+0x450>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d03b      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a67      	ldr	r2, [pc, #412]	@ (8005e18 <HAL_DMA_Abort+0x454>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d036      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a65      	ldr	r2, [pc, #404]	@ (8005e1c <HAL_DMA_Abort+0x458>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d031      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a64      	ldr	r2, [pc, #400]	@ (8005e20 <HAL_DMA_Abort+0x45c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d02c      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a62      	ldr	r2, [pc, #392]	@ (8005e24 <HAL_DMA_Abort+0x460>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d027      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a61      	ldr	r2, [pc, #388]	@ (8005e28 <HAL_DMA_Abort+0x464>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d022      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a5f      	ldr	r2, [pc, #380]	@ (8005e2c <HAL_DMA_Abort+0x468>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d01d      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8005e30 <HAL_DMA_Abort+0x46c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d018      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5c      	ldr	r2, [pc, #368]	@ (8005e34 <HAL_DMA_Abort+0x470>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d013      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a5b      	ldr	r2, [pc, #364]	@ (8005e38 <HAL_DMA_Abort+0x474>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00e      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a59      	ldr	r2, [pc, #356]	@ (8005e3c <HAL_DMA_Abort+0x478>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d009      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a58      	ldr	r2, [pc, #352]	@ (8005e40 <HAL_DMA_Abort+0x47c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_DMA_Abort+0x32a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a56      	ldr	r2, [pc, #344]	@ (8005e44 <HAL_DMA_Abort+0x480>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d108      	bne.n	8005d00 <HAL_DMA_Abort+0x33c>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e007      	b.n	8005d10 <HAL_DMA_Abort+0x34c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d10:	e013      	b.n	8005d3a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d12:	f7fd fc1b 	bl	800354c <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d90c      	bls.n	8005d3a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e12d      	b.n	8005f96 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e5      	bne.n	8005d12 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e08 <HAL_DMA_Abort+0x444>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d04a      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a2d      	ldr	r2, [pc, #180]	@ (8005e0c <HAL_DMA_Abort+0x448>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d045      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a2c      	ldr	r2, [pc, #176]	@ (8005e10 <HAL_DMA_Abort+0x44c>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d040      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a2a      	ldr	r2, [pc, #168]	@ (8005e14 <HAL_DMA_Abort+0x450>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03b      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a29      	ldr	r2, [pc, #164]	@ (8005e18 <HAL_DMA_Abort+0x454>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d036      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a27      	ldr	r2, [pc, #156]	@ (8005e1c <HAL_DMA_Abort+0x458>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a26      	ldr	r2, [pc, #152]	@ (8005e20 <HAL_DMA_Abort+0x45c>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02c      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a24      	ldr	r2, [pc, #144]	@ (8005e24 <HAL_DMA_Abort+0x460>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d027      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a23      	ldr	r2, [pc, #140]	@ (8005e28 <HAL_DMA_Abort+0x464>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d022      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a21      	ldr	r2, [pc, #132]	@ (8005e2c <HAL_DMA_Abort+0x468>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a20      	ldr	r2, [pc, #128]	@ (8005e30 <HAL_DMA_Abort+0x46c>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d018      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e34 <HAL_DMA_Abort+0x470>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8005e38 <HAL_DMA_Abort+0x474>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00e      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8005e3c <HAL_DMA_Abort+0x478>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d009      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e40 <HAL_DMA_Abort+0x47c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d004      	beq.n	8005de6 <HAL_DMA_Abort+0x422>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <HAL_DMA_Abort+0x480>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_DMA_Abort+0x426>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <HAL_DMA_Abort+0x428>
 8005dea:	2300      	movs	r3, #0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02b      	beq.n	8005e48 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	223f      	movs	r2, #63	@ 0x3f
 8005e00:	409a      	lsls	r2, r3
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	609a      	str	r2, [r3, #8]
 8005e06:	e02a      	b.n	8005e5e <HAL_DMA_Abort+0x49a>
 8005e08:	40020010 	.word	0x40020010
 8005e0c:	40020028 	.word	0x40020028
 8005e10:	40020040 	.word	0x40020040
 8005e14:	40020058 	.word	0x40020058
 8005e18:	40020070 	.word	0x40020070
 8005e1c:	40020088 	.word	0x40020088
 8005e20:	400200a0 	.word	0x400200a0
 8005e24:	400200b8 	.word	0x400200b8
 8005e28:	40020410 	.word	0x40020410
 8005e2c:	40020428 	.word	0x40020428
 8005e30:	40020440 	.word	0x40020440
 8005e34:	40020458 	.word	0x40020458
 8005e38:	40020470 	.word	0x40020470
 8005e3c:	40020488 	.word	0x40020488
 8005e40:	400204a0 	.word	0x400204a0
 8005e44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2201      	movs	r2, #1
 8005e58:	409a      	lsls	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a4f      	ldr	r2, [pc, #316]	@ (8005fa0 <HAL_DMA_Abort+0x5dc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d072      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8005fa4 <HAL_DMA_Abort+0x5e0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d06d      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a4c      	ldr	r2, [pc, #304]	@ (8005fa8 <HAL_DMA_Abort+0x5e4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d068      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a4a      	ldr	r2, [pc, #296]	@ (8005fac <HAL_DMA_Abort+0x5e8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d063      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a49      	ldr	r2, [pc, #292]	@ (8005fb0 <HAL_DMA_Abort+0x5ec>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d05e      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a47      	ldr	r2, [pc, #284]	@ (8005fb4 <HAL_DMA_Abort+0x5f0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d059      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a46      	ldr	r2, [pc, #280]	@ (8005fb8 <HAL_DMA_Abort+0x5f4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d054      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a44      	ldr	r2, [pc, #272]	@ (8005fbc <HAL_DMA_Abort+0x5f8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d04f      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a43      	ldr	r2, [pc, #268]	@ (8005fc0 <HAL_DMA_Abort+0x5fc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d04a      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a41      	ldr	r2, [pc, #260]	@ (8005fc4 <HAL_DMA_Abort+0x600>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d045      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a40      	ldr	r2, [pc, #256]	@ (8005fc8 <HAL_DMA_Abort+0x604>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d040      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8005fcc <HAL_DMA_Abort+0x608>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d03b      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a3d      	ldr	r2, [pc, #244]	@ (8005fd0 <HAL_DMA_Abort+0x60c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d036      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8005fd4 <HAL_DMA_Abort+0x610>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d031      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a3a      	ldr	r2, [pc, #232]	@ (8005fd8 <HAL_DMA_Abort+0x614>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d02c      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a38      	ldr	r2, [pc, #224]	@ (8005fdc <HAL_DMA_Abort+0x618>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d027      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a37      	ldr	r2, [pc, #220]	@ (8005fe0 <HAL_DMA_Abort+0x61c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d022      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a35      	ldr	r2, [pc, #212]	@ (8005fe4 <HAL_DMA_Abort+0x620>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d01d      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a34      	ldr	r2, [pc, #208]	@ (8005fe8 <HAL_DMA_Abort+0x624>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d018      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a32      	ldr	r2, [pc, #200]	@ (8005fec <HAL_DMA_Abort+0x628>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d013      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a31      	ldr	r2, [pc, #196]	@ (8005ff0 <HAL_DMA_Abort+0x62c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00e      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2f      	ldr	r2, [pc, #188]	@ (8005ff4 <HAL_DMA_Abort+0x630>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d009      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ff8 <HAL_DMA_Abort+0x634>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <HAL_DMA_Abort+0x58a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a2c      	ldr	r2, [pc, #176]	@ (8005ffc <HAL_DMA_Abort+0x638>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_DMA_Abort+0x58e>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_DMA_Abort+0x590>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005f60:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00c      	beq.n	8005f84 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f78:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f82:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	40020010 	.word	0x40020010
 8005fa4:	40020028 	.word	0x40020028
 8005fa8:	40020040 	.word	0x40020040
 8005fac:	40020058 	.word	0x40020058
 8005fb0:	40020070 	.word	0x40020070
 8005fb4:	40020088 	.word	0x40020088
 8005fb8:	400200a0 	.word	0x400200a0
 8005fbc:	400200b8 	.word	0x400200b8
 8005fc0:	40020410 	.word	0x40020410
 8005fc4:	40020428 	.word	0x40020428
 8005fc8:	40020440 	.word	0x40020440
 8005fcc:	40020458 	.word	0x40020458
 8005fd0:	40020470 	.word	0x40020470
 8005fd4:	40020488 	.word	0x40020488
 8005fd8:	400204a0 	.word	0x400204a0
 8005fdc:	400204b8 	.word	0x400204b8
 8005fe0:	58025408 	.word	0x58025408
 8005fe4:	5802541c 	.word	0x5802541c
 8005fe8:	58025430 	.word	0x58025430
 8005fec:	58025444 	.word	0x58025444
 8005ff0:	58025458 	.word	0x58025458
 8005ff4:	5802546c 	.word	0x5802546c
 8005ff8:	58025480 	.word	0x58025480
 8005ffc:	58025494 	.word	0x58025494

08006000 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e237      	b.n	8006482 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d004      	beq.n	8006028 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2280      	movs	r2, #128	@ 0x80
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e22c      	b.n	8006482 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a5c      	ldr	r2, [pc, #368]	@ (80061a0 <HAL_DMA_Abort_IT+0x1a0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d04a      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a5b      	ldr	r2, [pc, #364]	@ (80061a4 <HAL_DMA_Abort_IT+0x1a4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d045      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a59      	ldr	r2, [pc, #356]	@ (80061a8 <HAL_DMA_Abort_IT+0x1a8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d040      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a58      	ldr	r2, [pc, #352]	@ (80061ac <HAL_DMA_Abort_IT+0x1ac>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d03b      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a56      	ldr	r2, [pc, #344]	@ (80061b0 <HAL_DMA_Abort_IT+0x1b0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d036      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a55      	ldr	r2, [pc, #340]	@ (80061b4 <HAL_DMA_Abort_IT+0x1b4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d031      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a53      	ldr	r2, [pc, #332]	@ (80061b8 <HAL_DMA_Abort_IT+0x1b8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d02c      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a52      	ldr	r2, [pc, #328]	@ (80061bc <HAL_DMA_Abort_IT+0x1bc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d027      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a50      	ldr	r2, [pc, #320]	@ (80061c0 <HAL_DMA_Abort_IT+0x1c0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d022      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a4f      	ldr	r2, [pc, #316]	@ (80061c4 <HAL_DMA_Abort_IT+0x1c4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d01d      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a4d      	ldr	r2, [pc, #308]	@ (80061c8 <HAL_DMA_Abort_IT+0x1c8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d018      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a4c      	ldr	r2, [pc, #304]	@ (80061cc <HAL_DMA_Abort_IT+0x1cc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d013      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a4a      	ldr	r2, [pc, #296]	@ (80061d0 <HAL_DMA_Abort_IT+0x1d0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00e      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a49      	ldr	r2, [pc, #292]	@ (80061d4 <HAL_DMA_Abort_IT+0x1d4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d009      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a47      	ldr	r2, [pc, #284]	@ (80061d8 <HAL_DMA_Abort_IT+0x1d8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_DMA_Abort_IT+0xc8>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a46      	ldr	r2, [pc, #280]	@ (80061dc <HAL_DMA_Abort_IT+0x1dc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d101      	bne.n	80060cc <HAL_DMA_Abort_IT+0xcc>
 80060c8:	2301      	movs	r3, #1
 80060ca:	e000      	b.n	80060ce <HAL_DMA_Abort_IT+0xce>
 80060cc:	2300      	movs	r3, #0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8086 	beq.w	80061e0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2f      	ldr	r2, [pc, #188]	@ (80061a0 <HAL_DMA_Abort_IT+0x1a0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04a      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a2e      	ldr	r2, [pc, #184]	@ (80061a4 <HAL_DMA_Abort_IT+0x1a4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d045      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2c      	ldr	r2, [pc, #176]	@ (80061a8 <HAL_DMA_Abort_IT+0x1a8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d040      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2b      	ldr	r2, [pc, #172]	@ (80061ac <HAL_DMA_Abort_IT+0x1ac>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d03b      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a29      	ldr	r2, [pc, #164]	@ (80061b0 <HAL_DMA_Abort_IT+0x1b0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d036      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a28      	ldr	r2, [pc, #160]	@ (80061b4 <HAL_DMA_Abort_IT+0x1b4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d031      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a26      	ldr	r2, [pc, #152]	@ (80061b8 <HAL_DMA_Abort_IT+0x1b8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02c      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a25      	ldr	r2, [pc, #148]	@ (80061bc <HAL_DMA_Abort_IT+0x1bc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d027      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a23      	ldr	r2, [pc, #140]	@ (80061c0 <HAL_DMA_Abort_IT+0x1c0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a22      	ldr	r2, [pc, #136]	@ (80061c4 <HAL_DMA_Abort_IT+0x1c4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d01d      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a20      	ldr	r2, [pc, #128]	@ (80061c8 <HAL_DMA_Abort_IT+0x1c8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1f      	ldr	r2, [pc, #124]	@ (80061cc <HAL_DMA_Abort_IT+0x1cc>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1d      	ldr	r2, [pc, #116]	@ (80061d0 <HAL_DMA_Abort_IT+0x1d0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1c      	ldr	r2, [pc, #112]	@ (80061d4 <HAL_DMA_Abort_IT+0x1d4>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1a      	ldr	r2, [pc, #104]	@ (80061d8 <HAL_DMA_Abort_IT+0x1d8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_DMA_Abort_IT+0x17c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a19      	ldr	r2, [pc, #100]	@ (80061dc <HAL_DMA_Abort_IT+0x1dc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <HAL_DMA_Abort_IT+0x18e>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e178      	b.n	8006480 <HAL_DMA_Abort_IT+0x480>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e16f      	b.n	8006480 <HAL_DMA_Abort_IT+0x480>
 80061a0:	40020010 	.word	0x40020010
 80061a4:	40020028 	.word	0x40020028
 80061a8:	40020040 	.word	0x40020040
 80061ac:	40020058 	.word	0x40020058
 80061b0:	40020070 	.word	0x40020070
 80061b4:	40020088 	.word	0x40020088
 80061b8:	400200a0 	.word	0x400200a0
 80061bc:	400200b8 	.word	0x400200b8
 80061c0:	40020410 	.word	0x40020410
 80061c4:	40020428 	.word	0x40020428
 80061c8:	40020440 	.word	0x40020440
 80061cc:	40020458 	.word	0x40020458
 80061d0:	40020470 	.word	0x40020470
 80061d4:	40020488 	.word	0x40020488
 80061d8:	400204a0 	.word	0x400204a0
 80061dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 020e 	bic.w	r2, r2, #14
 80061ee:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6c      	ldr	r2, [pc, #432]	@ (80063a8 <HAL_DMA_Abort_IT+0x3a8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d04a      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6b      	ldr	r2, [pc, #428]	@ (80063ac <HAL_DMA_Abort_IT+0x3ac>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d045      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a69      	ldr	r2, [pc, #420]	@ (80063b0 <HAL_DMA_Abort_IT+0x3b0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d040      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a68      	ldr	r2, [pc, #416]	@ (80063b4 <HAL_DMA_Abort_IT+0x3b4>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d03b      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a66      	ldr	r2, [pc, #408]	@ (80063b8 <HAL_DMA_Abort_IT+0x3b8>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d036      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a65      	ldr	r2, [pc, #404]	@ (80063bc <HAL_DMA_Abort_IT+0x3bc>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d031      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a63      	ldr	r2, [pc, #396]	@ (80063c0 <HAL_DMA_Abort_IT+0x3c0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02c      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a62      	ldr	r2, [pc, #392]	@ (80063c4 <HAL_DMA_Abort_IT+0x3c4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d027      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a60      	ldr	r2, [pc, #384]	@ (80063c8 <HAL_DMA_Abort_IT+0x3c8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d022      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5f      	ldr	r2, [pc, #380]	@ (80063cc <HAL_DMA_Abort_IT+0x3cc>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01d      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5d      	ldr	r2, [pc, #372]	@ (80063d0 <HAL_DMA_Abort_IT+0x3d0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d018      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a5c      	ldr	r2, [pc, #368]	@ (80063d4 <HAL_DMA_Abort_IT+0x3d4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5a      	ldr	r2, [pc, #360]	@ (80063d8 <HAL_DMA_Abort_IT+0x3d8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a59      	ldr	r2, [pc, #356]	@ (80063dc <HAL_DMA_Abort_IT+0x3dc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a57      	ldr	r2, [pc, #348]	@ (80063e0 <HAL_DMA_Abort_IT+0x3e0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_DMA_Abort_IT+0x290>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a56      	ldr	r2, [pc, #344]	@ (80063e4 <HAL_DMA_Abort_IT+0x3e4>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <HAL_DMA_Abort_IT+0x2a2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e007      	b.n	80062b2 <HAL_DMA_Abort_IT+0x2b2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0201 	bic.w	r2, r2, #1
 80062b0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a3c      	ldr	r2, [pc, #240]	@ (80063a8 <HAL_DMA_Abort_IT+0x3a8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d072      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a3a      	ldr	r2, [pc, #232]	@ (80063ac <HAL_DMA_Abort_IT+0x3ac>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d06d      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a39      	ldr	r2, [pc, #228]	@ (80063b0 <HAL_DMA_Abort_IT+0x3b0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d068      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a37      	ldr	r2, [pc, #220]	@ (80063b4 <HAL_DMA_Abort_IT+0x3b4>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d063      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a36      	ldr	r2, [pc, #216]	@ (80063b8 <HAL_DMA_Abort_IT+0x3b8>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d05e      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a34      	ldr	r2, [pc, #208]	@ (80063bc <HAL_DMA_Abort_IT+0x3bc>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d059      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a33      	ldr	r2, [pc, #204]	@ (80063c0 <HAL_DMA_Abort_IT+0x3c0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d054      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a31      	ldr	r2, [pc, #196]	@ (80063c4 <HAL_DMA_Abort_IT+0x3c4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d04f      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a30      	ldr	r2, [pc, #192]	@ (80063c8 <HAL_DMA_Abort_IT+0x3c8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d04a      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2e      	ldr	r2, [pc, #184]	@ (80063cc <HAL_DMA_Abort_IT+0x3cc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d045      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2d      	ldr	r2, [pc, #180]	@ (80063d0 <HAL_DMA_Abort_IT+0x3d0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d040      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a2b      	ldr	r2, [pc, #172]	@ (80063d4 <HAL_DMA_Abort_IT+0x3d4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d03b      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2a      	ldr	r2, [pc, #168]	@ (80063d8 <HAL_DMA_Abort_IT+0x3d8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d036      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a28      	ldr	r2, [pc, #160]	@ (80063dc <HAL_DMA_Abort_IT+0x3dc>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d031      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a27      	ldr	r2, [pc, #156]	@ (80063e0 <HAL_DMA_Abort_IT+0x3e0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d02c      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a25      	ldr	r2, [pc, #148]	@ (80063e4 <HAL_DMA_Abort_IT+0x3e4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d027      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a24      	ldr	r2, [pc, #144]	@ (80063e8 <HAL_DMA_Abort_IT+0x3e8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d022      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a22      	ldr	r2, [pc, #136]	@ (80063ec <HAL_DMA_Abort_IT+0x3ec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d01d      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a21      	ldr	r2, [pc, #132]	@ (80063f0 <HAL_DMA_Abort_IT+0x3f0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d018      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a1f      	ldr	r2, [pc, #124]	@ (80063f4 <HAL_DMA_Abort_IT+0x3f4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d013      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a1e      	ldr	r2, [pc, #120]	@ (80063f8 <HAL_DMA_Abort_IT+0x3f8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d00e      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <HAL_DMA_Abort_IT+0x3fc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d009      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <HAL_DMA_Abort_IT+0x400>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d004      	beq.n	80063a2 <HAL_DMA_Abort_IT+0x3a2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a19      	ldr	r2, [pc, #100]	@ (8006404 <HAL_DMA_Abort_IT+0x404>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d132      	bne.n	8006408 <HAL_DMA_Abort_IT+0x408>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e031      	b.n	800640a <HAL_DMA_Abort_IT+0x40a>
 80063a6:	bf00      	nop
 80063a8:	40020010 	.word	0x40020010
 80063ac:	40020028 	.word	0x40020028
 80063b0:	40020040 	.word	0x40020040
 80063b4:	40020058 	.word	0x40020058
 80063b8:	40020070 	.word	0x40020070
 80063bc:	40020088 	.word	0x40020088
 80063c0:	400200a0 	.word	0x400200a0
 80063c4:	400200b8 	.word	0x400200b8
 80063c8:	40020410 	.word	0x40020410
 80063cc:	40020428 	.word	0x40020428
 80063d0:	40020440 	.word	0x40020440
 80063d4:	40020458 	.word	0x40020458
 80063d8:	40020470 	.word	0x40020470
 80063dc:	40020488 	.word	0x40020488
 80063e0:	400204a0 	.word	0x400204a0
 80063e4:	400204b8 	.word	0x400204b8
 80063e8:	58025408 	.word	0x58025408
 80063ec:	5802541c 	.word	0x5802541c
 80063f0:	58025430 	.word	0x58025430
 80063f4:	58025444 	.word	0x58025444
 80063f8:	58025458 	.word	0x58025458
 80063fc:	5802546c 	.word	0x5802546c
 8006400:	58025480 	.word	0x58025480
 8006404:	58025494 	.word	0x58025494
 8006408:	2300      	movs	r3, #0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d028      	beq.n	8006460 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006418:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800641c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006422:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006428:	f003 031f 	and.w	r3, r3, #31
 800642c:	2201      	movs	r2, #1
 800642e:	409a      	lsls	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800643c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006450:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006454:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800645e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop

0800648c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	@ 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006498:	4b67      	ldr	r3, [pc, #412]	@ (8006638 <HAL_DMA_IRQHandler+0x1ac>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a67      	ldr	r2, [pc, #412]	@ (800663c <HAL_DMA_IRQHandler+0x1b0>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	0a9b      	lsrs	r3, r3, #10
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5f      	ldr	r2, [pc, #380]	@ (8006640 <HAL_DMA_IRQHandler+0x1b4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d04a      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5d      	ldr	r2, [pc, #372]	@ (8006644 <HAL_DMA_IRQHandler+0x1b8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d045      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a5c      	ldr	r2, [pc, #368]	@ (8006648 <HAL_DMA_IRQHandler+0x1bc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d040      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a5a      	ldr	r2, [pc, #360]	@ (800664c <HAL_DMA_IRQHandler+0x1c0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d03b      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a59      	ldr	r2, [pc, #356]	@ (8006650 <HAL_DMA_IRQHandler+0x1c4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d036      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a57      	ldr	r2, [pc, #348]	@ (8006654 <HAL_DMA_IRQHandler+0x1c8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d031      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a56      	ldr	r2, [pc, #344]	@ (8006658 <HAL_DMA_IRQHandler+0x1cc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d02c      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a54      	ldr	r2, [pc, #336]	@ (800665c <HAL_DMA_IRQHandler+0x1d0>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d027      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a53      	ldr	r2, [pc, #332]	@ (8006660 <HAL_DMA_IRQHandler+0x1d4>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d022      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a51      	ldr	r2, [pc, #324]	@ (8006664 <HAL_DMA_IRQHandler+0x1d8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01d      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a50      	ldr	r2, [pc, #320]	@ (8006668 <HAL_DMA_IRQHandler+0x1dc>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d018      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4e      	ldr	r2, [pc, #312]	@ (800666c <HAL_DMA_IRQHandler+0x1e0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a4d      	ldr	r2, [pc, #308]	@ (8006670 <HAL_DMA_IRQHandler+0x1e4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00e      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a4b      	ldr	r2, [pc, #300]	@ (8006674 <HAL_DMA_IRQHandler+0x1e8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a4a      	ldr	r2, [pc, #296]	@ (8006678 <HAL_DMA_IRQHandler+0x1ec>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <HAL_DMA_IRQHandler+0xd2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a48      	ldr	r2, [pc, #288]	@ (800667c <HAL_DMA_IRQHandler+0x1f0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <HAL_DMA_IRQHandler+0xd6>
 800655e:	2301      	movs	r3, #1
 8006560:	e000      	b.n	8006564 <HAL_DMA_IRQHandler+0xd8>
 8006562:	2300      	movs	r3, #0
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 842b 	beq.w	8006dc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2208      	movs	r2, #8
 8006574:	409a      	lsls	r2, r3
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	4013      	ands	r3, r2
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 80a2 	beq.w	80066c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2e      	ldr	r2, [pc, #184]	@ (8006640 <HAL_DMA_IRQHandler+0x1b4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d04a      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2d      	ldr	r2, [pc, #180]	@ (8006644 <HAL_DMA_IRQHandler+0x1b8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d045      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a2b      	ldr	r2, [pc, #172]	@ (8006648 <HAL_DMA_IRQHandler+0x1bc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d040      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a2a      	ldr	r2, [pc, #168]	@ (800664c <HAL_DMA_IRQHandler+0x1c0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d03b      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a28      	ldr	r2, [pc, #160]	@ (8006650 <HAL_DMA_IRQHandler+0x1c4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d036      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a27      	ldr	r2, [pc, #156]	@ (8006654 <HAL_DMA_IRQHandler+0x1c8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d031      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a25      	ldr	r2, [pc, #148]	@ (8006658 <HAL_DMA_IRQHandler+0x1cc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02c      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a24      	ldr	r2, [pc, #144]	@ (800665c <HAL_DMA_IRQHandler+0x1d0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d027      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a22      	ldr	r2, [pc, #136]	@ (8006660 <HAL_DMA_IRQHandler+0x1d4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a21      	ldr	r2, [pc, #132]	@ (8006664 <HAL_DMA_IRQHandler+0x1d8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	@ (8006668 <HAL_DMA_IRQHandler+0x1dc>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1e      	ldr	r2, [pc, #120]	@ (800666c <HAL_DMA_IRQHandler+0x1e0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <HAL_DMA_IRQHandler+0x1e4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <HAL_DMA_IRQHandler+0x1e8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a19      	ldr	r2, [pc, #100]	@ (8006678 <HAL_DMA_IRQHandler+0x1ec>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_DMA_IRQHandler+0x194>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a18      	ldr	r2, [pc, #96]	@ (800667c <HAL_DMA_IRQHandler+0x1f0>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d12f      	bne.n	8006680 <HAL_DMA_IRQHandler+0x1f4>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b00      	cmp	r3, #0
 800662c:	bf14      	ite	ne
 800662e:	2301      	movne	r3, #1
 8006630:	2300      	moveq	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	e02e      	b.n	8006694 <HAL_DMA_IRQHandler+0x208>
 8006636:	bf00      	nop
 8006638:	24000240 	.word	0x24000240
 800663c:	1b4e81b5 	.word	0x1b4e81b5
 8006640:	40020010 	.word	0x40020010
 8006644:	40020028 	.word	0x40020028
 8006648:	40020040 	.word	0x40020040
 800664c:	40020058 	.word	0x40020058
 8006650:	40020070 	.word	0x40020070
 8006654:	40020088 	.word	0x40020088
 8006658:	400200a0 	.word	0x400200a0
 800665c:	400200b8 	.word	0x400200b8
 8006660:	40020410 	.word	0x40020410
 8006664:	40020428 	.word	0x40020428
 8006668:	40020440 	.word	0x40020440
 800666c:	40020458 	.word	0x40020458
 8006670:	40020470 	.word	0x40020470
 8006674:	40020488 	.word	0x40020488
 8006678:	400204a0 	.word	0x400204a0
 800667c:	400204b8 	.word	0x400204b8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	2208      	movs	r2, #8
 80066b2:	409a      	lsls	r2, r3
 80066b4:	6a3b      	ldr	r3, [r7, #32]
 80066b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066bc:	f043 0201 	orr.w	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066c8:	f003 031f 	and.w	r3, r3, #31
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	fa22 f303 	lsr.w	r3, r2, r3
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d06e      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a69      	ldr	r2, [pc, #420]	@ (8006884 <HAL_DMA_IRQHandler+0x3f8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d04a      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a67      	ldr	r2, [pc, #412]	@ (8006888 <HAL_DMA_IRQHandler+0x3fc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d045      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a66      	ldr	r2, [pc, #408]	@ (800688c <HAL_DMA_IRQHandler+0x400>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d040      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a64      	ldr	r2, [pc, #400]	@ (8006890 <HAL_DMA_IRQHandler+0x404>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d03b      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a63      	ldr	r2, [pc, #396]	@ (8006894 <HAL_DMA_IRQHandler+0x408>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d036      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a61      	ldr	r2, [pc, #388]	@ (8006898 <HAL_DMA_IRQHandler+0x40c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d031      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a60      	ldr	r2, [pc, #384]	@ (800689c <HAL_DMA_IRQHandler+0x410>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d02c      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a5e      	ldr	r2, [pc, #376]	@ (80068a0 <HAL_DMA_IRQHandler+0x414>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d027      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a5d      	ldr	r2, [pc, #372]	@ (80068a4 <HAL_DMA_IRQHandler+0x418>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d022      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a5b      	ldr	r2, [pc, #364]	@ (80068a8 <HAL_DMA_IRQHandler+0x41c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d01d      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a5a      	ldr	r2, [pc, #360]	@ (80068ac <HAL_DMA_IRQHandler+0x420>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d018      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a58      	ldr	r2, [pc, #352]	@ (80068b0 <HAL_DMA_IRQHandler+0x424>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a57      	ldr	r2, [pc, #348]	@ (80068b4 <HAL_DMA_IRQHandler+0x428>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00e      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a55      	ldr	r2, [pc, #340]	@ (80068b8 <HAL_DMA_IRQHandler+0x42c>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d009      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a54      	ldr	r2, [pc, #336]	@ (80068bc <HAL_DMA_IRQHandler+0x430>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d004      	beq.n	800677a <HAL_DMA_IRQHandler+0x2ee>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a52      	ldr	r2, [pc, #328]	@ (80068c0 <HAL_DMA_IRQHandler+0x434>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d10a      	bne.n	8006790 <HAL_DMA_IRQHandler+0x304>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e003      	b.n	8006798 <HAL_DMA_IRQHandler+0x30c>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2300      	movs	r3, #0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00d      	beq.n	80067b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	2201      	movs	r2, #1
 80067a6:	409a      	lsls	r2, r3
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b0:	f043 0202 	orr.w	r2, r3, #2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2204      	movs	r2, #4
 80067c2:	409a      	lsls	r2, r3
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	4013      	ands	r3, r2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 808f 	beq.w	80068ec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006884 <HAL_DMA_IRQHandler+0x3f8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d04a      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a2a      	ldr	r2, [pc, #168]	@ (8006888 <HAL_DMA_IRQHandler+0x3fc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d045      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a29      	ldr	r2, [pc, #164]	@ (800688c <HAL_DMA_IRQHandler+0x400>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d040      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a27      	ldr	r2, [pc, #156]	@ (8006890 <HAL_DMA_IRQHandler+0x404>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d03b      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a26      	ldr	r2, [pc, #152]	@ (8006894 <HAL_DMA_IRQHandler+0x408>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d036      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a24      	ldr	r2, [pc, #144]	@ (8006898 <HAL_DMA_IRQHandler+0x40c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d031      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a23      	ldr	r2, [pc, #140]	@ (800689c <HAL_DMA_IRQHandler+0x410>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d02c      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a21      	ldr	r2, [pc, #132]	@ (80068a0 <HAL_DMA_IRQHandler+0x414>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d027      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a20      	ldr	r2, [pc, #128]	@ (80068a4 <HAL_DMA_IRQHandler+0x418>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1e      	ldr	r2, [pc, #120]	@ (80068a8 <HAL_DMA_IRQHandler+0x41c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01d      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1d      	ldr	r2, [pc, #116]	@ (80068ac <HAL_DMA_IRQHandler+0x420>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d018      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a1b      	ldr	r2, [pc, #108]	@ (80068b0 <HAL_DMA_IRQHandler+0x424>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1a      	ldr	r2, [pc, #104]	@ (80068b4 <HAL_DMA_IRQHandler+0x428>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a18      	ldr	r2, [pc, #96]	@ (80068b8 <HAL_DMA_IRQHandler+0x42c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a17      	ldr	r2, [pc, #92]	@ (80068bc <HAL_DMA_IRQHandler+0x430>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_DMA_IRQHandler+0x3e2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <HAL_DMA_IRQHandler+0x434>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d12a      	bne.n	80068c4 <HAL_DMA_IRQHandler+0x438>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf14      	ite	ne
 800687c:	2301      	movne	r3, #1
 800687e:	2300      	moveq	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	e023      	b.n	80068cc <HAL_DMA_IRQHandler+0x440>
 8006884:	40020010 	.word	0x40020010
 8006888:	40020028 	.word	0x40020028
 800688c:	40020040 	.word	0x40020040
 8006890:	40020058 	.word	0x40020058
 8006894:	40020070 	.word	0x40020070
 8006898:	40020088 	.word	0x40020088
 800689c:	400200a0 	.word	0x400200a0
 80068a0:	400200b8 	.word	0x400200b8
 80068a4:	40020410 	.word	0x40020410
 80068a8:	40020428 	.word	0x40020428
 80068ac:	40020440 	.word	0x40020440
 80068b0:	40020458 	.word	0x40020458
 80068b4:	40020470 	.word	0x40020470
 80068b8:	40020488 	.word	0x40020488
 80068bc:	400204a0 	.word	0x400204a0
 80068c0:	400204b8 	.word	0x400204b8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00d      	beq.n	80068ec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d4:	f003 031f 	and.w	r3, r3, #31
 80068d8:	2204      	movs	r2, #4
 80068da:	409a      	lsls	r2, r3
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068e4:	f043 0204 	orr.w	r2, r3, #4
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f0:	f003 031f 	and.w	r3, r3, #31
 80068f4:	2210      	movs	r2, #16
 80068f6:	409a      	lsls	r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	4013      	ands	r3, r2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80a6 	beq.w	8006a4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a85      	ldr	r2, [pc, #532]	@ (8006b1c <HAL_DMA_IRQHandler+0x690>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d04a      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a83      	ldr	r2, [pc, #524]	@ (8006b20 <HAL_DMA_IRQHandler+0x694>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d045      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a82      	ldr	r2, [pc, #520]	@ (8006b24 <HAL_DMA_IRQHandler+0x698>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d040      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a80      	ldr	r2, [pc, #512]	@ (8006b28 <HAL_DMA_IRQHandler+0x69c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d03b      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a7f      	ldr	r2, [pc, #508]	@ (8006b2c <HAL_DMA_IRQHandler+0x6a0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d036      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a7d      	ldr	r2, [pc, #500]	@ (8006b30 <HAL_DMA_IRQHandler+0x6a4>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d031      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a7c      	ldr	r2, [pc, #496]	@ (8006b34 <HAL_DMA_IRQHandler+0x6a8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d02c      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a7a      	ldr	r2, [pc, #488]	@ (8006b38 <HAL_DMA_IRQHandler+0x6ac>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d027      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a79      	ldr	r2, [pc, #484]	@ (8006b3c <HAL_DMA_IRQHandler+0x6b0>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d022      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a77      	ldr	r2, [pc, #476]	@ (8006b40 <HAL_DMA_IRQHandler+0x6b4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01d      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a76      	ldr	r2, [pc, #472]	@ (8006b44 <HAL_DMA_IRQHandler+0x6b8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d018      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a74      	ldr	r2, [pc, #464]	@ (8006b48 <HAL_DMA_IRQHandler+0x6bc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d013      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a73      	ldr	r2, [pc, #460]	@ (8006b4c <HAL_DMA_IRQHandler+0x6c0>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d00e      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a71      	ldr	r2, [pc, #452]	@ (8006b50 <HAL_DMA_IRQHandler+0x6c4>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d009      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a70      	ldr	r2, [pc, #448]	@ (8006b54 <HAL_DMA_IRQHandler+0x6c8>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d004      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x516>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6e      	ldr	r2, [pc, #440]	@ (8006b58 <HAL_DMA_IRQHandler+0x6cc>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d10a      	bne.n	80069b8 <HAL_DMA_IRQHandler+0x52c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf14      	ite	ne
 80069b0:	2301      	movne	r3, #1
 80069b2:	2300      	moveq	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	e009      	b.n	80069cc <HAL_DMA_IRQHandler+0x540>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bf14      	ite	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	2300      	moveq	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d03e      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d4:	f003 031f 	and.w	r3, r3, #31
 80069d8:	2210      	movs	r2, #16
 80069da:	409a      	lsls	r2, r3
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d018      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d108      	bne.n	8006a0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d024      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
 8006a0c:	e01f      	b.n	8006a4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01b      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3
 8006a1e:	e016      	b.n	8006a4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d107      	bne.n	8006a3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0208 	bic.w	r2, r2, #8
 8006a3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d003      	beq.n	8006a4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2220      	movs	r2, #32
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8110 	beq.w	8006c84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a2c      	ldr	r2, [pc, #176]	@ (8006b1c <HAL_DMA_IRQHandler+0x690>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d04a      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a2b      	ldr	r2, [pc, #172]	@ (8006b20 <HAL_DMA_IRQHandler+0x694>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d045      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a29      	ldr	r2, [pc, #164]	@ (8006b24 <HAL_DMA_IRQHandler+0x698>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d040      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a28      	ldr	r2, [pc, #160]	@ (8006b28 <HAL_DMA_IRQHandler+0x69c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d03b      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a26      	ldr	r2, [pc, #152]	@ (8006b2c <HAL_DMA_IRQHandler+0x6a0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d036      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a25      	ldr	r2, [pc, #148]	@ (8006b30 <HAL_DMA_IRQHandler+0x6a4>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d031      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a23      	ldr	r2, [pc, #140]	@ (8006b34 <HAL_DMA_IRQHandler+0x6a8>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d02c      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a22      	ldr	r2, [pc, #136]	@ (8006b38 <HAL_DMA_IRQHandler+0x6ac>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d027      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a20      	ldr	r2, [pc, #128]	@ (8006b3c <HAL_DMA_IRQHandler+0x6b0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d022      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b40 <HAL_DMA_IRQHandler+0x6b4>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d01d      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a1d      	ldr	r2, [pc, #116]	@ (8006b44 <HAL_DMA_IRQHandler+0x6b8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8006b48 <HAL_DMA_IRQHandler+0x6bc>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d013      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b4c <HAL_DMA_IRQHandler+0x6c0>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a19      	ldr	r2, [pc, #100]	@ (8006b50 <HAL_DMA_IRQHandler+0x6c4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a17      	ldr	r2, [pc, #92]	@ (8006b54 <HAL_DMA_IRQHandler+0x6c8>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_DMA_IRQHandler+0x678>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a16      	ldr	r2, [pc, #88]	@ (8006b58 <HAL_DMA_IRQHandler+0x6cc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d12b      	bne.n	8006b5c <HAL_DMA_IRQHandler+0x6d0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	e02a      	b.n	8006b70 <HAL_DMA_IRQHandler+0x6e4>
 8006b1a:	bf00      	nop
 8006b1c:	40020010 	.word	0x40020010
 8006b20:	40020028 	.word	0x40020028
 8006b24:	40020040 	.word	0x40020040
 8006b28:	40020058 	.word	0x40020058
 8006b2c:	40020070 	.word	0x40020070
 8006b30:	40020088 	.word	0x40020088
 8006b34:	400200a0 	.word	0x400200a0
 8006b38:	400200b8 	.word	0x400200b8
 8006b3c:	40020410 	.word	0x40020410
 8006b40:	40020428 	.word	0x40020428
 8006b44:	40020440 	.word	0x40020440
 8006b48:	40020458 	.word	0x40020458
 8006b4c:	40020470 	.word	0x40020470
 8006b50:	40020488 	.word	0x40020488
 8006b54:	400204a0 	.word	0x400204a0
 8006b58:	400204b8 	.word	0x400204b8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	bf14      	ite	ne
 8006b6a:	2301      	movne	r3, #1
 8006b6c:	2300      	moveq	r3, #0
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 8087 	beq.w	8006c84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2220      	movs	r2, #32
 8006b80:	409a      	lsls	r2, r3
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b04      	cmp	r3, #4
 8006b90:	d139      	bne.n	8006c06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0216 	bic.w	r2, r2, #22
 8006ba0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695a      	ldr	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bb0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d103      	bne.n	8006bc2 <HAL_DMA_IRQHandler+0x736>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0208 	bic.w	r2, r2, #8
 8006bd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bd6:	f003 031f 	and.w	r3, r3, #31
 8006bda:	223f      	movs	r2, #63	@ 0x3f
 8006bdc:	409a      	lsls	r2, r3
 8006bde:	6a3b      	ldr	r3, [r7, #32]
 8006be0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f000 834a 	beq.w	8007290 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	4798      	blx	r3
          }
          return;
 8006c04:	e344      	b.n	8007290 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d018      	beq.n	8006c46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d108      	bne.n	8006c34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d02c      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
 8006c32:	e027      	b.n	8006c84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d023      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
 8006c44:	e01e      	b.n	8006c84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10f      	bne.n	8006c74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0210 	bic.w	r2, r2, #16
 8006c62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8306 	beq.w	800729a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8088 	beq.w	8006dac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a7a      	ldr	r2, [pc, #488]	@ (8006e94 <HAL_DMA_IRQHandler+0xa08>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d04a      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a79      	ldr	r2, [pc, #484]	@ (8006e98 <HAL_DMA_IRQHandler+0xa0c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d045      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a77      	ldr	r2, [pc, #476]	@ (8006e9c <HAL_DMA_IRQHandler+0xa10>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d040      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a76      	ldr	r2, [pc, #472]	@ (8006ea0 <HAL_DMA_IRQHandler+0xa14>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d03b      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a74      	ldr	r2, [pc, #464]	@ (8006ea4 <HAL_DMA_IRQHandler+0xa18>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d036      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a73      	ldr	r2, [pc, #460]	@ (8006ea8 <HAL_DMA_IRQHandler+0xa1c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d031      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a71      	ldr	r2, [pc, #452]	@ (8006eac <HAL_DMA_IRQHandler+0xa20>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d02c      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a70      	ldr	r2, [pc, #448]	@ (8006eb0 <HAL_DMA_IRQHandler+0xa24>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d027      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8006eb4 <HAL_DMA_IRQHandler+0xa28>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d022      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb8 <HAL_DMA_IRQHandler+0xa2c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01d      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8006ebc <HAL_DMA_IRQHandler+0xa30>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d018      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a6a      	ldr	r2, [pc, #424]	@ (8006ec0 <HAL_DMA_IRQHandler+0xa34>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a68      	ldr	r2, [pc, #416]	@ (8006ec4 <HAL_DMA_IRQHandler+0xa38>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00e      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a67      	ldr	r2, [pc, #412]	@ (8006ec8 <HAL_DMA_IRQHandler+0xa3c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a65      	ldr	r2, [pc, #404]	@ (8006ecc <HAL_DMA_IRQHandler+0xa40>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d004      	beq.n	8006d44 <HAL_DMA_IRQHandler+0x8b8>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a64      	ldr	r2, [pc, #400]	@ (8006ed0 <HAL_DMA_IRQHandler+0xa44>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <HAL_DMA_IRQHandler+0x8ca>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0201 	bic.w	r2, r2, #1
 8006d52:	601a      	str	r2, [r3, #0]
 8006d54:	e007      	b.n	8006d66 <HAL_DMA_IRQHandler+0x8da>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 0201 	bic.w	r2, r2, #1
 8006d64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d307      	bcc.n	8006d82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1f2      	bne.n	8006d66 <HAL_DMA_IRQHandler+0x8da>
 8006d80:	e000      	b.n	8006d84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006d82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2203      	movs	r2, #3
 8006d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006d9a:	e003      	b.n	8006da4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8272 	beq.w	800729a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
 8006dbe:	e26c      	b.n	800729a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a43      	ldr	r2, [pc, #268]	@ (8006ed4 <HAL_DMA_IRQHandler+0xa48>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a42      	ldr	r2, [pc, #264]	@ (8006ed8 <HAL_DMA_IRQHandler+0xa4c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a40      	ldr	r2, [pc, #256]	@ (8006edc <HAL_DMA_IRQHandler+0xa50>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ee0 <HAL_DMA_IRQHandler+0xa54>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3d      	ldr	r2, [pc, #244]	@ (8006ee4 <HAL_DMA_IRQHandler+0xa58>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a3c      	ldr	r2, [pc, #240]	@ (8006ee8 <HAL_DMA_IRQHandler+0xa5c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a3a      	ldr	r2, [pc, #232]	@ (8006eec <HAL_DMA_IRQHandler+0xa60>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_DMA_IRQHandler+0x984>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a39      	ldr	r2, [pc, #228]	@ (8006ef0 <HAL_DMA_IRQHandler+0xa64>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d101      	bne.n	8006e14 <HAL_DMA_IRQHandler+0x988>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <HAL_DMA_IRQHandler+0x98a>
 8006e14:	2300      	movs	r3, #0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 823f 	beq.w	800729a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e28:	f003 031f 	and.w	r3, r3, #31
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	4013      	ands	r3, r2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 80cd 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xb48>
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80c7 	beq.w	8006fd4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	2204      	movs	r2, #4
 8006e50:	409a      	lsls	r2, r3
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d049      	beq.n	8006ef4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f000 8210 	beq.w	8007294 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e7c:	e20a      	b.n	8007294 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 8206 	beq.w	8007294 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e90:	e200      	b.n	8007294 <HAL_DMA_IRQHandler+0xe08>
 8006e92:	bf00      	nop
 8006e94:	40020010 	.word	0x40020010
 8006e98:	40020028 	.word	0x40020028
 8006e9c:	40020040 	.word	0x40020040
 8006ea0:	40020058 	.word	0x40020058
 8006ea4:	40020070 	.word	0x40020070
 8006ea8:	40020088 	.word	0x40020088
 8006eac:	400200a0 	.word	0x400200a0
 8006eb0:	400200b8 	.word	0x400200b8
 8006eb4:	40020410 	.word	0x40020410
 8006eb8:	40020428 	.word	0x40020428
 8006ebc:	40020440 	.word	0x40020440
 8006ec0:	40020458 	.word	0x40020458
 8006ec4:	40020470 	.word	0x40020470
 8006ec8:	40020488 	.word	0x40020488
 8006ecc:	400204a0 	.word	0x400204a0
 8006ed0:	400204b8 	.word	0x400204b8
 8006ed4:	58025408 	.word	0x58025408
 8006ed8:	5802541c 	.word	0x5802541c
 8006edc:	58025430 	.word	0x58025430
 8006ee0:	58025444 	.word	0x58025444
 8006ee4:	58025458 	.word	0x58025458
 8006ee8:	5802546c 	.word	0x5802546c
 8006eec:	58025480 	.word	0x58025480
 8006ef0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d160      	bne.n	8006fc0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a7f      	ldr	r2, [pc, #508]	@ (8007100 <HAL_DMA_IRQHandler+0xc74>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d04a      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a7d      	ldr	r2, [pc, #500]	@ (8007104 <HAL_DMA_IRQHandler+0xc78>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d045      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a7c      	ldr	r2, [pc, #496]	@ (8007108 <HAL_DMA_IRQHandler+0xc7c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d040      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a7a      	ldr	r2, [pc, #488]	@ (800710c <HAL_DMA_IRQHandler+0xc80>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d03b      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a79      	ldr	r2, [pc, #484]	@ (8007110 <HAL_DMA_IRQHandler+0xc84>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d036      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a77      	ldr	r2, [pc, #476]	@ (8007114 <HAL_DMA_IRQHandler+0xc88>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d031      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a76      	ldr	r2, [pc, #472]	@ (8007118 <HAL_DMA_IRQHandler+0xc8c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d02c      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a74      	ldr	r2, [pc, #464]	@ (800711c <HAL_DMA_IRQHandler+0xc90>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d027      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a73      	ldr	r2, [pc, #460]	@ (8007120 <HAL_DMA_IRQHandler+0xc94>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d022      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a71      	ldr	r2, [pc, #452]	@ (8007124 <HAL_DMA_IRQHandler+0xc98>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d01d      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a70      	ldr	r2, [pc, #448]	@ (8007128 <HAL_DMA_IRQHandler+0xc9c>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d018      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a6e      	ldr	r2, [pc, #440]	@ (800712c <HAL_DMA_IRQHandler+0xca0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a6d      	ldr	r2, [pc, #436]	@ (8007130 <HAL_DMA_IRQHandler+0xca4>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d00e      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a6b      	ldr	r2, [pc, #428]	@ (8007134 <HAL_DMA_IRQHandler+0xca8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d009      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a6a      	ldr	r2, [pc, #424]	@ (8007138 <HAL_DMA_IRQHandler+0xcac>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d004      	beq.n	8006f9e <HAL_DMA_IRQHandler+0xb12>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a68      	ldr	r2, [pc, #416]	@ (800713c <HAL_DMA_IRQHandler+0xcb0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d108      	bne.n	8006fb0 <HAL_DMA_IRQHandler+0xb24>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0208 	bic.w	r2, r2, #8
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e007      	b.n	8006fc0 <HAL_DMA_IRQHandler+0xb34>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0204 	bic.w	r2, r2, #4
 8006fbe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 8165 	beq.w	8007294 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006fd2:	e15f      	b.n	8007294 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	2202      	movs	r2, #2
 8006fde:	409a      	lsls	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80c5 	beq.w	8007174 <HAL_DMA_IRQHandler+0xce8>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f003 0302 	and.w	r3, r3, #2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80bf 	beq.w	8007174 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	2202      	movs	r2, #2
 8007000:	409a      	lsls	r2, r3
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 813a 	beq.w	8007298 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800702c:	e134      	b.n	8007298 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8130 	beq.w	8007298 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007040:	e12a      	b.n	8007298 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	f040 8089 	bne.w	8007160 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2b      	ldr	r2, [pc, #172]	@ (8007100 <HAL_DMA_IRQHandler+0xc74>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d04a      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a29      	ldr	r2, [pc, #164]	@ (8007104 <HAL_DMA_IRQHandler+0xc78>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d045      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a28      	ldr	r2, [pc, #160]	@ (8007108 <HAL_DMA_IRQHandler+0xc7c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d040      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a26      	ldr	r2, [pc, #152]	@ (800710c <HAL_DMA_IRQHandler+0xc80>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d03b      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a25      	ldr	r2, [pc, #148]	@ (8007110 <HAL_DMA_IRQHandler+0xc84>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d036      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a23      	ldr	r2, [pc, #140]	@ (8007114 <HAL_DMA_IRQHandler+0xc88>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d031      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a22      	ldr	r2, [pc, #136]	@ (8007118 <HAL_DMA_IRQHandler+0xc8c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d02c      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a20      	ldr	r2, [pc, #128]	@ (800711c <HAL_DMA_IRQHandler+0xc90>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d027      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007120 <HAL_DMA_IRQHandler+0xc94>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d022      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007124 <HAL_DMA_IRQHandler+0xc98>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01d      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1c      	ldr	r2, [pc, #112]	@ (8007128 <HAL_DMA_IRQHandler+0xc9c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d018      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1a      	ldr	r2, [pc, #104]	@ (800712c <HAL_DMA_IRQHandler+0xca0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d013      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a19      	ldr	r2, [pc, #100]	@ (8007130 <HAL_DMA_IRQHandler+0xca4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d00e      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a17      	ldr	r2, [pc, #92]	@ (8007134 <HAL_DMA_IRQHandler+0xca8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d009      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a16      	ldr	r2, [pc, #88]	@ (8007138 <HAL_DMA_IRQHandler+0xcac>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d004      	beq.n	80070ee <HAL_DMA_IRQHandler+0xc62>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a14      	ldr	r2, [pc, #80]	@ (800713c <HAL_DMA_IRQHandler+0xcb0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d128      	bne.n	8007140 <HAL_DMA_IRQHandler+0xcb4>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0214 	bic.w	r2, r2, #20
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e027      	b.n	8007150 <HAL_DMA_IRQHandler+0xcc4>
 8007100:	40020010 	.word	0x40020010
 8007104:	40020028 	.word	0x40020028
 8007108:	40020040 	.word	0x40020040
 800710c:	40020058 	.word	0x40020058
 8007110:	40020070 	.word	0x40020070
 8007114:	40020088 	.word	0x40020088
 8007118:	400200a0 	.word	0x400200a0
 800711c:	400200b8 	.word	0x400200b8
 8007120:	40020410 	.word	0x40020410
 8007124:	40020428 	.word	0x40020428
 8007128:	40020440 	.word	0x40020440
 800712c:	40020458 	.word	0x40020458
 8007130:	40020470 	.word	0x40020470
 8007134:	40020488 	.word	0x40020488
 8007138:	400204a0 	.word	0x400204a0
 800713c:	400204b8 	.word	0x400204b8
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 020a 	bic.w	r2, r2, #10
 800714e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8097 	beq.w	8007298 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007172:	e091      	b.n	8007298 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2208      	movs	r2, #8
 800717e:	409a      	lsls	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	4013      	ands	r3, r2
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8088 	beq.w	800729a <HAL_DMA_IRQHandler+0xe0e>
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f003 0308 	and.w	r3, r3, #8
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8082 	beq.w	800729a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a41      	ldr	r2, [pc, #260]	@ (80072a0 <HAL_DMA_IRQHandler+0xe14>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d04a      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a3f      	ldr	r2, [pc, #252]	@ (80072a4 <HAL_DMA_IRQHandler+0xe18>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d045      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3e      	ldr	r2, [pc, #248]	@ (80072a8 <HAL_DMA_IRQHandler+0xe1c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d040      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a3c      	ldr	r2, [pc, #240]	@ (80072ac <HAL_DMA_IRQHandler+0xe20>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d03b      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a3b      	ldr	r2, [pc, #236]	@ (80072b0 <HAL_DMA_IRQHandler+0xe24>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d036      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a39      	ldr	r2, [pc, #228]	@ (80072b4 <HAL_DMA_IRQHandler+0xe28>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d031      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a38      	ldr	r2, [pc, #224]	@ (80072b8 <HAL_DMA_IRQHandler+0xe2c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d02c      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a36      	ldr	r2, [pc, #216]	@ (80072bc <HAL_DMA_IRQHandler+0xe30>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d027      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a35      	ldr	r2, [pc, #212]	@ (80072c0 <HAL_DMA_IRQHandler+0xe34>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a33      	ldr	r2, [pc, #204]	@ (80072c4 <HAL_DMA_IRQHandler+0xe38>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a32      	ldr	r2, [pc, #200]	@ (80072c8 <HAL_DMA_IRQHandler+0xe3c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d018      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a30      	ldr	r2, [pc, #192]	@ (80072cc <HAL_DMA_IRQHandler+0xe40>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2f      	ldr	r2, [pc, #188]	@ (80072d0 <HAL_DMA_IRQHandler+0xe44>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2d      	ldr	r2, [pc, #180]	@ (80072d4 <HAL_DMA_IRQHandler+0xe48>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2c      	ldr	r2, [pc, #176]	@ (80072d8 <HAL_DMA_IRQHandler+0xe4c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_DMA_IRQHandler+0xdaa>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a2a      	ldr	r2, [pc, #168]	@ (80072dc <HAL_DMA_IRQHandler+0xe50>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d108      	bne.n	8007248 <HAL_DMA_IRQHandler+0xdbc>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 021c 	bic.w	r2, r2, #28
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	e007      	b.n	8007258 <HAL_DMA_IRQHandler+0xdcc>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 020e 	bic.w	r2, r2, #14
 8007256:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2201      	movs	r2, #1
 8007262:	409a      	lsls	r2, r3
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	e004      	b.n	800729a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007290:	bf00      	nop
 8007292:	e002      	b.n	800729a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007294:	bf00      	nop
 8007296:	e000      	b.n	800729a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007298:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800729a:	3728      	adds	r7, #40	@ 0x28
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	40020010 	.word	0x40020010
 80072a4:	40020028 	.word	0x40020028
 80072a8:	40020040 	.word	0x40020040
 80072ac:	40020058 	.word	0x40020058
 80072b0:	40020070 	.word	0x40020070
 80072b4:	40020088 	.word	0x40020088
 80072b8:	400200a0 	.word	0x400200a0
 80072bc:	400200b8 	.word	0x400200b8
 80072c0:	40020410 	.word	0x40020410
 80072c4:	40020428 	.word	0x40020428
 80072c8:	40020440 	.word	0x40020440
 80072cc:	40020458 	.word	0x40020458
 80072d0:	40020470 	.word	0x40020470
 80072d4:	40020488 	.word	0x40020488
 80072d8:	400204a0 	.word	0x400204a0
 80072dc:	400204b8 	.word	0x400204b8

080072e0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072ee:	b2db      	uxtb	r3, r3
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007308:	4618      	mov	r0, r3
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007314:	b480      	push	{r7}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
 8007320:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007326:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a7f      	ldr	r2, [pc, #508]	@ (8007530 <DMA_SetConfig+0x21c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d072      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a7d      	ldr	r2, [pc, #500]	@ (8007534 <DMA_SetConfig+0x220>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d06d      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a7c      	ldr	r2, [pc, #496]	@ (8007538 <DMA_SetConfig+0x224>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d068      	beq.n	800741e <DMA_SetConfig+0x10a>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a7a      	ldr	r2, [pc, #488]	@ (800753c <DMA_SetConfig+0x228>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d063      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a79      	ldr	r2, [pc, #484]	@ (8007540 <DMA_SetConfig+0x22c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d05e      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a77      	ldr	r2, [pc, #476]	@ (8007544 <DMA_SetConfig+0x230>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d059      	beq.n	800741e <DMA_SetConfig+0x10a>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a76      	ldr	r2, [pc, #472]	@ (8007548 <DMA_SetConfig+0x234>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d054      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a74      	ldr	r2, [pc, #464]	@ (800754c <DMA_SetConfig+0x238>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d04f      	beq.n	800741e <DMA_SetConfig+0x10a>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a73      	ldr	r2, [pc, #460]	@ (8007550 <DMA_SetConfig+0x23c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d04a      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a71      	ldr	r2, [pc, #452]	@ (8007554 <DMA_SetConfig+0x240>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d045      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a70      	ldr	r2, [pc, #448]	@ (8007558 <DMA_SetConfig+0x244>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d040      	beq.n	800741e <DMA_SetConfig+0x10a>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a6e      	ldr	r2, [pc, #440]	@ (800755c <DMA_SetConfig+0x248>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d03b      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a6d      	ldr	r2, [pc, #436]	@ (8007560 <DMA_SetConfig+0x24c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d036      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a6b      	ldr	r2, [pc, #428]	@ (8007564 <DMA_SetConfig+0x250>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d031      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a6a      	ldr	r2, [pc, #424]	@ (8007568 <DMA_SetConfig+0x254>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d02c      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a68      	ldr	r2, [pc, #416]	@ (800756c <DMA_SetConfig+0x258>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d027      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a67      	ldr	r2, [pc, #412]	@ (8007570 <DMA_SetConfig+0x25c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d022      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a65      	ldr	r2, [pc, #404]	@ (8007574 <DMA_SetConfig+0x260>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d01d      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a64      	ldr	r2, [pc, #400]	@ (8007578 <DMA_SetConfig+0x264>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d018      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a62      	ldr	r2, [pc, #392]	@ (800757c <DMA_SetConfig+0x268>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d013      	beq.n	800741e <DMA_SetConfig+0x10a>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a61      	ldr	r2, [pc, #388]	@ (8007580 <DMA_SetConfig+0x26c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00e      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a5f      	ldr	r2, [pc, #380]	@ (8007584 <DMA_SetConfig+0x270>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <DMA_SetConfig+0x10a>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a5e      	ldr	r2, [pc, #376]	@ (8007588 <DMA_SetConfig+0x274>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <DMA_SetConfig+0x10a>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a5c      	ldr	r2, [pc, #368]	@ (800758c <DMA_SetConfig+0x278>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d101      	bne.n	8007422 <DMA_SetConfig+0x10e>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <DMA_SetConfig+0x110>
 8007422:	2300      	movs	r3, #0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00d      	beq.n	8007444 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007430:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007442:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a39      	ldr	r2, [pc, #228]	@ (8007530 <DMA_SetConfig+0x21c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d04a      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a38      	ldr	r2, [pc, #224]	@ (8007534 <DMA_SetConfig+0x220>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d045      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a36      	ldr	r2, [pc, #216]	@ (8007538 <DMA_SetConfig+0x224>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d040      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a35      	ldr	r2, [pc, #212]	@ (800753c <DMA_SetConfig+0x228>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d03b      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a33      	ldr	r2, [pc, #204]	@ (8007540 <DMA_SetConfig+0x22c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d036      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a32      	ldr	r2, [pc, #200]	@ (8007544 <DMA_SetConfig+0x230>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d031      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a30      	ldr	r2, [pc, #192]	@ (8007548 <DMA_SetConfig+0x234>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d02c      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a2f      	ldr	r2, [pc, #188]	@ (800754c <DMA_SetConfig+0x238>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d027      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a2d      	ldr	r2, [pc, #180]	@ (8007550 <DMA_SetConfig+0x23c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d022      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a2c      	ldr	r2, [pc, #176]	@ (8007554 <DMA_SetConfig+0x240>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d01d      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007558 <DMA_SetConfig+0x244>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d018      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a29      	ldr	r2, [pc, #164]	@ (800755c <DMA_SetConfig+0x248>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a27      	ldr	r2, [pc, #156]	@ (8007560 <DMA_SetConfig+0x24c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d00e      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a26      	ldr	r2, [pc, #152]	@ (8007564 <DMA_SetConfig+0x250>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d009      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a24      	ldr	r2, [pc, #144]	@ (8007568 <DMA_SetConfig+0x254>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d004      	beq.n	80074e4 <DMA_SetConfig+0x1d0>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a23      	ldr	r2, [pc, #140]	@ (800756c <DMA_SetConfig+0x258>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d101      	bne.n	80074e8 <DMA_SetConfig+0x1d4>
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <DMA_SetConfig+0x1d6>
 80074e8:	2300      	movs	r3, #0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d059      	beq.n	80075a2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	223f      	movs	r2, #63	@ 0x3f
 80074f8:	409a      	lsls	r2, r3
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800750c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d138      	bne.n	8007590 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800752e:	e086      	b.n	800763e <DMA_SetConfig+0x32a>
 8007530:	40020010 	.word	0x40020010
 8007534:	40020028 	.word	0x40020028
 8007538:	40020040 	.word	0x40020040
 800753c:	40020058 	.word	0x40020058
 8007540:	40020070 	.word	0x40020070
 8007544:	40020088 	.word	0x40020088
 8007548:	400200a0 	.word	0x400200a0
 800754c:	400200b8 	.word	0x400200b8
 8007550:	40020410 	.word	0x40020410
 8007554:	40020428 	.word	0x40020428
 8007558:	40020440 	.word	0x40020440
 800755c:	40020458 	.word	0x40020458
 8007560:	40020470 	.word	0x40020470
 8007564:	40020488 	.word	0x40020488
 8007568:	400204a0 	.word	0x400204a0
 800756c:	400204b8 	.word	0x400204b8
 8007570:	58025408 	.word	0x58025408
 8007574:	5802541c 	.word	0x5802541c
 8007578:	58025430 	.word	0x58025430
 800757c:	58025444 	.word	0x58025444
 8007580:	58025458 	.word	0x58025458
 8007584:	5802546c 	.word	0x5802546c
 8007588:	58025480 	.word	0x58025480
 800758c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	60da      	str	r2, [r3, #12]
}
 80075a0:	e04d      	b.n	800763e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a29      	ldr	r2, [pc, #164]	@ (800764c <DMA_SetConfig+0x338>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d022      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a27      	ldr	r2, [pc, #156]	@ (8007650 <DMA_SetConfig+0x33c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d01d      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a26      	ldr	r2, [pc, #152]	@ (8007654 <DMA_SetConfig+0x340>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a24      	ldr	r2, [pc, #144]	@ (8007658 <DMA_SetConfig+0x344>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a23      	ldr	r2, [pc, #140]	@ (800765c <DMA_SetConfig+0x348>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a21      	ldr	r2, [pc, #132]	@ (8007660 <DMA_SetConfig+0x34c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a20      	ldr	r2, [pc, #128]	@ (8007664 <DMA_SetConfig+0x350>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <DMA_SetConfig+0x2de>
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007668 <DMA_SetConfig+0x354>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d101      	bne.n	80075f6 <DMA_SetConfig+0x2e2>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <DMA_SetConfig+0x2e4>
 80075f6:	2300      	movs	r3, #0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d020      	beq.n	800763e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	2201      	movs	r2, #1
 8007606:	409a      	lsls	r2, r3
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2b40      	cmp	r3, #64	@ 0x40
 800761a:	d108      	bne.n	800762e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	60da      	str	r2, [r3, #12]
}
 800762c:	e007      	b.n	800763e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	58025408 	.word	0x58025408
 8007650:	5802541c 	.word	0x5802541c
 8007654:	58025430 	.word	0x58025430
 8007658:	58025444 	.word	0x58025444
 800765c:	58025458 	.word	0x58025458
 8007660:	5802546c 	.word	0x5802546c
 8007664:	58025480 	.word	0x58025480
 8007668:	58025494 	.word	0x58025494

0800766c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a42      	ldr	r2, [pc, #264]	@ (8007784 <DMA_CalcBaseAndBitshift+0x118>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d04a      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a41      	ldr	r2, [pc, #260]	@ (8007788 <DMA_CalcBaseAndBitshift+0x11c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d045      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a3f      	ldr	r2, [pc, #252]	@ (800778c <DMA_CalcBaseAndBitshift+0x120>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d040      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a3e      	ldr	r2, [pc, #248]	@ (8007790 <DMA_CalcBaseAndBitshift+0x124>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d03b      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007794 <DMA_CalcBaseAndBitshift+0x128>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d036      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a3b      	ldr	r2, [pc, #236]	@ (8007798 <DMA_CalcBaseAndBitshift+0x12c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d031      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a39      	ldr	r2, [pc, #228]	@ (800779c <DMA_CalcBaseAndBitshift+0x130>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d02c      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a38      	ldr	r2, [pc, #224]	@ (80077a0 <DMA_CalcBaseAndBitshift+0x134>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d027      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a36      	ldr	r2, [pc, #216]	@ (80077a4 <DMA_CalcBaseAndBitshift+0x138>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d022      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a35      	ldr	r2, [pc, #212]	@ (80077a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d01d      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a33      	ldr	r2, [pc, #204]	@ (80077ac <DMA_CalcBaseAndBitshift+0x140>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d018      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a32      	ldr	r2, [pc, #200]	@ (80077b0 <DMA_CalcBaseAndBitshift+0x144>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d013      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a30      	ldr	r2, [pc, #192]	@ (80077b4 <DMA_CalcBaseAndBitshift+0x148>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00e      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a2f      	ldr	r2, [pc, #188]	@ (80077b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d009      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a2d      	ldr	r2, [pc, #180]	@ (80077bc <DMA_CalcBaseAndBitshift+0x150>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d004      	beq.n	8007714 <DMA_CalcBaseAndBitshift+0xa8>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a2c      	ldr	r2, [pc, #176]	@ (80077c0 <DMA_CalcBaseAndBitshift+0x154>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d101      	bne.n	8007718 <DMA_CalcBaseAndBitshift+0xac>
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <DMA_CalcBaseAndBitshift+0xae>
 8007718:	2300      	movs	r3, #0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d024      	beq.n	8007768 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	3b10      	subs	r3, #16
 8007726:	4a27      	ldr	r2, [pc, #156]	@ (80077c4 <DMA_CalcBaseAndBitshift+0x158>)
 8007728:	fba2 2303 	umull	r2, r3, r2, r3
 800772c:	091b      	lsrs	r3, r3, #4
 800772e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	4a24      	ldr	r2, [pc, #144]	@ (80077c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007738:	5cd3      	ldrb	r3, [r2, r3]
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b03      	cmp	r3, #3
 8007744:	d908      	bls.n	8007758 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	4b1f      	ldr	r3, [pc, #124]	@ (80077cc <DMA_CalcBaseAndBitshift+0x160>)
 800774e:	4013      	ands	r3, r2
 8007750:	1d1a      	adds	r2, r3, #4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	659a      	str	r2, [r3, #88]	@ 0x58
 8007756:	e00d      	b.n	8007774 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <DMA_CalcBaseAndBitshift+0x160>)
 8007760:	4013      	ands	r3, r2
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6593      	str	r3, [r2, #88]	@ 0x58
 8007766:	e005      	b.n	8007774 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	40020010 	.word	0x40020010
 8007788:	40020028 	.word	0x40020028
 800778c:	40020040 	.word	0x40020040
 8007790:	40020058 	.word	0x40020058
 8007794:	40020070 	.word	0x40020070
 8007798:	40020088 	.word	0x40020088
 800779c:	400200a0 	.word	0x400200a0
 80077a0:	400200b8 	.word	0x400200b8
 80077a4:	40020410 	.word	0x40020410
 80077a8:	40020428 	.word	0x40020428
 80077ac:	40020440 	.word	0x40020440
 80077b0:	40020458 	.word	0x40020458
 80077b4:	40020470 	.word	0x40020470
 80077b8:	40020488 	.word	0x40020488
 80077bc:	400204a0 	.word	0x400204a0
 80077c0:	400204b8 	.word	0x400204b8
 80077c4:	aaaaaaab 	.word	0xaaaaaaab
 80077c8:	0801d98c 	.word	0x0801d98c
 80077cc:	fffffc00 	.word	0xfffffc00

080077d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d120      	bne.n	8007826 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d858      	bhi.n	800789e <DMA_CheckFifoParam+0xce>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <DMA_CheckFifoParam+0x24>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007817 	.word	0x08007817
 80077fc:	08007805 	.word	0x08007805
 8007800:	0800789f 	.word	0x0800789f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d048      	beq.n	80078a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007814:	e045      	b.n	80078a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800781a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800781e:	d142      	bne.n	80078a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007824:	e03f      	b.n	80078a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800782e:	d123      	bne.n	8007878 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007834:	2b03      	cmp	r3, #3
 8007836:	d838      	bhi.n	80078aa <DMA_CheckFifoParam+0xda>
 8007838:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <DMA_CheckFifoParam+0x70>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007851 	.word	0x08007851
 8007844:	08007857 	.word	0x08007857
 8007848:	08007851 	.word	0x08007851
 800784c:	08007869 	.word	0x08007869
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
        break;
 8007854:	e030      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d025      	beq.n	80078ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007866:	e022      	b.n	80078ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800786c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007870:	d11f      	bne.n	80078b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007876:	e01c      	b.n	80078b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787c:	2b02      	cmp	r3, #2
 800787e:	d902      	bls.n	8007886 <DMA_CheckFifoParam+0xb6>
 8007880:	2b03      	cmp	r3, #3
 8007882:	d003      	beq.n	800788c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007884:	e018      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	73fb      	strb	r3, [r7, #15]
        break;
 800788a:	e015      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007890:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00e      	beq.n	80078b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	73fb      	strb	r3, [r7, #15]
    break;
 800789c:	e00b      	b.n	80078b6 <DMA_CheckFifoParam+0xe6>
        break;
 800789e:	bf00      	nop
 80078a0:	e00a      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        break;
 80078a2:	bf00      	nop
 80078a4:	e008      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        break;
 80078a6:	bf00      	nop
 80078a8:	e006      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        break;
 80078aa:	bf00      	nop
 80078ac:	e004      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        break;
 80078ae:	bf00      	nop
 80078b0:	e002      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
        break;
 80078b2:	bf00      	nop
 80078b4:	e000      	b.n	80078b8 <DMA_CheckFifoParam+0xe8>
    break;
 80078b6:	bf00      	nop
    }
  }

  return status;
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop

080078c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a38      	ldr	r2, [pc, #224]	@ (80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d022      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a36      	ldr	r2, [pc, #216]	@ (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d01d      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a35      	ldr	r2, [pc, #212]	@ (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d018      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a33      	ldr	r2, [pc, #204]	@ (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d013      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a32      	ldr	r2, [pc, #200]	@ (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00e      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a30      	ldr	r2, [pc, #192]	@ (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d009      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a2f      	ldr	r2, [pc, #188]	@ (80079d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d004      	beq.n	8007926 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a2d      	ldr	r2, [pc, #180]	@ (80079d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d101      	bne.n	800792a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007926:	2301      	movs	r3, #1
 8007928:	e000      	b.n	800792c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800792a:	2300      	movs	r3, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01a      	beq.n	8007966 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	3b08      	subs	r3, #8
 8007938:	4a28      	ldr	r2, [pc, #160]	@ (80079dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	4b26      	ldr	r3, [pc, #152]	@ (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a24      	ldr	r2, [pc, #144]	@ (80079e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007954:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f003 031f 	and.w	r3, r3, #31
 800795c:	2201      	movs	r2, #1
 800795e:	409a      	lsls	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007964:	e024      	b.n	80079b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	b2db      	uxtb	r3, r3
 800796c:	3b10      	subs	r3, #16
 800796e:	4a1e      	ldr	r2, [pc, #120]	@ (80079e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007970:	fba2 2303 	umull	r2, r3, r2, r3
 8007974:	091b      	lsrs	r3, r3, #4
 8007976:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4a1c      	ldr	r2, [pc, #112]	@ (80079ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d806      	bhi.n	800798e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	4a1b      	ldr	r2, [pc, #108]	@ (80079f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d902      	bls.n	800798e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3308      	adds	r3, #8
 800798c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4b18      	ldr	r3, [pc, #96]	@ (80079f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a16      	ldr	r2, [pc, #88]	@ (80079f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80079a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f003 031f 	and.w	r3, r3, #31
 80079a8:	2201      	movs	r2, #1
 80079aa:	409a      	lsls	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80079b0:	bf00      	nop
 80079b2:	3714      	adds	r7, #20
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	58025408 	.word	0x58025408
 80079c0:	5802541c 	.word	0x5802541c
 80079c4:	58025430 	.word	0x58025430
 80079c8:	58025444 	.word	0x58025444
 80079cc:	58025458 	.word	0x58025458
 80079d0:	5802546c 	.word	0x5802546c
 80079d4:	58025480 	.word	0x58025480
 80079d8:	58025494 	.word	0x58025494
 80079dc:	cccccccd 	.word	0xcccccccd
 80079e0:	16009600 	.word	0x16009600
 80079e4:	58025880 	.word	0x58025880
 80079e8:	aaaaaaab 	.word	0xaaaaaaab
 80079ec:	400204b8 	.word	0x400204b8
 80079f0:	4002040f 	.word	0x4002040f
 80079f4:	10008200 	.word	0x10008200
 80079f8:	40020880 	.word	0x40020880

080079fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d04a      	beq.n	8007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d847      	bhi.n	8007aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a25      	ldr	r2, [pc, #148]	@ (8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d022      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a24      	ldr	r2, [pc, #144]	@ (8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d01d      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a22      	ldr	r2, [pc, #136]	@ (8007abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d018      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a21      	ldr	r2, [pc, #132]	@ (8007ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d013      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a1f      	ldr	r2, [pc, #124]	@ (8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d00e      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d009      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a1c      	ldr	r2, [pc, #112]	@ (8007acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d004      	beq.n	8007a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a1b      	ldr	r2, [pc, #108]	@ (8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d101      	bne.n	8007a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4b17      	ldr	r3, [pc, #92]	@ (8007ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a84:	671a      	str	r2, [r3, #112]	@ 0x70
 8007a86:	e009      	b.n	8007a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4b14      	ldr	r3, [pc, #80]	@ (8007adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a8c:	4413      	add	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a11      	ldr	r2, [pc, #68]	@ (8007ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a9a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	409a      	lsls	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8007aa8:	bf00      	nop
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	58025408 	.word	0x58025408
 8007ab8:	5802541c 	.word	0x5802541c
 8007abc:	58025430 	.word	0x58025430
 8007ac0:	58025444 	.word	0x58025444
 8007ac4:	58025458 	.word	0x58025458
 8007ac8:	5802546c 	.word	0x5802546c
 8007acc:	58025480 	.word	0x58025480
 8007ad0:	58025494 	.word	0x58025494
 8007ad4:	1600963f 	.word	0x1600963f
 8007ad8:	58025940 	.word	0x58025940
 8007adc:	1000823f 	.word	0x1000823f
 8007ae0:	40020940 	.word	0x40020940

08007ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b089      	sub	sp, #36	@ 0x24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007af2:	4b89      	ldr	r3, [pc, #548]	@ (8007d18 <HAL_GPIO_Init+0x234>)
 8007af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007af6:	e194      	b.n	8007e22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	2101      	movs	r1, #1
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	4013      	ands	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8186 	beq.w	8007e1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d005      	beq.n	8007b28 <HAL_GPIO_Init+0x44>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d130      	bne.n	8007b8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	2203      	movs	r2, #3
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	69fb      	ldr	r3, [r7, #28]
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	fa02 f303 	lsl.w	r3, r2, r3
 8007b4c:	69ba      	ldr	r2, [r7, #24]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b5e:	2201      	movs	r2, #1
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	fa02 f303 	lsl.w	r3, r2, r3
 8007b66:	43db      	mvns	r3, r3
 8007b68:	69ba      	ldr	r2, [r7, #24]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	f003 0201 	and.w	r2, r3, #1
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d017      	beq.n	8007bc6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba6:	43db      	mvns	r3, r3
 8007ba8:	69ba      	ldr	r2, [r7, #24]
 8007baa:	4013      	ands	r3, r2
 8007bac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d123      	bne.n	8007c1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	08da      	lsrs	r2, r3, #3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3208      	adds	r2, #8
 8007bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	220f      	movs	r2, #15
 8007bea:	fa02 f303 	lsl.w	r3, r2, r3
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	69ba      	ldr	r2, [r7, #24]
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	08da      	lsrs	r2, r3, #3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3208      	adds	r2, #8
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	2203      	movs	r2, #3
 8007c26:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2a:	43db      	mvns	r3, r3
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	f003 0203 	and.w	r2, r3, #3
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80e0 	beq.w	8007e1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c5c:	4b2f      	ldr	r3, [pc, #188]	@ (8007d1c <HAL_GPIO_Init+0x238>)
 8007c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c62:	4a2e      	ldr	r2, [pc, #184]	@ (8007d1c <HAL_GPIO_Init+0x238>)
 8007c64:	f043 0302 	orr.w	r3, r3, #2
 8007c68:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8007d1c <HAL_GPIO_Init+0x238>)
 8007c6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c7a:	4a29      	ldr	r2, [pc, #164]	@ (8007d20 <HAL_GPIO_Init+0x23c>)
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	089b      	lsrs	r3, r3, #2
 8007c80:	3302      	adds	r3, #2
 8007c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0303 	and.w	r3, r3, #3
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	220f      	movs	r2, #15
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a20      	ldr	r2, [pc, #128]	@ (8007d24 <HAL_GPIO_Init+0x240>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d052      	beq.n	8007d4c <HAL_GPIO_Init+0x268>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8007d28 <HAL_GPIO_Init+0x244>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d031      	beq.n	8007d12 <HAL_GPIO_Init+0x22e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8007d2c <HAL_GPIO_Init+0x248>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d02b      	beq.n	8007d0e <HAL_GPIO_Init+0x22a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d30 <HAL_GPIO_Init+0x24c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d025      	beq.n	8007d0a <HAL_GPIO_Init+0x226>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8007d34 <HAL_GPIO_Init+0x250>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d01f      	beq.n	8007d06 <HAL_GPIO_Init+0x222>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007d38 <HAL_GPIO_Init+0x254>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d019      	beq.n	8007d02 <HAL_GPIO_Init+0x21e>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8007d3c <HAL_GPIO_Init+0x258>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d013      	beq.n	8007cfe <HAL_GPIO_Init+0x21a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a19      	ldr	r2, [pc, #100]	@ (8007d40 <HAL_GPIO_Init+0x25c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00d      	beq.n	8007cfa <HAL_GPIO_Init+0x216>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a18      	ldr	r2, [pc, #96]	@ (8007d44 <HAL_GPIO_Init+0x260>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <HAL_GPIO_Init+0x212>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a17      	ldr	r2, [pc, #92]	@ (8007d48 <HAL_GPIO_Init+0x264>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d101      	bne.n	8007cf2 <HAL_GPIO_Init+0x20e>
 8007cee:	2309      	movs	r3, #9
 8007cf0:	e02d      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007cf2:	230a      	movs	r3, #10
 8007cf4:	e02b      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	e029      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007cfa:	2307      	movs	r3, #7
 8007cfc:	e027      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007cfe:	2306      	movs	r3, #6
 8007d00:	e025      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007d02:	2305      	movs	r3, #5
 8007d04:	e023      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007d06:	2304      	movs	r3, #4
 8007d08:	e021      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e01f      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e01d      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e01b      	b.n	8007d4e <HAL_GPIO_Init+0x26a>
 8007d16:	bf00      	nop
 8007d18:	58000080 	.word	0x58000080
 8007d1c:	58024400 	.word	0x58024400
 8007d20:	58000400 	.word	0x58000400
 8007d24:	58020000 	.word	0x58020000
 8007d28:	58020400 	.word	0x58020400
 8007d2c:	58020800 	.word	0x58020800
 8007d30:	58020c00 	.word	0x58020c00
 8007d34:	58021000 	.word	0x58021000
 8007d38:	58021400 	.word	0x58021400
 8007d3c:	58021800 	.word	0x58021800
 8007d40:	58021c00 	.word	0x58021c00
 8007d44:	58022000 	.word	0x58022000
 8007d48:	58022400 	.word	0x58022400
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	f002 0203 	and.w	r2, r2, #3
 8007d54:	0092      	lsls	r2, r2, #2
 8007d56:	4093      	lsls	r3, r2
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d5e:	4938      	ldr	r1, [pc, #224]	@ (8007e40 <HAL_GPIO_Init+0x35c>)
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	089b      	lsrs	r3, r3, #2
 8007d64:	3302      	adds	r3, #2
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	43db      	mvns	r3, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007d92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007d9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	43db      	mvns	r3, r3
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	4013      	ands	r3, r2
 8007daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007dc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	43db      	mvns	r3, r3
 8007dfc:	69ba      	ldr	r2, [r7, #24]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	fa22 f303 	lsr.w	r3, r2, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f47f ae63 	bne.w	8007af8 <HAL_GPIO_Init+0x14>
  }
}
 8007e32:	bf00      	nop
 8007e34:	bf00      	nop
 8007e36:	3724      	adds	r7, #36	@ 0x24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	58000400 	.word	0x58000400

08007e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	887b      	ldrh	r3, [r7, #2]
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	e001      	b.n	8007e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	807b      	strh	r3, [r7, #2]
 8007e80:	4613      	mov	r3, r2
 8007e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e84:	787b      	ldrb	r3, [r7, #1]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e8a:	887a      	ldrh	r2, [r7, #2]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007e90:	e003      	b.n	8007e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007e92:	887b      	ldrh	r3, [r7, #2]
 8007e94:	041a      	lsls	r2, r3, #16
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	619a      	str	r2, [r3, #24]
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
	...

08007ea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d101      	bne.n	8007eba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e08b      	b.n	8007fd2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7f9 ff0e 	bl	8001cf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2224      	movs	r2, #36	@ 0x24
 8007ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0201 	bic.w	r2, r2, #1
 8007eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d107      	bne.n	8007f22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f1e:	609a      	str	r2, [r3, #8]
 8007f20:	e006      	b.n	8007f30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689a      	ldr	r2, [r3, #8]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007f2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d108      	bne.n	8007f4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	e007      	b.n	8007f5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6859      	ldr	r1, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	4b1d      	ldr	r3, [pc, #116]	@ (8007fdc <HAL_I2C_Init+0x134>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68da      	ldr	r2, [r3, #12]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	69d9      	ldr	r1, [r3, #28]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1a      	ldr	r2, [r3, #32]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0201 	orr.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	02008000 	.word	0x02008000

08007fe0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	461a      	mov	r2, r3
 8007fec:	460b      	mov	r3, r1
 8007fee:	817b      	strh	r3, [r7, #10]
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	f040 80fd 	bne.w	80081fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_I2C_Master_Transmit+0x30>
 800800c:	2302      	movs	r3, #2
 800800e:	e0f6      	b.n	80081fe <HAL_I2C_Master_Transmit+0x21e>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008018:	f7fb fa98 	bl	800354c <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	2319      	movs	r3, #25
 8008024:	2201      	movs	r2, #1
 8008026:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800802a:	68f8      	ldr	r0, [r7, #12]
 800802c:	f002 fa9a 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e0e1      	b.n	80081fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2221      	movs	r2, #33	@ 0x21
 800803e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2210      	movs	r2, #16
 8008046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	893a      	ldrh	r2, [r7, #8]
 800805a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008066:	b29b      	uxth	r3, r3
 8008068:	2bff      	cmp	r3, #255	@ 0xff
 800806a:	d906      	bls.n	800807a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	22ff      	movs	r2, #255	@ 0xff
 8008070:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008072:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008076:	617b      	str	r3, [r7, #20]
 8008078:	e007      	b.n	800808a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008088:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808e:	2b00      	cmp	r3, #0
 8008090:	d024      	beq.n	80080dc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	1c5a      	adds	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	3301      	adds	r3, #1
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	8979      	ldrh	r1, [r7, #10]
 80080ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008208 <HAL_I2C_Master_Transmit+0x228>)
 80080d0:	9300      	str	r3, [sp, #0]
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f002 fc95 	bl	800aa04 <I2C_TransferConfig>
 80080da:	e066      	b.n	80081aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	8979      	ldrh	r1, [r7, #10]
 80080e4:	4b48      	ldr	r3, [pc, #288]	@ (8008208 <HAL_I2C_Master_Transmit+0x228>)
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f002 fc8a 	bl	800aa04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80080f0:	e05b      	b.n	80081aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	6a39      	ldr	r1, [r7, #32]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f002 fa8d 	bl	800a616 <I2C_WaitOnTXISFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e07b      	b.n	80081fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008116:	1c5a      	adds	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008120:	b29b      	uxth	r3, r3
 8008122:	3b01      	subs	r3, #1
 8008124:	b29a      	uxth	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800813a:	b29b      	uxth	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d034      	beq.n	80081aa <HAL_I2C_Master_Transmit+0x1ca>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008144:	2b00      	cmp	r3, #0
 8008146:	d130      	bne.n	80081aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	2200      	movs	r2, #0
 8008150:	2180      	movs	r1, #128	@ 0x80
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f002 fa06 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e04d      	b.n	80081fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008166:	b29b      	uxth	r3, r3
 8008168:	2bff      	cmp	r3, #255	@ 0xff
 800816a:	d90e      	bls.n	800818a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	22ff      	movs	r2, #255	@ 0xff
 8008170:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008176:	b2da      	uxtb	r2, r3
 8008178:	8979      	ldrh	r1, [r7, #10]
 800817a:	2300      	movs	r3, #0
 800817c:	9300      	str	r3, [sp, #0]
 800817e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f002 fc3e 	bl	800aa04 <I2C_TransferConfig>
 8008188:	e00f      	b.n	80081aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008198:	b2da      	uxtb	r2, r3
 800819a:	8979      	ldrh	r1, [r7, #10]
 800819c:	2300      	movs	r3, #0
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f002 fc2d 	bl	800aa04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d19e      	bne.n	80080f2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	6a39      	ldr	r1, [r7, #32]
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f002 fa73 	bl	800a6a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e01a      	b.n	80081fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2220      	movs	r2, #32
 80081ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6859      	ldr	r1, [r3, #4]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b0c      	ldr	r3, [pc, #48]	@ (800820c <HAL_I2C_Master_Transmit+0x22c>)
 80081dc:	400b      	ands	r3, r1
 80081de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	e000      	b.n	80081fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80081fc:	2302      	movs	r3, #2
  }
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	80002000 	.word	0x80002000
 800820c:	fe00e800 	.word	0xfe00e800

08008210 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b088      	sub	sp, #32
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	461a      	mov	r2, r3
 800821c:	460b      	mov	r3, r1
 800821e:	817b      	strh	r3, [r7, #10]
 8008220:	4613      	mov	r3, r2
 8008222:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b20      	cmp	r3, #32
 800822e:	f040 80db 	bne.w	80083e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_I2C_Master_Receive+0x30>
 800823c:	2302      	movs	r3, #2
 800823e:	e0d4      	b.n	80083ea <HAL_I2C_Master_Receive+0x1da>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008248:	f7fb f980 	bl	800354c <HAL_GetTick>
 800824c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	2319      	movs	r3, #25
 8008254:	2201      	movs	r2, #1
 8008256:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f002 f982 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e0bf      	b.n	80083ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2222      	movs	r2, #34	@ 0x22
 800826e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2210      	movs	r2, #16
 8008276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	893a      	ldrh	r2, [r7, #8]
 800828a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008296:	b29b      	uxth	r3, r3
 8008298:	2bff      	cmp	r3, #255	@ 0xff
 800829a:	d90e      	bls.n	80082ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	22ff      	movs	r2, #255	@ 0xff
 80082a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	8979      	ldrh	r1, [r7, #10]
 80082aa:	4b52      	ldr	r3, [pc, #328]	@ (80083f4 <HAL_I2C_Master_Receive+0x1e4>)
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f002 fba6 	bl	800aa04 <I2C_TransferConfig>
 80082b8:	e06d      	b.n	8008396 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	8979      	ldrh	r1, [r7, #10]
 80082cc:	4b49      	ldr	r3, [pc, #292]	@ (80083f4 <HAL_I2C_Master_Receive+0x1e4>)
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f002 fb95 	bl	800aa04 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80082da:	e05c      	b.n	8008396 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	6a39      	ldr	r1, [r7, #32]
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f002 fa23 	bl	800a72c <I2C_WaitOnRXNEFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e07c      	b.n	80083ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082fa:	b2d2      	uxtb	r2, r2
 80082fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008302:	1c5a      	adds	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d034      	beq.n	8008396 <HAL_I2C_Master_Receive+0x186>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	d130      	bne.n	8008396 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	2200      	movs	r2, #0
 800833c:	2180      	movs	r1, #128	@ 0x80
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f002 f910 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 8008344:	4603      	mov	r3, r0
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e04d      	b.n	80083ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008352:	b29b      	uxth	r3, r3
 8008354:	2bff      	cmp	r3, #255	@ 0xff
 8008356:	d90e      	bls.n	8008376 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	22ff      	movs	r2, #255	@ 0xff
 800835c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008362:	b2da      	uxtb	r2, r3
 8008364:	8979      	ldrh	r1, [r7, #10]
 8008366:	2300      	movs	r3, #0
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f002 fb48 	bl	800aa04 <I2C_TransferConfig>
 8008374:	e00f      	b.n	8008396 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800837a:	b29a      	uxth	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008384:	b2da      	uxtb	r2, r3
 8008386:	8979      	ldrh	r1, [r7, #10]
 8008388:	2300      	movs	r3, #0
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f002 fb37 	bl	800aa04 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800839a:	b29b      	uxth	r3, r3
 800839c:	2b00      	cmp	r3, #0
 800839e:	d19d      	bne.n	80082dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	6a39      	ldr	r1, [r7, #32]
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f002 f97d 	bl	800a6a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d001      	beq.n	80083b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e01a      	b.n	80083ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2220      	movs	r2, #32
 80083ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6859      	ldr	r1, [r3, #4]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	4b0c      	ldr	r3, [pc, #48]	@ (80083f8 <HAL_I2C_Master_Receive+0x1e8>)
 80083c8:	400b      	ands	r3, r1
 80083ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	e000      	b.n	80083ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80083e8:	2302      	movs	r3, #2
  }
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3718      	adds	r7, #24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	80002400 	.word	0x80002400
 80083f8:	fe00e800 	.word	0xfe00e800

080083fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08a      	sub	sp, #40	@ 0x28
 8008400:	af02      	add	r7, sp, #8
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	461a      	mov	r2, r3
 8008408:	460b      	mov	r3, r1
 800840a:	817b      	strh	r3, [r7, #10]
 800840c:	4613      	mov	r3, r2
 800840e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b20      	cmp	r3, #32
 800841e:	f040 80ef 	bne.w	8008600 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800842c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008430:	d101      	bne.n	8008436 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8008432:	2302      	movs	r3, #2
 8008434:	e0e5      	b.n	8008602 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800843c:	2b01      	cmp	r3, #1
 800843e:	d101      	bne.n	8008444 <HAL_I2C_Master_Transmit_DMA+0x48>
 8008440:	2302      	movs	r3, #2
 8008442:	e0de      	b.n	8008602 <HAL_I2C_Master_Transmit_DMA+0x206>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2221      	movs	r2, #33	@ 0x21
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2210      	movs	r2, #16
 8008458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	893a      	ldrh	r2, [r7, #8]
 800846c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a66      	ldr	r2, [pc, #408]	@ (800860c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8008472:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4a66      	ldr	r2, [pc, #408]	@ (8008610 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8008478:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800847e:	b29b      	uxth	r3, r3
 8008480:	2bff      	cmp	r3, #255	@ 0xff
 8008482:	d906      	bls.n	8008492 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	22ff      	movs	r2, #255	@ 0xff
 8008488:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800848a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800848e:	61fb      	str	r3, [r7, #28]
 8008490:	e007      	b.n	80084a2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008496:	b29a      	uxth	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800849c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80084a0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d01a      	beq.n	80084e0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ae:	781a      	ldrb	r2, [r3, #0]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084c4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	3b01      	subs	r3, #1
 80084ce:	b29a      	uxth	r2, r3
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084d8:	3b01      	subs	r3, #1
 80084da:	b29a      	uxth	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d074      	beq.n	80085d2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d022      	beq.n	8008536 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f4:	4a47      	ldr	r2, [pc, #284]	@ (8008614 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80084f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fc:	4a46      	ldr	r2, [pc, #280]	@ (8008618 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80084fe:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008504:	2200      	movs	r2, #0
 8008506:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850c:	2200      	movs	r2, #0
 800850e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008518:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008520:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8008526:	f7fc ffe3 	bl	80054f0 <HAL_DMA_Start_IT>
 800852a:	4603      	mov	r3, r0
 800852c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800852e:	7dfb      	ldrb	r3, [r7, #23]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d13a      	bne.n	80085aa <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8008534:	e013      	b.n	800855e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e051      	b.n	8008602 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008562:	b2db      	uxtb	r3, r3
 8008564:	3301      	adds	r3, #1
 8008566:	b2da      	uxtb	r2, r3
 8008568:	8979      	ldrh	r1, [r7, #10]
 800856a:	4b2c      	ldr	r3, [pc, #176]	@ (800861c <HAL_I2C_Master_Transmit_DMA+0x220>)
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f002 fa47 	bl	800aa04 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	b29a      	uxth	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8008590:	2110      	movs	r1, #16
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f002 fa68 	bl	800aa68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	e028      	b.n	80085fc <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085be:	f043 0210 	orr.w	r2, r3, #16
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e017      	b.n	8008602 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4a12      	ldr	r2, [pc, #72]	@ (8008620 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80085d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	8979      	ldrh	r1, [r7, #10]
 80085de:	4b0f      	ldr	r3, [pc, #60]	@ (800861c <HAL_I2C_Master_Transmit_DMA+0x220>)
 80085e0:	9300      	str	r3, [sp, #0]
 80085e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f002 fa0c 	bl	800aa04 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80085f4:	2101      	movs	r1, #1
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f002 fa36 	bl	800aa68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e000      	b.n	8008602 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8008600:	2302      	movs	r3, #2
  }
}
 8008602:	4618      	mov	r0, r3
 8008604:	3720      	adds	r7, #32
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	ffff0000 	.word	0xffff0000
 8008610:	08008e67 	.word	0x08008e67
 8008614:	0800a21f 	.word	0x0800a21f
 8008618:	0800a2b5 	.word	0x0800a2b5
 800861c:	80002000 	.word	0x80002000
 8008620:	080089f7 	.word	0x080089f7

08008624 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	@ 0x28
 8008628:	af02      	add	r7, sp, #8
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	460b      	mov	r3, r1
 8008632:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b20      	cmp	r3, #32
 8008646:	f040 80e9 	bne.w	800881c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008658:	d101      	bne.n	800865e <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 800865a:	2302      	movs	r3, #2
 800865c:	e0df      	b.n	800881e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008664:	2b01      	cmp	r3, #1
 8008666:	d101      	bne.n	800866c <HAL_I2C_IsDeviceReady+0x48>
 8008668:	2302      	movs	r3, #2
 800866a:	e0d8      	b.n	800881e <HAL_I2C_IsDeviceReady+0x1fa>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2224      	movs	r2, #36	@ 0x24
 8008678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d105      	bne.n	8008696 <HAL_I2C_IsDeviceReady+0x72>
 800868a:	897b      	ldrh	r3, [r7, #10]
 800868c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008690:	4b65      	ldr	r3, [pc, #404]	@ (8008828 <HAL_I2C_IsDeviceReady+0x204>)
 8008692:	4313      	orrs	r3, r2
 8008694:	e004      	b.n	80086a0 <HAL_I2C_IsDeviceReady+0x7c>
 8008696:	897b      	ldrh	r3, [r7, #10]
 8008698:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800869c:	4b63      	ldr	r3, [pc, #396]	@ (800882c <HAL_I2C_IsDeviceReady+0x208>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	6812      	ldr	r2, [r2, #0]
 80086a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80086a6:	f7fa ff51 	bl	800354c <HAL_GetTick>
 80086aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b20      	cmp	r3, #32
 80086b8:	bf0c      	ite	eq
 80086ba:	2301      	moveq	r3, #1
 80086bc:	2300      	movne	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	bf0c      	ite	eq
 80086d0:	2301      	moveq	r3, #1
 80086d2:	2300      	movne	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80086d8:	e034      	b.n	8008744 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e0:	d01a      	beq.n	8008718 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80086e2:	f7fa ff33 	bl	800354c <HAL_GetTick>
 80086e6:	4602      	mov	r2, r0
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d302      	bcc.n	80086f8 <HAL_I2C_IsDeviceReady+0xd4>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10f      	bne.n	8008718 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008704:	f043 0220 	orr.w	r2, r3, #32
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e082      	b.n	800881e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b20      	cmp	r3, #32
 8008724:	bf0c      	ite	eq
 8008726:	2301      	moveq	r3, #1
 8008728:	2300      	movne	r3, #0
 800872a:	b2db      	uxtb	r3, r3
 800872c:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b10      	cmp	r3, #16
 800873a:	bf0c      	ite	eq
 800873c:	2301      	moveq	r3, #1
 800873e:	2300      	movne	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8008744:	7fbb      	ldrb	r3, [r7, #30]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d102      	bne.n	8008750 <HAL_I2C_IsDeviceReady+0x12c>
 800874a:	7f7b      	ldrb	r3, [r7, #29]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0c4      	beq.n	80086da <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f003 0310 	and.w	r3, r3, #16
 800875a:	2b10      	cmp	r3, #16
 800875c:	d027      	beq.n	80087ae <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2200      	movs	r2, #0
 8008766:	2120      	movs	r1, #32
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f001 fefb 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00e      	beq.n	8008792 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008778:	2b04      	cmp	r3, #4
 800877a:	d107      	bne.n	800878c <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2220      	movs	r2, #32
 8008782:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	645a      	str	r2, [r3, #68]	@ 0x44
 800878a:	e026      	b.n	80087da <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	77fb      	strb	r3, [r7, #31]
 8008790:	e023      	b.n	80087da <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2220      	movs	r2, #32
 8008798:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2220      	movs	r2, #32
 800879e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e037      	b.n	800881e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2210      	movs	r2, #16
 80087b4:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	2200      	movs	r2, #0
 80087be:	2120      	movs	r1, #32
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f001 fecf 	bl	800a564 <I2C_WaitOnFlagUntilTimeout>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	77fb      	strb	r3, [r7, #31]
 80087d0:	e003      	b.n	80087da <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2220      	movs	r2, #32
 80087d8:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	3301      	adds	r3, #1
 80087de:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d904      	bls.n	80087f2 <HAL_I2C_IsDeviceReady+0x1ce>
 80087e8:	7ffb      	ldrb	r3, [r7, #31]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d101      	bne.n	80087f2 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	f63f af43 	bhi.w	8008682 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2220      	movs	r2, #32
 8008800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008808:	f043 0220 	orr.w	r2, r3, #32
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e000      	b.n	800881e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 800881c:	2302      	movs	r3, #2
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	02002000 	.word	0x02002000
 800882c:	02002800 	.word	0x02002800

08008830 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884c:	2b00      	cmp	r3, #0
 800884e:	d005      	beq.n	800885c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	68f9      	ldr	r1, [r7, #12]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
  }
}
 800885c:	bf00      	nop
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	0a1b      	lsrs	r3, r3, #8
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d010      	beq.n	80088aa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	09db      	lsrs	r3, r3, #7
 800888c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008898:	f043 0201 	orr.w	r2, r3, #1
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088a8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	0a9b      	lsrs	r3, r3, #10
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	09db      	lsrs	r3, r3, #7
 80088ba:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088c6:	f043 0208 	orr.w	r2, r3, #8
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80088d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	0a5b      	lsrs	r3, r3, #9
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d010      	beq.n	8008906 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	09db      	lsrs	r3, r3, #7
 80088e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088f4:	f043 0202 	orr.w	r2, r3, #2
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008904:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f003 030b 	and.w	r3, r3, #11
 8008912:	2b00      	cmp	r3, #0
 8008914:	d003      	beq.n	800891e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8008916:	68f9      	ldr	r1, [r7, #12]
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fb45 	bl	8009fa8 <I2C_ITError>
  }
}
 800891e:	bf00      	nop
 8008920:	3718      	adds	r7, #24
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008926:	b480      	push	{r7}
 8008928:	b083      	sub	sp, #12
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008942:	bf00      	nop
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
 8008982:	4613      	mov	r3, r2
 8008984:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b083      	sub	sp, #12
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80089ae:	bf00      	nop
 80089b0:	370c      	adds	r7, #12
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr

080089ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80089ea:	bf00      	nop
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr

080089f6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b088      	sub	sp, #32
 80089fa:	af02      	add	r7, sp, #8
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <I2C_Master_ISR_IT+0x1e>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e120      	b.n	8008c56 <I2C_Master_ISR_IT+0x260>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	091b      	lsrs	r3, r3, #4
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d013      	beq.n	8008a50 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	091b      	lsrs	r3, r3, #4
 8008a2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00d      	beq.n	8008a50 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2210      	movs	r2, #16
 8008a3a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a40:	f043 0204 	orr.w	r2, r3, #4
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f001 fbc4 	bl	800a1d6 <I2C_Flush_TXDR>
 8008a4e:	e0ed      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	089b      	lsrs	r3, r3, #2
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d023      	beq.n	8008aa4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d01d      	beq.n	8008aa4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	f023 0304 	bic.w	r3, r3, #4
 8008a6e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7a:	b2d2      	uxtb	r2, r2
 8008a7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a82:	1c5a      	adds	r2, r3, #1
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008aa2:	e0c3      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	099b      	lsrs	r3, r3, #6
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d12a      	bne.n	8008b06 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	085b      	lsrs	r3, r3, #1
 8008ab4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d024      	beq.n	8008b06 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01e      	beq.n	8008b06 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 80ac 	beq.w	8008c2c <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad8:	781a      	ldrb	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aee:	3b01      	subs	r3, #1
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	3b01      	subs	r3, #1
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8008b04:	e092      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	09db      	lsrs	r3, r3, #7
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d05d      	beq.n	8008bce <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	099b      	lsrs	r3, r3, #6
 8008b16:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d057      	beq.n	8008bce <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d040      	beq.n	8008baa <I2C_Master_ISR_IT+0x1b4>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d13c      	bne.n	8008baa <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b3c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	2bff      	cmp	r3, #255	@ 0xff
 8008b46:	d90e      	bls.n	8008b66 <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	22ff      	movs	r2, #255	@ 0xff
 8008b4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	8a79      	ldrh	r1, [r7, #18]
 8008b56:	2300      	movs	r3, #0
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f001 ff50 	bl	800aa04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b64:	e032      	b.n	8008bcc <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008b78:	d00b      	beq.n	8008b92 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b7e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008b84:	8a79      	ldrh	r1, [r7, #18]
 8008b86:	2000      	movs	r0, #0
 8008b88:	9000      	str	r0, [sp, #0]
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f001 ff3a 	bl	800aa04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b90:	e01c      	b.n	8008bcc <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	8a79      	ldrh	r1, [r7, #18]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f001 ff2e 	bl	800aa04 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ba8:	e010      	b.n	8008bcc <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bb8:	d003      	beq.n	8008bc2 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fdde 	bl	800977c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bc0:	e034      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008bc2:	2140      	movs	r1, #64	@ 0x40
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f001 f9ef 	bl	8009fa8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bca:	e02f      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
 8008bcc:	e02e      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	099b      	lsrs	r3, r3, #6
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d028      	beq.n	8008c2c <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	099b      	lsrs	r3, r3, #6
 8008bde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d022      	beq.n	8008c2c <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d119      	bne.n	8008c24 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bfe:	d015      	beq.n	8008c2c <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008c08:	d108      	bne.n	8008c1c <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c18:	605a      	str	r2, [r3, #4]
 8008c1a:	e007      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f000 fdad 	bl	800977c <I2C_ITMasterSeqCplt>
 8008c22:	e003      	b.n	8008c2c <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008c24:	2140      	movs	r1, #64	@ 0x40
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f001 f9be 	bl	8009fa8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	095b      	lsrs	r3, r3, #5
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d009      	beq.n	8008c4c <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	095b      	lsrs	r3, r3, #5
 8008c3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008c44:	6979      	ldr	r1, [r7, #20]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fe34 	bl	80098b4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b086      	sub	sp, #24
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	60f8      	str	r0, [r7, #12]
 8008c66:	60b9      	str	r1, [r7, #8]
 8008c68:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d101      	bne.n	8008c82 <I2C_Slave_ISR_IT+0x24>
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e0ed      	b.n	8008e5e <I2C_Slave_ISR_IT+0x200>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	095b      	lsrs	r3, r3, #5
 8008c9a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d004      	beq.n	8008cac <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008ca2:	6939      	ldr	r1, [r7, #16]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fecf 	bl	8009a48 <I2C_ITSlaveCplt>
 8008caa:	e0d3      	b.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	091b      	lsrs	r3, r3, #4
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d04d      	beq.n	8008d54 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	091b      	lsrs	r3, r3, #4
 8008cbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d047      	beq.n	8008d54 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d128      	bne.n	8008d20 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b28      	cmp	r3, #40	@ 0x28
 8008cd8:	d108      	bne.n	8008cec <I2C_Slave_ISR_IT+0x8e>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ce0:	d104      	bne.n	8008cec <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008ce2:	6939      	ldr	r1, [r7, #16]
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f001 f909 	bl	8009efc <I2C_ITListenCplt>
 8008cea:	e032      	b.n	8008d52 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b29      	cmp	r3, #41	@ 0x29
 8008cf6:	d10e      	bne.n	8008d16 <I2C_Slave_ISR_IT+0xb8>
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008cfe:	d00a      	beq.n	8008d16 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2210      	movs	r2, #16
 8008d06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f001 fa64 	bl	800a1d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 fd71 	bl	80097f6 <I2C_ITSlaveSeqCplt>
 8008d14:	e01d      	b.n	8008d52 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2210      	movs	r2, #16
 8008d1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008d1e:	e096      	b.n	8008e4e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2210      	movs	r2, #16
 8008d26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2c:	f043 0204 	orr.w	r2, r3, #4
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <I2C_Slave_ISR_IT+0xe6>
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d40:	f040 8085 	bne.w	8008e4e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d48:	4619      	mov	r1, r3
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f001 f92c 	bl	8009fa8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008d50:	e07d      	b.n	8008e4e <I2C_Slave_ISR_IT+0x1f0>
 8008d52:	e07c      	b.n	8008e4e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d030      	beq.n	8008dc2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	089b      	lsrs	r3, r3, #2
 8008d64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d02a      	beq.n	8008dc2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d018      	beq.n	8008da8 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d92:	3b01      	subs	r3, #1
 8008d94:	b29a      	uxth	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d14f      	bne.n	8008e52 <I2C_Slave_ISR_IT+0x1f4>
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008db8:	d04b      	beq.n	8008e52 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f000 fd1b 	bl	80097f6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008dc0:	e047      	b.n	8008e52 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	08db      	lsrs	r3, r3, #3
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	08db      	lsrs	r3, r3, #3
 8008dd2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d004      	beq.n	8008de4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008dda:	6939      	ldr	r1, [r7, #16]
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fc49 	bl	8009674 <I2C_ITAddrCplt>
 8008de2:	e037      	b.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	085b      	lsrs	r3, r3, #1
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d031      	beq.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d02b      	beq.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d018      	beq.n	8008e38 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e0a:	781a      	ldrb	r2, [r3, #0]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	1c5a      	adds	r2, r3, #1
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3b01      	subs	r3, #1
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008e36:	e00d      	b.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e3e:	d002      	beq.n	8008e46 <I2C_Slave_ISR_IT+0x1e8>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fcd5 	bl	80097f6 <I2C_ITSlaveSeqCplt>
 8008e4c:	e002      	b.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008e52:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b088      	sub	sp, #32
 8008e6a:	af02      	add	r7, sp, #8
 8008e6c:	60f8      	str	r0, [r7, #12]
 8008e6e:	60b9      	str	r1, [r7, #8]
 8008e70:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d101      	bne.n	8008e80 <I2C_Master_ISR_DMA+0x1a>
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e0e1      	b.n	8009044 <I2C_Master_ISR_DMA+0x1de>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	091b      	lsrs	r3, r3, #4
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d017      	beq.n	8008ec4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	091b      	lsrs	r3, r3, #4
 8008e98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d011      	beq.n	8008ec4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2210      	movs	r2, #16
 8008ea6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eac:	f043 0204 	orr.w	r2, r3, #4
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008eb4:	2120      	movs	r1, #32
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f001 fdd6 	bl	800aa68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f001 f98a 	bl	800a1d6 <I2C_Flush_TXDR>
 8008ec2:	e0ba      	b.n	800903a <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	09db      	lsrs	r3, r3, #7
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d072      	beq.n	8008fb6 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	099b      	lsrs	r3, r3, #6
 8008ed4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d06c      	beq.n	8008fb6 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d04e      	beq.n	8008f94 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f02:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	2bff      	cmp	r3, #255	@ 0xff
 8008f0c:	d906      	bls.n	8008f1c <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	22ff      	movs	r2, #255	@ 0xff
 8008f12:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e010      	b.n	8008f3e <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008f2e:	d003      	beq.n	8008f38 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f34:	617b      	str	r3, [r7, #20]
 8008f36:	e002      	b.n	8008f3e <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008f38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f3c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	8a79      	ldrh	r1, [r7, #18]
 8008f46:	2300      	movs	r3, #0
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f001 fd59 	bl	800aa04 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b22      	cmp	r3, #34	@ 0x22
 8008f6e:	d108      	bne.n	8008f82 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f7e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008f80:	e05b      	b.n	800903a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f90:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008f92:	e052      	b.n	800903a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fa2:	d003      	beq.n	8008fac <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fbe9 	bl	800977c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008faa:	e046      	b.n	800903a <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008fac:	2140      	movs	r1, #64	@ 0x40
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f000 fffa 	bl	8009fa8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008fb4:	e041      	b.n	800903a <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	099b      	lsrs	r3, r3, #6
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d029      	beq.n	8009016 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	099b      	lsrs	r3, r3, #6
 8008fc6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d023      	beq.n	8009016 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d119      	bne.n	800900c <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008fe6:	d027      	beq.n	8009038 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008ff0:	d108      	bne.n	8009004 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685a      	ldr	r2, [r3, #4]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009000:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009002:	e019      	b.n	8009038 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fbb9 	bl	800977c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800900a:	e015      	b.n	8009038 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800900c:	2140      	movs	r1, #64	@ 0x40
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 ffca 	bl	8009fa8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009014:	e010      	b.n	8009038 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00b      	beq.n	800903a <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	095b      	lsrs	r3, r3, #5
 8009026:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800902a:	2b00      	cmp	r3, #0
 800902c:	d005      	beq.n	800903a <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fc3f 	bl	80098b4 <I2C_ITMasterCplt>
 8009036:	e000      	b.n	800903a <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8009038:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af02      	add	r7, sp, #8
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009058:	4b92      	ldr	r3, [pc, #584]	@ (80092a4 <I2C_Mem_ISR_DMA+0x258>)
 800905a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <I2C_Mem_ISR_DMA+0x1e>
 8009066:	2302      	movs	r3, #2
 8009068:	e118      	b.n	800929c <I2C_Mem_ISR_DMA+0x250>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d017      	beq.n	80090ae <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	091b      	lsrs	r3, r3, #4
 8009082:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009086:	2b00      	cmp	r3, #0
 8009088:	d011      	beq.n	80090ae <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2210      	movs	r2, #16
 8009090:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009096:	f043 0204 	orr.w	r2, r3, #4
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800909e:	2120      	movs	r1, #32
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f001 fce1 	bl	800aa68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f001 f895 	bl	800a1d6 <I2C_Flush_TXDR>
 80090ac:	e0f1      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	085b      	lsrs	r3, r3, #1
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00f      	beq.n	80090da <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	085b      	lsrs	r3, r3, #1
 80090be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d009      	beq.n	80090da <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80090ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f04f 32ff 	mov.w	r2, #4294967295
 80090d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80090d8:	e0db      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	09db      	lsrs	r3, r3, #7
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d060      	beq.n	80091a8 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	099b      	lsrs	r3, r3, #6
 80090ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d05a      	beq.n	80091a8 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80090f2:	2101      	movs	r1, #1
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	f001 fd3b 	bl	800ab70 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80090fa:	2110      	movs	r1, #16
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f001 fcb3 	bl	800aa68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009106:	b29b      	uxth	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d048      	beq.n	800919e <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	2bff      	cmp	r3, #255	@ 0xff
 8009114:	d910      	bls.n	8009138 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	22ff      	movs	r2, #255	@ 0xff
 800911a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009120:	b299      	uxth	r1, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009126:	b2da      	uxtb	r2, r3
 8009128:	2300      	movs	r3, #0
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f001 fc67 	bl	800aa04 <I2C_TransferConfig>
 8009136:	e011      	b.n	800915c <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800913c:	b29a      	uxth	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009146:	b299      	uxth	r1, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800914c:	b2da      	uxtb	r2, r3
 800914e:	2300      	movs	r3, #0
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f001 fc54 	bl	800aa04 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b22      	cmp	r3, #34	@ 0x22
 8009178:	d108      	bne.n	800918c <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009188:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800918a:	e082      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800919a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800919c:	e079      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800919e:	2140      	movs	r1, #64	@ 0x40
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 ff01 	bl	8009fa8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80091a6:	e074      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	099b      	lsrs	r3, r3, #6
 80091ac:	f003 0301 	and.w	r3, r3, #1
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d05e      	beq.n	8009272 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	099b      	lsrs	r3, r3, #6
 80091b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d058      	beq.n	8009272 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80091c0:	2101      	movs	r1, #1
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f001 fcd4 	bl	800ab70 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80091c8:	2110      	movs	r1, #16
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f001 fc4c 	bl	800aa68 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	2b22      	cmp	r3, #34	@ 0x22
 80091da:	d101      	bne.n	80091e0 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80091dc:	4b32      	ldr	r3, [pc, #200]	@ (80092a8 <I2C_Mem_ISR_DMA+0x25c>)
 80091de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	2bff      	cmp	r3, #255	@ 0xff
 80091e8:	d910      	bls.n	800920c <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	22ff      	movs	r2, #255	@ 0xff
 80091ee:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091f4:	b299      	uxth	r1, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009204:	68f8      	ldr	r0, [r7, #12]
 8009206:	f001 fbfd 	bl	800aa04 <I2C_TransferConfig>
 800920a:	e011      	b.n	8009230 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009210:	b29a      	uxth	r2, r3
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800921a:	b299      	uxth	r1, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009220:	b2da      	uxtb	r2, r3
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f001 fbea 	bl	800aa04 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800923a:	1ad3      	subs	r3, r2, r3
 800923c:	b29a      	uxth	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b22      	cmp	r3, #34	@ 0x22
 800924c:	d108      	bne.n	8009260 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800925c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800925e:	e018      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800926e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009270:	e00f      	b.n	8009292 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	095b      	lsrs	r3, r3, #5
 8009282:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009286:	2b00      	cmp	r3, #0
 8009288:	d003      	beq.n	8009292 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 fb11 	bl	80098b4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	80002000 	.word	0x80002000
 80092a8:	80002400 	.word	0x80002400

080092ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <I2C_Slave_ISR_DMA+0x24>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e1cc      	b.n	800966a <I2C_Slave_ISR_DMA+0x3be>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	095b      	lsrs	r3, r3, #5
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00a      	beq.n	80092fa <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	095b      	lsrs	r3, r3, #5
 80092e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fba8 	bl	8009a48 <I2C_ITSlaveCplt>
 80092f8:	e1b2      	b.n	8009660 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 0301 	and.w	r3, r3, #1
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 819c 	beq.w	8009640 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	091b      	lsrs	r3, r3, #4
 800930c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009310:	2b00      	cmp	r3, #0
 8009312:	f000 8195 	beq.w	8009640 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	0b9b      	lsrs	r3, r3, #14
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d106      	bne.n	8009330 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	0bdb      	lsrs	r3, r3, #15
 8009326:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 8181 	beq.w	8009632 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009334:	2b00      	cmp	r3, #0
 8009336:	d07c      	beq.n	8009432 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	0bdb      	lsrs	r3, r3, #15
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d076      	beq.n	8009432 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a75      	ldr	r2, [pc, #468]	@ (8009520 <I2C_Slave_ISR_DMA+0x274>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d059      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a73      	ldr	r2, [pc, #460]	@ (8009524 <I2C_Slave_ISR_DMA+0x278>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d053      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a71      	ldr	r2, [pc, #452]	@ (8009528 <I2C_Slave_ISR_DMA+0x27c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d04d      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a6f      	ldr	r2, [pc, #444]	@ (800952c <I2C_Slave_ISR_DMA+0x280>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d047      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a6d      	ldr	r2, [pc, #436]	@ (8009530 <I2C_Slave_ISR_DMA+0x284>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d041      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a6b      	ldr	r2, [pc, #428]	@ (8009534 <I2C_Slave_ISR_DMA+0x288>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d03b      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a69      	ldr	r2, [pc, #420]	@ (8009538 <I2C_Slave_ISR_DMA+0x28c>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d035      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a67      	ldr	r2, [pc, #412]	@ (800953c <I2C_Slave_ISR_DMA+0x290>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d02f      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a65      	ldr	r2, [pc, #404]	@ (8009540 <I2C_Slave_ISR_DMA+0x294>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d029      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a63      	ldr	r2, [pc, #396]	@ (8009544 <I2C_Slave_ISR_DMA+0x298>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d023      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a61      	ldr	r2, [pc, #388]	@ (8009548 <I2C_Slave_ISR_DMA+0x29c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d01d      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a5f      	ldr	r2, [pc, #380]	@ (800954c <I2C_Slave_ISR_DMA+0x2a0>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d017      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a5d      	ldr	r2, [pc, #372]	@ (8009550 <I2C_Slave_ISR_DMA+0x2a4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d011      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a5b      	ldr	r2, [pc, #364]	@ (8009554 <I2C_Slave_ISR_DMA+0x2a8>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d00b      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a59      	ldr	r2, [pc, #356]	@ (8009558 <I2C_Slave_ISR_DMA+0x2ac>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d005      	beq.n	8009404 <I2C_Slave_ISR_DMA+0x158>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a57      	ldr	r2, [pc, #348]	@ (800955c <I2C_Slave_ISR_DMA+0x2b0>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d109      	bne.n	8009418 <I2C_Slave_ISR_DMA+0x16c>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	bf0c      	ite	eq
 8009410:	2301      	moveq	r3, #1
 8009412:	2300      	movne	r3, #0
 8009414:	b2db      	uxtb	r3, r3
 8009416:	e008      	b.n	800942a <I2C_Slave_ISR_DMA+0x17e>
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	2b00      	cmp	r3, #0
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800942e:	2301      	movs	r3, #1
 8009430:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 809f 	beq.w	800957a <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	0b9b      	lsrs	r3, r3, #14
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	2b00      	cmp	r3, #0
 8009446:	f000 8098 	beq.w	800957a <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a33      	ldr	r2, [pc, #204]	@ (8009520 <I2C_Slave_ISR_DMA+0x274>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d059      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a31      	ldr	r2, [pc, #196]	@ (8009524 <I2C_Slave_ISR_DMA+0x278>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d053      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a2f      	ldr	r2, [pc, #188]	@ (8009528 <I2C_Slave_ISR_DMA+0x27c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d04d      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a2d      	ldr	r2, [pc, #180]	@ (800952c <I2C_Slave_ISR_DMA+0x280>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d047      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a2b      	ldr	r2, [pc, #172]	@ (8009530 <I2C_Slave_ISR_DMA+0x284>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d041      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a29      	ldr	r2, [pc, #164]	@ (8009534 <I2C_Slave_ISR_DMA+0x288>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d03b      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a27      	ldr	r2, [pc, #156]	@ (8009538 <I2C_Slave_ISR_DMA+0x28c>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d035      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a25      	ldr	r2, [pc, #148]	@ (800953c <I2C_Slave_ISR_DMA+0x290>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d02f      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a23      	ldr	r2, [pc, #140]	@ (8009540 <I2C_Slave_ISR_DMA+0x294>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d029      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a21      	ldr	r2, [pc, #132]	@ (8009544 <I2C_Slave_ISR_DMA+0x298>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d023      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009548 <I2C_Slave_ISR_DMA+0x29c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d01d      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a1d      	ldr	r2, [pc, #116]	@ (800954c <I2C_Slave_ISR_DMA+0x2a0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d017      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009550 <I2C_Slave_ISR_DMA+0x2a4>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d011      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a19      	ldr	r2, [pc, #100]	@ (8009554 <I2C_Slave_ISR_DMA+0x2a8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00b      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a17      	ldr	r2, [pc, #92]	@ (8009558 <I2C_Slave_ISR_DMA+0x2ac>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d005      	beq.n	800950a <I2C_Slave_ISR_DMA+0x25e>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a15      	ldr	r2, [pc, #84]	@ (800955c <I2C_Slave_ISR_DMA+0x2b0>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d12a      	bne.n	8009560 <I2C_Slave_ISR_DMA+0x2b4>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	bf0c      	ite	eq
 8009516:	2301      	moveq	r3, #1
 8009518:	2300      	movne	r3, #0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	e029      	b.n	8009572 <I2C_Slave_ISR_DMA+0x2c6>
 800951e:	bf00      	nop
 8009520:	40020010 	.word	0x40020010
 8009524:	40020028 	.word	0x40020028
 8009528:	40020040 	.word	0x40020040
 800952c:	40020058 	.word	0x40020058
 8009530:	40020070 	.word	0x40020070
 8009534:	40020088 	.word	0x40020088
 8009538:	400200a0 	.word	0x400200a0
 800953c:	400200b8 	.word	0x400200b8
 8009540:	40020410 	.word	0x40020410
 8009544:	40020428 	.word	0x40020428
 8009548:	40020440 	.word	0x40020440
 800954c:	40020458 	.word	0x40020458
 8009550:	40020470 	.word	0x40020470
 8009554:	40020488 	.word	0x40020488
 8009558:	400204a0 	.word	0x400204a0
 800955c:	400204b8 	.word	0x400204b8
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf0c      	ite	eq
 800956c:	2301      	moveq	r3, #1
 800956e:	2300      	movne	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 8009576:	2301      	movs	r3, #1
 8009578:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d128      	bne.n	80095d2 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b28      	cmp	r3, #40	@ 0x28
 800958a:	d108      	bne.n	800959e <I2C_Slave_ISR_DMA+0x2f2>
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009592:	d104      	bne.n	800959e <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009594:	68b9      	ldr	r1, [r7, #8]
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fcb0 	bl	8009efc <I2C_ITListenCplt>
 800959c:	e048      	b.n	8009630 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b29      	cmp	r3, #41	@ 0x29
 80095a8:	d10e      	bne.n	80095c8 <I2C_Slave_ISR_DMA+0x31c>
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80095b0:	d00a      	beq.n	80095c8 <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2210      	movs	r2, #16
 80095b8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 fe0b 	bl	800a1d6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f918 	bl	80097f6 <I2C_ITSlaveSeqCplt>
 80095c6:	e033      	b.n	8009630 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2210      	movs	r2, #16
 80095ce:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80095d0:	e034      	b.n	800963c <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2210      	movs	r2, #16
 80095d8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095de:	f043 0204 	orr.w	r2, r3, #4
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095ec:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d003      	beq.n	80095fc <I2C_Slave_ISR_DMA+0x350>
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095fa:	d11f      	bne.n	800963c <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b21      	cmp	r3, #33	@ 0x21
 8009600:	d002      	beq.n	8009608 <I2C_Slave_ISR_DMA+0x35c>
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b29      	cmp	r3, #41	@ 0x29
 8009606:	d103      	bne.n	8009610 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2221      	movs	r2, #33	@ 0x21
 800960c:	631a      	str	r2, [r3, #48]	@ 0x30
 800960e:	e008      	b.n	8009622 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009610:	7dfb      	ldrb	r3, [r7, #23]
 8009612:	2b22      	cmp	r3, #34	@ 0x22
 8009614:	d002      	beq.n	800961c <I2C_Slave_ISR_DMA+0x370>
 8009616:	7dfb      	ldrb	r3, [r7, #23]
 8009618:	2b2a      	cmp	r3, #42	@ 0x2a
 800961a:	d102      	bne.n	8009622 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2222      	movs	r2, #34	@ 0x22
 8009620:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009626:	4619      	mov	r1, r3
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 fcbd 	bl	8009fa8 <I2C_ITError>
      if (treatdmanack == 1U)
 800962e:	e005      	b.n	800963c <I2C_Slave_ISR_DMA+0x390>
 8009630:	e004      	b.n	800963c <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2210      	movs	r2, #16
 8009638:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800963a:	e011      	b.n	8009660 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800963c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800963e:	e00f      	b.n	8009660 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	08db      	lsrs	r3, r3, #3
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d009      	beq.n	8009660 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	08db      	lsrs	r3, r3, #3
 8009650:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 f80a 	bl	8009674 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3720      	adds	r7, #32
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop

08009674 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009684:	b2db      	uxtb	r3, r3
 8009686:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800968a:	2b28      	cmp	r3, #40	@ 0x28
 800968c:	d16a      	bne.n	8009764 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	b2db      	uxtb	r3, r3
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	0c1b      	lsrs	r3, r3, #16
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80096ac:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80096ba:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80096c8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d138      	bne.n	8009744 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80096d2:	897b      	ldrh	r3, [r7, #10]
 80096d4:	09db      	lsrs	r3, r3, #7
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	89bb      	ldrh	r3, [r7, #12]
 80096da:	4053      	eors	r3, r2
 80096dc:	b29b      	uxth	r3, r3
 80096de:	f003 0306 	and.w	r3, r3, #6
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d11c      	bne.n	8009720 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80096e6:	897b      	ldrh	r3, [r7, #10]
 80096e8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096ee:	1c5a      	adds	r2, r3, #1
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d13b      	bne.n	8009774 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2208      	movs	r2, #8
 8009708:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009712:	89ba      	ldrh	r2, [r7, #12]
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	4619      	mov	r1, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff f92c 	bl	8008976 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800971e:	e029      	b.n	8009774 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8009720:	893b      	ldrh	r3, [r7, #8]
 8009722:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009724:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 fa21 	bl	800ab70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009736:	89ba      	ldrh	r2, [r7, #12]
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff f91a 	bl	8008976 <HAL_I2C_AddrCallback>
}
 8009742:	e017      	b.n	8009774 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 fa11 	bl	800ab70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009756:	89ba      	ldrh	r2, [r7, #12]
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	4619      	mov	r1, r3
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7ff f90a 	bl	8008976 <HAL_I2C_AddrCallback>
}
 8009762:	e007      	b.n	8009774 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2208      	movs	r2, #8
 800976a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8009774:	bf00      	nop
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b21      	cmp	r3, #33	@ 0x21
 8009796:	d115      	bne.n	80097c4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2211      	movs	r2, #17
 80097a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80097ac:	2101      	movs	r1, #1
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f001 f9de 	bl	800ab70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff f8b2 	bl	8008926 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80097c2:	e014      	b.n	80097ee <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2220      	movs	r2, #32
 80097c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2212      	movs	r2, #18
 80097d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80097d8:	2102      	movs	r1, #2
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 f9c8 	bl	800ab70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7ff f8a6 	bl	800893a <HAL_I2C_MasterRxCpltCallback>
}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	0b9b      	lsrs	r3, r3, #14
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d008      	beq.n	800982c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e00d      	b.n	8009848 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	0bdb      	lsrs	r3, r3, #15
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b00      	cmp	r3, #0
 8009836:	d007      	beq.n	8009848 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009846:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b29      	cmp	r3, #41	@ 0x29
 8009852:	d112      	bne.n	800987a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2228      	movs	r2, #40	@ 0x28
 8009858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2221      	movs	r2, #33	@ 0x21
 8009860:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009862:	2101      	movs	r1, #1
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f983 	bl	800ab70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff f86b 	bl	800894e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009878:	e017      	b.n	80098aa <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b2a      	cmp	r3, #42	@ 0x2a
 8009884:	d111      	bne.n	80098aa <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2228      	movs	r2, #40	@ 0x28
 800988a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2222      	movs	r2, #34	@ 0x22
 8009892:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009894:	2102      	movs	r1, #2
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f001 f96a 	bl	800ab70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff f85c 	bl	8008962 <HAL_I2C_SlaveRxCpltCallback>
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2220      	movs	r2, #32
 80098c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b21      	cmp	r3, #33	@ 0x21
 80098d4:	d107      	bne.n	80098e6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80098d6:	2101      	movs	r1, #1
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f949 	bl	800ab70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2211      	movs	r2, #17
 80098e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80098e4:	e00c      	b.n	8009900 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b22      	cmp	r3, #34	@ 0x22
 80098f0:	d106      	bne.n	8009900 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80098f2:	2102      	movs	r1, #2
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f001 f93b 	bl	800ab70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2212      	movs	r2, #18
 80098fe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6859      	ldr	r1, [r3, #4]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	4b4d      	ldr	r3, [pc, #308]	@ (8009a40 <I2C_ITMasterCplt+0x18c>)
 800990c:	400b      	ands	r3, r1
 800990e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a4a      	ldr	r2, [pc, #296]	@ (8009a44 <I2C_ITMasterCplt+0x190>)
 800991a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	091b      	lsrs	r3, r3, #4
 8009920:	f003 0301 	and.w	r3, r3, #1
 8009924:	2b00      	cmp	r3, #0
 8009926:	d009      	beq.n	800993c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2210      	movs	r2, #16
 800992e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009934:	f043 0204 	orr.w	r2, r3, #4
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b60      	cmp	r3, #96	@ 0x60
 8009946:	d10b      	bne.n	8009960 <I2C_ITMasterCplt+0xac>
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	089b      	lsrs	r3, r3, #2
 800994c:	f003 0301 	and.w	r3, r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	d005      	beq.n	8009960 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995a:	b2db      	uxtb	r3, r3
 800995c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800995e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fc38 	bl	800a1d6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800996a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b60      	cmp	r3, #96	@ 0x60
 8009976:	d002      	beq.n	800997e <I2C_ITMasterCplt+0xca>
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d006      	beq.n	800998c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009982:	4619      	mov	r1, r3
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fb0f 	bl	8009fa8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800998a:	e054      	b.n	8009a36 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009992:	b2db      	uxtb	r3, r3
 8009994:	2b21      	cmp	r3, #33	@ 0x21
 8009996:	d124      	bne.n	80099e2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b40      	cmp	r3, #64	@ 0x40
 80099b0:	d10b      	bne.n	80099ca <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fe ffef 	bl	80089a6 <HAL_I2C_MemTxCpltCallback>
}
 80099c8:	e035      	b.n	8009a36 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f7fe ffa3 	bl	8008926 <HAL_I2C_MasterTxCpltCallback>
}
 80099e0:	e029      	b.n	8009a36 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b22      	cmp	r3, #34	@ 0x22
 80099ec:	d123      	bne.n	8009a36 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2200      	movs	r2, #0
 80099fa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	2b40      	cmp	r3, #64	@ 0x40
 8009a06:	d10b      	bne.n	8009a20 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fe ffce 	bl	80089ba <HAL_I2C_MemRxCpltCallback>
}
 8009a1e:	e00a      	b.n	8009a36 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7fe ff82 	bl	800893a <HAL_I2C_MasterRxCpltCallback>
}
 8009a36:	bf00      	nop
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	fe00e800 	.word	0xfe00e800
 8009a44:	ffff0000 	.word	0xffff0000

08009a48 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a62:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a6a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2220      	movs	r2, #32
 8009a72:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009a74:	7afb      	ldrb	r3, [r7, #11]
 8009a76:	2b21      	cmp	r3, #33	@ 0x21
 8009a78:	d002      	beq.n	8009a80 <I2C_ITSlaveCplt+0x38>
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	2b29      	cmp	r3, #41	@ 0x29
 8009a7e:	d108      	bne.n	8009a92 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009a80:	f248 0101 	movw	r1, #32769	@ 0x8001
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f001 f873 	bl	800ab70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2221      	movs	r2, #33	@ 0x21
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a90:	e019      	b.n	8009ac6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	2b22      	cmp	r3, #34	@ 0x22
 8009a96:	d002      	beq.n	8009a9e <I2C_ITSlaveCplt+0x56>
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a9c:	d108      	bne.n	8009ab0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009a9e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f001 f864 	bl	800ab70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2222      	movs	r2, #34	@ 0x22
 8009aac:	631a      	str	r2, [r3, #48]	@ 0x30
 8009aae:	e00a      	b.n	8009ac6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	2b28      	cmp	r3, #40	@ 0x28
 8009ab4:	d107      	bne.n	8009ac6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8009ab6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f001 f858 	bl	800ab70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ad4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6859      	ldr	r1, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	4b80      	ldr	r3, [pc, #512]	@ (8009ce4 <I2C_ITSlaveCplt+0x29c>)
 8009ae2:	400b      	ands	r3, r1
 8009ae4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fb75 	bl	800a1d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	0b9b      	lsrs	r3, r3, #14
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d07a      	beq.n	8009bee <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009b06:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f000 8112 	beq.w	8009d36 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a73      	ldr	r2, [pc, #460]	@ (8009ce8 <I2C_ITSlaveCplt+0x2a0>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d059      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a71      	ldr	r2, [pc, #452]	@ (8009cec <I2C_ITSlaveCplt+0x2a4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d053      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a6f      	ldr	r2, [pc, #444]	@ (8009cf0 <I2C_ITSlaveCplt+0x2a8>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d04d      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a6d      	ldr	r2, [pc, #436]	@ (8009cf4 <I2C_ITSlaveCplt+0x2ac>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d047      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a6b      	ldr	r2, [pc, #428]	@ (8009cf8 <I2C_ITSlaveCplt+0x2b0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d041      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a69      	ldr	r2, [pc, #420]	@ (8009cfc <I2C_ITSlaveCplt+0x2b4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d03b      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a67      	ldr	r2, [pc, #412]	@ (8009d00 <I2C_ITSlaveCplt+0x2b8>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d035      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a65      	ldr	r2, [pc, #404]	@ (8009d04 <I2C_ITSlaveCplt+0x2bc>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d02f      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a63      	ldr	r2, [pc, #396]	@ (8009d08 <I2C_ITSlaveCplt+0x2c0>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d029      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a61      	ldr	r2, [pc, #388]	@ (8009d0c <I2C_ITSlaveCplt+0x2c4>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d023      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a5f      	ldr	r2, [pc, #380]	@ (8009d10 <I2C_ITSlaveCplt+0x2c8>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d01d      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8009d14 <I2C_ITSlaveCplt+0x2cc>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d017      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8009d18 <I2C_ITSlaveCplt+0x2d0>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d011      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a59      	ldr	r2, [pc, #356]	@ (8009d1c <I2C_ITSlaveCplt+0x2d4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d00b      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a57      	ldr	r2, [pc, #348]	@ (8009d20 <I2C_ITSlaveCplt+0x2d8>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d005      	beq.n	8009bd2 <I2C_ITSlaveCplt+0x18a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a55      	ldr	r2, [pc, #340]	@ (8009d24 <I2C_ITSlaveCplt+0x2dc>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d105      	bne.n	8009bde <I2C_ITSlaveCplt+0x196>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	e004      	b.n	8009be8 <I2C_ITSlaveCplt+0x1a0>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8009bec:	e0a3      	b.n	8009d36 <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	0bdb      	lsrs	r3, r3, #15
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 809d 	beq.w	8009d36 <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c0a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 8090 	beq.w	8009d36 <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a32      	ldr	r2, [pc, #200]	@ (8009ce8 <I2C_ITSlaveCplt+0x2a0>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d059      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a30      	ldr	r2, [pc, #192]	@ (8009cec <I2C_ITSlaveCplt+0x2a4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d053      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a2e      	ldr	r2, [pc, #184]	@ (8009cf0 <I2C_ITSlaveCplt+0x2a8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d04d      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a2c      	ldr	r2, [pc, #176]	@ (8009cf4 <I2C_ITSlaveCplt+0x2ac>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d047      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8009cf8 <I2C_ITSlaveCplt+0x2b0>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d041      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a28      	ldr	r2, [pc, #160]	@ (8009cfc <I2C_ITSlaveCplt+0x2b4>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d03b      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a26      	ldr	r2, [pc, #152]	@ (8009d00 <I2C_ITSlaveCplt+0x2b8>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d035      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a24      	ldr	r2, [pc, #144]	@ (8009d04 <I2C_ITSlaveCplt+0x2bc>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d02f      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	4a22      	ldr	r2, [pc, #136]	@ (8009d08 <I2C_ITSlaveCplt+0x2c0>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d029      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a20      	ldr	r2, [pc, #128]	@ (8009d0c <I2C_ITSlaveCplt+0x2c4>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d023      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a1e      	ldr	r2, [pc, #120]	@ (8009d10 <I2C_ITSlaveCplt+0x2c8>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d01d      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1c      	ldr	r2, [pc, #112]	@ (8009d14 <I2C_ITSlaveCplt+0x2cc>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d017      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a1a      	ldr	r2, [pc, #104]	@ (8009d18 <I2C_ITSlaveCplt+0x2d0>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d011      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a18      	ldr	r2, [pc, #96]	@ (8009d1c <I2C_ITSlaveCplt+0x2d4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00b      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a16      	ldr	r2, [pc, #88]	@ (8009d20 <I2C_ITSlaveCplt+0x2d8>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d005      	beq.n	8009cd6 <I2C_ITSlaveCplt+0x28e>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a14      	ldr	r2, [pc, #80]	@ (8009d24 <I2C_ITSlaveCplt+0x2dc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d128      	bne.n	8009d28 <I2C_ITSlaveCplt+0x2e0>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	e027      	b.n	8009d32 <I2C_ITSlaveCplt+0x2ea>
 8009ce2:	bf00      	nop
 8009ce4:	fe00e800 	.word	0xfe00e800
 8009ce8:	40020010 	.word	0x40020010
 8009cec:	40020028 	.word	0x40020028
 8009cf0:	40020040 	.word	0x40020040
 8009cf4:	40020058 	.word	0x40020058
 8009cf8:	40020070 	.word	0x40020070
 8009cfc:	40020088 	.word	0x40020088
 8009d00:	400200a0 	.word	0x400200a0
 8009d04:	400200b8 	.word	0x400200b8
 8009d08:	40020410 	.word	0x40020410
 8009d0c:	40020428 	.word	0x40020428
 8009d10:	40020440 	.word	0x40020440
 8009d14:	40020458 	.word	0x40020458
 8009d18:	40020470 	.word	0x40020470
 8009d1c:	40020488 	.word	0x40020488
 8009d20:	400204a0 	.word	0x400204a0
 8009d24:	400204b8 	.word	0x400204b8
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	089b      	lsrs	r3, r3, #2
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d020      	beq.n	8009d84 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f023 0304 	bic.w	r3, r3, #4
 8009d48:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d54:	b2d2      	uxtb	r2, r2
 8009d56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00c      	beq.n	8009d84 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d005      	beq.n	8009d9a <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d92:	f043 0204 	orr.w	r2, r3, #4
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	091b      	lsrs	r3, r3, #4
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d04a      	beq.n	8009e3c <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	091b      	lsrs	r3, r3, #4
 8009daa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d044      	beq.n	8009e3c <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d128      	bne.n	8009e0e <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b28      	cmp	r3, #40	@ 0x28
 8009dc6:	d108      	bne.n	8009dda <I2C_ITSlaveCplt+0x392>
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dce:	d104      	bne.n	8009dda <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009dd0:	6979      	ldr	r1, [r7, #20]
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f892 	bl	8009efc <I2C_ITListenCplt>
 8009dd8:	e030      	b.n	8009e3c <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b29      	cmp	r3, #41	@ 0x29
 8009de4:	d10e      	bne.n	8009e04 <I2C_ITSlaveCplt+0x3bc>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009dec:	d00a      	beq.n	8009e04 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f9ed 	bl	800a1d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff fcfa 	bl	80097f6 <I2C_ITSlaveSeqCplt>
 8009e02:	e01b      	b.n	8009e3c <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2210      	movs	r2, #16
 8009e0a:	61da      	str	r2, [r3, #28]
 8009e0c:	e016      	b.n	8009e3c <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2210      	movs	r2, #16
 8009e14:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1a:	f043 0204 	orr.w	r2, r3, #4
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d003      	beq.n	8009e30 <I2C_ITSlaveCplt+0x3e8>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e2e:	d105      	bne.n	8009e3c <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f8b6 	bl	8009fa8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d010      	beq.n	8009e74 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e56:	4619      	mov	r1, r3
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 f8a5 	bl	8009fa8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	2b28      	cmp	r3, #40	@ 0x28
 8009e68:	d141      	bne.n	8009eee <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009e6a:	6979      	ldr	r1, [r7, #20]
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f845 	bl	8009efc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009e72:	e03c      	b.n	8009eee <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009e7c:	d014      	beq.n	8009ea8 <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff fcb9 	bl	80097f6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a1c      	ldr	r2, [pc, #112]	@ (8009ef8 <I2C_ITSlaveCplt+0x4b0>)
 8009e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7fe fd76 	bl	8008992 <HAL_I2C_ListenCpltCallback>
}
 8009ea6:	e022      	b.n	8009eee <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b22      	cmp	r3, #34	@ 0x22
 8009eb2:	d10e      	bne.n	8009ed2 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7fe fd49 	bl	8008962 <HAL_I2C_SlaveRxCpltCallback>
}
 8009ed0:	e00d      	b.n	8009eee <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7fe fd30 	bl	800894e <HAL_I2C_SlaveTxCpltCallback>
}
 8009eee:	bf00      	nop
 8009ef0:	3718      	adds	r7, #24
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	ffff0000 	.word	0xffff0000

08009efc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a26      	ldr	r2, [pc, #152]	@ (8009fa4 <I2C_ITListenCplt+0xa8>)
 8009f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2220      	movs	r2, #32
 8009f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	089b      	lsrs	r3, r3, #2
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d022      	beq.n	8009f7a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d012      	beq.n	8009f7a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	3b01      	subs	r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f72:	f043 0204 	orr.w	r2, r3, #4
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009f7a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fdf6 	bl	800ab70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2210      	movs	r2, #16
 8009f8a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7fe fcfc 	bl	8008992 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	ffff0000 	.word	0xffff0000

08009fa8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009fb8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	4a6d      	ldr	r2, [pc, #436]	@ (800a17c <I2C_ITError+0x1d4>)
 8009fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	2b28      	cmp	r3, #40	@ 0x28
 8009fde:	d005      	beq.n	8009fec <I2C_ITError+0x44>
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b29      	cmp	r3, #41	@ 0x29
 8009fe4:	d002      	beq.n	8009fec <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fea:	d10b      	bne.n	800a004 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009fec:	2103      	movs	r1, #3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fdbe 	bl	800ab70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2228      	movs	r2, #40	@ 0x28
 8009ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a60      	ldr	r2, [pc, #384]	@ (800a180 <I2C_ITError+0x1d8>)
 800a000:	635a      	str	r2, [r3, #52]	@ 0x34
 800a002:	e030      	b.n	800a066 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a004:	f248 0103 	movw	r1, #32771	@ 0x8003
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fdb1 	bl	800ab70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8e1 	bl	800a1d6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b60      	cmp	r3, #96	@ 0x60
 800a01e:	d01f      	beq.n	800a060 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2220      	movs	r2, #32
 800a024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f003 0320 	and.w	r3, r3, #32
 800a032:	2b20      	cmp	r3, #32
 800a034:	d114      	bne.n	800a060 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	f003 0310 	and.w	r3, r3, #16
 800a040:	2b10      	cmp	r3, #16
 800a042:	d109      	bne.n	800a058 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2210      	movs	r2, #16
 800a04a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a050:	f043 0204 	orr.w	r2, r3, #4
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2220      	movs	r2, #32
 800a05e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a06a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a070:	2b00      	cmp	r3, #0
 800a072:	d039      	beq.n	800a0e8 <I2C_ITError+0x140>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	2b11      	cmp	r3, #17
 800a078:	d002      	beq.n	800a080 <I2C_ITError+0xd8>
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	2b21      	cmp	r3, #33	@ 0x21
 800a07e:	d133      	bne.n	800a0e8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a08a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a08e:	d107      	bne.n	800a0a0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a09e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fd f91b 	bl	80072e0 <HAL_DMA_GetState>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d017      	beq.n	800a0e0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b4:	4a33      	ldr	r2, [pc, #204]	@ (800a184 <I2C_ITError+0x1dc>)
 800a0b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7fb ff9b 	bl	8006000 <HAL_DMA_Abort_IT>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d04d      	beq.n	800a16c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800a0da:	4610      	mov	r0, r2
 800a0dc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0de:	e045      	b.n	800a16c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f851 	bl	800a188 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a0e6:	e041      	b.n	800a16c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d039      	beq.n	800a164 <I2C_ITError+0x1bc>
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2b12      	cmp	r3, #18
 800a0f4:	d002      	beq.n	800a0fc <I2C_ITError+0x154>
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b22      	cmp	r3, #34	@ 0x22
 800a0fa:	d133      	bne.n	800a164 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a10a:	d107      	bne.n	800a11c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a11a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a120:	4618      	mov	r0, r3
 800a122:	f7fd f8dd 	bl	80072e0 <HAL_DMA_GetState>
 800a126:	4603      	mov	r3, r0
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d017      	beq.n	800a15c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a130:	4a14      	ldr	r2, [pc, #80]	@ (800a184 <I2C_ITError+0x1dc>)
 800a132:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a140:	4618      	mov	r0, r3
 800a142:	f7fb ff5d 	bl	8006000 <HAL_DMA_Abort_IT>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d011      	beq.n	800a170 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a156:	4610      	mov	r0, r2
 800a158:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a15a:	e009      	b.n	800a170 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 f813 	bl	800a188 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a162:	e005      	b.n	800a170 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f80f 	bl	800a188 <I2C_TreatErrorCallback>
  }
}
 800a16a:	e002      	b.n	800a172 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a16c:	bf00      	nop
 800a16e:	e000      	b.n	800a172 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a170:	bf00      	nop
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
 800a17a:	bf00      	nop
 800a17c:	ffff0000 	.word	0xffff0000
 800a180:	08008c5f 	.word	0x08008c5f
 800a184:	0800a529 	.word	0x0800a529

0800a188 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b60      	cmp	r3, #96	@ 0x60
 800a19a:	d10e      	bne.n	800a1ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f7fe fc15 	bl	80089e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a1b8:	e009      	b.n	800a1ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7fe fc00 	bl	80089ce <HAL_I2C_ErrorCallback>
}
 800a1ce:	bf00      	nop
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}

0800a1d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d103      	bne.n	800a1f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d007      	beq.n	800a212 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	699a      	ldr	r2, [r3, #24]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f042 0201 	orr.w	r2, r2, #1
 800a210:	619a      	str	r2, [r3, #24]
  }
}
 800a212:	bf00      	nop
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a23a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a240:	b29b      	uxth	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d104      	bne.n	800a250 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a246:	2120      	movs	r1, #32
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 fc0d 	bl	800aa68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800a24e:	e02d      	b.n	800a2ac <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a258:	441a      	add	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a262:	b29b      	uxth	r3, r3
 800a264:	2bff      	cmp	r3, #255	@ 0xff
 800a266:	d903      	bls.n	800a270 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	22ff      	movs	r2, #255	@ 0xff
 800a26c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a26e:	e004      	b.n	800a27a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a274:	b29a      	uxth	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a282:	4619      	mov	r1, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	3328      	adds	r3, #40	@ 0x28
 800a28a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800a290:	f7fb f92e 	bl	80054f0 <HAL_DMA_Start_IT>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a29a:	2110      	movs	r1, #16
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7ff fe83 	bl	8009fa8 <I2C_ITError>
}
 800a2a2:	e003      	b.n	800a2ac <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800a2a4:	2140      	movs	r1, #64	@ 0x40
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	f000 fbde 	bl	800aa68 <I2C_Enable_IRQ>
}
 800a2ac:	bf00      	nop
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}

0800a2b4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d076      	beq.n	800a3bc <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a71      	ldr	r2, [pc, #452]	@ (800a49c <I2C_DMAError+0x1e8>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d059      	beq.n	800a38e <I2C_DMAError+0xda>
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a6f      	ldr	r2, [pc, #444]	@ (800a4a0 <I2C_DMAError+0x1ec>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d053      	beq.n	800a38e <I2C_DMAError+0xda>
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a6d      	ldr	r2, [pc, #436]	@ (800a4a4 <I2C_DMAError+0x1f0>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d04d      	beq.n	800a38e <I2C_DMAError+0xda>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a6b      	ldr	r2, [pc, #428]	@ (800a4a8 <I2C_DMAError+0x1f4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d047      	beq.n	800a38e <I2C_DMAError+0xda>
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a69      	ldr	r2, [pc, #420]	@ (800a4ac <I2C_DMAError+0x1f8>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d041      	beq.n	800a38e <I2C_DMAError+0xda>
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a67      	ldr	r2, [pc, #412]	@ (800a4b0 <I2C_DMAError+0x1fc>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d03b      	beq.n	800a38e <I2C_DMAError+0xda>
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a65      	ldr	r2, [pc, #404]	@ (800a4b4 <I2C_DMAError+0x200>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d035      	beq.n	800a38e <I2C_DMAError+0xda>
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a63      	ldr	r2, [pc, #396]	@ (800a4b8 <I2C_DMAError+0x204>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d02f      	beq.n	800a38e <I2C_DMAError+0xda>
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a61      	ldr	r2, [pc, #388]	@ (800a4bc <I2C_DMAError+0x208>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d029      	beq.n	800a38e <I2C_DMAError+0xda>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a5f      	ldr	r2, [pc, #380]	@ (800a4c0 <I2C_DMAError+0x20c>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d023      	beq.n	800a38e <I2C_DMAError+0xda>
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a5d      	ldr	r2, [pc, #372]	@ (800a4c4 <I2C_DMAError+0x210>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d01d      	beq.n	800a38e <I2C_DMAError+0xda>
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a5b      	ldr	r2, [pc, #364]	@ (800a4c8 <I2C_DMAError+0x214>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d017      	beq.n	800a38e <I2C_DMAError+0xda>
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a59      	ldr	r2, [pc, #356]	@ (800a4cc <I2C_DMAError+0x218>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d011      	beq.n	800a38e <I2C_DMAError+0xda>
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a57      	ldr	r2, [pc, #348]	@ (800a4d0 <I2C_DMAError+0x21c>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d00b      	beq.n	800a38e <I2C_DMAError+0xda>
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a55      	ldr	r2, [pc, #340]	@ (800a4d4 <I2C_DMAError+0x220>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d005      	beq.n	800a38e <I2C_DMAError+0xda>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a53      	ldr	r2, [pc, #332]	@ (800a4d8 <I2C_DMAError+0x224>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d109      	bne.n	800a3a2 <I2C_DMAError+0xee>
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	bf0c      	ite	eq
 800a39a:	2301      	moveq	r3, #1
 800a39c:	2300      	movne	r3, #0
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	e008      	b.n	800a3b4 <I2C_DMAError+0x100>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	bf0c      	ite	eq
 800a3ae:	2301      	moveq	r3, #1
 800a3b0:	2300      	movne	r3, #0
 800a3b2:	b2db      	uxtb	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f000 8098 	beq.w	800a4f6 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a33      	ldr	r2, [pc, #204]	@ (800a49c <I2C_DMAError+0x1e8>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d059      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a31      	ldr	r2, [pc, #196]	@ (800a4a0 <I2C_DMAError+0x1ec>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d053      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a2f      	ldr	r2, [pc, #188]	@ (800a4a4 <I2C_DMAError+0x1f0>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d04d      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a2d      	ldr	r2, [pc, #180]	@ (800a4a8 <I2C_DMAError+0x1f4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d047      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a2b      	ldr	r2, [pc, #172]	@ (800a4ac <I2C_DMAError+0x1f8>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d041      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a29      	ldr	r2, [pc, #164]	@ (800a4b0 <I2C_DMAError+0x1fc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d03b      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a27      	ldr	r2, [pc, #156]	@ (800a4b4 <I2C_DMAError+0x200>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d035      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a25      	ldr	r2, [pc, #148]	@ (800a4b8 <I2C_DMAError+0x204>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d02f      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a23      	ldr	r2, [pc, #140]	@ (800a4bc <I2C_DMAError+0x208>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d029      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a21      	ldr	r2, [pc, #132]	@ (800a4c0 <I2C_DMAError+0x20c>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d023      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a1f      	ldr	r2, [pc, #124]	@ (800a4c4 <I2C_DMAError+0x210>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d01d      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a1d      	ldr	r2, [pc, #116]	@ (800a4c8 <I2C_DMAError+0x214>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d017      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a1b      	ldr	r2, [pc, #108]	@ (800a4cc <I2C_DMAError+0x218>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d011      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a19      	ldr	r2, [pc, #100]	@ (800a4d0 <I2C_DMAError+0x21c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00b      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a17      	ldr	r2, [pc, #92]	@ (800a4d4 <I2C_DMAError+0x220>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d005      	beq.n	800a486 <I2C_DMAError+0x1d2>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a15      	ldr	r2, [pc, #84]	@ (800a4d8 <I2C_DMAError+0x224>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d12a      	bne.n	800a4dc <I2C_DMAError+0x228>
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	bf0c      	ite	eq
 800a492:	2301      	moveq	r3, #1
 800a494:	2300      	movne	r3, #0
 800a496:	b2db      	uxtb	r3, r3
 800a498:	e029      	b.n	800a4ee <I2C_DMAError+0x23a>
 800a49a:	bf00      	nop
 800a49c:	40020010 	.word	0x40020010
 800a4a0:	40020028 	.word	0x40020028
 800a4a4:	40020040 	.word	0x40020040
 800a4a8:	40020058 	.word	0x40020058
 800a4ac:	40020070 	.word	0x40020070
 800a4b0:	40020088 	.word	0x40020088
 800a4b4:	400200a0 	.word	0x400200a0
 800a4b8:	400200b8 	.word	0x400200b8
 800a4bc:	40020410 	.word	0x40020410
 800a4c0:	40020428 	.word	0x40020428
 800a4c4:	40020440 	.word	0x40020440
 800a4c8:	40020458 	.word	0x40020458
 800a4cc:	40020470 	.word	0x40020470
 800a4d0:	40020488 	.word	0x40020488
 800a4d4:	400204a0 	.word	0x400204a0
 800a4d8:	400204b8 	.word	0x400204b8
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	bf0c      	ite	eq
 800a4e8:	2301      	moveq	r3, #1
 800a4ea:	2300      	movne	r3, #0
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7fc ff00 	bl	80072fc <HAL_DMA_GetError>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d00e      	beq.n	800a520 <I2C_DMAError+0x26c>
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a516:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800a518:	2110      	movs	r1, #16
 800a51a:	68b8      	ldr	r0, [r7, #8]
 800a51c:	f7ff fd44 	bl	8009fa8 <I2C_ITError>
  }
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a534:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a542:	2200      	movs	r2, #0
 800a544:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a552:	2200      	movs	r2, #0
 800a554:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f7ff fe16 	bl	800a188 <I2C_TreatErrorCallback>
}
 800a55c:	bf00      	nop
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	4613      	mov	r3, r2
 800a572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a574:	e03b      	b.n	800a5ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	6839      	ldr	r1, [r7, #0]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 f962 	bl	800a844 <I2C_IsErrorOccurred>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a586:	2301      	movs	r3, #1
 800a588:	e041      	b.n	800a60e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	d02d      	beq.n	800a5ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a592:	f7f8 ffdb 	bl	800354c <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d302      	bcc.n	800a5a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d122      	bne.n	800a5ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	699a      	ldr	r2, [r3, #24]
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	bf0c      	ite	eq
 800a5b8:	2301      	moveq	r3, #1
 800a5ba:	2300      	movne	r3, #0
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	461a      	mov	r2, r3
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d113      	bne.n	800a5ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ca:	f043 0220 	orr.w	r2, r3, #32
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2220      	movs	r2, #32
 800a5d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e00f      	b.n	800a60e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	699a      	ldr	r2, [r3, #24]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	bf0c      	ite	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	2300      	movne	r3, #0
 800a602:	b2db      	uxtb	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d0b4      	beq.n	800a576 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a616:	b580      	push	{r7, lr}
 800a618:	b084      	sub	sp, #16
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	60f8      	str	r0, [r7, #12]
 800a61e:	60b9      	str	r1, [r7, #8]
 800a620:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a622:	e033      	b.n	800a68c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	68b9      	ldr	r1, [r7, #8]
 800a628:	68f8      	ldr	r0, [r7, #12]
 800a62a:	f000 f90b 	bl	800a844 <I2C_IsErrorOccurred>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e031      	b.n	800a69c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a63e:	d025      	beq.n	800a68c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a640:	f7f8 ff84 	bl	800354c <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	1ad3      	subs	r3, r2, r3
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d302      	bcc.n	800a656 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d11a      	bne.n	800a68c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	699b      	ldr	r3, [r3, #24]
 800a65c:	f003 0302 	and.w	r3, r3, #2
 800a660:	2b02      	cmp	r3, #2
 800a662:	d013      	beq.n	800a68c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a668:	f043 0220 	orr.w	r2, r3, #32
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2220      	movs	r2, #32
 800a674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	e007      	b.n	800a69c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b02      	cmp	r3, #2
 800a698:	d1c4      	bne.n	800a624 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a6b0:	e02f      	b.n	800a712 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f8c4 	bl	800a844 <I2C_IsErrorOccurred>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e02d      	b.n	800a722 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6c6:	f7f8 ff41 	bl	800354c <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	1ad3      	subs	r3, r2, r3
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d302      	bcc.n	800a6dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d11a      	bne.n	800a712 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	699b      	ldr	r3, [r3, #24]
 800a6e2:	f003 0320 	and.w	r3, r3, #32
 800a6e6:	2b20      	cmp	r3, #32
 800a6e8:	d013      	beq.n	800a712 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6ee:	f043 0220 	orr.w	r2, r3, #32
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e007      	b.n	800a722 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	699b      	ldr	r3, [r3, #24]
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d1c8      	bne.n	800a6b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a73c:	e071      	b.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	68b9      	ldr	r1, [r7, #8]
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 f87e 	bl	800a844 <I2C_IsErrorOccurred>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800a74e:	2301      	movs	r3, #1
 800a750:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	f003 0320 	and.w	r3, r3, #32
 800a75c:	2b20      	cmp	r3, #32
 800a75e:	d13b      	bne.n	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d138      	bne.n	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	f003 0304 	and.w	r3, r3, #4
 800a770:	2b04      	cmp	r3, #4
 800a772:	d105      	bne.n	800a780 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f003 0310 	and.w	r3, r3, #16
 800a78a:	2b10      	cmp	r3, #16
 800a78c:	d121      	bne.n	800a7d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2210      	movs	r2, #16
 800a794:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2204      	movs	r2, #4
 800a79a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	2220      	movs	r2, #32
 800a7a2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6859      	ldr	r1, [r3, #4]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	4b24      	ldr	r3, [pc, #144]	@ (800a840 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800a7b0:	400b      	ands	r3, r1
 800a7b2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2220      	movs	r2, #32
 800a7b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	75fb      	strb	r3, [r7, #23]
 800a7d0:	e002      	b.n	800a7d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800a7d8:	f7f8 feb8 	bl	800354c <HAL_GetTick>
 800a7dc:	4602      	mov	r2, r0
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d302      	bcc.n	800a7ee <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d119      	bne.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d116      	bne.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	f003 0304 	and.w	r3, r3, #4
 800a7fe:	2b04      	cmp	r3, #4
 800a800:	d00f      	beq.n	800a822 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a806:	f043 0220 	orr.w	r2, r3, #32
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2220      	movs	r2, #32
 800a812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	699b      	ldr	r3, [r3, #24]
 800a828:	f003 0304 	and.w	r3, r3, #4
 800a82c:	2b04      	cmp	r3, #4
 800a82e:	d002      	beq.n	800a836 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d083      	beq.n	800a73e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3718      	adds	r7, #24
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	fe00e800 	.word	0xfe00e800

0800a844 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	@ 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	f003 0310 	and.w	r3, r3, #16
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d068      	beq.n	800a942 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2210      	movs	r2, #16
 800a876:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a878:	e049      	b.n	800a90e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a880:	d045      	beq.n	800a90e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a882:	f7f8 fe63 	bl	800354c <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <I2C_IsErrorOccurred+0x54>
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d13a      	bne.n	800a90e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8ba:	d121      	bne.n	800a900 <I2C_IsErrorOccurred+0xbc>
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8c2:	d01d      	beq.n	800a900 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a8c4:	7cfb      	ldrb	r3, [r7, #19]
 800a8c6:	2b20      	cmp	r3, #32
 800a8c8:	d01a      	beq.n	800a900 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a8d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a8da:	f7f8 fe37 	bl	800354c <HAL_GetTick>
 800a8de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8e0:	e00e      	b.n	800a900 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a8e2:	f7f8 fe33 	bl	800354c <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	1ad3      	subs	r3, r2, r3
 800a8ec:	2b19      	cmp	r3, #25
 800a8ee:	d907      	bls.n	800a900 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	f043 0320 	orr.w	r3, r3, #32
 800a8f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a8fe:	e006      	b.n	800a90e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	f003 0320 	and.w	r3, r3, #32
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d1e9      	bne.n	800a8e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	699b      	ldr	r3, [r3, #24]
 800a914:	f003 0320 	and.w	r3, r3, #32
 800a918:	2b20      	cmp	r3, #32
 800a91a:	d003      	beq.n	800a924 <I2C_IsErrorOccurred+0xe0>
 800a91c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0aa      	beq.n	800a87a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a924:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d103      	bne.n	800a934 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2220      	movs	r2, #32
 800a932:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a934:	6a3b      	ldr	r3, [r7, #32]
 800a936:	f043 0304 	orr.w	r3, r3, #4
 800a93a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a954:	6a3b      	ldr	r3, [r7, #32]
 800a956:	f043 0301 	orr.w	r3, r3, #1
 800a95a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00b      	beq.n	800a98e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f043 0308 	orr.w	r3, r3, #8
 800a97c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a986:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00b      	beq.n	800a9b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	f043 0302 	orr.w	r3, r3, #2
 800a99e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d01c      	beq.n	800a9f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fc0c 	bl	800a1d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6859      	ldr	r1, [r3, #4]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa00 <I2C_IsErrorOccurred+0x1bc>)
 800a9ca:	400b      	ands	r3, r1
 800a9cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9d2:	6a3b      	ldr	r3, [r7, #32]
 800a9d4:	431a      	orrs	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3728      	adds	r7, #40	@ 0x28
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	fe00e800 	.word	0xfe00e800

0800aa04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b087      	sub	sp, #28
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	607b      	str	r3, [r7, #4]
 800aa0e:	460b      	mov	r3, r1
 800aa10:	817b      	strh	r3, [r7, #10]
 800aa12:	4613      	mov	r3, r2
 800aa14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa16:	897b      	ldrh	r3, [r7, #10]
 800aa18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa1c:	7a7b      	ldrb	r3, [r7, #9]
 800aa1e:	041b      	lsls	r3, r3, #16
 800aa20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa24:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa2a:	6a3b      	ldr	r3, [r7, #32]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa32:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	6a3b      	ldr	r3, [r7, #32]
 800aa3c:	0d5b      	lsrs	r3, r3, #21
 800aa3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800aa42:	4b08      	ldr	r3, [pc, #32]	@ (800aa64 <I2C_TransferConfig+0x60>)
 800aa44:	430b      	orrs	r3, r1
 800aa46:	43db      	mvns	r3, r3
 800aa48:	ea02 0103 	and.w	r1, r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	430a      	orrs	r2, r1
 800aa54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aa56:	bf00      	nop
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	03ff63ff 	.word	0x03ff63ff

0800aa68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	460b      	mov	r3, r1
 800aa72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7c:	4a39      	ldr	r2, [pc, #228]	@ (800ab64 <I2C_Enable_IRQ+0xfc>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d032      	beq.n	800aae8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800aa86:	4a38      	ldr	r2, [pc, #224]	@ (800ab68 <I2C_Enable_IRQ+0x100>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d02d      	beq.n	800aae8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800aa90:	4a36      	ldr	r2, [pc, #216]	@ (800ab6c <I2C_Enable_IRQ+0x104>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d028      	beq.n	800aae8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aa96:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	da03      	bge.n	800aaa6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800aaa4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aaa6:	887b      	ldrh	r3, [r7, #2]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d003      	beq.n	800aab8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800aab6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800aab8:	887b      	ldrh	r3, [r7, #2]
 800aaba:	f003 0302 	and.w	r3, r3, #2
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800aac8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800aaca:	887b      	ldrh	r3, [r7, #2]
 800aacc:	2b10      	cmp	r3, #16
 800aace:	d103      	bne.n	800aad8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800aad6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aad8:	887b      	ldrh	r3, [r7, #2]
 800aada:	2b20      	cmp	r3, #32
 800aadc:	d133      	bne.n	800ab46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f043 0320 	orr.w	r3, r3, #32
 800aae4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800aae6:	e02e      	b.n	800ab46 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800aae8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	da03      	bge.n	800aaf8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800aaf6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800aaf8:	887b      	ldrh	r3, [r7, #2]
 800aafa:	f003 0301 	and.w	r3, r3, #1
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800ab08:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ab0a:	887b      	ldrh	r3, [r7, #2]
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d003      	beq.n	800ab1c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800ab1a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ab1c:	887b      	ldrh	r3, [r7, #2]
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d103      	bne.n	800ab2a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800ab28:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ab2a:	887b      	ldrh	r3, [r7, #2]
 800ab2c:	2b20      	cmp	r3, #32
 800ab2e:	d103      	bne.n	800ab38 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800ab36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ab38:	887b      	ldrh	r3, [r7, #2]
 800ab3a:	2b40      	cmp	r3, #64	@ 0x40
 800ab3c:	d103      	bne.n	800ab46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab44:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	6819      	ldr	r1, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	601a      	str	r2, [r3, #0]
}
 800ab56:	bf00      	nop
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	08008e67 	.word	0x08008e67
 800ab68:	080092ad 	.word	0x080092ad
 800ab6c:	0800904d 	.word	0x0800904d

0800ab70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ab80:	887b      	ldrh	r3, [r7, #2]
 800ab82:	f003 0301 	and.w	r3, r3, #1
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00f      	beq.n	800abaa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 800ab90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ab9e:	2b28      	cmp	r3, #40	@ 0x28
 800aba0:	d003      	beq.n	800abaa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800aba8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800abaa:	887b      	ldrh	r3, [r7, #2]
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00f      	beq.n	800abd4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800abba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800abc8:	2b28      	cmp	r3, #40	@ 0x28
 800abca:	d003      	beq.n	800abd4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800abd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800abd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	da03      	bge.n	800abe4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800abe2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800abe4:	887b      	ldrh	r3, [r7, #2]
 800abe6:	2b10      	cmp	r3, #16
 800abe8:	d103      	bne.n	800abf2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800abf0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800abf2:	887b      	ldrh	r3, [r7, #2]
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	d103      	bne.n	800ac00 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f043 0320 	orr.w	r3, r3, #32
 800abfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ac00:	887b      	ldrh	r3, [r7, #2]
 800ac02:	2b40      	cmp	r3, #64	@ 0x40
 800ac04:	d103      	bne.n	800ac0e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6819      	ldr	r1, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	43da      	mvns	r2, r3
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	400a      	ands	r2, r1
 800ac1e:	601a      	str	r2, [r3, #0]
}
 800ac20:	bf00      	nop
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b20      	cmp	r3, #32
 800ac40:	d138      	bne.n	800acb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e032      	b.n	800acb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2224      	movs	r2, #36	@ 0x24
 800ac5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f022 0201 	bic.w	r2, r2, #1
 800ac6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ac7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6819      	ldr	r1, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0201 	orr.w	r2, r2, #1
 800ac9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	e000      	b.n	800acb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800acb4:	2302      	movs	r3, #2
  }
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr

0800acc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800acc2:	b480      	push	{r7}
 800acc4:	b085      	sub	sp, #20
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b20      	cmp	r3, #32
 800acd6:	d139      	bne.n	800ad4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d101      	bne.n	800ace6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ace2:	2302      	movs	r3, #2
 800ace4:	e033      	b.n	800ad4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2201      	movs	r2, #1
 800acea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2224      	movs	r2, #36	@ 0x24
 800acf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f022 0201 	bic.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ad14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	021b      	lsls	r3, r3, #8
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f042 0201 	orr.w	r2, r2, #1
 800ad36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2220      	movs	r2, #32
 800ad3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e000      	b.n	800ad4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ad4c:	2302      	movs	r3, #2
  }
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3714      	adds	r7, #20
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
	...

0800ad5c <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e070      	b.n	800ae50 <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d106      	bne.n	800ad88 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f7f7 f8ba 	bl	8001efc <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f042 0201 	orr.w	r2, r2, #1
 800ad9e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f022 0201 	bic.w	r2, r2, #1
 800adae:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800adbe:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800adce:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800adde:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800adee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a19      	ldr	r2, [pc, #100]	@ (800ae58 <HAL_JPEG_Init+0xfc>)
 800adf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a18      	ldr	r2, [pc, #96]	@ (800ae5c <HAL_JPEG_Init+0x100>)
 800adfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fd75 	bl	800b8f8 <JPEG_Set_HuffEnc_Mem>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d004      	beq.n	800ae1e <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e018      	b.n	800ae50 <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae2c:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800ae4e:	2300      	movs	r3, #0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	0801db74 	.word	0x0801db74
 800ae5c:	0801dbb4 	.word	0x0801dbb4

0800ae60 <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b086      	sub	sp, #24
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <HAL_JPEG_GetInfo+0x16>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d101      	bne.n	800ae7a <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800ae76:	2301      	movs	r3, #1
 800ae78:	e083      	b.n	800af82 <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f003 0303 	and.w	r3, r3, #3
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d103      	bne.n	800ae90 <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2210      	movs	r2, #16
 800ae8c:	601a      	str	r2, [r3, #0]
 800ae8e:	e017      	b.n	800aec0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d103      	bne.n	800aea6 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	e00c      	b.n	800aec0 <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f003 0303 	and.w	r3, r3, #3
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d103      	bne.n	800aebc <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2230      	movs	r2, #48	@ 0x30
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	e001      	b.n	800aec0 <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e060      	b.n	800af82 <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	0c1b      	lsrs	r3, r3, #16
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	b29a      	uxth	r2, r3
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2b10      	cmp	r3, #16
 800aee2:	d003      	beq.n	800aeec <HAL_JPEG_GetInfo+0x8c>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b30      	cmp	r3, #48	@ 0x30
 800aeea:	d140      	bne.n	800af6e <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	091b      	lsrs	r3, r3, #4
 800aef4:	f003 030f 	and.w	r3, r3, #15
 800aef8:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	091b      	lsrs	r3, r3, #4
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	091b      	lsrs	r3, r3, #4
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d109      	bne.n	800af30 <HAL_JPEG_GetInfo+0xd0>
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d106      	bne.n	800af30 <HAL_JPEG_GetInfo+0xd0>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d103      	bne.n	800af30 <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2202      	movs	r2, #2
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	e01d      	b.n	800af6c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d109      	bne.n	800af4a <HAL_JPEG_GetInfo+0xea>
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <HAL_JPEG_GetInfo+0xea>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d103      	bne.n	800af4a <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2200      	movs	r2, #0
 800af46:	605a      	str	r2, [r3, #4]
 800af48:	e010      	b.n	800af6c <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	2b03      	cmp	r3, #3
 800af4e:	d109      	bne.n	800af64 <HAL_JPEG_GetInfo+0x104>
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <HAL_JPEG_GetInfo+0x104>
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d103      	bne.n	800af64 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2201      	movs	r2, #1
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	e003      	b.n	800af6c <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2200      	movs	r2, #0
 800af68:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800af6a:	e003      	b.n	800af74 <HAL_JPEG_GetInfo+0x114>
 800af6c:	e002      	b.n	800af74 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2200      	movs	r2, #0
 800af72:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fdb1 	bl	800cadc <JPEG_GetQuality>
 800af7a:	4602      	mov	r2, r0
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	60f8      	str	r0, [r7, #12]
 800af92:	60b9      	str	r1, [r7, #8]
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <HAL_JPEG_Decode_DMA+0x20>
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <HAL_JPEG_Decode_DMA+0x20>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d101      	bne.n	800afae <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e04c      	b.n	800b048 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_JPEG_Decode_DMA+0x32>
 800afb8:	2302      	movs	r3, #2
 800afba:	e045      	b.n	800b048 <HAL_JPEG_Decode_DMA+0xbe>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d134      	bne.n	800b03a <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2204      	movs	r2, #4
 800afd4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afdc:	f023 020f 	bic.w	r2, r3, #15
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe8:	f043 020e 	orr.w	r2, r3, #14
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f000 fef1 	bl	800bdfc <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	f001 fa12 	bl	800c444 <JPEG_DMA_StartProcess>
 800b020:	4603      	mov	r3, r0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00f      	beq.n	800b046 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2206      	movs	r2, #6
 800b02a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e006      	b.n	800b048 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2200      	movs	r2, #0
 800b03e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800b042:	2302      	movs	r3, #2
 800b044:	e000      	b.n	800b048 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b062:	f003 030c 	and.w	r3, r3, #12
 800b066:	2b0c      	cmp	r3, #12
 800b068:	d116      	bne.n	800b098 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b078:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d033      	beq.n	800b0f2 <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b08e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	655a      	str	r2, [r3, #84]	@ 0x54
 800b096:	e02c      	b.n	800b0f2 <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b09c:	f003 030c 	and.w	r3, r3, #12
 800b0a0:	2b08      	cmp	r3, #8
 800b0a2:	d126      	bne.n	800b0f2 <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f043 0306 	orr.w	r3, r3, #6
 800b0c0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d009      	beq.n	800b0e0 <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0d0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800b0de:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	43da      	mvns	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	400a      	ands	r2, r1
 800b0f0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3714      	adds	r7, #20
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <HAL_JPEG_Abort>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Abort(JPEG_HandleTypeDef *hjpeg)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t tmpContext;
  tmpContext = hjpeg->Context;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b10c:	60fb      	str	r3, [r7, #12]

  /*Reset the Context operation and method*/
  hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b112:	4b4e      	ldr	r3, [pc, #312]	@ (800b24c <HAL_JPEG_Abort+0x14c>)
 800b114:	4013      	ands	r3, r2
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	6553      	str	r3, [r2, #84]	@ 0x54

  if ((tmpContext & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f003 030c 	and.w	r3, r3, #12
 800b120:	2b0c      	cmp	r3, #12
 800b122:	d125      	bne.n	800b170 <HAL_JPEG_Abort+0x70>
  {
    /* Stop the DMA In/out Xfer*/
    if (HAL_MDMA_Abort(hjpeg->hdmaout) != HAL_OK)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 fe54 	bl	800cdd6 <HAL_MDMA_Abort>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00a      	beq.n	800b14a <HAL_JPEG_Abort+0x4a>
    {
      if (hjpeg->hdmaout->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b138:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b13a:	2b40      	cmp	r3, #64	@ 0x40
 800b13c:	d105      	bne.n	800b14a <HAL_JPEG_Abort+0x4a>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b142:	f043 0204 	orr.w	r2, r3, #4
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
    if (HAL_MDMA_Abort(hjpeg->hdmain) != HAL_OK)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 fe41 	bl	800cdd6 <HAL_MDMA_Abort>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00a      	beq.n	800b170 <HAL_JPEG_Abort+0x70>
    {
      if (hjpeg->hdmain->ErrorCode == HAL_MDMA_ERROR_TIMEOUT)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b15e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b160:	2b40      	cmp	r3, #64	@ 0x40
 800b162:	d105      	bne.n	800b170 <HAL_JPEG_Abort+0x70>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b168:	f043 0204 	orr.w	r2, r3, #4
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

  }

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f022 0201 	bic.w	r2, r2, #1
 800b17e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b180:	f7f8 f9e4 	bl	800354c <HAL_GetTick>
 800b184:	60b8      	str	r0, [r7, #8]

  /* Check if the JPEG Codec is effectively disabled */
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800b186:	e012      	b.n	800b1ae <HAL_JPEG_Abort+0xae>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > JPEG_TIMEOUT_VALUE)
 800b188:	f7f8 f9e0 	bl	800354c <HAL_GetTick>
 800b18c:	4602      	mov	r2, r0
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b196:	d90a      	bls.n	800b1ae <HAL_JPEG_Abort+0xae>
    {
      /* Update error code */
      hjpeg->ErrorCode |= HAL_JPEG_ERROR_TIMEOUT;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b19c:	f043 0208 	orr.w	r2, r3, #8
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Change the DMA state */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2206      	movs	r2, #6
 800b1a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800b1ac:	e006      	b.n	800b1bc <HAL_JPEG_Abort+0xbc>
  while (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_COF) != 0UL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1e5      	bne.n	800b188 <HAL_JPEG_Abort+0x88>
    }
  }

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b1ca:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1da:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1ea:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b1fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2200      	movs	r2, #0
 800b200:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Reset the Context Pause*/
  hjpeg->Context &= ~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b20c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Change the DMA state*/
  if (hjpeg->ErrorCode != HAL_JPEG_ERROR_NONE)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d009      	beq.n	800b230 <HAL_JPEG_Abort+0x130>
  {
    hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2206      	movs	r2, #6
 800b220:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e008      	b.n	800b242 <HAL_JPEG_Abort+0x142>
  }
  else
  {
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    /* Return function status */
    return HAL_OK;
 800b240:	2300      	movs	r3, #0
  }

}
 800b242:	4618      	mov	r0, r3
 800b244:	3710      	adds	r7, #16
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	ffff7ff0 	.word	0xffff7ff0

0800b250 <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800b25a:	bf00      	nop
 800b25c:	370c      	adds	r7, #12
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr

0800b266 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800b266:	b480      	push	{r7}
 800b268:	b083      	sub	sp, #12
 800b26a:	af00      	add	r7, sp, #0
 800b26c:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b083      	sub	sp, #12
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800b29e:	b2db      	uxtb	r3, r3
 800b2a0:	3b03      	subs	r3, #3
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d813      	bhi.n	800b2ce <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2aa:	f003 030c 	and.w	r3, r3, #12
 800b2ae:	2b08      	cmp	r3, #8
 800b2b0:	d103      	bne.n	800b2ba <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fe16 	bl	800bee4 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800b2b8:	e00b      	b.n	800b2d2 <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2be:	f003 030c 	and.w	r3, r3, #12
 800b2c2:	2b0c      	cmp	r3, #12
 800b2c4:	d105      	bne.n	800b2d2 <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 f956 	bl	800c578 <JPEG_DMA_ContinueProcess>
      break;
 800b2cc:	e001      	b.n	800b2d2 <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800b2ce:	bf00      	nop
 800b2d0:	e000      	b.n	800b2d4 <HAL_JPEG_IRQHandler+0x44>
      break;
 800b2d2:	bf00      	nop
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	3708      	adds	r7, #8
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b08b      	sub	sp, #44	@ 0x2c
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	61fb      	str	r3, [r7, #28]
 800b2f2:	e020      	b.n	800b336 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800b2fe:	6a3a      	ldr	r2, [r7, #32]
 800b300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b302:	4413      	add	r3, r2
 800b304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b308:	d90f      	bls.n	800b32a <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e055      	b.n	800b3ba <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	b2da      	uxtb	r2, r3
 800b312:	68b9      	ldr	r1, [r7, #8]
 800b314:	6a3b      	ldr	r3, [r7, #32]
 800b316:	440b      	add	r3, r1
 800b318:	3201      	adds	r2, #1
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]
      p++;
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	3301      	adds	r3, #1
 800b322:	623b      	str	r3, [r7, #32]
      i--;
 800b324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b326:	3b01      	subs	r3, #1
 800b328:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800b32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d1ee      	bne.n	800b30e <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	3301      	adds	r3, #1
 800b334:	61fb      	str	r3, [r7, #28]
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d9db      	bls.n	800b2f4 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	4413      	add	r3, r2
 800b342:	2200      	movs	r2, #0
 800b344:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	6a3a      	ldr	r2, [r7, #32]
 800b34a:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	617b      	str	r3, [r7, #20]
  p = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800b35a:	e027      	b.n	800b3ac <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	4413      	add	r3, r2
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	601a      	str	r2, [r3, #0]
      p++;
 800b368:	6a3b      	ldr	r3, [r7, #32]
 800b36a:	3301      	adds	r3, #1
 800b36c:	623b      	str	r3, [r7, #32]
      code++;
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	3301      	adds	r3, #1
 800b372:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	4293      	cmp	r3, r2
 800b382:	d0eb      	beq.n	800b35c <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2b1f      	cmp	r3, #31
 800b388:	d901      	bls.n	800b38e <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e015      	b.n	800b3ba <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800b38e:	2201      	movs	r2, #1
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d301      	bcc.n	800b3a0 <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800b39c:	2301      	movs	r3, #1
 800b39e:	e00c      	b.n	800b3ba <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	61bb      	str	r3, [r7, #24]
    si++;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	6a3b      	ldr	r3, [r7, #32]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1dd      	bne.n	800b374 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	372c      	adds	r7, #44	@ 0x2c
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800b3c6:	b580      	push	{r7, lr}
 800b3c8:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b3d2:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b3d6:	6018      	str	r0, [r3, #0]
 800b3d8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b3dc:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b3e0:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b3e2:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b3e6:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b3ea:	6818      	ldr	r0, [r3, #0]
 800b3ec:	f107 0308 	add.w	r3, r7, #8
 800b3f0:	f107 020c 	add.w	r2, r7, #12
 800b3f4:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800b3f8:	f7ff ff70 	bl	800b2dc <JPEG_Bits_To_SizeCodes>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800b402:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800b40a:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800b40e:	e075      	b.n	800b4fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800b410:	2300      	movs	r3, #0
 800b412:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800b416:	e067      	b.n	800b4e8 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800b418:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b41c:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b426:	4413      	add	r3, r2
 800b428:	3310      	adds	r3, #16
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800b430:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b434:	2b00      	cmp	r3, #0
 800b436:	d103      	bne.n	800b440 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800b438:	23a0      	movs	r3, #160	@ 0xa0
 800b43a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b43e:	e021      	b.n	800b484 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800b440:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b444:	2bf0      	cmp	r3, #240	@ 0xf0
 800b446:	d103      	bne.n	800b450 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800b448:	23a1      	movs	r3, #161	@ 0xa1
 800b44a:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b44e:	e019      	b.n	800b484 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800b450:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b454:	091b      	lsrs	r3, r3, #4
 800b456:	f003 030f 	and.w	r3, r3, #15
 800b45a:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800b45e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800b46a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800b46e:	4613      	mov	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	461a      	mov	r2, r3
 800b478:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b47c:	4413      	add	r3, r2
 800b47e:	3b01      	subs	r3, #1
 800b480:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800b484:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b488:	2ba1      	cmp	r3, #161	@ 0xa1
 800b48a:	d901      	bls.n	800b490 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b48c:	2301      	movs	r3, #1
 800b48e:	e035      	b.n	800b4fc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b490:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b494:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b498:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800b49c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b4a0:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b4a4:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b4a8:	6819      	ldr	r1, [r3, #0]
 800b4aa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b4ae:	3328      	adds	r3, #40	@ 0x28
 800b4b0:	009b      	lsls	r3, r3, #2
 800b4b2:	440b      	add	r3, r1
 800b4b4:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b4b6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b4ba:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800b4be:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b4c2:	4413      	add	r3, r2
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	b2d9      	uxtb	r1, r3
 800b4ca:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b4ce:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800b4d8:	4413      	add	r3, r2
 800b4da:	460a      	mov	r2, r1
 800b4dc:	701a      	strb	r2, [r3, #0]
      k++;
 800b4de:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800b4e8:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800b4ec:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d38e      	bcc.n	800b418 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b512:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b516:	6018      	str	r0, [r3, #0]
 800b518:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b51c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b520:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800b522:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b526:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800b530:	f107 0208 	add.w	r2, r7, #8
 800b534:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800b538:	f7ff fed0 	bl	800b2dc <JPEG_Bits_To_SizeCodes>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800b542:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800b54a:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800b54e:	e048      	b.n	800b5e2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800b556:	e03d      	b.n	800b5d4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800b558:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b55c:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b566:	4413      	add	r3, r2
 800b568:	3310      	adds	r3, #16
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800b570:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b574:	2b0b      	cmp	r3, #11
 800b576:	d901      	bls.n	800b57c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800b578:	2301      	movs	r3, #1
 800b57a:	e032      	b.n	800b5e2 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800b57c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b580:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800b584:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800b588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b58c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b590:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b594:	6819      	ldr	r1, [r3, #0]
 800b596:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b59a:	3302      	adds	r3, #2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	440b      	add	r3, r1
 800b5a0:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800b5a2:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b5a6:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800b5aa:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b5ae:	4413      	add	r3, r2
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	b2d9      	uxtb	r1, r3
 800b5b6:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b5ba:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800b5c4:	4413      	add	r3, r2
 800b5c6:	460a      	mov	r2, r1
 800b5c8:	701a      	strb	r2, [r3, #0]
      k++;
 800b5ca:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800b5d4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800b5d8:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d3bb      	bcc.n	800b558 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b09a      	sub	sp, #104	@ 0x68
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d106      	bne.n	800b614 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800b60e:	3318      	adds	r3, #24
 800b610:	663b      	str	r3, [r7, #96]	@ 0x60
 800b612:	e00f      	b.n	800b634 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d106      	bne.n	800b630 <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800b62a:	3318      	adds	r3, #24
 800b62c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b62e:	e001      	b.n	800b634 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	e059      	b.n	800b6e8 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d055      	beq.n	800b6e6 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800b63a:	f107 0314 	add.w	r3, r7, #20
 800b63e:	4619      	mov	r1, r3
 800b640:	68b8      	ldr	r0, [r7, #8]
 800b642:	f7ff ff60 	bl	800b506 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800b646:	4603      	mov	r3, r0
 800b648:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800b64c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800b654:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b658:	e046      	b.n	800b6e8 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800b65a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b65c:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800b65e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b660:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b664:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b668:	3304      	adds	r3, #4
 800b66a:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800b66c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b66e:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b672:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800b674:	230c      	movs	r3, #12
 800b676:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800b678:	e032      	b.n	800b6e0 <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800b67a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b67c:	3b01      	subs	r3, #1
 800b67e:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800b680:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b682:	3b04      	subs	r3, #4
 800b684:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b686:	f107 0214 	add.w	r2, r7, #20
 800b68a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	021b      	lsls	r3, r3, #8
 800b692:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b696:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b698:	3302      	adds	r3, #2
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	3368      	adds	r3, #104	@ 0x68
 800b69e:	443b      	add	r3, r7
 800b6a0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800b6aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800b6b0:	f107 0214 	add.w	r2, r7, #20
 800b6b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6b6:	4413      	add	r3, r2
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	021b      	lsls	r3, r3, #8
 800b6bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b6c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6c2:	3302      	adds	r3, #2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	3368      	adds	r3, #104	@ 0x68
 800b6c8:	443b      	add	r3, r7
 800b6ca:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b6d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6d6:	041a      	lsls	r2, r3, #16
 800b6d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6de:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800b6e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d8c9      	bhi.n	800b67a <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3768      	adds	r7, #104	@ 0x68
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b6fc:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b700:	6018      	str	r0, [r3, #0]
 800b702:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b706:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b70a:	6019      	str	r1, [r3, #0]
 800b70c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b710:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800b714:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800b716:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b71a:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b726:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800b72a:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800b72e:	6812      	ldr	r2, [r2, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d10c      	bne.n	800b74e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b734:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b738:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b744:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b748:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b74c:	e01d      	b.n	800b78a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800b74e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b752:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800b75e:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800b762:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800b766:	6812      	ldr	r2, [r2, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d10c      	bne.n	800b786 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800b76c:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b770:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800b77c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800b780:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b784:	e001      	b.n	800b78a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e0a8      	b.n	800b8dc <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800b78a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b78e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80a0 	beq.w	800b8da <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800b79a:	f107 0214 	add.w	r2, r7, #20
 800b79e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b7a2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	6818      	ldr	r0, [r3, #0]
 800b7aa:	f7ff fe0c 	bl	800b3c6 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800b7b4:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d002      	beq.n	800b7c2 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800b7bc:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800b7c0:	e08c      	b.n	800b8dc <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800b7c2:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b7c6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b7d0:	e00e      	b.n	800b7f0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800b7d2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b7d6:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800b7da:	601a      	str	r2, [r3, #0]
      addressDef++;
 800b7dc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800b7e6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b7f0:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d9ec      	bls.n	800b7d2 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800b7f8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b7fc:	4a3a      	ldr	r2, [pc, #232]	@ (800b8e8 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800b7fe:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b800:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b804:	3304      	adds	r3, #4
 800b806:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800b80a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b80e:	4a37      	ldr	r2, [pc, #220]	@ (800b8ec <JPEG_Set_HuffAC_Mem+0x1fc>)
 800b810:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b812:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b816:	3304      	adds	r3, #4
 800b818:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800b81c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b820:	4a33      	ldr	r2, [pc, #204]	@ (800b8f0 <JPEG_Set_HuffAC_Mem+0x200>)
 800b822:	601a      	str	r2, [r3, #0]
    addressDef++;
 800b824:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b828:	3304      	adds	r3, #4
 800b82a:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800b82e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800b832:	4a30      	ldr	r2, [pc, #192]	@ (800b8f4 <JPEG_Set_HuffAC_Mem+0x204>)
 800b834:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800b836:	23a2      	movs	r3, #162	@ 0xa2
 800b838:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800b83c:	e049      	b.n	800b8d2 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800b83e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b842:	3b01      	subs	r3, #1
 800b844:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800b848:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b84c:	3b04      	subs	r3, #4
 800b84e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b852:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b856:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800b85a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b85e:	4413      	add	r3, r2
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	021b      	lsls	r3, r3, #8
 800b864:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b868:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b86c:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800b870:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b874:	3328      	adds	r3, #40	@ 0x28
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	4313      	orrs	r3, r2
 800b880:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800b884:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b888:	3b01      	subs	r3, #1
 800b88a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800b88e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b892:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800b896:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b89a:	4413      	add	r3, r2
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	021b      	lsls	r3, r3, #8
 800b8a0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800b8a4:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800b8a8:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800b8ac:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b8b0:	3328      	adds	r3, #40	@ 0x28
 800b8b2:	009b      	lsls	r3, r3, #2
 800b8b4:	440b      	add	r3, r1
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800b8c0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800b8c4:	041a      	lsls	r2, r3, #16
 800b8c6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800b8d0:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800b8d2:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d8b1      	bhi.n	800b83e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	0fd10fd0 	.word	0x0fd10fd0
 800b8ec:	0fd30fd2 	.word	0x0fd30fd2
 800b8f0:	0fd50fd4 	.word	0x0fd50fd4
 800b8f4:	0fd70fd6 	.word	0x0fd70fd6

0800b8f8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f84d 	bl	800b9a0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800b90e:	461a      	mov	r2, r3
 800b910:	491f      	ldr	r1, [pc, #124]	@ (800b990 <JPEG_Set_HuffEnc_Mem+0x98>)
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7ff feec 	bl	800b6f0 <JPEG_Set_HuffAC_Mem>
 800b918:	4603      	mov	r3, r0
 800b91a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b91c:	7bfb      	ldrb	r3, [r7, #15]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800b922:	7bfb      	ldrb	r3, [r7, #15]
 800b924:	e030      	b.n	800b988 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800b92e:	461a      	mov	r2, r3
 800b930:	4918      	ldr	r1, [pc, #96]	@ (800b994 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff fedc 	bl	800b6f0 <JPEG_Set_HuffAC_Mem>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800b942:	7bfb      	ldrb	r3, [r7, #15]
 800b944:	e020      	b.n	800b988 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800b94e:	461a      	mov	r2, r3
 800b950:	4911      	ldr	r1, [pc, #68]	@ (800b998 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7ff fe4a 	bl	800b5ec <JPEG_Set_HuffDC_Mem>
 800b958:	4603      	mov	r3, r0
 800b95a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d001      	beq.n	800b966 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
 800b964:	e010      	b.n	800b988 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800b96e:	461a      	mov	r2, r3
 800b970:	490a      	ldr	r1, [pc, #40]	@ (800b99c <JPEG_Set_HuffEnc_Mem+0xa4>)
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7ff fe3a 	bl	800b5ec <JPEG_Set_HuffDC_Mem>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d001      	beq.n	800b986 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	e000      	b.n	800b988 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	0801d9cc 	.word	0x0801d9cc
 800b994:	0801da80 	.word	0x0801da80
 800b998:	0801d994 	.word	0x0801d994
 800b99c:	0801d9b0 	.word	0x0801d9b0

0800b9a0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b08b      	sub	sp, #44	@ 0x2c
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800b9a8:	4b80      	ldr	r3, [pc, #512]	@ (800bbac <JPEG_Set_Huff_DHTMem+0x20c>)
 800b9aa:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800b9ac:	4b80      	ldr	r3, [pc, #512]	@ (800bbb0 <JPEG_Set_Huff_DHTMem+0x210>)
 800b9ae:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800b9b0:	4b80      	ldr	r3, [pc, #512]	@ (800bbb4 <JPEG_Set_Huff_DHTMem+0x214>)
 800b9b2:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800b9b4:	4b80      	ldr	r3, [pc, #512]	@ (800bbb8 <JPEG_Set_Huff_DHTMem+0x218>)
 800b9b6:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	623b      	str	r3, [r7, #32]
  index = 16;
 800b9c4:	2310      	movs	r3, #16
 800b9c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800b9c8:	e01d      	b.n	800ba06 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	5cd3      	ldrb	r3, [r2, r3]
 800b9d2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d6:	3b02      	subs	r3, #2
 800b9d8:	6979      	ldr	r1, [r7, #20]
 800b9da:	5ccb      	ldrb	r3, [r1, r3]
 800b9dc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b9de:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e2:	3b03      	subs	r3, #3
 800b9e4:	6979      	ldr	r1, [r7, #20]
 800b9e6:	5ccb      	ldrb	r3, [r1, r3]
 800b9e8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800b9ea:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800b9ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ee:	3a04      	subs	r2, #4
 800b9f0:	6979      	ldr	r1, [r7, #20]
 800b9f2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800b9f4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	601a      	str	r2, [r3, #0]
    address--;
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	3b04      	subs	r3, #4
 800b9fe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba02:	3b04      	subs	r3, #4
 800ba04:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d8de      	bhi.n	800b9ca <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ba14:	3318      	adds	r3, #24
 800ba16:	623b      	str	r3, [r7, #32]
  index = 12;
 800ba18:	230c      	movs	r3, #12
 800ba1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba1c:	e021      	b.n	800ba62 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba20:	3b01      	subs	r3, #1
 800ba22:	697a      	ldr	r2, [r7, #20]
 800ba24:	4413      	add	r3, r2
 800ba26:	7c1b      	ldrb	r3, [r3, #16]
 800ba28:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2c:	3b02      	subs	r3, #2
 800ba2e:	6979      	ldr	r1, [r7, #20]
 800ba30:	440b      	add	r3, r1
 800ba32:	7c1b      	ldrb	r3, [r3, #16]
 800ba34:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ba36:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3a:	3b03      	subs	r3, #3
 800ba3c:	6979      	ldr	r1, [r7, #20]
 800ba3e:	440b      	add	r3, r1
 800ba40:	7c1b      	ldrb	r3, [r3, #16]
 800ba42:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800ba44:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800ba46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba48:	3a04      	subs	r2, #4
 800ba4a:	6979      	ldr	r1, [r7, #20]
 800ba4c:	440a      	add	r2, r1
 800ba4e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800ba50:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	601a      	str	r2, [r3, #0]
    address--;
 800ba56:	6a3b      	ldr	r3, [r7, #32]
 800ba58:	3b04      	subs	r3, #4
 800ba5a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	3b04      	subs	r3, #4
 800ba60:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba64:	2b03      	cmp	r3, #3
 800ba66:	d8da      	bhi.n	800ba1e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ba70:	3328      	adds	r3, #40	@ 0x28
 800ba72:	623b      	str	r3, [r7, #32]
  index = 16;
 800ba74:	2310      	movs	r3, #16
 800ba76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ba78:	e01d      	b.n	800bab6 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ba7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7c:	3b01      	subs	r3, #1
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	5cd3      	ldrb	r3, [r2, r3]
 800ba82:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	3b02      	subs	r3, #2
 800ba88:	69f9      	ldr	r1, [r7, #28]
 800ba8a:	5ccb      	ldrb	r3, [r1, r3]
 800ba8c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ba8e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba92:	3b03      	subs	r3, #3
 800ba94:	69f9      	ldr	r1, [r7, #28]
 800ba96:	5ccb      	ldrb	r3, [r1, r3]
 800ba98:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ba9a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800ba9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba9e:	3a04      	subs	r2, #4
 800baa0:	69f9      	ldr	r1, [r7, #28]
 800baa2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800baa4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800baa6:	6a3b      	ldr	r3, [r7, #32]
 800baa8:	601a      	str	r2, [r3, #0]
    address--;
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	3b04      	subs	r3, #4
 800baae:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab2:	3b04      	subs	r3, #4
 800bab4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab8:	2b03      	cmp	r3, #3
 800baba:	d8de      	bhi.n	800ba7a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bac4:	33cc      	adds	r3, #204	@ 0xcc
 800bac6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800bac8:	6a3b      	ldr	r3, [r7, #32]
 800baca:	681a      	ldr	r2, [r3, #0]
 800bacc:	4b3b      	ldr	r3, [pc, #236]	@ (800bbbc <JPEG_Set_Huff_DHTMem+0x21c>)
 800bace:	4013      	ands	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800bad8:	021a      	lsls	r2, r3, #8
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	4313      	orrs	r3, r2
 800bade:	69fa      	ldr	r2, [r7, #28]
 800bae0:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800bae4:	4313      	orrs	r3, r2
 800bae6:	60fb      	str	r3, [r7, #12]
  *address = value;
 800bae8:	6a3b      	ldr	r3, [r7, #32]
 800baea:	68fa      	ldr	r2, [r7, #12]
 800baec:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800baee:	6a3b      	ldr	r3, [r7, #32]
 800baf0:	3b04      	subs	r3, #4
 800baf2:	623b      	str	r3, [r7, #32]
  index = 160;
 800baf4:	23a0      	movs	r3, #160	@ 0xa0
 800baf6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800baf8:	e021      	b.n	800bb3e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafc:	3b01      	subs	r3, #1
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	4413      	add	r3, r2
 800bb02:	7c1b      	ldrb	r3, [r3, #16]
 800bb04:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	3b02      	subs	r3, #2
 800bb0a:	69f9      	ldr	r1, [r7, #28]
 800bb0c:	440b      	add	r3, r1
 800bb0e:	7c1b      	ldrb	r3, [r3, #16]
 800bb10:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bb12:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800bb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb16:	3b03      	subs	r3, #3
 800bb18:	69f9      	ldr	r1, [r7, #28]
 800bb1a:	440b      	add	r3, r1
 800bb1c:	7c1b      	ldrb	r3, [r3, #16]
 800bb1e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800bb20:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800bb22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb24:	3a04      	subs	r2, #4
 800bb26:	69f9      	ldr	r1, [r7, #28]
 800bb28:	440a      	add	r2, r1
 800bb2a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800bb2c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	601a      	str	r2, [r3, #0]
    address--;
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	3b04      	subs	r3, #4
 800bb36:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bb38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3a:	3b04      	subs	r3, #4
 800bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	d8da      	bhi.n	800bafa <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bb4c:	33cc      	adds	r3, #204	@ 0xcc
 800bb4e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800bb50:	6a3b      	ldr	r3, [r7, #32]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b29b      	uxth	r3, r3
 800bb56:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	785b      	ldrb	r3, [r3, #1]
 800bb5c:	061a      	lsls	r2, r3, #24
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	431a      	orrs	r2, r3
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	041b      	lsls	r3, r3, #16
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	68fa      	ldr	r2, [r7, #12]
 800bb70:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bb7a:	33dc      	adds	r3, #220	@ 0xdc
 800bb7c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	4b0e      	ldr	r3, [pc, #56]	@ (800bbbc <JPEG_Set_Huff_DHTMem+0x21c>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	7bdb      	ldrb	r3, [r3, #15]
 800bb8c:	021a      	lsls	r2, r3, #8
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	7b92      	ldrb	r2, [r2, #14]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	60fb      	str	r3, [r7, #12]
  *address = value;
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800bba0:	6a3b      	ldr	r3, [r7, #32]
 800bba2:	3b04      	subs	r3, #4
 800bba4:	623b      	str	r3, [r7, #32]
  index = 12;
 800bba6:	230c      	movs	r3, #12
 800bba8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bbaa:	e027      	b.n	800bbfc <JPEG_Set_Huff_DHTMem+0x25c>
 800bbac:	0801d9cc 	.word	0x0801d9cc
 800bbb0:	0801da80 	.word	0x0801da80
 800bbb4:	0801d994 	.word	0x0801d994
 800bbb8:	0801d9b0 	.word	0x0801d9b0
 800bbbc:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	693a      	ldr	r2, [r7, #16]
 800bbc6:	5cd3      	ldrb	r3, [r2, r3]
 800bbc8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800bbca:	6939      	ldr	r1, [r7, #16]
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbce:	440b      	add	r3, r1
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bbd4:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	6939      	ldr	r1, [r7, #16]
 800bbdc:	5ccb      	ldrb	r3, [r1, r3]
 800bbde:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800bbe0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800bbe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbe4:	3a02      	subs	r2, #2
 800bbe6:	6939      	ldr	r1, [r7, #16]
 800bbe8:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800bbea:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	601a      	str	r2, [r3, #0]
    address--;
 800bbf0:	6a3b      	ldr	r3, [r7, #32]
 800bbf2:	3b04      	subs	r3, #4
 800bbf4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d8de      	bhi.n	800bbc0 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bc0a:	33dc      	adds	r3, #220	@ 0xdc
 800bc0c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	7c5b      	ldrb	r3, [r3, #17]
 800bc1a:	061a      	lsls	r2, r3, #24
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	431a      	orrs	r2, r3
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	7c1b      	ldrb	r3, [r3, #16]
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bc38:	33e8      	adds	r3, #232	@ 0xe8
 800bc3a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b6d      	ldr	r3, [pc, #436]	@ (800bdf8 <JPEG_Set_Huff_DHTMem+0x458>)
 800bc42:	4013      	ands	r3, r2
 800bc44:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	7edb      	ldrb	r3, [r3, #27]
 800bc4a:	021a      	lsls	r2, r3, #8
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	7e92      	ldrb	r2, [r2, #26]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
  *address = value;
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800bc5e:	6a3b      	ldr	r3, [r7, #32]
 800bc60:	3b04      	subs	r3, #4
 800bc62:	623b      	str	r3, [r7, #32]
  index = 8;
 800bc64:	2308      	movs	r3, #8
 800bc66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bc68:	e021      	b.n	800bcae <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	4413      	add	r3, r2
 800bc72:	7c1b      	ldrb	r3, [r3, #16]
 800bc74:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800bc76:	6939      	ldr	r1, [r7, #16]
 800bc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3310      	adds	r3, #16
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bc82:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800bc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc86:	3b01      	subs	r3, #1
 800bc88:	6939      	ldr	r1, [r7, #16]
 800bc8a:	440b      	add	r3, r1
 800bc8c:	7c1b      	ldrb	r3, [r3, #16]
 800bc8e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800bc90:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800bc92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc94:	3a02      	subs	r2, #2
 800bc96:	6939      	ldr	r1, [r7, #16]
 800bc98:	440a      	add	r2, r1
 800bc9a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800bc9c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bc9e:	6a3b      	ldr	r3, [r7, #32]
 800bca0:	601a      	str	r2, [r3, #0]
    address--;
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	3b04      	subs	r3, #4
 800bca6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcaa:	3b04      	subs	r3, #4
 800bcac:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb0:	2b03      	cmp	r3, #3
 800bcb2:	d8da      	bhi.n	800bc6a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bcbc:	33e8      	adds	r3, #232	@ 0xe8
 800bcbe:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	785b      	ldrb	r3, [r3, #1]
 800bccc:	061a      	lsls	r2, r3, #24
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	431a      	orrs	r2, r3
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	041b      	lsls	r3, r3, #16
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]
  *address = value;
 800bcdc:	6a3b      	ldr	r3, [r7, #32]
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bcea:	33f8      	adds	r3, #248	@ 0xf8
 800bcec:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	4b41      	ldr	r3, [pc, #260]	@ (800bdf8 <JPEG_Set_Huff_DHTMem+0x458>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	7bdb      	ldrb	r3, [r3, #15]
 800bcfc:	021a      	lsls	r2, r3, #8
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	69ba      	ldr	r2, [r7, #24]
 800bd04:	7b92      	ldrb	r2, [r2, #14]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	60fb      	str	r3, [r7, #12]
  *address = value;
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	3b04      	subs	r3, #4
 800bd14:	623b      	str	r3, [r7, #32]
  index = 12;
 800bd16:	230c      	movs	r3, #12
 800bd18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bd1a:	e01d      	b.n	800bd58 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	3301      	adds	r3, #1
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	5cd3      	ldrb	r3, [r2, r3]
 800bd24:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800bd26:	69b9      	ldr	r1, [r7, #24]
 800bd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2a:	440b      	add	r3, r1
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bd30:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	3b01      	subs	r3, #1
 800bd36:	69b9      	ldr	r1, [r7, #24]
 800bd38:	5ccb      	ldrb	r3, [r1, r3]
 800bd3a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800bd3c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800bd3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd40:	3a02      	subs	r2, #2
 800bd42:	69b9      	ldr	r1, [r7, #24]
 800bd44:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800bd46:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800bd48:	6a3b      	ldr	r3, [r7, #32]
 800bd4a:	601a      	str	r2, [r3, #0]
    address--;
 800bd4c:	6a3b      	ldr	r3, [r7, #32]
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	3b04      	subs	r3, #4
 800bd56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d8de      	bhi.n	800bd1c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bd66:	33f8      	adds	r3, #248	@ 0xf8
 800bd68:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	7c5b      	ldrb	r3, [r3, #17]
 800bd76:	061a      	lsls	r2, r3, #24
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	431a      	orrs	r2, r3
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	7c1b      	ldrb	r3, [r3, #16]
 800bd80:	041b      	lsls	r3, r3, #16
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800bd94:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800bd98:	623b      	str	r3, [r7, #32]
  index = 160;
 800bd9a:	23a0      	movs	r3, #160	@ 0xa0
 800bd9c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bd9e:	e021      	b.n	800bde4 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda2:	3301      	adds	r3, #1
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	4413      	add	r3, r2
 800bda8:	7c1b      	ldrb	r3, [r3, #16]
 800bdaa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800bdac:	69b9      	ldr	r1, [r7, #24]
 800bdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb0:	440b      	add	r3, r1
 800bdb2:	3310      	adds	r3, #16
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bdb8:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	69b9      	ldr	r1, [r7, #24]
 800bdc0:	440b      	add	r3, r1
 800bdc2:	7c1b      	ldrb	r3, [r3, #16]
 800bdc4:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800bdc6:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800bdc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdca:	3a02      	subs	r2, #2
 800bdcc:	69b9      	ldr	r1, [r7, #24]
 800bdce:	440a      	add	r2, r1
 800bdd0:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800bdd2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	601a      	str	r2, [r3, #0]
    address--;
 800bdd8:	6a3b      	ldr	r3, [r7, #32]
 800bdda:	3b04      	subs	r3, #4
 800bddc:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800bdde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde0:	3b04      	subs	r3, #4
 800bde2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	2b03      	cmp	r3, #3
 800bde8:	d8da      	bhi.n	800bda0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800bdea:	bf00      	nop
 800bdec:	bf00      	nop
 800bdee:	372c      	adds	r7, #44	@ 0x2c
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr
 800bdf8:	ffff0000 	.word	0xffff0000

0800bdfc <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b083      	sub	sp, #12
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be08:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be14:	f003 0303 	and.w	r3, r3, #3
 800be18:	2b02      	cmp	r3, #2
 800be1a:	d108      	bne.n	800be2e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f042 0208 	orr.w	r2, r2, #8
 800be2a:	605a      	str	r2, [r3, #4]
 800be2c:	e007      	b.n	800be3e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685a      	ldr	r2, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f022 0208 	bic.w	r2, r2, #8
 800be3c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 0201 	bic.w	r2, r2, #1
 800be4c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800be5c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800be6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800be7c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800be8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f042 0201 	orr.w	r2, r2, #1
 800be9c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bea2:	f003 030c 	and.w	r3, r3, #12
 800bea6:	2b08      	cmp	r3, #8
 800bea8:	d108      	bne.n	800bebc <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800beb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800beba:	e00d      	b.n	800bed8 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bec0:	f003 030c 	and.w	r3, r3, #12
 800bec4:	2b0c      	cmp	r3, #12
 800bec6:	d107      	bne.n	800bed8 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bed6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d125      	bne.n	800bf44 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800befe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d01e      	beq.n	800bf44 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	3304      	adds	r3, #4
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7fe ffa7 	bl	800ae60 <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7ff f996 	bl	800b250 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bf32:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf42:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d116      	bne.n	800bf7e <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf56:	f003 0302 	and.w	r3, r3, #2
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d004      	beq.n	800bf68 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800bf5e:	2108      	movs	r1, #8
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 f988 	bl	800c276 <JPEG_ReadInputData>
 800bf66:	e00a      	b.n	800bf7e <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf6e:	f003 0304 	and.w	r3, r3, #4
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d003      	beq.n	800bf7e <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800bf76:	2101      	movs	r1, #1
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 f97c 	bl	800c276 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d116      	bne.n	800bfb8 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf90:	f003 0308 	and.w	r3, r3, #8
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800bf98:	2108      	movs	r1, #8
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f864 	bl	800c068 <JPEG_StoreOutputData>
 800bfa0:	e00a      	b.n	800bfb8 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfa8:	f003 0310 	and.w	r3, r3, #16
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d003      	beq.n	800bfb8 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f858 	bl	800c068 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfc2:	2b20      	cmp	r3, #32
 800bfc4:	d14b      	bne.n	800c05e <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f022 0201 	bic.w	r2, r2, #1
 800bfd4:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfda:	f003 030c 	and.w	r3, r3, #12
 800bfde:	2b08      	cmp	r3, #8
 800bfe0:	d107      	bne.n	800bff2 <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bff0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c000:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00a      	beq.n	800c020 <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	69d9      	ldr	r1, [r3, #28]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c012:	461a      	mov	r2, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f7f5 fcc7 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c024:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02a:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f003 0303 	and.w	r3, r3, #3
 800c048:	2b02      	cmp	r3, #2
 800c04a:	d103      	bne.n	800c054 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f7f5 fc8b 	bl	8001968 <HAL_JPEG_DecodeCpltCallback>
 800c052:	e002      	b.n	800c05a <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff f906 	bl	800b266 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800c05a:	2301      	movs	r3, #1
 800c05c:	e000      	b.n	800c060 <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3710      	adds	r7, #16
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b086      	sub	sp, #24
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	440b      	add	r3, r1
 800c080:	429a      	cmp	r2, r3
 800c082:	d34b      	bcc.n	800c11c <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800c084:	2300      	movs	r3, #0
 800c086:	617b      	str	r3, [r7, #20]
 800c088:	e031      	b.n	800c0ee <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c090:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	69da      	ldr	r2, [r3, #28]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09a:	4413      	add	r3, r2
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	0a19      	lsrs	r1, r3, #8
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	69da      	ldr	r2, [r3, #28]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	4413      	add	r3, r2
 800c0b2:	b2ca      	uxtb	r2, r1
 800c0b4:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	0c19      	lsrs	r1, r3, #16
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	69da      	ldr	r2, [r3, #28]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c2:	3302      	adds	r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	b2ca      	uxtb	r2, r1
 800c0c8:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	0e19      	lsrs	r1, r3, #24
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	69da      	ldr	r2, [r3, #28]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d6:	3303      	adds	r3, #3
 800c0d8:	4413      	add	r3, r2
 800c0da:	b2ca      	uxtb	r2, r1
 800c0dc:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e2:	1d1a      	adds	r2, r3, #4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	617b      	str	r3, [r7, #20]
 800c0ee:	697a      	ldr	r2, [r7, #20]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d3c9      	bcc.n	800c08a <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0fe:	429a      	cmp	r2, r3
 800c100:	f040 80b5 	bne.w	800c26e <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	69d9      	ldr	r1, [r3, #28]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10c:	461a      	mov	r2, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7f5 fc4a 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800c11a:	e0a8      	b.n	800c26e <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c124:	429a      	cmp	r2, r3
 800c126:	f240 80a2 	bls.w	800c26e <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	089b      	lsrs	r3, r3, #2
 800c136:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800c138:	2300      	movs	r3, #0
 800c13a:	617b      	str	r3, [r7, #20]
 800c13c:	e031      	b.n	800c1a2 <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c144:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	69da      	ldr	r2, [r3, #28]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c14e:	4413      	add	r3, r2
 800c150:	68ba      	ldr	r2, [r7, #8]
 800c152:	b2d2      	uxtb	r2, r2
 800c154:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	0a19      	lsrs	r1, r3, #8
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69da      	ldr	r2, [r3, #28]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c162:	3301      	adds	r3, #1
 800c164:	4413      	add	r3, r2
 800c166:	b2ca      	uxtb	r2, r1
 800c168:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	0c19      	lsrs	r1, r3, #16
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	69da      	ldr	r2, [r3, #28]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c176:	3302      	adds	r3, #2
 800c178:	4413      	add	r3, r2
 800c17a:	b2ca      	uxtb	r2, r1
 800c17c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	0e19      	lsrs	r1, r3, #24
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	69da      	ldr	r2, [r3, #28]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c18a:	3303      	adds	r3, #3
 800c18c:	4413      	add	r3, r2
 800c18e:	b2ca      	uxtb	r2, r1
 800c190:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c196:	1d1a      	adds	r2, r3, #4
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	617b      	str	r3, [r7, #20]
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d3c9      	bcc.n	800c13e <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d10b      	bne.n	800c1ce <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	69d9      	ldr	r1, [r3, #28]
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7f5 fbf1 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c1cc:	e04f      	b.n	800c26e <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e0:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
 800c1e6:	e015      	b.n	800c214 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	f003 0303 	and.w	r3, r3, #3
 800c1ee:	00db      	lsls	r3, r3, #3
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	fa22 f103 	lsr.w	r1, r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	69da      	ldr	r2, [r3, #28]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1fe:	4413      	add	r3, r2
 800c200:	b2ca      	uxtb	r2, r1
 800c202:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c208:	1c5a      	adds	r2, r3, #1
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	3301      	adds	r3, #1
 800c212:	617b      	str	r3, [r7, #20]
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d3e5      	bcc.n	800c1e8 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	69d9      	ldr	r1, [r3, #28]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c224:	461a      	mov	r2, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7f5 fbbe 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2200      	movs	r2, #0
 800c230:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f1c3 0304 	rsb	r3, r3, #4
 800c238:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	617b      	str	r3, [r7, #20]
 800c23e:	e013      	b.n	800c268 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	fa22 f103 	lsr.w	r1, r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69da      	ldr	r2, [r3, #28]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c252:	4413      	add	r3, r2
 800c254:	b2ca      	uxtb	r2, r1
 800c256:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25c:	1c5a      	adds	r2, r3, #1
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	3301      	adds	r3, #1
 800c266:	617b      	str	r3, [r7, #20]
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2b03      	cmp	r3, #3
 800c26c:	d9e8      	bls.n	800c240 <JPEG_StoreOutputData+0x1d8>
}
 800c26e:	bf00      	nop
 800c270:	3718      	adds	r7, #24
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800c276:	b580      	push	{r7, lr}
 800c278:	b088      	sub	sp, #32
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800c280:	2300      	movs	r3, #0
 800c282:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <JPEG_ReadInputData+0x1c>
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d104      	bne.n	800c29c <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800c292:	2101      	movs	r1, #1
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7fe fedb 	bl	800b050 <HAL_JPEG_Pause>
 800c29a:	e028      	b.n	800c2ee <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a1b      	ldr	r3, [r3, #32]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d906      	bls.n	800c2b6 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6a1b      	ldr	r3, [r3, #32]
 800c2b0:	1ad3      	subs	r3, r2, r3
 800c2b2:	61fb      	str	r3, [r7, #28]
 800c2b4:	e01b      	b.n	800c2ee <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a1b      	ldr	r3, [r3, #32]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d115      	bne.n	800c2ee <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6a1b      	ldr	r3, [r3, #32]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f7fe ffd6 	bl	800b27a <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d2:	2b04      	cmp	r3, #4
 800c2d4:	d905      	bls.n	800c2e2 <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2da:	f023 0203 	bic.w	r2, r3, #3
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2ec:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f040 809f 	bne.w	800c43a <JPEG_ReadInputData+0x1c4>
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f000 809b 	beq.w	800c43a <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	089b      	lsrs	r3, r3, #2
 800c308:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d335      	bcc.n	800c37e <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800c312:	2300      	movs	r3, #0
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	e02d      	b.n	800c374 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	699a      	ldr	r2, [r3, #24]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	4413      	add	r3, r2
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	699a      	ldr	r2, [r3, #24]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3301      	adds	r3, #1
 800c332:	4413      	add	r3, r2
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c338:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6999      	ldr	r1, [r3, #24]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3302      	adds	r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c34a:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	699a      	ldr	r2, [r3, #24]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3303      	adds	r3, #3
 800c356:	4413      	add	r3, r2
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c360:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c362:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6a1b      	ldr	r3, [r3, #32]
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	3301      	adds	r3, #1
 800c372:	61bb      	str	r3, [r7, #24]
 800c374:	69ba      	ldr	r2, [r7, #24]
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	429a      	cmp	r2, r3
 800c37a:	d3cd      	bcc.n	800c318 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800c37c:	e05d      	b.n	800c43a <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d035      	beq.n	800c3f0 <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800c384:	2300      	movs	r3, #0
 800c386:	61bb      	str	r3, [r7, #24]
 800c388:	e02d      	b.n	800c3e6 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	699a      	ldr	r2, [r3, #24]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	4413      	add	r3, r2
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	699a      	ldr	r2, [r3, #24]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	4413      	add	r3, r2
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c3aa:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6999      	ldr	r1, [r3, #24]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3302      	adds	r3, #2
 800c3b6:	440b      	add	r3, r1
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800c3bc:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	699a      	ldr	r2, [r3, #24]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3303      	adds	r3, #3
 800c3c8:	4413      	add	r3, r2
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800c3d2:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800c3d4:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	1d1a      	adds	r2, r3, #4
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	61bb      	str	r3, [r7, #24]
 800c3e6:	69ba      	ldr	r2, [r7, #24]
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d3cd      	bcc.n	800c38a <JPEG_ReadInputData+0x114>
}
 800c3ee:	e024      	b.n	800c43a <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	61bb      	str	r3, [r7, #24]
 800c3f8:	e017      	b.n	800c42a <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	699a      	ldr	r2, [r3, #24]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	4413      	add	r3, r2
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	f003 0303 	and.w	r3, r3, #3
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	fa02 f303 	lsl.w	r3, r2, r3
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	4313      	orrs	r3, r2
 800c418:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	1c5a      	adds	r2, r3, #1
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800c424:	69bb      	ldr	r3, [r7, #24]
 800c426:	3301      	adds	r3, #1
 800c428:	61bb      	str	r3, [r7, #24]
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d3e3      	bcc.n	800c3fa <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c43a:	bf00      	nop
 800c43c:	3720      	adds	r7, #32
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
	...

0800c444 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c444:	b590      	push	{r4, r7, lr}
 800c446:	b087      	sub	sp, #28
 800c448:	af02      	add	r7, sp, #8
 800c44a:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c452:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45a:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	429a      	cmp	r2, r3
 800c464:	d804      	bhi.n	800c470 <JPEG_DMA_StartProcess+0x2c>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	d901      	bls.n	800c474 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	e074      	b.n	800c55e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c478:	4a3b      	ldr	r2, [pc, #236]	@ (800c568 <JPEG_DMA_StartProcess+0x124>)
 800c47a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c480:	4a3a      	ldr	r2, [pc, #232]	@ (800c56c <JPEG_DMA_StartProcess+0x128>)
 800c482:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c488:	4a39      	ldr	r2, [pc, #228]	@ (800c570 <JPEG_DMA_StartProcess+0x12c>)
 800c48a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c490:	4a36      	ldr	r2, [pc, #216]	@ (800c56c <JPEG_DMA_StartProcess+0x128>)
 800c492:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c498:	4a36      	ldr	r2, [pc, #216]	@ (800c574 <JPEG_DMA_StartProcess+0x130>)
 800c49a:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <JPEG_DMA_StartProcess+0x64>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d107      	bne.n	800c4b8 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4ac:	f043 0204 	orr.w	r2, r3, #4
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e052      	b.n	800c55e <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4c0:	68f9      	ldr	r1, [r7, #12]
 800c4c2:	fbb3 f1f1 	udiv	r1, r3, r1
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	fb00 f101 	mul.w	r1, r0, r1
 800c4cc:	1a5b      	subs	r3, r3, r1
 800c4ce:	1ad2      	subs	r2, r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4dc:	68b9      	ldr	r1, [r7, #8]
 800c4de:	fbb3 f1f1 	udiv	r1, r3, r1
 800c4e2:	68b8      	ldr	r0, [r7, #8]
 800c4e4:	fb00 f101 	mul.w	r1, r0, r1
 800c4e8:	1a5b      	subs	r3, r3, r1
 800c4ea:	1ad2      	subs	r2, r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3344      	adds	r3, #68	@ 0x44
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	461c      	mov	r4, r3
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c506:	2201      	movs	r2, #1
 800c508:	9200      	str	r2, [sp, #0]
 800c50a:	4622      	mov	r2, r4
 800c50c:	f000 fbe2 	bl	800ccd4 <HAL_MDMA_Start_IT>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d007      	beq.n	800c526 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c51a:	f043 0204 	orr.w	r2, r3, #4
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e01b      	b.n	800c55e <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	4619      	mov	r1, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	3340      	adds	r3, #64	@ 0x40
 800c536:	461c      	mov	r4, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c53c:	2201      	movs	r2, #1
 800c53e:	9200      	str	r2, [sp, #0]
 800c540:	4622      	mov	r2, r4
 800c542:	f000 fbc7 	bl	800ccd4 <HAL_MDMA_Start_IT>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d007      	beq.n	800c55c <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c550:	f043 0204 	orr.w	r2, r3, #4
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	e000      	b.n	800c55e <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	bd90      	pop	{r4, r7, pc}
 800c566:	bf00      	nop
 800c568:	0800c877 	.word	0x0800c877
 800c56c:	0800ca65 	.word	0x0800ca65
 800c570:	0800c9a3 	.word	0x0800c9a3
 800c574:	0800cab5 	.word	0x0800cab5

0800c578 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c584:	f003 0303 	and.w	r3, r3, #3
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d125      	bne.n	800c5d8 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c596:	2b00      	cmp	r3, #0
 800c598:	d01e      	beq.n	800c5d8 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3304      	adds	r3, #4
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7fe fc5d 	bl	800ae60 <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	3304      	adds	r3, #4
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f7fe fe4c 	bl	800b250 <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c5c6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5d6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5de:	f003 0320 	and.w	r3, r3, #32
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d039      	beq.n	800c65a <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ea:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f022 0201 	bic.w	r2, r2, #1
 800c600:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c610:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c620:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d104      	bne.n	800c63a <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fc29 	bl	800ce8c <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c63e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c642:	b2db      	uxtb	r3, r3
 800c644:	2b02      	cmp	r3, #2
 800c646:	d105      	bne.n	800c654 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 fc1d 	bl	800ce8c <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800c652:	e002      	b.n	800c65a <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 f804 	bl	800c662 <JPEG_DMA_EndProcess>
}
 800c65a:	bf00      	nop
 800c65c:	3708      	adds	r7, #8
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b084      	sub	sp, #16
 800c666:	af00      	add	r7, sp, #0
 800c668:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c67a:	1ad2      	subs	r2, r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c688:	429a      	cmp	r2, r3
 800c68a:	d10a      	bne.n	800c6a2 <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	69d9      	ldr	r1, [r3, #28]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c694:	461a      	mov	r2, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7f5 f986 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6a8:	f003 0310 	and.w	r3, r3, #16
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d134      	bne.n	800c71a <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d00a      	beq.n	800c6ce <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	69d9      	ldr	r1, [r3, #28]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7f5 f970 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0201 	bic.w	r2, r2, #1
 800c6dc:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e2:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6e8:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f003 0303 	and.w	r3, r3, #3
 800c706:	2b02      	cmp	r3, #2
 800c708:	d103      	bne.n	800c712 <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7f5 f92c 	bl	8001968 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800c710:	e00c      	b.n	800c72c <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7fe fda7 	bl	800b266 <HAL_JPEG_EncodeCpltCallback>
}
 800c718:	e008      	b.n	800c72c <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c71e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c722:	2b00      	cmp	r3, #0
 800c724:	d102      	bne.n	800c72c <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f804 	bl	800c734 <JPEG_DMA_PollResidualData>
}
 800c72c:	bf00      	nop
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b086      	sub	sp, #24
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c73c:	2310      	movs	r3, #16
 800c73e:	617b      	str	r3, [r7, #20]
 800c740:	e04f      	b.n	800c7e2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d146      	bne.n	800c7dc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c754:	f003 0310 	and.w	r3, r3, #16
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d03f      	beq.n	800c7dc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c762:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	69da      	ldr	r2, [r3, #28]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c76c:	4413      	add	r3, r2
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	b2d2      	uxtb	r2, r2
 800c772:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	0a19      	lsrs	r1, r3, #8
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	69da      	ldr	r2, [r3, #28]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c780:	3301      	adds	r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	b2ca      	uxtb	r2, r1
 800c786:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	0c19      	lsrs	r1, r3, #16
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	69da      	ldr	r2, [r3, #28]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c794:	3302      	adds	r3, #2
 800c796:	4413      	add	r3, r2
 800c798:	b2ca      	uxtb	r2, r1
 800c79a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	0e19      	lsrs	r1, r3, #24
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	69da      	ldr	r2, [r3, #28]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7a8:	3303      	adds	r3, #3
 800c7aa:	4413      	add	r3, r2
 800c7ac:	b2ca      	uxtb	r2, r1
 800c7ae:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b4:	1d1a      	adds	r2, r3, #4
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d10a      	bne.n	800c7dc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	69d9      	ldr	r1, [r3, #28]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f7f5 f8e9 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	617b      	str	r3, [r7, #20]
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1ac      	bne.n	800c742 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ec:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7f4:	f003 0310 	and.w	r3, r3, #16
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d004      	beq.n	800c806 <JPEG_DMA_PollResidualData+0xd2>
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d133      	bne.n	800c86e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f022 0201 	bic.w	r2, r2, #1
 800c814:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00a      	beq.n	800c834 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	69d9      	ldr	r1, [r3, #28]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c826:	461a      	mov	r2, r3
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f7f5 f8bd 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2200      	movs	r2, #0
 800c832:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c838:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c83e:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d103      	bne.n	800c868 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7f5 f881 	bl	8001968 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800c866:	e002      	b.n	800c86e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f7fe fcfc 	bl	800b266 <HAL_JPEG_EncodeCpltCallback>
}
 800c86e:	bf00      	nop
 800c870:	3718      	adds	r7, #24
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800c876:	b590      	push	{r4, r7, lr}
 800c878:	b087      	sub	sp, #28
 800c87a:	af02      	add	r7, sp, #8
 800c87c:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c882:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c892:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c898:	f248 030c 	movw	r3, #32780	@ 0x800c
 800c89c:	4013      	ands	r3, r2
 800c89e:	2b0c      	cmp	r3, #12
 800c8a0:	d17c      	bne.n	800c99c <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a8:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	695b      	ldr	r3, [r3, #20]
 800c8b4:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c8b8:	1ad2      	subs	r2, r2, r3
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7fe fcd8 	bl	800b27a <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d81f      	bhi.n	800c914 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10d      	bne.n	800c8f6 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8de:	f043 0204 	orr.w	r2, r3, #4
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	2206      	movs	r2, #6
 800c8ea:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800c8ee:	68f8      	ldr	r0, [r7, #12]
 800c8f0:	f7f5 f84a 	bl	8001988 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800c8f4:	e052      	b.n	800c99c <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8fe:	68b9      	ldr	r1, [r7, #8]
 800c900:	fbb3 f1f1 	udiv	r1, r3, r1
 800c904:	68b8      	ldr	r0, [r7, #8]
 800c906:	fb00 f101 	mul.w	r1, r0, r1
 800c90a:	1a5b      	subs	r3, r3, r1
 800c90c:	1ad2      	subs	r2, r2, r3
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	629a      	str	r2, [r3, #40]	@ 0x28
 800c912:	e010      	b.n	800c936 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d00c      	beq.n	800c936 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c920:	f003 0303 	and.w	r3, r3, #3
 800c924:	2b00      	cmp	r3, #0
 800c926:	d006      	beq.n	800c936 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92c:	089b      	lsrs	r3, r3, #2
 800c92e:	3301      	adds	r3, #1
 800c930:	009a      	lsls	r2, r3, #2
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c93a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d124      	bne.n	800c98c <JPEG_MDMAInCpltCallback+0x116>
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c946:	2b00      	cmp	r3, #0
 800c948:	d020      	beq.n	800c98c <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	699b      	ldr	r3, [r3, #24]
 800c952:	4619      	mov	r1, r3
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3340      	adds	r3, #64	@ 0x40
 800c95a:	461c      	mov	r4, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c960:	2201      	movs	r2, #1
 800c962:	9200      	str	r2, [sp, #0]
 800c964:	4622      	mov	r2, r4
 800c966:	f000 f9b5 	bl	800ccd4 <HAL_MDMA_Start_IT>
 800c96a:	4603      	mov	r3, r0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d00d      	beq.n	800c98c <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c974:	f043 0204 	orr.w	r2, r3, #4
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2206      	movs	r2, #6
 800c980:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f7f4 ffff 	bl	8001988 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800c98a:	e007      	b.n	800c99c <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c99a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd90      	pop	{r4, r7, pc}

0800c9a2 <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800c9a2:	b590      	push	{r4, r7, lr}
 800c9a4:	b087      	sub	sp, #28
 800c9a6:	af02      	add	r7, sp, #8
 800c9a8:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ae:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800c9be:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c9c4:	f248 030c 	movw	r3, #32780	@ 0x800c
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	2b0c      	cmp	r3, #12
 800c9cc:	d147      	bne.n	800ca5e <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d4:	f003 0320 	and.w	r3, r3, #32
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d138      	bne.n	800ca4e <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800c9ea:	1ad2      	subs	r2, r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	69d9      	ldr	r1, [r3, #28]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	68f8      	ldr	r0, [r7, #12]
 800c9fc:	f7f4 ffd4 	bl	80019a8 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d120      	bne.n	800ca4e <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3344      	adds	r3, #68	@ 0x44
 800ca16:	4619      	mov	r1, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	461c      	mov	r4, r3
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca22:	2201      	movs	r2, #1
 800ca24:	9200      	str	r2, [sp, #0]
 800ca26:	4622      	mov	r2, r4
 800ca28:	f000 f954 	bl	800ccd4 <HAL_MDMA_Start_IT>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00d      	beq.n	800ca4e <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca36:	f043 0204 	orr.w	r2, r3, #4
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2206      	movs	r2, #6
 800ca42:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f7f4 ff9e 	bl	8001988 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800ca4c:	e007      	b.n	800ca5e <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ca5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd90      	pop	{r4, r7, pc}

0800ca64 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca70:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f022 0201 	bic.w	r2, r2, #1
 800ca80:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ca90:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca9e:	f043 0204 	orr.w	r2, r3, #4
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7f4 ff6e 	bl	8001988 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac0:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cac6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f7ff fdc7 	bl	800c662 <JPEG_DMA_EndProcess>
  }
}
 800cad4:	bf00      	nop
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800cadc:	b480      	push	{r7}
 800cade:	b08b      	sub	sp, #44	@ 0x2c
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3350      	adds	r3, #80	@ 0x50
 800caee:	61bb      	str	r3, [r7, #24]

  i = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800caf4:	e042      	b.n	800cb7c <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800cafc:	2300      	movs	r3, #0
 800cafe:	61fb      	str	r3, [r7, #28]
 800cb00:	e033      	b.n	800cb6a <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	697a      	ldr	r2, [r7, #20]
 800cb08:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d103      	bne.n	800cb1e <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb18:	3364      	adds	r3, #100	@ 0x64
 800cb1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb1c:	e022      	b.n	800cb64 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	2264      	movs	r2, #100	@ 0x64
 800cb22:	fb02 f303 	mul.w	r3, r2, r3
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cb2a:	6a38      	ldr	r0, [r7, #32]
 800cb2c:	69f9      	ldr	r1, [r7, #28]
 800cb2e:	4401      	add	r1, r0
 800cb30:	4818      	ldr	r0, [pc, #96]	@ (800cb94 <JPEG_GetQuality+0xb8>)
 800cb32:	5c41      	ldrb	r1, [r0, r1]
 800cb34:	440a      	add	r2, r1
 800cb36:	7812      	ldrb	r2, [r2, #0]
 800cb38:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb3c:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	2b64      	cmp	r3, #100	@ 0x64
 800cb42:	d807      	bhi.n	800cb54 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb4e:	4413      	add	r3, r2
 800cb50:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb52:	e007      	b.n	800cb64 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800cb54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb60:	4413      	add	r3, r2
 800cb62:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	3301      	adds	r3, #1
 800cb68:	61fb      	str	r3, [r7, #28]
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	2b03      	cmp	r3, #3
 800cb6e:	d9c8      	bls.n	800cb02 <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	3304      	adds	r3, #4
 800cb74:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	3304      	adds	r3, #4
 800cb7a:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	2b3c      	cmp	r3, #60	@ 0x3c
 800cb80:	d9b9      	bls.n	800caf6 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800cb82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb84:	099b      	lsrs	r3, r3, #6
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	372c      	adds	r7, #44	@ 0x2c
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	0801db34 	.word	0x0801db34

0800cb98 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800cba0:	f7f6 fcd4 	bl	800354c <HAL_GetTick>
 800cba4:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d101      	bne.n	800cbb0 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	e03b      	b.n	800cc28 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2202      	movs	r2, #2
 800cbbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0201 	bic.w	r2, r2, #1
 800cbce:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cbd0:	e00f      	b.n	800cbf2 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800cbd2:	f7f6 fcbb 	bl	800354c <HAL_GetTick>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	1ad3      	subs	r3, r2, r3
 800cbdc:	2b05      	cmp	r3, #5
 800cbde:	d908      	bls.n	800cbf2 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2240      	movs	r2, #64	@ 0x40
 800cbe4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2203      	movs	r2, #3
 800cbea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e01a      	b.n	800cc28 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1e8      	bne.n	800cbd2 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 fb2f 	bl	800d264 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2201      	movs	r2, #1
 800cc22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b087      	sub	sp, #28
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	60f8      	str	r0, [r7, #12]
 800cc38:	60b9      	str	r1, [r7, #8]
 800cc3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d101      	bne.n	800cc4a <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e03e      	b.n	800ccc8 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cc50:	2b01      	cmp	r3, #1
 800cc52:	d101      	bne.n	800cc58 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800cc54:	2302      	movs	r3, #2
 800cc56:	e037      	b.n	800ccc8 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d126      	bne.n	800ccba <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	691b      	ldr	r3, [r3, #16]
 800cc72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d11c      	bne.n	800ccb4 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	687a      	ldr	r2, [r7, #4]
 800cc88:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d108      	bne.n	800cca2 <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	691a      	ldr	r2, [r3, #16]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800cc9e:	611a      	str	r2, [r3, #16]
 800cca0:	e00d      	b.n	800ccbe <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	691a      	ldr	r2, [r3, #16]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ccb0:	611a      	str	r2, [r3, #16]
 800ccb2:	e004      	b.n	800ccbe <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	75fb      	strb	r3, [r7, #23]
 800ccb8:	e001      	b.n	800ccbe <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ccc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	371c      	adds	r7, #28
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af02      	add	r7, sp, #8
 800ccda:	60f8      	str	r0, [r7, #12]
 800ccdc:	60b9      	str	r1, [r7, #8]
 800ccde:	607a      	str	r2, [r7, #4]
 800cce0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e070      	b.n	800cdce <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d101      	bne.n	800ccfa <HAL_MDMA_Start_IT+0x26>
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	e069      	b.n	800cdce <HAL_MDMA_Start_IT+0xfa>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd08:	b2db      	uxtb	r3, r3
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d158      	bne.n	800cdc0 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2202      	movs	r2, #2
 800cd12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	68da      	ldr	r2, [r3, #12]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f022 0201 	bic.w	r2, r2, #1
 800cd2a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800cd2c:	69bb      	ldr	r3, [r7, #24]
 800cd2e:	9300      	str	r3, [sp, #0]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	68b9      	ldr	r1, [r7, #8]
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 fa24 	bl	800d184 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	68da      	ldr	r2, [r3, #12]
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f042 0206 	orr.w	r2, r2, #6
 800cd4a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d007      	beq.n	800cd64 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68da      	ldr	r2, [r3, #12]
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f042 0210 	orr.w	r2, r2, #16
 800cd62:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d007      	beq.n	800cd7c <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68da      	ldr	r2, [r3, #12]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f042 0208 	orr.w	r2, r2, #8
 800cd7a:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d007      	beq.n	800cd94 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f042 0220 	orr.w	r2, r2, #32
 800cd92:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f042 0201 	orr.w	r2, r2, #1
 800cda2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	685b      	ldr	r3, [r3, #4]
 800cda8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cdac:	d10e      	bne.n	800cdcc <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68da      	ldr	r2, [r3, #12]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800cdbc:	60da      	str	r2, [r3, #12]
 800cdbe:	e005      	b.n	800cdcc <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800cdc8:	2302      	movs	r3, #2
 800cdca:	e000      	b.n	800cdce <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b084      	sub	sp, #16
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
 800cdde:	f7f6 fbb5 	bl	800354c <HAL_GetTick>
 800cde2:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e04a      	b.n	800ce84 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d008      	beq.n	800ce0c <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2280      	movs	r2, #128	@ 0x80
 800cdfe:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e03b      	b.n	800ce84 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68da      	ldr	r2, [r3, #12]
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800ce1a:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	68da      	ldr	r2, [r3, #12]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f022 0201 	bic.w	r2, r2, #1
 800ce2a:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ce2c:	e016      	b.n	800ce5c <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ce2e:	f7f6 fb8d 	bl	800354c <HAL_GetTick>
 800ce32:	4602      	mov	r2, r0
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	2b05      	cmp	r3, #5
 800ce3a:	d90f      	bls.n	800ce5c <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ce40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2203      	movs	r2, #3
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        return HAL_ERROR;
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e013      	b.n	800ce84 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	f003 0301 	and.w	r3, r3, #1
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1e1      	bne.n	800ce2e <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	221f      	movs	r2, #31
 800ce70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2200      	movs	r2, #0
 800ce76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

  return HAL_OK;
 800ce82:	2300      	movs	r3, #0
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e017      	b.n	800cece <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d004      	beq.n	800ceb4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2280      	movs	r2, #128	@ 0x80
 800ceae:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e00c      	b.n	800cece <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2204      	movs	r2, #4
 800ceb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	68da      	ldr	r2, [r3, #12]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f022 0201 	bic.w	r2, r2, #1
 800ceca:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
	...

0800cedc <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800cee8:	4b91      	ldr	r3, [pc, #580]	@ (800d130 <HAL_MDMA_IRQHandler+0x254>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a91      	ldr	r2, [pc, #580]	@ (800d134 <HAL_MDMA_IRQHandler+0x258>)
 800ceee:	fba2 2303 	umull	r2, r3, r2, r3
 800cef2:	0a9b      	lsrs	r3, r3, #10
 800cef4:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	4b8e      	ldr	r3, [pc, #568]	@ (800d138 <HAL_MDMA_IRQHandler+0x25c>)
 800cefe:	4413      	add	r3, r2
 800cf00:	099b      	lsrs	r3, r3, #6
 800cf02:	f003 031f 	and.w	r3, r3, #31
 800cf06:	2201      	movs	r2, #1
 800cf08:	fa02 f303 	lsl.w	r3, r2, r3
 800cf0c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800cf0e:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	4013      	ands	r3, r2
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	f000 812d 	beq.w	800d178 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d054      	beq.n	800cfd6 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d04d      	beq.n	800cfd6 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68da      	ldr	r2, [r3, #12]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f022 0202 	bic.w	r2, r2, #2
 800cf48:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d106      	bne.n	800cf6a <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf60:	f043 0201 	orr.w	r2, r3, #1
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	669a      	str	r2, [r3, #104]	@ 0x68
 800cf68:	e005      	b.n	800cf76 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf6e:	f043 0202 	orr.w	r2, r3, #2
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d005      	beq.n	800cf8c <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf84:	f043 0204 	orr.w	r2, r3, #4
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d005      	beq.n	800cfa2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cf9a:	f043 0208 	orr.w	r2, r3, #8
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d005      	beq.n	800cfb8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfb0:	f043 0210 	orr.w	r2, r3, #16
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d005      	beq.n	800cfce <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cfc6:	f043 0220 	orr.w	r2, r3, #32
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0310 	and.w	r3, r3, #16
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d012      	beq.n	800d00a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	68db      	ldr	r3, [r3, #12]
 800cfea:	f003 0320 	and.w	r3, r3, #32
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d00b      	beq.n	800d00a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2210      	movs	r2, #16
 800cff8:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b00      	cmp	r3, #0
 800d016:	d012      	beq.n	800d03e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
 800d01e:	f003 0310 	and.w	r3, r3, #16
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00b      	beq.n	800d03e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2208      	movs	r2, #8
 800d02c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d032:	2b00      	cmp	r3, #0
 800d034:	d003      	beq.n	800d03e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 0304 	and.w	r3, r3, #4
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d012      	beq.n	800d072 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	68db      	ldr	r3, [r3, #12]
 800d052:	f003 0308 	and.w	r3, r3, #8
 800d056:	2b00      	cmp	r3, #0
 800d058:	d00b      	beq.n	800d072 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2204      	movs	r2, #4
 800d060:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 0302 	and.w	r3, r3, #2
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d039      	beq.n	800d0f4 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68db      	ldr	r3, [r3, #12]
 800d086:	f003 0304 	and.w	r3, r3, #4
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d032      	beq.n	800d0f4 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	68da      	ldr	r2, [r3, #12]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800d09c:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b04      	cmp	r3, #4
 800d0a8:	d110      	bne.n	800d0cc <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d05c      	beq.n	800d17c <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	4798      	blx	r3
        }
        return;
 800d0ca:	e057      	b.n	800d17c <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2202      	movs	r2, #2
 800d0d2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d040      	beq.n	800d17e <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2204      	movs	r2, #4
 800d100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68da      	ldr	r2, [r3, #12]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	f022 0201 	bic.w	r2, r2, #1
 800d112:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	3301      	adds	r3, #1
 800d118:	60bb      	str	r3, [r7, #8]
 800d11a:	697a      	ldr	r2, [r7, #20]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d30d      	bcc.n	800d13c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1f2      	bne.n	800d114 <HAL_MDMA_IRQHandler+0x238>
 800d12e:	e006      	b.n	800d13e <HAL_MDMA_IRQHandler+0x262>
 800d130:	24000240 	.word	0x24000240
 800d134:	1b4e81b5 	.word	0x1b4e81b5
 800d138:	adffffc0 	.word	0xadffffc0
        break;
 800d13c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	f003 0301 	and.w	r3, r3, #1
 800d150:	2b00      	cmp	r3, #0
 800d152:	d004      	beq.n	800d15e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2203      	movs	r2, #3
 800d158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800d15c:	e003      	b.n	800d166 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d007      	beq.n	800d17e <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	4798      	blx	r3
 800d176:	e002      	b.n	800d17e <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800d178:	bf00      	nop
 800d17a:	e000      	b.n	800d17e <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800d17c:	bf00      	nop
    }
  }
}
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800d184:	b480      	push	{r7}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	60b9      	str	r1, [r7, #8]
 800d18e:	607a      	str	r2, [r7, #4]
 800d190:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	695a      	ldr	r2, [r3, #20]
 800d198:	4b31      	ldr	r3, [pc, #196]	@ (800d260 <MDMA_SetConfig+0xdc>)
 800d19a:	4013      	ands	r3, r2
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	6812      	ldr	r2, [r2, #0]
 800d1a6:	430b      	orrs	r3, r1
 800d1a8:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	051a      	lsls	r2, r3, #20
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	430a      	orrs	r2, r1
 800d1c0:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	221f      	movs	r2, #31
 800d1c8:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	68ba      	ldr	r2, [r7, #8]
 800d1d8:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d1e0:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1e8:	d002      	beq.n	800d1f0 <MDMA_SetConfig+0x6c>
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800d1fe:	629a      	str	r2, [r3, #40]	@ 0x28
 800d200:	e007      	b.n	800d212 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800d218:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d220:	d002      	beq.n	800d228 <MDMA_SetConfig+0xa4>
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d108      	bne.n	800d23a <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800d236:	629a      	str	r2, [r3, #40]	@ 0x28
 800d238:	e007      	b.n	800d24a <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d248:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d254:	bf00      	nop
 800d256:	371c      	adds	r7, #28
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr
 800d260:	fffe0000 	.word	0xfffe0000

0800d264 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800d264:	b480      	push	{r7}
 800d266:	b085      	sub	sp, #20
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	68d9      	ldr	r1, [r3, #12]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	691a      	ldr	r2, [r3, #16]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	430a      	orrs	r2, r1
 800d27a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	695a      	ldr	r2, [r3, #20]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	699b      	ldr	r3, [r3, #24]
 800d284:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d28a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6a1b      	ldr	r3, [r3, #32]
 800d290:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800d296:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d29c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800d2a2:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800d2ac:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800d2b8:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800d2ba:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2c4:	d107      	bne.n	800d2d6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	691a      	ldr	r2, [r3, #16]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800d2d4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	da11      	bge.n	800d30a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	695a      	ldr	r2, [r3, #20]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800d2f4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2fa:	425b      	negs	r3, r3
 800d2fc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	b292      	uxth	r2, r2
 800d306:	621a      	str	r2, [r3, #32]
 800d308:	e006      	b.n	800d318 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d30e:	461a      	mov	r2, r3
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	b292      	uxth	r2, r2
 800d316:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	da15      	bge.n	800d34c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	695a      	ldr	r2, [r3, #20]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800d32e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d334:	425b      	negs	r3, r3
 800d336:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6a19      	ldr	r1, [r3, #32]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	041a      	lsls	r2, r3, #16
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	430a      	orrs	r2, r1
 800d348:	621a      	str	r2, [r3, #32]
 800d34a:	e009      	b.n	800d360 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6a19      	ldr	r1, [r3, #32]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d356:	041a      	lsls	r2, r3, #16
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	430a      	orrs	r2, r1
 800d35e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d368:	d006      	beq.n	800d378 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	b2d2      	uxtb	r2, r2
 800d374:	629a      	str	r2, [r3, #40]	@ 0x28
 800d376:	e003      	b.n	800d380 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2200      	movs	r2, #0
 800d37e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2200      	movs	r2, #0
 800d386:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800d388:	bf00      	nop
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr

0800d394 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af02      	add	r7, sp, #8
 800d39a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d101      	bne.n	800d3a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e0fe      	b.n	800d5a4 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d106      	bne.n	800d3c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f00c fef6 	bl	801a1ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f008 fd58 	bl	8015e82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6818      	ldr	r0, [r3, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7c1a      	ldrb	r2, [r3, #16]
 800d3da:	f88d 2000 	strb.w	r2, [sp]
 800d3de:	3304      	adds	r3, #4
 800d3e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3e2:	f008 fc29 	bl	8015c38 <USB_CoreInit>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d005      	beq.n	800d3f8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e0d5      	b.n	800d5a4 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	4618      	mov	r0, r3
 800d400:	f008 fd50 	bl	8015ea4 <USB_SetCurrentMode>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d005      	beq.n	800d416 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2202      	movs	r2, #2
 800d40e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	e0c6      	b.n	800d5a4 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]
 800d41a:	e04a      	b.n	800d4b2 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d41c:	7bfa      	ldrb	r2, [r7, #15]
 800d41e:	6879      	ldr	r1, [r7, #4]
 800d420:	4613      	mov	r3, r2
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	4413      	add	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	440b      	add	r3, r1
 800d42a:	3315      	adds	r3, #21
 800d42c:	2201      	movs	r2, #1
 800d42e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d430:	7bfa      	ldrb	r2, [r7, #15]
 800d432:	6879      	ldr	r1, [r7, #4]
 800d434:	4613      	mov	r3, r2
 800d436:	00db      	lsls	r3, r3, #3
 800d438:	4413      	add	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	440b      	add	r3, r1
 800d43e:	3314      	adds	r3, #20
 800d440:	7bfa      	ldrb	r2, [r7, #15]
 800d442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d444:	7bfa      	ldrb	r2, [r7, #15]
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	b298      	uxth	r0, r3
 800d44a:	6879      	ldr	r1, [r7, #4]
 800d44c:	4613      	mov	r3, r2
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	4413      	add	r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	440b      	add	r3, r1
 800d456:	332e      	adds	r3, #46	@ 0x2e
 800d458:	4602      	mov	r2, r0
 800d45a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d45c:	7bfa      	ldrb	r2, [r7, #15]
 800d45e:	6879      	ldr	r1, [r7, #4]
 800d460:	4613      	mov	r3, r2
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	4413      	add	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	440b      	add	r3, r1
 800d46a:	3318      	adds	r3, #24
 800d46c:	2200      	movs	r2, #0
 800d46e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d470:	7bfa      	ldrb	r2, [r7, #15]
 800d472:	6879      	ldr	r1, [r7, #4]
 800d474:	4613      	mov	r3, r2
 800d476:	00db      	lsls	r3, r3, #3
 800d478:	4413      	add	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	440b      	add	r3, r1
 800d47e:	331c      	adds	r3, #28
 800d480:	2200      	movs	r2, #0
 800d482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d484:	7bfa      	ldrb	r2, [r7, #15]
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	4613      	mov	r3, r2
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	4413      	add	r3, r2
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	440b      	add	r3, r1
 800d492:	3320      	adds	r3, #32
 800d494:	2200      	movs	r2, #0
 800d496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d498:	7bfa      	ldrb	r2, [r7, #15]
 800d49a:	6879      	ldr	r1, [r7, #4]
 800d49c:	4613      	mov	r3, r2
 800d49e:	00db      	lsls	r3, r3, #3
 800d4a0:	4413      	add	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	3324      	adds	r3, #36	@ 0x24
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d4ac:	7bfb      	ldrb	r3, [r7, #15]
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	73fb      	strb	r3, [r7, #15]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	791b      	ldrb	r3, [r3, #4]
 800d4b6:	7bfa      	ldrb	r2, [r7, #15]
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d3af      	bcc.n	800d41c <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d4bc:	2300      	movs	r3, #0
 800d4be:	73fb      	strb	r3, [r7, #15]
 800d4c0:	e044      	b.n	800d54c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d4c2:	7bfa      	ldrb	r2, [r7, #15]
 800d4c4:	6879      	ldr	r1, [r7, #4]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	00db      	lsls	r3, r3, #3
 800d4ca:	4413      	add	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	440b      	add	r3, r1
 800d4d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d4d8:	7bfa      	ldrb	r2, [r7, #15]
 800d4da:	6879      	ldr	r1, [r7, #4]
 800d4dc:	4613      	mov	r3, r2
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	4413      	add	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	440b      	add	r3, r1
 800d4e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800d4ea:	7bfa      	ldrb	r2, [r7, #15]
 800d4ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d4ee:	7bfa      	ldrb	r2, [r7, #15]
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	4413      	add	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	440b      	add	r3, r1
 800d4fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800d500:	2200      	movs	r2, #0
 800d502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d504:	7bfa      	ldrb	r2, [r7, #15]
 800d506:	6879      	ldr	r1, [r7, #4]
 800d508:	4613      	mov	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	440b      	add	r3, r1
 800d512:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800d516:	2200      	movs	r2, #0
 800d518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d51a:	7bfa      	ldrb	r2, [r7, #15]
 800d51c:	6879      	ldr	r1, [r7, #4]
 800d51e:	4613      	mov	r3, r2
 800d520:	00db      	lsls	r3, r3, #3
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	440b      	add	r3, r1
 800d528:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d52c:	2200      	movs	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d530:	7bfa      	ldrb	r2, [r7, #15]
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	4613      	mov	r3, r2
 800d536:	00db      	lsls	r3, r3, #3
 800d538:	4413      	add	r3, r2
 800d53a:	009b      	lsls	r3, r3, #2
 800d53c:	440b      	add	r3, r1
 800d53e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d542:	2200      	movs	r2, #0
 800d544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d546:	7bfb      	ldrb	r3, [r7, #15]
 800d548:	3301      	adds	r3, #1
 800d54a:	73fb      	strb	r3, [r7, #15]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	791b      	ldrb	r3, [r3, #4]
 800d550:	7bfa      	ldrb	r2, [r7, #15]
 800d552:	429a      	cmp	r2, r3
 800d554:	d3b5      	bcc.n	800d4c2 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6818      	ldr	r0, [r3, #0]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7c1a      	ldrb	r2, [r3, #16]
 800d55e:	f88d 2000 	strb.w	r2, [sp]
 800d562:	3304      	adds	r3, #4
 800d564:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d566:	f008 fce9 	bl	8015f3c <USB_DevInit>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d005      	beq.n	800d57c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800d578:	2301      	movs	r3, #1
 800d57a:	e013      	b.n	800d5a4 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2201      	movs	r2, #1
 800d586:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	7b1b      	ldrb	r3, [r3, #12]
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d102      	bne.n	800d598 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f001 f96e 	bl	800e874 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f009 fd2c 	bl	8016ffa <USB_DevDisconnect>

  return HAL_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d101      	bne.n	800d5c8 <HAL_PCD_Start+0x1c>
 800d5c4:	2302      	movs	r3, #2
 800d5c6:	e022      	b.n	800d60e <HAL_PCD_Start+0x62>
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d009      	beq.n	800d5f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d105      	bne.n	800d5f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f008 fc33 	bl	8015e60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4618      	mov	r0, r3
 800d600:	f009 fcda 	bl	8016fb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d616:	b590      	push	{r4, r7, lr}
 800d618:	b08d      	sub	sp, #52	@ 0x34
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d624:	6a3b      	ldr	r3, [r7, #32]
 800d626:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f009 fd98 	bl	8017162 <USB_GetMode>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	f040 84b9 	bne.w	800dfac <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4618      	mov	r0, r3
 800d640:	f009 fcfc 	bl	801703c <USB_ReadInterrupts>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	f000 84af 	beq.w	800dfaa <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	0a1b      	lsrs	r3, r3, #8
 800d656:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4618      	mov	r0, r3
 800d666:	f009 fce9 	bl	801703c <USB_ReadInterrupts>
 800d66a:	4603      	mov	r3, r0
 800d66c:	f003 0302 	and.w	r3, r3, #2
 800d670:	2b02      	cmp	r3, #2
 800d672:	d107      	bne.n	800d684 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	695a      	ldr	r2, [r3, #20]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f002 0202 	and.w	r2, r2, #2
 800d682:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4618      	mov	r0, r3
 800d68a:	f009 fcd7 	bl	801703c <USB_ReadInterrupts>
 800d68e:	4603      	mov	r3, r0
 800d690:	f003 0310 	and.w	r3, r3, #16
 800d694:	2b10      	cmp	r3, #16
 800d696:	d161      	bne.n	800d75c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	699a      	ldr	r2, [r3, #24]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f022 0210 	bic.w	r2, r2, #16
 800d6a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800d6a8:	6a3b      	ldr	r3, [r7, #32]
 800d6aa:	6a1b      	ldr	r3, [r3, #32]
 800d6ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	f003 020f 	and.w	r2, r3, #15
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	4413      	add	r3, r2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d6ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d6d2:	d124      	bne.n	800d71e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d6d4:	69ba      	ldr	r2, [r7, #24]
 800d6d6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800d6da:	4013      	ands	r3, r2
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d035      	beq.n	800d74c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	091b      	lsrs	r3, r3, #4
 800d6e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d6ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	6a38      	ldr	r0, [r7, #32]
 800d6f4:	f009 fb0e 	bl	8016d14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	091b      	lsrs	r3, r3, #4
 800d700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d704:	441a      	add	r2, r3
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	695a      	ldr	r2, [r3, #20]
 800d70e:	69bb      	ldr	r3, [r7, #24]
 800d710:	091b      	lsrs	r3, r3, #4
 800d712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d716:	441a      	add	r2, r3
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	615a      	str	r2, [r3, #20]
 800d71c:	e016      	b.n	800d74c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800d724:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800d728:	d110      	bne.n	800d74c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d730:	2208      	movs	r2, #8
 800d732:	4619      	mov	r1, r3
 800d734:	6a38      	ldr	r0, [r7, #32]
 800d736:	f009 faed 	bl	8016d14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	695a      	ldr	r2, [r3, #20]
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	091b      	lsrs	r3, r3, #4
 800d742:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d746:	441a      	add	r2, r3
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	699a      	ldr	r2, [r3, #24]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f042 0210 	orr.w	r2, r2, #16
 800d75a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	4618      	mov	r0, r3
 800d762:	f009 fc6b 	bl	801703c <USB_ReadInterrupts>
 800d766:	4603      	mov	r3, r0
 800d768:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d76c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800d770:	f040 80a7 	bne.w	800d8c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800d774:	2300      	movs	r3, #0
 800d776:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4618      	mov	r0, r3
 800d77e:	f009 fc70 	bl	8017062 <USB_ReadDevAllOutEpInterrupt>
 800d782:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800d784:	e099      	b.n	800d8ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800d786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d788:	f003 0301 	and.w	r3, r3, #1
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	f000 808e 	beq.w	800d8ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f009 fc94 	bl	80170ca <USB_ReadDevOutEPInterrupt>
 800d7a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00c      	beq.n	800d7c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800d7ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b0:	015a      	lsls	r2, r3, #5
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	2301      	movs	r3, #1
 800d7be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800d7c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 fed0 	bl	800e568 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	f003 0308 	and.w	r3, r3, #8
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00c      	beq.n	800d7ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800d7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d4:	015a      	lsls	r2, r3, #5
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	4413      	add	r3, r2
 800d7da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d7de:	461a      	mov	r2, r3
 800d7e0:	2308      	movs	r3, #8
 800d7e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800d7e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 ffa6 	bl	800e738 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	f003 0310 	and.w	r3, r3, #16
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d008      	beq.n	800d808 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800d7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	69fb      	ldr	r3, [r7, #28]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d802:	461a      	mov	r2, r3
 800d804:	2310      	movs	r3, #16
 800d806:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	f003 0302 	and.w	r3, r3, #2
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d030      	beq.n	800d874 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d81a:	2b80      	cmp	r3, #128	@ 0x80
 800d81c:	d109      	bne.n	800d832 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d824:	685b      	ldr	r3, [r3, #4]
 800d826:	69fa      	ldr	r2, [r7, #28]
 800d828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d82c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d830:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800d832:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d834:	4613      	mov	r3, r2
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	4413      	add	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	4413      	add	r3, r2
 800d844:	3304      	adds	r3, #4
 800d846:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	78db      	ldrb	r3, [r3, #3]
 800d84c:	2b01      	cmp	r3, #1
 800d84e:	d108      	bne.n	800d862 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	2200      	movs	r2, #0
 800d854:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800d856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f00c fdcb 	bl	801a3f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d864:	015a      	lsls	r2, r3, #5
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	4413      	add	r3, r2
 800d86a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d86e:	461a      	mov	r2, r3
 800d870:	2302      	movs	r3, #2
 800d872:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	f003 0320 	and.w	r3, r3, #32
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d008      	beq.n	800d890 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d880:	015a      	lsls	r2, r3, #5
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	4413      	add	r3, r2
 800d886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d88a:	461a      	mov	r2, r3
 800d88c:	2320      	movs	r3, #32
 800d88e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d896:	2b00      	cmp	r3, #0
 800d898:	d009      	beq.n	800d8ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800d89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89c:	015a      	lsls	r2, r3, #5
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	4413      	add	r3, r2
 800d8a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d8ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800d8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8b6:	085b      	lsrs	r3, r3, #1
 800d8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800d8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	f47f af62 	bne.w	800d786 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f009 fbb8 	bl	801703c <USB_ReadInterrupts>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d8d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d8d6:	f040 80db 	bne.w	800da90 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f009 fbd9 	bl	8017096 <USB_ReadDevAllInEpInterrupt>
 800d8e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800d8ea:	e0cd      	b.n	800da88 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800d8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8ee:	f003 0301 	and.w	r3, r3, #1
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 80c2 	beq.w	800da7c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8fe:	b2d2      	uxtb	r2, r2
 800d900:	4611      	mov	r1, r2
 800d902:	4618      	mov	r0, r3
 800d904:	f009 fbff 	bl	8017106 <USB_ReadDevInEPInterrupt>
 800d908:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	f003 0301 	and.w	r3, r3, #1
 800d910:	2b00      	cmp	r3, #0
 800d912:	d057      	beq.n	800d9c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d916:	f003 030f 	and.w	r3, r3, #15
 800d91a:	2201      	movs	r2, #1
 800d91c:	fa02 f303 	lsl.w	r3, r2, r3
 800d920:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	43db      	mvns	r3, r3
 800d92e:	69f9      	ldr	r1, [r7, #28]
 800d930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d934:	4013      	ands	r3, r2
 800d936:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800d938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d93a:	015a      	lsls	r2, r3, #5
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	4413      	add	r3, r2
 800d940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d944:	461a      	mov	r2, r3
 800d946:	2301      	movs	r3, #1
 800d948:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	799b      	ldrb	r3, [r3, #6]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d132      	bne.n	800d9b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d952:	6879      	ldr	r1, [r7, #4]
 800d954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d956:	4613      	mov	r3, r2
 800d958:	00db      	lsls	r3, r3, #3
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	440b      	add	r3, r1
 800d960:	3320      	adds	r3, #32
 800d962:	6819      	ldr	r1, [r3, #0]
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d968:	4613      	mov	r3, r2
 800d96a:	00db      	lsls	r3, r3, #3
 800d96c:	4413      	add	r3, r2
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4403      	add	r3, r0
 800d972:	331c      	adds	r3, #28
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4419      	add	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d97c:	4613      	mov	r3, r2
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	4413      	add	r3, r2
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4403      	add	r3, r0
 800d986:	3320      	adds	r3, #32
 800d988:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d113      	bne.n	800d9b8 <HAL_PCD_IRQHandler+0x3a2>
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d994:	4613      	mov	r3, r2
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	4413      	add	r3, r2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	440b      	add	r3, r1
 800d99e:	3324      	adds	r3, #36	@ 0x24
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d108      	bne.n	800d9b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6818      	ldr	r0, [r3, #0]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	2101      	movs	r1, #1
 800d9b4:	f009 fc08 	bl	80171c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	4619      	mov	r1, r3
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f00c fc95 	bl	801a2ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	f003 0308 	and.w	r3, r3, #8
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d008      	beq.n	800d9e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800d9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d0:	015a      	lsls	r2, r3, #5
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9da:	461a      	mov	r2, r3
 800d9dc:	2308      	movs	r3, #8
 800d9de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	f003 0310 	and.w	r3, r3, #16
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d008      	beq.n	800d9fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800d9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ec:	015a      	lsls	r2, r3, #5
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	4413      	add	r3, r2
 800d9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	2310      	movs	r3, #16
 800d9fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da02:	2b00      	cmp	r3, #0
 800da04:	d008      	beq.n	800da18 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800da06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da08:	015a      	lsls	r2, r3, #5
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	4413      	add	r3, r2
 800da0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da12:	461a      	mov	r2, r3
 800da14:	2340      	movs	r3, #64	@ 0x40
 800da16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	f003 0302 	and.w	r3, r3, #2
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d023      	beq.n	800da6a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800da22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da24:	6a38      	ldr	r0, [r7, #32]
 800da26:	f008 fbe7 	bl	80161f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800da2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da2c:	4613      	mov	r3, r2
 800da2e:	00db      	lsls	r3, r3, #3
 800da30:	4413      	add	r3, r2
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	3310      	adds	r3, #16
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	4413      	add	r3, r2
 800da3a:	3304      	adds	r3, #4
 800da3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	78db      	ldrb	r3, [r3, #3]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d108      	bne.n	800da58 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	2200      	movs	r2, #0
 800da4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800da4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4e:	b2db      	uxtb	r3, r3
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f00c fce2 	bl	801a41c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800da58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800da64:	461a      	mov	r2, r3
 800da66:	2302      	movs	r3, #2
 800da68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da70:	2b00      	cmp	r3, #0
 800da72:	d003      	beq.n	800da7c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800da74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fcea 	bl	800e450 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800da7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7e:	3301      	adds	r3, #1
 800da80:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	085b      	lsrs	r3, r3, #1
 800da86:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800da88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	f47f af2e 	bne.w	800d8ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4618      	mov	r0, r3
 800da96:	f009 fad1 	bl	801703c <USB_ReadInterrupts>
 800da9a:	4603      	mov	r3, r0
 800da9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800daa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800daa4:	d122      	bne.n	800daec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	69fa      	ldr	r2, [r7, #28]
 800dab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dab4:	f023 0301 	bic.w	r3, r3, #1
 800dab8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800dac0:	2b01      	cmp	r3, #1
 800dac2:	d108      	bne.n	800dad6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800dacc:	2100      	movs	r1, #0
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fef4 	bl	800e8bc <HAL_PCDEx_LPM_Callback>
 800dad4:	e002      	b.n	800dadc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f00c fc80 	bl	801a3dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	695a      	ldr	r2, [r3, #20]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800daea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4618      	mov	r0, r3
 800daf2:	f009 faa3 	bl	801703c <USB_ReadInterrupts>
 800daf6:	4603      	mov	r3, r0
 800daf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dafc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db00:	d112      	bne.n	800db28 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d102      	bne.n	800db18 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f00c fc3c 	bl	801a390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	695a      	ldr	r2, [r3, #20]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800db26:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f009 fa85 	bl	801703c <USB_ReadInterrupts>
 800db32:	4603      	mov	r3, r0
 800db34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db3c:	d121      	bne.n	800db82 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	695a      	ldr	r2, [r3, #20]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800db4c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800db54:	2b00      	cmp	r3, #0
 800db56:	d111      	bne.n	800db7c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2201      	movs	r2, #1
 800db5c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db66:	089b      	lsrs	r3, r3, #2
 800db68:	f003 020f 	and.w	r2, r3, #15
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800db72:	2101      	movs	r1, #1
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fea1 	bl	800e8bc <HAL_PCDEx_LPM_Callback>
 800db7a:	e002      	b.n	800db82 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f00c fc07 	bl	801a390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4618      	mov	r0, r3
 800db88:	f009 fa58 	bl	801703c <USB_ReadInterrupts>
 800db8c:	4603      	mov	r3, r0
 800db8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800db92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db96:	f040 80b7 	bne.w	800dd08 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dba0:	685b      	ldr	r3, [r3, #4]
 800dba2:	69fa      	ldr	r2, [r7, #28]
 800dba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dba8:	f023 0301 	bic.w	r3, r3, #1
 800dbac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2110      	movs	r1, #16
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f008 fb1f 	bl	80161f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dbba:	2300      	movs	r3, #0
 800dbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dbbe:	e046      	b.n	800dc4e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800dbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbc2:	015a      	lsls	r2, r3, #5
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbcc:	461a      	mov	r2, r3
 800dbce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dbd2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbd6:	015a      	lsls	r2, r3, #5
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	4413      	add	r3, r2
 800dbdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbe4:	0151      	lsls	r1, r2, #5
 800dbe6:	69fa      	ldr	r2, [r7, #28]
 800dbe8:	440a      	add	r2, r1
 800dbea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dbee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dbf2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800dbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf6:	015a      	lsls	r2, r3, #5
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc00:	461a      	mov	r2, r3
 800dc02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dc06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dc08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc0a:	015a      	lsls	r2, r3, #5
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	4413      	add	r3, r2
 800dc10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc18:	0151      	lsls	r1, r2, #5
 800dc1a:	69fa      	ldr	r2, [r7, #28]
 800dc1c:	440a      	add	r2, r1
 800dc1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dc26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800dc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2a:	015a      	lsls	r2, r3, #5
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	4413      	add	r3, r2
 800dc30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc38:	0151      	lsls	r1, r2, #5
 800dc3a:	69fa      	ldr	r2, [r7, #28]
 800dc3c:	440a      	add	r2, r1
 800dc3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dc42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dc46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	791b      	ldrb	r3, [r3, #4]
 800dc52:	461a      	mov	r2, r3
 800dc54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d3b2      	bcc.n	800dbc0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc60:	69db      	ldr	r3, [r3, #28]
 800dc62:	69fa      	ldr	r2, [r7, #28]
 800dc64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc68:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800dc6c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7bdb      	ldrb	r3, [r3, #15]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d016      	beq.n	800dca4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800dc76:	69fb      	ldr	r3, [r7, #28]
 800dc78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dc80:	69fa      	ldr	r2, [r7, #28]
 800dc82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc86:	f043 030b 	orr.w	r3, r3, #11
 800dc8a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc96:	69fa      	ldr	r2, [r7, #28]
 800dc98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc9c:	f043 030b 	orr.w	r3, r3, #11
 800dca0:	6453      	str	r3, [r2, #68]	@ 0x44
 800dca2:	e015      	b.n	800dcd0 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcaa:	695a      	ldr	r2, [r3, #20]
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	f242 032b 	movw	r3, #8235	@ 0x202b
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	69fa      	ldr	r2, [r7, #28]
 800dcc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcca:	f043 030b 	orr.w	r3, r3, #11
 800dcce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	69fa      	ldr	r2, [r7, #28]
 800dcda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dcde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800dce2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6818      	ldr	r0, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	f009 fa68 	bl	80171c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	695a      	ldr	r2, [r3, #20]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800dd06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f009 f995 	bl	801703c <USB_ReadInterrupts>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd1c:	d123      	bne.n	800dd66 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f009 fa2c 	bl	8017180 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f008 fadc 	bl	80162ea <USB_GetDevSpeed>
 800dd32:	4603      	mov	r3, r0
 800dd34:	461a      	mov	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681c      	ldr	r4, [r3, #0]
 800dd3e:	f001 fd9d 	bl	800f87c <HAL_RCC_GetHCLKFreq>
 800dd42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800dd48:	461a      	mov	r2, r3
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f007 ffe6 	bl	8015d1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f00c faf4 	bl	801a33e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	695a      	ldr	r2, [r3, #20]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800dd64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f009 f966 	bl	801703c <USB_ReadInterrupts>
 800dd70:	4603      	mov	r3, r0
 800dd72:	f003 0308 	and.w	r3, r3, #8
 800dd76:	2b08      	cmp	r3, #8
 800dd78:	d10a      	bne.n	800dd90 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800dd7a:	6878      	ldr	r0, [r7, #4]
 800dd7c:	f00c fad1 	bl	801a322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	695a      	ldr	r2, [r3, #20]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f002 0208 	and.w	r2, r2, #8
 800dd8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4618      	mov	r0, r3
 800dd96:	f009 f951 	bl	801703c <USB_ReadInterrupts>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dda0:	2b80      	cmp	r3, #128	@ 0x80
 800dda2:	d123      	bne.n	800ddec <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddb4:	e014      	b.n	800dde0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800ddb6:	6879      	ldr	r1, [r7, #4]
 800ddb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddba:	4613      	mov	r3, r2
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	4413      	add	r3, r2
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	440b      	add	r3, r1
 800ddc4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d105      	bne.n	800ddda <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ddce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 fb0a 	bl	800e3ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ddda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dddc:	3301      	adds	r3, #1
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	791b      	ldrb	r3, [r3, #4]
 800dde4:	461a      	mov	r2, r3
 800dde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d3e4      	bcc.n	800ddb6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f009 f923 	bl	801703c <USB_ReadInterrupts>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ddfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de00:	d13c      	bne.n	800de7c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800de02:	2301      	movs	r3, #1
 800de04:	627b      	str	r3, [r7, #36]	@ 0x24
 800de06:	e02b      	b.n	800de60 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800de08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0a:	015a      	lsls	r2, r3, #5
 800de0c:	69fb      	ldr	r3, [r7, #28]
 800de0e:	4413      	add	r3, r2
 800de10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800de18:	6879      	ldr	r1, [r7, #4]
 800de1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de1c:	4613      	mov	r3, r2
 800de1e:	00db      	lsls	r3, r3, #3
 800de20:	4413      	add	r3, r2
 800de22:	009b      	lsls	r3, r3, #2
 800de24:	440b      	add	r3, r1
 800de26:	3318      	adds	r3, #24
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d115      	bne.n	800de5a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800de2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800de30:	2b00      	cmp	r3, #0
 800de32:	da12      	bge.n	800de5a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de38:	4613      	mov	r3, r2
 800de3a:	00db      	lsls	r3, r3, #3
 800de3c:	4413      	add	r3, r2
 800de3e:	009b      	lsls	r3, r3, #2
 800de40:	440b      	add	r3, r1
 800de42:	3317      	adds	r3, #23
 800de44:	2201      	movs	r2, #1
 800de46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800de48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800de50:	b2db      	uxtb	r3, r3
 800de52:	4619      	mov	r1, r3
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f000 faca 	bl	800e3ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800de5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de5c:	3301      	adds	r3, #1
 800de5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	791b      	ldrb	r3, [r3, #4]
 800de64:	461a      	mov	r2, r3
 800de66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de68:	4293      	cmp	r3, r2
 800de6a:	d3cd      	bcc.n	800de08 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	695a      	ldr	r2, [r3, #20]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800de7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	f009 f8db 	bl	801703c <USB_ReadInterrupts>
 800de86:	4603      	mov	r3, r0
 800de88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800de8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800de90:	d156      	bne.n	800df40 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800de92:	2301      	movs	r3, #1
 800de94:	627b      	str	r3, [r7, #36]	@ 0x24
 800de96:	e045      	b.n	800df24 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800de98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800dea8:	6879      	ldr	r1, [r7, #4]
 800deaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deac:	4613      	mov	r3, r2
 800deae:	00db      	lsls	r3, r3, #3
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	440b      	add	r3, r1
 800deb6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d12e      	bne.n	800df1e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800dec0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	da2b      	bge.n	800df1e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	0c1a      	lsrs	r2, r3, #16
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ded0:	4053      	eors	r3, r2
 800ded2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d121      	bne.n	800df1e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dede:	4613      	mov	r3, r2
 800dee0:	00db      	lsls	r3, r3, #3
 800dee2:	4413      	add	r3, r2
 800dee4:	009b      	lsls	r3, r3, #2
 800dee6:	440b      	add	r3, r1
 800dee8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800deec:	2201      	movs	r2, #1
 800deee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800def0:	6a3b      	ldr	r3, [r7, #32]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	695b      	ldr	r3, [r3, #20]
 800df00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10a      	bne.n	800df1e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	69fa      	ldr	r2, [r7, #28]
 800df12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800df1a:	6053      	str	r3, [r2, #4]
            break;
 800df1c:	e008      	b.n	800df30 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800df1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df20:	3301      	adds	r3, #1
 800df22:	627b      	str	r3, [r7, #36]	@ 0x24
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	791b      	ldrb	r3, [r3, #4]
 800df28:	461a      	mov	r2, r3
 800df2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d3b3      	bcc.n	800de98 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	695a      	ldr	r2, [r3, #20]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800df3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	4618      	mov	r0, r3
 800df46:	f009 f879 	bl	801703c <USB_ReadInterrupts>
 800df4a:	4603      	mov	r3, r0
 800df4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800df50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df54:	d10a      	bne.n	800df6c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f00c fa72 	bl	801a440 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	695a      	ldr	r2, [r3, #20]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800df6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4618      	mov	r0, r3
 800df72:	f009 f863 	bl	801703c <USB_ReadInterrupts>
 800df76:	4603      	mov	r3, r0
 800df78:	f003 0304 	and.w	r3, r3, #4
 800df7c:	2b04      	cmp	r3, #4
 800df7e:	d115      	bne.n	800dfac <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	f003 0304 	and.w	r3, r3, #4
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d002      	beq.n	800df98 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f00c fa62 	bl	801a45c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	6859      	ldr	r1, [r3, #4]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	69ba      	ldr	r2, [r7, #24]
 800dfa4:	430a      	orrs	r2, r1
 800dfa6:	605a      	str	r2, [r3, #4]
 800dfa8:	e000      	b.n	800dfac <HAL_PCD_IRQHandler+0x996>
      return;
 800dfaa:	bf00      	nop
    }
  }
}
 800dfac:	3734      	adds	r7, #52	@ 0x34
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd90      	pop	{r4, r7, pc}

0800dfb2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b082      	sub	sp, #8
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	460b      	mov	r3, r1
 800dfbc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d101      	bne.n	800dfcc <HAL_PCD_SetAddress+0x1a>
 800dfc8:	2302      	movs	r3, #2
 800dfca:	e012      	b.n	800dff2 <HAL_PCD_SetAddress+0x40>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	78fa      	ldrb	r2, [r7, #3]
 800dfd8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	78fa      	ldrb	r2, [r7, #3]
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f008 ffc2 	bl	8016f6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800dff0:	2300      	movs	r3, #0
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}

0800dffa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800dffa:	b580      	push	{r7, lr}
 800dffc:	b084      	sub	sp, #16
 800dffe:	af00      	add	r7, sp, #0
 800e000:	6078      	str	r0, [r7, #4]
 800e002:	4608      	mov	r0, r1
 800e004:	4611      	mov	r1, r2
 800e006:	461a      	mov	r2, r3
 800e008:	4603      	mov	r3, r0
 800e00a:	70fb      	strb	r3, [r7, #3]
 800e00c:	460b      	mov	r3, r1
 800e00e:	803b      	strh	r3, [r7, #0]
 800e010:	4613      	mov	r3, r2
 800e012:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	da0f      	bge.n	800e040 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	f003 020f 	and.w	r2, r3, #15
 800e026:	4613      	mov	r3, r2
 800e028:	00db      	lsls	r3, r3, #3
 800e02a:	4413      	add	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	3310      	adds	r3, #16
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	4413      	add	r3, r2
 800e034:	3304      	adds	r3, #4
 800e036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	705a      	strb	r2, [r3, #1]
 800e03e:	e00f      	b.n	800e060 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	f003 020f 	and.w	r2, r3, #15
 800e046:	4613      	mov	r3, r2
 800e048:	00db      	lsls	r3, r3, #3
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	4413      	add	r3, r2
 800e056:	3304      	adds	r3, #4
 800e058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	2200      	movs	r2, #0
 800e05e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e060:	78fb      	ldrb	r3, [r7, #3]
 800e062:	f003 030f 	and.w	r3, r3, #15
 800e066:	b2da      	uxtb	r2, r3
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800e06c:	883b      	ldrh	r3, [r7, #0]
 800e06e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	78ba      	ldrb	r2, [r7, #2]
 800e07a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	785b      	ldrb	r3, [r3, #1]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d004      	beq.n	800e08e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	461a      	mov	r2, r3
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e08e:	78bb      	ldrb	r3, [r7, #2]
 800e090:	2b02      	cmp	r3, #2
 800e092:	d102      	bne.n	800e09a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d101      	bne.n	800e0a8 <HAL_PCD_EP_Open+0xae>
 800e0a4:	2302      	movs	r3, #2
 800e0a6:	e00e      	b.n	800e0c6 <HAL_PCD_EP_Open+0xcc>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	68f9      	ldr	r1, [r7, #12]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f008 f93c 	bl	8016334 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800e0c4:	7afb      	ldrb	r3, [r7, #11]
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
 800e0d6:	460b      	mov	r3, r1
 800e0d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e0da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da0f      	bge.n	800e102 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e0e2:	78fb      	ldrb	r3, [r7, #3]
 800e0e4:	f003 020f 	and.w	r2, r3, #15
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	00db      	lsls	r3, r3, #3
 800e0ec:	4413      	add	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	3310      	adds	r3, #16
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	705a      	strb	r2, [r3, #1]
 800e100:	e00f      	b.n	800e122 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e102:	78fb      	ldrb	r3, [r7, #3]
 800e104:	f003 020f 	and.w	r2, r3, #15
 800e108:	4613      	mov	r3, r2
 800e10a:	00db      	lsls	r3, r3, #3
 800e10c:	4413      	add	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	4413      	add	r3, r2
 800e118:	3304      	adds	r3, #4
 800e11a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2200      	movs	r2, #0
 800e120:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800e122:	78fb      	ldrb	r3, [r7, #3]
 800e124:	f003 030f 	and.w	r3, r3, #15
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e134:	2b01      	cmp	r3, #1
 800e136:	d101      	bne.n	800e13c <HAL_PCD_EP_Close+0x6e>
 800e138:	2302      	movs	r3, #2
 800e13a:	e00e      	b.n	800e15a <HAL_PCD_EP_Close+0x8c>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68f9      	ldr	r1, [r7, #12]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f008 f97a 	bl	8016444 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800e158:	2300      	movs	r3, #0
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3710      	adds	r7, #16
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}

0800e162 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e162:	b580      	push	{r7, lr}
 800e164:	b086      	sub	sp, #24
 800e166:	af00      	add	r7, sp, #0
 800e168:	60f8      	str	r0, [r7, #12]
 800e16a:	607a      	str	r2, [r7, #4]
 800e16c:	603b      	str	r3, [r7, #0]
 800e16e:	460b      	mov	r3, r1
 800e170:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e172:	7afb      	ldrb	r3, [r7, #11]
 800e174:	f003 020f 	and.w	r2, r3, #15
 800e178:	4613      	mov	r3, r2
 800e17a:	00db      	lsls	r3, r3, #3
 800e17c:	4413      	add	r3, r2
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	4413      	add	r3, r2
 800e188:	3304      	adds	r3, #4
 800e18a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	683a      	ldr	r2, [r7, #0]
 800e196:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2200      	movs	r2, #0
 800e19c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e1a4:	7afb      	ldrb	r3, [r7, #11]
 800e1a6:	f003 030f 	and.w	r3, r3, #15
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	799b      	ldrb	r3, [r3, #6]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d102      	bne.n	800e1be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6818      	ldr	r0, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	799b      	ldrb	r3, [r3, #6]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	6979      	ldr	r1, [r7, #20]
 800e1ca:	f008 fa17 	bl	80165fc <USB_EPStartXfer>

  return HAL_OK;
 800e1ce:	2300      	movs	r3, #0
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3718      	adds	r7, #24
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800e1d8:	b480      	push	{r7}
 800e1da:	b083      	sub	sp, #12
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e1e4:	78fb      	ldrb	r3, [r7, #3]
 800e1e6:	f003 020f 	and.w	r2, r3, #15
 800e1ea:	6879      	ldr	r1, [r7, #4]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800e1fa:	681b      	ldr	r3, [r3, #0]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	607a      	str	r2, [r7, #4]
 800e212:	603b      	str	r3, [r7, #0]
 800e214:	460b      	mov	r3, r1
 800e216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e218:	7afb      	ldrb	r3, [r7, #11]
 800e21a:	f003 020f 	and.w	r2, r3, #15
 800e21e:	4613      	mov	r3, r2
 800e220:	00db      	lsls	r3, r3, #3
 800e222:	4413      	add	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	3310      	adds	r3, #16
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	4413      	add	r3, r2
 800e22c:	3304      	adds	r3, #4
 800e22e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	683a      	ldr	r2, [r7, #0]
 800e23a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	2200      	movs	r2, #0
 800e240:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2201      	movs	r2, #1
 800e246:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e248:	7afb      	ldrb	r3, [r7, #11]
 800e24a:	f003 030f 	and.w	r3, r3, #15
 800e24e:	b2da      	uxtb	r2, r3
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	799b      	ldrb	r3, [r3, #6]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d102      	bne.n	800e262 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6818      	ldr	r0, [r3, #0]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	799b      	ldrb	r3, [r3, #6]
 800e26a:	461a      	mov	r2, r3
 800e26c:	6979      	ldr	r1, [r7, #20]
 800e26e:	f008 f9c5 	bl	80165fc <USB_EPStartXfer>

  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3718      	adds	r7, #24
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	460b      	mov	r3, r1
 800e286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e288:	78fb      	ldrb	r3, [r7, #3]
 800e28a:	f003 030f 	and.w	r3, r3, #15
 800e28e:	687a      	ldr	r2, [r7, #4]
 800e290:	7912      	ldrb	r2, [r2, #4]
 800e292:	4293      	cmp	r3, r2
 800e294:	d901      	bls.n	800e29a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e296:	2301      	movs	r3, #1
 800e298:	e04f      	b.n	800e33a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e29a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	da0f      	bge.n	800e2c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e2a2:	78fb      	ldrb	r3, [r7, #3]
 800e2a4:	f003 020f 	and.w	r2, r3, #15
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	4413      	add	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	3310      	adds	r3, #16
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	3304      	adds	r3, #4
 800e2b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	705a      	strb	r2, [r3, #1]
 800e2c0:	e00d      	b.n	800e2de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e2c2:	78fa      	ldrb	r2, [r7, #3]
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	00db      	lsls	r3, r3, #3
 800e2c8:	4413      	add	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e2e4:	78fb      	ldrb	r3, [r7, #3]
 800e2e6:	f003 030f 	and.w	r3, r3, #15
 800e2ea:	b2da      	uxtb	r2, r3
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d101      	bne.n	800e2fe <HAL_PCD_EP_SetStall+0x82>
 800e2fa:	2302      	movs	r3, #2
 800e2fc:	e01d      	b.n	800e33a <HAL_PCD_EP_SetStall+0xbe>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	4618      	mov	r0, r3
 800e30e:	f008 fd59 	bl	8016dc4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e312:	78fb      	ldrb	r3, [r7, #3]
 800e314:	f003 030f 	and.w	r3, r3, #15
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d109      	bne.n	800e330 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7999      	ldrb	r1, [r3, #6]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e32a:	461a      	mov	r2, r3
 800e32c:	f008 ff4c 	bl	80171c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	460b      	mov	r3, r1
 800e34c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e34e:	78fb      	ldrb	r3, [r7, #3]
 800e350:	f003 030f 	and.w	r3, r3, #15
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	7912      	ldrb	r2, [r2, #4]
 800e358:	4293      	cmp	r3, r2
 800e35a:	d901      	bls.n	800e360 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e042      	b.n	800e3e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e364:	2b00      	cmp	r3, #0
 800e366:	da0f      	bge.n	800e388 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	f003 020f 	and.w	r2, r3, #15
 800e36e:	4613      	mov	r3, r2
 800e370:	00db      	lsls	r3, r3, #3
 800e372:	4413      	add	r3, r2
 800e374:	009b      	lsls	r3, r3, #2
 800e376:	3310      	adds	r3, #16
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	3304      	adds	r3, #4
 800e37e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2201      	movs	r2, #1
 800e384:	705a      	strb	r2, [r3, #1]
 800e386:	e00f      	b.n	800e3a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e388:	78fb      	ldrb	r3, [r7, #3]
 800e38a:	f003 020f 	and.w	r2, r3, #15
 800e38e:	4613      	mov	r3, r2
 800e390:	00db      	lsls	r3, r3, #3
 800e392:	4413      	add	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	4413      	add	r3, r2
 800e39e:	3304      	adds	r3, #4
 800e3a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e3ae:	78fb      	ldrb	r3, [r7, #3]
 800e3b0:	f003 030f 	and.w	r3, r3, #15
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d101      	bne.n	800e3c8 <HAL_PCD_EP_ClrStall+0x86>
 800e3c4:	2302      	movs	r3, #2
 800e3c6:	e00e      	b.n	800e3e6 <HAL_PCD_EP_ClrStall+0xa4>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2201      	movs	r2, #1
 800e3cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68f9      	ldr	r1, [r7, #12]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f008 fd62 	bl	8016ea0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3710      	adds	r7, #16
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}

0800e3ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e3ee:	b580      	push	{r7, lr}
 800e3f0:	b084      	sub	sp, #16
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800e3fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	da0c      	bge.n	800e41c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e402:	78fb      	ldrb	r3, [r7, #3]
 800e404:	f003 020f 	and.w	r2, r3, #15
 800e408:	4613      	mov	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	4413      	add	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	3310      	adds	r3, #16
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	4413      	add	r3, r2
 800e416:	3304      	adds	r3, #4
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	e00c      	b.n	800e436 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e41c:	78fb      	ldrb	r3, [r7, #3]
 800e41e:	f003 020f 	and.w	r2, r3, #15
 800e422:	4613      	mov	r3, r2
 800e424:	00db      	lsls	r3, r3, #3
 800e426:	4413      	add	r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e42e:	687a      	ldr	r2, [r7, #4]
 800e430:	4413      	add	r3, r2
 800e432:	3304      	adds	r3, #4
 800e434:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68f9      	ldr	r1, [r7, #12]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f008 fb81 	bl	8016b44 <USB_EPStopXfer>
 800e442:	4603      	mov	r3, r0
 800e444:	72fb      	strb	r3, [r7, #11]

  return ret;
 800e446:	7afb      	ldrb	r3, [r7, #11]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08a      	sub	sp, #40	@ 0x28
 800e454:	af02      	add	r7, sp, #8
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	4613      	mov	r3, r2
 800e468:	00db      	lsls	r3, r3, #3
 800e46a:	4413      	add	r3, r2
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	3310      	adds	r3, #16
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4413      	add	r3, r2
 800e474:	3304      	adds	r3, #4
 800e476:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	695a      	ldr	r2, [r3, #20]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	429a      	cmp	r2, r3
 800e482:	d901      	bls.n	800e488 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800e484:	2301      	movs	r3, #1
 800e486:	e06b      	b.n	800e560 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	691a      	ldr	r2, [r3, #16]
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	1ad3      	subs	r3, r2, r3
 800e492:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d902      	bls.n	800e4a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	3303      	adds	r3, #3
 800e4a8:	089b      	lsrs	r3, r3, #2
 800e4aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e4ac:	e02a      	b.n	800e504 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	691a      	ldr	r2, [r3, #16]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	1ad3      	subs	r3, r2, r3
 800e4b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	69fa      	ldr	r2, [r7, #28]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d902      	bls.n	800e4ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	3303      	adds	r3, #3
 800e4ce:	089b      	lsrs	r3, r3, #2
 800e4d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68d9      	ldr	r1, [r3, #12]
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	b2da      	uxtb	r2, r3
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	6978      	ldr	r0, [r7, #20]
 800e4e8:	f008 fbd6 	bl	8016c98 <USB_WritePacket>

    ep->xfer_buff  += len;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	68da      	ldr	r2, [r3, #12]
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	441a      	add	r2, r3
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	695a      	ldr	r2, [r3, #20]
 800e4fc:	69fb      	ldr	r3, [r7, #28]
 800e4fe:	441a      	add	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	015a      	lsls	r2, r3, #5
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	4413      	add	r3, r2
 800e50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e514:	69ba      	ldr	r2, [r7, #24]
 800e516:	429a      	cmp	r2, r3
 800e518:	d809      	bhi.n	800e52e <PCD_WriteEmptyTxFifo+0xde>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	695a      	ldr	r2, [r3, #20]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800e522:	429a      	cmp	r2, r3
 800e524:	d203      	bcs.n	800e52e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1bf      	bne.n	800e4ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	691a      	ldr	r2, [r3, #16]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	429a      	cmp	r2, r3
 800e538:	d811      	bhi.n	800e55e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	f003 030f 	and.w	r3, r3, #15
 800e540:	2201      	movs	r2, #1
 800e542:	fa02 f303 	lsl.w	r3, r2, r3
 800e546:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e54e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	43db      	mvns	r3, r3
 800e554:	6939      	ldr	r1, [r7, #16]
 800e556:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e55a:	4013      	ands	r3, r2
 800e55c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3720      	adds	r7, #32
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b088      	sub	sp, #32
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e578:	69fb      	ldr	r3, [r7, #28]
 800e57a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	333c      	adds	r3, #60	@ 0x3c
 800e580:	3304      	adds	r3, #4
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	015a      	lsls	r2, r3, #5
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	4413      	add	r3, r2
 800e58e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	799b      	ldrb	r3, [r3, #6]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d17b      	bne.n	800e696 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f003 0308 	and.w	r3, r3, #8
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d015      	beq.n	800e5d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	4a61      	ldr	r2, [pc, #388]	@ (800e730 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	f240 80b9 	bls.w	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 80b3 	beq.w	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	015a      	lsls	r2, r3, #5
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e5d0:	6093      	str	r3, [r2, #8]
 800e5d2:	e0a7      	b.n	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	f003 0320 	and.w	r3, r3, #32
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d009      	beq.n	800e5f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	015a      	lsls	r2, r3, #5
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	2320      	movs	r3, #32
 800e5ee:	6093      	str	r3, [r2, #8]
 800e5f0:	e098      	b.n	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	f040 8093 	bne.w	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	4a4b      	ldr	r2, [pc, #300]	@ (800e730 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800e602:	4293      	cmp	r3, r2
 800e604:	d90f      	bls.n	800e626 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00a      	beq.n	800e626 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e61c:	461a      	mov	r2, r3
 800e61e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e622:	6093      	str	r3, [r2, #8]
 800e624:	e07e      	b.n	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800e626:	683a      	ldr	r2, [r7, #0]
 800e628:	4613      	mov	r3, r2
 800e62a:	00db      	lsls	r3, r3, #3
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	4413      	add	r3, r2
 800e638:	3304      	adds	r3, #4
 800e63a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	6a1a      	ldr	r2, [r3, #32]
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	0159      	lsls	r1, r3, #5
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	440b      	add	r3, r1
 800e648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e64c:	691b      	ldr	r3, [r3, #16]
 800e64e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e652:	1ad2      	subs	r2, r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d114      	bne.n	800e688 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d109      	bne.n	800e67a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6818      	ldr	r0, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e670:	461a      	mov	r2, r3
 800e672:	2101      	movs	r1, #1
 800e674:	f008 fda8 	bl	80171c8 <USB_EP0_OutStart>
 800e678:	e006      	b.n	800e688 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68da      	ldr	r2, [r3, #12]
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	695b      	ldr	r3, [r3, #20]
 800e682:	441a      	add	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f00b fe12 	bl	801a2b8 <HAL_PCD_DataOutStageCallback>
 800e694:	e046      	b.n	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	4a26      	ldr	r2, [pc, #152]	@ (800e734 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d124      	bne.n	800e6e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00a      	beq.n	800e6be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	015a      	lsls	r2, r3, #5
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	4413      	add	r3, r2
 800e6b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e6ba:	6093      	str	r3, [r2, #8]
 800e6bc:	e032      	b.n	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	f003 0320 	and.w	r3, r3, #32
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d008      	beq.n	800e6da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	015a      	lsls	r2, r3, #5
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	4413      	add	r3, r2
 800e6d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	2320      	movs	r3, #32
 800e6d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	4619      	mov	r1, r3
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f00b fde9 	bl	801a2b8 <HAL_PCD_DataOutStageCallback>
 800e6e6:	e01d      	b.n	800e724 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d114      	bne.n	800e718 <PCD_EP_OutXfrComplete_int+0x1b0>
 800e6ee:	6879      	ldr	r1, [r7, #4]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	00db      	lsls	r3, r3, #3
 800e6f6:	4413      	add	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	440b      	add	r3, r1
 800e6fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d108      	bne.n	800e718 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6818      	ldr	r0, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e710:	461a      	mov	r2, r3
 800e712:	2100      	movs	r1, #0
 800e714:	f008 fd58 	bl	80171c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800e718:	683b      	ldr	r3, [r7, #0]
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	4619      	mov	r1, r3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f00b fdca 	bl	801a2b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800e724:	2300      	movs	r3, #0
}
 800e726:	4618      	mov	r0, r3
 800e728:	3720      	adds	r7, #32
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	4f54300a 	.word	0x4f54300a
 800e734:	4f54310a 	.word	0x4f54310a

0800e738 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	333c      	adds	r3, #60	@ 0x3c
 800e750:	3304      	adds	r3, #4
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	015a      	lsls	r2, r3, #5
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	4413      	add	r3, r2
 800e75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e762:	689b      	ldr	r3, [r3, #8]
 800e764:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	4a15      	ldr	r2, [pc, #84]	@ (800e7c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800e76a:	4293      	cmp	r3, r2
 800e76c:	d90e      	bls.n	800e78c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800e774:	2b00      	cmp	r3, #0
 800e776:	d009      	beq.n	800e78c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	015a      	lsls	r2, r3, #5
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	4413      	add	r3, r2
 800e780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e784:	461a      	mov	r2, r3
 800e786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e78a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f00b fd81 	bl	801a294 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	4a0a      	ldr	r2, [pc, #40]	@ (800e7c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d90c      	bls.n	800e7b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	799b      	ldrb	r3, [r3, #6]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d108      	bne.n	800e7b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e7ac:	461a      	mov	r2, r3
 800e7ae:	2101      	movs	r1, #1
 800e7b0:	f008 fd0a 	bl	80171c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3718      	adds	r7, #24
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	4f54300a 	.word	0x4f54300a

0800e7c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
 800e7d0:	4613      	mov	r3, r2
 800e7d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800e7dc:	78fb      	ldrb	r3, [r7, #3]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d107      	bne.n	800e7f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800e7e2:	883b      	ldrh	r3, [r7, #0]
 800e7e4:	0419      	lsls	r1, r3, #16
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	430a      	orrs	r2, r1
 800e7ee:	629a      	str	r2, [r3, #40]	@ 0x28
 800e7f0:	e028      	b.n	800e844 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7f8:	0c1b      	lsrs	r3, r3, #16
 800e7fa:	68ba      	ldr	r2, [r7, #8]
 800e7fc:	4413      	add	r3, r2
 800e7fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e800:	2300      	movs	r3, #0
 800e802:	73fb      	strb	r3, [r7, #15]
 800e804:	e00d      	b.n	800e822 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
 800e80c:	3340      	adds	r3, #64	@ 0x40
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	0c1b      	lsrs	r3, r3, #16
 800e816:	68ba      	ldr	r2, [r7, #8]
 800e818:	4413      	add	r3, r2
 800e81a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
 800e81e:	3301      	adds	r3, #1
 800e820:	73fb      	strb	r3, [r7, #15]
 800e822:	7bfa      	ldrb	r2, [r7, #15]
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	3b01      	subs	r3, #1
 800e828:	429a      	cmp	r2, r3
 800e82a:	d3ec      	bcc.n	800e806 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800e82c:	883b      	ldrh	r3, [r7, #0]
 800e82e:	0418      	lsls	r0, r3, #16
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6819      	ldr	r1, [r3, #0]
 800e834:	78fb      	ldrb	r3, [r7, #3]
 800e836:	3b01      	subs	r3, #1
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	4302      	orrs	r2, r0
 800e83c:	3340      	adds	r3, #64	@ 0x40
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	440b      	add	r3, r1
 800e842:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3714      	adds	r7, #20
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr

0800e852 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800e852:	b480      	push	{r7}
 800e854:	b083      	sub	sp, #12
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	460b      	mov	r3, r1
 800e85c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	887a      	ldrh	r2, [r7, #2]
 800e864:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8a2:	4b05      	ldr	r3, [pc, #20]	@ (800e8b8 <HAL_PCDEx_ActivateLPM+0x44>)
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800e8aa:	2300      	movs	r3, #0
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3714      	adds	r7, #20
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	10000003 	.word	0x10000003

0800e8bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e8dc:	4b19      	ldr	r3, [pc, #100]	@ (800e944 <HAL_PWREx_ConfigSupply+0x70>)
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	f003 0304 	and.w	r3, r3, #4
 800e8e4:	2b04      	cmp	r3, #4
 800e8e6:	d00a      	beq.n	800e8fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e8e8:	4b16      	ldr	r3, [pc, #88]	@ (800e944 <HAL_PWREx_ConfigSupply+0x70>)
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	f003 0307 	and.w	r3, r3, #7
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d001      	beq.n	800e8fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e01f      	b.n	800e93a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e01d      	b.n	800e93a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e8fe:	4b11      	ldr	r3, [pc, #68]	@ (800e944 <HAL_PWREx_ConfigSupply+0x70>)
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	f023 0207 	bic.w	r2, r3, #7
 800e906:	490f      	ldr	r1, [pc, #60]	@ (800e944 <HAL_PWREx_ConfigSupply+0x70>)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4313      	orrs	r3, r2
 800e90c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e90e:	f7f4 fe1d 	bl	800354c <HAL_GetTick>
 800e912:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e914:	e009      	b.n	800e92a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e916:	f7f4 fe19 	bl	800354c <HAL_GetTick>
 800e91a:	4602      	mov	r2, r0
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	1ad3      	subs	r3, r2, r3
 800e920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e924:	d901      	bls.n	800e92a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e926:	2301      	movs	r3, #1
 800e928:	e007      	b.n	800e93a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e92a:	4b06      	ldr	r3, [pc, #24]	@ (800e944 <HAL_PWREx_ConfigSupply+0x70>)
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e936:	d1ee      	bne.n	800e916 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e938:	2300      	movs	r3, #0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}
 800e942:	bf00      	nop
 800e944:	58024800 	.word	0x58024800

0800e948 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800e948:	b480      	push	{r7}
 800e94a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800e94c:	4b05      	ldr	r3, [pc, #20]	@ (800e964 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	4a04      	ldr	r2, [pc, #16]	@ (800e964 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800e952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e956:	60d3      	str	r3, [r2, #12]
}
 800e958:	bf00      	nop
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
 800e962:	bf00      	nop
 800e964:	58024800 	.word	0x58024800

0800e968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b08c      	sub	sp, #48	@ 0x30
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d102      	bne.n	800e97c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	f000 bc48 	b.w	800f20c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	f000 8088 	beq.w	800ea9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e98a:	4b99      	ldr	r3, [pc, #612]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e98c:	691b      	ldr	r3, [r3, #16]
 800e98e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e994:	4b96      	ldr	r3, [pc, #600]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e998:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e99a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e99c:	2b10      	cmp	r3, #16
 800e99e:	d007      	beq.n	800e9b0 <HAL_RCC_OscConfig+0x48>
 800e9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a2:	2b18      	cmp	r3, #24
 800e9a4:	d111      	bne.n	800e9ca <HAL_RCC_OscConfig+0x62>
 800e9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a8:	f003 0303 	and.w	r3, r3, #3
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	d10c      	bne.n	800e9ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e9b0:	4b8f      	ldr	r3, [pc, #572]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d06d      	beq.n	800ea98 <HAL_RCC_OscConfig+0x130>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	685b      	ldr	r3, [r3, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d169      	bne.n	800ea98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	f000 bc21 	b.w	800f20c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e9d2:	d106      	bne.n	800e9e2 <HAL_RCC_OscConfig+0x7a>
 800e9d4:	4b86      	ldr	r3, [pc, #536]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a85      	ldr	r2, [pc, #532]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9de:	6013      	str	r3, [r2, #0]
 800e9e0:	e02e      	b.n	800ea40 <HAL_RCC_OscConfig+0xd8>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d10c      	bne.n	800ea04 <HAL_RCC_OscConfig+0x9c>
 800e9ea:	4b81      	ldr	r3, [pc, #516]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a80      	ldr	r2, [pc, #512]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	4b7e      	ldr	r3, [pc, #504]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	4a7d      	ldr	r2, [pc, #500]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800e9fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ea00:	6013      	str	r3, [r2, #0]
 800ea02:	e01d      	b.n	800ea40 <HAL_RCC_OscConfig+0xd8>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ea0c:	d10c      	bne.n	800ea28 <HAL_RCC_OscConfig+0xc0>
 800ea0e:	4b78      	ldr	r3, [pc, #480]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	4a77      	ldr	r2, [pc, #476]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ea18:	6013      	str	r3, [r2, #0]
 800ea1a:	4b75      	ldr	r3, [pc, #468]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	4a74      	ldr	r2, [pc, #464]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea24:	6013      	str	r3, [r2, #0]
 800ea26:	e00b      	b.n	800ea40 <HAL_RCC_OscConfig+0xd8>
 800ea28:	4b71      	ldr	r3, [pc, #452]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	4a70      	ldr	r2, [pc, #448]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea32:	6013      	str	r3, [r2, #0]
 800ea34:	4b6e      	ldr	r3, [pc, #440]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a6d      	ldr	r2, [pc, #436]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ea3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d013      	beq.n	800ea70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea48:	f7f4 fd80 	bl	800354c <HAL_GetTick>
 800ea4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ea4e:	e008      	b.n	800ea62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea50:	f7f4 fd7c 	bl	800354c <HAL_GetTick>
 800ea54:	4602      	mov	r2, r0
 800ea56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea58:	1ad3      	subs	r3, r2, r3
 800ea5a:	2b64      	cmp	r3, #100	@ 0x64
 800ea5c:	d901      	bls.n	800ea62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ea5e:	2303      	movs	r3, #3
 800ea60:	e3d4      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ea62:	4b63      	ldr	r3, [pc, #396]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d0f0      	beq.n	800ea50 <HAL_RCC_OscConfig+0xe8>
 800ea6e:	e014      	b.n	800ea9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea70:	f7f4 fd6c 	bl	800354c <HAL_GetTick>
 800ea74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ea76:	e008      	b.n	800ea8a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ea78:	f7f4 fd68 	bl	800354c <HAL_GetTick>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea80:	1ad3      	subs	r3, r2, r3
 800ea82:	2b64      	cmp	r3, #100	@ 0x64
 800ea84:	d901      	bls.n	800ea8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ea86:	2303      	movs	r3, #3
 800ea88:	e3c0      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ea8a:	4b59      	ldr	r3, [pc, #356]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1f0      	bne.n	800ea78 <HAL_RCC_OscConfig+0x110>
 800ea96:	e000      	b.n	800ea9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ea98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f003 0302 	and.w	r3, r3, #2
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f000 80ca 	beq.w	800ec3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eaa8:	4b51      	ldr	r3, [pc, #324]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eaaa:	691b      	ldr	r3, [r3, #16]
 800eaac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800eab0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800eab2:	4b4f      	ldr	r3, [pc, #316]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800eab8:	6a3b      	ldr	r3, [r7, #32]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d007      	beq.n	800eace <HAL_RCC_OscConfig+0x166>
 800eabe:	6a3b      	ldr	r3, [r7, #32]
 800eac0:	2b18      	cmp	r3, #24
 800eac2:	d156      	bne.n	800eb72 <HAL_RCC_OscConfig+0x20a>
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	f003 0303 	and.w	r3, r3, #3
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d151      	bne.n	800eb72 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eace:	4b48      	ldr	r3, [pc, #288]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f003 0304 	and.w	r3, r3, #4
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d005      	beq.n	800eae6 <HAL_RCC_OscConfig+0x17e>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d101      	bne.n	800eae6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800eae2:	2301      	movs	r3, #1
 800eae4:	e392      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800eae6:	4b42      	ldr	r3, [pc, #264]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	f023 0219 	bic.w	r2, r3, #25
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	493f      	ldr	r1, [pc, #252]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eaf8:	f7f4 fd28 	bl	800354c <HAL_GetTick>
 800eafc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eafe:	e008      	b.n	800eb12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb00:	f7f4 fd24 	bl	800354c <HAL_GetTick>
 800eb04:	4602      	mov	r2, r0
 800eb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d901      	bls.n	800eb12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	e37c      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb12:	4b37      	ldr	r3, [pc, #220]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f003 0304 	and.w	r3, r3, #4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d0f0      	beq.n	800eb00 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb1e:	f7f4 fd45 	bl	80035ac <HAL_GetREVID>
 800eb22:	4603      	mov	r3, r0
 800eb24:	f241 0203 	movw	r2, #4099	@ 0x1003
 800eb28:	4293      	cmp	r3, r2
 800eb2a:	d817      	bhi.n	800eb5c <HAL_RCC_OscConfig+0x1f4>
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	2b40      	cmp	r3, #64	@ 0x40
 800eb32:	d108      	bne.n	800eb46 <HAL_RCC_OscConfig+0x1de>
 800eb34:	4b2e      	ldr	r3, [pc, #184]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800eb3c:	4a2c      	ldr	r2, [pc, #176]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb42:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eb44:	e07a      	b.n	800ec3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb46:	4b2a      	ldr	r3, [pc, #168]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	031b      	lsls	r3, r3, #12
 800eb54:	4926      	ldr	r1, [pc, #152]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb56:	4313      	orrs	r3, r2
 800eb58:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eb5a:	e06f      	b.n	800ec3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800eb5c:	4b24      	ldr	r3, [pc, #144]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	061b      	lsls	r3, r3, #24
 800eb6a:	4921      	ldr	r1, [pc, #132]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb6c:	4313      	orrs	r3, r2
 800eb6e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800eb70:	e064      	b.n	800ec3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d047      	beq.n	800ec0a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800eb7a:	4b1d      	ldr	r3, [pc, #116]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f023 0219 	bic.w	r2, r3, #25
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	491a      	ldr	r1, [pc, #104]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb8c:	f7f4 fcde 	bl	800354c <HAL_GetTick>
 800eb90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eb92:	e008      	b.n	800eba6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800eb94:	f7f4 fcda 	bl	800354c <HAL_GetTick>
 800eb98:	4602      	mov	r2, r0
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	2b02      	cmp	r3, #2
 800eba0:	d901      	bls.n	800eba6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800eba2:	2303      	movs	r3, #3
 800eba4:	e332      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800eba6:	4b12      	ldr	r3, [pc, #72]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f003 0304 	and.w	r3, r3, #4
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d0f0      	beq.n	800eb94 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ebb2:	f7f4 fcfb 	bl	80035ac <HAL_GetREVID>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d819      	bhi.n	800ebf4 <HAL_RCC_OscConfig+0x28c>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	2b40      	cmp	r3, #64	@ 0x40
 800ebc6:	d108      	bne.n	800ebda <HAL_RCC_OscConfig+0x272>
 800ebc8:	4b09      	ldr	r3, [pc, #36]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800ebd0:	4a07      	ldr	r2, [pc, #28]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ebd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ebd6:	6053      	str	r3, [r2, #4]
 800ebd8:	e030      	b.n	800ec3c <HAL_RCC_OscConfig+0x2d4>
 800ebda:	4b05      	ldr	r3, [pc, #20]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	691b      	ldr	r3, [r3, #16]
 800ebe6:	031b      	lsls	r3, r3, #12
 800ebe8:	4901      	ldr	r1, [pc, #4]	@ (800ebf0 <HAL_RCC_OscConfig+0x288>)
 800ebea:	4313      	orrs	r3, r2
 800ebec:	604b      	str	r3, [r1, #4]
 800ebee:	e025      	b.n	800ec3c <HAL_RCC_OscConfig+0x2d4>
 800ebf0:	58024400 	.word	0x58024400
 800ebf4:	4b9a      	ldr	r3, [pc, #616]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ebf6:	685b      	ldr	r3, [r3, #4]
 800ebf8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	061b      	lsls	r3, r3, #24
 800ec02:	4997      	ldr	r1, [pc, #604]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec04:	4313      	orrs	r3, r2
 800ec06:	604b      	str	r3, [r1, #4]
 800ec08:	e018      	b.n	800ec3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec0a:	4b95      	ldr	r3, [pc, #596]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	4a94      	ldr	r2, [pc, #592]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec10:	f023 0301 	bic.w	r3, r3, #1
 800ec14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec16:	f7f4 fc99 	bl	800354c <HAL_GetTick>
 800ec1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ec1c:	e008      	b.n	800ec30 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec1e:	f7f4 fc95 	bl	800354c <HAL_GetTick>
 800ec22:	4602      	mov	r2, r0
 800ec24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec26:	1ad3      	subs	r3, r2, r3
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d901      	bls.n	800ec30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	e2ed      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ec30:	4b8b      	ldr	r3, [pc, #556]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f003 0304 	and.w	r3, r3, #4
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d1f0      	bne.n	800ec1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f003 0310 	and.w	r3, r3, #16
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	f000 80a9 	beq.w	800ed9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ec4a:	4b85      	ldr	r3, [pc, #532]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ec52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ec54:	4b82      	ldr	r3, [pc, #520]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec58:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	2b08      	cmp	r3, #8
 800ec5e:	d007      	beq.n	800ec70 <HAL_RCC_OscConfig+0x308>
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	2b18      	cmp	r3, #24
 800ec64:	d13a      	bne.n	800ecdc <HAL_RCC_OscConfig+0x374>
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	f003 0303 	and.w	r3, r3, #3
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d135      	bne.n	800ecdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ec70:	4b7b      	ldr	r3, [pc, #492]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d005      	beq.n	800ec88 <HAL_RCC_OscConfig+0x320>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	69db      	ldr	r3, [r3, #28]
 800ec80:	2b80      	cmp	r3, #128	@ 0x80
 800ec82:	d001      	beq.n	800ec88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e2c1      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ec88:	f7f4 fc90 	bl	80035ac <HAL_GetREVID>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d817      	bhi.n	800ecc6 <HAL_RCC_OscConfig+0x35e>
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a1b      	ldr	r3, [r3, #32]
 800ec9a:	2b20      	cmp	r3, #32
 800ec9c:	d108      	bne.n	800ecb0 <HAL_RCC_OscConfig+0x348>
 800ec9e:	4b70      	ldr	r3, [pc, #448]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800eca6:	4a6e      	ldr	r2, [pc, #440]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800eca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ecae:	e075      	b.n	800ed9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ecb0:	4b6b      	ldr	r3, [pc, #428]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	069b      	lsls	r3, r3, #26
 800ecbe:	4968      	ldr	r1, [pc, #416]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ecc4:	e06a      	b.n	800ed9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ecc6:	4b66      	ldr	r3, [pc, #408]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ecc8:	68db      	ldr	r3, [r3, #12]
 800ecca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6a1b      	ldr	r3, [r3, #32]
 800ecd2:	061b      	lsls	r3, r3, #24
 800ecd4:	4962      	ldr	r1, [pc, #392]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ecda:	e05f      	b.n	800ed9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d042      	beq.n	800ed6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ece4:	4b5e      	ldr	r3, [pc, #376]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	4a5d      	ldr	r2, [pc, #372]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ecea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecf0:	f7f4 fc2c 	bl	800354c <HAL_GetTick>
 800ecf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ecf6:	e008      	b.n	800ed0a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ecf8:	f7f4 fc28 	bl	800354c <HAL_GetTick>
 800ecfc:	4602      	mov	r2, r0
 800ecfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed00:	1ad3      	subs	r3, r2, r3
 800ed02:	2b02      	cmp	r3, #2
 800ed04:	d901      	bls.n	800ed0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e280      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ed0a:	4b55      	ldr	r3, [pc, #340]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d0f0      	beq.n	800ecf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ed16:	f7f4 fc49 	bl	80035ac <HAL_GetREVID>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d817      	bhi.n	800ed54 <HAL_RCC_OscConfig+0x3ec>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a1b      	ldr	r3, [r3, #32]
 800ed28:	2b20      	cmp	r3, #32
 800ed2a:	d108      	bne.n	800ed3e <HAL_RCC_OscConfig+0x3d6>
 800ed2c:	4b4c      	ldr	r3, [pc, #304]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800ed34:	4a4a      	ldr	r2, [pc, #296]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed36:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ed3a:	6053      	str	r3, [r2, #4]
 800ed3c:	e02e      	b.n	800ed9c <HAL_RCC_OscConfig+0x434>
 800ed3e:	4b48      	ldr	r3, [pc, #288]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a1b      	ldr	r3, [r3, #32]
 800ed4a:	069b      	lsls	r3, r3, #26
 800ed4c:	4944      	ldr	r1, [pc, #272]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	604b      	str	r3, [r1, #4]
 800ed52:	e023      	b.n	800ed9c <HAL_RCC_OscConfig+0x434>
 800ed54:	4b42      	ldr	r3, [pc, #264]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed56:	68db      	ldr	r3, [r3, #12]
 800ed58:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6a1b      	ldr	r3, [r3, #32]
 800ed60:	061b      	lsls	r3, r3, #24
 800ed62:	493f      	ldr	r1, [pc, #252]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed64:	4313      	orrs	r3, r2
 800ed66:	60cb      	str	r3, [r1, #12]
 800ed68:	e018      	b.n	800ed9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ed6a:	4b3d      	ldr	r3, [pc, #244]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a3c      	ldr	r2, [pc, #240]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed76:	f7f4 fbe9 	bl	800354c <HAL_GetTick>
 800ed7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ed7c:	e008      	b.n	800ed90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ed7e:	f7f4 fbe5 	bl	800354c <HAL_GetTick>
 800ed82:	4602      	mov	r2, r0
 800ed84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed86:	1ad3      	subs	r3, r2, r3
 800ed88:	2b02      	cmp	r3, #2
 800ed8a:	d901      	bls.n	800ed90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	e23d      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ed90:	4b33      	ldr	r3, [pc, #204]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1f0      	bne.n	800ed7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f003 0308 	and.w	r3, r3, #8
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d036      	beq.n	800ee16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d019      	beq.n	800ede4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800edb0:	4b2b      	ldr	r3, [pc, #172]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800edb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edb4:	4a2a      	ldr	r2, [pc, #168]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800edb6:	f043 0301 	orr.w	r3, r3, #1
 800edba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edbc:	f7f4 fbc6 	bl	800354c <HAL_GetTick>
 800edc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800edc2:	e008      	b.n	800edd6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800edc4:	f7f4 fbc2 	bl	800354c <HAL_GetTick>
 800edc8:	4602      	mov	r2, r0
 800edca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	2b02      	cmp	r3, #2
 800edd0:	d901      	bls.n	800edd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800edd2:	2303      	movs	r3, #3
 800edd4:	e21a      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800edd6:	4b22      	ldr	r3, [pc, #136]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800edd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edda:	f003 0302 	and.w	r3, r3, #2
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d0f0      	beq.n	800edc4 <HAL_RCC_OscConfig+0x45c>
 800ede2:	e018      	b.n	800ee16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ede4:	4b1e      	ldr	r3, [pc, #120]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ede6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ede8:	4a1d      	ldr	r2, [pc, #116]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800edea:	f023 0301 	bic.w	r3, r3, #1
 800edee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edf0:	f7f4 fbac 	bl	800354c <HAL_GetTick>
 800edf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800edf6:	e008      	b.n	800ee0a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800edf8:	f7f4 fba8 	bl	800354c <HAL_GetTick>
 800edfc:	4602      	mov	r2, r0
 800edfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee00:	1ad3      	subs	r3, r2, r3
 800ee02:	2b02      	cmp	r3, #2
 800ee04:	d901      	bls.n	800ee0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ee06:	2303      	movs	r3, #3
 800ee08:	e200      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ee0a:	4b15      	ldr	r3, [pc, #84]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ee0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee0e:	f003 0302 	and.w	r3, r3, #2
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d1f0      	bne.n	800edf8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f003 0320 	and.w	r3, r3, #32
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d039      	beq.n	800ee96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d01c      	beq.n	800ee64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ee2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ee30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ee34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ee36:	f7f4 fb89 	bl	800354c <HAL_GetTick>
 800ee3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ee3c:	e008      	b.n	800ee50 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ee3e:	f7f4 fb85 	bl	800354c <HAL_GetTick>
 800ee42:	4602      	mov	r2, r0
 800ee44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d901      	bls.n	800ee50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800ee4c:	2303      	movs	r3, #3
 800ee4e:	e1dd      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ee50:	4b03      	ldr	r3, [pc, #12]	@ (800ee60 <HAL_RCC_OscConfig+0x4f8>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d0f0      	beq.n	800ee3e <HAL_RCC_OscConfig+0x4d6>
 800ee5c:	e01b      	b.n	800ee96 <HAL_RCC_OscConfig+0x52e>
 800ee5e:	bf00      	nop
 800ee60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ee64:	4b9b      	ldr	r3, [pc, #620]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4a9a      	ldr	r2, [pc, #616]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ee6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ee70:	f7f4 fb6c 	bl	800354c <HAL_GetTick>
 800ee74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee76:	e008      	b.n	800ee8a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ee78:	f7f4 fb68 	bl	800354c <HAL_GetTick>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	d901      	bls.n	800ee8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800ee86:	2303      	movs	r3, #3
 800ee88:	e1c0      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ee8a:	4b92      	ldr	r3, [pc, #584]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1f0      	bne.n	800ee78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f003 0304 	and.w	r3, r3, #4
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	f000 8081 	beq.w	800efa6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eea4:	4b8c      	ldr	r3, [pc, #560]	@ (800f0d8 <HAL_RCC_OscConfig+0x770>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a8b      	ldr	r2, [pc, #556]	@ (800f0d8 <HAL_RCC_OscConfig+0x770>)
 800eeaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eeae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800eeb0:	f7f4 fb4c 	bl	800354c <HAL_GetTick>
 800eeb4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eeb6:	e008      	b.n	800eeca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800eeb8:	f7f4 fb48 	bl	800354c <HAL_GetTick>
 800eebc:	4602      	mov	r2, r0
 800eebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eec0:	1ad3      	subs	r3, r2, r3
 800eec2:	2b64      	cmp	r3, #100	@ 0x64
 800eec4:	d901      	bls.n	800eeca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800eec6:	2303      	movs	r3, #3
 800eec8:	e1a0      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eeca:	4b83      	ldr	r3, [pc, #524]	@ (800f0d8 <HAL_RCC_OscConfig+0x770>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d0f0      	beq.n	800eeb8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d106      	bne.n	800eeec <HAL_RCC_OscConfig+0x584>
 800eede:	4b7d      	ldr	r3, [pc, #500]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800eee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eee2:	4a7c      	ldr	r2, [pc, #496]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800eee4:	f043 0301 	orr.w	r3, r3, #1
 800eee8:	6713      	str	r3, [r2, #112]	@ 0x70
 800eeea:	e02d      	b.n	800ef48 <HAL_RCC_OscConfig+0x5e0>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d10c      	bne.n	800ef0e <HAL_RCC_OscConfig+0x5a6>
 800eef4:	4b77      	ldr	r3, [pc, #476]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800eef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eef8:	4a76      	ldr	r2, [pc, #472]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800eefa:	f023 0301 	bic.w	r3, r3, #1
 800eefe:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef00:	4b74      	ldr	r3, [pc, #464]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef04:	4a73      	ldr	r2, [pc, #460]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef06:	f023 0304 	bic.w	r3, r3, #4
 800ef0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef0c:	e01c      	b.n	800ef48 <HAL_RCC_OscConfig+0x5e0>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	d10c      	bne.n	800ef30 <HAL_RCC_OscConfig+0x5c8>
 800ef16:	4b6f      	ldr	r3, [pc, #444]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef1a:	4a6e      	ldr	r2, [pc, #440]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef1c:	f043 0304 	orr.w	r3, r3, #4
 800ef20:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef22:	4b6c      	ldr	r3, [pc, #432]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef26:	4a6b      	ldr	r2, [pc, #428]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef28:	f043 0301 	orr.w	r3, r3, #1
 800ef2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef2e:	e00b      	b.n	800ef48 <HAL_RCC_OscConfig+0x5e0>
 800ef30:	4b68      	ldr	r3, [pc, #416]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef34:	4a67      	ldr	r2, [pc, #412]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef36:	f023 0301 	bic.w	r3, r3, #1
 800ef3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ef3c:	4b65      	ldr	r3, [pc, #404]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef40:	4a64      	ldr	r2, [pc, #400]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef42:	f023 0304 	bic.w	r3, r3, #4
 800ef46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	689b      	ldr	r3, [r3, #8]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d015      	beq.n	800ef7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef50:	f7f4 fafc 	bl	800354c <HAL_GetTick>
 800ef54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef56:	e00a      	b.n	800ef6e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef58:	f7f4 faf8 	bl	800354c <HAL_GetTick>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d901      	bls.n	800ef6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800ef6a:	2303      	movs	r3, #3
 800ef6c:	e14e      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ef6e:	4b59      	ldr	r3, [pc, #356]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef72:	f003 0302 	and.w	r3, r3, #2
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d0ee      	beq.n	800ef58 <HAL_RCC_OscConfig+0x5f0>
 800ef7a:	e014      	b.n	800efa6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ef7c:	f7f4 fae6 	bl	800354c <HAL_GetTick>
 800ef80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ef82:	e00a      	b.n	800ef9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ef84:	f7f4 fae2 	bl	800354c <HAL_GetTick>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d901      	bls.n	800ef9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ef96:	2303      	movs	r3, #3
 800ef98:	e138      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ef9a:	4b4e      	ldr	r3, [pc, #312]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800ef9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef9e:	f003 0302 	and.w	r3, r3, #2
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d1ee      	bne.n	800ef84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efaa:	2b00      	cmp	r3, #0
 800efac:	f000 812d 	beq.w	800f20a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800efb0:	4b48      	ldr	r3, [pc, #288]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800efb8:	2b18      	cmp	r3, #24
 800efba:	f000 80bd 	beq.w	800f138 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc2:	2b02      	cmp	r3, #2
 800efc4:	f040 809e 	bne.w	800f104 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800efc8:	4b42      	ldr	r3, [pc, #264]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	4a41      	ldr	r2, [pc, #260]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800efce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800efd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800efd4:	f7f4 faba 	bl	800354c <HAL_GetTick>
 800efd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800efda:	e008      	b.n	800efee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efdc:	f7f4 fab6 	bl	800354c <HAL_GetTick>
 800efe0:	4602      	mov	r2, r0
 800efe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	2b02      	cmp	r3, #2
 800efe8:	d901      	bls.n	800efee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800efea:	2303      	movs	r3, #3
 800efec:	e10e      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800efee:	4b39      	ldr	r3, [pc, #228]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1f0      	bne.n	800efdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800effa:	4b36      	ldr	r3, [pc, #216]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800effc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800effe:	4b37      	ldr	r3, [pc, #220]	@ (800f0dc <HAL_RCC_OscConfig+0x774>)
 800f000:	4013      	ands	r3, r2
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800f006:	687a      	ldr	r2, [r7, #4]
 800f008:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f00a:	0112      	lsls	r2, r2, #4
 800f00c:	430a      	orrs	r2, r1
 800f00e:	4931      	ldr	r1, [pc, #196]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f010:	4313      	orrs	r3, r2
 800f012:	628b      	str	r3, [r1, #40]	@ 0x28
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f018:	3b01      	subs	r3, #1
 800f01a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f022:	3b01      	subs	r3, #1
 800f024:	025b      	lsls	r3, r3, #9
 800f026:	b29b      	uxth	r3, r3
 800f028:	431a      	orrs	r2, r3
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f02e:	3b01      	subs	r3, #1
 800f030:	041b      	lsls	r3, r3, #16
 800f032:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f036:	431a      	orrs	r2, r3
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f03c:	3b01      	subs	r3, #1
 800f03e:	061b      	lsls	r3, r3, #24
 800f040:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f044:	4923      	ldr	r1, [pc, #140]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f046:	4313      	orrs	r3, r2
 800f048:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f04a:	4b22      	ldr	r3, [pc, #136]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f04e:	4a21      	ldr	r2, [pc, #132]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f050:	f023 0301 	bic.w	r3, r3, #1
 800f054:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f056:	4b1f      	ldr	r3, [pc, #124]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f05a:	4b21      	ldr	r3, [pc, #132]	@ (800f0e0 <HAL_RCC_OscConfig+0x778>)
 800f05c:	4013      	ands	r3, r2
 800f05e:	687a      	ldr	r2, [r7, #4]
 800f060:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f062:	00d2      	lsls	r2, r2, #3
 800f064:	491b      	ldr	r1, [pc, #108]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f066:	4313      	orrs	r3, r2
 800f068:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f06a:	4b1a      	ldr	r3, [pc, #104]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f06e:	f023 020c 	bic.w	r2, r3, #12
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f076:	4917      	ldr	r1, [pc, #92]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f078:	4313      	orrs	r3, r2
 800f07a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f07c:	4b15      	ldr	r3, [pc, #84]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f080:	f023 0202 	bic.w	r2, r3, #2
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f088:	4912      	ldr	r1, [pc, #72]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f08a:	4313      	orrs	r3, r2
 800f08c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f08e:	4b11      	ldr	r3, [pc, #68]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f092:	4a10      	ldr	r2, [pc, #64]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f098:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f09a:	4b0e      	ldr	r3, [pc, #56]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f09e:	4a0d      	ldr	r2, [pc, #52]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f0a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f0a6:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0aa:	4a0a      	ldr	r2, [pc, #40]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f0b2:	4b08      	ldr	r3, [pc, #32]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0b6:	4a07      	ldr	r2, [pc, #28]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0b8:	f043 0301 	orr.w	r3, r3, #1
 800f0bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f0be:	4b05      	ldr	r3, [pc, #20]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	4a04      	ldr	r2, [pc, #16]	@ (800f0d4 <HAL_RCC_OscConfig+0x76c>)
 800f0c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0ca:	f7f4 fa3f 	bl	800354c <HAL_GetTick>
 800f0ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f0d0:	e011      	b.n	800f0f6 <HAL_RCC_OscConfig+0x78e>
 800f0d2:	bf00      	nop
 800f0d4:	58024400 	.word	0x58024400
 800f0d8:	58024800 	.word	0x58024800
 800f0dc:	fffffc0c 	.word	0xfffffc0c
 800f0e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f0e4:	f7f4 fa32 	bl	800354c <HAL_GetTick>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	2b02      	cmp	r3, #2
 800f0f0:	d901      	bls.n	800f0f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	e08a      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f0f6:	4b47      	ldr	r3, [pc, #284]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0f0      	beq.n	800f0e4 <HAL_RCC_OscConfig+0x77c>
 800f102:	e082      	b.n	800f20a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f104:	4b43      	ldr	r3, [pc, #268]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a42      	ldr	r2, [pc, #264]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f10a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f110:	f7f4 fa1c 	bl	800354c <HAL_GetTick>
 800f114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f116:	e008      	b.n	800f12a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f118:	f7f4 fa18 	bl	800354c <HAL_GetTick>
 800f11c:	4602      	mov	r2, r0
 800f11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f120:	1ad3      	subs	r3, r2, r3
 800f122:	2b02      	cmp	r3, #2
 800f124:	d901      	bls.n	800f12a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f126:	2303      	movs	r3, #3
 800f128:	e070      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f12a:	4b3a      	ldr	r3, [pc, #232]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f132:	2b00      	cmp	r3, #0
 800f134:	d1f0      	bne.n	800f118 <HAL_RCC_OscConfig+0x7b0>
 800f136:	e068      	b.n	800f20a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f138:	4b36      	ldr	r3, [pc, #216]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f13a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f13c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f13e:	4b35      	ldr	r3, [pc, #212]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f142:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d031      	beq.n	800f1b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f14c:	693b      	ldr	r3, [r7, #16]
 800f14e:	f003 0203 	and.w	r2, r3, #3
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f156:	429a      	cmp	r2, r3
 800f158:	d12a      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	091b      	lsrs	r3, r3, #4
 800f15e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f166:	429a      	cmp	r2, r3
 800f168:	d122      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f174:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f176:	429a      	cmp	r2, r3
 800f178:	d11a      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	0a5b      	lsrs	r3, r3, #9
 800f17e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f186:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f188:	429a      	cmp	r2, r3
 800f18a:	d111      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	0c1b      	lsrs	r3, r3, #16
 800f190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f198:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d108      	bne.n	800f1b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	0e1b      	lsrs	r3, r3, #24
 800f1a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d001      	beq.n	800f1b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f1b0:	2301      	movs	r3, #1
 800f1b2:	e02b      	b.n	800f20c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f1b4:	4b17      	ldr	r3, [pc, #92]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f1b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1b8:	08db      	lsrs	r3, r3, #3
 800f1ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f1be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d01f      	beq.n	800f20a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f1ca:	4b12      	ldr	r3, [pc, #72]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1ce:	4a11      	ldr	r2, [pc, #68]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f1d0:	f023 0301 	bic.w	r3, r3, #1
 800f1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f1d6:	f7f4 f9b9 	bl	800354c <HAL_GetTick>
 800f1da:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f1dc:	bf00      	nop
 800f1de:	f7f4 f9b5 	bl	800354c <HAL_GetTick>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d0f9      	beq.n	800f1de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f1ea:	4b0a      	ldr	r3, [pc, #40]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f1ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1ee:	4b0a      	ldr	r3, [pc, #40]	@ (800f218 <HAL_RCC_OscConfig+0x8b0>)
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800f1f6:	00d2      	lsls	r2, r2, #3
 800f1f8:	4906      	ldr	r1, [pc, #24]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f1fe:	4b05      	ldr	r3, [pc, #20]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f202:	4a04      	ldr	r2, [pc, #16]	@ (800f214 <HAL_RCC_OscConfig+0x8ac>)
 800f204:	f043 0301 	orr.w	r3, r3, #1
 800f208:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3730      	adds	r7, #48	@ 0x30
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	58024400 	.word	0x58024400
 800f218:	ffff0007 	.word	0xffff0007

0800f21c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d101      	bne.n	800f230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f22c:	2301      	movs	r3, #1
 800f22e:	e19c      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f230:	4b8a      	ldr	r3, [pc, #552]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f003 030f 	and.w	r3, r3, #15
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d910      	bls.n	800f260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f23e:	4b87      	ldr	r3, [pc, #540]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f023 020f 	bic.w	r2, r3, #15
 800f246:	4985      	ldr	r1, [pc, #532]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f24e:	4b83      	ldr	r3, [pc, #524]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f003 030f 	and.w	r3, r3, #15
 800f256:	683a      	ldr	r2, [r7, #0]
 800f258:	429a      	cmp	r2, r3
 800f25a:	d001      	beq.n	800f260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	e184      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f003 0304 	and.w	r3, r3, #4
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d010      	beq.n	800f28e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	691a      	ldr	r2, [r3, #16]
 800f270:	4b7b      	ldr	r3, [pc, #492]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f272:	699b      	ldr	r3, [r3, #24]
 800f274:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f278:	429a      	cmp	r2, r3
 800f27a:	d908      	bls.n	800f28e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f27c:	4b78      	ldr	r3, [pc, #480]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f27e:	699b      	ldr	r3, [r3, #24]
 800f280:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	691b      	ldr	r3, [r3, #16]
 800f288:	4975      	ldr	r1, [pc, #468]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f28a:	4313      	orrs	r3, r2
 800f28c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	f003 0308 	and.w	r3, r3, #8
 800f296:	2b00      	cmp	r3, #0
 800f298:	d010      	beq.n	800f2bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	695a      	ldr	r2, [r3, #20]
 800f29e:	4b70      	ldr	r3, [pc, #448]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2a0:	69db      	ldr	r3, [r3, #28]
 800f2a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d908      	bls.n	800f2bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f2aa:	4b6d      	ldr	r3, [pc, #436]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2ac:	69db      	ldr	r3, [r3, #28]
 800f2ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	695b      	ldr	r3, [r3, #20]
 800f2b6:	496a      	ldr	r1, [pc, #424]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f003 0310 	and.w	r3, r3, #16
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d010      	beq.n	800f2ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	699a      	ldr	r2, [r3, #24]
 800f2cc:	4b64      	ldr	r3, [pc, #400]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d908      	bls.n	800f2ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f2d8:	4b61      	ldr	r3, [pc, #388]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2da:	69db      	ldr	r3, [r3, #28]
 800f2dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	699b      	ldr	r3, [r3, #24]
 800f2e4:	495e      	ldr	r1, [pc, #376]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f003 0320 	and.w	r3, r3, #32
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d010      	beq.n	800f318 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	69da      	ldr	r2, [r3, #28]
 800f2fa:	4b59      	ldr	r3, [pc, #356]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f302:	429a      	cmp	r2, r3
 800f304:	d908      	bls.n	800f318 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f306:	4b56      	ldr	r3, [pc, #344]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	69db      	ldr	r3, [r3, #28]
 800f312:	4953      	ldr	r1, [pc, #332]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f314:	4313      	orrs	r3, r2
 800f316:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	f003 0302 	and.w	r3, r3, #2
 800f320:	2b00      	cmp	r3, #0
 800f322:	d010      	beq.n	800f346 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	68da      	ldr	r2, [r3, #12]
 800f328:	4b4d      	ldr	r3, [pc, #308]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f32a:	699b      	ldr	r3, [r3, #24]
 800f32c:	f003 030f 	and.w	r3, r3, #15
 800f330:	429a      	cmp	r2, r3
 800f332:	d908      	bls.n	800f346 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f334:	4b4a      	ldr	r3, [pc, #296]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f336:	699b      	ldr	r3, [r3, #24]
 800f338:	f023 020f 	bic.w	r2, r3, #15
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	4947      	ldr	r1, [pc, #284]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f342:	4313      	orrs	r3, r2
 800f344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d055      	beq.n	800f3fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800f352:	4b43      	ldr	r3, [pc, #268]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	689b      	ldr	r3, [r3, #8]
 800f35e:	4940      	ldr	r1, [pc, #256]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f360:	4313      	orrs	r3, r2
 800f362:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d107      	bne.n	800f37c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f36c:	4b3c      	ldr	r3, [pc, #240]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d121      	bne.n	800f3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f378:	2301      	movs	r3, #1
 800f37a:	e0f6      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	685b      	ldr	r3, [r3, #4]
 800f380:	2b03      	cmp	r3, #3
 800f382:	d107      	bne.n	800f394 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f384:	4b36      	ldr	r3, [pc, #216]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d115      	bne.n	800f3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f390:	2301      	movs	r3, #1
 800f392:	e0ea      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d107      	bne.n	800f3ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f39c:	4b30      	ldr	r3, [pc, #192]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d109      	bne.n	800f3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	e0de      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f3ac:	4b2c      	ldr	r3, [pc, #176]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 0304 	and.w	r3, r3, #4
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e0d6      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f3bc:	4b28      	ldr	r3, [pc, #160]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f3be:	691b      	ldr	r3, [r3, #16]
 800f3c0:	f023 0207 	bic.w	r2, r3, #7
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	4925      	ldr	r1, [pc, #148]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f3ce:	f7f4 f8bd 	bl	800354c <HAL_GetTick>
 800f3d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3d4:	e00a      	b.n	800f3ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3d6:	f7f4 f8b9 	bl	800354c <HAL_GetTick>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d901      	bls.n	800f3ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800f3e8:	2303      	movs	r3, #3
 800f3ea:	e0be      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3ec:	4b1c      	ldr	r3, [pc, #112]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f3ee:	691b      	ldr	r3, [r3, #16]
 800f3f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	00db      	lsls	r3, r3, #3
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d1eb      	bne.n	800f3d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f003 0302 	and.w	r3, r3, #2
 800f406:	2b00      	cmp	r3, #0
 800f408:	d010      	beq.n	800f42c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	68da      	ldr	r2, [r3, #12]
 800f40e:	4b14      	ldr	r3, [pc, #80]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f410:	699b      	ldr	r3, [r3, #24]
 800f412:	f003 030f 	and.w	r3, r3, #15
 800f416:	429a      	cmp	r2, r3
 800f418:	d208      	bcs.n	800f42c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f41a:	4b11      	ldr	r3, [pc, #68]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f41c:	699b      	ldr	r3, [r3, #24]
 800f41e:	f023 020f 	bic.w	r2, r3, #15
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	490e      	ldr	r1, [pc, #56]	@ (800f460 <HAL_RCC_ClockConfig+0x244>)
 800f428:	4313      	orrs	r3, r2
 800f42a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f42c:	4b0b      	ldr	r3, [pc, #44]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f003 030f 	and.w	r3, r3, #15
 800f434:	683a      	ldr	r2, [r7, #0]
 800f436:	429a      	cmp	r2, r3
 800f438:	d214      	bcs.n	800f464 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f43a:	4b08      	ldr	r3, [pc, #32]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	f023 020f 	bic.w	r2, r3, #15
 800f442:	4906      	ldr	r1, [pc, #24]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	4313      	orrs	r3, r2
 800f448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f44a:	4b04      	ldr	r3, [pc, #16]	@ (800f45c <HAL_RCC_ClockConfig+0x240>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f003 030f 	and.w	r3, r3, #15
 800f452:	683a      	ldr	r2, [r7, #0]
 800f454:	429a      	cmp	r2, r3
 800f456:	d005      	beq.n	800f464 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f458:	2301      	movs	r3, #1
 800f45a:	e086      	b.n	800f56a <HAL_RCC_ClockConfig+0x34e>
 800f45c:	52002000 	.word	0x52002000
 800f460:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f003 0304 	and.w	r3, r3, #4
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d010      	beq.n	800f492 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	691a      	ldr	r2, [r3, #16]
 800f474:	4b3f      	ldr	r3, [pc, #252]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f476:	699b      	ldr	r3, [r3, #24]
 800f478:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f47c:	429a      	cmp	r2, r3
 800f47e:	d208      	bcs.n	800f492 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f480:	4b3c      	ldr	r3, [pc, #240]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	691b      	ldr	r3, [r3, #16]
 800f48c:	4939      	ldr	r1, [pc, #228]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f48e:	4313      	orrs	r3, r2
 800f490:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f003 0308 	and.w	r3, r3, #8
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d010      	beq.n	800f4c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	695a      	ldr	r2, [r3, #20]
 800f4a2:	4b34      	ldr	r3, [pc, #208]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f4a4:	69db      	ldr	r3, [r3, #28]
 800f4a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f4aa:	429a      	cmp	r2, r3
 800f4ac:	d208      	bcs.n	800f4c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f4ae:	4b31      	ldr	r3, [pc, #196]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f4b0:	69db      	ldr	r3, [r3, #28]
 800f4b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	695b      	ldr	r3, [r3, #20]
 800f4ba:	492e      	ldr	r1, [pc, #184]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f003 0310 	and.w	r3, r3, #16
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d010      	beq.n	800f4ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	699a      	ldr	r2, [r3, #24]
 800f4d0:	4b28      	ldr	r3, [pc, #160]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d208      	bcs.n	800f4ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f4dc:	4b25      	ldr	r3, [pc, #148]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f4de:	69db      	ldr	r3, [r3, #28]
 800f4e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	4922      	ldr	r1, [pc, #136]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f003 0320 	and.w	r3, r3, #32
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d010      	beq.n	800f51c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	69da      	ldr	r2, [r3, #28]
 800f4fe:	4b1d      	ldr	r3, [pc, #116]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800f506:	429a      	cmp	r2, r3
 800f508:	d208      	bcs.n	800f51c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800f50a:	4b1a      	ldr	r3, [pc, #104]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f50c:	6a1b      	ldr	r3, [r3, #32]
 800f50e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	4917      	ldr	r1, [pc, #92]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f518:	4313      	orrs	r3, r2
 800f51a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f51c:	f000 f834 	bl	800f588 <HAL_RCC_GetSysClockFreq>
 800f520:	4602      	mov	r2, r0
 800f522:	4b14      	ldr	r3, [pc, #80]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f524:	699b      	ldr	r3, [r3, #24]
 800f526:	0a1b      	lsrs	r3, r3, #8
 800f528:	f003 030f 	and.w	r3, r3, #15
 800f52c:	4912      	ldr	r1, [pc, #72]	@ (800f578 <HAL_RCC_ClockConfig+0x35c>)
 800f52e:	5ccb      	ldrb	r3, [r1, r3]
 800f530:	f003 031f 	and.w	r3, r3, #31
 800f534:	fa22 f303 	lsr.w	r3, r2, r3
 800f538:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f53a:	4b0e      	ldr	r3, [pc, #56]	@ (800f574 <HAL_RCC_ClockConfig+0x358>)
 800f53c:	699b      	ldr	r3, [r3, #24]
 800f53e:	f003 030f 	and.w	r3, r3, #15
 800f542:	4a0d      	ldr	r2, [pc, #52]	@ (800f578 <HAL_RCC_ClockConfig+0x35c>)
 800f544:	5cd3      	ldrb	r3, [r2, r3]
 800f546:	f003 031f 	and.w	r3, r3, #31
 800f54a:	693a      	ldr	r2, [r7, #16]
 800f54c:	fa22 f303 	lsr.w	r3, r2, r3
 800f550:	4a0a      	ldr	r2, [pc, #40]	@ (800f57c <HAL_RCC_ClockConfig+0x360>)
 800f552:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f554:	4a0a      	ldr	r2, [pc, #40]	@ (800f580 <HAL_RCC_ClockConfig+0x364>)
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800f55a:	4b0a      	ldr	r3, [pc, #40]	@ (800f584 <HAL_RCC_ClockConfig+0x368>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7f3 ffaa 	bl	80034b8 <HAL_InitTick>
 800f564:	4603      	mov	r3, r0
 800f566:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3718      	adds	r7, #24
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
 800f572:	bf00      	nop
 800f574:	58024400 	.word	0x58024400
 800f578:	0801d5f4 	.word	0x0801d5f4
 800f57c:	24000244 	.word	0x24000244
 800f580:	24000240 	.word	0x24000240
 800f584:	24000248 	.word	0x24000248

0800f588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f588:	b480      	push	{r7}
 800f58a:	b089      	sub	sp, #36	@ 0x24
 800f58c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f58e:	4bb3      	ldr	r3, [pc, #716]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f590:	691b      	ldr	r3, [r3, #16]
 800f592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f596:	2b18      	cmp	r3, #24
 800f598:	f200 8155 	bhi.w	800f846 <HAL_RCC_GetSysClockFreq+0x2be>
 800f59c:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a2:	bf00      	nop
 800f5a4:	0800f609 	.word	0x0800f609
 800f5a8:	0800f847 	.word	0x0800f847
 800f5ac:	0800f847 	.word	0x0800f847
 800f5b0:	0800f847 	.word	0x0800f847
 800f5b4:	0800f847 	.word	0x0800f847
 800f5b8:	0800f847 	.word	0x0800f847
 800f5bc:	0800f847 	.word	0x0800f847
 800f5c0:	0800f847 	.word	0x0800f847
 800f5c4:	0800f62f 	.word	0x0800f62f
 800f5c8:	0800f847 	.word	0x0800f847
 800f5cc:	0800f847 	.word	0x0800f847
 800f5d0:	0800f847 	.word	0x0800f847
 800f5d4:	0800f847 	.word	0x0800f847
 800f5d8:	0800f847 	.word	0x0800f847
 800f5dc:	0800f847 	.word	0x0800f847
 800f5e0:	0800f847 	.word	0x0800f847
 800f5e4:	0800f635 	.word	0x0800f635
 800f5e8:	0800f847 	.word	0x0800f847
 800f5ec:	0800f847 	.word	0x0800f847
 800f5f0:	0800f847 	.word	0x0800f847
 800f5f4:	0800f847 	.word	0x0800f847
 800f5f8:	0800f847 	.word	0x0800f847
 800f5fc:	0800f847 	.word	0x0800f847
 800f600:	0800f847 	.word	0x0800f847
 800f604:	0800f63b 	.word	0x0800f63b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f608:	4b94      	ldr	r3, [pc, #592]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f003 0320 	and.w	r3, r3, #32
 800f610:	2b00      	cmp	r3, #0
 800f612:	d009      	beq.n	800f628 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f614:	4b91      	ldr	r3, [pc, #580]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	08db      	lsrs	r3, r3, #3
 800f61a:	f003 0303 	and.w	r3, r3, #3
 800f61e:	4a90      	ldr	r2, [pc, #576]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f620:	fa22 f303 	lsr.w	r3, r2, r3
 800f624:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800f626:	e111      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f628:	4b8d      	ldr	r3, [pc, #564]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f62a:	61bb      	str	r3, [r7, #24]
      break;
 800f62c:	e10e      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800f62e:	4b8d      	ldr	r3, [pc, #564]	@ (800f864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f630:	61bb      	str	r3, [r7, #24]
      break;
 800f632:	e10b      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800f634:	4b8c      	ldr	r3, [pc, #560]	@ (800f868 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f636:	61bb      	str	r3, [r7, #24]
      break;
 800f638:	e108      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f63a:	4b88      	ldr	r3, [pc, #544]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f63e:	f003 0303 	and.w	r3, r3, #3
 800f642:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800f644:	4b85      	ldr	r3, [pc, #532]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f648:	091b      	lsrs	r3, r3, #4
 800f64a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f64e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f650:	4b82      	ldr	r3, [pc, #520]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f654:	f003 0301 	and.w	r3, r3, #1
 800f658:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f65a:	4b80      	ldr	r3, [pc, #512]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f65e:	08db      	lsrs	r3, r3, #3
 800f660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f664:	68fa      	ldr	r2, [r7, #12]
 800f666:	fb02 f303 	mul.w	r3, r2, r3
 800f66a:	ee07 3a90 	vmov	s15, r3
 800f66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f672:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f000 80e1 	beq.w	800f840 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800f67e:	697b      	ldr	r3, [r7, #20]
 800f680:	2b02      	cmp	r3, #2
 800f682:	f000 8083 	beq.w	800f78c <HAL_RCC_GetSysClockFreq+0x204>
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	2b02      	cmp	r3, #2
 800f68a:	f200 80a1 	bhi.w	800f7d0 <HAL_RCC_GetSysClockFreq+0x248>
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d003      	beq.n	800f69c <HAL_RCC_GetSysClockFreq+0x114>
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d056      	beq.n	800f748 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f69a:	e099      	b.n	800f7d0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f69c:	4b6f      	ldr	r3, [pc, #444]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f003 0320 	and.w	r3, r3, #32
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d02d      	beq.n	800f704 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f6a8:	4b6c      	ldr	r3, [pc, #432]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	08db      	lsrs	r3, r3, #3
 800f6ae:	f003 0303 	and.w	r3, r3, #3
 800f6b2:	4a6b      	ldr	r2, [pc, #428]	@ (800f860 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800f6b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	ee07 3a90 	vmov	s15, r3
 800f6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	ee07 3a90 	vmov	s15, r3
 800f6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6d2:	4b62      	ldr	r3, [pc, #392]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6da:	ee07 3a90 	vmov	s15, r3
 800f6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f6e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800f86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800f702:	e087      	b.n	800f814 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	ee07 3a90 	vmov	s15, r3
 800f70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f70e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800f870 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f716:	4b51      	ldr	r3, [pc, #324]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f71e:	ee07 3a90 	vmov	s15, r3
 800f722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f726:	ed97 6a02 	vldr	s12, [r7, #8]
 800f72a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800f86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f746:	e065      	b.n	800f814 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	ee07 3a90 	vmov	s15, r3
 800f74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f752:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800f874 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f75a:	4b40      	ldr	r3, [pc, #256]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f75c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f762:	ee07 3a90 	vmov	s15, r3
 800f766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f76e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f77a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f78a:	e043      	b.n	800f814 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	ee07 3a90 	vmov	s15, r3
 800f792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f796:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800f878 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f79e:	4b2f      	ldr	r3, [pc, #188]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7a6:	ee07 3a90 	vmov	s15, r3
 800f7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800f7b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800f86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f7ce:	e021      	b.n	800f814 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	ee07 3a90 	vmov	s15, r3
 800f7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f874 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f7de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7e2:	4b1e      	ldr	r3, [pc, #120]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f7e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7ea:	ee07 3a90 	vmov	s15, r3
 800f7ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f7f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800f86c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f7fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f80a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f80e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800f812:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800f814:	4b11      	ldr	r3, [pc, #68]	@ (800f85c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f818:	0a5b      	lsrs	r3, r3, #9
 800f81a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f81e:	3301      	adds	r3, #1
 800f820:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	ee07 3a90 	vmov	s15, r3
 800f828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f82c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f838:	ee17 3a90 	vmov	r3, s15
 800f83c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800f83e:	e005      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800f840:	2300      	movs	r3, #0
 800f842:	61bb      	str	r3, [r7, #24]
      break;
 800f844:	e002      	b.n	800f84c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800f846:	4b07      	ldr	r3, [pc, #28]	@ (800f864 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f848:	61bb      	str	r3, [r7, #24]
      break;
 800f84a:	bf00      	nop
  }

  return sysclockfreq;
 800f84c:	69bb      	ldr	r3, [r7, #24]
}
 800f84e:	4618      	mov	r0, r3
 800f850:	3724      	adds	r7, #36	@ 0x24
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	58024400 	.word	0x58024400
 800f860:	03d09000 	.word	0x03d09000
 800f864:	003d0900 	.word	0x003d0900
 800f868:	017d7840 	.word	0x017d7840
 800f86c:	46000000 	.word	0x46000000
 800f870:	4c742400 	.word	0x4c742400
 800f874:	4a742400 	.word	0x4a742400
 800f878:	4bbebc20 	.word	0x4bbebc20

0800f87c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f882:	f7ff fe81 	bl	800f588 <HAL_RCC_GetSysClockFreq>
 800f886:	4602      	mov	r2, r0
 800f888:	4b10      	ldr	r3, [pc, #64]	@ (800f8cc <HAL_RCC_GetHCLKFreq+0x50>)
 800f88a:	699b      	ldr	r3, [r3, #24]
 800f88c:	0a1b      	lsrs	r3, r3, #8
 800f88e:	f003 030f 	and.w	r3, r3, #15
 800f892:	490f      	ldr	r1, [pc, #60]	@ (800f8d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f894:	5ccb      	ldrb	r3, [r1, r3]
 800f896:	f003 031f 	and.w	r3, r3, #31
 800f89a:	fa22 f303 	lsr.w	r3, r2, r3
 800f89e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f8a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f8cc <HAL_RCC_GetHCLKFreq+0x50>)
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	f003 030f 	and.w	r3, r3, #15
 800f8a8:	4a09      	ldr	r2, [pc, #36]	@ (800f8d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f8aa:	5cd3      	ldrb	r3, [r2, r3]
 800f8ac:	f003 031f 	and.w	r3, r3, #31
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f8b6:	4a07      	ldr	r2, [pc, #28]	@ (800f8d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f8b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f8ba:	4a07      	ldr	r2, [pc, #28]	@ (800f8d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f8c0:	4b04      	ldr	r3, [pc, #16]	@ (800f8d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	58024400 	.word	0x58024400
 800f8d0:	0801d5f4 	.word	0x0801d5f4
 800f8d4:	24000244 	.word	0x24000244
 800f8d8:	24000240 	.word	0x24000240

0800f8dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f8e0:	f7ff ffcc 	bl	800f87c <HAL_RCC_GetHCLKFreq>
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	4b06      	ldr	r3, [pc, #24]	@ (800f900 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f8e8:	69db      	ldr	r3, [r3, #28]
 800f8ea:	091b      	lsrs	r3, r3, #4
 800f8ec:	f003 0307 	and.w	r3, r3, #7
 800f8f0:	4904      	ldr	r1, [pc, #16]	@ (800f904 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f8f2:	5ccb      	ldrb	r3, [r1, r3]
 800f8f4:	f003 031f 	and.w	r3, r3, #31
 800f8f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	58024400 	.word	0x58024400
 800f904:	0801d5f4 	.word	0x0801d5f4

0800f908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f90c:	f7ff ffb6 	bl	800f87c <HAL_RCC_GetHCLKFreq>
 800f910:	4602      	mov	r2, r0
 800f912:	4b06      	ldr	r3, [pc, #24]	@ (800f92c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f914:	69db      	ldr	r3, [r3, #28]
 800f916:	0a1b      	lsrs	r3, r3, #8
 800f918:	f003 0307 	and.w	r3, r3, #7
 800f91c:	4904      	ldr	r1, [pc, #16]	@ (800f930 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f91e:	5ccb      	ldrb	r3, [r1, r3]
 800f920:	f003 031f 	and.w	r3, r3, #31
 800f924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f928:	4618      	mov	r0, r3
 800f92a:	bd80      	pop	{r7, pc}
 800f92c:	58024400 	.word	0x58024400
 800f930:	0801d5f4 	.word	0x0801d5f4

0800f934 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f938:	b0ca      	sub	sp, #296	@ 0x128
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f940:	2300      	movs	r3, #0
 800f942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f946:	2300      	movs	r3, #0
 800f948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f954:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800f958:	2500      	movs	r5, #0
 800f95a:	ea54 0305 	orrs.w	r3, r4, r5
 800f95e:	d049      	beq.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800f960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f966:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f96a:	d02f      	beq.n	800f9cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800f96c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f970:	d828      	bhi.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f972:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f976:	d01a      	beq.n	800f9ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800f978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f97c:	d822      	bhi.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d003      	beq.n	800f98a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800f982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f986:	d007      	beq.n	800f998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f988:	e01c      	b.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f98a:	4bb8      	ldr	r3, [pc, #736]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f98e:	4ab7      	ldr	r2, [pc, #732]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f996:	e01a      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f99c:	3308      	adds	r3, #8
 800f99e:	2102      	movs	r1, #2
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f002 fb61 	bl	8012068 <RCCEx_PLL2_Config>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f9ac:	e00f      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9b2:	3328      	adds	r3, #40	@ 0x28
 800f9b4:	2102      	movs	r1, #2
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f002 fc08 	bl	80121cc <RCCEx_PLL3_Config>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800f9c2:	e004      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f9ca:	e000      	b.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800f9cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d10a      	bne.n	800f9ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f9d6:	4ba5      	ldr	r3, [pc, #660]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f9d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f9e4:	4aa1      	ldr	r2, [pc, #644]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800f9e6:	430b      	orrs	r3, r1
 800f9e8:	6513      	str	r3, [r2, #80]	@ 0x50
 800f9ea:	e003      	b.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f9f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f9f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800fa00:	f04f 0900 	mov.w	r9, #0
 800fa04:	ea58 0309 	orrs.w	r3, r8, r9
 800fa08:	d047      	beq.n	800fa9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800fa0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa10:	2b04      	cmp	r3, #4
 800fa12:	d82a      	bhi.n	800fa6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800fa14:	a201      	add	r2, pc, #4	@ (adr r2, 800fa1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800fa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa1a:	bf00      	nop
 800fa1c:	0800fa31 	.word	0x0800fa31
 800fa20:	0800fa3f 	.word	0x0800fa3f
 800fa24:	0800fa55 	.word	0x0800fa55
 800fa28:	0800fa73 	.word	0x0800fa73
 800fa2c:	0800fa73 	.word	0x0800fa73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa30:	4b8e      	ldr	r3, [pc, #568]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fa32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa34:	4a8d      	ldr	r2, [pc, #564]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fa36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fa3c:	e01a      	b.n	800fa74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa42:	3308      	adds	r3, #8
 800fa44:	2100      	movs	r1, #0
 800fa46:	4618      	mov	r0, r3
 800fa48:	f002 fb0e 	bl	8012068 <RCCEx_PLL2_Config>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fa52:	e00f      	b.n	800fa74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa58:	3328      	adds	r3, #40	@ 0x28
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f002 fbb5 	bl	80121cc <RCCEx_PLL3_Config>
 800fa62:	4603      	mov	r3, r0
 800fa64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fa68:	e004      	b.n	800fa74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fa70:	e000      	b.n	800fa74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800fa72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d10a      	bne.n	800fa92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fa7c:	4b7b      	ldr	r3, [pc, #492]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fa7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa80:	f023 0107 	bic.w	r1, r3, #7
 800fa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fa8a:	4a78      	ldr	r2, [pc, #480]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	6513      	str	r3, [r2, #80]	@ 0x50
 800fa90:	e003      	b.n	800fa9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800fa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800faa6:	f04f 0b00 	mov.w	fp, #0
 800faaa:	ea5a 030b 	orrs.w	r3, sl, fp
 800faae:	d04c      	beq.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800fab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faba:	d030      	beq.n	800fb1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800fabc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fac0:	d829      	bhi.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800fac2:	2bc0      	cmp	r3, #192	@ 0xc0
 800fac4:	d02d      	beq.n	800fb22 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800fac6:	2bc0      	cmp	r3, #192	@ 0xc0
 800fac8:	d825      	bhi.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800faca:	2b80      	cmp	r3, #128	@ 0x80
 800facc:	d018      	beq.n	800fb00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800face:	2b80      	cmp	r3, #128	@ 0x80
 800fad0:	d821      	bhi.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d002      	beq.n	800fadc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800fad6:	2b40      	cmp	r3, #64	@ 0x40
 800fad8:	d007      	beq.n	800faea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800fada:	e01c      	b.n	800fb16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fadc:	4b63      	ldr	r3, [pc, #396]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fae0:	4a62      	ldr	r2, [pc, #392]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fae6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800fae8:	e01c      	b.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800faea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faee:	3308      	adds	r3, #8
 800faf0:	2100      	movs	r1, #0
 800faf2:	4618      	mov	r0, r3
 800faf4:	f002 fab8 	bl	8012068 <RCCEx_PLL2_Config>
 800faf8:	4603      	mov	r3, r0
 800fafa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800fafe:	e011      	b.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb04:	3328      	adds	r3, #40	@ 0x28
 800fb06:	2100      	movs	r1, #0
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f002 fb5f 	bl	80121cc <RCCEx_PLL3_Config>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800fb14:	e006      	b.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fb16:	2301      	movs	r3, #1
 800fb18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fb1c:	e002      	b.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800fb1e:	bf00      	nop
 800fb20:	e000      	b.n	800fb24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800fb22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fb24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10a      	bne.n	800fb42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800fb2c:	4b4f      	ldr	r3, [pc, #316]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fb2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fb30:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800fb34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fb3a:	4a4c      	ldr	r2, [pc, #304]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fb3c:	430b      	orrs	r3, r1
 800fb3e:	6513      	str	r3, [r2, #80]	@ 0x50
 800fb40:	e003      	b.n	800fb4a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fb42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fb46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800fb4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb52:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800fb56:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800fb60:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800fb64:	460b      	mov	r3, r1
 800fb66:	4313      	orrs	r3, r2
 800fb68:	d053      	beq.n	800fc12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800fb6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fb72:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb76:	d035      	beq.n	800fbe4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800fb78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fb7c:	d82e      	bhi.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800fb7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fb82:	d031      	beq.n	800fbe8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800fb84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800fb88:	d828      	bhi.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800fb8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb8e:	d01a      	beq.n	800fbc6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800fb90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800fb94:	d822      	bhi.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d003      	beq.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800fb9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800fb9e:	d007      	beq.n	800fbb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800fba0:	e01c      	b.n	800fbdc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fba2:	4b32      	ldr	r3, [pc, #200]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fba6:	4a31      	ldr	r2, [pc, #196]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fbac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fbae:	e01c      	b.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fbb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbb4:	3308      	adds	r3, #8
 800fbb6:	2100      	movs	r1, #0
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f002 fa55 	bl	8012068 <RCCEx_PLL2_Config>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800fbc4:	e011      	b.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbca:	3328      	adds	r3, #40	@ 0x28
 800fbcc:	2100      	movs	r1, #0
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f002 fafc 	bl	80121cc <RCCEx_PLL3_Config>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fbda:	e006      	b.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fbe2:	e002      	b.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800fbe4:	bf00      	nop
 800fbe6:	e000      	b.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800fbe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fbea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10b      	bne.n	800fc0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800fbf2:	4b1e      	ldr	r3, [pc, #120]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fbf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbf6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800fbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800fc02:	4a1a      	ldr	r2, [pc, #104]	@ (800fc6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800fc04:	430b      	orrs	r3, r1
 800fc06:	6593      	str	r3, [r2, #88]	@ 0x58
 800fc08:	e003      	b.n	800fc12 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800fc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800fc1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800fc22:	2300      	movs	r3, #0
 800fc24:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800fc28:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	d056      	beq.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800fc32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fc3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc3e:	d038      	beq.n	800fcb2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800fc40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fc44:	d831      	bhi.n	800fcaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800fc46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fc4a:	d034      	beq.n	800fcb6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800fc4c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800fc50:	d82b      	bhi.n	800fcaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800fc52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc56:	d01d      	beq.n	800fc94 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800fc58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fc5c:	d825      	bhi.n	800fcaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d006      	beq.n	800fc70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800fc62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fc66:	d00a      	beq.n	800fc7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800fc68:	e01f      	b.n	800fcaa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800fc6a:	bf00      	nop
 800fc6c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fc70:	4ba2      	ldr	r3, [pc, #648]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fc72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc74:	4aa1      	ldr	r2, [pc, #644]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fc76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fc7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fc7c:	e01c      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc82:	3308      	adds	r3, #8
 800fc84:	2100      	movs	r1, #0
 800fc86:	4618      	mov	r0, r3
 800fc88:	f002 f9ee 	bl	8012068 <RCCEx_PLL2_Config>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800fc92:	e011      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc98:	3328      	adds	r3, #40	@ 0x28
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f002 fa95 	bl	80121cc <RCCEx_PLL3_Config>
 800fca2:	4603      	mov	r3, r0
 800fca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800fca8:	e006      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fcb0:	e002      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800fcb2:	bf00      	nop
 800fcb4:	e000      	b.n	800fcb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800fcb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fcb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10b      	bne.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800fcc0:	4b8e      	ldr	r3, [pc, #568]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fcc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fcc4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800fcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fccc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800fcd0:	4a8a      	ldr	r2, [pc, #552]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fcd2:	430b      	orrs	r3, r1
 800fcd4:	6593      	str	r3, [r2, #88]	@ 0x58
 800fcd6:	e003      	b.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fcdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800fce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800fcec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800fcf6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	d03a      	beq.n	800fd76 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800fd00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd06:	2b30      	cmp	r3, #48	@ 0x30
 800fd08:	d01f      	beq.n	800fd4a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800fd0a:	2b30      	cmp	r3, #48	@ 0x30
 800fd0c:	d819      	bhi.n	800fd42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800fd0e:	2b20      	cmp	r3, #32
 800fd10:	d00c      	beq.n	800fd2c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800fd12:	2b20      	cmp	r3, #32
 800fd14:	d815      	bhi.n	800fd42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d019      	beq.n	800fd4e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800fd1a:	2b10      	cmp	r3, #16
 800fd1c:	d111      	bne.n	800fd42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fd1e:	4b77      	ldr	r3, [pc, #476]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd22:	4a76      	ldr	r2, [pc, #472]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fd24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fd28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800fd2a:	e011      	b.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fd2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd30:	3308      	adds	r3, #8
 800fd32:	2102      	movs	r1, #2
 800fd34:	4618      	mov	r0, r3
 800fd36:	f002 f997 	bl	8012068 <RCCEx_PLL2_Config>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800fd40:	e006      	b.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800fd42:	2301      	movs	r3, #1
 800fd44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fd48:	e002      	b.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800fd4a:	bf00      	nop
 800fd4c:	e000      	b.n	800fd50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800fd4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fd50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d10a      	bne.n	800fd6e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800fd58:	4b68      	ldr	r3, [pc, #416]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fd5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd5c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800fd60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd66:	4a65      	ldr	r2, [pc, #404]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fd68:	430b      	orrs	r3, r1
 800fd6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800fd6c:	e003      	b.n	800fd76 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800fd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800fd82:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800fd86:	2300      	movs	r3, #0
 800fd88:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800fd8c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800fd90:	460b      	mov	r3, r1
 800fd92:	4313      	orrs	r3, r2
 800fd94:	d051      	beq.n	800fe3a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800fd96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fd9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fd9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fda0:	d035      	beq.n	800fe0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800fda2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fda6:	d82e      	bhi.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fda8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fdac:	d031      	beq.n	800fe12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800fdae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800fdb2:	d828      	bhi.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fdb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fdb8:	d01a      	beq.n	800fdf0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800fdba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fdbe:	d822      	bhi.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d003      	beq.n	800fdcc <HAL_RCCEx_PeriphCLKConfig+0x498>
 800fdc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdc8:	d007      	beq.n	800fdda <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800fdca:	e01c      	b.n	800fe06 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fdcc:	4b4b      	ldr	r3, [pc, #300]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd0:	4a4a      	ldr	r2, [pc, #296]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fdd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fdd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fdd8:	e01c      	b.n	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdde:	3308      	adds	r3, #8
 800fde0:	2100      	movs	r1, #0
 800fde2:	4618      	mov	r0, r3
 800fde4:	f002 f940 	bl	8012068 <RCCEx_PLL2_Config>
 800fde8:	4603      	mov	r3, r0
 800fdea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fdee:	e011      	b.n	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fdf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fdf4:	3328      	adds	r3, #40	@ 0x28
 800fdf6:	2100      	movs	r1, #0
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f002 f9e7 	bl	80121cc <RCCEx_PLL3_Config>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800fe04:	e006      	b.n	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
 800fe08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fe0c:	e002      	b.n	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800fe0e:	bf00      	nop
 800fe10:	e000      	b.n	800fe14 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800fe12:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fe14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d10a      	bne.n	800fe32 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800fe1c:	4b37      	ldr	r3, [pc, #220]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fe1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800fe24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe2a:	4a34      	ldr	r2, [pc, #208]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fe2c:	430b      	orrs	r3, r1
 800fe2e:	6513      	str	r3, [r2, #80]	@ 0x50
 800fe30:	e003      	b.n	800fe3a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fe36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800fe3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800fe46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800fe50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800fe54:	460b      	mov	r3, r1
 800fe56:	4313      	orrs	r3, r2
 800fe58:	d056      	beq.n	800ff08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800fe5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fe60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fe64:	d033      	beq.n	800fece <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800fe66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800fe6a:	d82c      	bhi.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fe6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fe70:	d02f      	beq.n	800fed2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800fe72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800fe76:	d826      	bhi.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fe78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fe7c:	d02b      	beq.n	800fed6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800fe7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800fe82:	d820      	bhi.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fe84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe88:	d012      	beq.n	800feb0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800fe8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe8e:	d81a      	bhi.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d022      	beq.n	800feda <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800fe94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fe98:	d115      	bne.n	800fec6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fe9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fe9e:	3308      	adds	r3, #8
 800fea0:	2101      	movs	r1, #1
 800fea2:	4618      	mov	r0, r3
 800fea4:	f002 f8e0 	bl	8012068 <RCCEx_PLL2_Config>
 800fea8:	4603      	mov	r3, r0
 800feaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800feae:	e015      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800feb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800feb4:	3328      	adds	r3, #40	@ 0x28
 800feb6:	2101      	movs	r1, #1
 800feb8:	4618      	mov	r0, r3
 800feba:	f002 f987 	bl	80121cc <RCCEx_PLL3_Config>
 800febe:	4603      	mov	r3, r0
 800fec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800fec4:	e00a      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fecc:	e006      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fece:	bf00      	nop
 800fed0:	e004      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fed2:	bf00      	nop
 800fed4:	e002      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800fed6:	bf00      	nop
 800fed8:	e000      	b.n	800fedc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800feda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fedc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10d      	bne.n	800ff00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800fee4:	4b05      	ldr	r3, [pc, #20]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fee8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800feec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fef0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fef2:	4a02      	ldr	r2, [pc, #8]	@ (800fefc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800fef4:	430b      	orrs	r3, r1
 800fef6:	6513      	str	r3, [r2, #80]	@ 0x50
 800fef8:	e006      	b.n	800ff08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800fefa:	bf00      	nop
 800fefc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ff04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ff08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff10:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800ff14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ff18:	2300      	movs	r3, #0
 800ff1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ff1e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ff22:	460b      	mov	r3, r1
 800ff24:	4313      	orrs	r3, r2
 800ff26:	d055      	beq.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ff28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ff30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff34:	d033      	beq.n	800ff9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ff36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ff3a:	d82c      	bhi.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ff3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff40:	d02f      	beq.n	800ffa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ff42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ff46:	d826      	bhi.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ff48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ff4c:	d02b      	beq.n	800ffa6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ff4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ff52:	d820      	bhi.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ff54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff58:	d012      	beq.n	800ff80 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ff5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff5e:	d81a      	bhi.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d022      	beq.n	800ffaa <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ff64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff68:	d115      	bne.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ff6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff6e:	3308      	adds	r3, #8
 800ff70:	2101      	movs	r1, #1
 800ff72:	4618      	mov	r0, r3
 800ff74:	f002 f878 	bl	8012068 <RCCEx_PLL2_Config>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ff7e:	e015      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ff80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ff84:	3328      	adds	r3, #40	@ 0x28
 800ff86:	2101      	movs	r1, #1
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f002 f91f 	bl	80121cc <RCCEx_PLL3_Config>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ff94:	e00a      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ff96:	2301      	movs	r3, #1
 800ff98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ff9c:	e006      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ff9e:	bf00      	nop
 800ffa0:	e004      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ffa2:	bf00      	nop
 800ffa4:	e002      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ffa6:	bf00      	nop
 800ffa8:	e000      	b.n	800ffac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ffaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ffac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d10b      	bne.n	800ffcc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ffb4:	4ba3      	ldr	r3, [pc, #652]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ffb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffb8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ffbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ffc4:	4a9f      	ldr	r2, [pc, #636]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ffc6:	430b      	orrs	r3, r1
 800ffc8:	6593      	str	r3, [r2, #88]	@ 0x58
 800ffca:	e003      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ffd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ffd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ffd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffdc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ffe0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ffea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ffee:	460b      	mov	r3, r1
 800fff0:	4313      	orrs	r3, r2
 800fff2:	d037      	beq.n	8010064 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800fff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fffe:	d00e      	beq.n	801001e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8010000:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010004:	d816      	bhi.n	8010034 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8010006:	2b00      	cmp	r3, #0
 8010008:	d018      	beq.n	801003c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801000a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801000e:	d111      	bne.n	8010034 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010010:	4b8c      	ldr	r3, [pc, #560]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010014:	4a8b      	ldr	r2, [pc, #556]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801001a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801001c:	e00f      	b.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801001e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010022:	3308      	adds	r3, #8
 8010024:	2101      	movs	r1, #1
 8010026:	4618      	mov	r0, r3
 8010028:	f002 f81e 	bl	8012068 <RCCEx_PLL2_Config>
 801002c:	4603      	mov	r3, r0
 801002e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010032:	e004      	b.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801003a:	e000      	b.n	801003e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801003c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801003e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010042:	2b00      	cmp	r3, #0
 8010044:	d10a      	bne.n	801005c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010046:	4b7f      	ldr	r3, [pc, #508]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801004a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801004e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010054:	4a7b      	ldr	r2, [pc, #492]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010056:	430b      	orrs	r3, r1
 8010058:	6513      	str	r3, [r2, #80]	@ 0x50
 801005a:	e003      	b.n	8010064 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801005c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801006c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8010070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010074:	2300      	movs	r3, #0
 8010076:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801007a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801007e:	460b      	mov	r3, r1
 8010080:	4313      	orrs	r3, r2
 8010082:	d039      	beq.n	80100f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8010084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801008a:	2b03      	cmp	r3, #3
 801008c:	d81c      	bhi.n	80100c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801008e:	a201      	add	r2, pc, #4	@ (adr r2, 8010094 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8010090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010094:	080100d1 	.word	0x080100d1
 8010098:	080100a5 	.word	0x080100a5
 801009c:	080100b3 	.word	0x080100b3
 80100a0:	080100d1 	.word	0x080100d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80100a4:	4b67      	ldr	r3, [pc, #412]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80100a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100a8:	4a66      	ldr	r2, [pc, #408]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80100aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80100ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80100b0:	e00f      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80100b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100b6:	3308      	adds	r3, #8
 80100b8:	2102      	movs	r1, #2
 80100ba:	4618      	mov	r0, r3
 80100bc:	f001 ffd4 	bl	8012068 <RCCEx_PLL2_Config>
 80100c0:	4603      	mov	r3, r0
 80100c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80100c6:	e004      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80100ce:	e000      	b.n	80100d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80100d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80100d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d10a      	bne.n	80100f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80100da:	4b5a      	ldr	r3, [pc, #360]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80100dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100de:	f023 0103 	bic.w	r1, r3, #3
 80100e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100e8:	4a56      	ldr	r2, [pc, #344]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80100ea:	430b      	orrs	r3, r1
 80100ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80100ee:	e003      	b.n	80100f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80100f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80100f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80100fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010100:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8010104:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010108:	2300      	movs	r3, #0
 801010a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801010e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8010112:	460b      	mov	r3, r1
 8010114:	4313      	orrs	r3, r2
 8010116:	f000 809f 	beq.w	8010258 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801011a:	4b4b      	ldr	r3, [pc, #300]	@ (8010248 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	4a4a      	ldr	r2, [pc, #296]	@ (8010248 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010120:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010126:	f7f3 fa11 	bl	800354c <HAL_GetTick>
 801012a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801012e:	e00b      	b.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010130:	f7f3 fa0c 	bl	800354c <HAL_GetTick>
 8010134:	4602      	mov	r2, r0
 8010136:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	2b64      	cmp	r3, #100	@ 0x64
 801013e:	d903      	bls.n	8010148 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8010140:	2303      	movs	r3, #3
 8010142:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010146:	e005      	b.n	8010154 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010148:	4b3f      	ldr	r3, [pc, #252]	@ (8010248 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010150:	2b00      	cmp	r3, #0
 8010152:	d0ed      	beq.n	8010130 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8010154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010158:	2b00      	cmp	r3, #0
 801015a:	d179      	bne.n	8010250 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801015c:	4b39      	ldr	r3, [pc, #228]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801015e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010164:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010168:	4053      	eors	r3, r2
 801016a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801016e:	2b00      	cmp	r3, #0
 8010170:	d015      	beq.n	801019e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010172:	4b34      	ldr	r3, [pc, #208]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010176:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801017a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801017e:	4b31      	ldr	r3, [pc, #196]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010182:	4a30      	ldr	r2, [pc, #192]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010188:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801018a:	4b2e      	ldr	r3, [pc, #184]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801018c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801018e:	4a2d      	ldr	r2, [pc, #180]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010194:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010196:	4a2b      	ldr	r2, [pc, #172]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801019c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801019e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80101a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80101aa:	d118      	bne.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80101ac:	f7f3 f9ce 	bl	800354c <HAL_GetTick>
 80101b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80101b4:	e00d      	b.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80101b6:	f7f3 f9c9 	bl	800354c <HAL_GetTick>
 80101ba:	4602      	mov	r2, r0
 80101bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80101c0:	1ad2      	subs	r2, r2, r3
 80101c2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d903      	bls.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80101ca:	2303      	movs	r3, #3
 80101cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80101d0:	e005      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80101d2:	4b1c      	ldr	r3, [pc, #112]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80101d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80101d6:	f003 0302 	and.w	r3, r3, #2
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d0eb      	beq.n	80101b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80101de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d129      	bne.n	801023a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80101e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80101ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80101ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80101f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80101f6:	d10e      	bne.n	8010216 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80101f8:	4b12      	ldr	r3, [pc, #72]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80101fa:	691b      	ldr	r3, [r3, #16]
 80101fc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010204:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010208:	091a      	lsrs	r2, r3, #4
 801020a:	4b10      	ldr	r3, [pc, #64]	@ (801024c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801020c:	4013      	ands	r3, r2
 801020e:	4a0d      	ldr	r2, [pc, #52]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010210:	430b      	orrs	r3, r1
 8010212:	6113      	str	r3, [r2, #16]
 8010214:	e005      	b.n	8010222 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8010216:	4b0b      	ldr	r3, [pc, #44]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	4a0a      	ldr	r2, [pc, #40]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801021c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010220:	6113      	str	r3, [r2, #16]
 8010222:	4b08      	ldr	r3, [pc, #32]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010224:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801022a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801022e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010232:	4a04      	ldr	r2, [pc, #16]	@ (8010244 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010234:	430b      	orrs	r3, r1
 8010236:	6713      	str	r3, [r2, #112]	@ 0x70
 8010238:	e00e      	b.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801023a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801023e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8010242:	e009      	b.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8010244:	58024400 	.word	0x58024400
 8010248:	58024800 	.word	0x58024800
 801024c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	f002 0301 	and.w	r3, r2, #1
 8010264:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010268:	2300      	movs	r3, #0
 801026a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801026e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010272:	460b      	mov	r3, r1
 8010274:	4313      	orrs	r3, r2
 8010276:	f000 8089 	beq.w	801038c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801027a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801027e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010280:	2b28      	cmp	r3, #40	@ 0x28
 8010282:	d86b      	bhi.n	801035c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8010284:	a201      	add	r2, pc, #4	@ (adr r2, 801028c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8010286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801028a:	bf00      	nop
 801028c:	08010365 	.word	0x08010365
 8010290:	0801035d 	.word	0x0801035d
 8010294:	0801035d 	.word	0x0801035d
 8010298:	0801035d 	.word	0x0801035d
 801029c:	0801035d 	.word	0x0801035d
 80102a0:	0801035d 	.word	0x0801035d
 80102a4:	0801035d 	.word	0x0801035d
 80102a8:	0801035d 	.word	0x0801035d
 80102ac:	08010331 	.word	0x08010331
 80102b0:	0801035d 	.word	0x0801035d
 80102b4:	0801035d 	.word	0x0801035d
 80102b8:	0801035d 	.word	0x0801035d
 80102bc:	0801035d 	.word	0x0801035d
 80102c0:	0801035d 	.word	0x0801035d
 80102c4:	0801035d 	.word	0x0801035d
 80102c8:	0801035d 	.word	0x0801035d
 80102cc:	08010347 	.word	0x08010347
 80102d0:	0801035d 	.word	0x0801035d
 80102d4:	0801035d 	.word	0x0801035d
 80102d8:	0801035d 	.word	0x0801035d
 80102dc:	0801035d 	.word	0x0801035d
 80102e0:	0801035d 	.word	0x0801035d
 80102e4:	0801035d 	.word	0x0801035d
 80102e8:	0801035d 	.word	0x0801035d
 80102ec:	08010365 	.word	0x08010365
 80102f0:	0801035d 	.word	0x0801035d
 80102f4:	0801035d 	.word	0x0801035d
 80102f8:	0801035d 	.word	0x0801035d
 80102fc:	0801035d 	.word	0x0801035d
 8010300:	0801035d 	.word	0x0801035d
 8010304:	0801035d 	.word	0x0801035d
 8010308:	0801035d 	.word	0x0801035d
 801030c:	08010365 	.word	0x08010365
 8010310:	0801035d 	.word	0x0801035d
 8010314:	0801035d 	.word	0x0801035d
 8010318:	0801035d 	.word	0x0801035d
 801031c:	0801035d 	.word	0x0801035d
 8010320:	0801035d 	.word	0x0801035d
 8010324:	0801035d 	.word	0x0801035d
 8010328:	0801035d 	.word	0x0801035d
 801032c:	08010365 	.word	0x08010365
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010334:	3308      	adds	r3, #8
 8010336:	2101      	movs	r1, #1
 8010338:	4618      	mov	r0, r3
 801033a:	f001 fe95 	bl	8012068 <RCCEx_PLL2_Config>
 801033e:	4603      	mov	r3, r0
 8010340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010344:	e00f      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801034a:	3328      	adds	r3, #40	@ 0x28
 801034c:	2101      	movs	r1, #1
 801034e:	4618      	mov	r0, r3
 8010350:	f001 ff3c 	bl	80121cc <RCCEx_PLL3_Config>
 8010354:	4603      	mov	r3, r0
 8010356:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801035a:	e004      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801035c:	2301      	movs	r3, #1
 801035e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010362:	e000      	b.n	8010366 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801036a:	2b00      	cmp	r3, #0
 801036c:	d10a      	bne.n	8010384 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801036e:	4bbf      	ldr	r3, [pc, #764]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010372:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8010376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801037a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801037c:	4abb      	ldr	r2, [pc, #748]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801037e:	430b      	orrs	r3, r1
 8010380:	6553      	str	r3, [r2, #84]	@ 0x54
 8010382:	e003      	b.n	801038c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010384:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010388:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801038c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010394:	f002 0302 	and.w	r3, r2, #2
 8010398:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801039c:	2300      	movs	r3, #0
 801039e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80103a2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80103a6:	460b      	mov	r3, r1
 80103a8:	4313      	orrs	r3, r2
 80103aa:	d041      	beq.n	8010430 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80103ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80103b2:	2b05      	cmp	r3, #5
 80103b4:	d824      	bhi.n	8010400 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80103b6:	a201      	add	r2, pc, #4	@ (adr r2, 80103bc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80103b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103bc:	08010409 	.word	0x08010409
 80103c0:	080103d5 	.word	0x080103d5
 80103c4:	080103eb 	.word	0x080103eb
 80103c8:	08010409 	.word	0x08010409
 80103cc:	08010409 	.word	0x08010409
 80103d0:	08010409 	.word	0x08010409
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80103d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103d8:	3308      	adds	r3, #8
 80103da:	2101      	movs	r1, #1
 80103dc:	4618      	mov	r0, r3
 80103de:	f001 fe43 	bl	8012068 <RCCEx_PLL2_Config>
 80103e2:	4603      	mov	r3, r0
 80103e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80103e8:	e00f      	b.n	801040a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80103ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80103ee:	3328      	adds	r3, #40	@ 0x28
 80103f0:	2101      	movs	r1, #1
 80103f2:	4618      	mov	r0, r3
 80103f4:	f001 feea 	bl	80121cc <RCCEx_PLL3_Config>
 80103f8:	4603      	mov	r3, r0
 80103fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80103fe:	e004      	b.n	801040a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010400:	2301      	movs	r3, #1
 8010402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010406:	e000      	b.n	801040a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8010408:	bf00      	nop
    }

    if (ret == HAL_OK)
 801040a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801040e:	2b00      	cmp	r3, #0
 8010410:	d10a      	bne.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010412:	4b96      	ldr	r3, [pc, #600]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010416:	f023 0107 	bic.w	r1, r3, #7
 801041a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801041e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010420:	4a92      	ldr	r2, [pc, #584]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010422:	430b      	orrs	r3, r1
 8010424:	6553      	str	r3, [r2, #84]	@ 0x54
 8010426:	e003      	b.n	8010430 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801042c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010438:	f002 0304 	and.w	r3, r2, #4
 801043c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010440:	2300      	movs	r3, #0
 8010442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010446:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801044a:	460b      	mov	r3, r1
 801044c:	4313      	orrs	r3, r2
 801044e:	d044      	beq.n	80104da <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010458:	2b05      	cmp	r3, #5
 801045a:	d825      	bhi.n	80104a8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801045c:	a201      	add	r2, pc, #4	@ (adr r2, 8010464 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801045e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010462:	bf00      	nop
 8010464:	080104b1 	.word	0x080104b1
 8010468:	0801047d 	.word	0x0801047d
 801046c:	08010493 	.word	0x08010493
 8010470:	080104b1 	.word	0x080104b1
 8010474:	080104b1 	.word	0x080104b1
 8010478:	080104b1 	.word	0x080104b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801047c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010480:	3308      	adds	r3, #8
 8010482:	2101      	movs	r1, #1
 8010484:	4618      	mov	r0, r3
 8010486:	f001 fdef 	bl	8012068 <RCCEx_PLL2_Config>
 801048a:	4603      	mov	r3, r0
 801048c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010490:	e00f      	b.n	80104b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010496:	3328      	adds	r3, #40	@ 0x28
 8010498:	2101      	movs	r1, #1
 801049a:	4618      	mov	r0, r3
 801049c:	f001 fe96 	bl	80121cc <RCCEx_PLL3_Config>
 80104a0:	4603      	mov	r3, r0
 80104a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80104a6:	e004      	b.n	80104b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80104a8:	2301      	movs	r3, #1
 80104aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80104ae:	e000      	b.n	80104b2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80104b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80104b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10b      	bne.n	80104d2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80104ba:	4b6c      	ldr	r3, [pc, #432]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80104bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104be:	f023 0107 	bic.w	r1, r3, #7
 80104c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80104ca:	4a68      	ldr	r2, [pc, #416]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80104cc:	430b      	orrs	r3, r1
 80104ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80104d0:	e003      	b.n	80104da <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80104da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e2:	f002 0320 	and.w	r3, r2, #32
 80104e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80104ea:	2300      	movs	r3, #0
 80104ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80104f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80104f4:	460b      	mov	r3, r1
 80104f6:	4313      	orrs	r3, r2
 80104f8:	d055      	beq.n	80105a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80104fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80104fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010506:	d033      	beq.n	8010570 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8010508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801050c:	d82c      	bhi.n	8010568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801050e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010512:	d02f      	beq.n	8010574 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8010514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010518:	d826      	bhi.n	8010568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801051a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801051e:	d02b      	beq.n	8010578 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8010520:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010524:	d820      	bhi.n	8010568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010526:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801052a:	d012      	beq.n	8010552 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801052c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010530:	d81a      	bhi.n	8010568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010532:	2b00      	cmp	r3, #0
 8010534:	d022      	beq.n	801057c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8010536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801053a:	d115      	bne.n	8010568 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801053c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010540:	3308      	adds	r3, #8
 8010542:	2100      	movs	r1, #0
 8010544:	4618      	mov	r0, r3
 8010546:	f001 fd8f 	bl	8012068 <RCCEx_PLL2_Config>
 801054a:	4603      	mov	r3, r0
 801054c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010550:	e015      	b.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010556:	3328      	adds	r3, #40	@ 0x28
 8010558:	2102      	movs	r1, #2
 801055a:	4618      	mov	r0, r3
 801055c:	f001 fe36 	bl	80121cc <RCCEx_PLL3_Config>
 8010560:	4603      	mov	r3, r0
 8010562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010566:	e00a      	b.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801056e:	e006      	b.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010570:	bf00      	nop
 8010572:	e004      	b.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010574:	bf00      	nop
 8010576:	e002      	b.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010578:	bf00      	nop
 801057a:	e000      	b.n	801057e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801057c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801057e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10b      	bne.n	801059e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010586:	4b39      	ldr	r3, [pc, #228]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801058a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801058e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010596:	4a35      	ldr	r2, [pc, #212]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010598:	430b      	orrs	r3, r1
 801059a:	6553      	str	r3, [r2, #84]	@ 0x54
 801059c:	e003      	b.n	80105a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801059e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80105a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80105a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80105b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80105b6:	2300      	movs	r3, #0
 80105b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80105bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80105c0:	460b      	mov	r3, r1
 80105c2:	4313      	orrs	r3, r2
 80105c4:	d058      	beq.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80105c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80105ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80105ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80105d2:	d033      	beq.n	801063c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80105d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80105d8:	d82c      	bhi.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80105da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105de:	d02f      	beq.n	8010640 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80105e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80105e4:	d826      	bhi.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80105e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80105ea:	d02b      	beq.n	8010644 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80105ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80105f0:	d820      	bhi.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80105f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105f6:	d012      	beq.n	801061e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80105f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80105fc:	d81a      	bhi.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d022      	beq.n	8010648 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8010602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010606:	d115      	bne.n	8010634 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801060c:	3308      	adds	r3, #8
 801060e:	2100      	movs	r1, #0
 8010610:	4618      	mov	r0, r3
 8010612:	f001 fd29 	bl	8012068 <RCCEx_PLL2_Config>
 8010616:	4603      	mov	r3, r0
 8010618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801061c:	e015      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801061e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010622:	3328      	adds	r3, #40	@ 0x28
 8010624:	2102      	movs	r1, #2
 8010626:	4618      	mov	r0, r3
 8010628:	f001 fdd0 	bl	80121cc <RCCEx_PLL3_Config>
 801062c:	4603      	mov	r3, r0
 801062e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010632:	e00a      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010634:	2301      	movs	r3, #1
 8010636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801063a:	e006      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801063c:	bf00      	nop
 801063e:	e004      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010640:	bf00      	nop
 8010642:	e002      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010644:	bf00      	nop
 8010646:	e000      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010648:	bf00      	nop
    }

    if (ret == HAL_OK)
 801064a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801064e:	2b00      	cmp	r3, #0
 8010650:	d10e      	bne.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010652:	4b06      	ldr	r3, [pc, #24]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010656:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801065a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801065e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010662:	4a02      	ldr	r2, [pc, #8]	@ (801066c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010664:	430b      	orrs	r3, r1
 8010666:	6593      	str	r3, [r2, #88]	@ 0x58
 8010668:	e006      	b.n	8010678 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801066a:	bf00      	nop
 801066c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8010684:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010688:	2300      	movs	r3, #0
 801068a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801068e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8010692:	460b      	mov	r3, r1
 8010694:	4313      	orrs	r3, r2
 8010696:	d055      	beq.n	8010744 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801069c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80106a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80106a4:	d033      	beq.n	801070e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80106a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80106aa:	d82c      	bhi.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80106ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80106b0:	d02f      	beq.n	8010712 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80106b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80106b6:	d826      	bhi.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80106b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80106bc:	d02b      	beq.n	8010716 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80106be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80106c2:	d820      	bhi.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80106c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80106c8:	d012      	beq.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80106ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80106ce:	d81a      	bhi.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d022      	beq.n	801071a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80106d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80106d8:	d115      	bne.n	8010706 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80106da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106de:	3308      	adds	r3, #8
 80106e0:	2100      	movs	r1, #0
 80106e2:	4618      	mov	r0, r3
 80106e4:	f001 fcc0 	bl	8012068 <RCCEx_PLL2_Config>
 80106e8:	4603      	mov	r3, r0
 80106ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80106ee:	e015      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80106f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80106f4:	3328      	adds	r3, #40	@ 0x28
 80106f6:	2102      	movs	r1, #2
 80106f8:	4618      	mov	r0, r3
 80106fa:	f001 fd67 	bl	80121cc <RCCEx_PLL3_Config>
 80106fe:	4603      	mov	r3, r0
 8010700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010704:	e00a      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010706:	2301      	movs	r3, #1
 8010708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801070c:	e006      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801070e:	bf00      	nop
 8010710:	e004      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010712:	bf00      	nop
 8010714:	e002      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010716:	bf00      	nop
 8010718:	e000      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801071a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801071c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10b      	bne.n	801073c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010724:	4ba1      	ldr	r3, [pc, #644]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010728:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801072c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010730:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010734:	4a9d      	ldr	r2, [pc, #628]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010736:	430b      	orrs	r3, r1
 8010738:	6593      	str	r3, [r2, #88]	@ 0x58
 801073a:	e003      	b.n	8010744 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801073c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074c:	f002 0308 	and.w	r3, r2, #8
 8010750:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010754:	2300      	movs	r3, #0
 8010756:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801075a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801075e:	460b      	mov	r3, r1
 8010760:	4313      	orrs	r3, r2
 8010762:	d01e      	beq.n	80107a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801076c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010770:	d10c      	bne.n	801078c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010776:	3328      	adds	r3, #40	@ 0x28
 8010778:	2102      	movs	r1, #2
 801077a:	4618      	mov	r0, r3
 801077c:	f001 fd26 	bl	80121cc <RCCEx_PLL3_Config>
 8010780:	4603      	mov	r3, r0
 8010782:	2b00      	cmp	r3, #0
 8010784:	d002      	beq.n	801078c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8010786:	2301      	movs	r3, #1
 8010788:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801078c:	4b87      	ldr	r3, [pc, #540]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801078e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010790:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010798:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801079c:	4a83      	ldr	r2, [pc, #524]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801079e:	430b      	orrs	r3, r1
 80107a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80107a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107aa:	f002 0310 	and.w	r3, r2, #16
 80107ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80107b2:	2300      	movs	r3, #0
 80107b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80107b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80107bc:	460b      	mov	r3, r1
 80107be:	4313      	orrs	r3, r2
 80107c0:	d01e      	beq.n	8010800 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80107c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80107ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107ce:	d10c      	bne.n	80107ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80107d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107d4:	3328      	adds	r3, #40	@ 0x28
 80107d6:	2102      	movs	r1, #2
 80107d8:	4618      	mov	r0, r3
 80107da:	f001 fcf7 	bl	80121cc <RCCEx_PLL3_Config>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80107e4:	2301      	movs	r3, #1
 80107e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80107ea:	4b70      	ldr	r3, [pc, #448]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80107ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80107ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80107f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80107f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80107fa:	4a6c      	ldr	r2, [pc, #432]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80107fc:	430b      	orrs	r3, r1
 80107fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010808:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801080c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010810:	2300      	movs	r3, #0
 8010812:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010816:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801081a:	460b      	mov	r3, r1
 801081c:	4313      	orrs	r3, r2
 801081e:	d03e      	beq.n	801089e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8010820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010824:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010828:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801082c:	d022      	beq.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801082e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010832:	d81b      	bhi.n	801086c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8010834:	2b00      	cmp	r3, #0
 8010836:	d003      	beq.n	8010840 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8010838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801083c:	d00b      	beq.n	8010856 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801083e:	e015      	b.n	801086c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010844:	3308      	adds	r3, #8
 8010846:	2100      	movs	r1, #0
 8010848:	4618      	mov	r0, r3
 801084a:	f001 fc0d 	bl	8012068 <RCCEx_PLL2_Config>
 801084e:	4603      	mov	r3, r0
 8010850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8010854:	e00f      	b.n	8010876 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801085a:	3328      	adds	r3, #40	@ 0x28
 801085c:	2102      	movs	r1, #2
 801085e:	4618      	mov	r0, r3
 8010860:	f001 fcb4 	bl	80121cc <RCCEx_PLL3_Config>
 8010864:	4603      	mov	r3, r0
 8010866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801086a:	e004      	b.n	8010876 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801086c:	2301      	movs	r3, #1
 801086e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010872:	e000      	b.n	8010876 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8010874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801087a:	2b00      	cmp	r3, #0
 801087c:	d10b      	bne.n	8010896 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801087e:	4b4b      	ldr	r3, [pc, #300]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010882:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8010886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801088a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801088e:	4a47      	ldr	r2, [pc, #284]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010890:	430b      	orrs	r3, r1
 8010892:	6593      	str	r3, [r2, #88]	@ 0x58
 8010894:	e003      	b.n	801089e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801089a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801089e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80108aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80108ac:	2300      	movs	r3, #0
 80108ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80108b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80108b4:	460b      	mov	r3, r1
 80108b6:	4313      	orrs	r3, r2
 80108b8:	d03b      	beq.n	8010932 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80108ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80108c6:	d01f      	beq.n	8010908 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80108c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80108cc:	d818      	bhi.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80108ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80108d2:	d003      	beq.n	80108dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80108d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80108d8:	d007      	beq.n	80108ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80108da:	e011      	b.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80108dc:	4b33      	ldr	r3, [pc, #204]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80108de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108e0:	4a32      	ldr	r2, [pc, #200]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80108e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80108e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80108e8:	e00f      	b.n	801090a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80108ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80108ee:	3328      	adds	r3, #40	@ 0x28
 80108f0:	2101      	movs	r1, #1
 80108f2:	4618      	mov	r0, r3
 80108f4:	f001 fc6a 	bl	80121cc <RCCEx_PLL3_Config>
 80108f8:	4603      	mov	r3, r0
 80108fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80108fe:	e004      	b.n	801090a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010900:	2301      	movs	r3, #1
 8010902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010906:	e000      	b.n	801090a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8010908:	bf00      	nop
    }

    if (ret == HAL_OK)
 801090a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801090e:	2b00      	cmp	r3, #0
 8010910:	d10b      	bne.n	801092a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010912:	4b26      	ldr	r3, [pc, #152]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010916:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801091a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010922:	4a22      	ldr	r2, [pc, #136]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010924:	430b      	orrs	r3, r1
 8010926:	6553      	str	r3, [r2, #84]	@ 0x54
 8010928:	e003      	b.n	8010932 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801092a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801092e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801093e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010940:	2300      	movs	r3, #0
 8010942:	677b      	str	r3, [r7, #116]	@ 0x74
 8010944:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8010948:	460b      	mov	r3, r1
 801094a:	4313      	orrs	r3, r2
 801094c:	d034      	beq.n	80109b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801094e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010954:	2b00      	cmp	r3, #0
 8010956:	d003      	beq.n	8010960 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8010958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801095c:	d007      	beq.n	801096e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801095e:	e011      	b.n	8010984 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010960:	4b12      	ldr	r3, [pc, #72]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010964:	4a11      	ldr	r2, [pc, #68]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801096a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801096c:	e00e      	b.n	801098c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801096e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010972:	3308      	adds	r3, #8
 8010974:	2102      	movs	r1, #2
 8010976:	4618      	mov	r0, r3
 8010978:	f001 fb76 	bl	8012068 <RCCEx_PLL2_Config>
 801097c:	4603      	mov	r3, r0
 801097e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8010982:	e003      	b.n	801098c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8010984:	2301      	movs	r3, #1
 8010986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801098a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801098c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010990:	2b00      	cmp	r3, #0
 8010992:	d10d      	bne.n	80109b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8010994:	4b05      	ldr	r3, [pc, #20]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010998:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801099c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109a2:	4a02      	ldr	r2, [pc, #8]	@ (80109ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80109a4:	430b      	orrs	r3, r1
 80109a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80109a8:	e006      	b.n	80109b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80109aa:	bf00      	nop
 80109ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80109b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80109b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80109c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80109c6:	2300      	movs	r3, #0
 80109c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80109ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80109ce:	460b      	mov	r3, r1
 80109d0:	4313      	orrs	r3, r2
 80109d2:	d00c      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80109d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109d8:	3328      	adds	r3, #40	@ 0x28
 80109da:	2102      	movs	r1, #2
 80109dc:	4618      	mov	r0, r3
 80109de:	f001 fbf5 	bl	80121cc <RCCEx_PLL3_Config>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80109e8:	2301      	movs	r3, #1
 80109ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80109ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80109f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80109fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80109fc:	2300      	movs	r3, #0
 80109fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8010a00:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8010a04:	460b      	mov	r3, r1
 8010a06:	4313      	orrs	r3, r2
 8010a08:	d038      	beq.n	8010a7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8010a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a16:	d018      	beq.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8010a18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a1c:	d811      	bhi.n	8010a42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a22:	d014      	beq.n	8010a4e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8010a24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a28:	d80b      	bhi.n	8010a42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d011      	beq.n	8010a52 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8010a2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a32:	d106      	bne.n	8010a42 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010a34:	4bc3      	ldr	r3, [pc, #780]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a38:	4ac2      	ldr	r2, [pc, #776]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8010a40:	e008      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010a42:	2301      	movs	r3, #1
 8010a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8010a48:	e004      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010a4a:	bf00      	nop
 8010a4c:	e002      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010a4e:	bf00      	nop
 8010a50:	e000      	b.n	8010a54 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8010a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10b      	bne.n	8010a74 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010a5c:	4bb9      	ldr	r3, [pc, #740]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a60:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8010a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a6c:	4ab5      	ldr	r2, [pc, #724]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010a6e:	430b      	orrs	r3, r1
 8010a70:	6553      	str	r3, [r2, #84]	@ 0x54
 8010a72:	e003      	b.n	8010a7c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a84:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8010a88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010a8e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8010a92:	460b      	mov	r3, r1
 8010a94:	4313      	orrs	r3, r2
 8010a96:	d009      	beq.n	8010aac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010a98:	4baa      	ldr	r3, [pc, #680]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010aa6:	4aa7      	ldr	r2, [pc, #668]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010aa8:	430b      	orrs	r3, r1
 8010aaa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8010aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8010ab8:	653b      	str	r3, [r7, #80]	@ 0x50
 8010aba:	2300      	movs	r3, #0
 8010abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8010abe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8010ac2:	460b      	mov	r3, r1
 8010ac4:	4313      	orrs	r3, r2
 8010ac6:	d00a      	beq.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8010ac8:	4b9e      	ldr	r3, [pc, #632]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010aca:	691b      	ldr	r3, [r3, #16]
 8010acc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8010ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ad4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010ad8:	4a9a      	ldr	r2, [pc, #616]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010ada:	430b      	orrs	r3, r1
 8010adc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8010aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010aec:	2300      	movs	r3, #0
 8010aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010af0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8010af4:	460b      	mov	r3, r1
 8010af6:	4313      	orrs	r3, r2
 8010af8:	d009      	beq.n	8010b0e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010afa:	4b92      	ldr	r3, [pc, #584]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010afe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8010b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b08:	4a8e      	ldr	r2, [pc, #568]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b0a:	430b      	orrs	r3, r1
 8010b0c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b16:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8010b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8010b24:	460b      	mov	r3, r1
 8010b26:	4313      	orrs	r3, r2
 8010b28:	d00e      	beq.n	8010b48 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8010b2a:	4b86      	ldr	r3, [pc, #536]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b2c:	691b      	ldr	r3, [r3, #16]
 8010b2e:	4a85      	ldr	r2, [pc, #532]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b30:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8010b34:	6113      	str	r3, [r2, #16]
 8010b36:	4b83      	ldr	r3, [pc, #524]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b38:	6919      	ldr	r1, [r3, #16]
 8010b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b3e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010b42:	4a80      	ldr	r2, [pc, #512]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b44:	430b      	orrs	r3, r1
 8010b46:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8010b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b50:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8010b54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010b56:	2300      	movs	r3, #0
 8010b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010b5a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8010b5e:	460b      	mov	r3, r1
 8010b60:	4313      	orrs	r3, r2
 8010b62:	d009      	beq.n	8010b78 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8010b64:	4b77      	ldr	r3, [pc, #476]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010b68:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b72:	4a74      	ldr	r2, [pc, #464]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b74:	430b      	orrs	r3, r1
 8010b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8010b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b80:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8010b84:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b86:	2300      	movs	r3, #0
 8010b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b8a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8010b8e:	460b      	mov	r3, r1
 8010b90:	4313      	orrs	r3, r2
 8010b92:	d00a      	beq.n	8010baa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8010b94:	4b6b      	ldr	r3, [pc, #428]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b98:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8010b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010ba4:	4a67      	ldr	r2, [pc, #412]	@ (8010d44 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8010ba6:	430b      	orrs	r3, r1
 8010ba8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8010baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8010bb6:	f003 0301 	and.w	r3, r3, #1
 8010bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010bbc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8010bc0:	460b      	mov	r3, r1
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	d011      	beq.n	8010bea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bca:	3308      	adds	r3, #8
 8010bcc:	2100      	movs	r1, #0
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f001 fa4a 	bl	8012068 <RCCEx_PLL2_Config>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d003      	beq.n	8010bea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8010bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	6239      	str	r1, [r7, #32]
 8010bf6:	f003 0302 	and.w	r3, r3, #2
 8010bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bfc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8010c00:	460b      	mov	r3, r1
 8010c02:	4313      	orrs	r3, r2
 8010c04:	d011      	beq.n	8010c2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c0a:	3308      	adds	r3, #8
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f001 fa2a 	bl	8012068 <RCCEx_PLL2_Config>
 8010c14:	4603      	mov	r3, r0
 8010c16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d003      	beq.n	8010c2a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8010c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	2100      	movs	r1, #0
 8010c34:	61b9      	str	r1, [r7, #24]
 8010c36:	f003 0304 	and.w	r3, r3, #4
 8010c3a:	61fb      	str	r3, [r7, #28]
 8010c3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010c40:	460b      	mov	r3, r1
 8010c42:	4313      	orrs	r3, r2
 8010c44:	d011      	beq.n	8010c6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c4a:	3308      	adds	r3, #8
 8010c4c:	2102      	movs	r1, #2
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f001 fa0a 	bl	8012068 <RCCEx_PLL2_Config>
 8010c54:	4603      	mov	r3, r0
 8010c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d003      	beq.n	8010c6a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8010c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c72:	2100      	movs	r1, #0
 8010c74:	6139      	str	r1, [r7, #16]
 8010c76:	f003 0308 	and.w	r3, r3, #8
 8010c7a:	617b      	str	r3, [r7, #20]
 8010c7c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8010c80:	460b      	mov	r3, r1
 8010c82:	4313      	orrs	r3, r2
 8010c84:	d011      	beq.n	8010caa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010c8a:	3328      	adds	r3, #40	@ 0x28
 8010c8c:	2100      	movs	r1, #0
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f001 fa9c 	bl	80121cc <RCCEx_PLL3_Config>
 8010c94:	4603      	mov	r3, r0
 8010c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8010c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d003      	beq.n	8010caa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010ca6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8010caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	f003 0310 	and.w	r3, r3, #16
 8010cba:	60fb      	str	r3, [r7, #12]
 8010cbc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	d011      	beq.n	8010cea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010cca:	3328      	adds	r3, #40	@ 0x28
 8010ccc:	2101      	movs	r1, #1
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f001 fa7c 	bl	80121cc <RCCEx_PLL3_Config>
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d003      	beq.n	8010cea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010ce6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8010cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf2:	2100      	movs	r1, #0
 8010cf4:	6039      	str	r1, [r7, #0]
 8010cf6:	f003 0320 	and.w	r3, r3, #32
 8010cfa:	607b      	str	r3, [r7, #4]
 8010cfc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8010d00:	460b      	mov	r3, r1
 8010d02:	4313      	orrs	r3, r2
 8010d04:	d011      	beq.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010d0a:	3328      	adds	r3, #40	@ 0x28
 8010d0c:	2102      	movs	r1, #2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f001 fa5c 	bl	80121cc <RCCEx_PLL3_Config>
 8010d14:	4603      	mov	r3, r0
 8010d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8010d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d003      	beq.n	8010d2a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8010d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8010d2a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d101      	bne.n	8010d36 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e000      	b.n	8010d38 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010d44:	58024400 	.word	0x58024400

08010d48 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b090      	sub	sp, #64	@ 0x40
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d56:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8010d5a:	430b      	orrs	r3, r1
 8010d5c:	f040 8094 	bne.w	8010e88 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8010d60:	4b9e      	ldr	r3, [pc, #632]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d64:	f003 0307 	and.w	r3, r3, #7
 8010d68:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6c:	2b04      	cmp	r3, #4
 8010d6e:	f200 8087 	bhi.w	8010e80 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8010d72:	a201      	add	r2, pc, #4	@ (adr r2, 8010d78 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8010d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d78:	08010d8d 	.word	0x08010d8d
 8010d7c:	08010db5 	.word	0x08010db5
 8010d80:	08010ddd 	.word	0x08010ddd
 8010d84:	08010e79 	.word	0x08010e79
 8010d88:	08010e05 	.word	0x08010e05
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010d8c:	4b93      	ldr	r3, [pc, #588]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010d94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010d98:	d108      	bne.n	8010dac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010d9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f001 f810 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010da8:	f000 bd45 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dac:	2300      	movs	r3, #0
 8010dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010db0:	f000 bd41 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010db4:	4b89      	ldr	r3, [pc, #548]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010dbc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010dc0:	d108      	bne.n	8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010dc2:	f107 0318 	add.w	r3, r7, #24
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f000 fd54 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010dcc:	69bb      	ldr	r3, [r7, #24]
 8010dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010dd0:	f000 bd31 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010dd8:	f000 bd2d 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010ddc:	4b7f      	ldr	r3, [pc, #508]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010de4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010de8:	d108      	bne.n	8010dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010dea:	f107 030c 	add.w	r3, r7, #12
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 fe94 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010df8:	f000 bd1d 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e00:	f000 bd19 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010e04:	4b75      	ldr	r3, [pc, #468]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010e0c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010e0e:	4b73      	ldr	r3, [pc, #460]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f003 0304 	and.w	r3, r3, #4
 8010e16:	2b04      	cmp	r3, #4
 8010e18:	d10c      	bne.n	8010e34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8010e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d109      	bne.n	8010e34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e20:	4b6e      	ldr	r3, [pc, #440]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	08db      	lsrs	r3, r3, #3
 8010e26:	f003 0303 	and.w	r3, r3, #3
 8010e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8010fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8010e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e32:	e01f      	b.n	8010e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010e34:	4b69      	ldr	r3, [pc, #420]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010e3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010e40:	d106      	bne.n	8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8010e42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010e48:	d102      	bne.n	8010e50 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010e4a:	4b66      	ldr	r3, [pc, #408]	@ (8010fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e4e:	e011      	b.n	8010e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010e50:	4b62      	ldr	r3, [pc, #392]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010e5c:	d106      	bne.n	8010e6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8010e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010e64:	d102      	bne.n	8010e6c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010e66:	4b60      	ldr	r3, [pc, #384]	@ (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010e6a:	e003      	b.n	8010e74 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010e70:	f000 bce1 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010e74:	f000 bcdf 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010e78:	4b5c      	ldr	r3, [pc, #368]	@ (8010fec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e7c:	f000 bcdb 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010e80:	2300      	movs	r3, #0
 8010e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010e84:	f000 bcd7 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8010e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e8c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8010e90:	430b      	orrs	r3, r1
 8010e92:	f040 80ad 	bne.w	8010ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8010e96:	4b51      	ldr	r3, [pc, #324]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010e9a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8010e9e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010ea6:	d056      	beq.n	8010f56 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8010ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010eae:	f200 8090 	bhi.w	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb4:	2bc0      	cmp	r3, #192	@ 0xc0
 8010eb6:	f000 8088 	beq.w	8010fca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8010eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ebc:	2bc0      	cmp	r3, #192	@ 0xc0
 8010ebe:	f200 8088 	bhi.w	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec4:	2b80      	cmp	r3, #128	@ 0x80
 8010ec6:	d032      	beq.n	8010f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8010ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eca:	2b80      	cmp	r3, #128	@ 0x80
 8010ecc:	f200 8081 	bhi.w	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8010ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d003      	beq.n	8010ede <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8010ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed8:	2b40      	cmp	r3, #64	@ 0x40
 8010eda:	d014      	beq.n	8010f06 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8010edc:	e079      	b.n	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010ede:	4b3f      	ldr	r3, [pc, #252]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010ee6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010eea:	d108      	bne.n	8010efe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f000 ff67 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010efa:	f000 bc9c 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f02:	f000 bc98 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010f06:	4b35      	ldr	r3, [pc, #212]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010f12:	d108      	bne.n	8010f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f14:	f107 0318 	add.w	r3, r7, #24
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f000 fcab 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f22:	f000 bc88 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f26:	2300      	movs	r3, #0
 8010f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f2a:	f000 bc84 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010f3a:	d108      	bne.n	8010f4e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f3c:	f107 030c 	add.w	r3, r7, #12
 8010f40:	4618      	mov	r0, r3
 8010f42:	f000 fdeb 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010f4a:	f000 bc74 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010f52:	f000 bc70 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010f56:	4b21      	ldr	r3, [pc, #132]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010f5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010f5e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010f60:	4b1e      	ldr	r3, [pc, #120]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f003 0304 	and.w	r3, r3, #4
 8010f68:	2b04      	cmp	r3, #4
 8010f6a:	d10c      	bne.n	8010f86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8010f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d109      	bne.n	8010f86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010f72:	4b1a      	ldr	r3, [pc, #104]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	08db      	lsrs	r3, r3, #3
 8010f78:	f003 0303 	and.w	r3, r3, #3
 8010f7c:	4a18      	ldr	r2, [pc, #96]	@ (8010fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8010f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8010f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010f84:	e01f      	b.n	8010fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010f86:	4b15      	ldr	r3, [pc, #84]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010f92:	d106      	bne.n	8010fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f9a:	d102      	bne.n	8010fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010f9c:	4b11      	ldr	r3, [pc, #68]	@ (8010fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8010f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010fa0:	e011      	b.n	8010fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010faa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010fae:	d106      	bne.n	8010fbe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8010fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010fb6:	d102      	bne.n	8010fbe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8010fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010fbc:	e003      	b.n	8010fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010fc2:	f000 bc38 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010fc6:	f000 bc36 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010fca:	4b08      	ldr	r3, [pc, #32]	@ (8010fec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8010fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fce:	f000 bc32 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010fd6:	f000 bc2e 	b.w	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010fda:	bf00      	nop
 8010fdc:	58024400 	.word	0x58024400
 8010fe0:	03d09000 	.word	0x03d09000
 8010fe4:	003d0900 	.word	0x003d0900
 8010fe8:	017d7840 	.word	0x017d7840
 8010fec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ff4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8010ff8:	430b      	orrs	r3, r1
 8010ffa:	f040 809c 	bne.w	8011136 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8010ffe:	4b9e      	ldr	r3, [pc, #632]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011002:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8011006:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8011008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801100a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801100e:	d054      	beq.n	80110ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8011010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8011016:	f200 808b 	bhi.w	8011130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801101c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8011020:	f000 8083 	beq.w	801112a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8011024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011026:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801102a:	f200 8081 	bhi.w	8011130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801102e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011034:	d02f      	beq.n	8011096 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8011036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011038:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801103c:	d878      	bhi.n	8011130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801103e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011040:	2b00      	cmp	r3, #0
 8011042:	d004      	beq.n	801104e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8011044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011046:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801104a:	d012      	beq.n	8011072 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801104c:	e070      	b.n	8011130 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801104e:	4b8a      	ldr	r3, [pc, #552]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801105a:	d107      	bne.n	801106c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801105c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011060:	4618      	mov	r0, r3
 8011062:	f000 feaf 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801106a:	e3e4      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801106c:	2300      	movs	r3, #0
 801106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011070:	e3e1      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011072:	4b81      	ldr	r3, [pc, #516]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801107a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801107e:	d107      	bne.n	8011090 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011080:	f107 0318 	add.w	r3, r7, #24
 8011084:	4618      	mov	r0, r3
 8011086:	f000 fbf5 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801108e:	e3d2      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011090:	2300      	movs	r3, #0
 8011092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011094:	e3cf      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011096:	4b78      	ldr	r3, [pc, #480]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801109e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80110a2:	d107      	bne.n	80110b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110a4:	f107 030c 	add.w	r3, r7, #12
 80110a8:	4618      	mov	r0, r3
 80110aa:	f000 fd37 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80110b2:	e3c0      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80110b8:	e3bd      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80110ba:	4b6f      	ldr	r3, [pc, #444]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80110bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80110be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80110c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80110c4:	4b6c      	ldr	r3, [pc, #432]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f003 0304 	and.w	r3, r3, #4
 80110cc:	2b04      	cmp	r3, #4
 80110ce:	d10c      	bne.n	80110ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80110d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d109      	bne.n	80110ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80110d6:	4b68      	ldr	r3, [pc, #416]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	08db      	lsrs	r3, r3, #3
 80110dc:	f003 0303 	and.w	r3, r3, #3
 80110e0:	4a66      	ldr	r2, [pc, #408]	@ (801127c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80110e2:	fa22 f303 	lsr.w	r3, r2, r3
 80110e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80110e8:	e01e      	b.n	8011128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80110ea:	4b63      	ldr	r3, [pc, #396]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80110f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80110f6:	d106      	bne.n	8011106 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80110f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110fe:	d102      	bne.n	8011106 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011100:	4b5f      	ldr	r3, [pc, #380]	@ (8011280 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011104:	e010      	b.n	8011128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011106:	4b5c      	ldr	r3, [pc, #368]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801110e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011112:	d106      	bne.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8011114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801111a:	d102      	bne.n	8011122 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801111c:	4b59      	ldr	r3, [pc, #356]	@ (8011284 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011120:	e002      	b.n	8011128 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011122:	2300      	movs	r3, #0
 8011124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011126:	e386      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011128:	e385      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801112a:	4b57      	ldr	r3, [pc, #348]	@ (8011288 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801112e:	e382      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011130:	2300      	movs	r3, #0
 8011132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011134:	e37f      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011136:	e9d7 2300 	ldrd	r2, r3, [r7]
 801113a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801113e:	430b      	orrs	r3, r1
 8011140:	f040 80a7 	bne.w	8011292 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8011144:	4b4c      	ldr	r3, [pc, #304]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011148:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801114c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801114e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011150:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8011154:	d055      	beq.n	8011202 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8011156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011158:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801115c:	f200 8096 	bhi.w	801128c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011162:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011166:	f000 8084 	beq.w	8011272 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801116a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801116c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8011170:	f200 808c 	bhi.w	801128c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011176:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801117a:	d030      	beq.n	80111de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801117c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801117e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011182:	f200 8083 	bhi.w	801128c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011188:	2b00      	cmp	r3, #0
 801118a:	d004      	beq.n	8011196 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801118c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801118e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011192:	d012      	beq.n	80111ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8011194:	e07a      	b.n	801128c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011196:	4b38      	ldr	r3, [pc, #224]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801119e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80111a2:	d107      	bne.n	80111b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80111a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80111a8:	4618      	mov	r0, r3
 80111aa:	f000 fe0b 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80111ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111b2:	e340      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111b4:	2300      	movs	r3, #0
 80111b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111b8:	e33d      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80111ba:	4b2f      	ldr	r3, [pc, #188]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80111c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80111c6:	d107      	bne.n	80111d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111c8:	f107 0318 	add.w	r3, r7, #24
 80111cc:	4618      	mov	r0, r3
 80111ce:	f000 fb51 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80111d2:	69bb      	ldr	r3, [r7, #24]
 80111d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111d6:	e32e      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111d8:	2300      	movs	r3, #0
 80111da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111dc:	e32b      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80111de:	4b26      	ldr	r3, [pc, #152]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80111e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80111ea:	d107      	bne.n	80111fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111ec:	f107 030c 	add.w	r3, r7, #12
 80111f0:	4618      	mov	r0, r3
 80111f2:	f000 fc93 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80111fa:	e31c      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80111fc:	2300      	movs	r3, #0
 80111fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011200:	e319      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011202:	4b1d      	ldr	r3, [pc, #116]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011206:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801120a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801120c:	4b1a      	ldr	r3, [pc, #104]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f003 0304 	and.w	r3, r3, #4
 8011214:	2b04      	cmp	r3, #4
 8011216:	d10c      	bne.n	8011232 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8011218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801121a:	2b00      	cmp	r3, #0
 801121c:	d109      	bne.n	8011232 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801121e:	4b16      	ldr	r3, [pc, #88]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	08db      	lsrs	r3, r3, #3
 8011224:	f003 0303 	and.w	r3, r3, #3
 8011228:	4a14      	ldr	r2, [pc, #80]	@ (801127c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801122a:	fa22 f303 	lsr.w	r3, r2, r3
 801122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011230:	e01e      	b.n	8011270 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011232:	4b11      	ldr	r3, [pc, #68]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801123a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801123e:	d106      	bne.n	801124e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8011240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011246:	d102      	bne.n	801124e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011248:	4b0d      	ldr	r3, [pc, #52]	@ (8011280 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801124a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801124c:	e010      	b.n	8011270 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801124e:	4b0a      	ldr	r3, [pc, #40]	@ (8011278 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011256:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801125a:	d106      	bne.n	801126a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801125c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801125e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011262:	d102      	bne.n	801126a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011264:	4b07      	ldr	r3, [pc, #28]	@ (8011284 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011268:	e002      	b.n	8011270 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801126a:	2300      	movs	r3, #0
 801126c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801126e:	e2e2      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011270:	e2e1      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011272:	4b05      	ldr	r3, [pc, #20]	@ (8011288 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011276:	e2de      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011278:	58024400 	.word	0x58024400
 801127c:	03d09000 	.word	0x03d09000
 8011280:	003d0900 	.word	0x003d0900
 8011284:	017d7840 	.word	0x017d7840
 8011288:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801128c:	2300      	movs	r3, #0
 801128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011290:	e2d1      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8011292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011296:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801129a:	430b      	orrs	r3, r1
 801129c:	f040 809c 	bne.w	80113d8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80112a0:	4b93      	ldr	r3, [pc, #588]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80112a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80112a4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80112a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80112aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80112b0:	d054      	beq.n	801135c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80112b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80112b8:	f200 808b 	bhi.w	80113d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80112bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80112c2:	f000 8083 	beq.w	80113cc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80112c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80112cc:	f200 8081 	bhi.w	80113d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80112d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112d6:	d02f      	beq.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80112d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112de:	d878      	bhi.n	80113d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80112e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d004      	beq.n	80112f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80112e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80112ec:	d012      	beq.n	8011314 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80112ee:	e070      	b.n	80113d2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80112f0:	4b7f      	ldr	r3, [pc, #508]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80112f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80112fc:	d107      	bne.n	801130e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80112fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011302:	4618      	mov	r0, r3
 8011304:	f000 fd5e 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801130c:	e293      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801130e:	2300      	movs	r3, #0
 8011310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011312:	e290      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011314:	4b76      	ldr	r3, [pc, #472]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801131c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011320:	d107      	bne.n	8011332 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011322:	f107 0318 	add.w	r3, r7, #24
 8011326:	4618      	mov	r0, r3
 8011328:	f000 faa4 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011330:	e281      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011336:	e27e      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011338:	4b6d      	ldr	r3, [pc, #436]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011344:	d107      	bne.n	8011356 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011346:	f107 030c 	add.w	r3, r7, #12
 801134a:	4618      	mov	r0, r3
 801134c:	f000 fbe6 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011354:	e26f      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011356:	2300      	movs	r3, #0
 8011358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801135a:	e26c      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801135c:	4b64      	ldr	r3, [pc, #400]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801135e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011360:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011364:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011366:	4b62      	ldr	r3, [pc, #392]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	f003 0304 	and.w	r3, r3, #4
 801136e:	2b04      	cmp	r3, #4
 8011370:	d10c      	bne.n	801138c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011374:	2b00      	cmp	r3, #0
 8011376:	d109      	bne.n	801138c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011378:	4b5d      	ldr	r3, [pc, #372]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	08db      	lsrs	r3, r3, #3
 801137e:	f003 0303 	and.w	r3, r3, #3
 8011382:	4a5c      	ldr	r2, [pc, #368]	@ (80114f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011384:	fa22 f303 	lsr.w	r3, r2, r3
 8011388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801138a:	e01e      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801138c:	4b58      	ldr	r3, [pc, #352]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011398:	d106      	bne.n	80113a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801139a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801139c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80113a0:	d102      	bne.n	80113a8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80113a2:	4b55      	ldr	r3, [pc, #340]	@ (80114f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80113a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80113a6:	e010      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80113a8:	4b51      	ldr	r3, [pc, #324]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80113b4:	d106      	bne.n	80113c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80113b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80113b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80113bc:	d102      	bne.n	80113c4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80113be:	4b4f      	ldr	r3, [pc, #316]	@ (80114fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80113c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80113c2:	e002      	b.n	80113ca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80113c4:	2300      	movs	r3, #0
 80113c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80113c8:	e235      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80113ca:	e234      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80113cc:	4b4c      	ldr	r3, [pc, #304]	@ (8011500 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80113ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113d0:	e231      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80113d2:	2300      	movs	r3, #0
 80113d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113d6:	e22e      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80113d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113dc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80113e0:	430b      	orrs	r3, r1
 80113e2:	f040 808f 	bne.w	8011504 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80113e6:	4b42      	ldr	r3, [pc, #264]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80113e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80113ea:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80113ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80113f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80113f6:	d06b      	beq.n	80114d0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80113f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80113fe:	d874      	bhi.n	80114ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011402:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8011406:	d056      	beq.n	80114b6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8011408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801140a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801140e:	d86c      	bhi.n	80114ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011412:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8011416:	d03b      	beq.n	8011490 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8011418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801141a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801141e:	d864      	bhi.n	80114ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011422:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011426:	d021      	beq.n	801146c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801142a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801142e:	d85c      	bhi.n	80114ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011432:	2b00      	cmp	r3, #0
 8011434:	d004      	beq.n	8011440 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8011436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801143c:	d004      	beq.n	8011448 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801143e:	e054      	b.n	80114ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011440:	f7fe fa4c 	bl	800f8dc <HAL_RCC_GetPCLK1Freq>
 8011444:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011446:	e1f6      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011448:	4b29      	ldr	r3, [pc, #164]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011454:	d107      	bne.n	8011466 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011456:	f107 0318 	add.w	r3, r7, #24
 801145a:	4618      	mov	r0, r3
 801145c:	f000 fa0a 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011464:	e1e7      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011466:	2300      	movs	r3, #0
 8011468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801146a:	e1e4      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801146c:	4b20      	ldr	r3, [pc, #128]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011478:	d107      	bne.n	801148a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801147a:	f107 030c 	add.w	r3, r7, #12
 801147e:	4618      	mov	r0, r3
 8011480:	f000 fb4c 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011484:	693b      	ldr	r3, [r7, #16]
 8011486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011488:	e1d5      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801148a:	2300      	movs	r3, #0
 801148c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801148e:	e1d2      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011490:	4b17      	ldr	r3, [pc, #92]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f003 0304 	and.w	r3, r3, #4
 8011498:	2b04      	cmp	r3, #4
 801149a:	d109      	bne.n	80114b0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801149c:	4b14      	ldr	r3, [pc, #80]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	08db      	lsrs	r3, r3, #3
 80114a2:	f003 0303 	and.w	r3, r3, #3
 80114a6:	4a13      	ldr	r2, [pc, #76]	@ (80114f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80114a8:	fa22 f303 	lsr.w	r3, r2, r3
 80114ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114ae:	e1c2      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114b0:	2300      	movs	r3, #0
 80114b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114b4:	e1bf      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80114b6:	4b0e      	ldr	r3, [pc, #56]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80114be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80114c2:	d102      	bne.n	80114ca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80114c4:	4b0c      	ldr	r3, [pc, #48]	@ (80114f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80114c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114c8:	e1b5      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114ca:	2300      	movs	r3, #0
 80114cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114ce:	e1b2      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80114d0:	4b07      	ldr	r3, [pc, #28]	@ (80114f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80114d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80114dc:	d102      	bne.n	80114e4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80114de:	4b07      	ldr	r3, [pc, #28]	@ (80114fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80114e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80114e2:	e1a8      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80114e4:	2300      	movs	r3, #0
 80114e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114e8:	e1a5      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114ee:	e1a2      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80114f0:	58024400 	.word	0x58024400
 80114f4:	03d09000 	.word	0x03d09000
 80114f8:	003d0900 	.word	0x003d0900
 80114fc:	017d7840 	.word	0x017d7840
 8011500:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011508:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801150c:	430b      	orrs	r3, r1
 801150e:	d173      	bne.n	80115f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011510:	4b9c      	ldr	r3, [pc, #624]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011514:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8011518:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801151a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801151c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011520:	d02f      	beq.n	8011582 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011524:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011528:	d863      	bhi.n	80115f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801152a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152c:	2b00      	cmp	r3, #0
 801152e:	d004      	beq.n	801153a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011536:	d012      	beq.n	801155e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8011538:	e05b      	b.n	80115f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801153a:	4b92      	ldr	r3, [pc, #584]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011546:	d107      	bne.n	8011558 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011548:	f107 0318 	add.w	r3, r7, #24
 801154c:	4618      	mov	r0, r3
 801154e:	f000 f991 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011552:	69bb      	ldr	r3, [r7, #24]
 8011554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011556:	e16e      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011558:	2300      	movs	r3, #0
 801155a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801155c:	e16b      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801155e:	4b89      	ldr	r3, [pc, #548]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011566:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801156a:	d107      	bne.n	801157c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801156c:	f107 030c 	add.w	r3, r7, #12
 8011570:	4618      	mov	r0, r3
 8011572:	f000 fad3 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801157a:	e15c      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801157c:	2300      	movs	r3, #0
 801157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011580:	e159      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011582:	4b80      	ldr	r3, [pc, #512]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011586:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801158a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801158c:	4b7d      	ldr	r3, [pc, #500]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	f003 0304 	and.w	r3, r3, #4
 8011594:	2b04      	cmp	r3, #4
 8011596:	d10c      	bne.n	80115b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801159a:	2b00      	cmp	r3, #0
 801159c:	d109      	bne.n	80115b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801159e:	4b79      	ldr	r3, [pc, #484]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	08db      	lsrs	r3, r3, #3
 80115a4:	f003 0303 	and.w	r3, r3, #3
 80115a8:	4a77      	ldr	r2, [pc, #476]	@ (8011788 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80115aa:	fa22 f303 	lsr.w	r3, r2, r3
 80115ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115b0:	e01e      	b.n	80115f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80115b2:	4b74      	ldr	r3, [pc, #464]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80115ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115be:	d106      	bne.n	80115ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80115c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80115c6:	d102      	bne.n	80115ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80115c8:	4b70      	ldr	r3, [pc, #448]	@ (801178c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80115ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115cc:	e010      	b.n	80115f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80115ce:	4b6d      	ldr	r3, [pc, #436]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80115d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80115da:	d106      	bne.n	80115ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80115dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80115e2:	d102      	bne.n	80115ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80115e4:	4b6a      	ldr	r3, [pc, #424]	@ (8011790 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80115e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80115e8:	e002      	b.n	80115f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80115ee:	e122      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80115f0:	e121      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80115f2:	2300      	movs	r3, #0
 80115f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80115f6:	e11e      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80115f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115fc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8011600:	430b      	orrs	r3, r1
 8011602:	d133      	bne.n	801166c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011604:	4b5f      	ldr	r3, [pc, #380]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801160c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801160e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011610:	2b00      	cmp	r3, #0
 8011612:	d004      	beq.n	801161e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801161a:	d012      	beq.n	8011642 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801161c:	e023      	b.n	8011666 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801161e:	4b59      	ldr	r3, [pc, #356]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801162a:	d107      	bne.n	801163c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801162c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011630:	4618      	mov	r0, r3
 8011632:	f000 fbc7 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801163a:	e0fc      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801163c:	2300      	movs	r3, #0
 801163e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011640:	e0f9      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011642:	4b50      	ldr	r3, [pc, #320]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801164a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801164e:	d107      	bne.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011650:	f107 0318 	add.w	r3, r7, #24
 8011654:	4618      	mov	r0, r3
 8011656:	f000 f90d 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801165a:	6a3b      	ldr	r3, [r7, #32]
 801165c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801165e:	e0ea      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011660:	2300      	movs	r3, #0
 8011662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011664:	e0e7      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801166a:	e0e4      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801166c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011670:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8011674:	430b      	orrs	r3, r1
 8011676:	f040 808d 	bne.w	8011794 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801167a:	4b42      	ldr	r3, [pc, #264]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801167e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8011682:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8011684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011686:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801168a:	d06b      	beq.n	8011764 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801168c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011692:	d874      	bhi.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801169a:	d056      	beq.n	801174a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801169c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116a2:	d86c      	bhi.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80116a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80116aa:	d03b      	beq.n	8011724 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80116ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80116b2:	d864      	bhi.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80116b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116ba:	d021      	beq.n	8011700 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80116bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80116c2:	d85c      	bhi.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80116c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d004      	beq.n	80116d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80116ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116d0:	d004      	beq.n	80116dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80116d2:	e054      	b.n	801177e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80116d4:	f000 f8b8 	bl	8011848 <HAL_RCCEx_GetD3PCLK1Freq>
 80116d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80116da:	e0ac      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80116dc:	4b29      	ldr	r3, [pc, #164]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80116e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80116e8:	d107      	bne.n	80116fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80116ea:	f107 0318 	add.w	r3, r7, #24
 80116ee:	4618      	mov	r0, r3
 80116f0:	f000 f8c0 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80116f4:	69fb      	ldr	r3, [r7, #28]
 80116f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80116f8:	e09d      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80116fa:	2300      	movs	r3, #0
 80116fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80116fe:	e09a      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011700:	4b20      	ldr	r3, [pc, #128]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801170c:	d107      	bne.n	801171e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801170e:	f107 030c 	add.w	r3, r7, #12
 8011712:	4618      	mov	r0, r3
 8011714:	f000 fa02 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801171c:	e08b      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801171e:	2300      	movs	r3, #0
 8011720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011722:	e088      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011724:	4b17      	ldr	r3, [pc, #92]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	f003 0304 	and.w	r3, r3, #4
 801172c:	2b04      	cmp	r3, #4
 801172e:	d109      	bne.n	8011744 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011730:	4b14      	ldr	r3, [pc, #80]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	08db      	lsrs	r3, r3, #3
 8011736:	f003 0303 	and.w	r3, r3, #3
 801173a:	4a13      	ldr	r2, [pc, #76]	@ (8011788 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801173c:	fa22 f303 	lsr.w	r3, r2, r3
 8011740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011742:	e078      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011744:	2300      	movs	r3, #0
 8011746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011748:	e075      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801174a:	4b0e      	ldr	r3, [pc, #56]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011752:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011756:	d102      	bne.n	801175e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8011758:	4b0c      	ldr	r3, [pc, #48]	@ (801178c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801175c:	e06b      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801175e:	2300      	movs	r3, #0
 8011760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011762:	e068      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011764:	4b07      	ldr	r3, [pc, #28]	@ (8011784 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801176c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011770:	d102      	bne.n	8011778 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8011772:	4b07      	ldr	r3, [pc, #28]	@ (8011790 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011776:	e05e      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011778:	2300      	movs	r3, #0
 801177a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801177c:	e05b      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801177e:	2300      	movs	r3, #0
 8011780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011782:	e058      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011784:	58024400 	.word	0x58024400
 8011788:	03d09000 	.word	0x03d09000
 801178c:	003d0900 	.word	0x003d0900
 8011790:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011798:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801179c:	430b      	orrs	r3, r1
 801179e:	d148      	bne.n	8011832 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80117a0:	4b27      	ldr	r3, [pc, #156]	@ (8011840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80117a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80117a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80117aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80117b0:	d02a      	beq.n	8011808 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80117b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80117b8:	d838      	bhi.n	801182c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80117ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d004      	beq.n	80117ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80117c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80117c6:	d00d      	beq.n	80117e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80117c8:	e030      	b.n	801182c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80117ca:	4b1d      	ldr	r3, [pc, #116]	@ (8011840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80117d6:	d102      	bne.n	80117de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80117d8:	4b1a      	ldr	r3, [pc, #104]	@ (8011844 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80117da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80117dc:	e02b      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80117de:	2300      	movs	r3, #0
 80117e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80117e2:	e028      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80117e4:	4b16      	ldr	r3, [pc, #88]	@ (8011840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80117ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80117f0:	d107      	bne.n	8011802 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80117f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80117f6:	4618      	mov	r0, r3
 80117f8:	f000 fae4 	bl	8011dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80117fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011800:	e019      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011802:	2300      	movs	r3, #0
 8011804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011806:	e016      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011808:	4b0d      	ldr	r3, [pc, #52]	@ (8011840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011810:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011814:	d107      	bne.n	8011826 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011816:	f107 0318 	add.w	r3, r7, #24
 801181a:	4618      	mov	r0, r3
 801181c:	f000 f82a 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011820:	69fb      	ldr	r3, [r7, #28]
 8011822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011824:	e007      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011826:	2300      	movs	r3, #0
 8011828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801182a:	e004      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801182c:	2300      	movs	r3, #0
 801182e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011830:	e001      	b.n	8011836 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8011836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011838:	4618      	mov	r0, r3
 801183a:	3740      	adds	r7, #64	@ 0x40
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	58024400 	.word	0x58024400
 8011844:	017d7840 	.word	0x017d7840

08011848 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801184c:	f7fe f816 	bl	800f87c <HAL_RCC_GetHCLKFreq>
 8011850:	4602      	mov	r2, r0
 8011852:	4b06      	ldr	r3, [pc, #24]	@ (801186c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011854:	6a1b      	ldr	r3, [r3, #32]
 8011856:	091b      	lsrs	r3, r3, #4
 8011858:	f003 0307 	and.w	r3, r3, #7
 801185c:	4904      	ldr	r1, [pc, #16]	@ (8011870 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801185e:	5ccb      	ldrb	r3, [r1, r3]
 8011860:	f003 031f 	and.w	r3, r3, #31
 8011864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8011868:	4618      	mov	r0, r3
 801186a:	bd80      	pop	{r7, pc}
 801186c:	58024400 	.word	0x58024400
 8011870:	0801d5f4 	.word	0x0801d5f4

08011874 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011874:	b480      	push	{r7}
 8011876:	b089      	sub	sp, #36	@ 0x24
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801187c:	4ba1      	ldr	r3, [pc, #644]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011880:	f003 0303 	and.w	r3, r3, #3
 8011884:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8011886:	4b9f      	ldr	r3, [pc, #636]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801188a:	0b1b      	lsrs	r3, r3, #12
 801188c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011890:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011892:	4b9c      	ldr	r3, [pc, #624]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011896:	091b      	lsrs	r3, r3, #4
 8011898:	f003 0301 	and.w	r3, r3, #1
 801189c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801189e:	4b99      	ldr	r3, [pc, #612]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80118a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80118a2:	08db      	lsrs	r3, r3, #3
 80118a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80118a8:	693a      	ldr	r2, [r7, #16]
 80118aa:	fb02 f303 	mul.w	r3, r2, r3
 80118ae:	ee07 3a90 	vmov	s15, r3
 80118b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f000 8111 	beq.w	8011ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80118c2:	69bb      	ldr	r3, [r7, #24]
 80118c4:	2b02      	cmp	r3, #2
 80118c6:	f000 8083 	beq.w	80119d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	2b02      	cmp	r3, #2
 80118ce:	f200 80a1 	bhi.w	8011a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80118d2:	69bb      	ldr	r3, [r7, #24]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d003      	beq.n	80118e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d056      	beq.n	801198c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80118de:	e099      	b.n	8011a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118e0:	4b88      	ldr	r3, [pc, #544]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	f003 0320 	and.w	r3, r3, #32
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d02d      	beq.n	8011948 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80118ec:	4b85      	ldr	r3, [pc, #532]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	08db      	lsrs	r3, r3, #3
 80118f2:	f003 0303 	and.w	r3, r3, #3
 80118f6:	4a84      	ldr	r2, [pc, #528]	@ (8011b08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80118f8:	fa22 f303 	lsr.w	r3, r2, r3
 80118fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80118fe:	68bb      	ldr	r3, [r7, #8]
 8011900:	ee07 3a90 	vmov	s15, r3
 8011904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	ee07 3a90 	vmov	s15, r3
 801190e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011916:	4b7b      	ldr	r3, [pc, #492]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801191a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801191e:	ee07 3a90 	vmov	s15, r3
 8011922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011926:	ed97 6a03 	vldr	s12, [r7, #12]
 801192a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801192e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011936:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801193a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011946:	e087      	b.n	8011a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	ee07 3a90 	vmov	s15, r3
 801194e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011952:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8011b10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801195a:	4b6a      	ldr	r3, [pc, #424]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801195c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801195e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011962:	ee07 3a90 	vmov	s15, r3
 8011966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801196a:	ed97 6a03 	vldr	s12, [r7, #12]
 801196e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8011b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801197a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801197e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801198a:	e065      	b.n	8011a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	ee07 3a90 	vmov	s15, r3
 8011992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011996:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8011b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801199a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801199e:	4b59      	ldr	r3, [pc, #356]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80119a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119a6:	ee07 3a90 	vmov	s15, r3
 80119aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80119b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8011b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80119b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80119be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80119c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80119ce:	e043      	b.n	8011a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	ee07 3a90 	vmov	s15, r3
 80119d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8011b18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80119de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119e2:	4b48      	ldr	r3, [pc, #288]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80119e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80119e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119ea:	ee07 3a90 	vmov	s15, r3
 80119ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80119f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8011b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80119fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80119fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a12:	e021      	b.n	8011a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011a14:	697b      	ldr	r3, [r7, #20]
 8011a16:	ee07 3a90 	vmov	s15, r3
 8011a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a26:	4b37      	ldr	r3, [pc, #220]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a2e:	ee07 3a90 	vmov	s15, r3
 8011a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8011a3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011a56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8011a58:	4b2a      	ldr	r3, [pc, #168]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a5c:	0a5b      	lsrs	r3, r3, #9
 8011a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a62:	ee07 3a90 	vmov	s15, r3
 8011a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8011a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a7e:	ee17 2a90 	vmov	r2, s15
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8011a86:	4b1f      	ldr	r3, [pc, #124]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a8a:	0c1b      	lsrs	r3, r3, #16
 8011a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011a90:	ee07 3a90 	vmov	s15, r3
 8011a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011aac:	ee17 2a90 	vmov	r2, s15
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8011ab4:	4b13      	ldr	r3, [pc, #76]	@ (8011b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ab8:	0e1b      	lsrs	r3, r3, #24
 8011aba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011abe:	ee07 3a90 	vmov	s15, r3
 8011ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ac6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8011ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ada:	ee17 2a90 	vmov	r2, s15
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8011ae2:	e008      	b.n	8011af6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2200      	movs	r2, #0
 8011aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	609a      	str	r2, [r3, #8]
}
 8011af6:	bf00      	nop
 8011af8:	3724      	adds	r7, #36	@ 0x24
 8011afa:	46bd      	mov	sp, r7
 8011afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b00:	4770      	bx	lr
 8011b02:	bf00      	nop
 8011b04:	58024400 	.word	0x58024400
 8011b08:	03d09000 	.word	0x03d09000
 8011b0c:	46000000 	.word	0x46000000
 8011b10:	4c742400 	.word	0x4c742400
 8011b14:	4a742400 	.word	0x4a742400
 8011b18:	4bbebc20 	.word	0x4bbebc20

08011b1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b089      	sub	sp, #36	@ 0x24
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011b24:	4ba1      	ldr	r3, [pc, #644]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b28:	f003 0303 	and.w	r3, r3, #3
 8011b2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8011b2e:	4b9f      	ldr	r3, [pc, #636]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b32:	0d1b      	lsrs	r3, r3, #20
 8011b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011b38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8011b3a:	4b9c      	ldr	r3, [pc, #624]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b3e:	0a1b      	lsrs	r3, r3, #8
 8011b40:	f003 0301 	and.w	r3, r3, #1
 8011b44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8011b46:	4b99      	ldr	r3, [pc, #612]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b4a:	08db      	lsrs	r3, r3, #3
 8011b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b50:	693a      	ldr	r2, [r7, #16]
 8011b52:	fb02 f303 	mul.w	r3, r2, r3
 8011b56:	ee07 3a90 	vmov	s15, r3
 8011b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	f000 8111 	beq.w	8011d8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	f000 8083 	beq.w	8011c78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	f200 80a1 	bhi.w	8011cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8011b7a:	69bb      	ldr	r3, [r7, #24]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d003      	beq.n	8011b88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8011b80:	69bb      	ldr	r3, [r7, #24]
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d056      	beq.n	8011c34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8011b86:	e099      	b.n	8011cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011b88:	4b88      	ldr	r3, [pc, #544]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f003 0320 	and.w	r3, r3, #32
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d02d      	beq.n	8011bf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011b94:	4b85      	ldr	r3, [pc, #532]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	08db      	lsrs	r3, r3, #3
 8011b9a:	f003 0303 	and.w	r3, r3, #3
 8011b9e:	4a84      	ldr	r2, [pc, #528]	@ (8011db0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8011ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8011ba4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	ee07 3a90 	vmov	s15, r3
 8011bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	ee07 3a90 	vmov	s15, r3
 8011bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bc6:	ee07 3a90 	vmov	s15, r3
 8011bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8011bd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8011db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011bde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011bea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011bee:	e087      	b.n	8011d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	ee07 3a90 	vmov	s15, r3
 8011bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8011db8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8011bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c02:	4b6a      	ldr	r3, [pc, #424]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c0a:	ee07 3a90 	vmov	s15, r3
 8011c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8011db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011c32:	e065      	b.n	8011d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	ee07 3a90 	vmov	s15, r3
 8011c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8011dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c46:	4b59      	ldr	r3, [pc, #356]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c4e:	ee07 3a90 	vmov	s15, r3
 8011c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8011db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011c76:	e043      	b.n	8011d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	ee07 3a90 	vmov	s15, r3
 8011c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011c82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8011dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8011c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011c8a:	4b48      	ldr	r3, [pc, #288]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c92:	ee07 3a90 	vmov	s15, r3
 8011c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8011c9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8011db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011cba:	e021      	b.n	8011d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	ee07 3a90 	vmov	s15, r3
 8011cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8011dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8011cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011cce:	4b37      	ldr	r3, [pc, #220]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cd6:	ee07 3a90 	vmov	s15, r3
 8011cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8011ce2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8011db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011cfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8011d00:	4b2a      	ldr	r3, [pc, #168]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d04:	0a5b      	lsrs	r3, r3, #9
 8011d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d0a:	ee07 3a90 	vmov	s15, r3
 8011d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8011d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d26:	ee17 2a90 	vmov	r2, s15
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8011d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d32:	0c1b      	lsrs	r3, r3, #16
 8011d34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d38:	ee07 3a90 	vmov	s15, r3
 8011d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8011d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d54:	ee17 2a90 	vmov	r2, s15
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8011d5c:	4b13      	ldr	r3, [pc, #76]	@ (8011dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d60:	0e1b      	lsrs	r3, r3, #24
 8011d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011d66:	ee07 3a90 	vmov	s15, r3
 8011d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8011d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011d82:	ee17 2a90 	vmov	r2, s15
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8011d8a:	e008      	b.n	8011d9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2200      	movs	r2, #0
 8011d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	609a      	str	r2, [r3, #8]
}
 8011d9e:	bf00      	nop
 8011da0:	3724      	adds	r7, #36	@ 0x24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	58024400 	.word	0x58024400
 8011db0:	03d09000 	.word	0x03d09000
 8011db4:	46000000 	.word	0x46000000
 8011db8:	4c742400 	.word	0x4c742400
 8011dbc:	4a742400 	.word	0x4a742400
 8011dc0:	4bbebc20 	.word	0x4bbebc20

08011dc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8011dc4:	b480      	push	{r7}
 8011dc6:	b089      	sub	sp, #36	@ 0x24
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011dcc:	4ba0      	ldr	r3, [pc, #640]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd0:	f003 0303 	and.w	r3, r3, #3
 8011dd4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8011dd6:	4b9e      	ldr	r3, [pc, #632]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dda:	091b      	lsrs	r3, r3, #4
 8011ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011de0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8011de2:	4b9b      	ldr	r3, [pc, #620]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011de6:	f003 0301 	and.w	r3, r3, #1
 8011dea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011dec:	4b98      	ldr	r3, [pc, #608]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011dee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011df0:	08db      	lsrs	r3, r3, #3
 8011df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	fb02 f303 	mul.w	r3, r2, r3
 8011dfc:	ee07 3a90 	vmov	s15, r3
 8011e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f000 8111 	beq.w	8012032 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	2b02      	cmp	r3, #2
 8011e14:	f000 8083 	beq.w	8011f1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011e18:	69bb      	ldr	r3, [r7, #24]
 8011e1a:	2b02      	cmp	r3, #2
 8011e1c:	f200 80a1 	bhi.w	8011f62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d003      	beq.n	8011e2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011e26:	69bb      	ldr	r3, [r7, #24]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d056      	beq.n	8011eda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011e2c:	e099      	b.n	8011f62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e2e:	4b88      	ldr	r3, [pc, #544]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f003 0320 	and.w	r3, r3, #32
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d02d      	beq.n	8011e96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011e3a:	4b85      	ldr	r3, [pc, #532]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	08db      	lsrs	r3, r3, #3
 8011e40:	f003 0303 	and.w	r3, r3, #3
 8011e44:	4a83      	ldr	r2, [pc, #524]	@ (8012054 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011e46:	fa22 f303 	lsr.w	r3, r2, r3
 8011e4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	ee07 3a90 	vmov	s15, r3
 8011e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	ee07 3a90 	vmov	s15, r3
 8011e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011e64:	4b7a      	ldr	r3, [pc, #488]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e6c:	ee07 3a90 	vmov	s15, r3
 8011e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8011e78:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8012058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011e84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011e94:	e087      	b.n	8011fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	ee07 3a90 	vmov	s15, r3
 8011e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ea0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801205c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011ea8:	4b69      	ldr	r3, [pc, #420]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011eb0:	ee07 3a90 	vmov	s15, r3
 8011eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8011ebc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8012058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011ed8:	e065      	b.n	8011fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	ee07 3a90 	vmov	s15, r3
 8011ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ee4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8012060 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011eec:	4b58      	ldr	r3, [pc, #352]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ef4:	ee07 3a90 	vmov	s15, r3
 8011ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8011f00:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8012058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011f1c:	e043      	b.n	8011fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	ee07 3a90 	vmov	s15, r3
 8011f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f28:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8012064 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f30:	4b47      	ldr	r3, [pc, #284]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f38:	ee07 3a90 	vmov	s15, r3
 8011f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8011f44:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8012058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011f60:	e021      	b.n	8011fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	ee07 3a90 	vmov	s15, r3
 8011f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f6c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801205c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f74:	4b36      	ldr	r3, [pc, #216]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f7c:	ee07 3a90 	vmov	s15, r3
 8011f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8011f88:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8012058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011fa4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8011fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011faa:	0a5b      	lsrs	r3, r3, #9
 8011fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011fb0:	ee07 3a90 	vmov	s15, r3
 8011fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8011fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011fcc:	ee17 2a90 	vmov	r2, s15
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8011fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fd8:	0c1b      	lsrs	r3, r3, #16
 8011fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011fde:	ee07 3a90 	vmov	s15, r3
 8011fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8011ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011ffa:	ee17 2a90 	vmov	r2, s15
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8012002:	4b13      	ldr	r3, [pc, #76]	@ (8012050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012006:	0e1b      	lsrs	r3, r3, #24
 8012008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801200c:	ee07 3a90 	vmov	s15, r3
 8012010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012014:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012018:	ee37 7a87 	vadd.f32	s14, s15, s14
 801201c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012028:	ee17 2a90 	vmov	r2, s15
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012030:	e008      	b.n	8012044 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	2200      	movs	r2, #0
 8012036:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2200      	movs	r2, #0
 8012042:	609a      	str	r2, [r3, #8]
}
 8012044:	bf00      	nop
 8012046:	3724      	adds	r7, #36	@ 0x24
 8012048:	46bd      	mov	sp, r7
 801204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204e:	4770      	bx	lr
 8012050:	58024400 	.word	0x58024400
 8012054:	03d09000 	.word	0x03d09000
 8012058:	46000000 	.word	0x46000000
 801205c:	4c742400 	.word	0x4c742400
 8012060:	4a742400 	.word	0x4a742400
 8012064:	4bbebc20 	.word	0x4bbebc20

08012068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012072:	2300      	movs	r3, #0
 8012074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012076:	4b53      	ldr	r3, [pc, #332]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801207a:	f003 0303 	and.w	r3, r3, #3
 801207e:	2b03      	cmp	r3, #3
 8012080:	d101      	bne.n	8012086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	e099      	b.n	80121ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012086:	4b4f      	ldr	r3, [pc, #316]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	4a4e      	ldr	r2, [pc, #312]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801208c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8012090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012092:	f7f1 fa5b 	bl	800354c <HAL_GetTick>
 8012096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012098:	e008      	b.n	80120ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801209a:	f7f1 fa57 	bl	800354c <HAL_GetTick>
 801209e:	4602      	mov	r2, r0
 80120a0:	68bb      	ldr	r3, [r7, #8]
 80120a2:	1ad3      	subs	r3, r2, r3
 80120a4:	2b02      	cmp	r3, #2
 80120a6:	d901      	bls.n	80120ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80120a8:	2303      	movs	r3, #3
 80120aa:	e086      	b.n	80121ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80120ac:	4b45      	ldr	r3, [pc, #276]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1f0      	bne.n	801209a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80120b8:	4b42      	ldr	r3, [pc, #264]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 80120ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	031b      	lsls	r3, r3, #12
 80120c6:	493f      	ldr	r1, [pc, #252]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 80120c8:	4313      	orrs	r3, r2
 80120ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	3b01      	subs	r3, #1
 80120d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	689b      	ldr	r3, [r3, #8]
 80120da:	3b01      	subs	r3, #1
 80120dc:	025b      	lsls	r3, r3, #9
 80120de:	b29b      	uxth	r3, r3
 80120e0:	431a      	orrs	r2, r3
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	3b01      	subs	r3, #1
 80120e8:	041b      	lsls	r3, r3, #16
 80120ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80120ee:	431a      	orrs	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	691b      	ldr	r3, [r3, #16]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	061b      	lsls	r3, r3, #24
 80120f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80120fc:	4931      	ldr	r1, [pc, #196]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 80120fe:	4313      	orrs	r3, r2
 8012100:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012102:	4b30      	ldr	r3, [pc, #192]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012106:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	695b      	ldr	r3, [r3, #20]
 801210e:	492d      	ldr	r1, [pc, #180]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012110:	4313      	orrs	r3, r2
 8012112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012114:	4b2b      	ldr	r3, [pc, #172]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012118:	f023 0220 	bic.w	r2, r3, #32
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	699b      	ldr	r3, [r3, #24]
 8012120:	4928      	ldr	r1, [pc, #160]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012122:	4313      	orrs	r3, r2
 8012124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012126:	4b27      	ldr	r3, [pc, #156]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801212a:	4a26      	ldr	r2, [pc, #152]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801212c:	f023 0310 	bic.w	r3, r3, #16
 8012130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012132:	4b24      	ldr	r3, [pc, #144]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012134:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012136:	4b24      	ldr	r3, [pc, #144]	@ (80121c8 <RCCEx_PLL2_Config+0x160>)
 8012138:	4013      	ands	r3, r2
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	69d2      	ldr	r2, [r2, #28]
 801213e:	00d2      	lsls	r2, r2, #3
 8012140:	4920      	ldr	r1, [pc, #128]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012142:	4313      	orrs	r3, r2
 8012144:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012146:	4b1f      	ldr	r3, [pc, #124]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801214a:	4a1e      	ldr	r2, [pc, #120]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801214c:	f043 0310 	orr.w	r3, r3, #16
 8012150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d106      	bne.n	8012166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012158:	4b1a      	ldr	r3, [pc, #104]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801215c:	4a19      	ldr	r2, [pc, #100]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801215e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012164:	e00f      	b.n	8012186 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012166:	683b      	ldr	r3, [r7, #0]
 8012168:	2b01      	cmp	r3, #1
 801216a:	d106      	bne.n	801217a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801216c:	4b15      	ldr	r3, [pc, #84]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012170:	4a14      	ldr	r2, [pc, #80]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012172:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8012178:	e005      	b.n	8012186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801217a:	4b12      	ldr	r3, [pc, #72]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801217e:	4a11      	ldr	r2, [pc, #68]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012180:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012186:	4b0f      	ldr	r3, [pc, #60]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	4a0e      	ldr	r2, [pc, #56]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 801218c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012192:	f7f1 f9db 	bl	800354c <HAL_GetTick>
 8012196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012198:	e008      	b.n	80121ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801219a:	f7f1 f9d7 	bl	800354c <HAL_GetTick>
 801219e:	4602      	mov	r2, r0
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	d901      	bls.n	80121ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80121a8:	2303      	movs	r3, #3
 80121aa:	e006      	b.n	80121ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80121ac:	4b05      	ldr	r3, [pc, #20]	@ (80121c4 <RCCEx_PLL2_Config+0x15c>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d0f0      	beq.n	801219a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80121b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3710      	adds	r7, #16
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	58024400 	.word	0x58024400
 80121c8:	ffff0007 	.word	0xffff0007

080121cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b084      	sub	sp, #16
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80121d6:	2300      	movs	r3, #0
 80121d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80121da:	4b53      	ldr	r3, [pc, #332]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80121dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121de:	f003 0303 	and.w	r3, r3, #3
 80121e2:	2b03      	cmp	r3, #3
 80121e4:	d101      	bne.n	80121ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80121e6:	2301      	movs	r3, #1
 80121e8:	e099      	b.n	801231e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80121ea:	4b4f      	ldr	r3, [pc, #316]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4a4e      	ldr	r2, [pc, #312]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80121f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80121f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80121f6:	f7f1 f9a9 	bl	800354c <HAL_GetTick>
 80121fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80121fc:	e008      	b.n	8012210 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80121fe:	f7f1 f9a5 	bl	800354c <HAL_GetTick>
 8012202:	4602      	mov	r2, r0
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	1ad3      	subs	r3, r2, r3
 8012208:	2b02      	cmp	r3, #2
 801220a:	d901      	bls.n	8012210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801220c:	2303      	movs	r3, #3
 801220e:	e086      	b.n	801231e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012210:	4b45      	ldr	r3, [pc, #276]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012218:	2b00      	cmp	r3, #0
 801221a:	d1f0      	bne.n	80121fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801221c:	4b42      	ldr	r3, [pc, #264]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 801221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012220:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	051b      	lsls	r3, r3, #20
 801222a:	493f      	ldr	r1, [pc, #252]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 801222c:	4313      	orrs	r3, r2
 801222e:	628b      	str	r3, [r1, #40]	@ 0x28
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	3b01      	subs	r3, #1
 8012236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	689b      	ldr	r3, [r3, #8]
 801223e:	3b01      	subs	r3, #1
 8012240:	025b      	lsls	r3, r3, #9
 8012242:	b29b      	uxth	r3, r3
 8012244:	431a      	orrs	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	3b01      	subs	r3, #1
 801224c:	041b      	lsls	r3, r3, #16
 801224e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8012252:	431a      	orrs	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	691b      	ldr	r3, [r3, #16]
 8012258:	3b01      	subs	r3, #1
 801225a:	061b      	lsls	r3, r3, #24
 801225c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8012260:	4931      	ldr	r1, [pc, #196]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012262:	4313      	orrs	r3, r2
 8012264:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012266:	4b30      	ldr	r3, [pc, #192]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801226a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	695b      	ldr	r3, [r3, #20]
 8012272:	492d      	ldr	r1, [pc, #180]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012274:	4313      	orrs	r3, r2
 8012276:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012278:	4b2b      	ldr	r3, [pc, #172]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 801227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801227c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	699b      	ldr	r3, [r3, #24]
 8012284:	4928      	ldr	r1, [pc, #160]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012286:	4313      	orrs	r3, r2
 8012288:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801228a:	4b27      	ldr	r3, [pc, #156]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 801228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801228e:	4a26      	ldr	r2, [pc, #152]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012294:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012296:	4b24      	ldr	r3, [pc, #144]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012298:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801229a:	4b24      	ldr	r3, [pc, #144]	@ (801232c <RCCEx_PLL3_Config+0x160>)
 801229c:	4013      	ands	r3, r2
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	69d2      	ldr	r2, [r2, #28]
 80122a2:	00d2      	lsls	r2, r2, #3
 80122a4:	4920      	ldr	r1, [pc, #128]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122a6:	4313      	orrs	r3, r2
 80122a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80122aa:	4b1f      	ldr	r3, [pc, #124]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122ae:	4a1e      	ldr	r2, [pc, #120]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80122b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d106      	bne.n	80122ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80122bc:	4b1a      	ldr	r3, [pc, #104]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122c0:	4a19      	ldr	r2, [pc, #100]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80122c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80122c8:	e00f      	b.n	80122ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	2b01      	cmp	r3, #1
 80122ce:	d106      	bne.n	80122de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80122d0:	4b15      	ldr	r3, [pc, #84]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122d4:	4a14      	ldr	r2, [pc, #80]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80122da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80122dc:	e005      	b.n	80122ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80122de:	4b12      	ldr	r3, [pc, #72]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122e2:	4a11      	ldr	r2, [pc, #68]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80122e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80122ea:	4b0f      	ldr	r3, [pc, #60]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	4a0e      	ldr	r2, [pc, #56]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 80122f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80122f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80122f6:	f7f1 f929 	bl	800354c <HAL_GetTick>
 80122fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80122fc:	e008      	b.n	8012310 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80122fe:	f7f1 f925 	bl	800354c <HAL_GetTick>
 8012302:	4602      	mov	r2, r0
 8012304:	68bb      	ldr	r3, [r7, #8]
 8012306:	1ad3      	subs	r3, r2, r3
 8012308:	2b02      	cmp	r3, #2
 801230a:	d901      	bls.n	8012310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801230c:	2303      	movs	r3, #3
 801230e:	e006      	b.n	801231e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012310:	4b05      	ldr	r3, [pc, #20]	@ (8012328 <RCCEx_PLL3_Config+0x15c>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012318:	2b00      	cmp	r3, #0
 801231a:	d0f0      	beq.n	80122fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801231c:	7bfb      	ldrb	r3, [r7, #15]
}
 801231e:	4618      	mov	r0, r3
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop
 8012328:	58024400 	.word	0x58024400
 801232c:	ffff0007 	.word	0xffff0007

08012330 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b084      	sub	sp, #16
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d101      	bne.n	8012342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801233e:	2301      	movs	r3, #1
 8012340:	e10f      	b.n	8012562 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2200      	movs	r2, #0
 8012346:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4a87      	ldr	r2, [pc, #540]	@ (801256c <HAL_SPI_Init+0x23c>)
 801234e:	4293      	cmp	r3, r2
 8012350:	d00f      	beq.n	8012372 <HAL_SPI_Init+0x42>
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4a86      	ldr	r2, [pc, #536]	@ (8012570 <HAL_SPI_Init+0x240>)
 8012358:	4293      	cmp	r3, r2
 801235a:	d00a      	beq.n	8012372 <HAL_SPI_Init+0x42>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	4a84      	ldr	r2, [pc, #528]	@ (8012574 <HAL_SPI_Init+0x244>)
 8012362:	4293      	cmp	r3, r2
 8012364:	d005      	beq.n	8012372 <HAL_SPI_Init+0x42>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	2b0f      	cmp	r3, #15
 801236c:	d901      	bls.n	8012372 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801236e:	2301      	movs	r3, #1
 8012370:	e0f7      	b.n	8012562 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 ff6c 	bl	8013250 <SPI_GetPacketSize>
 8012378:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	4a7b      	ldr	r2, [pc, #492]	@ (801256c <HAL_SPI_Init+0x23c>)
 8012380:	4293      	cmp	r3, r2
 8012382:	d00c      	beq.n	801239e <HAL_SPI_Init+0x6e>
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	4a79      	ldr	r2, [pc, #484]	@ (8012570 <HAL_SPI_Init+0x240>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d007      	beq.n	801239e <HAL_SPI_Init+0x6e>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4a78      	ldr	r2, [pc, #480]	@ (8012574 <HAL_SPI_Init+0x244>)
 8012394:	4293      	cmp	r3, r2
 8012396:	d002      	beq.n	801239e <HAL_SPI_Init+0x6e>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2b08      	cmp	r3, #8
 801239c:	d811      	bhi.n	80123c2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80123a2:	4a72      	ldr	r2, [pc, #456]	@ (801256c <HAL_SPI_Init+0x23c>)
 80123a4:	4293      	cmp	r3, r2
 80123a6:	d009      	beq.n	80123bc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a70      	ldr	r2, [pc, #448]	@ (8012570 <HAL_SPI_Init+0x240>)
 80123ae:	4293      	cmp	r3, r2
 80123b0:	d004      	beq.n	80123bc <HAL_SPI_Init+0x8c>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4a6f      	ldr	r2, [pc, #444]	@ (8012574 <HAL_SPI_Init+0x244>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d104      	bne.n	80123c6 <HAL_SPI_Init+0x96>
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	2b10      	cmp	r3, #16
 80123c0:	d901      	bls.n	80123c6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e0cd      	b.n	8012562 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d106      	bne.n	80123e0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2200      	movs	r2, #0
 80123d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f7ef fe4c 	bl	8002078 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2202      	movs	r2, #2
 80123e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f022 0201 	bic.w	r2, r2, #1
 80123f6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8012402:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	699b      	ldr	r3, [r3, #24]
 8012408:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801240c:	d119      	bne.n	8012442 <HAL_SPI_Init+0x112>
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	685b      	ldr	r3, [r3, #4]
 8012412:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012416:	d103      	bne.n	8012420 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801241c:	2b00      	cmp	r3, #0
 801241e:	d008      	beq.n	8012432 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8012424:	2b00      	cmp	r3, #0
 8012426:	d10c      	bne.n	8012442 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801242c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012430:	d107      	bne.n	8012442 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8012440:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801244a:	2b00      	cmp	r3, #0
 801244c:	d00f      	beq.n	801246e <HAL_SPI_Init+0x13e>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	68db      	ldr	r3, [r3, #12]
 8012452:	2b06      	cmp	r3, #6
 8012454:	d90b      	bls.n	801246e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	430a      	orrs	r2, r1
 801246a:	601a      	str	r2, [r3, #0]
 801246c:	e007      	b.n	801247e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801247c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	69da      	ldr	r2, [r3, #28]
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012486:	431a      	orrs	r2, r3
 8012488:	68bb      	ldr	r3, [r7, #8]
 801248a:	431a      	orrs	r2, r3
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012490:	ea42 0103 	orr.w	r1, r2, r3
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	68da      	ldr	r2, [r3, #12]
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	430a      	orrs	r2, r1
 801249e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124a8:	431a      	orrs	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80124ae:	431a      	orrs	r2, r3
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	699b      	ldr	r3, [r3, #24]
 80124b4:	431a      	orrs	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	691b      	ldr	r3, [r3, #16]
 80124ba:	431a      	orrs	r2, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	695b      	ldr	r3, [r3, #20]
 80124c0:	431a      	orrs	r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6a1b      	ldr	r3, [r3, #32]
 80124c6:	431a      	orrs	r2, r3
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	431a      	orrs	r2, r3
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124d2:	431a      	orrs	r2, r3
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	689b      	ldr	r3, [r3, #8]
 80124d8:	431a      	orrs	r2, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124de:	ea42 0103 	orr.w	r1, r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	430a      	orrs	r2, r1
 80124ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d113      	bne.n	801251e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012508:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801251c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f022 0201 	bic.w	r2, r2, #1
 801252c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	685b      	ldr	r3, [r3, #4]
 8012532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00a      	beq.n	8012550 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	430a      	orrs	r2, r1
 801254e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2201      	movs	r2, #1
 801255c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8012560:	2300      	movs	r3, #0
}
 8012562:	4618      	mov	r0, r3
 8012564:	3710      	adds	r7, #16
 8012566:	46bd      	mov	sp, r7
 8012568:	bd80      	pop	{r7, pc}
 801256a:	bf00      	nop
 801256c:	40013000 	.word	0x40013000
 8012570:	40003800 	.word	0x40003800
 8012574:	40003c00 	.word	0x40003c00

08012578 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af02      	add	r7, sp, #8
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	603b      	str	r3, [r7, #0]
 8012584:	4613      	mov	r3, r2
 8012586:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	3320      	adds	r3, #32
 801258e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012590:	f7f0 ffdc 	bl	800354c <HAL_GetTick>
 8012594:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801259c:	b2db      	uxtb	r3, r3
 801259e:	2b01      	cmp	r3, #1
 80125a0:	d001      	beq.n	80125a6 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 80125a2:	2302      	movs	r3, #2
 80125a4:	e1d1      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 80125a6:	68bb      	ldr	r3, [r7, #8]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <HAL_SPI_Transmit+0x3a>
 80125ac:	88fb      	ldrh	r3, [r7, #6]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d101      	bne.n	80125b6 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 80125b2:	2301      	movs	r3, #1
 80125b4:	e1c9      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d101      	bne.n	80125c4 <HAL_SPI_Transmit+0x4c>
 80125c0:	2302      	movs	r3, #2
 80125c2:	e1c2      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
 80125c4:	68fb      	ldr	r3, [r7, #12]
 80125c6:	2201      	movs	r2, #1
 80125c8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	2203      	movs	r2, #3
 80125d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2200      	movs	r2, #0
 80125d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	88fa      	ldrh	r2, [r7, #6]
 80125e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	88fa      	ldrh	r2, [r7, #6]
 80125ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	2200      	movs	r2, #0
 80125f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	2200      	movs	r2, #0
 80125fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2200      	movs	r2, #0
 8012604:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2200      	movs	r2, #0
 801260c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	2200      	movs	r2, #0
 8012612:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	689b      	ldr	r3, [r3, #8]
 8012618:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 801261c:	d108      	bne.n	8012630 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	e009      	b.n	8012644 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8012642:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	685a      	ldr	r2, [r3, #4]
 801264a:	4b96      	ldr	r3, [pc, #600]	@ (80128a4 <HAL_SPI_Transmit+0x32c>)
 801264c:	4013      	ands	r3, r2
 801264e:	88f9      	ldrh	r1, [r7, #6]
 8012650:	68fa      	ldr	r2, [r7, #12]
 8012652:	6812      	ldr	r2, [r2, #0]
 8012654:	430b      	orrs	r3, r1
 8012656:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f042 0201 	orr.w	r2, r2, #1
 8012666:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012670:	d107      	bne.n	8012682 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012680:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	68db      	ldr	r3, [r3, #12]
 8012686:	2b0f      	cmp	r3, #15
 8012688:	d947      	bls.n	801271a <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801268a:	e03f      	b.n	801270c <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	695b      	ldr	r3, [r3, #20]
 8012692:	f003 0302 	and.w	r3, r3, #2
 8012696:	2b02      	cmp	r3, #2
 8012698:	d114      	bne.n	80126c4 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	6812      	ldr	r2, [r2, #0]
 80126a4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80126aa:	1d1a      	adds	r2, r3, #4
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	3b01      	subs	r3, #1
 80126ba:	b29a      	uxth	r2, r3
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80126c2:	e023      	b.n	801270c <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80126c4:	f7f0 ff42 	bl	800354c <HAL_GetTick>
 80126c8:	4602      	mov	r2, r0
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	1ad3      	subs	r3, r2, r3
 80126ce:	683a      	ldr	r2, [r7, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d803      	bhi.n	80126dc <HAL_SPI_Transmit+0x164>
 80126d4:	683b      	ldr	r3, [r7, #0]
 80126d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126da:	d102      	bne.n	80126e2 <HAL_SPI_Transmit+0x16a>
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d114      	bne.n	801270c <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80126e2:	68f8      	ldr	r0, [r7, #12]
 80126e4:	f000 fce6 	bl	80130b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80126ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2201      	movs	r2, #1
 80126fc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2200      	movs	r2, #0
 8012704:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8012708:	2303      	movs	r3, #3
 801270a:	e11e      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012712:	b29b      	uxth	r3, r3
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1b9      	bne.n	801268c <HAL_SPI_Transmit+0x114>
 8012718:	e0f1      	b.n	80128fe <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	2b07      	cmp	r3, #7
 8012720:	f240 80e6 	bls.w	80128f0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8012724:	e05d      	b.n	80127e2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	f003 0302 	and.w	r3, r3, #2
 8012730:	2b02      	cmp	r3, #2
 8012732:	d132      	bne.n	801279a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801273a:	b29b      	uxth	r3, r3
 801273c:	2b01      	cmp	r3, #1
 801273e:	d918      	bls.n	8012772 <HAL_SPI_Transmit+0x1fa>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012744:	2b00      	cmp	r3, #0
 8012746:	d014      	beq.n	8012772 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	6812      	ldr	r2, [r2, #0]
 8012752:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012758:	1d1a      	adds	r2, r3, #4
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012764:	b29b      	uxth	r3, r3
 8012766:	3b02      	subs	r3, #2
 8012768:	b29a      	uxth	r2, r3
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012770:	e037      	b.n	80127e2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012776:	881a      	ldrh	r2, [r3, #0]
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012780:	1c9a      	adds	r2, r3, #2
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801278c:	b29b      	uxth	r3, r3
 801278e:	3b01      	subs	r3, #1
 8012790:	b29a      	uxth	r2, r3
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012798:	e023      	b.n	80127e2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801279a:	f7f0 fed7 	bl	800354c <HAL_GetTick>
 801279e:	4602      	mov	r2, r0
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	1ad3      	subs	r3, r2, r3
 80127a4:	683a      	ldr	r2, [r7, #0]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d803      	bhi.n	80127b2 <HAL_SPI_Transmit+0x23a>
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127b0:	d102      	bne.n	80127b8 <HAL_SPI_Transmit+0x240>
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d114      	bne.n	80127e2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80127b8:	68f8      	ldr	r0, [r7, #12]
 80127ba:	f000 fc7b 	bl	80130b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80127c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2201      	movs	r2, #1
 80127d2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2200      	movs	r2, #0
 80127da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80127de:	2303      	movs	r3, #3
 80127e0:	e0b3      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d19b      	bne.n	8012726 <HAL_SPI_Transmit+0x1ae>
 80127ee:	e086      	b.n	80128fe <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	695b      	ldr	r3, [r3, #20]
 80127f6:	f003 0302 	and.w	r3, r3, #2
 80127fa:	2b02      	cmp	r3, #2
 80127fc:	d154      	bne.n	80128a8 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012804:	b29b      	uxth	r3, r3
 8012806:	2b03      	cmp	r3, #3
 8012808:	d918      	bls.n	801283c <HAL_SPI_Transmit+0x2c4>
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801280e:	2b40      	cmp	r3, #64	@ 0x40
 8012810:	d914      	bls.n	801283c <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	6812      	ldr	r2, [r2, #0]
 801281c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012822:	1d1a      	adds	r2, r3, #4
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801282e:	b29b      	uxth	r3, r3
 8012830:	3b04      	subs	r3, #4
 8012832:	b29a      	uxth	r2, r3
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801283a:	e059      	b.n	80128f0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012842:	b29b      	uxth	r3, r3
 8012844:	2b01      	cmp	r3, #1
 8012846:	d917      	bls.n	8012878 <HAL_SPI_Transmit+0x300>
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d013      	beq.n	8012878 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012854:	881a      	ldrh	r2, [r3, #0]
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801285e:	1c9a      	adds	r2, r3, #2
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801286a:	b29b      	uxth	r3, r3
 801286c:	3b02      	subs	r3, #2
 801286e:	b29a      	uxth	r2, r3
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012876:	e03b      	b.n	80128f0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	3320      	adds	r3, #32
 8012882:	7812      	ldrb	r2, [r2, #0]
 8012884:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801288a:	1c5a      	adds	r2, r3, #1
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012896:	b29b      	uxth	r3, r3
 8012898:	3b01      	subs	r3, #1
 801289a:	b29a      	uxth	r2, r3
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80128a2:	e025      	b.n	80128f0 <HAL_SPI_Transmit+0x378>
 80128a4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80128a8:	f7f0 fe50 	bl	800354c <HAL_GetTick>
 80128ac:	4602      	mov	r2, r0
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	683a      	ldr	r2, [r7, #0]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d803      	bhi.n	80128c0 <HAL_SPI_Transmit+0x348>
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128be:	d102      	bne.n	80128c6 <HAL_SPI_Transmit+0x34e>
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d114      	bne.n	80128f0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f000 fbf4 	bl	80130b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2201      	movs	r2, #1
 80128e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2200      	movs	r2, #0
 80128e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80128ec:	2303      	movs	r3, #3
 80128ee:	e02c      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	f47f af79 	bne.w	80127f0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	2200      	movs	r2, #0
 8012906:	2108      	movs	r1, #8
 8012908:	68f8      	ldr	r0, [r7, #12]
 801290a:	f000 fc73 	bl	80131f4 <SPI_WaitOnFlagUntilTimeout>
 801290e:	4603      	mov	r3, r0
 8012910:	2b00      	cmp	r3, #0
 8012912:	d007      	beq.n	8012924 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801291a:	f043 0220 	orr.w	r2, r3, #32
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8012924:	68f8      	ldr	r0, [r7, #12]
 8012926:	f000 fbc5 	bl	80130b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	2201      	movs	r2, #1
 801292e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012940:	2b00      	cmp	r3, #0
 8012942:	d001      	beq.n	8012948 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8012944:	2301      	movs	r3, #1
 8012946:	e000      	b.n	801294a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 8012948:	2300      	movs	r3, #0
  }
}
 801294a:	4618      	mov	r0, r3
 801294c:	3718      	adds	r7, #24
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}
 8012952:	bf00      	nop

08012954 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b084      	sub	sp, #16
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	4613      	mov	r3, r2
 8012960:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012968:	b2db      	uxtb	r3, r3
 801296a:	2b01      	cmp	r3, #1
 801296c:	d001      	beq.n	8012972 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 801296e:	2302      	movs	r3, #2
 8012970:	e126      	b.n	8012bc0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <HAL_SPI_Transmit_DMA+0x2a>
 8012978:	88fb      	ldrh	r3, [r7, #6]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d101      	bne.n	8012982 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 801297e:	2301      	movs	r3, #1
 8012980:	e11e      	b.n	8012bc0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012988:	2b01      	cmp	r3, #1
 801298a:	d101      	bne.n	8012990 <HAL_SPI_Transmit_DMA+0x3c>
 801298c:	2302      	movs	r3, #2
 801298e:	e117      	b.n	8012bc0 <HAL_SPI_Transmit_DMA+0x26c>
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2201      	movs	r2, #1
 8012994:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2203      	movs	r2, #3
 801299c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2200      	movs	r2, #0
 80129a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	68ba      	ldr	r2, [r7, #8]
 80129ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	88fa      	ldrh	r2, [r7, #6]
 80129b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	88fa      	ldrh	r2, [r7, #6]
 80129ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	2200      	movs	r2, #0
 80129c2:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2200      	movs	r2, #0
 80129c8:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2200      	movs	r2, #0
 80129d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2200      	movs	r2, #0
 80129dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	689b      	ldr	r3, [r3, #8]
 80129e4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80129e8:	d108      	bne.n	80129fc <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80129f8:	601a      	str	r2, [r3, #0]
 80129fa:	e009      	b.n	8012a10 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	68db      	ldr	r3, [r3, #12]
 8012a02:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8012a0e:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	2b0f      	cmp	r3, #15
 8012a16:	d905      	bls.n	8012a24 <HAL_SPI_Transmit_DMA+0xd0>
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a1c:	699b      	ldr	r3, [r3, #24]
 8012a1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a22:	d10f      	bne.n	8012a44 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8012a28:	2b07      	cmp	r3, #7
 8012a2a:	d911      	bls.n	8012a50 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a30:	699b      	ldr	r3, [r3, #24]
 8012a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a36:	d00b      	beq.n	8012a50 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a3c:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8012a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a42:	d005      	beq.n	8012a50 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2200      	movs	r2, #0
 8012a48:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	e0b7      	b.n	8012bc0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	2b07      	cmp	r3, #7
 8012a56:	d820      	bhi.n	8012a9a <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a5c:	699b      	ldr	r3, [r3, #24]
 8012a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012a62:	d109      	bne.n	8012a78 <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	105b      	asrs	r3, r3, #1
 8012a70:	b29a      	uxth	r2, r3
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a7c:	699b      	ldr	r3, [r3, #24]
 8012a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012a82:	d11e      	bne.n	8012ac2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	3303      	adds	r3, #3
 8012a8e:	109b      	asrs	r3, r3, #2
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8012a98:	e013      	b.n	8012ac2 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	68db      	ldr	r3, [r3, #12]
 8012a9e:	2b0f      	cmp	r3, #15
 8012aa0:	d80f      	bhi.n	8012ac2 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012aac:	d109      	bne.n	8012ac2 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	3301      	adds	r3, #1
 8012ab8:	105b      	asrs	r3, r3, #1
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ac6:	4a40      	ldr	r2, [pc, #256]	@ (8012bc8 <HAL_SPI_Transmit_DMA+0x274>)
 8012ac8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ace:	4a3f      	ldr	r2, [pc, #252]	@ (8012bcc <HAL_SPI_Transmit_DMA+0x278>)
 8012ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8012bd0 <HAL_SPI_Transmit_DMA+0x27c>)
 8012ad8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ade:	2200      	movs	r2, #0
 8012ae0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	689a      	ldr	r2, [r3, #8]
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8012af0:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012afa:	4619      	mov	r1, r3
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	3320      	adds	r3, #32
 8012b02:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8012b0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8012b0c:	f7f2 fcf0 	bl	80054f0 <HAL_DMA_Start_IT>
 8012b10:	4603      	mov	r3, r0
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d011      	beq.n	8012b3a <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012b1c:	f043 0210 	orr.w	r2, r3, #16
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2201      	movs	r2, #1
 8012b2a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	2200      	movs	r2, #0
 8012b32:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8012b36:	2301      	movs	r3, #1
 8012b38:	e042      	b.n	8012bc0 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012b3e:	69db      	ldr	r3, [r3, #28]
 8012b40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012b44:	d108      	bne.n	8012b58 <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	6859      	ldr	r1, [r3, #4]
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	4b20      	ldr	r3, [pc, #128]	@ (8012bd4 <HAL_SPI_Transmit_DMA+0x280>)
 8012b52:	400b      	ands	r3, r1
 8012b54:	6053      	str	r3, [r2, #4]
 8012b56:	e009      	b.n	8012b6c <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	685a      	ldr	r2, [r3, #4]
 8012b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8012bd4 <HAL_SPI_Transmit_DMA+0x280>)
 8012b60:	4013      	ands	r3, r2
 8012b62:	88f9      	ldrh	r1, [r7, #6]
 8012b64:	68fa      	ldr	r2, [r7, #12]
 8012b66:	6812      	ldr	r2, [r2, #0]
 8012b68:	430b      	orrs	r3, r1
 8012b6a:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	689a      	ldr	r2, [r3, #8]
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8012b7a:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	691a      	ldr	r2, [r3, #16]
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8012b8a:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f042 0201 	orr.w	r2, r2, #1
 8012b9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	685b      	ldr	r3, [r3, #4]
 8012ba0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012ba4:	d107      	bne.n	8012bb6 <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012bb4:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8012bbe:	2300      	movs	r3, #0
}
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	3710      	adds	r7, #16
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}
 8012bc8:	0801301f 	.word	0x0801301f
 8012bcc:	08012fd9 	.word	0x08012fd9
 8012bd0:	0801303b 	.word	0x0801303b
 8012bd4:	ffff0000 	.word	0xffff0000

08012bd8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b08a      	sub	sp, #40	@ 0x28
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	691b      	ldr	r3, [r3, #16]
 8012be6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	695b      	ldr	r3, [r3, #20]
 8012bee:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8012bf0:	6a3a      	ldr	r2, [r7, #32]
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	4013      	ands	r3, r2
 8012bf6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	689b      	ldr	r3, [r3, #8]
 8012bfe:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8012c00:	2300      	movs	r3, #0
 8012c02:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012c0a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	3330      	adds	r3, #48	@ 0x30
 8012c12:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d010      	beq.n	8012c40 <HAL_SPI_IRQHandler+0x68>
 8012c1e:	6a3b      	ldr	r3, [r7, #32]
 8012c20:	f003 0308 	and.w	r3, r3, #8
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00b      	beq.n	8012c40 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	699a      	ldr	r2, [r3, #24]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012c36:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f000 f9c3 	bl	8012fc4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8012c3e:	e192      	b.n	8012f66 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d113      	bne.n	8012c72 <HAL_SPI_IRQHandler+0x9a>
 8012c4a:	69bb      	ldr	r3, [r7, #24]
 8012c4c:	f003 0320 	and.w	r3, r3, #32
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d10e      	bne.n	8012c72 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d009      	beq.n	8012c72 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	4798      	blx	r3
    hspi->RxISR(hspi);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c6a:	6878      	ldr	r0, [r7, #4]
 8012c6c:	4798      	blx	r3
    handled = 1UL;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012c72:	69bb      	ldr	r3, [r7, #24]
 8012c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d10f      	bne.n	8012c9c <HAL_SPI_IRQHandler+0xc4>
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	f003 0301 	and.w	r3, r3, #1
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d00a      	beq.n	8012c9c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012c86:	69bb      	ldr	r3, [r7, #24]
 8012c88:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d105      	bne.n	8012c9c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	4798      	blx	r3
    handled = 1UL;
 8012c98:	2301      	movs	r3, #1
 8012c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	f003 0320 	and.w	r3, r3, #32
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d10f      	bne.n	8012cc6 <HAL_SPI_IRQHandler+0xee>
 8012ca6:	69bb      	ldr	r3, [r7, #24]
 8012ca8:	f003 0302 	and.w	r3, r3, #2
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00a      	beq.n	8012cc6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d105      	bne.n	8012cc6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	4798      	blx	r3
    handled = 1UL;
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8012cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	f040 8147 	bne.w	8012f5c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	f003 0308 	and.w	r3, r3, #8
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	f000 808b 	beq.w	8012df0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	699a      	ldr	r2, [r3, #24]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f042 0208 	orr.w	r2, r2, #8
 8012ce8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	699a      	ldr	r2, [r3, #24]
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f042 0210 	orr.w	r2, r2, #16
 8012cf8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	699a      	ldr	r2, [r3, #24]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8012d08:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	691a      	ldr	r2, [r3, #16]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	f022 0208 	bic.w	r2, r2, #8
 8012d18:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	689b      	ldr	r3, [r3, #8]
 8012d20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d13d      	bne.n	8012da4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8012d28:	e036      	b.n	8012d98 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	2b0f      	cmp	r3, #15
 8012d30:	d90b      	bls.n	8012d4a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d3a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012d3c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d42:	1d1a      	adds	r2, r3, #4
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	665a      	str	r2, [r3, #100]	@ 0x64
 8012d48:	e01d      	b.n	8012d86 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	2b07      	cmp	r3, #7
 8012d50:	d90b      	bls.n	8012d6a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	8812      	ldrh	r2, [r2, #0]
 8012d5a:	b292      	uxth	r2, r2
 8012d5c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d62:	1c9a      	adds	r2, r3, #2
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	665a      	str	r2, [r3, #100]	@ 0x64
 8012d68:	e00d      	b.n	8012d86 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d76:	7812      	ldrb	r2, [r2, #0]
 8012d78:	b2d2      	uxtb	r2, r2
 8012d7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012d80:	1c5a      	adds	r2, r3, #1
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	3b01      	subs	r3, #1
 8012d90:	b29a      	uxth	r2, r3
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1c2      	bne.n	8012d2a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f000 f985 	bl	80130b4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2201      	movs	r2, #1
 8012dae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d003      	beq.n	8012dc4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f000 f8f7 	bl	8012fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012dc2:	e0d0      	b.n	8012f66 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8012dc4:	7cfb      	ldrb	r3, [r7, #19]
 8012dc6:	2b05      	cmp	r3, #5
 8012dc8:	d103      	bne.n	8012dd2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8012dca:	6878      	ldr	r0, [r7, #4]
 8012dcc:	f000 f8dc 	bl	8012f88 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8012dd0:	e0c6      	b.n	8012f60 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8012dd2:	7cfb      	ldrb	r3, [r7, #19]
 8012dd4:	2b04      	cmp	r3, #4
 8012dd6:	d103      	bne.n	8012de0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f000 f8cb 	bl	8012f74 <HAL_SPI_RxCpltCallback>
    return;
 8012dde:	e0bf      	b.n	8012f60 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8012de0:	7cfb      	ldrb	r3, [r7, #19]
 8012de2:	2b03      	cmp	r3, #3
 8012de4:	f040 80bc 	bne.w	8012f60 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f7ee fdf7 	bl	80019dc <HAL_SPI_TxCpltCallback>
    return;
 8012dee:	e0b7      	b.n	8012f60 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f000 80b5 	beq.w	8012f66 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8012dfc:	69bb      	ldr	r3, [r7, #24]
 8012dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d00f      	beq.n	8012e26 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e0c:	f043 0204 	orr.w	r2, r3, #4
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	699a      	ldr	r2, [r3, #24]
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e24:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8012e26:	69bb      	ldr	r3, [r7, #24]
 8012e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d00f      	beq.n	8012e50 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e36:	f043 0201 	orr.w	r2, r3, #1
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	699a      	ldr	r2, [r3, #24]
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012e4e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d00f      	beq.n	8012e7a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e60:	f043 0208 	orr.w	r2, r3, #8
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	699a      	ldr	r2, [r3, #24]
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012e78:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8012e7a:	69bb      	ldr	r3, [r7, #24]
 8012e7c:	f003 0320 	and.w	r3, r3, #32
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d00f      	beq.n	8012ea4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e8a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	699a      	ldr	r2, [r3, #24]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	f042 0220 	orr.w	r2, r2, #32
 8012ea2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d05a      	beq.n	8012f64 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	f022 0201 	bic.w	r2, r2, #1
 8012ebc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	6919      	ldr	r1, [r3, #16]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	4b28      	ldr	r3, [pc, #160]	@ (8012f6c <HAL_SPI_IRQHandler+0x394>)
 8012eca:	400b      	ands	r3, r1
 8012ecc:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8012ece:	697b      	ldr	r3, [r7, #20]
 8012ed0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8012ed4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8012ed8:	d138      	bne.n	8012f4c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	689a      	ldr	r2, [r3, #8]
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8012ee8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d013      	beq.n	8012f1a <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8012f70 <HAL_SPI_IRQHandler+0x398>)
 8012ef8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7f3 f87e 	bl	8006000 <HAL_DMA_Abort_IT>
 8012f04:	4603      	mov	r3, r0
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d007      	beq.n	8012f1a <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d020      	beq.n	8012f64 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f26:	4a12      	ldr	r2, [pc, #72]	@ (8012f70 <HAL_SPI_IRQHandler+0x398>)
 8012f28:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7f3 f866 	bl	8006000 <HAL_DMA_Abort_IT>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d014      	beq.n	8012f64 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012f40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8012f4a:	e00b      	b.n	8012f64 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	2201      	movs	r2, #1
 8012f50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f000 f82b 	bl	8012fb0 <HAL_SPI_ErrorCallback>
    return;
 8012f5a:	e003      	b.n	8012f64 <HAL_SPI_IRQHandler+0x38c>
    return;
 8012f5c:	bf00      	nop
 8012f5e:	e002      	b.n	8012f66 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012f60:	bf00      	nop
 8012f62:	e000      	b.n	8012f66 <HAL_SPI_IRQHandler+0x38e>
    return;
 8012f64:	bf00      	nop
  }
}
 8012f66:	3728      	adds	r7, #40	@ 0x28
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	fffffc94 	.word	0xfffffc94
 8012f70:	08013081 	.word	0x08013081

08012f74 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8012f7c:	bf00      	nop
 8012f7e:	370c      	adds	r7, #12
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8012f90:	bf00      	nop
 8012f92:	370c      	adds	r7, #12
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8012fa4:	bf00      	nop
 8012fa6:	370c      	adds	r7, #12
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fae:	4770      	bx	lr

08012fb0 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8012fb8:	bf00      	nop
 8012fba:	370c      	adds	r7, #12
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc2:	4770      	bx	lr

08012fc4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b083      	sub	sp, #12
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8012fcc:	bf00      	nop
 8012fce:	370c      	adds	r7, #12
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd6:	4770      	bx	lr

08012fd8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fe4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	2b07      	cmp	r3, #7
 8012ff0:	d011      	beq.n	8013016 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012ff6:	69db      	ldr	r3, [r3, #28]
 8012ff8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ffc:	d103      	bne.n	8013006 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8012ffe:	68f8      	ldr	r0, [r7, #12]
 8013000:	f7ee fcec 	bl	80019dc <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8013004:	e007      	b.n	8013016 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	691a      	ldr	r2, [r3, #16]
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f042 0208 	orr.w	r2, r2, #8
 8013014:	611a      	str	r2, [r3, #16]
}
 8013016:	bf00      	nop
 8013018:	3710      	adds	r7, #16
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}

0801301e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 801301e:	b580      	push	{r7, lr}
 8013020:	b084      	sub	sp, #16
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801302a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f7ff ffb5 	bl	8012f9c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013032:	bf00      	nop
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}

0801303a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013046:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7f4 f957 	bl	80072fc <HAL_DMA_GetError>
 801304e:	4603      	mov	r3, r0
 8013050:	2b02      	cmp	r3, #2
 8013052:	d011      	beq.n	8013078 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f000 f82d 	bl	80130b4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013060:	f043 0210 	orr.w	r2, r3, #16
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2201      	movs	r2, #1
 801306e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8013072:	68f8      	ldr	r0, [r7, #12]
 8013074:	f7ff ff9c 	bl	8012fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8013078:	bf00      	nop
 801307a:	3710      	adds	r7, #16
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}

08013080 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801308c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2200      	movs	r2, #0
 8013092:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2200      	movs	r2, #0
 801309a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2201      	movs	r2, #1
 80130a2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7ff ff82 	bl	8012fb0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80130ac:	bf00      	nop
 80130ae:	3710      	adds	r7, #16
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	695b      	ldr	r3, [r3, #20]
 80130c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	699a      	ldr	r2, [r3, #24]
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f042 0208 	orr.w	r2, r2, #8
 80130d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	699a      	ldr	r2, [r3, #24]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	f042 0210 	orr.w	r2, r2, #16
 80130e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	f022 0201 	bic.w	r2, r2, #1
 80130f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	6919      	ldr	r1, [r3, #16]
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681a      	ldr	r2, [r3, #0]
 80130fe:	4b3c      	ldr	r3, [pc, #240]	@ (80131f0 <SPI_CloseTransfer+0x13c>)
 8013100:	400b      	ands	r3, r1
 8013102:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	689a      	ldr	r2, [r3, #8]
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8013112:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801311a:	b2db      	uxtb	r3, r3
 801311c:	2b04      	cmp	r3, #4
 801311e:	d014      	beq.n	801314a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f003 0320 	and.w	r3, r3, #32
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00f      	beq.n	801314a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013130:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	699a      	ldr	r2, [r3, #24]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	f042 0220 	orr.w	r2, r2, #32
 8013148:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b03      	cmp	r3, #3
 8013154:	d014      	beq.n	8013180 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801315c:	2b00      	cmp	r3, #0
 801315e:	d00f      	beq.n	8013180 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013166:	f043 0204 	orr.w	r2, r3, #4
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	699a      	ldr	r2, [r3, #24]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801317e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013186:	2b00      	cmp	r3, #0
 8013188:	d00f      	beq.n	80131aa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013190:	f043 0201 	orr.w	r2, r3, #1
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	699a      	ldr	r2, [r3, #24]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80131a8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00f      	beq.n	80131d4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80131ba:	f043 0208 	orr.w	r2, r3, #8
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	699a      	ldr	r2, [r3, #24]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80131d2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2200      	movs	r2, #0
 80131d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2200      	movs	r2, #0
 80131e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80131e4:	bf00      	nop
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr
 80131f0:	fffffc90 	.word	0xfffffc90

080131f4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b084      	sub	sp, #16
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	603b      	str	r3, [r7, #0]
 8013200:	4613      	mov	r3, r2
 8013202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8013204:	e010      	b.n	8013228 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013206:	f7f0 f9a1 	bl	800354c <HAL_GetTick>
 801320a:	4602      	mov	r2, r0
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	1ad3      	subs	r3, r2, r3
 8013210:	683a      	ldr	r2, [r7, #0]
 8013212:	429a      	cmp	r2, r3
 8013214:	d803      	bhi.n	801321e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801321c:	d102      	bne.n	8013224 <SPI_WaitOnFlagUntilTimeout+0x30>
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d101      	bne.n	8013228 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8013224:	2303      	movs	r3, #3
 8013226:	e00f      	b.n	8013248 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	695a      	ldr	r2, [r3, #20]
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	4013      	ands	r3, r2
 8013232:	68ba      	ldr	r2, [r7, #8]
 8013234:	429a      	cmp	r2, r3
 8013236:	bf0c      	ite	eq
 8013238:	2301      	moveq	r3, #1
 801323a:	2300      	movne	r3, #0
 801323c:	b2db      	uxtb	r3, r3
 801323e:	461a      	mov	r2, r3
 8013240:	79fb      	ldrb	r3, [r7, #7]
 8013242:	429a      	cmp	r2, r3
 8013244:	d0df      	beq.n	8013206 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8013246:	2300      	movs	r3, #0
}
 8013248:	4618      	mov	r0, r3
 801324a:	3710      	adds	r7, #16
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8013250:	b480      	push	{r7}
 8013252:	b085      	sub	sp, #20
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801325c:	095b      	lsrs	r3, r3, #5
 801325e:	3301      	adds	r3, #1
 8013260:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	68db      	ldr	r3, [r3, #12]
 8013266:	3301      	adds	r3, #1
 8013268:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	3307      	adds	r3, #7
 801326e:	08db      	lsrs	r3, r3, #3
 8013270:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8013272:	68bb      	ldr	r3, [r7, #8]
 8013274:	68fa      	ldr	r2, [r7, #12]
 8013276:	fb02 f303 	mul.w	r3, r2, r3
}
 801327a:	4618      	mov	r0, r3
 801327c:	3714      	adds	r7, #20
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013286:	b580      	push	{r7, lr}
 8013288:	b082      	sub	sp, #8
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013294:	2301      	movs	r3, #1
 8013296:	e049      	b.n	801332c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801329e:	b2db      	uxtb	r3, r3
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d106      	bne.n	80132b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f7ee ffab 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2202      	movs	r2, #2
 80132b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681a      	ldr	r2, [r3, #0]
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	3304      	adds	r3, #4
 80132c2:	4619      	mov	r1, r3
 80132c4:	4610      	mov	r0, r2
 80132c6:	f000 fadf 	bl	8013888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2201      	movs	r2, #1
 80132ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2201      	movs	r2, #1
 80132d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2201      	movs	r2, #1
 80132de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2201      	movs	r2, #1
 80132e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2201      	movs	r2, #1
 80132ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2201      	movs	r2, #1
 80132f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2201      	movs	r2, #1
 80132fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2201      	movs	r2, #1
 8013306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	2201      	movs	r2, #1
 801330e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2201      	movs	r2, #1
 8013316:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2201      	movs	r2, #1
 801331e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	2201      	movs	r2, #1
 8013326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801332a:	2300      	movs	r3, #0
}
 801332c:	4618      	mov	r0, r3
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013334:	b480      	push	{r7}
 8013336:	b085      	sub	sp, #20
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013342:	b2db      	uxtb	r3, r3
 8013344:	2b01      	cmp	r3, #1
 8013346:	d001      	beq.n	801334c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013348:	2301      	movs	r3, #1
 801334a:	e054      	b.n	80133f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2202      	movs	r2, #2
 8013350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	68da      	ldr	r2, [r3, #12]
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	f042 0201 	orr.w	r2, r2, #1
 8013362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	4a26      	ldr	r2, [pc, #152]	@ (8013404 <HAL_TIM_Base_Start_IT+0xd0>)
 801336a:	4293      	cmp	r3, r2
 801336c:	d022      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013376:	d01d      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	4a22      	ldr	r2, [pc, #136]	@ (8013408 <HAL_TIM_Base_Start_IT+0xd4>)
 801337e:	4293      	cmp	r3, r2
 8013380:	d018      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4a21      	ldr	r2, [pc, #132]	@ (801340c <HAL_TIM_Base_Start_IT+0xd8>)
 8013388:	4293      	cmp	r3, r2
 801338a:	d013      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	4a1f      	ldr	r2, [pc, #124]	@ (8013410 <HAL_TIM_Base_Start_IT+0xdc>)
 8013392:	4293      	cmp	r3, r2
 8013394:	d00e      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	4a1e      	ldr	r2, [pc, #120]	@ (8013414 <HAL_TIM_Base_Start_IT+0xe0>)
 801339c:	4293      	cmp	r3, r2
 801339e:	d009      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	4a1c      	ldr	r2, [pc, #112]	@ (8013418 <HAL_TIM_Base_Start_IT+0xe4>)
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d004      	beq.n	80133b4 <HAL_TIM_Base_Start_IT+0x80>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	4a1b      	ldr	r2, [pc, #108]	@ (801341c <HAL_TIM_Base_Start_IT+0xe8>)
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d115      	bne.n	80133e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	689a      	ldr	r2, [r3, #8]
 80133ba:	4b19      	ldr	r3, [pc, #100]	@ (8013420 <HAL_TIM_Base_Start_IT+0xec>)
 80133bc:	4013      	ands	r3, r2
 80133be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2b06      	cmp	r3, #6
 80133c4:	d015      	beq.n	80133f2 <HAL_TIM_Base_Start_IT+0xbe>
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80133cc:	d011      	beq.n	80133f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f042 0201 	orr.w	r2, r2, #1
 80133dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80133de:	e008      	b.n	80133f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f042 0201 	orr.w	r2, r2, #1
 80133ee:	601a      	str	r2, [r3, #0]
 80133f0:	e000      	b.n	80133f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80133f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80133f4:	2300      	movs	r3, #0
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	3714      	adds	r7, #20
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	40010000 	.word	0x40010000
 8013408:	40000400 	.word	0x40000400
 801340c:	40000800 	.word	0x40000800
 8013410:	40000c00 	.word	0x40000c00
 8013414:	40010400 	.word	0x40010400
 8013418:	40001800 	.word	0x40001800
 801341c:	40014000 	.word	0x40014000
 8013420:	00010007 	.word	0x00010007

08013424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	691b      	ldr	r3, [r3, #16]
 801343a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	f003 0302 	and.w	r3, r3, #2
 8013442:	2b00      	cmp	r3, #0
 8013444:	d020      	beq.n	8013488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	f003 0302 	and.w	r3, r3, #2
 801344c:	2b00      	cmp	r3, #0
 801344e:	d01b      	beq.n	8013488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f06f 0202 	mvn.w	r2, #2
 8013458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2201      	movs	r2, #1
 801345e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	699b      	ldr	r3, [r3, #24]
 8013466:	f003 0303 	and.w	r3, r3, #3
 801346a:	2b00      	cmp	r3, #0
 801346c:	d003      	beq.n	8013476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f000 f9ec 	bl	801384c <HAL_TIM_IC_CaptureCallback>
 8013474:	e005      	b.n	8013482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f000 f9de 	bl	8013838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f000 f9ef 	bl	8013860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	2200      	movs	r2, #0
 8013486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	f003 0304 	and.w	r3, r3, #4
 801348e:	2b00      	cmp	r3, #0
 8013490:	d020      	beq.n	80134d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f003 0304 	and.w	r3, r3, #4
 8013498:	2b00      	cmp	r3, #0
 801349a:	d01b      	beq.n	80134d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	f06f 0204 	mvn.w	r2, #4
 80134a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2202      	movs	r2, #2
 80134aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	699b      	ldr	r3, [r3, #24]
 80134b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d003      	beq.n	80134c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 f9c6 	bl	801384c <HAL_TIM_IC_CaptureCallback>
 80134c0:	e005      	b.n	80134ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f000 f9b8 	bl	8013838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f000 f9c9 	bl	8013860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2200      	movs	r2, #0
 80134d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	f003 0308 	and.w	r3, r3, #8
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d020      	beq.n	8013520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f003 0308 	and.w	r3, r3, #8
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d01b      	beq.n	8013520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	f06f 0208 	mvn.w	r2, #8
 80134f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2204      	movs	r2, #4
 80134f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	69db      	ldr	r3, [r3, #28]
 80134fe:	f003 0303 	and.w	r3, r3, #3
 8013502:	2b00      	cmp	r3, #0
 8013504:	d003      	beq.n	801350e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f000 f9a0 	bl	801384c <HAL_TIM_IC_CaptureCallback>
 801350c:	e005      	b.n	801351a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f000 f992 	bl	8013838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 f9a3 	bl	8013860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2200      	movs	r2, #0
 801351e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	f003 0310 	and.w	r3, r3, #16
 8013526:	2b00      	cmp	r3, #0
 8013528:	d020      	beq.n	801356c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f003 0310 	and.w	r3, r3, #16
 8013530:	2b00      	cmp	r3, #0
 8013532:	d01b      	beq.n	801356c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f06f 0210 	mvn.w	r2, #16
 801353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2208      	movs	r2, #8
 8013542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	69db      	ldr	r3, [r3, #28]
 801354a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801354e:	2b00      	cmp	r3, #0
 8013550:	d003      	beq.n	801355a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013552:	6878      	ldr	r0, [r7, #4]
 8013554:	f000 f97a 	bl	801384c <HAL_TIM_IC_CaptureCallback>
 8013558:	e005      	b.n	8013566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 f96c 	bl	8013838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f000 f97d 	bl	8013860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	2200      	movs	r2, #0
 801356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	f003 0301 	and.w	r3, r3, #1
 8013572:	2b00      	cmp	r3, #0
 8013574:	d00c      	beq.n	8013590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	f003 0301 	and.w	r3, r3, #1
 801357c:	2b00      	cmp	r3, #0
 801357e:	d007      	beq.n	8013590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	f06f 0201 	mvn.w	r2, #1
 8013588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 f94a 	bl	8013824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013596:	2b00      	cmp	r3, #0
 8013598:	d104      	bne.n	80135a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00c      	beq.n	80135be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d007      	beq.n	80135be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80135b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f000 fb3b 	bl	8013c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80135be:	68bb      	ldr	r3, [r7, #8]
 80135c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d00c      	beq.n	80135e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d007      	beq.n	80135e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80135da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f000 fb33 	bl	8013c48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d00c      	beq.n	8013606 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d007      	beq.n	8013606 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80135fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f000 f937 	bl	8013874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	f003 0320 	and.w	r3, r3, #32
 801360c:	2b00      	cmp	r3, #0
 801360e:	d00c      	beq.n	801362a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	f003 0320 	and.w	r3, r3, #32
 8013616:	2b00      	cmp	r3, #0
 8013618:	d007      	beq.n	801362a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f06f 0220 	mvn.w	r2, #32
 8013622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013624:	6878      	ldr	r0, [r7, #4]
 8013626:	f000 fafb 	bl	8013c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801362a:	bf00      	nop
 801362c:	3710      	adds	r7, #16
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
	...

08013634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801363e:	2300      	movs	r3, #0
 8013640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013648:	2b01      	cmp	r3, #1
 801364a:	d101      	bne.n	8013650 <HAL_TIM_ConfigClockSource+0x1c>
 801364c:	2302      	movs	r3, #2
 801364e:	e0dc      	b.n	801380a <HAL_TIM_ConfigClockSource+0x1d6>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2201      	movs	r2, #1
 8013654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2202      	movs	r2, #2
 801365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	689b      	ldr	r3, [r3, #8]
 8013666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8013668:	68ba      	ldr	r2, [r7, #8]
 801366a:	4b6a      	ldr	r3, [pc, #424]	@ (8013814 <HAL_TIM_ConfigClockSource+0x1e0>)
 801366c:	4013      	ands	r3, r2
 801366e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013670:	68bb      	ldr	r3, [r7, #8]
 8013672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	68ba      	ldr	r2, [r7, #8]
 801367e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	4a64      	ldr	r2, [pc, #400]	@ (8013818 <HAL_TIM_ConfigClockSource+0x1e4>)
 8013686:	4293      	cmp	r3, r2
 8013688:	f000 80a9 	beq.w	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 801368c:	4a62      	ldr	r2, [pc, #392]	@ (8013818 <HAL_TIM_ConfigClockSource+0x1e4>)
 801368e:	4293      	cmp	r3, r2
 8013690:	f200 80ae 	bhi.w	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013694:	4a61      	ldr	r2, [pc, #388]	@ (801381c <HAL_TIM_ConfigClockSource+0x1e8>)
 8013696:	4293      	cmp	r3, r2
 8013698:	f000 80a1 	beq.w	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 801369c:	4a5f      	ldr	r2, [pc, #380]	@ (801381c <HAL_TIM_ConfigClockSource+0x1e8>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	f200 80a6 	bhi.w	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136a4:	4a5e      	ldr	r2, [pc, #376]	@ (8013820 <HAL_TIM_ConfigClockSource+0x1ec>)
 80136a6:	4293      	cmp	r3, r2
 80136a8:	f000 8099 	beq.w	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 80136ac:	4a5c      	ldr	r2, [pc, #368]	@ (8013820 <HAL_TIM_ConfigClockSource+0x1ec>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	f200 809e 	bhi.w	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80136b8:	f000 8091 	beq.w	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 80136bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80136c0:	f200 8096 	bhi.w	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80136c8:	f000 8089 	beq.w	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 80136cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80136d0:	f200 808e 	bhi.w	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80136d8:	d03e      	beq.n	8013758 <HAL_TIM_ConfigClockSource+0x124>
 80136da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80136de:	f200 8087 	bhi.w	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80136e6:	f000 8086 	beq.w	80137f6 <HAL_TIM_ConfigClockSource+0x1c2>
 80136ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80136ee:	d87f      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136f0:	2b70      	cmp	r3, #112	@ 0x70
 80136f2:	d01a      	beq.n	801372a <HAL_TIM_ConfigClockSource+0xf6>
 80136f4:	2b70      	cmp	r3, #112	@ 0x70
 80136f6:	d87b      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80136f8:	2b60      	cmp	r3, #96	@ 0x60
 80136fa:	d050      	beq.n	801379e <HAL_TIM_ConfigClockSource+0x16a>
 80136fc:	2b60      	cmp	r3, #96	@ 0x60
 80136fe:	d877      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013700:	2b50      	cmp	r3, #80	@ 0x50
 8013702:	d03c      	beq.n	801377e <HAL_TIM_ConfigClockSource+0x14a>
 8013704:	2b50      	cmp	r3, #80	@ 0x50
 8013706:	d873      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013708:	2b40      	cmp	r3, #64	@ 0x40
 801370a:	d058      	beq.n	80137be <HAL_TIM_ConfigClockSource+0x18a>
 801370c:	2b40      	cmp	r3, #64	@ 0x40
 801370e:	d86f      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013710:	2b30      	cmp	r3, #48	@ 0x30
 8013712:	d064      	beq.n	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 8013714:	2b30      	cmp	r3, #48	@ 0x30
 8013716:	d86b      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013718:	2b20      	cmp	r3, #32
 801371a:	d060      	beq.n	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 801371c:	2b20      	cmp	r3, #32
 801371e:	d867      	bhi.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8013720:	2b00      	cmp	r3, #0
 8013722:	d05c      	beq.n	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 8013724:	2b10      	cmp	r3, #16
 8013726:	d05a      	beq.n	80137de <HAL_TIM_ConfigClockSource+0x1aa>
 8013728:	e062      	b.n	80137f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801373a:	f000 f9c3 	bl	8013ac4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801374c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	68ba      	ldr	r2, [r7, #8]
 8013754:	609a      	str	r2, [r3, #8]
      break;
 8013756:	e04f      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8013764:	683b      	ldr	r3, [r7, #0]
 8013766:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8013768:	f000 f9ac 	bl	8013ac4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	689a      	ldr	r2, [r3, #8]
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801377a:	609a      	str	r2, [r3, #8]
      break;
 801377c:	e03c      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801378a:	461a      	mov	r2, r3
 801378c:	f000 f91c 	bl	80139c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	2150      	movs	r1, #80	@ 0x50
 8013796:	4618      	mov	r0, r3
 8013798:	f000 f976 	bl	8013a88 <TIM_ITRx_SetConfig>
      break;
 801379c:	e02c      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80137a6:	683b      	ldr	r3, [r7, #0]
 80137a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80137aa:	461a      	mov	r2, r3
 80137ac:	f000 f93b 	bl	8013a26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	2160      	movs	r1, #96	@ 0x60
 80137b6:	4618      	mov	r0, r3
 80137b8:	f000 f966 	bl	8013a88 <TIM_ITRx_SetConfig>
      break;
 80137bc:	e01c      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80137ca:	461a      	mov	r2, r3
 80137cc:	f000 f8fc 	bl	80139c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	2140      	movs	r1, #64	@ 0x40
 80137d6:	4618      	mov	r0, r3
 80137d8:	f000 f956 	bl	8013a88 <TIM_ITRx_SetConfig>
      break;
 80137dc:	e00c      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681a      	ldr	r2, [r3, #0]
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	4619      	mov	r1, r3
 80137e8:	4610      	mov	r0, r2
 80137ea:	f000 f94d 	bl	8013a88 <TIM_ITRx_SetConfig>
      break;
 80137ee:	e003      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80137f0:	2301      	movs	r3, #1
 80137f2:	73fb      	strb	r3, [r7, #15]
      break;
 80137f4:	e000      	b.n	80137f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80137f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2201      	movs	r2, #1
 80137fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2200      	movs	r2, #0
 8013804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8013808:	7bfb      	ldrb	r3, [r7, #15]
}
 801380a:	4618      	mov	r0, r3
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	ffceff88 	.word	0xffceff88
 8013818:	00100040 	.word	0x00100040
 801381c:	00100030 	.word	0x00100030
 8013820:	00100020 	.word	0x00100020

08013824 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013824:	b480      	push	{r7}
 8013826:	b083      	sub	sp, #12
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801382c:	bf00      	nop
 801382e:	370c      	adds	r7, #12
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr

08013838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013838:	b480      	push	{r7}
 801383a:	b083      	sub	sp, #12
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013840:	bf00      	nop
 8013842:	370c      	adds	r7, #12
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr

0801384c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801384c:	b480      	push	{r7}
 801384e:	b083      	sub	sp, #12
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013854:	bf00      	nop
 8013856:	370c      	adds	r7, #12
 8013858:	46bd      	mov	sp, r7
 801385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385e:	4770      	bx	lr

08013860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8013860:	b480      	push	{r7}
 8013862:	b083      	sub	sp, #12
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8013868:	bf00      	nop
 801386a:	370c      	adds	r7, #12
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr

08013874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801387c:	bf00      	nop
 801387e:	370c      	adds	r7, #12
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr

08013888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013888:	b480      	push	{r7}
 801388a:	b085      	sub	sp, #20
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
 8013890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	4a43      	ldr	r2, [pc, #268]	@ (80139a8 <TIM_Base_SetConfig+0x120>)
 801389c:	4293      	cmp	r3, r2
 801389e:	d013      	beq.n	80138c8 <TIM_Base_SetConfig+0x40>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138a6:	d00f      	beq.n	80138c8 <TIM_Base_SetConfig+0x40>
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	4a40      	ldr	r2, [pc, #256]	@ (80139ac <TIM_Base_SetConfig+0x124>)
 80138ac:	4293      	cmp	r3, r2
 80138ae:	d00b      	beq.n	80138c8 <TIM_Base_SetConfig+0x40>
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	4a3f      	ldr	r2, [pc, #252]	@ (80139b0 <TIM_Base_SetConfig+0x128>)
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d007      	beq.n	80138c8 <TIM_Base_SetConfig+0x40>
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	4a3e      	ldr	r2, [pc, #248]	@ (80139b4 <TIM_Base_SetConfig+0x12c>)
 80138bc:	4293      	cmp	r3, r2
 80138be:	d003      	beq.n	80138c8 <TIM_Base_SetConfig+0x40>
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	4a3d      	ldr	r2, [pc, #244]	@ (80139b8 <TIM_Base_SetConfig+0x130>)
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d108      	bne.n	80138da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80138ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	68fa      	ldr	r2, [r7, #12]
 80138d6:	4313      	orrs	r3, r2
 80138d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	4a32      	ldr	r2, [pc, #200]	@ (80139a8 <TIM_Base_SetConfig+0x120>)
 80138de:	4293      	cmp	r3, r2
 80138e0:	d01f      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138e8:	d01b      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	4a2f      	ldr	r2, [pc, #188]	@ (80139ac <TIM_Base_SetConfig+0x124>)
 80138ee:	4293      	cmp	r3, r2
 80138f0:	d017      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4a2e      	ldr	r2, [pc, #184]	@ (80139b0 <TIM_Base_SetConfig+0x128>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d013      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4a2d      	ldr	r2, [pc, #180]	@ (80139b4 <TIM_Base_SetConfig+0x12c>)
 80138fe:	4293      	cmp	r3, r2
 8013900:	d00f      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	4a2c      	ldr	r2, [pc, #176]	@ (80139b8 <TIM_Base_SetConfig+0x130>)
 8013906:	4293      	cmp	r3, r2
 8013908:	d00b      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4a2b      	ldr	r2, [pc, #172]	@ (80139bc <TIM_Base_SetConfig+0x134>)
 801390e:	4293      	cmp	r3, r2
 8013910:	d007      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	4a2a      	ldr	r2, [pc, #168]	@ (80139c0 <TIM_Base_SetConfig+0x138>)
 8013916:	4293      	cmp	r3, r2
 8013918:	d003      	beq.n	8013922 <TIM_Base_SetConfig+0x9a>
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	4a29      	ldr	r2, [pc, #164]	@ (80139c4 <TIM_Base_SetConfig+0x13c>)
 801391e:	4293      	cmp	r3, r2
 8013920:	d108      	bne.n	8013934 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8013928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	68db      	ldr	r3, [r3, #12]
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	4313      	orrs	r3, r2
 8013932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	695b      	ldr	r3, [r3, #20]
 801393e:	4313      	orrs	r3, r2
 8013940:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	689a      	ldr	r2, [r3, #8]
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801394a:	683b      	ldr	r3, [r7, #0]
 801394c:	681a      	ldr	r2, [r3, #0]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	4a14      	ldr	r2, [pc, #80]	@ (80139a8 <TIM_Base_SetConfig+0x120>)
 8013956:	4293      	cmp	r3, r2
 8013958:	d00f      	beq.n	801397a <TIM_Base_SetConfig+0xf2>
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4a16      	ldr	r2, [pc, #88]	@ (80139b8 <TIM_Base_SetConfig+0x130>)
 801395e:	4293      	cmp	r3, r2
 8013960:	d00b      	beq.n	801397a <TIM_Base_SetConfig+0xf2>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4a15      	ldr	r2, [pc, #84]	@ (80139bc <TIM_Base_SetConfig+0x134>)
 8013966:	4293      	cmp	r3, r2
 8013968:	d007      	beq.n	801397a <TIM_Base_SetConfig+0xf2>
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	4a14      	ldr	r2, [pc, #80]	@ (80139c0 <TIM_Base_SetConfig+0x138>)
 801396e:	4293      	cmp	r3, r2
 8013970:	d003      	beq.n	801397a <TIM_Base_SetConfig+0xf2>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	4a13      	ldr	r2, [pc, #76]	@ (80139c4 <TIM_Base_SetConfig+0x13c>)
 8013976:	4293      	cmp	r3, r2
 8013978:	d103      	bne.n	8013982 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	691a      	ldr	r2, [r3, #16]
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	f043 0204 	orr.w	r2, r3, #4
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	2201      	movs	r2, #1
 8013992:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	68fa      	ldr	r2, [r7, #12]
 8013998:	601a      	str	r2, [r3, #0]
}
 801399a:	bf00      	nop
 801399c:	3714      	adds	r7, #20
 801399e:	46bd      	mov	sp, r7
 80139a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a4:	4770      	bx	lr
 80139a6:	bf00      	nop
 80139a8:	40010000 	.word	0x40010000
 80139ac:	40000400 	.word	0x40000400
 80139b0:	40000800 	.word	0x40000800
 80139b4:	40000c00 	.word	0x40000c00
 80139b8:	40010400 	.word	0x40010400
 80139bc:	40014000 	.word	0x40014000
 80139c0:	40014400 	.word	0x40014400
 80139c4:	40014800 	.word	0x40014800

080139c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80139c8:	b480      	push	{r7}
 80139ca:	b087      	sub	sp, #28
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	60f8      	str	r0, [r7, #12]
 80139d0:	60b9      	str	r1, [r7, #8]
 80139d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	6a1b      	ldr	r3, [r3, #32]
 80139d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	6a1b      	ldr	r3, [r3, #32]
 80139de:	f023 0201 	bic.w	r2, r3, #1
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	699b      	ldr	r3, [r3, #24]
 80139ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80139f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	011b      	lsls	r3, r3, #4
 80139f8:	693a      	ldr	r2, [r7, #16]
 80139fa:	4313      	orrs	r3, r2
 80139fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	f023 030a 	bic.w	r3, r3, #10
 8013a04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8013a06:	697a      	ldr	r2, [r7, #20]
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	4313      	orrs	r3, r2
 8013a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	693a      	ldr	r2, [r7, #16]
 8013a12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	697a      	ldr	r2, [r7, #20]
 8013a18:	621a      	str	r2, [r3, #32]
}
 8013a1a:	bf00      	nop
 8013a1c:	371c      	adds	r7, #28
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a24:	4770      	bx	lr

08013a26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8013a26:	b480      	push	{r7}
 8013a28:	b087      	sub	sp, #28
 8013a2a:	af00      	add	r7, sp, #0
 8013a2c:	60f8      	str	r0, [r7, #12]
 8013a2e:	60b9      	str	r1, [r7, #8]
 8013a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6a1b      	ldr	r3, [r3, #32]
 8013a36:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	f023 0210 	bic.w	r2, r3, #16
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	699b      	ldr	r3, [r3, #24]
 8013a48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8013a50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	031b      	lsls	r3, r3, #12
 8013a56:	693a      	ldr	r2, [r7, #16]
 8013a58:	4313      	orrs	r3, r2
 8013a5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8013a62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8013a64:	68bb      	ldr	r3, [r7, #8]
 8013a66:	011b      	lsls	r3, r3, #4
 8013a68:	697a      	ldr	r2, [r7, #20]
 8013a6a:	4313      	orrs	r3, r2
 8013a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	697a      	ldr	r2, [r7, #20]
 8013a78:	621a      	str	r2, [r3, #32]
}
 8013a7a:	bf00      	nop
 8013a7c:	371c      	adds	r7, #28
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a84:	4770      	bx	lr
	...

08013a88 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8013a88:	b480      	push	{r7}
 8013a8a:	b085      	sub	sp, #20
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
 8013a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	4b09      	ldr	r3, [pc, #36]	@ (8013ac0 <TIM_ITRx_SetConfig+0x38>)
 8013a9c:	4013      	ands	r3, r2
 8013a9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013aa0:	683a      	ldr	r2, [r7, #0]
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	4313      	orrs	r3, r2
 8013aa6:	f043 0307 	orr.w	r3, r3, #7
 8013aaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	609a      	str	r2, [r3, #8]
}
 8013ab2:	bf00      	nop
 8013ab4:	3714      	adds	r7, #20
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr
 8013abe:	bf00      	nop
 8013ac0:	ffcfff8f 	.word	0xffcfff8f

08013ac4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b087      	sub	sp, #28
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	607a      	str	r2, [r7, #4]
 8013ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	689b      	ldr	r3, [r3, #8]
 8013ad6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013ad8:	697b      	ldr	r3, [r7, #20]
 8013ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8013ade:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013ae0:	683b      	ldr	r3, [r7, #0]
 8013ae2:	021a      	lsls	r2, r3, #8
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	431a      	orrs	r2, r3
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	4313      	orrs	r3, r2
 8013aec:	697a      	ldr	r2, [r7, #20]
 8013aee:	4313      	orrs	r3, r2
 8013af0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	697a      	ldr	r2, [r7, #20]
 8013af6:	609a      	str	r2, [r3, #8]
}
 8013af8:	bf00      	nop
 8013afa:	371c      	adds	r7, #28
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b085      	sub	sp, #20
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
 8013b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	d101      	bne.n	8013b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013b18:	2302      	movs	r3, #2
 8013b1a:	e06d      	b.n	8013bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2201      	movs	r2, #1
 8013b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2202      	movs	r2, #2
 8013b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	689b      	ldr	r3, [r3, #8]
 8013b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4a30      	ldr	r2, [pc, #192]	@ (8013c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013b42:	4293      	cmp	r3, r2
 8013b44:	d004      	beq.n	8013b50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8013c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	d108      	bne.n	8013b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8013b56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	685b      	ldr	r3, [r3, #4]
 8013b5c:	68fa      	ldr	r2, [r7, #12]
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013b68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	4313      	orrs	r3, r2
 8013b72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	4a20      	ldr	r2, [pc, #128]	@ (8013c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d022      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b8e:	d01d      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	4a1d      	ldr	r2, [pc, #116]	@ (8013c0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013b96:	4293      	cmp	r3, r2
 8013b98:	d018      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8013c10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013ba0:	4293      	cmp	r3, r2
 8013ba2:	d013      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8013c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d00e      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	4a15      	ldr	r2, [pc, #84]	@ (8013c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013bb4:	4293      	cmp	r3, r2
 8013bb6:	d009      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	4a16      	ldr	r2, [pc, #88]	@ (8013c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d004      	beq.n	8013bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	4a15      	ldr	r2, [pc, #84]	@ (8013c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8013bc8:	4293      	cmp	r3, r2
 8013bca:	d10c      	bne.n	8013be6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	68ba      	ldr	r2, [r7, #8]
 8013bda:	4313      	orrs	r3, r2
 8013bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	68ba      	ldr	r2, [r7, #8]
 8013be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2201      	movs	r2, #1
 8013bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013bf6:	2300      	movs	r3, #0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3714      	adds	r7, #20
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c02:	4770      	bx	lr
 8013c04:	40010000 	.word	0x40010000
 8013c08:	40010400 	.word	0x40010400
 8013c0c:	40000400 	.word	0x40000400
 8013c10:	40000800 	.word	0x40000800
 8013c14:	40000c00 	.word	0x40000c00
 8013c18:	40001800 	.word	0x40001800
 8013c1c:	40014000 	.word	0x40014000

08013c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8013c20:	b480      	push	{r7}
 8013c22:	b083      	sub	sp, #12
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8013c28:	bf00      	nop
 8013c2a:	370c      	adds	r7, #12
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c32:	4770      	bx	lr

08013c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8013c34:	b480      	push	{r7}
 8013c36:	b083      	sub	sp, #12
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8013c3c:	bf00      	nop
 8013c3e:	370c      	adds	r7, #12
 8013c40:	46bd      	mov	sp, r7
 8013c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c46:	4770      	bx	lr

08013c48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8013c48:	b480      	push	{r7}
 8013c4a:	b083      	sub	sp, #12
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8013c50:	bf00      	nop
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b082      	sub	sp, #8
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d101      	bne.n	8013c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013c6a:	2301      	movs	r3, #1
 8013c6c:	e042      	b.n	8013cf4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d106      	bne.n	8013c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f7ee fae9 	bl	8002258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2224      	movs	r2, #36	@ 0x24
 8013c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	681a      	ldr	r2, [r3, #0]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	f022 0201 	bic.w	r2, r2, #1
 8013c9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d002      	beq.n	8013cac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f001 fa6a 	bl	8015180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 fcff 	bl	80146b0 <UART_SetConfig>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d101      	bne.n	8013cbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8013cb8:	2301      	movs	r3, #1
 8013cba:	e01b      	b.n	8013cf4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	685a      	ldr	r2, [r3, #4]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8013cca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	689a      	ldr	r2, [r3, #8]
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8013cda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	f042 0201 	orr.w	r2, r2, #1
 8013cea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f001 fae9 	bl	80152c4 <UART_CheckIdleState>
 8013cf2:	4603      	mov	r3, r0
}
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b08a      	sub	sp, #40	@ 0x28
 8013d00:	af02      	add	r7, sp, #8
 8013d02:	60f8      	str	r0, [r7, #12]
 8013d04:	60b9      	str	r1, [r7, #8]
 8013d06:	603b      	str	r3, [r7, #0]
 8013d08:	4613      	mov	r3, r2
 8013d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013d12:	2b20      	cmp	r3, #32
 8013d14:	d17b      	bne.n	8013e0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d002      	beq.n	8013d22 <HAL_UART_Transmit+0x26>
 8013d1c:	88fb      	ldrh	r3, [r7, #6]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d101      	bne.n	8013d26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013d22:	2301      	movs	r3, #1
 8013d24:	e074      	b.n	8013e10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2200      	movs	r2, #0
 8013d2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	2221      	movs	r2, #33	@ 0x21
 8013d32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013d36:	f7ef fc09 	bl	800354c <HAL_GetTick>
 8013d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	88fa      	ldrh	r2, [r7, #6]
 8013d40:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	88fa      	ldrh	r2, [r7, #6]
 8013d48:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d54:	d108      	bne.n	8013d68 <HAL_UART_Transmit+0x6c>
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	691b      	ldr	r3, [r3, #16]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d104      	bne.n	8013d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013d62:	68bb      	ldr	r3, [r7, #8]
 8013d64:	61bb      	str	r3, [r7, #24]
 8013d66:	e003      	b.n	8013d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013d70:	e030      	b.n	8013dd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	2200      	movs	r2, #0
 8013d7a:	2180      	movs	r1, #128	@ 0x80
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f001 fb4b 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 8013d82:	4603      	mov	r3, r0
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d005      	beq.n	8013d94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2220      	movs	r2, #32
 8013d8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8013d90:	2303      	movs	r3, #3
 8013d92:	e03d      	b.n	8013e10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d10b      	bne.n	8013db2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013d9a:	69bb      	ldr	r3, [r7, #24]
 8013d9c:	881b      	ldrh	r3, [r3, #0]
 8013d9e:	461a      	mov	r2, r3
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013da8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	3302      	adds	r3, #2
 8013dae:	61bb      	str	r3, [r7, #24]
 8013db0:	e007      	b.n	8013dc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	781a      	ldrb	r2, [r3, #0]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013dbc:	69fb      	ldr	r3, [r7, #28]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013dc8:	b29b      	uxth	r3, r3
 8013dca:	3b01      	subs	r3, #1
 8013dcc:	b29a      	uxth	r2, r3
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d1c8      	bne.n	8013d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	2200      	movs	r2, #0
 8013de8:	2140      	movs	r1, #64	@ 0x40
 8013dea:	68f8      	ldr	r0, [r7, #12]
 8013dec:	f001 fb14 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d005      	beq.n	8013e02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	2220      	movs	r2, #32
 8013dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8013dfe:	2303      	movs	r3, #3
 8013e00:	e006      	b.n	8013e10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	2220      	movs	r2, #32
 8013e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e000      	b.n	8013e10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013e0e:	2302      	movs	r3, #2
  }
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3720      	adds	r7, #32
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b08a      	sub	sp, #40	@ 0x28
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60f8      	str	r0, [r7, #12]
 8013e20:	60b9      	str	r1, [r7, #8]
 8013e22:	4613      	mov	r3, r2
 8013e24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013e2c:	2b20      	cmp	r3, #32
 8013e2e:	d137      	bne.n	8013ea0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d002      	beq.n	8013e3c <HAL_UART_Receive_DMA+0x24>
 8013e36:	88fb      	ldrh	r3, [r7, #6]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d101      	bne.n	8013e40 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	e030      	b.n	8013ea2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	2200      	movs	r2, #0
 8013e44:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4a18      	ldr	r2, [pc, #96]	@ (8013eac <HAL_UART_Receive_DMA+0x94>)
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d01f      	beq.n	8013e90 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d018      	beq.n	8013e90 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	e853 3f00 	ldrex	r3, [r3]
 8013e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e7c:	623b      	str	r3, [r7, #32]
 8013e7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e80:	69f9      	ldr	r1, [r7, #28]
 8013e82:	6a3a      	ldr	r2, [r7, #32]
 8013e84:	e841 2300 	strex	r3, r2, [r1]
 8013e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d1e6      	bne.n	8013e5e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013e90:	88fb      	ldrh	r3, [r7, #6]
 8013e92:	461a      	mov	r2, r3
 8013e94:	68b9      	ldr	r1, [r7, #8]
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	f001 fb2c 	bl	80154f4 <UART_Start_Receive_DMA>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	e000      	b.n	8013ea2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8013ea0:	2302      	movs	r3, #2
  }
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3728      	adds	r7, #40	@ 0x28
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	58000c00 	.word	0x58000c00

08013eb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b0ba      	sub	sp, #232	@ 0xe8
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	69db      	ldr	r3, [r3, #28]
 8013ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013ed6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8013eda:	f640 030f 	movw	r3, #2063	@ 0x80f
 8013ede:	4013      	ands	r3, r2
 8013ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8013ee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d11b      	bne.n	8013f24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013ef0:	f003 0320 	and.w	r3, r3, #32
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d015      	beq.n	8013f24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8013ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013efc:	f003 0320 	and.w	r3, r3, #32
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d105      	bne.n	8013f10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d009      	beq.n	8013f24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f000 8393 	beq.w	8014640 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	4798      	blx	r3
      }
      return;
 8013f22:	e38d      	b.n	8014640 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013f24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	f000 8123 	beq.w	8014174 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013f2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013f32:	4b8d      	ldr	r3, [pc, #564]	@ (8014168 <HAL_UART_IRQHandler+0x2b8>)
 8013f34:	4013      	ands	r3, r2
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d106      	bne.n	8013f48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8013f3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8013f3e:	4b8b      	ldr	r3, [pc, #556]	@ (801416c <HAL_UART_IRQHandler+0x2bc>)
 8013f40:	4013      	ands	r3, r2
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	f000 8116 	beq.w	8014174 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f4c:	f003 0301 	and.w	r3, r3, #1
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d011      	beq.n	8013f78 <HAL_UART_IRQHandler+0xc8>
 8013f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d00b      	beq.n	8013f78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2201      	movs	r2, #1
 8013f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f6e:	f043 0201 	orr.w	r2, r3, #1
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013f7c:	f003 0302 	and.w	r3, r3, #2
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d011      	beq.n	8013fa8 <HAL_UART_IRQHandler+0xf8>
 8013f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013f88:	f003 0301 	and.w	r3, r3, #1
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d00b      	beq.n	8013fa8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2202      	movs	r2, #2
 8013f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f9e:	f043 0204 	orr.w	r2, r3, #4
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fac:	f003 0304 	and.w	r3, r3, #4
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d011      	beq.n	8013fd8 <HAL_UART_IRQHandler+0x128>
 8013fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013fb8:	f003 0301 	and.w	r3, r3, #1
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d00b      	beq.n	8013fd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	2204      	movs	r2, #4
 8013fc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013fce:	f043 0202 	orr.w	r2, r3, #2
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013fdc:	f003 0308 	and.w	r3, r3, #8
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d017      	beq.n	8014014 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013fe8:	f003 0320 	and.w	r3, r3, #32
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d105      	bne.n	8013ffc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013ff0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8013ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8014168 <HAL_UART_IRQHandler+0x2b8>)
 8013ff6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d00b      	beq.n	8014014 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	2208      	movs	r2, #8
 8014002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801400a:	f043 0208 	orr.w	r2, r3, #8
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801401c:	2b00      	cmp	r3, #0
 801401e:	d012      	beq.n	8014046 <HAL_UART_IRQHandler+0x196>
 8014020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014024:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8014028:	2b00      	cmp	r3, #0
 801402a:	d00c      	beq.n	8014046 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014034:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801403c:	f043 0220 	orr.w	r2, r3, #32
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801404c:	2b00      	cmp	r3, #0
 801404e:	f000 82f9 	beq.w	8014644 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014056:	f003 0320 	and.w	r3, r3, #32
 801405a:	2b00      	cmp	r3, #0
 801405c:	d013      	beq.n	8014086 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801405e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014062:	f003 0320 	and.w	r3, r3, #32
 8014066:	2b00      	cmp	r3, #0
 8014068:	d105      	bne.n	8014076 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014072:	2b00      	cmp	r3, #0
 8014074:	d007      	beq.n	8014086 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801407a:	2b00      	cmp	r3, #0
 801407c:	d003      	beq.n	8014086 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801408c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	689b      	ldr	r3, [r3, #8]
 8014096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801409a:	2b40      	cmp	r3, #64	@ 0x40
 801409c:	d005      	beq.n	80140aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801409e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80140a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d054      	beq.n	8014154 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f001 fb0a 	bl	80156c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	689b      	ldr	r3, [r3, #8]
 80140b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80140ba:	2b40      	cmp	r3, #64	@ 0x40
 80140bc:	d146      	bne.n	801414c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	3308      	adds	r3, #8
 80140c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80140cc:	e853 3f00 	ldrex	r3, [r3]
 80140d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80140d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80140d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80140dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	3308      	adds	r3, #8
 80140e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80140ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80140ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80140f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80140fa:	e841 2300 	strex	r3, r2, [r1]
 80140fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8014102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1d9      	bne.n	80140be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014110:	2b00      	cmp	r3, #0
 8014112:	d017      	beq.n	8014144 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801411a:	4a15      	ldr	r2, [pc, #84]	@ (8014170 <HAL_UART_IRQHandler+0x2c0>)
 801411c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014124:	4618      	mov	r0, r3
 8014126:	f7f1 ff6b 	bl	8006000 <HAL_DMA_Abort_IT>
 801412a:	4603      	mov	r3, r0
 801412c:	2b00      	cmp	r3, #0
 801412e:	d019      	beq.n	8014164 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014138:	687a      	ldr	r2, [r7, #4]
 801413a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801413e:	4610      	mov	r0, r2
 8014140:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014142:	e00f      	b.n	8014164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014144:	6878      	ldr	r0, [r7, #4]
 8014146:	f000 fa9d 	bl	8014684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801414a:	e00b      	b.n	8014164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fa99 	bl	8014684 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014152:	e007      	b.n	8014164 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f000 fa95 	bl	8014684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2200      	movs	r2, #0
 801415e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8014162:	e26f      	b.n	8014644 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014164:	bf00      	nop
    return;
 8014166:	e26d      	b.n	8014644 <HAL_UART_IRQHandler+0x794>
 8014168:	10000001 	.word	0x10000001
 801416c:	04000120 	.word	0x04000120
 8014170:	08015977 	.word	0x08015977

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014178:	2b01      	cmp	r3, #1
 801417a:	f040 8203 	bne.w	8014584 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801417e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014182:	f003 0310 	and.w	r3, r3, #16
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 81fc 	beq.w	8014584 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801418c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014190:	f003 0310 	and.w	r3, r3, #16
 8014194:	2b00      	cmp	r3, #0
 8014196:	f000 81f5 	beq.w	8014584 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	2210      	movs	r2, #16
 80141a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	689b      	ldr	r3, [r3, #8]
 80141a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80141ac:	2b40      	cmp	r3, #64	@ 0x40
 80141ae:	f040 816d 	bne.w	801448c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	4aa4      	ldr	r2, [pc, #656]	@ (801444c <HAL_UART_IRQHandler+0x59c>)
 80141bc:	4293      	cmp	r3, r2
 80141be:	d068      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4aa1      	ldr	r2, [pc, #644]	@ (8014450 <HAL_UART_IRQHandler+0x5a0>)
 80141ca:	4293      	cmp	r3, r2
 80141cc:	d061      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	4a9f      	ldr	r2, [pc, #636]	@ (8014454 <HAL_UART_IRQHandler+0x5a4>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d05a      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	4a9c      	ldr	r2, [pc, #624]	@ (8014458 <HAL_UART_IRQHandler+0x5a8>)
 80141e6:	4293      	cmp	r3, r2
 80141e8:	d053      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	4a9a      	ldr	r2, [pc, #616]	@ (801445c <HAL_UART_IRQHandler+0x5ac>)
 80141f4:	4293      	cmp	r3, r2
 80141f6:	d04c      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4a97      	ldr	r2, [pc, #604]	@ (8014460 <HAL_UART_IRQHandler+0x5b0>)
 8014202:	4293      	cmp	r3, r2
 8014204:	d045      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	4a95      	ldr	r2, [pc, #596]	@ (8014464 <HAL_UART_IRQHandler+0x5b4>)
 8014210:	4293      	cmp	r3, r2
 8014212:	d03e      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	4a92      	ldr	r2, [pc, #584]	@ (8014468 <HAL_UART_IRQHandler+0x5b8>)
 801421e:	4293      	cmp	r3, r2
 8014220:	d037      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	4a90      	ldr	r2, [pc, #576]	@ (801446c <HAL_UART_IRQHandler+0x5bc>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d030      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4a8d      	ldr	r2, [pc, #564]	@ (8014470 <HAL_UART_IRQHandler+0x5c0>)
 801423a:	4293      	cmp	r3, r2
 801423c:	d029      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4a8b      	ldr	r2, [pc, #556]	@ (8014474 <HAL_UART_IRQHandler+0x5c4>)
 8014248:	4293      	cmp	r3, r2
 801424a:	d022      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	4a88      	ldr	r2, [pc, #544]	@ (8014478 <HAL_UART_IRQHandler+0x5c8>)
 8014256:	4293      	cmp	r3, r2
 8014258:	d01b      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	4a86      	ldr	r2, [pc, #536]	@ (801447c <HAL_UART_IRQHandler+0x5cc>)
 8014264:	4293      	cmp	r3, r2
 8014266:	d014      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	4a83      	ldr	r2, [pc, #524]	@ (8014480 <HAL_UART_IRQHandler+0x5d0>)
 8014272:	4293      	cmp	r3, r2
 8014274:	d00d      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	4a81      	ldr	r2, [pc, #516]	@ (8014484 <HAL_UART_IRQHandler+0x5d4>)
 8014280:	4293      	cmp	r3, r2
 8014282:	d006      	beq.n	8014292 <HAL_UART_IRQHandler+0x3e2>
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	4a7e      	ldr	r2, [pc, #504]	@ (8014488 <HAL_UART_IRQHandler+0x5d8>)
 801428e:	4293      	cmp	r3, r2
 8014290:	d106      	bne.n	80142a0 <HAL_UART_IRQHandler+0x3f0>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	685b      	ldr	r3, [r3, #4]
 801429c:	b29b      	uxth	r3, r3
 801429e:	e005      	b.n	80142ac <HAL_UART_IRQHandler+0x3fc>
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80142b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f000 80ad 	beq.w	8014414 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80142c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80142c4:	429a      	cmp	r2, r3
 80142c6:	f080 80a5 	bcs.w	8014414 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80142d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80142da:	69db      	ldr	r3, [r3, #28]
 80142dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142e0:	f000 8087 	beq.w	80143f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80142f0:	e853 3f00 	ldrex	r3, [r3]
 80142f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80142f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80142fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014300:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	461a      	mov	r2, r3
 801430a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801430e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014312:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014316:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801431a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801431e:	e841 2300 	strex	r3, r2, [r1]
 8014322:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8014326:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801432a:	2b00      	cmp	r3, #0
 801432c:	d1da      	bne.n	80142e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	3308      	adds	r3, #8
 8014334:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014336:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014338:	e853 3f00 	ldrex	r3, [r3]
 801433c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801433e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014340:	f023 0301 	bic.w	r3, r3, #1
 8014344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	3308      	adds	r3, #8
 801434e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014352:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8014356:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014358:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801435a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801435e:	e841 2300 	strex	r3, r2, [r1]
 8014362:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8014364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014366:	2b00      	cmp	r3, #0
 8014368:	d1e1      	bne.n	801432e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	3308      	adds	r3, #8
 8014370:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014374:	e853 3f00 	ldrex	r3, [r3]
 8014378:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801437a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801437c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014380:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	3308      	adds	r3, #8
 801438a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801438e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8014390:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014392:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014394:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014396:	e841 2300 	strex	r3, r2, [r1]
 801439a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801439c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d1e3      	bne.n	801436a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	2220      	movs	r2, #32
 80143a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2200      	movs	r2, #0
 80143ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143b8:	e853 3f00 	ldrex	r3, [r3]
 80143bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80143be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143c0:	f023 0310 	bic.w	r3, r3, #16
 80143c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	461a      	mov	r2, r3
 80143ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80143d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80143d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80143d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80143da:	e841 2300 	strex	r3, r2, [r1]
 80143de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80143e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d1e4      	bne.n	80143b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7f1 fae9 	bl	80059c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2202      	movs	r2, #2
 80143f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014404:	b29b      	uxth	r3, r3
 8014406:	1ad3      	subs	r3, r2, r3
 8014408:	b29b      	uxth	r3, r3
 801440a:	4619      	mov	r1, r3
 801440c:	6878      	ldr	r0, [r7, #4]
 801440e:	f000 f943 	bl	8014698 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8014412:	e119      	b.n	8014648 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801441a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801441e:	429a      	cmp	r2, r3
 8014420:	f040 8112 	bne.w	8014648 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801442a:	69db      	ldr	r3, [r3, #28]
 801442c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014430:	f040 810a 	bne.w	8014648 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	2202      	movs	r2, #2
 8014438:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8014440:	4619      	mov	r1, r3
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 f928 	bl	8014698 <HAL_UARTEx_RxEventCallback>
      return;
 8014448:	e0fe      	b.n	8014648 <HAL_UART_IRQHandler+0x798>
 801444a:	bf00      	nop
 801444c:	40020010 	.word	0x40020010
 8014450:	40020028 	.word	0x40020028
 8014454:	40020040 	.word	0x40020040
 8014458:	40020058 	.word	0x40020058
 801445c:	40020070 	.word	0x40020070
 8014460:	40020088 	.word	0x40020088
 8014464:	400200a0 	.word	0x400200a0
 8014468:	400200b8 	.word	0x400200b8
 801446c:	40020410 	.word	0x40020410
 8014470:	40020428 	.word	0x40020428
 8014474:	40020440 	.word	0x40020440
 8014478:	40020458 	.word	0x40020458
 801447c:	40020470 	.word	0x40020470
 8014480:	40020488 	.word	0x40020488
 8014484:	400204a0 	.word	0x400204a0
 8014488:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8014498:	b29b      	uxth	r3, r3
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f000 80cf 	beq.w	801464c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80144ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	f000 80ca 	beq.w	801464c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144c0:	e853 3f00 	ldrex	r3, [r3]
 80144c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80144c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80144c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80144cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	461a      	mov	r2, r3
 80144d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80144da:	647b      	str	r3, [r7, #68]	@ 0x44
 80144dc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80144e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80144e2:	e841 2300 	strex	r3, r2, [r1]
 80144e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80144e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d1e4      	bne.n	80144b8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	3308      	adds	r3, #8
 80144f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f8:	e853 3f00 	ldrex	r3, [r3]
 80144fc:	623b      	str	r3, [r7, #32]
   return(result);
 80144fe:	6a3a      	ldr	r2, [r7, #32]
 8014500:	4b55      	ldr	r3, [pc, #340]	@ (8014658 <HAL_UART_IRQHandler+0x7a8>)
 8014502:	4013      	ands	r3, r2
 8014504:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	3308      	adds	r3, #8
 801450e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8014512:	633a      	str	r2, [r7, #48]	@ 0x30
 8014514:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801451a:	e841 2300 	strex	r3, r2, [r1]
 801451e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8014520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1e3      	bne.n	80144ee <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2220      	movs	r2, #32
 801452a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	2200      	movs	r2, #0
 8014532:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	2200      	movs	r2, #0
 8014538:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014540:	693b      	ldr	r3, [r7, #16]
 8014542:	e853 3f00 	ldrex	r3, [r3]
 8014546:	60fb      	str	r3, [r7, #12]
   return(result);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	f023 0310 	bic.w	r3, r3, #16
 801454e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	461a      	mov	r2, r3
 8014558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801455c:	61fb      	str	r3, [r7, #28]
 801455e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014560:	69b9      	ldr	r1, [r7, #24]
 8014562:	69fa      	ldr	r2, [r7, #28]
 8014564:	e841 2300 	strex	r3, r2, [r1]
 8014568:	617b      	str	r3, [r7, #20]
   return(result);
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d1e4      	bne.n	801453a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2202      	movs	r2, #2
 8014574:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801457a:	4619      	mov	r1, r3
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f000 f88b 	bl	8014698 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014582:	e063      	b.n	801464c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801458c:	2b00      	cmp	r3, #0
 801458e:	d00e      	beq.n	80145ae <HAL_UART_IRQHandler+0x6fe>
 8014590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8014594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014598:	2b00      	cmp	r3, #0
 801459a:	d008      	beq.n	80145ae <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80145a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f001 fa22 	bl	80159f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80145ac:	e051      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80145ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d014      	beq.n	80145e4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80145ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80145be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d105      	bne.n	80145d2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80145c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80145ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d008      	beq.n	80145e4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d03a      	beq.n	8014650 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	4798      	blx	r3
    }
    return;
 80145e2:	e035      	b.n	8014650 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80145e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80145e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d009      	beq.n	8014604 <HAL_UART_IRQHandler+0x754>
 80145f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80145f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d003      	beq.n	8014604 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f001 f9cc 	bl	801599a <UART_EndTransmit_IT>
    return;
 8014602:	e026      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8014604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014608:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801460c:	2b00      	cmp	r3, #0
 801460e:	d009      	beq.n	8014624 <HAL_UART_IRQHandler+0x774>
 8014610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014614:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8014618:	2b00      	cmp	r3, #0
 801461a:	d003      	beq.n	8014624 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f001 f9fb 	bl	8015a18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014622:	e016      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8014624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8014628:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801462c:	2b00      	cmp	r3, #0
 801462e:	d010      	beq.n	8014652 <HAL_UART_IRQHandler+0x7a2>
 8014630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8014634:	2b00      	cmp	r3, #0
 8014636:	da0c      	bge.n	8014652 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f001 f9e3 	bl	8015a04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801463e:	e008      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
      return;
 8014640:	bf00      	nop
 8014642:	e006      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
    return;
 8014644:	bf00      	nop
 8014646:	e004      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
      return;
 8014648:	bf00      	nop
 801464a:	e002      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
      return;
 801464c:	bf00      	nop
 801464e:	e000      	b.n	8014652 <HAL_UART_IRQHandler+0x7a2>
    return;
 8014650:	bf00      	nop
  }
}
 8014652:	37e8      	adds	r7, #232	@ 0xe8
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	effffffe 	.word	0xeffffffe

0801465c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014664:	bf00      	nop
 8014666:	370c      	adds	r7, #12
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr

08014670 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014678:	bf00      	nop
 801467a:	370c      	adds	r7, #12
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801468c:	bf00      	nop
 801468e:	370c      	adds	r7, #12
 8014690:	46bd      	mov	sp, r7
 8014692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014696:	4770      	bx	lr

08014698 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	460b      	mov	r3, r1
 80146a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80146a4:	bf00      	nop
 80146a6:	370c      	adds	r7, #12
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80146b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80146b4:	b092      	sub	sp, #72	@ 0x48
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80146ba:	2300      	movs	r3, #0
 80146bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	689a      	ldr	r2, [r3, #8]
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	691b      	ldr	r3, [r3, #16]
 80146c8:	431a      	orrs	r2, r3
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	695b      	ldr	r3, [r3, #20]
 80146ce:	431a      	orrs	r2, r3
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	69db      	ldr	r3, [r3, #28]
 80146d4:	4313      	orrs	r3, r2
 80146d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80146d8:	697b      	ldr	r3, [r7, #20]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	4bbe      	ldr	r3, [pc, #760]	@ (80149d8 <UART_SetConfig+0x328>)
 80146e0:	4013      	ands	r3, r2
 80146e2:	697a      	ldr	r2, [r7, #20]
 80146e4:	6812      	ldr	r2, [r2, #0]
 80146e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80146e8:	430b      	orrs	r3, r1
 80146ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	685b      	ldr	r3, [r3, #4]
 80146f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80146f6:	697b      	ldr	r3, [r7, #20]
 80146f8:	68da      	ldr	r2, [r3, #12]
 80146fa:	697b      	ldr	r3, [r7, #20]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	430a      	orrs	r2, r1
 8014700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	699b      	ldr	r3, [r3, #24]
 8014706:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	4ab3      	ldr	r2, [pc, #716]	@ (80149dc <UART_SetConfig+0x32c>)
 801470e:	4293      	cmp	r3, r2
 8014710:	d004      	beq.n	801471c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014712:	697b      	ldr	r3, [r7, #20]
 8014714:	6a1b      	ldr	r3, [r3, #32]
 8014716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014718:	4313      	orrs	r3, r2
 801471a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	689a      	ldr	r2, [r3, #8]
 8014722:	4baf      	ldr	r3, [pc, #700]	@ (80149e0 <UART_SetConfig+0x330>)
 8014724:	4013      	ands	r3, r2
 8014726:	697a      	ldr	r2, [r7, #20]
 8014728:	6812      	ldr	r2, [r2, #0]
 801472a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801472c:	430b      	orrs	r3, r1
 801472e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014730:	697b      	ldr	r3, [r7, #20]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014736:	f023 010f 	bic.w	r1, r3, #15
 801473a:	697b      	ldr	r3, [r7, #20]
 801473c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	430a      	orrs	r2, r1
 8014744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	4aa6      	ldr	r2, [pc, #664]	@ (80149e4 <UART_SetConfig+0x334>)
 801474c:	4293      	cmp	r3, r2
 801474e:	d177      	bne.n	8014840 <UART_SetConfig+0x190>
 8014750:	4ba5      	ldr	r3, [pc, #660]	@ (80149e8 <UART_SetConfig+0x338>)
 8014752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014758:	2b28      	cmp	r3, #40	@ 0x28
 801475a:	d86d      	bhi.n	8014838 <UART_SetConfig+0x188>
 801475c:	a201      	add	r2, pc, #4	@ (adr r2, 8014764 <UART_SetConfig+0xb4>)
 801475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014762:	bf00      	nop
 8014764:	08014809 	.word	0x08014809
 8014768:	08014839 	.word	0x08014839
 801476c:	08014839 	.word	0x08014839
 8014770:	08014839 	.word	0x08014839
 8014774:	08014839 	.word	0x08014839
 8014778:	08014839 	.word	0x08014839
 801477c:	08014839 	.word	0x08014839
 8014780:	08014839 	.word	0x08014839
 8014784:	08014811 	.word	0x08014811
 8014788:	08014839 	.word	0x08014839
 801478c:	08014839 	.word	0x08014839
 8014790:	08014839 	.word	0x08014839
 8014794:	08014839 	.word	0x08014839
 8014798:	08014839 	.word	0x08014839
 801479c:	08014839 	.word	0x08014839
 80147a0:	08014839 	.word	0x08014839
 80147a4:	08014819 	.word	0x08014819
 80147a8:	08014839 	.word	0x08014839
 80147ac:	08014839 	.word	0x08014839
 80147b0:	08014839 	.word	0x08014839
 80147b4:	08014839 	.word	0x08014839
 80147b8:	08014839 	.word	0x08014839
 80147bc:	08014839 	.word	0x08014839
 80147c0:	08014839 	.word	0x08014839
 80147c4:	08014821 	.word	0x08014821
 80147c8:	08014839 	.word	0x08014839
 80147cc:	08014839 	.word	0x08014839
 80147d0:	08014839 	.word	0x08014839
 80147d4:	08014839 	.word	0x08014839
 80147d8:	08014839 	.word	0x08014839
 80147dc:	08014839 	.word	0x08014839
 80147e0:	08014839 	.word	0x08014839
 80147e4:	08014829 	.word	0x08014829
 80147e8:	08014839 	.word	0x08014839
 80147ec:	08014839 	.word	0x08014839
 80147f0:	08014839 	.word	0x08014839
 80147f4:	08014839 	.word	0x08014839
 80147f8:	08014839 	.word	0x08014839
 80147fc:	08014839 	.word	0x08014839
 8014800:	08014839 	.word	0x08014839
 8014804:	08014831 	.word	0x08014831
 8014808:	2301      	movs	r3, #1
 801480a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801480e:	e222      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014810:	2304      	movs	r3, #4
 8014812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014816:	e21e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014818:	2308      	movs	r3, #8
 801481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801481e:	e21a      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014820:	2310      	movs	r3, #16
 8014822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014826:	e216      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014828:	2320      	movs	r3, #32
 801482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801482e:	e212      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014830:	2340      	movs	r3, #64	@ 0x40
 8014832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014836:	e20e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014838:	2380      	movs	r3, #128	@ 0x80
 801483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801483e:	e20a      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014840:	697b      	ldr	r3, [r7, #20]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4a69      	ldr	r2, [pc, #420]	@ (80149ec <UART_SetConfig+0x33c>)
 8014846:	4293      	cmp	r3, r2
 8014848:	d130      	bne.n	80148ac <UART_SetConfig+0x1fc>
 801484a:	4b67      	ldr	r3, [pc, #412]	@ (80149e8 <UART_SetConfig+0x338>)
 801484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801484e:	f003 0307 	and.w	r3, r3, #7
 8014852:	2b05      	cmp	r3, #5
 8014854:	d826      	bhi.n	80148a4 <UART_SetConfig+0x1f4>
 8014856:	a201      	add	r2, pc, #4	@ (adr r2, 801485c <UART_SetConfig+0x1ac>)
 8014858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801485c:	08014875 	.word	0x08014875
 8014860:	0801487d 	.word	0x0801487d
 8014864:	08014885 	.word	0x08014885
 8014868:	0801488d 	.word	0x0801488d
 801486c:	08014895 	.word	0x08014895
 8014870:	0801489d 	.word	0x0801489d
 8014874:	2300      	movs	r3, #0
 8014876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801487a:	e1ec      	b.n	8014c56 <UART_SetConfig+0x5a6>
 801487c:	2304      	movs	r3, #4
 801487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014882:	e1e8      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014884:	2308      	movs	r3, #8
 8014886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801488a:	e1e4      	b.n	8014c56 <UART_SetConfig+0x5a6>
 801488c:	2310      	movs	r3, #16
 801488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014892:	e1e0      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014894:	2320      	movs	r3, #32
 8014896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801489a:	e1dc      	b.n	8014c56 <UART_SetConfig+0x5a6>
 801489c:	2340      	movs	r3, #64	@ 0x40
 801489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148a2:	e1d8      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80148a4:	2380      	movs	r3, #128	@ 0x80
 80148a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148aa:	e1d4      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	4a4f      	ldr	r2, [pc, #316]	@ (80149f0 <UART_SetConfig+0x340>)
 80148b2:	4293      	cmp	r3, r2
 80148b4:	d130      	bne.n	8014918 <UART_SetConfig+0x268>
 80148b6:	4b4c      	ldr	r3, [pc, #304]	@ (80149e8 <UART_SetConfig+0x338>)
 80148b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80148ba:	f003 0307 	and.w	r3, r3, #7
 80148be:	2b05      	cmp	r3, #5
 80148c0:	d826      	bhi.n	8014910 <UART_SetConfig+0x260>
 80148c2:	a201      	add	r2, pc, #4	@ (adr r2, 80148c8 <UART_SetConfig+0x218>)
 80148c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148c8:	080148e1 	.word	0x080148e1
 80148cc:	080148e9 	.word	0x080148e9
 80148d0:	080148f1 	.word	0x080148f1
 80148d4:	080148f9 	.word	0x080148f9
 80148d8:	08014901 	.word	0x08014901
 80148dc:	08014909 	.word	0x08014909
 80148e0:	2300      	movs	r3, #0
 80148e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148e6:	e1b6      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80148e8:	2304      	movs	r3, #4
 80148ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148ee:	e1b2      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80148f0:	2308      	movs	r3, #8
 80148f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148f6:	e1ae      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80148f8:	2310      	movs	r3, #16
 80148fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80148fe:	e1aa      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014900:	2320      	movs	r3, #32
 8014902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014906:	e1a6      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014908:	2340      	movs	r3, #64	@ 0x40
 801490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801490e:	e1a2      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014910:	2380      	movs	r3, #128	@ 0x80
 8014912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014916:	e19e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4a35      	ldr	r2, [pc, #212]	@ (80149f4 <UART_SetConfig+0x344>)
 801491e:	4293      	cmp	r3, r2
 8014920:	d130      	bne.n	8014984 <UART_SetConfig+0x2d4>
 8014922:	4b31      	ldr	r3, [pc, #196]	@ (80149e8 <UART_SetConfig+0x338>)
 8014924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014926:	f003 0307 	and.w	r3, r3, #7
 801492a:	2b05      	cmp	r3, #5
 801492c:	d826      	bhi.n	801497c <UART_SetConfig+0x2cc>
 801492e:	a201      	add	r2, pc, #4	@ (adr r2, 8014934 <UART_SetConfig+0x284>)
 8014930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014934:	0801494d 	.word	0x0801494d
 8014938:	08014955 	.word	0x08014955
 801493c:	0801495d 	.word	0x0801495d
 8014940:	08014965 	.word	0x08014965
 8014944:	0801496d 	.word	0x0801496d
 8014948:	08014975 	.word	0x08014975
 801494c:	2300      	movs	r3, #0
 801494e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014952:	e180      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014954:	2304      	movs	r3, #4
 8014956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801495a:	e17c      	b.n	8014c56 <UART_SetConfig+0x5a6>
 801495c:	2308      	movs	r3, #8
 801495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014962:	e178      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014964:	2310      	movs	r3, #16
 8014966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801496a:	e174      	b.n	8014c56 <UART_SetConfig+0x5a6>
 801496c:	2320      	movs	r3, #32
 801496e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014972:	e170      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014974:	2340      	movs	r3, #64	@ 0x40
 8014976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801497a:	e16c      	b.n	8014c56 <UART_SetConfig+0x5a6>
 801497c:	2380      	movs	r3, #128	@ 0x80
 801497e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014982:	e168      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014984:	697b      	ldr	r3, [r7, #20]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	4a1b      	ldr	r2, [pc, #108]	@ (80149f8 <UART_SetConfig+0x348>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d142      	bne.n	8014a14 <UART_SetConfig+0x364>
 801498e:	4b16      	ldr	r3, [pc, #88]	@ (80149e8 <UART_SetConfig+0x338>)
 8014990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014992:	f003 0307 	and.w	r3, r3, #7
 8014996:	2b05      	cmp	r3, #5
 8014998:	d838      	bhi.n	8014a0c <UART_SetConfig+0x35c>
 801499a:	a201      	add	r2, pc, #4	@ (adr r2, 80149a0 <UART_SetConfig+0x2f0>)
 801499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a0:	080149b9 	.word	0x080149b9
 80149a4:	080149c1 	.word	0x080149c1
 80149a8:	080149c9 	.word	0x080149c9
 80149ac:	080149d1 	.word	0x080149d1
 80149b0:	080149fd 	.word	0x080149fd
 80149b4:	08014a05 	.word	0x08014a05
 80149b8:	2300      	movs	r3, #0
 80149ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149be:	e14a      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80149c0:	2304      	movs	r3, #4
 80149c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149c6:	e146      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80149c8:	2308      	movs	r3, #8
 80149ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149ce:	e142      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80149d0:	2310      	movs	r3, #16
 80149d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80149d6:	e13e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 80149d8:	cfff69f3 	.word	0xcfff69f3
 80149dc:	58000c00 	.word	0x58000c00
 80149e0:	11fff4ff 	.word	0x11fff4ff
 80149e4:	40011000 	.word	0x40011000
 80149e8:	58024400 	.word	0x58024400
 80149ec:	40004400 	.word	0x40004400
 80149f0:	40004800 	.word	0x40004800
 80149f4:	40004c00 	.word	0x40004c00
 80149f8:	40005000 	.word	0x40005000
 80149fc:	2320      	movs	r3, #32
 80149fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a02:	e128      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014a04:	2340      	movs	r3, #64	@ 0x40
 8014a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a0a:	e124      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014a0c:	2380      	movs	r3, #128	@ 0x80
 8014a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014a12:	e120      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	4acb      	ldr	r2, [pc, #812]	@ (8014d48 <UART_SetConfig+0x698>)
 8014a1a:	4293      	cmp	r3, r2
 8014a1c:	d176      	bne.n	8014b0c <UART_SetConfig+0x45c>
 8014a1e:	4bcb      	ldr	r3, [pc, #812]	@ (8014d4c <UART_SetConfig+0x69c>)
 8014a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014a26:	2b28      	cmp	r3, #40	@ 0x28
 8014a28:	d86c      	bhi.n	8014b04 <UART_SetConfig+0x454>
 8014a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8014a30 <UART_SetConfig+0x380>)
 8014a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a30:	08014ad5 	.word	0x08014ad5
 8014a34:	08014b05 	.word	0x08014b05
 8014a38:	08014b05 	.word	0x08014b05
 8014a3c:	08014b05 	.word	0x08014b05
 8014a40:	08014b05 	.word	0x08014b05
 8014a44:	08014b05 	.word	0x08014b05
 8014a48:	08014b05 	.word	0x08014b05
 8014a4c:	08014b05 	.word	0x08014b05
 8014a50:	08014add 	.word	0x08014add
 8014a54:	08014b05 	.word	0x08014b05
 8014a58:	08014b05 	.word	0x08014b05
 8014a5c:	08014b05 	.word	0x08014b05
 8014a60:	08014b05 	.word	0x08014b05
 8014a64:	08014b05 	.word	0x08014b05
 8014a68:	08014b05 	.word	0x08014b05
 8014a6c:	08014b05 	.word	0x08014b05
 8014a70:	08014ae5 	.word	0x08014ae5
 8014a74:	08014b05 	.word	0x08014b05
 8014a78:	08014b05 	.word	0x08014b05
 8014a7c:	08014b05 	.word	0x08014b05
 8014a80:	08014b05 	.word	0x08014b05
 8014a84:	08014b05 	.word	0x08014b05
 8014a88:	08014b05 	.word	0x08014b05
 8014a8c:	08014b05 	.word	0x08014b05
 8014a90:	08014aed 	.word	0x08014aed
 8014a94:	08014b05 	.word	0x08014b05
 8014a98:	08014b05 	.word	0x08014b05
 8014a9c:	08014b05 	.word	0x08014b05
 8014aa0:	08014b05 	.word	0x08014b05
 8014aa4:	08014b05 	.word	0x08014b05
 8014aa8:	08014b05 	.word	0x08014b05
 8014aac:	08014b05 	.word	0x08014b05
 8014ab0:	08014af5 	.word	0x08014af5
 8014ab4:	08014b05 	.word	0x08014b05
 8014ab8:	08014b05 	.word	0x08014b05
 8014abc:	08014b05 	.word	0x08014b05
 8014ac0:	08014b05 	.word	0x08014b05
 8014ac4:	08014b05 	.word	0x08014b05
 8014ac8:	08014b05 	.word	0x08014b05
 8014acc:	08014b05 	.word	0x08014b05
 8014ad0:	08014afd 	.word	0x08014afd
 8014ad4:	2301      	movs	r3, #1
 8014ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ada:	e0bc      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014adc:	2304      	movs	r3, #4
 8014ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ae2:	e0b8      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014ae4:	2308      	movs	r3, #8
 8014ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014aea:	e0b4      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014aec:	2310      	movs	r3, #16
 8014aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014af2:	e0b0      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014af4:	2320      	movs	r3, #32
 8014af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014afa:	e0ac      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014afc:	2340      	movs	r3, #64	@ 0x40
 8014afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b02:	e0a8      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b04:	2380      	movs	r3, #128	@ 0x80
 8014b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b0a:	e0a4      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	4a8f      	ldr	r2, [pc, #572]	@ (8014d50 <UART_SetConfig+0x6a0>)
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d130      	bne.n	8014b78 <UART_SetConfig+0x4c8>
 8014b16:	4b8d      	ldr	r3, [pc, #564]	@ (8014d4c <UART_SetConfig+0x69c>)
 8014b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b1a:	f003 0307 	and.w	r3, r3, #7
 8014b1e:	2b05      	cmp	r3, #5
 8014b20:	d826      	bhi.n	8014b70 <UART_SetConfig+0x4c0>
 8014b22:	a201      	add	r2, pc, #4	@ (adr r2, 8014b28 <UART_SetConfig+0x478>)
 8014b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b28:	08014b41 	.word	0x08014b41
 8014b2c:	08014b49 	.word	0x08014b49
 8014b30:	08014b51 	.word	0x08014b51
 8014b34:	08014b59 	.word	0x08014b59
 8014b38:	08014b61 	.word	0x08014b61
 8014b3c:	08014b69 	.word	0x08014b69
 8014b40:	2300      	movs	r3, #0
 8014b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b46:	e086      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b48:	2304      	movs	r3, #4
 8014b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b4e:	e082      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b50:	2308      	movs	r3, #8
 8014b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b56:	e07e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b58:	2310      	movs	r3, #16
 8014b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b5e:	e07a      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b60:	2320      	movs	r3, #32
 8014b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b66:	e076      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b68:	2340      	movs	r3, #64	@ 0x40
 8014b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b6e:	e072      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b70:	2380      	movs	r3, #128	@ 0x80
 8014b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014b76:	e06e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	4a75      	ldr	r2, [pc, #468]	@ (8014d54 <UART_SetConfig+0x6a4>)
 8014b7e:	4293      	cmp	r3, r2
 8014b80:	d130      	bne.n	8014be4 <UART_SetConfig+0x534>
 8014b82:	4b72      	ldr	r3, [pc, #456]	@ (8014d4c <UART_SetConfig+0x69c>)
 8014b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b86:	f003 0307 	and.w	r3, r3, #7
 8014b8a:	2b05      	cmp	r3, #5
 8014b8c:	d826      	bhi.n	8014bdc <UART_SetConfig+0x52c>
 8014b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8014b94 <UART_SetConfig+0x4e4>)
 8014b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b94:	08014bad 	.word	0x08014bad
 8014b98:	08014bb5 	.word	0x08014bb5
 8014b9c:	08014bbd 	.word	0x08014bbd
 8014ba0:	08014bc5 	.word	0x08014bc5
 8014ba4:	08014bcd 	.word	0x08014bcd
 8014ba8:	08014bd5 	.word	0x08014bd5
 8014bac:	2300      	movs	r3, #0
 8014bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014bb2:	e050      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014bb4:	2304      	movs	r3, #4
 8014bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014bba:	e04c      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014bbc:	2308      	movs	r3, #8
 8014bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014bc2:	e048      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014bc4:	2310      	movs	r3, #16
 8014bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014bca:	e044      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014bcc:	2320      	movs	r3, #32
 8014bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014bd2:	e040      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014bd4:	2340      	movs	r3, #64	@ 0x40
 8014bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014bda:	e03c      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014bdc:	2380      	movs	r3, #128	@ 0x80
 8014bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014be2:	e038      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	4a5b      	ldr	r2, [pc, #364]	@ (8014d58 <UART_SetConfig+0x6a8>)
 8014bea:	4293      	cmp	r3, r2
 8014bec:	d130      	bne.n	8014c50 <UART_SetConfig+0x5a0>
 8014bee:	4b57      	ldr	r3, [pc, #348]	@ (8014d4c <UART_SetConfig+0x69c>)
 8014bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014bf2:	f003 0307 	and.w	r3, r3, #7
 8014bf6:	2b05      	cmp	r3, #5
 8014bf8:	d826      	bhi.n	8014c48 <UART_SetConfig+0x598>
 8014bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8014c00 <UART_SetConfig+0x550>)
 8014bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c00:	08014c19 	.word	0x08014c19
 8014c04:	08014c21 	.word	0x08014c21
 8014c08:	08014c29 	.word	0x08014c29
 8014c0c:	08014c31 	.word	0x08014c31
 8014c10:	08014c39 	.word	0x08014c39
 8014c14:	08014c41 	.word	0x08014c41
 8014c18:	2302      	movs	r3, #2
 8014c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c1e:	e01a      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c20:	2304      	movs	r3, #4
 8014c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c26:	e016      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c28:	2308      	movs	r3, #8
 8014c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c2e:	e012      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c30:	2310      	movs	r3, #16
 8014c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c36:	e00e      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c38:	2320      	movs	r3, #32
 8014c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c3e:	e00a      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c40:	2340      	movs	r3, #64	@ 0x40
 8014c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c46:	e006      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c48:	2380      	movs	r3, #128	@ 0x80
 8014c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014c4e:	e002      	b.n	8014c56 <UART_SetConfig+0x5a6>
 8014c50:	2380      	movs	r3, #128	@ 0x80
 8014c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8014d58 <UART_SetConfig+0x6a8>)
 8014c5c:	4293      	cmp	r3, r2
 8014c5e:	f040 80f8 	bne.w	8014e52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014c62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014c66:	2b20      	cmp	r3, #32
 8014c68:	dc46      	bgt.n	8014cf8 <UART_SetConfig+0x648>
 8014c6a:	2b02      	cmp	r3, #2
 8014c6c:	f2c0 8082 	blt.w	8014d74 <UART_SetConfig+0x6c4>
 8014c70:	3b02      	subs	r3, #2
 8014c72:	2b1e      	cmp	r3, #30
 8014c74:	d87e      	bhi.n	8014d74 <UART_SetConfig+0x6c4>
 8014c76:	a201      	add	r2, pc, #4	@ (adr r2, 8014c7c <UART_SetConfig+0x5cc>)
 8014c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7c:	08014cff 	.word	0x08014cff
 8014c80:	08014d75 	.word	0x08014d75
 8014c84:	08014d07 	.word	0x08014d07
 8014c88:	08014d75 	.word	0x08014d75
 8014c8c:	08014d75 	.word	0x08014d75
 8014c90:	08014d75 	.word	0x08014d75
 8014c94:	08014d17 	.word	0x08014d17
 8014c98:	08014d75 	.word	0x08014d75
 8014c9c:	08014d75 	.word	0x08014d75
 8014ca0:	08014d75 	.word	0x08014d75
 8014ca4:	08014d75 	.word	0x08014d75
 8014ca8:	08014d75 	.word	0x08014d75
 8014cac:	08014d75 	.word	0x08014d75
 8014cb0:	08014d75 	.word	0x08014d75
 8014cb4:	08014d27 	.word	0x08014d27
 8014cb8:	08014d75 	.word	0x08014d75
 8014cbc:	08014d75 	.word	0x08014d75
 8014cc0:	08014d75 	.word	0x08014d75
 8014cc4:	08014d75 	.word	0x08014d75
 8014cc8:	08014d75 	.word	0x08014d75
 8014ccc:	08014d75 	.word	0x08014d75
 8014cd0:	08014d75 	.word	0x08014d75
 8014cd4:	08014d75 	.word	0x08014d75
 8014cd8:	08014d75 	.word	0x08014d75
 8014cdc:	08014d75 	.word	0x08014d75
 8014ce0:	08014d75 	.word	0x08014d75
 8014ce4:	08014d75 	.word	0x08014d75
 8014ce8:	08014d75 	.word	0x08014d75
 8014cec:	08014d75 	.word	0x08014d75
 8014cf0:	08014d75 	.word	0x08014d75
 8014cf4:	08014d67 	.word	0x08014d67
 8014cf8:	2b40      	cmp	r3, #64	@ 0x40
 8014cfa:	d037      	beq.n	8014d6c <UART_SetConfig+0x6bc>
 8014cfc:	e03a      	b.n	8014d74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014cfe:	f7fc fda3 	bl	8011848 <HAL_RCCEx_GetD3PCLK1Freq>
 8014d02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014d04:	e03c      	b.n	8014d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fc fdb2 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d14:	e034      	b.n	8014d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014d16:	f107 0318 	add.w	r3, r7, #24
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	f7fc fefe 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d24:	e02c      	b.n	8014d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014d26:	4b09      	ldr	r3, [pc, #36]	@ (8014d4c <UART_SetConfig+0x69c>)
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f003 0320 	and.w	r3, r3, #32
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d016      	beq.n	8014d60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014d32:	4b06      	ldr	r3, [pc, #24]	@ (8014d4c <UART_SetConfig+0x69c>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	08db      	lsrs	r3, r3, #3
 8014d38:	f003 0303 	and.w	r3, r3, #3
 8014d3c:	4a07      	ldr	r2, [pc, #28]	@ (8014d5c <UART_SetConfig+0x6ac>)
 8014d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8014d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014d44:	e01c      	b.n	8014d80 <UART_SetConfig+0x6d0>
 8014d46:	bf00      	nop
 8014d48:	40011400 	.word	0x40011400
 8014d4c:	58024400 	.word	0x58024400
 8014d50:	40007800 	.word	0x40007800
 8014d54:	40007c00 	.word	0x40007c00
 8014d58:	58000c00 	.word	0x58000c00
 8014d5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8014d60:	4b9d      	ldr	r3, [pc, #628]	@ (8014fd8 <UART_SetConfig+0x928>)
 8014d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d64:	e00c      	b.n	8014d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014d66:	4b9d      	ldr	r3, [pc, #628]	@ (8014fdc <UART_SetConfig+0x92c>)
 8014d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d6a:	e009      	b.n	8014d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014d72:	e005      	b.n	8014d80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8014d74:	2300      	movs	r3, #0
 8014d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014d78:	2301      	movs	r3, #1
 8014d7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014d7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8014d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	f000 81de 	beq.w	8015144 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014d88:	697b      	ldr	r3, [r7, #20]
 8014d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d8c:	4a94      	ldr	r2, [pc, #592]	@ (8014fe0 <UART_SetConfig+0x930>)
 8014d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014d92:	461a      	mov	r2, r3
 8014d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8014d9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	685a      	ldr	r2, [r3, #4]
 8014da0:	4613      	mov	r3, r2
 8014da2:	005b      	lsls	r3, r3, #1
 8014da4:	4413      	add	r3, r2
 8014da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d305      	bcc.n	8014db8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	685b      	ldr	r3, [r3, #4]
 8014db0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d903      	bls.n	8014dc0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8014db8:	2301      	movs	r3, #1
 8014dba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014dbe:	e1c1      	b.n	8015144 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	60bb      	str	r3, [r7, #8]
 8014dc6:	60fa      	str	r2, [r7, #12]
 8014dc8:	697b      	ldr	r3, [r7, #20]
 8014dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014dcc:	4a84      	ldr	r2, [pc, #528]	@ (8014fe0 <UART_SetConfig+0x930>)
 8014dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014dd2:	b29b      	uxth	r3, r3
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	603b      	str	r3, [r7, #0]
 8014dd8:	607a      	str	r2, [r7, #4]
 8014dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014de2:	f7eb fad5 	bl	8000390 <__aeabi_uldivmod>
 8014de6:	4602      	mov	r2, r0
 8014de8:	460b      	mov	r3, r1
 8014dea:	4610      	mov	r0, r2
 8014dec:	4619      	mov	r1, r3
 8014dee:	f04f 0200 	mov.w	r2, #0
 8014df2:	f04f 0300 	mov.w	r3, #0
 8014df6:	020b      	lsls	r3, r1, #8
 8014df8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014dfc:	0202      	lsls	r2, r0, #8
 8014dfe:	6979      	ldr	r1, [r7, #20]
 8014e00:	6849      	ldr	r1, [r1, #4]
 8014e02:	0849      	lsrs	r1, r1, #1
 8014e04:	2000      	movs	r0, #0
 8014e06:	460c      	mov	r4, r1
 8014e08:	4605      	mov	r5, r0
 8014e0a:	eb12 0804 	adds.w	r8, r2, r4
 8014e0e:	eb43 0905 	adc.w	r9, r3, r5
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	2200      	movs	r2, #0
 8014e18:	469a      	mov	sl, r3
 8014e1a:	4693      	mov	fp, r2
 8014e1c:	4652      	mov	r2, sl
 8014e1e:	465b      	mov	r3, fp
 8014e20:	4640      	mov	r0, r8
 8014e22:	4649      	mov	r1, r9
 8014e24:	f7eb fab4 	bl	8000390 <__aeabi_uldivmod>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	460b      	mov	r3, r1
 8014e2c:	4613      	mov	r3, r2
 8014e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014e36:	d308      	bcc.n	8014e4a <UART_SetConfig+0x79a>
 8014e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8014e3e:	d204      	bcs.n	8014e4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8014e40:	697b      	ldr	r3, [r7, #20]
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e46:	60da      	str	r2, [r3, #12]
 8014e48:	e17c      	b.n	8015144 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014e50:	e178      	b.n	8015144 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	69db      	ldr	r3, [r3, #28]
 8014e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014e5a:	f040 80c5 	bne.w	8014fe8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8014e5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014e62:	2b20      	cmp	r3, #32
 8014e64:	dc48      	bgt.n	8014ef8 <UART_SetConfig+0x848>
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	db7b      	blt.n	8014f62 <UART_SetConfig+0x8b2>
 8014e6a:	2b20      	cmp	r3, #32
 8014e6c:	d879      	bhi.n	8014f62 <UART_SetConfig+0x8b2>
 8014e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8014e74 <UART_SetConfig+0x7c4>)
 8014e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e74:	08014eff 	.word	0x08014eff
 8014e78:	08014f07 	.word	0x08014f07
 8014e7c:	08014f63 	.word	0x08014f63
 8014e80:	08014f63 	.word	0x08014f63
 8014e84:	08014f0f 	.word	0x08014f0f
 8014e88:	08014f63 	.word	0x08014f63
 8014e8c:	08014f63 	.word	0x08014f63
 8014e90:	08014f63 	.word	0x08014f63
 8014e94:	08014f1f 	.word	0x08014f1f
 8014e98:	08014f63 	.word	0x08014f63
 8014e9c:	08014f63 	.word	0x08014f63
 8014ea0:	08014f63 	.word	0x08014f63
 8014ea4:	08014f63 	.word	0x08014f63
 8014ea8:	08014f63 	.word	0x08014f63
 8014eac:	08014f63 	.word	0x08014f63
 8014eb0:	08014f63 	.word	0x08014f63
 8014eb4:	08014f2f 	.word	0x08014f2f
 8014eb8:	08014f63 	.word	0x08014f63
 8014ebc:	08014f63 	.word	0x08014f63
 8014ec0:	08014f63 	.word	0x08014f63
 8014ec4:	08014f63 	.word	0x08014f63
 8014ec8:	08014f63 	.word	0x08014f63
 8014ecc:	08014f63 	.word	0x08014f63
 8014ed0:	08014f63 	.word	0x08014f63
 8014ed4:	08014f63 	.word	0x08014f63
 8014ed8:	08014f63 	.word	0x08014f63
 8014edc:	08014f63 	.word	0x08014f63
 8014ee0:	08014f63 	.word	0x08014f63
 8014ee4:	08014f63 	.word	0x08014f63
 8014ee8:	08014f63 	.word	0x08014f63
 8014eec:	08014f63 	.word	0x08014f63
 8014ef0:	08014f63 	.word	0x08014f63
 8014ef4:	08014f55 	.word	0x08014f55
 8014ef8:	2b40      	cmp	r3, #64	@ 0x40
 8014efa:	d02e      	beq.n	8014f5a <UART_SetConfig+0x8aa>
 8014efc:	e031      	b.n	8014f62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014efe:	f7fa fced 	bl	800f8dc <HAL_RCC_GetPCLK1Freq>
 8014f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014f04:	e033      	b.n	8014f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014f06:	f7fa fcff 	bl	800f908 <HAL_RCC_GetPCLK2Freq>
 8014f0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014f0c:	e02f      	b.n	8014f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7fc fcae 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014f1c:	e027      	b.n	8014f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014f1e:	f107 0318 	add.w	r3, r7, #24
 8014f22:	4618      	mov	r0, r3
 8014f24:	f7fc fdfa 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014f28:	69fb      	ldr	r3, [r7, #28]
 8014f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014f2c:	e01f      	b.n	8014f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8014fe4 <UART_SetConfig+0x934>)
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	f003 0320 	and.w	r3, r3, #32
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d009      	beq.n	8014f4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8014fe4 <UART_SetConfig+0x934>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	08db      	lsrs	r3, r3, #3
 8014f40:	f003 0303 	and.w	r3, r3, #3
 8014f44:	4a24      	ldr	r2, [pc, #144]	@ (8014fd8 <UART_SetConfig+0x928>)
 8014f46:	fa22 f303 	lsr.w	r3, r2, r3
 8014f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014f4c:	e00f      	b.n	8014f6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8014f4e:	4b22      	ldr	r3, [pc, #136]	@ (8014fd8 <UART_SetConfig+0x928>)
 8014f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014f52:	e00c      	b.n	8014f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014f54:	4b21      	ldr	r3, [pc, #132]	@ (8014fdc <UART_SetConfig+0x92c>)
 8014f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014f58:	e009      	b.n	8014f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014f60:	e005      	b.n	8014f6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014f62:	2300      	movs	r3, #0
 8014f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8014f66:	2301      	movs	r3, #1
 8014f68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8014f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	f000 80e7 	beq.w	8015144 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f7a:	4a19      	ldr	r2, [pc, #100]	@ (8014fe0 <UART_SetConfig+0x930>)
 8014f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f80:	461a      	mov	r2, r3
 8014f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f88:	005a      	lsls	r2, r3, #1
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	685b      	ldr	r3, [r3, #4]
 8014f8e:	085b      	lsrs	r3, r3, #1
 8014f90:	441a      	add	r2, r3
 8014f92:	697b      	ldr	r3, [r7, #20]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f9e:	2b0f      	cmp	r3, #15
 8014fa0:	d916      	bls.n	8014fd0 <UART_SetConfig+0x920>
 8014fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014fa8:	d212      	bcs.n	8014fd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fac:	b29b      	uxth	r3, r3
 8014fae:	f023 030f 	bic.w	r3, r3, #15
 8014fb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fb6:	085b      	lsrs	r3, r3, #1
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	f003 0307 	and.w	r3, r3, #7
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014fc2:	4313      	orrs	r3, r2
 8014fc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014fcc:	60da      	str	r2, [r3, #12]
 8014fce:	e0b9      	b.n	8015144 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8014fd6:	e0b5      	b.n	8015144 <UART_SetConfig+0xa94>
 8014fd8:	03d09000 	.word	0x03d09000
 8014fdc:	003d0900 	.word	0x003d0900
 8014fe0:	0801dbf4 	.word	0x0801dbf4
 8014fe4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8014fe8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8014fec:	2b20      	cmp	r3, #32
 8014fee:	dc49      	bgt.n	8015084 <UART_SetConfig+0x9d4>
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	db7c      	blt.n	80150ee <UART_SetConfig+0xa3e>
 8014ff4:	2b20      	cmp	r3, #32
 8014ff6:	d87a      	bhi.n	80150ee <UART_SetConfig+0xa3e>
 8014ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8015000 <UART_SetConfig+0x950>)
 8014ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ffe:	bf00      	nop
 8015000:	0801508b 	.word	0x0801508b
 8015004:	08015093 	.word	0x08015093
 8015008:	080150ef 	.word	0x080150ef
 801500c:	080150ef 	.word	0x080150ef
 8015010:	0801509b 	.word	0x0801509b
 8015014:	080150ef 	.word	0x080150ef
 8015018:	080150ef 	.word	0x080150ef
 801501c:	080150ef 	.word	0x080150ef
 8015020:	080150ab 	.word	0x080150ab
 8015024:	080150ef 	.word	0x080150ef
 8015028:	080150ef 	.word	0x080150ef
 801502c:	080150ef 	.word	0x080150ef
 8015030:	080150ef 	.word	0x080150ef
 8015034:	080150ef 	.word	0x080150ef
 8015038:	080150ef 	.word	0x080150ef
 801503c:	080150ef 	.word	0x080150ef
 8015040:	080150bb 	.word	0x080150bb
 8015044:	080150ef 	.word	0x080150ef
 8015048:	080150ef 	.word	0x080150ef
 801504c:	080150ef 	.word	0x080150ef
 8015050:	080150ef 	.word	0x080150ef
 8015054:	080150ef 	.word	0x080150ef
 8015058:	080150ef 	.word	0x080150ef
 801505c:	080150ef 	.word	0x080150ef
 8015060:	080150ef 	.word	0x080150ef
 8015064:	080150ef 	.word	0x080150ef
 8015068:	080150ef 	.word	0x080150ef
 801506c:	080150ef 	.word	0x080150ef
 8015070:	080150ef 	.word	0x080150ef
 8015074:	080150ef 	.word	0x080150ef
 8015078:	080150ef 	.word	0x080150ef
 801507c:	080150ef 	.word	0x080150ef
 8015080:	080150e1 	.word	0x080150e1
 8015084:	2b40      	cmp	r3, #64	@ 0x40
 8015086:	d02e      	beq.n	80150e6 <UART_SetConfig+0xa36>
 8015088:	e031      	b.n	80150ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801508a:	f7fa fc27 	bl	800f8dc <HAL_RCC_GetPCLK1Freq>
 801508e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015090:	e033      	b.n	80150fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015092:	f7fa fc39 	bl	800f908 <HAL_RCC_GetPCLK2Freq>
 8015096:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015098:	e02f      	b.n	80150fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801509a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fc fbe8 	bl	8011874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80150a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150a8:	e027      	b.n	80150fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80150aa:	f107 0318 	add.w	r3, r7, #24
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fc fd34 	bl	8011b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150b8:	e01f      	b.n	80150fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80150ba:	4b2d      	ldr	r3, [pc, #180]	@ (8015170 <UART_SetConfig+0xac0>)
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	f003 0320 	and.w	r3, r3, #32
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d009      	beq.n	80150da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80150c6:	4b2a      	ldr	r3, [pc, #168]	@ (8015170 <UART_SetConfig+0xac0>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	08db      	lsrs	r3, r3, #3
 80150cc:	f003 0303 	and.w	r3, r3, #3
 80150d0:	4a28      	ldr	r2, [pc, #160]	@ (8015174 <UART_SetConfig+0xac4>)
 80150d2:	fa22 f303 	lsr.w	r3, r2, r3
 80150d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80150d8:	e00f      	b.n	80150fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80150da:	4b26      	ldr	r3, [pc, #152]	@ (8015174 <UART_SetConfig+0xac4>)
 80150dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150de:	e00c      	b.n	80150fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80150e0:	4b25      	ldr	r3, [pc, #148]	@ (8015178 <UART_SetConfig+0xac8>)
 80150e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150e4:	e009      	b.n	80150fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80150e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80150ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80150ec:	e005      	b.n	80150fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80150ee:	2300      	movs	r3, #0
 80150f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80150f2:	2301      	movs	r3, #1
 80150f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80150f8:	bf00      	nop
    }

    if (pclk != 0U)
 80150fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d021      	beq.n	8015144 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015104:	4a1d      	ldr	r2, [pc, #116]	@ (801517c <UART_SetConfig+0xacc>)
 8015106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801510a:	461a      	mov	r2, r3
 801510c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801510e:	fbb3 f2f2 	udiv	r2, r3, r2
 8015112:	697b      	ldr	r3, [r7, #20]
 8015114:	685b      	ldr	r3, [r3, #4]
 8015116:	085b      	lsrs	r3, r3, #1
 8015118:	441a      	add	r2, r3
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	685b      	ldr	r3, [r3, #4]
 801511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8015122:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015126:	2b0f      	cmp	r3, #15
 8015128:	d909      	bls.n	801513e <UART_SetConfig+0xa8e>
 801512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015130:	d205      	bcs.n	801513e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015134:	b29a      	uxth	r2, r3
 8015136:	697b      	ldr	r3, [r7, #20]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	60da      	str	r2, [r3, #12]
 801513c:	e002      	b.n	8015144 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801513e:	2301      	movs	r3, #1
 8015140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015144:	697b      	ldr	r3, [r7, #20]
 8015146:	2201      	movs	r2, #1
 8015148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801514c:	697b      	ldr	r3, [r7, #20]
 801514e:	2201      	movs	r2, #1
 8015150:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	2200      	movs	r2, #0
 8015158:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	2200      	movs	r2, #0
 801515e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8015160:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8015164:	4618      	mov	r0, r3
 8015166:	3748      	adds	r7, #72	@ 0x48
 8015168:	46bd      	mov	sp, r7
 801516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801516e:	bf00      	nop
 8015170:	58024400 	.word	0x58024400
 8015174:	03d09000 	.word	0x03d09000
 8015178:	003d0900 	.word	0x003d0900
 801517c:	0801dbf4 	.word	0x0801dbf4

08015180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015180:	b480      	push	{r7}
 8015182:	b083      	sub	sp, #12
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801518c:	f003 0308 	and.w	r3, r3, #8
 8015190:	2b00      	cmp	r3, #0
 8015192:	d00a      	beq.n	80151aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	685b      	ldr	r3, [r3, #4]
 801519a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	430a      	orrs	r2, r1
 80151a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151ae:	f003 0301 	and.w	r3, r3, #1
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d00a      	beq.n	80151cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	430a      	orrs	r2, r1
 80151ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151d0:	f003 0302 	and.w	r3, r3, #2
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d00a      	beq.n	80151ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	430a      	orrs	r2, r1
 80151ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80151f2:	f003 0304 	and.w	r3, r3, #4
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d00a      	beq.n	8015210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	685b      	ldr	r3, [r3, #4]
 8015200:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	430a      	orrs	r2, r1
 801520e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015214:	f003 0310 	and.w	r3, r3, #16
 8015218:	2b00      	cmp	r3, #0
 801521a:	d00a      	beq.n	8015232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	689b      	ldr	r3, [r3, #8]
 8015222:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	430a      	orrs	r2, r1
 8015230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015236:	f003 0320 	and.w	r3, r3, #32
 801523a:	2b00      	cmp	r3, #0
 801523c:	d00a      	beq.n	8015254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	689b      	ldr	r3, [r3, #8]
 8015244:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	430a      	orrs	r2, r1
 8015252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801525c:	2b00      	cmp	r3, #0
 801525e:	d01a      	beq.n	8015296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	430a      	orrs	r2, r1
 8015274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801527a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801527e:	d10a      	bne.n	8015296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	685b      	ldr	r3, [r3, #4]
 8015286:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	430a      	orrs	r2, r1
 8015294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801529a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d00a      	beq.n	80152b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	430a      	orrs	r2, r1
 80152b6:	605a      	str	r2, [r3, #4]
  }
}
 80152b8:	bf00      	nop
 80152ba:	370c      	adds	r7, #12
 80152bc:	46bd      	mov	sp, r7
 80152be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c2:	4770      	bx	lr

080152c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b098      	sub	sp, #96	@ 0x60
 80152c8:	af02      	add	r7, sp, #8
 80152ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2200      	movs	r2, #0
 80152d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80152d4:	f7ee f93a 	bl	800354c <HAL_GetTick>
 80152d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f003 0308 	and.w	r3, r3, #8
 80152e4:	2b08      	cmp	r3, #8
 80152e6:	d12f      	bne.n	8015348 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80152e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80152f0:	2200      	movs	r2, #0
 80152f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80152f6:	6878      	ldr	r0, [r7, #4]
 80152f8:	f000 f88e 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d022      	beq.n	8015348 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801530a:	e853 3f00 	ldrex	r3, [r3]
 801530e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015316:	653b      	str	r3, [r7, #80]	@ 0x50
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	461a      	mov	r2, r3
 801531e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015320:	647b      	str	r3, [r7, #68]	@ 0x44
 8015322:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015328:	e841 2300 	strex	r3, r2, [r1]
 801532c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801532e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015330:	2b00      	cmp	r3, #0
 8015332:	d1e6      	bne.n	8015302 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2220      	movs	r2, #32
 8015338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2200      	movs	r2, #0
 8015340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015344:	2303      	movs	r3, #3
 8015346:	e063      	b.n	8015410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	f003 0304 	and.w	r3, r3, #4
 8015352:	2b04      	cmp	r3, #4
 8015354:	d149      	bne.n	80153ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015356:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801535a:	9300      	str	r3, [sp, #0]
 801535c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801535e:	2200      	movs	r2, #0
 8015360:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f000 f857 	bl	8015418 <UART_WaitOnFlagUntilTimeout>
 801536a:	4603      	mov	r3, r0
 801536c:	2b00      	cmp	r3, #0
 801536e:	d03c      	beq.n	80153ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015378:	e853 3f00 	ldrex	r3, [r3]
 801537c:	623b      	str	r3, [r7, #32]
   return(result);
 801537e:	6a3b      	ldr	r3, [r7, #32]
 8015380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	461a      	mov	r2, r3
 801538c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801538e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015390:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015396:	e841 2300 	strex	r3, r2, [r1]
 801539a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d1e6      	bne.n	8015370 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	3308      	adds	r3, #8
 80153a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	e853 3f00 	ldrex	r3, [r3]
 80153b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f023 0301 	bic.w	r3, r3, #1
 80153b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	3308      	adds	r3, #8
 80153c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80153c2:	61fa      	str	r2, [r7, #28]
 80153c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153c6:	69b9      	ldr	r1, [r7, #24]
 80153c8:	69fa      	ldr	r2, [r7, #28]
 80153ca:	e841 2300 	strex	r3, r2, [r1]
 80153ce:	617b      	str	r3, [r7, #20]
   return(result);
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d1e5      	bne.n	80153a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	2220      	movs	r2, #32
 80153da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2200      	movs	r2, #0
 80153e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80153e6:	2303      	movs	r3, #3
 80153e8:	e012      	b.n	8015410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2220      	movs	r2, #32
 80153ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	2220      	movs	r2, #32
 80153f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	2200      	movs	r2, #0
 80153fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	2200      	movs	r2, #0
 8015404:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2200      	movs	r2, #0
 801540a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801540e:	2300      	movs	r3, #0
}
 8015410:	4618      	mov	r0, r3
 8015412:	3758      	adds	r7, #88	@ 0x58
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b084      	sub	sp, #16
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	603b      	str	r3, [r7, #0]
 8015424:	4613      	mov	r3, r2
 8015426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015428:	e04f      	b.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801542a:	69bb      	ldr	r3, [r7, #24]
 801542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015430:	d04b      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015432:	f7ee f88b 	bl	800354c <HAL_GetTick>
 8015436:	4602      	mov	r2, r0
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	69ba      	ldr	r2, [r7, #24]
 801543e:	429a      	cmp	r2, r3
 8015440:	d302      	bcc.n	8015448 <UART_WaitOnFlagUntilTimeout+0x30>
 8015442:	69bb      	ldr	r3, [r7, #24]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d101      	bne.n	801544c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015448:	2303      	movs	r3, #3
 801544a:	e04e      	b.n	80154ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	f003 0304 	and.w	r3, r3, #4
 8015456:	2b00      	cmp	r3, #0
 8015458:	d037      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	2b80      	cmp	r3, #128	@ 0x80
 801545e:	d034      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	2b40      	cmp	r3, #64	@ 0x40
 8015464:	d031      	beq.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	69db      	ldr	r3, [r3, #28]
 801546c:	f003 0308 	and.w	r3, r3, #8
 8015470:	2b08      	cmp	r3, #8
 8015472:	d110      	bne.n	8015496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	2208      	movs	r2, #8
 801547a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801547c:	68f8      	ldr	r0, [r7, #12]
 801547e:	f000 f921 	bl	80156c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	2208      	movs	r2, #8
 8015486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	2200      	movs	r2, #0
 801548e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8015492:	2301      	movs	r3, #1
 8015494:	e029      	b.n	80154ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	69db      	ldr	r3, [r3, #28]
 801549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80154a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80154a4:	d111      	bne.n	80154ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80154ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f000 f907 	bl	80156c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2220      	movs	r2, #32
 80154ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80154c6:	2303      	movs	r3, #3
 80154c8:	e00f      	b.n	80154ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	69da      	ldr	r2, [r3, #28]
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	4013      	ands	r3, r2
 80154d4:	68ba      	ldr	r2, [r7, #8]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	bf0c      	ite	eq
 80154da:	2301      	moveq	r3, #1
 80154dc:	2300      	movne	r3, #0
 80154de:	b2db      	uxtb	r3, r3
 80154e0:	461a      	mov	r2, r3
 80154e2:	79fb      	ldrb	r3, [r7, #7]
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d0a0      	beq.n	801542a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3710      	adds	r7, #16
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
	...

080154f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b096      	sub	sp, #88	@ 0x58
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	60f8      	str	r0, [r7, #12]
 80154fc:	60b9      	str	r1, [r7, #8]
 80154fe:	4613      	mov	r3, r2
 8015500:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	68ba      	ldr	r2, [r7, #8]
 8015506:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	88fa      	ldrh	r2, [r7, #6]
 801550c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2200      	movs	r2, #0
 8015514:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2222      	movs	r2, #34	@ 0x22
 801551c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015526:	2b00      	cmp	r3, #0
 8015528:	d02d      	beq.n	8015586 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015530:	4a40      	ldr	r2, [pc, #256]	@ (8015634 <UART_Start_Receive_DMA+0x140>)
 8015532:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801553a:	4a3f      	ldr	r2, [pc, #252]	@ (8015638 <UART_Start_Receive_DMA+0x144>)
 801553c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015544:	4a3d      	ldr	r2, [pc, #244]	@ (801563c <UART_Start_Receive_DMA+0x148>)
 8015546:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801554e:	2200      	movs	r2, #0
 8015550:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	3324      	adds	r3, #36	@ 0x24
 801555e:	4619      	mov	r1, r3
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015564:	461a      	mov	r2, r3
 8015566:	88fb      	ldrh	r3, [r7, #6]
 8015568:	f7ef ffc2 	bl	80054f0 <HAL_DMA_Start_IT>
 801556c:	4603      	mov	r3, r0
 801556e:	2b00      	cmp	r3, #0
 8015570:	d009      	beq.n	8015586 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	2210      	movs	r2, #16
 8015576:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	2220      	movs	r2, #32
 801557e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8015582:	2301      	movs	r3, #1
 8015584:	e051      	b.n	801562a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	691b      	ldr	r3, [r3, #16]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d018      	beq.n	80155c0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015596:	e853 3f00 	ldrex	r3, [r3]
 801559a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801559c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801559e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80155a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	461a      	mov	r2, r3
 80155aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80155ae:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80155b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80155b4:	e841 2300 	strex	r3, r2, [r1]
 80155b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80155ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d1e6      	bne.n	801558e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	3308      	adds	r3, #8
 80155c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155ca:	e853 3f00 	ldrex	r3, [r3]
 80155ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80155d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155d2:	f043 0301 	orr.w	r3, r3, #1
 80155d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	3308      	adds	r3, #8
 80155de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80155e0:	637a      	str	r2, [r7, #52]	@ 0x34
 80155e2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80155e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80155e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155e8:	e841 2300 	strex	r3, r2, [r1]
 80155ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80155ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d1e5      	bne.n	80155c0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	3308      	adds	r3, #8
 80155fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80155fc:	697b      	ldr	r3, [r7, #20]
 80155fe:	e853 3f00 	ldrex	r3, [r3]
 8015602:	613b      	str	r3, [r7, #16]
   return(result);
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801560a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	3308      	adds	r3, #8
 8015612:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015614:	623a      	str	r2, [r7, #32]
 8015616:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015618:	69f9      	ldr	r1, [r7, #28]
 801561a:	6a3a      	ldr	r2, [r7, #32]
 801561c:	e841 2300 	strex	r3, r2, [r1]
 8015620:	61bb      	str	r3, [r7, #24]
   return(result);
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d1e5      	bne.n	80155f4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8015628:	2300      	movs	r3, #0
}
 801562a:	4618      	mov	r0, r3
 801562c:	3758      	adds	r7, #88	@ 0x58
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	08015791 	.word	0x08015791
 8015638:	080158b9 	.word	0x080158b9
 801563c:	080158f7 	.word	0x080158f7

08015640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8015640:	b480      	push	{r7}
 8015642:	b08f      	sub	sp, #60	@ 0x3c
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801564e:	6a3b      	ldr	r3, [r7, #32]
 8015650:	e853 3f00 	ldrex	r3, [r3]
 8015654:	61fb      	str	r3, [r7, #28]
   return(result);
 8015656:	69fb      	ldr	r3, [r7, #28]
 8015658:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801565c:	637b      	str	r3, [r7, #52]	@ 0x34
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	461a      	mov	r2, r3
 8015664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015666:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015668:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801566a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801566c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801566e:	e841 2300 	strex	r3, r2, [r1]
 8015672:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015676:	2b00      	cmp	r3, #0
 8015678:	d1e6      	bne.n	8015648 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	3308      	adds	r3, #8
 8015680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	e853 3f00 	ldrex	r3, [r3]
 8015688:	60bb      	str	r3, [r7, #8]
   return(result);
 801568a:	68bb      	ldr	r3, [r7, #8]
 801568c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8015690:	633b      	str	r3, [r7, #48]	@ 0x30
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	3308      	adds	r3, #8
 8015698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801569a:	61ba      	str	r2, [r7, #24]
 801569c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801569e:	6979      	ldr	r1, [r7, #20]
 80156a0:	69ba      	ldr	r2, [r7, #24]
 80156a2:	e841 2300 	strex	r3, r2, [r1]
 80156a6:	613b      	str	r3, [r7, #16]
   return(result);
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d1e5      	bne.n	801567a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2220      	movs	r2, #32
 80156b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80156b6:	bf00      	nop
 80156b8:	373c      	adds	r7, #60	@ 0x3c
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr
	...

080156c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80156c4:	b480      	push	{r7}
 80156c6:	b095      	sub	sp, #84	@ 0x54
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156d4:	e853 3f00 	ldrex	r3, [r3]
 80156d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80156da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80156e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	461a      	mov	r2, r3
 80156e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80156ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80156ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80156f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156f2:	e841 2300 	strex	r3, r2, [r1]
 80156f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80156f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d1e6      	bne.n	80156cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	3308      	adds	r3, #8
 8015704:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015706:	6a3b      	ldr	r3, [r7, #32]
 8015708:	e853 3f00 	ldrex	r3, [r3]
 801570c:	61fb      	str	r3, [r7, #28]
   return(result);
 801570e:	69fa      	ldr	r2, [r7, #28]
 8015710:	4b1e      	ldr	r3, [pc, #120]	@ (801578c <UART_EndRxTransfer+0xc8>)
 8015712:	4013      	ands	r3, r2
 8015714:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	3308      	adds	r3, #8
 801571c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801571e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015720:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015726:	e841 2300 	strex	r3, r2, [r1]
 801572a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801572e:	2b00      	cmp	r3, #0
 8015730:	d1e5      	bne.n	80156fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015736:	2b01      	cmp	r3, #1
 8015738:	d118      	bne.n	801576c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	e853 3f00 	ldrex	r3, [r3]
 8015746:	60bb      	str	r3, [r7, #8]
   return(result);
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	f023 0310 	bic.w	r3, r3, #16
 801574e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	461a      	mov	r2, r3
 8015756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015758:	61bb      	str	r3, [r7, #24]
 801575a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801575c:	6979      	ldr	r1, [r7, #20]
 801575e:	69ba      	ldr	r2, [r7, #24]
 8015760:	e841 2300 	strex	r3, r2, [r1]
 8015764:	613b      	str	r3, [r7, #16]
   return(result);
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1e6      	bne.n	801573a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2220      	movs	r2, #32
 8015770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	2200      	movs	r2, #0
 8015778:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	2200      	movs	r2, #0
 801577e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015780:	bf00      	nop
 8015782:	3754      	adds	r7, #84	@ 0x54
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr
 801578c:	effffffe 	.word	0xeffffffe

08015790 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b09c      	sub	sp, #112	@ 0x70
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801579c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	69db      	ldr	r3, [r3, #28]
 80157a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80157a6:	d071      	beq.n	801588c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80157a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157aa:	2200      	movs	r2, #0
 80157ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80157b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80157b8:	e853 3f00 	ldrex	r3, [r3]
 80157bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80157be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80157c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80157c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80157c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157c8:	681b      	ldr	r3, [r3, #0]
 80157ca:	461a      	mov	r2, r3
 80157cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80157d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80157d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80157d6:	e841 2300 	strex	r3, r2, [r1]
 80157da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80157dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d1e6      	bne.n	80157b0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	3308      	adds	r3, #8
 80157e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157ec:	e853 3f00 	ldrex	r3, [r3]
 80157f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80157f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157f4:	f023 0301 	bic.w	r3, r3, #1
 80157f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80157fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	3308      	adds	r3, #8
 8015800:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8015802:	647a      	str	r2, [r7, #68]	@ 0x44
 8015804:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015806:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015808:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801580a:	e841 2300 	strex	r3, r2, [r1]
 801580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015812:	2b00      	cmp	r3, #0
 8015814:	d1e5      	bne.n	80157e2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015816:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	3308      	adds	r3, #8
 801581c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015820:	e853 3f00 	ldrex	r3, [r3]
 8015824:	623b      	str	r3, [r7, #32]
   return(result);
 8015826:	6a3b      	ldr	r3, [r7, #32]
 8015828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801582c:	663b      	str	r3, [r7, #96]	@ 0x60
 801582e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	3308      	adds	r3, #8
 8015834:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8015836:	633a      	str	r2, [r7, #48]	@ 0x30
 8015838:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801583a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801583c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801583e:	e841 2300 	strex	r3, r2, [r1]
 8015842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015846:	2b00      	cmp	r3, #0
 8015848:	d1e5      	bne.n	8015816 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801584a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801584c:	2220      	movs	r2, #32
 801584e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015854:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015856:	2b01      	cmp	r3, #1
 8015858:	d118      	bne.n	801588c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801585a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	e853 3f00 	ldrex	r3, [r3]
 8015866:	60fb      	str	r3, [r7, #12]
   return(result);
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f023 0310 	bic.w	r3, r3, #16
 801586e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	461a      	mov	r2, r3
 8015876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015878:	61fb      	str	r3, [r7, #28]
 801587a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801587c:	69b9      	ldr	r1, [r7, #24]
 801587e:	69fa      	ldr	r2, [r7, #28]
 8015880:	e841 2300 	strex	r3, r2, [r1]
 8015884:	617b      	str	r3, [r7, #20]
   return(result);
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d1e6      	bne.n	801585a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801588c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801588e:	2200      	movs	r2, #0
 8015890:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015894:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015896:	2b01      	cmp	r3, #1
 8015898:	d107      	bne.n	80158aa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801589a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801589c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80158a0:	4619      	mov	r1, r3
 80158a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80158a4:	f7fe fef8 	bl	8014698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80158a8:	e002      	b.n	80158b0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80158aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80158ac:	f7ec f84c 	bl	8001948 <HAL_UART_RxCpltCallback>
}
 80158b0:	bf00      	nop
 80158b2:	3770      	adds	r7, #112	@ 0x70
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80158c4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	2201      	movs	r2, #1
 80158ca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158d0:	2b01      	cmp	r3, #1
 80158d2:	d109      	bne.n	80158e8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80158da:	085b      	lsrs	r3, r3, #1
 80158dc:	b29b      	uxth	r3, r3
 80158de:	4619      	mov	r1, r3
 80158e0:	68f8      	ldr	r0, [r7, #12]
 80158e2:	f7fe fed9 	bl	8014698 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80158e6:	e002      	b.n	80158ee <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80158e8:	68f8      	ldr	r0, [r7, #12]
 80158ea:	f7fe fec1 	bl	8014670 <HAL_UART_RxHalfCpltCallback>
}
 80158ee:	bf00      	nop
 80158f0:	3710      	adds	r7, #16
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}

080158f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b086      	sub	sp, #24
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015902:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015904:	697b      	ldr	r3, [r7, #20]
 8015906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801590a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801590c:	697b      	ldr	r3, [r7, #20]
 801590e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015912:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	689b      	ldr	r3, [r3, #8]
 801591a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801591e:	2b80      	cmp	r3, #128	@ 0x80
 8015920:	d109      	bne.n	8015936 <UART_DMAError+0x40>
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	2b21      	cmp	r3, #33	@ 0x21
 8015926:	d106      	bne.n	8015936 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2200      	movs	r2, #0
 801592c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8015930:	6978      	ldr	r0, [r7, #20]
 8015932:	f7ff fe85 	bl	8015640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	681b      	ldr	r3, [r3, #0]
 801593a:	689b      	ldr	r3, [r3, #8]
 801593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015940:	2b40      	cmp	r3, #64	@ 0x40
 8015942:	d109      	bne.n	8015958 <UART_DMAError+0x62>
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2b22      	cmp	r3, #34	@ 0x22
 8015948:	d106      	bne.n	8015958 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	2200      	movs	r2, #0
 801594e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8015952:	6978      	ldr	r0, [r7, #20]
 8015954:	f7ff feb6 	bl	80156c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801595e:	f043 0210 	orr.w	r2, r3, #16
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8015968:	6978      	ldr	r0, [r7, #20]
 801596a:	f7fe fe8b 	bl	8014684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801596e:	bf00      	nop
 8015970:	3718      	adds	r7, #24
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}

08015976 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015976:	b580      	push	{r7, lr}
 8015978:	b084      	sub	sp, #16
 801597a:	af00      	add	r7, sp, #0
 801597c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2200      	movs	r2, #0
 8015988:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801598c:	68f8      	ldr	r0, [r7, #12]
 801598e:	f7fe fe79 	bl	8014684 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015992:	bf00      	nop
 8015994:	3710      	adds	r7, #16
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}

0801599a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801599a:	b580      	push	{r7, lr}
 801599c:	b088      	sub	sp, #32
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	e853 3f00 	ldrex	r3, [r3]
 80159ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80159b6:	61fb      	str	r3, [r7, #28]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	461a      	mov	r2, r3
 80159be:	69fb      	ldr	r3, [r7, #28]
 80159c0:	61bb      	str	r3, [r7, #24]
 80159c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80159c4:	6979      	ldr	r1, [r7, #20]
 80159c6:	69ba      	ldr	r2, [r7, #24]
 80159c8:	e841 2300 	strex	r3, r2, [r1]
 80159cc:	613b      	str	r3, [r7, #16]
   return(result);
 80159ce:	693b      	ldr	r3, [r7, #16]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d1e6      	bne.n	80159a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	2220      	movs	r2, #32
 80159d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	2200      	movs	r2, #0
 80159e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7fe fe3a 	bl	801465c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80159e8:	bf00      	nop
 80159ea:	3720      	adds	r7, #32
 80159ec:	46bd      	mov	sp, r7
 80159ee:	bd80      	pop	{r7, pc}

080159f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80159f8:	bf00      	nop
 80159fa:	370c      	adds	r7, #12
 80159fc:	46bd      	mov	sp, r7
 80159fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a02:	4770      	bx	lr

08015a04 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015a04:	b480      	push	{r7}
 8015a06:	b083      	sub	sp, #12
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015a0c:	bf00      	nop
 8015a0e:	370c      	adds	r7, #12
 8015a10:	46bd      	mov	sp, r7
 8015a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a16:	4770      	bx	lr

08015a18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015a18:	b480      	push	{r7}
 8015a1a:	b083      	sub	sp, #12
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015a20:	bf00      	nop
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015a3a:	2b01      	cmp	r3, #1
 8015a3c:	d101      	bne.n	8015a42 <HAL_UARTEx_EnableFifoMode+0x16>
 8015a3e:	2302      	movs	r3, #2
 8015a40:	e02b      	b.n	8015a9a <HAL_UARTEx_EnableFifoMode+0x6e>
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2201      	movs	r2, #1
 8015a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	2224      	movs	r2, #36	@ 0x24
 8015a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	681a      	ldr	r2, [r3, #0]
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	f022 0201 	bic.w	r2, r2, #1
 8015a68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8015a70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8015a78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	68fa      	ldr	r2, [r7, #12]
 8015a80:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f000 f88a 	bl	8015b9c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2220      	movs	r2, #32
 8015a8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015a98:	2300      	movs	r3, #0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3710      	adds	r7, #16
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
 8015aaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015ab2:	2b01      	cmp	r3, #1
 8015ab4:	d101      	bne.n	8015aba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015ab6:	2302      	movs	r3, #2
 8015ab8:	e02d      	b.n	8015b16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2201      	movs	r2, #1
 8015abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2224      	movs	r2, #36	@ 0x24
 8015ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f022 0201 	bic.w	r2, r2, #1
 8015ae0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	683a      	ldr	r2, [r7, #0]
 8015af2:	430a      	orrs	r2, r1
 8015af4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f000 f850 	bl	8015b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	68fa      	ldr	r2, [r7, #12]
 8015b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2220      	movs	r2, #32
 8015b08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2200      	movs	r2, #0
 8015b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015b14:	2300      	movs	r3, #0
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3710      	adds	r7, #16
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}

08015b1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015b1e:	b580      	push	{r7, lr}
 8015b20:	b084      	sub	sp, #16
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	6078      	str	r0, [r7, #4]
 8015b26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015b2e:	2b01      	cmp	r3, #1
 8015b30:	d101      	bne.n	8015b36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015b32:	2302      	movs	r3, #2
 8015b34:	e02d      	b.n	8015b92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	2201      	movs	r2, #1
 8015b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	2224      	movs	r2, #36	@ 0x24
 8015b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	f022 0201 	bic.w	r2, r2, #1
 8015b5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	689b      	ldr	r3, [r3, #8]
 8015b64:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	683a      	ldr	r2, [r7, #0]
 8015b6e:	430a      	orrs	r2, r1
 8015b70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f000 f812 	bl	8015b9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	68fa      	ldr	r2, [r7, #12]
 8015b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	2220      	movs	r2, #32
 8015b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015b90:	2300      	movs	r3, #0
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3710      	adds	r7, #16
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
	...

08015b9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	b085      	sub	sp, #20
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d108      	bne.n	8015bbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	2201      	movs	r2, #1
 8015bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	2201      	movs	r2, #1
 8015bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015bbc:	e031      	b.n	8015c22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015bbe:	2310      	movs	r3, #16
 8015bc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015bc2:	2310      	movs	r3, #16
 8015bc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	689b      	ldr	r3, [r3, #8]
 8015bcc:	0e5b      	lsrs	r3, r3, #25
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	f003 0307 	and.w	r3, r3, #7
 8015bd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	689b      	ldr	r3, [r3, #8]
 8015bdc:	0f5b      	lsrs	r3, r3, #29
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	f003 0307 	and.w	r3, r3, #7
 8015be4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015be6:	7bbb      	ldrb	r3, [r7, #14]
 8015be8:	7b3a      	ldrb	r2, [r7, #12]
 8015bea:	4911      	ldr	r1, [pc, #68]	@ (8015c30 <UARTEx_SetNbDataToProcess+0x94>)
 8015bec:	5c8a      	ldrb	r2, [r1, r2]
 8015bee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015bf2:	7b3a      	ldrb	r2, [r7, #12]
 8015bf4:	490f      	ldr	r1, [pc, #60]	@ (8015c34 <UARTEx_SetNbDataToProcess+0x98>)
 8015bf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8015bfc:	b29a      	uxth	r2, r3
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015c04:	7bfb      	ldrb	r3, [r7, #15]
 8015c06:	7b7a      	ldrb	r2, [r7, #13]
 8015c08:	4909      	ldr	r1, [pc, #36]	@ (8015c30 <UARTEx_SetNbDataToProcess+0x94>)
 8015c0a:	5c8a      	ldrb	r2, [r1, r2]
 8015c0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015c10:	7b7a      	ldrb	r2, [r7, #13]
 8015c12:	4908      	ldr	r1, [pc, #32]	@ (8015c34 <UARTEx_SetNbDataToProcess+0x98>)
 8015c14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015c16:	fb93 f3f2 	sdiv	r3, r3, r2
 8015c1a:	b29a      	uxth	r2, r3
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8015c22:	bf00      	nop
 8015c24:	3714      	adds	r7, #20
 8015c26:	46bd      	mov	sp, r7
 8015c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2c:	4770      	bx	lr
 8015c2e:	bf00      	nop
 8015c30:	0801dc0c 	.word	0x0801dc0c
 8015c34:	0801dc14 	.word	0x0801dc14

08015c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015c38:	b084      	sub	sp, #16
 8015c3a:	b580      	push	{r7, lr}
 8015c3c:	b084      	sub	sp, #16
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
 8015c42:	f107 001c 	add.w	r0, r7, #28
 8015c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015c4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015c4e:	2b01      	cmp	r3, #1
 8015c50:	d121      	bne.n	8015c96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	68da      	ldr	r2, [r3, #12]
 8015c62:	4b2c      	ldr	r3, [pc, #176]	@ (8015d14 <USB_CoreInit+0xdc>)
 8015c64:	4013      	ands	r3, r2
 8015c66:	687a      	ldr	r2, [r7, #4]
 8015c68:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	68db      	ldr	r3, [r3, #12]
 8015c6e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8015c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d105      	bne.n	8015c8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	68db      	ldr	r3, [r3, #12]
 8015c82:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015c8a:	6878      	ldr	r0, [r7, #4]
 8015c8c:	f001 fafa 	bl	8017284 <USB_CoreReset>
 8015c90:	4603      	mov	r3, r0
 8015c92:	73fb      	strb	r3, [r7, #15]
 8015c94:	e01b      	b.n	8015cce <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	68db      	ldr	r3, [r3, #12]
 8015c9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f001 faee 	bl	8017284 <USB_CoreReset>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8015cac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d106      	bne.n	8015cc2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8015cc0:	e005      	b.n	8015cce <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015cc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8015cce:	7fbb      	ldrb	r3, [r7, #30]
 8015cd0:	2b01      	cmp	r3, #1
 8015cd2:	d116      	bne.n	8015d02 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015cd8:	b29a      	uxth	r2, r3
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8015d18 <USB_CoreInit+0xe0>)
 8015ce4:	4313      	orrs	r3, r2
 8015ce6:	687a      	ldr	r2, [r7, #4]
 8015ce8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	689b      	ldr	r3, [r3, #8]
 8015cee:	f043 0206 	orr.w	r2, r3, #6
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	689b      	ldr	r3, [r3, #8]
 8015cfa:	f043 0220 	orr.w	r2, r3, #32
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8015d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3710      	adds	r7, #16
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d0e:	b004      	add	sp, #16
 8015d10:	4770      	bx	lr
 8015d12:	bf00      	nop
 8015d14:	ffbdffbf 	.word	0xffbdffbf
 8015d18:	03ee0000 	.word	0x03ee0000

08015d1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8015d1c:	b480      	push	{r7}
 8015d1e:	b087      	sub	sp, #28
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	60f8      	str	r0, [r7, #12]
 8015d24:	60b9      	str	r1, [r7, #8]
 8015d26:	4613      	mov	r3, r2
 8015d28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8015d2a:	79fb      	ldrb	r3, [r7, #7]
 8015d2c:	2b02      	cmp	r3, #2
 8015d2e:	d165      	bne.n	8015dfc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	4a41      	ldr	r2, [pc, #260]	@ (8015e38 <USB_SetTurnaroundTime+0x11c>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d906      	bls.n	8015d46 <USB_SetTurnaroundTime+0x2a>
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	4a40      	ldr	r2, [pc, #256]	@ (8015e3c <USB_SetTurnaroundTime+0x120>)
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d202      	bcs.n	8015d46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8015d40:	230f      	movs	r3, #15
 8015d42:	617b      	str	r3, [r7, #20]
 8015d44:	e062      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	4a3c      	ldr	r2, [pc, #240]	@ (8015e3c <USB_SetTurnaroundTime+0x120>)
 8015d4a:	4293      	cmp	r3, r2
 8015d4c:	d306      	bcc.n	8015d5c <USB_SetTurnaroundTime+0x40>
 8015d4e:	68bb      	ldr	r3, [r7, #8]
 8015d50:	4a3b      	ldr	r2, [pc, #236]	@ (8015e40 <USB_SetTurnaroundTime+0x124>)
 8015d52:	4293      	cmp	r3, r2
 8015d54:	d202      	bcs.n	8015d5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015d56:	230e      	movs	r3, #14
 8015d58:	617b      	str	r3, [r7, #20]
 8015d5a:	e057      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015d5c:	68bb      	ldr	r3, [r7, #8]
 8015d5e:	4a38      	ldr	r2, [pc, #224]	@ (8015e40 <USB_SetTurnaroundTime+0x124>)
 8015d60:	4293      	cmp	r3, r2
 8015d62:	d306      	bcc.n	8015d72 <USB_SetTurnaroundTime+0x56>
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	4a37      	ldr	r2, [pc, #220]	@ (8015e44 <USB_SetTurnaroundTime+0x128>)
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d202      	bcs.n	8015d72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015d6c:	230d      	movs	r3, #13
 8015d6e:	617b      	str	r3, [r7, #20]
 8015d70:	e04c      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8015d72:	68bb      	ldr	r3, [r7, #8]
 8015d74:	4a33      	ldr	r2, [pc, #204]	@ (8015e44 <USB_SetTurnaroundTime+0x128>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d306      	bcc.n	8015d88 <USB_SetTurnaroundTime+0x6c>
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	4a32      	ldr	r2, [pc, #200]	@ (8015e48 <USB_SetTurnaroundTime+0x12c>)
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d802      	bhi.n	8015d88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8015d82:	230c      	movs	r3, #12
 8015d84:	617b      	str	r3, [r7, #20]
 8015d86:	e041      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8015e48 <USB_SetTurnaroundTime+0x12c>)
 8015d8c:	4293      	cmp	r3, r2
 8015d8e:	d906      	bls.n	8015d9e <USB_SetTurnaroundTime+0x82>
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	4a2e      	ldr	r2, [pc, #184]	@ (8015e4c <USB_SetTurnaroundTime+0x130>)
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d802      	bhi.n	8015d9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8015d98:	230b      	movs	r3, #11
 8015d9a:	617b      	str	r3, [r7, #20]
 8015d9c:	e036      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	4a2a      	ldr	r2, [pc, #168]	@ (8015e4c <USB_SetTurnaroundTime+0x130>)
 8015da2:	4293      	cmp	r3, r2
 8015da4:	d906      	bls.n	8015db4 <USB_SetTurnaroundTime+0x98>
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	4a29      	ldr	r2, [pc, #164]	@ (8015e50 <USB_SetTurnaroundTime+0x134>)
 8015daa:	4293      	cmp	r3, r2
 8015dac:	d802      	bhi.n	8015db4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8015dae:	230a      	movs	r3, #10
 8015db0:	617b      	str	r3, [r7, #20]
 8015db2:	e02b      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	4a26      	ldr	r2, [pc, #152]	@ (8015e50 <USB_SetTurnaroundTime+0x134>)
 8015db8:	4293      	cmp	r3, r2
 8015dba:	d906      	bls.n	8015dca <USB_SetTurnaroundTime+0xae>
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	4a25      	ldr	r2, [pc, #148]	@ (8015e54 <USB_SetTurnaroundTime+0x138>)
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	d202      	bcs.n	8015dca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8015dc4:	2309      	movs	r3, #9
 8015dc6:	617b      	str	r3, [r7, #20]
 8015dc8:	e020      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	4a21      	ldr	r2, [pc, #132]	@ (8015e54 <USB_SetTurnaroundTime+0x138>)
 8015dce:	4293      	cmp	r3, r2
 8015dd0:	d306      	bcc.n	8015de0 <USB_SetTurnaroundTime+0xc4>
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	4a20      	ldr	r2, [pc, #128]	@ (8015e58 <USB_SetTurnaroundTime+0x13c>)
 8015dd6:	4293      	cmp	r3, r2
 8015dd8:	d802      	bhi.n	8015de0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015dda:	2308      	movs	r3, #8
 8015ddc:	617b      	str	r3, [r7, #20]
 8015dde:	e015      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	4a1d      	ldr	r2, [pc, #116]	@ (8015e58 <USB_SetTurnaroundTime+0x13c>)
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d906      	bls.n	8015df6 <USB_SetTurnaroundTime+0xda>
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	4a1c      	ldr	r2, [pc, #112]	@ (8015e5c <USB_SetTurnaroundTime+0x140>)
 8015dec:	4293      	cmp	r3, r2
 8015dee:	d202      	bcs.n	8015df6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8015df0:	2307      	movs	r3, #7
 8015df2:	617b      	str	r3, [r7, #20]
 8015df4:	e00a      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015df6:	2306      	movs	r3, #6
 8015df8:	617b      	str	r3, [r7, #20]
 8015dfa:	e007      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8015dfc:	79fb      	ldrb	r3, [r7, #7]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d102      	bne.n	8015e08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8015e02:	2309      	movs	r3, #9
 8015e04:	617b      	str	r3, [r7, #20]
 8015e06:	e001      	b.n	8015e0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015e08:	2309      	movs	r3, #9
 8015e0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	68db      	ldr	r3, [r3, #12]
 8015e10:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	68da      	ldr	r2, [r3, #12]
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	029b      	lsls	r3, r3, #10
 8015e20:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8015e24:	431a      	orrs	r2, r3
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	371c      	adds	r7, #28
 8015e30:	46bd      	mov	sp, r7
 8015e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e36:	4770      	bx	lr
 8015e38:	00d8acbf 	.word	0x00d8acbf
 8015e3c:	00e4e1c0 	.word	0x00e4e1c0
 8015e40:	00f42400 	.word	0x00f42400
 8015e44:	01067380 	.word	0x01067380
 8015e48:	011a499f 	.word	0x011a499f
 8015e4c:	01312cff 	.word	0x01312cff
 8015e50:	014ca43f 	.word	0x014ca43f
 8015e54:	016e3600 	.word	0x016e3600
 8015e58:	01a6ab1f 	.word	0x01a6ab1f
 8015e5c:	01e84800 	.word	0x01e84800

08015e60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015e60:	b480      	push	{r7}
 8015e62:	b083      	sub	sp, #12
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	689b      	ldr	r3, [r3, #8]
 8015e6c:	f043 0201 	orr.w	r2, r3, #1
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015e74:	2300      	movs	r3, #0
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	370c      	adds	r7, #12
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e80:	4770      	bx	lr

08015e82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015e82:	b480      	push	{r7}
 8015e84:	b083      	sub	sp, #12
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	f023 0201 	bic.w	r2, r3, #1
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015e96:	2300      	movs	r3, #0
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	370c      	adds	r7, #12
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea2:	4770      	bx	lr

08015ea4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b084      	sub	sp, #16
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	460b      	mov	r3, r1
 8015eae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	68db      	ldr	r3, [r3, #12]
 8015eb8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8015ec0:	78fb      	ldrb	r3, [r7, #3]
 8015ec2:	2b01      	cmp	r3, #1
 8015ec4:	d115      	bne.n	8015ef2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015ed2:	200a      	movs	r0, #10
 8015ed4:	f7ed fb46 	bl	8003564 <HAL_Delay>
      ms += 10U;
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	330a      	adds	r3, #10
 8015edc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f001 f93f 	bl	8017162 <USB_GetMode>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	2b01      	cmp	r3, #1
 8015ee8:	d01e      	beq.n	8015f28 <USB_SetCurrentMode+0x84>
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	2bc7      	cmp	r3, #199	@ 0xc7
 8015eee:	d9f0      	bls.n	8015ed2 <USB_SetCurrentMode+0x2e>
 8015ef0:	e01a      	b.n	8015f28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015ef2:	78fb      	ldrb	r3, [r7, #3]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d115      	bne.n	8015f24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8015f04:	200a      	movs	r0, #10
 8015f06:	f7ed fb2d 	bl	8003564 <HAL_Delay>
      ms += 10U;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	330a      	adds	r3, #10
 8015f0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f001 f926 	bl	8017162 <USB_GetMode>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d005      	beq.n	8015f28 <USB_SetCurrentMode+0x84>
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8015f20:	d9f0      	bls.n	8015f04 <USB_SetCurrentMode+0x60>
 8015f22:	e001      	b.n	8015f28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015f24:	2301      	movs	r3, #1
 8015f26:	e005      	b.n	8015f34 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8015f28:	68fb      	ldr	r3, [r7, #12]
 8015f2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8015f2c:	d101      	bne.n	8015f32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8015f2e:	2301      	movs	r3, #1
 8015f30:	e000      	b.n	8015f34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015f32:	2300      	movs	r3, #0
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3710      	adds	r7, #16
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8015f3c:	b084      	sub	sp, #16
 8015f3e:	b580      	push	{r7, lr}
 8015f40:	b086      	sub	sp, #24
 8015f42:	af00      	add	r7, sp, #0
 8015f44:	6078      	str	r0, [r7, #4]
 8015f46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8015f4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015f56:	2300      	movs	r3, #0
 8015f58:	613b      	str	r3, [r7, #16]
 8015f5a:	e009      	b.n	8015f70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8015f5c:	687a      	ldr	r2, [r7, #4]
 8015f5e:	693b      	ldr	r3, [r7, #16]
 8015f60:	3340      	adds	r3, #64	@ 0x40
 8015f62:	009b      	lsls	r3, r3, #2
 8015f64:	4413      	add	r3, r2
 8015f66:	2200      	movs	r2, #0
 8015f68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	613b      	str	r3, [r7, #16]
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	2b0e      	cmp	r3, #14
 8015f74:	d9f2      	bls.n	8015f5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015f76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d11c      	bne.n	8015fb8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	68fa      	ldr	r2, [r7, #12]
 8015f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015f8c:	f043 0302 	orr.w	r3, r3, #2
 8015f90:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	601a      	str	r2, [r3, #0]
 8015fb6:	e005      	b.n	8015fc4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015fbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8015fca:	461a      	mov	r2, r3
 8015fcc:	2300      	movs	r3, #0
 8015fce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8015fd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8015fd4:	2b01      	cmp	r3, #1
 8015fd6:	d10d      	bne.n	8015ff4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8015fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d104      	bne.n	8015fea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8015fe0:	2100      	movs	r1, #0
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f000 f968 	bl	80162b8 <USB_SetDevSpeed>
 8015fe8:	e008      	b.n	8015ffc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8015fea:	2101      	movs	r1, #1
 8015fec:	6878      	ldr	r0, [r7, #4]
 8015fee:	f000 f963 	bl	80162b8 <USB_SetDevSpeed>
 8015ff2:	e003      	b.n	8015ffc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015ff4:	2103      	movs	r1, #3
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	f000 f95e 	bl	80162b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8015ffc:	2110      	movs	r1, #16
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 f8fa 	bl	80161f8 <USB_FlushTxFifo>
 8016004:	4603      	mov	r3, r0
 8016006:	2b00      	cmp	r3, #0
 8016008:	d001      	beq.n	801600e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801600a:	2301      	movs	r3, #1
 801600c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f000 f924 	bl	801625c <USB_FlushRxFifo>
 8016014:	4603      	mov	r3, r0
 8016016:	2b00      	cmp	r3, #0
 8016018:	d001      	beq.n	801601e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801601a:	2301      	movs	r3, #1
 801601c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016024:	461a      	mov	r2, r3
 8016026:	2300      	movs	r3, #0
 8016028:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016030:	461a      	mov	r2, r3
 8016032:	2300      	movs	r3, #0
 8016034:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801603c:	461a      	mov	r2, r3
 801603e:	2300      	movs	r3, #0
 8016040:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016042:	2300      	movs	r3, #0
 8016044:	613b      	str	r3, [r7, #16]
 8016046:	e043      	b.n	80160d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016048:	693b      	ldr	r3, [r7, #16]
 801604a:	015a      	lsls	r2, r3, #5
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	4413      	add	r3, r2
 8016050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801605a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801605e:	d118      	bne.n	8016092 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d10a      	bne.n	801607c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	015a      	lsls	r2, r3, #5
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	4413      	add	r3, r2
 801606e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016072:	461a      	mov	r2, r3
 8016074:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016078:	6013      	str	r3, [r2, #0]
 801607a:	e013      	b.n	80160a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	015a      	lsls	r2, r3, #5
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	4413      	add	r3, r2
 8016084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016088:	461a      	mov	r2, r3
 801608a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801608e:	6013      	str	r3, [r2, #0]
 8016090:	e008      	b.n	80160a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	015a      	lsls	r2, r3, #5
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	4413      	add	r3, r2
 801609a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801609e:	461a      	mov	r2, r3
 80160a0:	2300      	movs	r3, #0
 80160a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80160a4:	693b      	ldr	r3, [r7, #16]
 80160a6:	015a      	lsls	r2, r3, #5
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	4413      	add	r3, r2
 80160ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160b0:	461a      	mov	r2, r3
 80160b2:	2300      	movs	r3, #0
 80160b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	015a      	lsls	r2, r3, #5
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	4413      	add	r3, r2
 80160be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80160c2:	461a      	mov	r2, r3
 80160c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80160c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80160ca:	693b      	ldr	r3, [r7, #16]
 80160cc:	3301      	adds	r3, #1
 80160ce:	613b      	str	r3, [r7, #16]
 80160d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80160d4:	461a      	mov	r2, r3
 80160d6:	693b      	ldr	r3, [r7, #16]
 80160d8:	4293      	cmp	r3, r2
 80160da:	d3b5      	bcc.n	8016048 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80160dc:	2300      	movs	r3, #0
 80160de:	613b      	str	r3, [r7, #16]
 80160e0:	e043      	b.n	801616a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80160e2:	693b      	ldr	r3, [r7, #16]
 80160e4:	015a      	lsls	r2, r3, #5
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	4413      	add	r3, r2
 80160ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80160f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80160f8:	d118      	bne.n	801612c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d10a      	bne.n	8016116 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	015a      	lsls	r2, r3, #5
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	4413      	add	r3, r2
 8016108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801610c:	461a      	mov	r2, r3
 801610e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016112:	6013      	str	r3, [r2, #0]
 8016114:	e013      	b.n	801613e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016116:	693b      	ldr	r3, [r7, #16]
 8016118:	015a      	lsls	r2, r3, #5
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	4413      	add	r3, r2
 801611e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016122:	461a      	mov	r2, r3
 8016124:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8016128:	6013      	str	r3, [r2, #0]
 801612a:	e008      	b.n	801613e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801612c:	693b      	ldr	r3, [r7, #16]
 801612e:	015a      	lsls	r2, r3, #5
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	4413      	add	r3, r2
 8016134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016138:	461a      	mov	r2, r3
 801613a:	2300      	movs	r3, #0
 801613c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	015a      	lsls	r2, r3, #5
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	4413      	add	r3, r2
 8016146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801614a:	461a      	mov	r2, r3
 801614c:	2300      	movs	r3, #0
 801614e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8016150:	693b      	ldr	r3, [r7, #16]
 8016152:	015a      	lsls	r2, r3, #5
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	4413      	add	r3, r2
 8016158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801615c:	461a      	mov	r2, r3
 801615e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8016162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016164:	693b      	ldr	r3, [r7, #16]
 8016166:	3301      	adds	r3, #1
 8016168:	613b      	str	r3, [r7, #16]
 801616a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801616e:	461a      	mov	r2, r3
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	4293      	cmp	r3, r2
 8016174:	d3b5      	bcc.n	80160e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801617c:	691b      	ldr	r3, [r3, #16]
 801617e:	68fa      	ldr	r2, [r7, #12]
 8016180:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016184:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016188:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2200      	movs	r2, #0
 801618e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8016196:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8016198:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801619c:	2b00      	cmp	r3, #0
 801619e:	d105      	bne.n	80161ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	699b      	ldr	r3, [r3, #24]
 80161a4:	f043 0210 	orr.w	r2, r3, #16
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	699a      	ldr	r2, [r3, #24]
 80161b0:	4b0f      	ldr	r3, [pc, #60]	@ (80161f0 <USB_DevInit+0x2b4>)
 80161b2:	4313      	orrs	r3, r2
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80161b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d005      	beq.n	80161cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	699b      	ldr	r3, [r3, #24]
 80161c4:	f043 0208 	orr.w	r2, r3, #8
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80161cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80161d0:	2b01      	cmp	r3, #1
 80161d2:	d105      	bne.n	80161e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	699a      	ldr	r2, [r3, #24]
 80161d8:	4b06      	ldr	r3, [pc, #24]	@ (80161f4 <USB_DevInit+0x2b8>)
 80161da:	4313      	orrs	r3, r2
 80161dc:	687a      	ldr	r2, [r7, #4]
 80161de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80161e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80161e2:	4618      	mov	r0, r3
 80161e4:	3718      	adds	r7, #24
 80161e6:	46bd      	mov	sp, r7
 80161e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80161ec:	b004      	add	sp, #16
 80161ee:	4770      	bx	lr
 80161f0:	803c3800 	.word	0x803c3800
 80161f4:	40000004 	.word	0x40000004

080161f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b085      	sub	sp, #20
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016202:	2300      	movs	r3, #0
 8016204:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	3301      	adds	r3, #1
 801620a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016212:	d901      	bls.n	8016218 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8016214:	2303      	movs	r3, #3
 8016216:	e01b      	b.n	8016250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	691b      	ldr	r3, [r3, #16]
 801621c:	2b00      	cmp	r3, #0
 801621e:	daf2      	bge.n	8016206 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8016220:	2300      	movs	r3, #0
 8016222:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016224:	683b      	ldr	r3, [r7, #0]
 8016226:	019b      	lsls	r3, r3, #6
 8016228:	f043 0220 	orr.w	r2, r3, #32
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	3301      	adds	r3, #1
 8016234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801623c:	d901      	bls.n	8016242 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801623e:	2303      	movs	r3, #3
 8016240:	e006      	b.n	8016250 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	691b      	ldr	r3, [r3, #16]
 8016246:	f003 0320 	and.w	r3, r3, #32
 801624a:	2b20      	cmp	r3, #32
 801624c:	d0f0      	beq.n	8016230 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801624e:	2300      	movs	r3, #0
}
 8016250:	4618      	mov	r0, r3
 8016252:	3714      	adds	r7, #20
 8016254:	46bd      	mov	sp, r7
 8016256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625a:	4770      	bx	lr

0801625c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801625c:	b480      	push	{r7}
 801625e:	b085      	sub	sp, #20
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016264:	2300      	movs	r3, #0
 8016266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	3301      	adds	r3, #1
 801626c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016274:	d901      	bls.n	801627a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8016276:	2303      	movs	r3, #3
 8016278:	e018      	b.n	80162ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	691b      	ldr	r3, [r3, #16]
 801627e:	2b00      	cmp	r3, #0
 8016280:	daf2      	bge.n	8016268 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016282:	2300      	movs	r3, #0
 8016284:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2210      	movs	r2, #16
 801628a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	3301      	adds	r3, #1
 8016290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8016298:	d901      	bls.n	801629e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801629a:	2303      	movs	r3, #3
 801629c:	e006      	b.n	80162ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	691b      	ldr	r3, [r3, #16]
 80162a2:	f003 0310 	and.w	r3, r3, #16
 80162a6:	2b10      	cmp	r3, #16
 80162a8:	d0f0      	beq.n	801628c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80162aa:	2300      	movs	r3, #0
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3714      	adds	r7, #20
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr

080162b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80162b8:	b480      	push	{r7}
 80162ba:	b085      	sub	sp, #20
 80162bc:	af00      	add	r7, sp, #0
 80162be:	6078      	str	r0, [r7, #4]
 80162c0:	460b      	mov	r3, r1
 80162c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80162ce:	681a      	ldr	r2, [r3, #0]
 80162d0:	78fb      	ldrb	r3, [r7, #3]
 80162d2:	68f9      	ldr	r1, [r7, #12]
 80162d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80162d8:	4313      	orrs	r3, r2
 80162da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80162dc:	2300      	movs	r3, #0
}
 80162de:	4618      	mov	r0, r3
 80162e0:	3714      	adds	r7, #20
 80162e2:	46bd      	mov	sp, r7
 80162e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e8:	4770      	bx	lr

080162ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80162ea:	b480      	push	{r7}
 80162ec:	b087      	sub	sp, #28
 80162ee:	af00      	add	r7, sp, #0
 80162f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80162fc:	689b      	ldr	r3, [r3, #8]
 80162fe:	f003 0306 	and.w	r3, r3, #6
 8016302:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d102      	bne.n	8016310 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801630a:	2300      	movs	r3, #0
 801630c:	75fb      	strb	r3, [r7, #23]
 801630e:	e00a      	b.n	8016326 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	2b02      	cmp	r3, #2
 8016314:	d002      	beq.n	801631c <USB_GetDevSpeed+0x32>
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	2b06      	cmp	r3, #6
 801631a:	d102      	bne.n	8016322 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801631c:	2302      	movs	r3, #2
 801631e:	75fb      	strb	r3, [r7, #23]
 8016320:	e001      	b.n	8016326 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8016322:	230f      	movs	r3, #15
 8016324:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8016326:	7dfb      	ldrb	r3, [r7, #23]
}
 8016328:	4618      	mov	r0, r3
 801632a:	371c      	adds	r7, #28
 801632c:	46bd      	mov	sp, r7
 801632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016332:	4770      	bx	lr

08016334 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016334:	b480      	push	{r7}
 8016336:	b085      	sub	sp, #20
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
 801633c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	785b      	ldrb	r3, [r3, #1]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d139      	bne.n	80163c4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016356:	69da      	ldr	r2, [r3, #28]
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	781b      	ldrb	r3, [r3, #0]
 801635c:	f003 030f 	and.w	r3, r3, #15
 8016360:	2101      	movs	r1, #1
 8016362:	fa01 f303 	lsl.w	r3, r1, r3
 8016366:	b29b      	uxth	r3, r3
 8016368:	68f9      	ldr	r1, [r7, #12]
 801636a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801636e:	4313      	orrs	r3, r2
 8016370:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	015a      	lsls	r2, r3, #5
 8016376:	68fb      	ldr	r3, [r7, #12]
 8016378:	4413      	add	r3, r2
 801637a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016384:	2b00      	cmp	r3, #0
 8016386:	d153      	bne.n	8016430 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	015a      	lsls	r2, r3, #5
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	4413      	add	r3, r2
 8016390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016394:	681a      	ldr	r2, [r3, #0]
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	689b      	ldr	r3, [r3, #8]
 801639a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801639e:	683b      	ldr	r3, [r7, #0]
 80163a0:	791b      	ldrb	r3, [r3, #4]
 80163a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80163a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	059b      	lsls	r3, r3, #22
 80163aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80163ac:	431a      	orrs	r2, r3
 80163ae:	68bb      	ldr	r3, [r7, #8]
 80163b0:	0159      	lsls	r1, r3, #5
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	440b      	add	r3, r1
 80163b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80163ba:	4619      	mov	r1, r3
 80163bc:	4b20      	ldr	r3, [pc, #128]	@ (8016440 <USB_ActivateEndpoint+0x10c>)
 80163be:	4313      	orrs	r3, r2
 80163c0:	600b      	str	r3, [r1, #0]
 80163c2:	e035      	b.n	8016430 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80163ca:	69da      	ldr	r2, [r3, #28]
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	781b      	ldrb	r3, [r3, #0]
 80163d0:	f003 030f 	and.w	r3, r3, #15
 80163d4:	2101      	movs	r1, #1
 80163d6:	fa01 f303 	lsl.w	r3, r1, r3
 80163da:	041b      	lsls	r3, r3, #16
 80163dc:	68f9      	ldr	r1, [r7, #12]
 80163de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80163e2:	4313      	orrs	r3, r2
 80163e4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	015a      	lsls	r2, r3, #5
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	4413      	add	r3, r2
 80163ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d119      	bne.n	8016430 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80163fc:	68bb      	ldr	r3, [r7, #8]
 80163fe:	015a      	lsls	r2, r3, #5
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	4413      	add	r3, r2
 8016404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016408:	681a      	ldr	r2, [r3, #0]
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	689b      	ldr	r3, [r3, #8]
 801640e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	791b      	ldrb	r3, [r3, #4]
 8016416:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8016418:	430b      	orrs	r3, r1
 801641a:	431a      	orrs	r2, r3
 801641c:	68bb      	ldr	r3, [r7, #8]
 801641e:	0159      	lsls	r1, r3, #5
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	440b      	add	r3, r1
 8016424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016428:	4619      	mov	r1, r3
 801642a:	4b05      	ldr	r3, [pc, #20]	@ (8016440 <USB_ActivateEndpoint+0x10c>)
 801642c:	4313      	orrs	r3, r2
 801642e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016430:	2300      	movs	r3, #0
}
 8016432:	4618      	mov	r0, r3
 8016434:	3714      	adds	r7, #20
 8016436:	46bd      	mov	sp, r7
 8016438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643c:	4770      	bx	lr
 801643e:	bf00      	nop
 8016440:	10008000 	.word	0x10008000

08016444 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016444:	b480      	push	{r7}
 8016446:	b085      	sub	sp, #20
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
 801644c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	781b      	ldrb	r3, [r3, #0]
 8016456:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8016458:	683b      	ldr	r3, [r7, #0]
 801645a:	785b      	ldrb	r3, [r3, #1]
 801645c:	2b01      	cmp	r3, #1
 801645e:	d161      	bne.n	8016524 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	015a      	lsls	r2, r3, #5
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	4413      	add	r3, r2
 8016468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016472:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016476:	d11f      	bne.n	80164b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	015a      	lsls	r2, r3, #5
 801647c:	68fb      	ldr	r3, [r7, #12]
 801647e:	4413      	add	r3, r2
 8016480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	68ba      	ldr	r2, [r7, #8]
 8016488:	0151      	lsls	r1, r2, #5
 801648a:	68fa      	ldr	r2, [r7, #12]
 801648c:	440a      	add	r2, r1
 801648e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016492:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016496:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	015a      	lsls	r2, r3, #5
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	4413      	add	r3, r2
 80164a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	68ba      	ldr	r2, [r7, #8]
 80164a8:	0151      	lsls	r1, r2, #5
 80164aa:	68fa      	ldr	r2, [r7, #12]
 80164ac:	440a      	add	r2, r1
 80164ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80164b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80164b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80164c0:	683b      	ldr	r3, [r7, #0]
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	f003 030f 	and.w	r3, r3, #15
 80164c8:	2101      	movs	r1, #1
 80164ca:	fa01 f303 	lsl.w	r3, r1, r3
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	43db      	mvns	r3, r3
 80164d2:	68f9      	ldr	r1, [r7, #12]
 80164d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80164d8:	4013      	ands	r3, r2
 80164da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80164e2:	69da      	ldr	r2, [r3, #28]
 80164e4:	683b      	ldr	r3, [r7, #0]
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	f003 030f 	and.w	r3, r3, #15
 80164ec:	2101      	movs	r1, #1
 80164ee:	fa01 f303 	lsl.w	r3, r1, r3
 80164f2:	b29b      	uxth	r3, r3
 80164f4:	43db      	mvns	r3, r3
 80164f6:	68f9      	ldr	r1, [r7, #12]
 80164f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80164fc:	4013      	ands	r3, r2
 80164fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016500:	68bb      	ldr	r3, [r7, #8]
 8016502:	015a      	lsls	r2, r3, #5
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	4413      	add	r3, r2
 8016508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801650c:	681a      	ldr	r2, [r3, #0]
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	0159      	lsls	r1, r3, #5
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	440b      	add	r3, r1
 8016516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801651a:	4619      	mov	r1, r3
 801651c:	4b35      	ldr	r3, [pc, #212]	@ (80165f4 <USB_DeactivateEndpoint+0x1b0>)
 801651e:	4013      	ands	r3, r2
 8016520:	600b      	str	r3, [r1, #0]
 8016522:	e060      	b.n	80165e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	015a      	lsls	r2, r3, #5
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	4413      	add	r3, r2
 801652c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016536:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801653a:	d11f      	bne.n	801657c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801653c:	68bb      	ldr	r3, [r7, #8]
 801653e:	015a      	lsls	r2, r3, #5
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	4413      	add	r3, r2
 8016544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	68ba      	ldr	r2, [r7, #8]
 801654c:	0151      	lsls	r1, r2, #5
 801654e:	68fa      	ldr	r2, [r7, #12]
 8016550:	440a      	add	r2, r1
 8016552:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016556:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801655a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	015a      	lsls	r2, r3, #5
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	4413      	add	r3, r2
 8016564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	68ba      	ldr	r2, [r7, #8]
 801656c:	0151      	lsls	r1, r2, #5
 801656e:	68fa      	ldr	r2, [r7, #12]
 8016570:	440a      	add	r2, r1
 8016572:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016576:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801657a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	f003 030f 	and.w	r3, r3, #15
 801658c:	2101      	movs	r1, #1
 801658e:	fa01 f303 	lsl.w	r3, r1, r3
 8016592:	041b      	lsls	r3, r3, #16
 8016594:	43db      	mvns	r3, r3
 8016596:	68f9      	ldr	r1, [r7, #12]
 8016598:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801659c:	4013      	ands	r3, r2
 801659e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80165a6:	69da      	ldr	r2, [r3, #28]
 80165a8:	683b      	ldr	r3, [r7, #0]
 80165aa:	781b      	ldrb	r3, [r3, #0]
 80165ac:	f003 030f 	and.w	r3, r3, #15
 80165b0:	2101      	movs	r1, #1
 80165b2:	fa01 f303 	lsl.w	r3, r1, r3
 80165b6:	041b      	lsls	r3, r3, #16
 80165b8:	43db      	mvns	r3, r3
 80165ba:	68f9      	ldr	r1, [r7, #12]
 80165bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80165c0:	4013      	ands	r3, r2
 80165c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80165c4:	68bb      	ldr	r3, [r7, #8]
 80165c6:	015a      	lsls	r2, r3, #5
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	4413      	add	r3, r2
 80165cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	0159      	lsls	r1, r3, #5
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	440b      	add	r3, r1
 80165da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80165de:	4619      	mov	r1, r3
 80165e0:	4b05      	ldr	r3, [pc, #20]	@ (80165f8 <USB_DeactivateEndpoint+0x1b4>)
 80165e2:	4013      	ands	r3, r2
 80165e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80165e6:	2300      	movs	r3, #0
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3714      	adds	r7, #20
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr
 80165f4:	ec337800 	.word	0xec337800
 80165f8:	eff37800 	.word	0xeff37800

080165fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b08a      	sub	sp, #40	@ 0x28
 8016600:	af02      	add	r7, sp, #8
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	4613      	mov	r3, r2
 8016608:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	781b      	ldrb	r3, [r3, #0]
 8016612:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	785b      	ldrb	r3, [r3, #1]
 8016618:	2b01      	cmp	r3, #1
 801661a:	f040 8185 	bne.w	8016928 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801661e:	68bb      	ldr	r3, [r7, #8]
 8016620:	691b      	ldr	r3, [r3, #16]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d132      	bne.n	801668c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016626:	69bb      	ldr	r3, [r7, #24]
 8016628:	015a      	lsls	r2, r3, #5
 801662a:	69fb      	ldr	r3, [r7, #28]
 801662c:	4413      	add	r3, r2
 801662e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016632:	691a      	ldr	r2, [r3, #16]
 8016634:	69bb      	ldr	r3, [r7, #24]
 8016636:	0159      	lsls	r1, r3, #5
 8016638:	69fb      	ldr	r3, [r7, #28]
 801663a:	440b      	add	r3, r1
 801663c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016640:	4619      	mov	r1, r3
 8016642:	4ba7      	ldr	r3, [pc, #668]	@ (80168e0 <USB_EPStartXfer+0x2e4>)
 8016644:	4013      	ands	r3, r2
 8016646:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016648:	69bb      	ldr	r3, [r7, #24]
 801664a:	015a      	lsls	r2, r3, #5
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	4413      	add	r3, r2
 8016650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016654:	691b      	ldr	r3, [r3, #16]
 8016656:	69ba      	ldr	r2, [r7, #24]
 8016658:	0151      	lsls	r1, r2, #5
 801665a:	69fa      	ldr	r2, [r7, #28]
 801665c:	440a      	add	r2, r1
 801665e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016662:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016668:	69bb      	ldr	r3, [r7, #24]
 801666a:	015a      	lsls	r2, r3, #5
 801666c:	69fb      	ldr	r3, [r7, #28]
 801666e:	4413      	add	r3, r2
 8016670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016674:	691a      	ldr	r2, [r3, #16]
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	0159      	lsls	r1, r3, #5
 801667a:	69fb      	ldr	r3, [r7, #28]
 801667c:	440b      	add	r3, r1
 801667e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016682:	4619      	mov	r1, r3
 8016684:	4b97      	ldr	r3, [pc, #604]	@ (80168e4 <USB_EPStartXfer+0x2e8>)
 8016686:	4013      	ands	r3, r2
 8016688:	610b      	str	r3, [r1, #16]
 801668a:	e097      	b.n	80167bc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	015a      	lsls	r2, r3, #5
 8016690:	69fb      	ldr	r3, [r7, #28]
 8016692:	4413      	add	r3, r2
 8016694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016698:	691a      	ldr	r2, [r3, #16]
 801669a:	69bb      	ldr	r3, [r7, #24]
 801669c:	0159      	lsls	r1, r3, #5
 801669e:	69fb      	ldr	r3, [r7, #28]
 80166a0:	440b      	add	r3, r1
 80166a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166a6:	4619      	mov	r1, r3
 80166a8:	4b8e      	ldr	r3, [pc, #568]	@ (80168e4 <USB_EPStartXfer+0x2e8>)
 80166aa:	4013      	ands	r3, r2
 80166ac:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80166ae:	69bb      	ldr	r3, [r7, #24]
 80166b0:	015a      	lsls	r2, r3, #5
 80166b2:	69fb      	ldr	r3, [r7, #28]
 80166b4:	4413      	add	r3, r2
 80166b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166ba:	691a      	ldr	r2, [r3, #16]
 80166bc:	69bb      	ldr	r3, [r7, #24]
 80166be:	0159      	lsls	r1, r3, #5
 80166c0:	69fb      	ldr	r3, [r7, #28]
 80166c2:	440b      	add	r3, r1
 80166c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166c8:	4619      	mov	r1, r3
 80166ca:	4b85      	ldr	r3, [pc, #532]	@ (80168e0 <USB_EPStartXfer+0x2e4>)
 80166cc:	4013      	ands	r3, r2
 80166ce:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80166d0:	69bb      	ldr	r3, [r7, #24]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d11a      	bne.n	801670c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	691a      	ldr	r2, [r3, #16]
 80166da:	68bb      	ldr	r3, [r7, #8]
 80166dc:	689b      	ldr	r3, [r3, #8]
 80166de:	429a      	cmp	r2, r3
 80166e0:	d903      	bls.n	80166ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80166e2:	68bb      	ldr	r3, [r7, #8]
 80166e4:	689a      	ldr	r2, [r3, #8]
 80166e6:	68bb      	ldr	r3, [r7, #8]
 80166e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80166ea:	69bb      	ldr	r3, [r7, #24]
 80166ec:	015a      	lsls	r2, r3, #5
 80166ee:	69fb      	ldr	r3, [r7, #28]
 80166f0:	4413      	add	r3, r2
 80166f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80166f6:	691b      	ldr	r3, [r3, #16]
 80166f8:	69ba      	ldr	r2, [r7, #24]
 80166fa:	0151      	lsls	r1, r2, #5
 80166fc:	69fa      	ldr	r2, [r7, #28]
 80166fe:	440a      	add	r2, r1
 8016700:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016704:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016708:	6113      	str	r3, [r2, #16]
 801670a:	e044      	b.n	8016796 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801670c:	68bb      	ldr	r3, [r7, #8]
 801670e:	691a      	ldr	r2, [r3, #16]
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	689b      	ldr	r3, [r3, #8]
 8016714:	4413      	add	r3, r2
 8016716:	1e5a      	subs	r2, r3, #1
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	689b      	ldr	r3, [r3, #8]
 801671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8016720:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8016722:	69bb      	ldr	r3, [r7, #24]
 8016724:	015a      	lsls	r2, r3, #5
 8016726:	69fb      	ldr	r3, [r7, #28]
 8016728:	4413      	add	r3, r2
 801672a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801672e:	691a      	ldr	r2, [r3, #16]
 8016730:	8afb      	ldrh	r3, [r7, #22]
 8016732:	04d9      	lsls	r1, r3, #19
 8016734:	4b6c      	ldr	r3, [pc, #432]	@ (80168e8 <USB_EPStartXfer+0x2ec>)
 8016736:	400b      	ands	r3, r1
 8016738:	69b9      	ldr	r1, [r7, #24]
 801673a:	0148      	lsls	r0, r1, #5
 801673c:	69f9      	ldr	r1, [r7, #28]
 801673e:	4401      	add	r1, r0
 8016740:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016744:	4313      	orrs	r3, r2
 8016746:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8016748:	68bb      	ldr	r3, [r7, #8]
 801674a:	791b      	ldrb	r3, [r3, #4]
 801674c:	2b01      	cmp	r3, #1
 801674e:	d122      	bne.n	8016796 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016750:	69bb      	ldr	r3, [r7, #24]
 8016752:	015a      	lsls	r2, r3, #5
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	4413      	add	r3, r2
 8016758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801675c:	691b      	ldr	r3, [r3, #16]
 801675e:	69ba      	ldr	r2, [r7, #24]
 8016760:	0151      	lsls	r1, r2, #5
 8016762:	69fa      	ldr	r2, [r7, #28]
 8016764:	440a      	add	r2, r1
 8016766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801676a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801676e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8016770:	69bb      	ldr	r3, [r7, #24]
 8016772:	015a      	lsls	r2, r3, #5
 8016774:	69fb      	ldr	r3, [r7, #28]
 8016776:	4413      	add	r3, r2
 8016778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801677c:	691a      	ldr	r2, [r3, #16]
 801677e:	8afb      	ldrh	r3, [r7, #22]
 8016780:	075b      	lsls	r3, r3, #29
 8016782:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8016786:	69b9      	ldr	r1, [r7, #24]
 8016788:	0148      	lsls	r0, r1, #5
 801678a:	69f9      	ldr	r1, [r7, #28]
 801678c:	4401      	add	r1, r0
 801678e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8016792:	4313      	orrs	r3, r2
 8016794:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016796:	69bb      	ldr	r3, [r7, #24]
 8016798:	015a      	lsls	r2, r3, #5
 801679a:	69fb      	ldr	r3, [r7, #28]
 801679c:	4413      	add	r3, r2
 801679e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167a2:	691a      	ldr	r2, [r3, #16]
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	691b      	ldr	r3, [r3, #16]
 80167a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80167ac:	69b9      	ldr	r1, [r7, #24]
 80167ae:	0148      	lsls	r0, r1, #5
 80167b0:	69f9      	ldr	r1, [r7, #28]
 80167b2:	4401      	add	r1, r0
 80167b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80167b8:	4313      	orrs	r3, r2
 80167ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80167bc:	79fb      	ldrb	r3, [r7, #7]
 80167be:	2b01      	cmp	r3, #1
 80167c0:	d14b      	bne.n	801685a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	69db      	ldr	r3, [r3, #28]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d009      	beq.n	80167de <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80167ca:	69bb      	ldr	r3, [r7, #24]
 80167cc:	015a      	lsls	r2, r3, #5
 80167ce:	69fb      	ldr	r3, [r7, #28]
 80167d0:	4413      	add	r3, r2
 80167d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80167d6:	461a      	mov	r2, r3
 80167d8:	68bb      	ldr	r3, [r7, #8]
 80167da:	69db      	ldr	r3, [r3, #28]
 80167dc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80167de:	68bb      	ldr	r3, [r7, #8]
 80167e0:	791b      	ldrb	r3, [r3, #4]
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d128      	bne.n	8016838 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80167ec:	689b      	ldr	r3, [r3, #8]
 80167ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d110      	bne.n	8016818 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80167f6:	69bb      	ldr	r3, [r7, #24]
 80167f8:	015a      	lsls	r2, r3, #5
 80167fa:	69fb      	ldr	r3, [r7, #28]
 80167fc:	4413      	add	r3, r2
 80167fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	69ba      	ldr	r2, [r7, #24]
 8016806:	0151      	lsls	r1, r2, #5
 8016808:	69fa      	ldr	r2, [r7, #28]
 801680a:	440a      	add	r2, r1
 801680c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016810:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016814:	6013      	str	r3, [r2, #0]
 8016816:	e00f      	b.n	8016838 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016818:	69bb      	ldr	r3, [r7, #24]
 801681a:	015a      	lsls	r2, r3, #5
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	4413      	add	r3, r2
 8016820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	69ba      	ldr	r2, [r7, #24]
 8016828:	0151      	lsls	r1, r2, #5
 801682a:	69fa      	ldr	r2, [r7, #28]
 801682c:	440a      	add	r2, r1
 801682e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016836:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016838:	69bb      	ldr	r3, [r7, #24]
 801683a:	015a      	lsls	r2, r3, #5
 801683c:	69fb      	ldr	r3, [r7, #28]
 801683e:	4413      	add	r3, r2
 8016840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	69ba      	ldr	r2, [r7, #24]
 8016848:	0151      	lsls	r1, r2, #5
 801684a:	69fa      	ldr	r2, [r7, #28]
 801684c:	440a      	add	r2, r1
 801684e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016852:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016856:	6013      	str	r3, [r2, #0]
 8016858:	e169      	b.n	8016b2e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801685a:	69bb      	ldr	r3, [r7, #24]
 801685c:	015a      	lsls	r2, r3, #5
 801685e:	69fb      	ldr	r3, [r7, #28]
 8016860:	4413      	add	r3, r2
 8016862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	69ba      	ldr	r2, [r7, #24]
 801686a:	0151      	lsls	r1, r2, #5
 801686c:	69fa      	ldr	r2, [r7, #28]
 801686e:	440a      	add	r2, r1
 8016870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016874:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016878:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	791b      	ldrb	r3, [r3, #4]
 801687e:	2b01      	cmp	r3, #1
 8016880:	d015      	beq.n	80168ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8016882:	68bb      	ldr	r3, [r7, #8]
 8016884:	691b      	ldr	r3, [r3, #16]
 8016886:	2b00      	cmp	r3, #0
 8016888:	f000 8151 	beq.w	8016b2e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801688c:	69fb      	ldr	r3, [r7, #28]
 801688e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016894:	68bb      	ldr	r3, [r7, #8]
 8016896:	781b      	ldrb	r3, [r3, #0]
 8016898:	f003 030f 	and.w	r3, r3, #15
 801689c:	2101      	movs	r1, #1
 801689e:	fa01 f303 	lsl.w	r3, r1, r3
 80168a2:	69f9      	ldr	r1, [r7, #28]
 80168a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80168a8:	4313      	orrs	r3, r2
 80168aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80168ac:	e13f      	b.n	8016b2e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80168ae:	69fb      	ldr	r3, [r7, #28]
 80168b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80168b4:	689b      	ldr	r3, [r3, #8]
 80168b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d116      	bne.n	80168ec <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80168be:	69bb      	ldr	r3, [r7, #24]
 80168c0:	015a      	lsls	r2, r3, #5
 80168c2:	69fb      	ldr	r3, [r7, #28]
 80168c4:	4413      	add	r3, r2
 80168c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	69ba      	ldr	r2, [r7, #24]
 80168ce:	0151      	lsls	r1, r2, #5
 80168d0:	69fa      	ldr	r2, [r7, #28]
 80168d2:	440a      	add	r2, r1
 80168d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80168d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80168dc:	6013      	str	r3, [r2, #0]
 80168de:	e015      	b.n	801690c <USB_EPStartXfer+0x310>
 80168e0:	e007ffff 	.word	0xe007ffff
 80168e4:	fff80000 	.word	0xfff80000
 80168e8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80168ec:	69bb      	ldr	r3, [r7, #24]
 80168ee:	015a      	lsls	r2, r3, #5
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	4413      	add	r3, r2
 80168f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	69ba      	ldr	r2, [r7, #24]
 80168fc:	0151      	lsls	r1, r2, #5
 80168fe:	69fa      	ldr	r2, [r7, #28]
 8016900:	440a      	add	r2, r1
 8016902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801690a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801690c:	68bb      	ldr	r3, [r7, #8]
 801690e:	68d9      	ldr	r1, [r3, #12]
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	781a      	ldrb	r2, [r3, #0]
 8016914:	68bb      	ldr	r3, [r7, #8]
 8016916:	691b      	ldr	r3, [r3, #16]
 8016918:	b298      	uxth	r0, r3
 801691a:	79fb      	ldrb	r3, [r7, #7]
 801691c:	9300      	str	r3, [sp, #0]
 801691e:	4603      	mov	r3, r0
 8016920:	68f8      	ldr	r0, [r7, #12]
 8016922:	f000 f9b9 	bl	8016c98 <USB_WritePacket>
 8016926:	e102      	b.n	8016b2e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016928:	69bb      	ldr	r3, [r7, #24]
 801692a:	015a      	lsls	r2, r3, #5
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	4413      	add	r3, r2
 8016930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016934:	691a      	ldr	r2, [r3, #16]
 8016936:	69bb      	ldr	r3, [r7, #24]
 8016938:	0159      	lsls	r1, r3, #5
 801693a:	69fb      	ldr	r3, [r7, #28]
 801693c:	440b      	add	r3, r1
 801693e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016942:	4619      	mov	r1, r3
 8016944:	4b7c      	ldr	r3, [pc, #496]	@ (8016b38 <USB_EPStartXfer+0x53c>)
 8016946:	4013      	ands	r3, r2
 8016948:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801694a:	69bb      	ldr	r3, [r7, #24]
 801694c:	015a      	lsls	r2, r3, #5
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	4413      	add	r3, r2
 8016952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016956:	691a      	ldr	r2, [r3, #16]
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	0159      	lsls	r1, r3, #5
 801695c:	69fb      	ldr	r3, [r7, #28]
 801695e:	440b      	add	r3, r1
 8016960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016964:	4619      	mov	r1, r3
 8016966:	4b75      	ldr	r3, [pc, #468]	@ (8016b3c <USB_EPStartXfer+0x540>)
 8016968:	4013      	ands	r3, r2
 801696a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d12f      	bne.n	80169d2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8016972:	68bb      	ldr	r3, [r7, #8]
 8016974:	691b      	ldr	r3, [r3, #16]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d003      	beq.n	8016982 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 801697a:	68bb      	ldr	r3, [r7, #8]
 801697c:	689a      	ldr	r2, [r3, #8]
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8016982:	68bb      	ldr	r3, [r7, #8]
 8016984:	689a      	ldr	r2, [r3, #8]
 8016986:	68bb      	ldr	r3, [r7, #8]
 8016988:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801698a:	69bb      	ldr	r3, [r7, #24]
 801698c:	015a      	lsls	r2, r3, #5
 801698e:	69fb      	ldr	r3, [r7, #28]
 8016990:	4413      	add	r3, r2
 8016992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016996:	691a      	ldr	r2, [r3, #16]
 8016998:	68bb      	ldr	r3, [r7, #8]
 801699a:	6a1b      	ldr	r3, [r3, #32]
 801699c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80169a0:	69b9      	ldr	r1, [r7, #24]
 80169a2:	0148      	lsls	r0, r1, #5
 80169a4:	69f9      	ldr	r1, [r7, #28]
 80169a6:	4401      	add	r1, r0
 80169a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80169ac:	4313      	orrs	r3, r2
 80169ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80169b0:	69bb      	ldr	r3, [r7, #24]
 80169b2:	015a      	lsls	r2, r3, #5
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	4413      	add	r3, r2
 80169b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80169bc:	691b      	ldr	r3, [r3, #16]
 80169be:	69ba      	ldr	r2, [r7, #24]
 80169c0:	0151      	lsls	r1, r2, #5
 80169c2:	69fa      	ldr	r2, [r7, #28]
 80169c4:	440a      	add	r2, r1
 80169c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80169ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80169ce:	6113      	str	r3, [r2, #16]
 80169d0:	e05f      	b.n	8016a92 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80169d2:	68bb      	ldr	r3, [r7, #8]
 80169d4:	691b      	ldr	r3, [r3, #16]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d123      	bne.n	8016a22 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80169da:	69bb      	ldr	r3, [r7, #24]
 80169dc:	015a      	lsls	r2, r3, #5
 80169de:	69fb      	ldr	r3, [r7, #28]
 80169e0:	4413      	add	r3, r2
 80169e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80169e6:	691a      	ldr	r2, [r3, #16]
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	689b      	ldr	r3, [r3, #8]
 80169ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80169f0:	69b9      	ldr	r1, [r7, #24]
 80169f2:	0148      	lsls	r0, r1, #5
 80169f4:	69f9      	ldr	r1, [r7, #28]
 80169f6:	4401      	add	r1, r0
 80169f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80169fc:	4313      	orrs	r3, r2
 80169fe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016a00:	69bb      	ldr	r3, [r7, #24]
 8016a02:	015a      	lsls	r2, r3, #5
 8016a04:	69fb      	ldr	r3, [r7, #28]
 8016a06:	4413      	add	r3, r2
 8016a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a0c:	691b      	ldr	r3, [r3, #16]
 8016a0e:	69ba      	ldr	r2, [r7, #24]
 8016a10:	0151      	lsls	r1, r2, #5
 8016a12:	69fa      	ldr	r2, [r7, #28]
 8016a14:	440a      	add	r2, r1
 8016a16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016a1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8016a1e:	6113      	str	r3, [r2, #16]
 8016a20:	e037      	b.n	8016a92 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	691a      	ldr	r2, [r3, #16]
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	689b      	ldr	r3, [r3, #8]
 8016a2a:	4413      	add	r3, r2
 8016a2c:	1e5a      	subs	r2, r3, #1
 8016a2e:	68bb      	ldr	r3, [r7, #8]
 8016a30:	689b      	ldr	r3, [r3, #8]
 8016a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8016a36:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	689b      	ldr	r3, [r3, #8]
 8016a3c:	8afa      	ldrh	r2, [r7, #22]
 8016a3e:	fb03 f202 	mul.w	r2, r3, r2
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	015a      	lsls	r2, r3, #5
 8016a4a:	69fb      	ldr	r3, [r7, #28]
 8016a4c:	4413      	add	r3, r2
 8016a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a52:	691a      	ldr	r2, [r3, #16]
 8016a54:	8afb      	ldrh	r3, [r7, #22]
 8016a56:	04d9      	lsls	r1, r3, #19
 8016a58:	4b39      	ldr	r3, [pc, #228]	@ (8016b40 <USB_EPStartXfer+0x544>)
 8016a5a:	400b      	ands	r3, r1
 8016a5c:	69b9      	ldr	r1, [r7, #24]
 8016a5e:	0148      	lsls	r0, r1, #5
 8016a60:	69f9      	ldr	r1, [r7, #28]
 8016a62:	4401      	add	r1, r0
 8016a64:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016a68:	4313      	orrs	r3, r2
 8016a6a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016a6c:	69bb      	ldr	r3, [r7, #24]
 8016a6e:	015a      	lsls	r2, r3, #5
 8016a70:	69fb      	ldr	r3, [r7, #28]
 8016a72:	4413      	add	r3, r2
 8016a74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016a78:	691a      	ldr	r2, [r3, #16]
 8016a7a:	68bb      	ldr	r3, [r7, #8]
 8016a7c:	6a1b      	ldr	r3, [r3, #32]
 8016a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016a82:	69b9      	ldr	r1, [r7, #24]
 8016a84:	0148      	lsls	r0, r1, #5
 8016a86:	69f9      	ldr	r1, [r7, #28]
 8016a88:	4401      	add	r1, r0
 8016a8a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8016a8e:	4313      	orrs	r3, r2
 8016a90:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8016a92:	79fb      	ldrb	r3, [r7, #7]
 8016a94:	2b01      	cmp	r3, #1
 8016a96:	d10d      	bne.n	8016ab4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8016a98:	68bb      	ldr	r3, [r7, #8]
 8016a9a:	68db      	ldr	r3, [r3, #12]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d009      	beq.n	8016ab4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8016aa0:	68bb      	ldr	r3, [r7, #8]
 8016aa2:	68d9      	ldr	r1, [r3, #12]
 8016aa4:	69bb      	ldr	r3, [r7, #24]
 8016aa6:	015a      	lsls	r2, r3, #5
 8016aa8:	69fb      	ldr	r3, [r7, #28]
 8016aaa:	4413      	add	r3, r2
 8016aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ab0:	460a      	mov	r2, r1
 8016ab2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	791b      	ldrb	r3, [r3, #4]
 8016ab8:	2b01      	cmp	r3, #1
 8016aba:	d128      	bne.n	8016b0e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016abc:	69fb      	ldr	r3, [r7, #28]
 8016abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016ac2:	689b      	ldr	r3, [r3, #8]
 8016ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d110      	bne.n	8016aee <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016acc:	69bb      	ldr	r3, [r7, #24]
 8016ace:	015a      	lsls	r2, r3, #5
 8016ad0:	69fb      	ldr	r3, [r7, #28]
 8016ad2:	4413      	add	r3, r2
 8016ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	69ba      	ldr	r2, [r7, #24]
 8016adc:	0151      	lsls	r1, r2, #5
 8016ade:	69fa      	ldr	r2, [r7, #28]
 8016ae0:	440a      	add	r2, r1
 8016ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016ae6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8016aea:	6013      	str	r3, [r2, #0]
 8016aec:	e00f      	b.n	8016b0e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8016aee:	69bb      	ldr	r3, [r7, #24]
 8016af0:	015a      	lsls	r2, r3, #5
 8016af2:	69fb      	ldr	r3, [r7, #28]
 8016af4:	4413      	add	r3, r2
 8016af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016afa:	681b      	ldr	r3, [r3, #0]
 8016afc:	69ba      	ldr	r2, [r7, #24]
 8016afe:	0151      	lsls	r1, r2, #5
 8016b00:	69fa      	ldr	r2, [r7, #28]
 8016b02:	440a      	add	r2, r1
 8016b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016b0c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016b0e:	69bb      	ldr	r3, [r7, #24]
 8016b10:	015a      	lsls	r2, r3, #5
 8016b12:	69fb      	ldr	r3, [r7, #28]
 8016b14:	4413      	add	r3, r2
 8016b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	69ba      	ldr	r2, [r7, #24]
 8016b1e:	0151      	lsls	r1, r2, #5
 8016b20:	69fa      	ldr	r2, [r7, #28]
 8016b22:	440a      	add	r2, r1
 8016b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016b28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8016b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016b2e:	2300      	movs	r3, #0
}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3720      	adds	r7, #32
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}
 8016b38:	fff80000 	.word	0xfff80000
 8016b3c:	e007ffff 	.word	0xe007ffff
 8016b40:	1ff80000 	.word	0x1ff80000

08016b44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016b44:	b480      	push	{r7}
 8016b46:	b087      	sub	sp, #28
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
 8016b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016b4e:	2300      	movs	r3, #0
 8016b50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8016b52:	2300      	movs	r3, #0
 8016b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	785b      	ldrb	r3, [r3, #1]
 8016b5e:	2b01      	cmp	r3, #1
 8016b60:	d14a      	bne.n	8016bf8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	015a      	lsls	r2, r3, #5
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	4413      	add	r3, r2
 8016b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016b76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016b7a:	f040 8086 	bne.w	8016c8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	781b      	ldrb	r3, [r3, #0]
 8016b82:	015a      	lsls	r2, r3, #5
 8016b84:	693b      	ldr	r3, [r7, #16]
 8016b86:	4413      	add	r3, r2
 8016b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	683a      	ldr	r2, [r7, #0]
 8016b90:	7812      	ldrb	r2, [r2, #0]
 8016b92:	0151      	lsls	r1, r2, #5
 8016b94:	693a      	ldr	r2, [r7, #16]
 8016b96:	440a      	add	r2, r1
 8016b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016b9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016ba0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	015a      	lsls	r2, r3, #5
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	4413      	add	r3, r2
 8016bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	683a      	ldr	r2, [r7, #0]
 8016bb4:	7812      	ldrb	r2, [r2, #0]
 8016bb6:	0151      	lsls	r1, r2, #5
 8016bb8:	693a      	ldr	r2, [r7, #16]
 8016bba:	440a      	add	r2, r1
 8016bbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016bc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016bc4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	3301      	adds	r3, #1
 8016bca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8016bd2:	4293      	cmp	r3, r2
 8016bd4:	d902      	bls.n	8016bdc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8016bd6:	2301      	movs	r3, #1
 8016bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8016bda:	e056      	b.n	8016c8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	781b      	ldrb	r3, [r3, #0]
 8016be0:	015a      	lsls	r2, r3, #5
 8016be2:	693b      	ldr	r3, [r7, #16]
 8016be4:	4413      	add	r3, r2
 8016be6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016bf4:	d0e7      	beq.n	8016bc6 <USB_EPStopXfer+0x82>
 8016bf6:	e048      	b.n	8016c8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016bf8:	683b      	ldr	r3, [r7, #0]
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	015a      	lsls	r2, r3, #5
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	4413      	add	r3, r2
 8016c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016c10:	d13b      	bne.n	8016c8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8016c12:	683b      	ldr	r3, [r7, #0]
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	015a      	lsls	r2, r3, #5
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	4413      	add	r3, r2
 8016c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	683a      	ldr	r2, [r7, #0]
 8016c24:	7812      	ldrb	r2, [r2, #0]
 8016c26:	0151      	lsls	r1, r2, #5
 8016c28:	693a      	ldr	r2, [r7, #16]
 8016c2a:	440a      	add	r2, r1
 8016c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016c30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8016c34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	781b      	ldrb	r3, [r3, #0]
 8016c3a:	015a      	lsls	r2, r3, #5
 8016c3c:	693b      	ldr	r3, [r7, #16]
 8016c3e:	4413      	add	r3, r2
 8016c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	683a      	ldr	r2, [r7, #0]
 8016c48:	7812      	ldrb	r2, [r2, #0]
 8016c4a:	0151      	lsls	r1, r2, #5
 8016c4c:	693a      	ldr	r2, [r7, #16]
 8016c4e:	440a      	add	r2, r1
 8016c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016c54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016c58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	3301      	adds	r3, #1
 8016c5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8016c66:	4293      	cmp	r3, r2
 8016c68:	d902      	bls.n	8016c70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	75fb      	strb	r3, [r7, #23]
          break;
 8016c6e:	e00c      	b.n	8016c8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016c70:	683b      	ldr	r3, [r7, #0]
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	015a      	lsls	r2, r3, #5
 8016c76:	693b      	ldr	r3, [r7, #16]
 8016c78:	4413      	add	r3, r2
 8016c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8016c84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8016c88:	d0e7      	beq.n	8016c5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8016c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	371c      	adds	r7, #28
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr

08016c98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b089      	sub	sp, #36	@ 0x24
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	60f8      	str	r0, [r7, #12]
 8016ca0:	60b9      	str	r1, [r7, #8]
 8016ca2:	4611      	mov	r1, r2
 8016ca4:	461a      	mov	r2, r3
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	71fb      	strb	r3, [r7, #7]
 8016caa:	4613      	mov	r3, r2
 8016cac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8016cb2:	68bb      	ldr	r3, [r7, #8]
 8016cb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8016cb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d123      	bne.n	8016d06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8016cbe:	88bb      	ldrh	r3, [r7, #4]
 8016cc0:	3303      	adds	r3, #3
 8016cc2:	089b      	lsrs	r3, r3, #2
 8016cc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	61bb      	str	r3, [r7, #24]
 8016cca:	e018      	b.n	8016cfe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016ccc:	79fb      	ldrb	r3, [r7, #7]
 8016cce:	031a      	lsls	r2, r3, #12
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	4413      	add	r3, r2
 8016cd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016cd8:	461a      	mov	r2, r3
 8016cda:	69fb      	ldr	r3, [r7, #28]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8016ce0:	69fb      	ldr	r3, [r7, #28]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016ce6:	69fb      	ldr	r3, [r7, #28]
 8016ce8:	3301      	adds	r3, #1
 8016cea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016cec:	69fb      	ldr	r3, [r7, #28]
 8016cee:	3301      	adds	r3, #1
 8016cf0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8016cf8:	69bb      	ldr	r3, [r7, #24]
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	61bb      	str	r3, [r7, #24]
 8016cfe:	69ba      	ldr	r2, [r7, #24]
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d3e2      	bcc.n	8016ccc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8016d06:	2300      	movs	r3, #0
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	3724      	adds	r7, #36	@ 0x24
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d12:	4770      	bx	lr

08016d14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b08b      	sub	sp, #44	@ 0x2c
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	60f8      	str	r0, [r7, #12]
 8016d1c:	60b9      	str	r1, [r7, #8]
 8016d1e:	4613      	mov	r3, r2
 8016d20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8016d2a:	88fb      	ldrh	r3, [r7, #6]
 8016d2c:	089b      	lsrs	r3, r3, #2
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8016d32:	88fb      	ldrh	r3, [r7, #6]
 8016d34:	f003 0303 	and.w	r3, r3, #3
 8016d38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	623b      	str	r3, [r7, #32]
 8016d3e:	e014      	b.n	8016d6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d4e:	3301      	adds	r3, #1
 8016d50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d54:	3301      	adds	r3, #1
 8016d56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8016d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d60:	3301      	adds	r3, #1
 8016d62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8016d64:	6a3b      	ldr	r3, [r7, #32]
 8016d66:	3301      	adds	r3, #1
 8016d68:	623b      	str	r3, [r7, #32]
 8016d6a:	6a3a      	ldr	r2, [r7, #32]
 8016d6c:	697b      	ldr	r3, [r7, #20]
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	d3e6      	bcc.n	8016d40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8016d72:	8bfb      	ldrh	r3, [r7, #30]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d01e      	beq.n	8016db6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016d7c:	69bb      	ldr	r3, [r7, #24]
 8016d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016d82:	461a      	mov	r2, r3
 8016d84:	f107 0310 	add.w	r3, r7, #16
 8016d88:	6812      	ldr	r2, [r2, #0]
 8016d8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016d8c:	693a      	ldr	r2, [r7, #16]
 8016d8e:	6a3b      	ldr	r3, [r7, #32]
 8016d90:	b2db      	uxtb	r3, r3
 8016d92:	00db      	lsls	r3, r3, #3
 8016d94:	fa22 f303 	lsr.w	r3, r2, r3
 8016d98:	b2da      	uxtb	r2, r3
 8016d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d9c:	701a      	strb	r2, [r3, #0]
      i++;
 8016d9e:	6a3b      	ldr	r3, [r7, #32]
 8016da0:	3301      	adds	r3, #1
 8016da2:	623b      	str	r3, [r7, #32]
      pDest++;
 8016da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da6:	3301      	adds	r3, #1
 8016da8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8016daa:	8bfb      	ldrh	r3, [r7, #30]
 8016dac:	3b01      	subs	r3, #1
 8016dae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8016db0:	8bfb      	ldrh	r3, [r7, #30]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d1ea      	bne.n	8016d8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	372c      	adds	r7, #44	@ 0x2c
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc2:	4770      	bx	lr

08016dc4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016dc4:	b480      	push	{r7}
 8016dc6:	b085      	sub	sp, #20
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
 8016dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016dd2:	683b      	ldr	r3, [r7, #0]
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016dd8:	683b      	ldr	r3, [r7, #0]
 8016dda:	785b      	ldrb	r3, [r3, #1]
 8016ddc:	2b01      	cmp	r3, #1
 8016dde:	d12c      	bne.n	8016e3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	015a      	lsls	r2, r3, #5
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	4413      	add	r3, r2
 8016de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	db12      	blt.n	8016e18 <USB_EPSetStall+0x54>
 8016df2:	68bb      	ldr	r3, [r7, #8]
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d00f      	beq.n	8016e18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8016df8:	68bb      	ldr	r3, [r7, #8]
 8016dfa:	015a      	lsls	r2, r3, #5
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	4413      	add	r3, r2
 8016e00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	68ba      	ldr	r2, [r7, #8]
 8016e08:	0151      	lsls	r1, r2, #5
 8016e0a:	68fa      	ldr	r2, [r7, #12]
 8016e0c:	440a      	add	r2, r1
 8016e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016e12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016e16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8016e18:	68bb      	ldr	r3, [r7, #8]
 8016e1a:	015a      	lsls	r2, r3, #5
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	4413      	add	r3, r2
 8016e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	68ba      	ldr	r2, [r7, #8]
 8016e28:	0151      	lsls	r1, r2, #5
 8016e2a:	68fa      	ldr	r2, [r7, #12]
 8016e2c:	440a      	add	r2, r1
 8016e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016e32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016e36:	6013      	str	r3, [r2, #0]
 8016e38:	e02b      	b.n	8016e92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	015a      	lsls	r2, r3, #5
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	4413      	add	r3, r2
 8016e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e46:	681b      	ldr	r3, [r3, #0]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	db12      	blt.n	8016e72 <USB_EPSetStall+0xae>
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00f      	beq.n	8016e72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8016e52:	68bb      	ldr	r3, [r7, #8]
 8016e54:	015a      	lsls	r2, r3, #5
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	4413      	add	r3, r2
 8016e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	68ba      	ldr	r2, [r7, #8]
 8016e62:	0151      	lsls	r1, r2, #5
 8016e64:	68fa      	ldr	r2, [r7, #12]
 8016e66:	440a      	add	r2, r1
 8016e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016e6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8016e70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	015a      	lsls	r2, r3, #5
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	4413      	add	r3, r2
 8016e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	68ba      	ldr	r2, [r7, #8]
 8016e82:	0151      	lsls	r1, r2, #5
 8016e84:	68fa      	ldr	r2, [r7, #12]
 8016e86:	440a      	add	r2, r1
 8016e88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8016e90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016e92:	2300      	movs	r3, #0
}
 8016e94:	4618      	mov	r0, r3
 8016e96:	3714      	adds	r7, #20
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b085      	sub	sp, #20
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
 8016ea8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016eae:	683b      	ldr	r3, [r7, #0]
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	785b      	ldrb	r3, [r3, #1]
 8016eb8:	2b01      	cmp	r3, #1
 8016eba:	d128      	bne.n	8016f0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	015a      	lsls	r2, r3, #5
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	4413      	add	r3, r2
 8016ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	68ba      	ldr	r2, [r7, #8]
 8016ecc:	0151      	lsls	r1, r2, #5
 8016ece:	68fa      	ldr	r2, [r7, #12]
 8016ed0:	440a      	add	r2, r1
 8016ed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016ed6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016eda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	791b      	ldrb	r3, [r3, #4]
 8016ee0:	2b03      	cmp	r3, #3
 8016ee2:	d003      	beq.n	8016eec <USB_EPClearStall+0x4c>
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	791b      	ldrb	r3, [r3, #4]
 8016ee8:	2b02      	cmp	r3, #2
 8016eea:	d138      	bne.n	8016f5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	015a      	lsls	r2, r3, #5
 8016ef0:	68fb      	ldr	r3, [r7, #12]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	68ba      	ldr	r2, [r7, #8]
 8016efc:	0151      	lsls	r1, r2, #5
 8016efe:	68fa      	ldr	r2, [r7, #12]
 8016f00:	440a      	add	r2, r1
 8016f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8016f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016f0a:	6013      	str	r3, [r2, #0]
 8016f0c:	e027      	b.n	8016f5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8016f0e:	68bb      	ldr	r3, [r7, #8]
 8016f10:	015a      	lsls	r2, r3, #5
 8016f12:	68fb      	ldr	r3, [r7, #12]
 8016f14:	4413      	add	r3, r2
 8016f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	68ba      	ldr	r2, [r7, #8]
 8016f1e:	0151      	lsls	r1, r2, #5
 8016f20:	68fa      	ldr	r2, [r7, #12]
 8016f22:	440a      	add	r2, r1
 8016f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8016f2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	791b      	ldrb	r3, [r3, #4]
 8016f32:	2b03      	cmp	r3, #3
 8016f34:	d003      	beq.n	8016f3e <USB_EPClearStall+0x9e>
 8016f36:	683b      	ldr	r3, [r7, #0]
 8016f38:	791b      	ldrb	r3, [r3, #4]
 8016f3a:	2b02      	cmp	r3, #2
 8016f3c:	d10f      	bne.n	8016f5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016f3e:	68bb      	ldr	r3, [r7, #8]
 8016f40:	015a      	lsls	r2, r3, #5
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	4413      	add	r3, r2
 8016f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	68ba      	ldr	r2, [r7, #8]
 8016f4e:	0151      	lsls	r1, r2, #5
 8016f50:	68fa      	ldr	r2, [r7, #12]
 8016f52:	440a      	add	r2, r1
 8016f54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8016f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016f5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8016f5e:	2300      	movs	r3, #0
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3714      	adds	r7, #20
 8016f64:	46bd      	mov	sp, r7
 8016f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6a:	4770      	bx	lr

08016f6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016f6c:	b480      	push	{r7}
 8016f6e:	b085      	sub	sp, #20
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	460b      	mov	r3, r1
 8016f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	68fa      	ldr	r2, [r7, #12]
 8016f86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016f8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8016f8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016f96:	681a      	ldr	r2, [r3, #0]
 8016f98:	78fb      	ldrb	r3, [r7, #3]
 8016f9a:	011b      	lsls	r3, r3, #4
 8016f9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8016fa0:	68f9      	ldr	r1, [r7, #12]
 8016fa2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8016fa6:	4313      	orrs	r3, r2
 8016fa8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016faa:	2300      	movs	r3, #0
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3714      	adds	r7, #20
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb6:	4770      	bx	lr

08016fb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016fb8:	b480      	push	{r7}
 8016fba:	b085      	sub	sp, #20
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	68fa      	ldr	r2, [r7, #12]
 8016fce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8016fd2:	f023 0303 	bic.w	r3, r3, #3
 8016fd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8016fde:	685b      	ldr	r3, [r3, #4]
 8016fe0:	68fa      	ldr	r2, [r7, #12]
 8016fe2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8016fe6:	f023 0302 	bic.w	r3, r3, #2
 8016fea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016fec:	2300      	movs	r3, #0
}
 8016fee:	4618      	mov	r0, r3
 8016ff0:	3714      	adds	r7, #20
 8016ff2:	46bd      	mov	sp, r7
 8016ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff8:	4770      	bx	lr

08016ffa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8016ffa:	b480      	push	{r7}
 8016ffc:	b085      	sub	sp, #20
 8016ffe:	af00      	add	r7, sp, #0
 8017000:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	68fa      	ldr	r2, [r7, #12]
 8017010:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017014:	f023 0303 	bic.w	r3, r3, #3
 8017018:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017020:	685b      	ldr	r3, [r3, #4]
 8017022:	68fa      	ldr	r2, [r7, #12]
 8017024:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8017028:	f043 0302 	orr.w	r3, r3, #2
 801702c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801702e:	2300      	movs	r3, #0
}
 8017030:	4618      	mov	r0, r3
 8017032:	3714      	adds	r7, #20
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801703c:	b480      	push	{r7}
 801703e:	b085      	sub	sp, #20
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	695b      	ldr	r3, [r3, #20]
 8017048:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	699b      	ldr	r3, [r3, #24]
 801704e:	68fa      	ldr	r2, [r7, #12]
 8017050:	4013      	ands	r3, r2
 8017052:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8017054:	68fb      	ldr	r3, [r7, #12]
}
 8017056:	4618      	mov	r0, r3
 8017058:	3714      	adds	r7, #20
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr

08017062 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8017062:	b480      	push	{r7}
 8017064:	b085      	sub	sp, #20
 8017066:	af00      	add	r7, sp, #0
 8017068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017074:	699b      	ldr	r3, [r3, #24]
 8017076:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801707e:	69db      	ldr	r3, [r3, #28]
 8017080:	68ba      	ldr	r2, [r7, #8]
 8017082:	4013      	ands	r3, r2
 8017084:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	0c1b      	lsrs	r3, r3, #16
}
 801708a:	4618      	mov	r0, r3
 801708c:	3714      	adds	r7, #20
 801708e:	46bd      	mov	sp, r7
 8017090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017094:	4770      	bx	lr

08017096 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8017096:	b480      	push	{r7}
 8017098:	b085      	sub	sp, #20
 801709a:	af00      	add	r7, sp, #0
 801709c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80170a8:	699b      	ldr	r3, [r3, #24]
 80170aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80170b2:	69db      	ldr	r3, [r3, #28]
 80170b4:	68ba      	ldr	r2, [r7, #8]
 80170b6:	4013      	ands	r3, r2
 80170b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	b29b      	uxth	r3, r3
}
 80170be:	4618      	mov	r0, r3
 80170c0:	3714      	adds	r7, #20
 80170c2:	46bd      	mov	sp, r7
 80170c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c8:	4770      	bx	lr

080170ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80170ca:	b480      	push	{r7}
 80170cc:	b085      	sub	sp, #20
 80170ce:	af00      	add	r7, sp, #0
 80170d0:	6078      	str	r0, [r7, #4]
 80170d2:	460b      	mov	r3, r1
 80170d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80170da:	78fb      	ldrb	r3, [r7, #3]
 80170dc:	015a      	lsls	r2, r3, #5
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	4413      	add	r3, r2
 80170e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80170e6:	689b      	ldr	r3, [r3, #8]
 80170e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80170f0:	695b      	ldr	r3, [r3, #20]
 80170f2:	68ba      	ldr	r2, [r7, #8]
 80170f4:	4013      	ands	r3, r2
 80170f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80170f8:	68bb      	ldr	r3, [r7, #8]
}
 80170fa:	4618      	mov	r0, r3
 80170fc:	3714      	adds	r7, #20
 80170fe:	46bd      	mov	sp, r7
 8017100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017104:	4770      	bx	lr

08017106 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017106:	b480      	push	{r7}
 8017108:	b087      	sub	sp, #28
 801710a:	af00      	add	r7, sp, #0
 801710c:	6078      	str	r0, [r7, #4]
 801710e:	460b      	mov	r3, r1
 8017110:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801711c:	691b      	ldr	r3, [r3, #16]
 801711e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8017120:	697b      	ldr	r3, [r7, #20]
 8017122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8017126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017128:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801712a:	78fb      	ldrb	r3, [r7, #3]
 801712c:	f003 030f 	and.w	r3, r3, #15
 8017130:	68fa      	ldr	r2, [r7, #12]
 8017132:	fa22 f303 	lsr.w	r3, r2, r3
 8017136:	01db      	lsls	r3, r3, #7
 8017138:	b2db      	uxtb	r3, r3
 801713a:	693a      	ldr	r2, [r7, #16]
 801713c:	4313      	orrs	r3, r2
 801713e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8017140:	78fb      	ldrb	r3, [r7, #3]
 8017142:	015a      	lsls	r2, r3, #5
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	4413      	add	r3, r2
 8017148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801714c:	689b      	ldr	r3, [r3, #8]
 801714e:	693a      	ldr	r2, [r7, #16]
 8017150:	4013      	ands	r3, r2
 8017152:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017154:	68bb      	ldr	r3, [r7, #8]
}
 8017156:	4618      	mov	r0, r3
 8017158:	371c      	adds	r7, #28
 801715a:	46bd      	mov	sp, r7
 801715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017160:	4770      	bx	lr

08017162 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8017162:	b480      	push	{r7}
 8017164:	b083      	sub	sp, #12
 8017166:	af00      	add	r7, sp, #0
 8017168:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	695b      	ldr	r3, [r3, #20]
 801716e:	f003 0301 	and.w	r3, r3, #1
}
 8017172:	4618      	mov	r0, r3
 8017174:	370c      	adds	r7, #12
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr
	...

08017180 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8017180:	b480      	push	{r7}
 8017182:	b085      	sub	sp, #20
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8017192:	681a      	ldr	r2, [r3, #0]
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801719a:	4619      	mov	r1, r3
 801719c:	4b09      	ldr	r3, [pc, #36]	@ (80171c4 <USB_ActivateSetup+0x44>)
 801719e:	4013      	ands	r3, r2
 80171a0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	68fa      	ldr	r2, [r7, #12]
 80171ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80171b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80171b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80171b6:	2300      	movs	r3, #0
}
 80171b8:	4618      	mov	r0, r3
 80171ba:	3714      	adds	r7, #20
 80171bc:	46bd      	mov	sp, r7
 80171be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c2:	4770      	bx	lr
 80171c4:	fffff800 	.word	0xfffff800

080171c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80171c8:	b480      	push	{r7}
 80171ca:	b087      	sub	sp, #28
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	460b      	mov	r3, r1
 80171d2:	607a      	str	r2, [r7, #4]
 80171d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	333c      	adds	r3, #60	@ 0x3c
 80171de:	3304      	adds	r3, #4
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	4a26      	ldr	r2, [pc, #152]	@ (8017280 <USB_EP0_OutStart+0xb8>)
 80171e8:	4293      	cmp	r3, r2
 80171ea:	d90a      	bls.n	8017202 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80171ec:	697b      	ldr	r3, [r7, #20]
 80171ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80171f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80171fc:	d101      	bne.n	8017202 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80171fe:	2300      	movs	r3, #0
 8017200:	e037      	b.n	8017272 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017202:	697b      	ldr	r3, [r7, #20]
 8017204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017208:	461a      	mov	r2, r3
 801720a:	2300      	movs	r3, #0
 801720c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017214:	691b      	ldr	r3, [r3, #16]
 8017216:	697a      	ldr	r2, [r7, #20]
 8017218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801721c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8017220:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017228:	691b      	ldr	r3, [r3, #16]
 801722a:	697a      	ldr	r2, [r7, #20]
 801722c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017230:	f043 0318 	orr.w	r3, r3, #24
 8017234:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8017236:	697b      	ldr	r3, [r7, #20]
 8017238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801723c:	691b      	ldr	r3, [r3, #16]
 801723e:	697a      	ldr	r2, [r7, #20]
 8017240:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8017244:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8017248:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801724a:	7afb      	ldrb	r3, [r7, #11]
 801724c:	2b01      	cmp	r3, #1
 801724e:	d10f      	bne.n	8017270 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017256:	461a      	mov	r2, r3
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801725c:	697b      	ldr	r3, [r7, #20]
 801725e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	697a      	ldr	r2, [r7, #20]
 8017266:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801726a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801726e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8017270:	2300      	movs	r3, #0
}
 8017272:	4618      	mov	r0, r3
 8017274:	371c      	adds	r7, #28
 8017276:	46bd      	mov	sp, r7
 8017278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727c:	4770      	bx	lr
 801727e:	bf00      	nop
 8017280:	4f54300a 	.word	0x4f54300a

08017284 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8017284:	b480      	push	{r7}
 8017286:	b085      	sub	sp, #20
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801728c:	2300      	movs	r3, #0
 801728e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	3301      	adds	r3, #1
 8017294:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801729c:	d901      	bls.n	80172a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801729e:	2303      	movs	r3, #3
 80172a0:	e01b      	b.n	80172da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	691b      	ldr	r3, [r3, #16]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	daf2      	bge.n	8017290 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80172aa:	2300      	movs	r3, #0
 80172ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	691b      	ldr	r3, [r3, #16]
 80172b2:	f043 0201 	orr.w	r2, r3, #1
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80172ba:	68fb      	ldr	r3, [r7, #12]
 80172bc:	3301      	adds	r3, #1
 80172be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80172c6:	d901      	bls.n	80172cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80172c8:	2303      	movs	r3, #3
 80172ca:	e006      	b.n	80172da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	691b      	ldr	r3, [r3, #16]
 80172d0:	f003 0301 	and.w	r3, r3, #1
 80172d4:	2b01      	cmp	r3, #1
 80172d6:	d0f0      	beq.n	80172ba <USB_CoreReset+0x36>

  return HAL_OK;
 80172d8:	2300      	movs	r3, #0
}
 80172da:	4618      	mov	r0, r3
 80172dc:	3714      	adds	r7, #20
 80172de:	46bd      	mov	sp, r7
 80172e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e4:	4770      	bx	lr

080172e6 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 80172e6:	b580      	push	{r7, lr}
 80172e8:	b082      	sub	sp, #8
 80172ea:	af00      	add	r7, sp, #0
 80172ec:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	2200      	movs	r2, #0
 80172f2:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	2200      	movs	r2, #0
 80172f8:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	2200      	movs	r2, #0
 80172fe:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2200      	movs	r2, #0
 8017304:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	2200      	movs	r2, #0
 801730a:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	2200      	movs	r2, #0
 8017310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	2200      	movs	r2, #0
 8017318:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801731c:	2044      	movs	r0, #68	@ 0x44
 801731e:	f003 fa7d 	bl	801a81c <malloc>
 8017322:	4603      	mov	r3, r0
 8017324:	461a      	mov	r2, r3
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801732a:	2044      	movs	r0, #68	@ 0x44
 801732c:	f003 fa76 	bl	801a81c <malloc>
 8017330:	4603      	mov	r3, r0
 8017332:	461a      	mov	r2, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	7e1b      	ldrb	r3, [r3, #24]
 801733c:	461a      	mov	r2, r3
 801733e:	4613      	mov	r3, r2
 8017340:	011b      	lsls	r3, r3, #4
 8017342:	4413      	add	r3, r2
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	4618      	mov	r0, r3
 8017348:	f003 fa68 	bl	801a81c <malloc>
 801734c:	4603      	mov	r3, r0
 801734e:	461a      	mov	r2, r3
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	f893 3020 	ldrb.w	r3, [r3, #32]
 801735a:	461a      	mov	r2, r3
 801735c:	4613      	mov	r3, r2
 801735e:	011b      	lsls	r3, r3, #4
 8017360:	4413      	add	r3, r2
 8017362:	009b      	lsls	r3, r3, #2
 8017364:	4618      	mov	r0, r3
 8017366:	f003 fa59 	bl	801a81c <malloc>
 801736a:	4603      	mov	r3, r0
 801736c:	461a      	mov	r2, r3
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	6818      	ldr	r0, [r3, #0]
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	689b      	ldr	r3, [r3, #8]
 801737a:	2244      	movs	r2, #68	@ 0x44
 801737c:	4619      	mov	r1, r3
 801737e:	f7fc fd4b 	bl	8013e18 <HAL_UART_Receive_DMA>
 8017382:	4603      	mov	r3, r0
}
 8017384:	4618      	mov	r0, r3
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}

0801738c <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 801738c:	b480      	push	{r7}
 801738e:	b087      	sub	sp, #28
 8017390:	af00      	add	r7, sp, #0
 8017392:	60f8      	str	r0, [r7, #12]
 8017394:	60b9      	str	r1, [r7, #8]
 8017396:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	7e9a      	ldrb	r2, [r3, #26]
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	7e5b      	ldrb	r3, [r3, #25]
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d101      	bne.n	80173a8 <XBEE_RXPacket+0x1c>
 80173a4:	2301      	movs	r3, #1
 80173a6:	e05b      	b.n	8017460 <XBEE_RXPacket+0xd4>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	695a      	ldr	r2, [r3, #20]
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	7e9b      	ldrb	r3, [r3, #26]
 80173b0:	4619      	mov	r1, r3
 80173b2:	460b      	mov	r3, r1
 80173b4:	011b      	lsls	r3, r3, #4
 80173b6:	440b      	add	r3, r1
 80173b8:	009b      	lsls	r3, r3, #2
 80173ba:	4413      	add	r3, r2
 80173bc:	613b      	str	r3, [r7, #16]

	hxbee->pktRx_idxPop += 1;
 80173be:	68fb      	ldr	r3, [r7, #12]
 80173c0:	7e9b      	ldrb	r3, [r3, #26]
 80173c2:	3301      	adds	r3, #1
 80173c4:	b2da      	uxtb	r2, r3
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	7e9b      	ldrb	r3, [r3, #26]
 80173ce:	68fa      	ldr	r2, [r7, #12]
 80173d0:	7e12      	ldrb	r2, [r2, #24]
 80173d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80173d6:	fb01 f202 	mul.w	r2, r1, r2
 80173da:	1a9b      	subs	r3, r3, r2
 80173dc:	b2da      	uxtb	r2, r3
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	769a      	strb	r2, [r3, #26]

	// Compute the checksum
	uint8_t checksum = 0x00;
 80173e2:	2300      	movs	r3, #0
 80173e4:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80173e6:	2300      	movs	r3, #0
 80173e8:	75bb      	strb	r3, [r7, #22]
 80173ea:	e00e      	b.n	801740a <XBEE_RXPacket+0x7e>
		if (i == 3) continue;
 80173ec:	7dbb      	ldrb	r3, [r7, #22]
 80173ee:	2b03      	cmp	r3, #3
 80173f0:	d007      	beq.n	8017402 <XBEE_RXPacket+0x76>
		checksum ^= pRxInternal[i];
 80173f2:	7dbb      	ldrb	r3, [r7, #22]
 80173f4:	693a      	ldr	r2, [r7, #16]
 80173f6:	4413      	add	r3, r2
 80173f8:	781a      	ldrb	r2, [r3, #0]
 80173fa:	7dfb      	ldrb	r3, [r7, #23]
 80173fc:	4053      	eors	r3, r2
 80173fe:	75fb      	strb	r3, [r7, #23]
 8017400:	e000      	b.n	8017404 <XBEE_RXPacket+0x78>
		if (i == 3) continue;
 8017402:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 8017404:	7dbb      	ldrb	r3, [r7, #22]
 8017406:	3301      	adds	r3, #1
 8017408:	75bb      	strb	r3, [r7, #22]
 801740a:	7dbb      	ldrb	r3, [r7, #22]
 801740c:	2b43      	cmp	r3, #67	@ 0x43
 801740e:	d9ed      	bls.n	80173ec <XBEE_RXPacket+0x60>
	}

	// Packet corrupted, mismatch checksum
	if (pRxInternal[3] != checksum) return 1;
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	3303      	adds	r3, #3
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	7dfa      	ldrb	r2, [r7, #23]
 8017418:	429a      	cmp	r2, r3
 801741a:	d001      	beq.n	8017420 <XBEE_RXPacket+0x94>
 801741c:	2301      	movs	r3, #1
 801741e:	e01f      	b.n	8017460 <XBEE_RXPacket+0xd4>

	// Get the 16 bit packet number field
	*pkt_num = 0;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2200      	movs	r2, #0
 8017424:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	881b      	ldrh	r3, [r3, #0]
 801742a:	693a      	ldr	r2, [r7, #16]
 801742c:	3201      	adds	r2, #1
 801742e:	7812      	ldrb	r2, [r2, #0]
 8017430:	4413      	add	r3, r2
 8017432:	b29a      	uxth	r2, r3
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	881b      	ldrh	r3, [r3, #0]
 801743c:	021b      	lsls	r3, r3, #8
 801743e:	b29a      	uxth	r2, r3
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	881b      	ldrh	r3, [r3, #0]
 8017448:	693a      	ldr	r2, [r7, #16]
 801744a:	3202      	adds	r2, #2
 801744c:	7812      	ldrb	r2, [r2, #0]
 801744e:	4413      	add	r3, r2
 8017450:	b29a      	uxth	r2, r3
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8017456:	693b      	ldr	r3, [r7, #16]
 8017458:	1d1a      	adds	r2, r3, #4
 801745a:	68bb      	ldr	r3, [r7, #8]
 801745c:	601a      	str	r2, [r3, #0]

	return 0;
 801745e:	2300      	movs	r3, #0
}
 8017460:	4618      	mov	r0, r3
 8017462:	371c      	adds	r7, #28
 8017464:	46bd      	mov	sp, r7
 8017466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746a:	4770      	bx	lr

0801746c <XBEE_TXPacket>:

uint8_t XBEE_TXPacket(XBEE_HandleTypeDef *hxbee, uint8_t *pTxBuffer, uint16_t pkt_num) {
 801746c:	b580      	push	{r7, lr}
 801746e:	b086      	sub	sp, #24
 8017470:	af00      	add	r7, sp, #0
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	60b9      	str	r1, [r7, #8]
 8017476:	4613      	mov	r3, r2
 8017478:	80fb      	strh	r3, [r7, #6]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktTx_idxPush + 1;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017480:	3301      	adds	r3, #1
 8017482:	75bb      	strb	r3, [r7, #22]
	pkt_idx %= hxbee->pktTx_max;
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	f893 2020 	ldrb.w	r2, [r3, #32]
 801748a:	7dbb      	ldrb	r3, [r7, #22]
 801748c:	fbb3 f1f2 	udiv	r1, r3, r2
 8017490:	fb01 f202 	mul.w	r2, r1, r2
 8017494:	1a9b      	subs	r3, r3, r2
 8017496:	75bb      	strb	r3, [r7, #22]

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktTx_idxPop) return 1;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 801749e:	7dba      	ldrb	r2, [r7, #22]
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d101      	bne.n	80174a8 <XBEE_TXPacket+0x3c>
 80174a4:	2301      	movs	r3, #1
 80174a6:	e047      	b.n	8017538 <XBEE_TXPacket+0xcc>

	// Get a reference to this memory location
	uint8_t *newPkt = hxbee->pktTx_mem + hxbee->pktTx_idxPush*PKT_RAWSIZE;
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	69da      	ldr	r2, [r3, #28]
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80174b2:	4619      	mov	r1, r3
 80174b4:	460b      	mov	r3, r1
 80174b6:	011b      	lsls	r3, r3, #4
 80174b8:	440b      	add	r3, r1
 80174ba:	009b      	lsls	r3, r3, #2
 80174bc:	4413      	add	r3, r2
 80174be:	613b      	str	r3, [r7, #16]

	// Construct the packet
	newPkt[0] = PKT_DELIMETER;
 80174c0:	693b      	ldr	r3, [r7, #16]
 80174c2:	22aa      	movs	r2, #170	@ 0xaa
 80174c4:	701a      	strb	r2, [r3, #0]
	newPkt[1] = pkt_num >> 8;
 80174c6:	88fb      	ldrh	r3, [r7, #6]
 80174c8:	0a1b      	lsrs	r3, r3, #8
 80174ca:	b29a      	uxth	r2, r3
 80174cc:	693b      	ldr	r3, [r7, #16]
 80174ce:	3301      	adds	r3, #1
 80174d0:	b2d2      	uxtb	r2, r2
 80174d2:	701a      	strb	r2, [r3, #0]
	newPkt[2] = pkt_num & 0x00FF;
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	3302      	adds	r3, #2
 80174d8:	88fa      	ldrh	r2, [r7, #6]
 80174da:	b2d2      	uxtb	r2, r2
 80174dc:	701a      	strb	r2, [r3, #0]

	memcpy(newPkt + 4, pTxBuffer, PKT_DATASIZE);
 80174de:	693b      	ldr	r3, [r7, #16]
 80174e0:	3304      	adds	r3, #4
 80174e2:	2240      	movs	r2, #64	@ 0x40
 80174e4:	68b9      	ldr	r1, [r7, #8]
 80174e6:	4618      	mov	r0, r3
 80174e8:	f004 f843 	bl	801b572 <memcpy>

	// Compute the checksum
	newPkt[3] = 0x00;
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	3303      	adds	r3, #3
 80174f0:	2200      	movs	r2, #0
 80174f2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 80174f4:	2300      	movs	r3, #0
 80174f6:	75fb      	strb	r3, [r7, #23]
 80174f8:	e013      	b.n	8017522 <XBEE_TXPacket+0xb6>
		if (i == 3) continue;
 80174fa:	7dfb      	ldrb	r3, [r7, #23]
 80174fc:	2b03      	cmp	r3, #3
 80174fe:	d00c      	beq.n	801751a <XBEE_TXPacket+0xae>
		newPkt[3] ^= newPkt[i];
 8017500:	693b      	ldr	r3, [r7, #16]
 8017502:	3303      	adds	r3, #3
 8017504:	7819      	ldrb	r1, [r3, #0]
 8017506:	7dfb      	ldrb	r3, [r7, #23]
 8017508:	693a      	ldr	r2, [r7, #16]
 801750a:	4413      	add	r3, r2
 801750c:	781a      	ldrb	r2, [r3, #0]
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	3303      	adds	r3, #3
 8017512:	404a      	eors	r2, r1
 8017514:	b2d2      	uxtb	r2, r2
 8017516:	701a      	strb	r2, [r3, #0]
 8017518:	e000      	b.n	801751c <XBEE_TXPacket+0xb0>
		if (i == 3) continue;
 801751a:	bf00      	nop
	for (uint8_t i = 0; i < PKT_RAWSIZE; i++) {
 801751c:	7dfb      	ldrb	r3, [r7, #23]
 801751e:	3301      	adds	r3, #1
 8017520:	75fb      	strb	r3, [r7, #23]
 8017522:	7dfb      	ldrb	r3, [r7, #23]
 8017524:	2b43      	cmp	r3, #67	@ 0x43
 8017526:	d9e8      	bls.n	80174fa <XBEE_TXPacket+0x8e>
	}

	// Try and immediately send the packet
	// TODO: Set the bust state, interrupts
	return HAL_UART_Transmit(hxbee->uart_handle, newPkt, PKT_RAWSIZE, 30);	// Transmit the buffer
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	6818      	ldr	r0, [r3, #0]
 801752c:	231e      	movs	r3, #30
 801752e:	2244      	movs	r2, #68	@ 0x44
 8017530:	6939      	ldr	r1, [r7, #16]
 8017532:	f7fc fbe3 	bl	8013cfc <HAL_UART_Transmit>
 8017536:	4603      	mov	r3, r0

}
 8017538:	4618      	mov	r0, r3
 801753a:	3718      	adds	r7, #24
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}

08017540 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8017540:	b580      	push	{r7, lr}
 8017542:	b096      	sub	sp, #88	@ 0x58
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	7e5b      	ldrb	r3, [r3, #25]
 801754c:	3301      	adds	r3, #1
 801754e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	7e1a      	ldrb	r2, [r3, #24]
 8017556:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801755a:	fbb3 f1f2 	udiv	r1, r3, r2
 801755e:	fb01 f202 	mul.w	r2, r1, r2
 8017562:	1a9b      	subs	r3, r3, r2
 8017564:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	7e9b      	ldrb	r3, [r3, #26]
 801756c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017570:	429a      	cmp	r2, r3
 8017572:	d101      	bne.n	8017578 <XBEE_RX_DMACallback+0x38>
 8017574:	2301      	movs	r3, #1
 8017576:	e097      	b.n	80176a8 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	7c1b      	ldrb	r3, [r3, #16]
 801757c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8017580:	2300      	movs	r3, #0
 8017582:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8017586:	2300      	movs	r3, #0
 8017588:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 801758c:	e027      	b.n	80175de <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 801758e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8017592:	687a      	ldr	r2, [r7, #4]
 8017594:	7c12      	ldrb	r2, [r2, #16]
 8017596:	441a      	add	r2, r3
 8017598:	4b45      	ldr	r3, [pc, #276]	@ (80176b0 <XBEE_RX_DMACallback+0x170>)
 801759a:	fb83 1302 	smull	r1, r3, r3, r2
 801759e:	1159      	asrs	r1, r3, #5
 80175a0:	17d3      	asrs	r3, r2, #31
 80175a2:	1ac9      	subs	r1, r1, r3
 80175a4:	460b      	mov	r3, r1
 80175a6:	011b      	lsls	r3, r3, #4
 80175a8:	440b      	add	r3, r1
 80175aa:	009b      	lsls	r3, r3, #2
 80175ac:	1ad1      	subs	r1, r2, r3
 80175ae:	460b      	mov	r3, r1
 80175b0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	689a      	ldr	r2, [r3, #8]
 80175b8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80175bc:	4413      	add	r3, r2
 80175be:	781b      	ldrb	r3, [r3, #0]
 80175c0:	2baa      	cmp	r3, #170	@ 0xaa
 80175c2:	d107      	bne.n	80175d4 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 80175c4:	2301      	movs	r3, #1
 80175c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 80175d0:	741a      	strb	r2, [r3, #16]
			break;
 80175d2:	e008      	b.n	80175e6 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 80175d4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80175d8:	3301      	adds	r3, #1
 80175da:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 80175de:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80175e2:	2b43      	cmp	r3, #67	@ 0x43
 80175e4:	d9d3      	bls.n	801758e <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 80175e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d101      	bne.n	80175f2 <XBEE_RX_DMACallback+0xb2>
 80175ee:	2302      	movs	r3, #2
 80175f0:	e05a      	b.n	80176a8 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	68da      	ldr	r2, [r3, #12]
 80175f6:	f107 030c 	add.w	r3, r7, #12
 80175fa:	4611      	mov	r1, r2
 80175fc:	2244      	movs	r2, #68	@ 0x44
 80175fe:	4618      	mov	r0, r3
 8017600:	f003 ffb7 	bl	801b572 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	68d8      	ldr	r0, [r3, #12]
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	689b      	ldr	r3, [r3, #8]
 801760c:	687a      	ldr	r2, [r7, #4]
 801760e:	7c12      	ldrb	r2, [r2, #16]
 8017610:	1899      	adds	r1, r3, r2
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	7c1b      	ldrb	r3, [r3, #16]
 8017616:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 801761a:	461a      	mov	r2, r3
 801761c:	f003 ffa9 	bl	801b572 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	7c1b      	ldrb	r3, [r3, #16]
 8017624:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8017628:	429a      	cmp	r2, r3
 801762a:	d201      	bcs.n	8017630 <XBEE_RX_DMACallback+0xf0>
		return 2;
 801762c:	2302      	movs	r3, #2
 801762e:	e03b      	b.n	80176a8 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8017630:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017634:	b29b      	uxth	r3, r3
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	7c12      	ldrb	r2, [r2, #16]
 801763a:	1a9b      	subs	r3, r3, r2
 801763c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8017640:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017644:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8017648:	461a      	mov	r2, r3
 801764a:	f107 030c 	add.w	r3, r7, #12
 801764e:	4413      	add	r3, r2
 8017650:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017654:	2100      	movs	r1, #0
 8017656:	4618      	mov	r0, r3
 8017658:	f003 fef3 	bl	801b442 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 801765c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017660:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017664:	1ad3      	subs	r3, r2, r3
 8017666:	3344      	adds	r3, #68	@ 0x44
 8017668:	f107 020c 	add.w	r2, r7, #12
 801766c:	18d0      	adds	r0, r2, r3
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	6899      	ldr	r1, [r3, #8]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	7c1b      	ldrb	r3, [r3, #16]
 8017676:	461a      	mov	r2, r3
 8017678:	f003 ff7b 	bl	801b572 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8017682:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	695a      	ldr	r2, [r3, #20]
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	7e5b      	ldrb	r3, [r3, #25]
 801768c:	4619      	mov	r1, r3
 801768e:	460b      	mov	r3, r1
 8017690:	011b      	lsls	r3, r3, #4
 8017692:	440b      	add	r3, r1
 8017694:	009b      	lsls	r3, r3, #2
 8017696:	4413      	add	r3, r2
 8017698:	4618      	mov	r0, r3
 801769a:	f107 030c 	add.w	r3, r7, #12
 801769e:	2244      	movs	r2, #68	@ 0x44
 80176a0:	4619      	mov	r1, r3
 80176a2:	f003 ff66 	bl	801b572 <memcpy>

	return 0;
 80176a6:	2300      	movs	r3, #0
}
 80176a8:	4618      	mov	r0, r3
 80176aa:	3758      	adds	r7, #88	@ 0x58
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	78787879 	.word	0x78787879

080176b4 <AllocateValueArr>:
#include "MenuOLED.h"

// FUNCS
// ------------------------------------------------------------------------------------

uint8_t* AllocateValueArr(uint8_t num) {
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b082      	sub	sp, #8
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	4603      	mov	r3, r0
 80176bc:	71fb      	strb	r3, [r7, #7]
	return (uint8_t*)malloc(sizeof(uint8_t)*num);
 80176be:	79fb      	ldrb	r3, [r7, #7]
 80176c0:	4618      	mov	r0, r3
 80176c2:	f003 f8ab 	bl	801a81c <malloc>
 80176c6:	4603      	mov	r3, r0
}
 80176c8:	4618      	mov	r0, r3
 80176ca:	3708      	adds	r7, #8
 80176cc:	46bd      	mov	sp, r7
 80176ce:	bd80      	pop	{r7, pc}

080176d0 <AllocateString>:

uint8_t* AllocateString(uint8_t* src) {
 80176d0:	b580      	push	{r7, lr}
 80176d2:	b09c      	sub	sp, #112	@ 0x70
 80176d4:	af00      	add	r7, sp, #0
 80176d6:	6078      	str	r0, [r7, #4]
	uint8_t str_tmp[100];
	uint8_t* dst = (uint8_t*)malloc(strlen(src)+1);
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	f7e8 fe51 	bl	8000380 <strlen>
 80176de:	4603      	mov	r3, r0
 80176e0:	3301      	adds	r3, #1
 80176e2:	4618      	mov	r0, r3
 80176e4:	f003 f89a 	bl	801a81c <malloc>
 80176e8:	4603      	mov	r3, r0
 80176ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
	strcpy(dst, src);
 80176ec:	6879      	ldr	r1, [r7, #4]
 80176ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80176f0:	f003 ff37 	bl	801b562 <strcpy>
	return dst;
 80176f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3770      	adds	r7, #112	@ 0x70
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}

080176fe <AllocateStringArr>:

uint8_t** AllocateStringArr(uint8_t num) {
 80176fe:	b580      	push	{r7, lr}
 8017700:	b082      	sub	sp, #8
 8017702:	af00      	add	r7, sp, #0
 8017704:	4603      	mov	r3, r0
 8017706:	71fb      	strb	r3, [r7, #7]
	return (uint8_t**)malloc(sizeof(uint8_t*)*num);
 8017708:	79fb      	ldrb	r3, [r7, #7]
 801770a:	009b      	lsls	r3, r3, #2
 801770c:	4618      	mov	r0, r3
 801770e:	f003 f885 	bl	801a81c <malloc>
 8017712:	4603      	mov	r3, r0
}
 8017714:	4618      	mov	r0, r3
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <AllocateProperties>:

Menu_Property* AllocateProperties(uint8_t num) {
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	4603      	mov	r3, r0
 8017724:	71fb      	strb	r3, [r7, #7]
	return (Menu_Property*)malloc(sizeof(Menu_Property)*num);
 8017726:	79fa      	ldrb	r2, [r7, #7]
 8017728:	4613      	mov	r3, r2
 801772a:	005b      	lsls	r3, r3, #1
 801772c:	4413      	add	r3, r2
 801772e:	009b      	lsls	r3, r3, #2
 8017730:	4618      	mov	r0, r3
 8017732:	f003 f873 	bl	801a81c <malloc>
 8017736:	4603      	mov	r3, r0
}
 8017738:	4618      	mov	r0, r3
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}

08017740 <AllocatePages>:

Menu_Page* AllocatePages(uint8_t num) {
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	4603      	mov	r3, r0
 8017748:	71fb      	strb	r3, [r7, #7]
	return (Menu_Page*)malloc(sizeof(Menu_Page)*num);
 801774a:	79fa      	ldrb	r2, [r7, #7]
 801774c:	4613      	mov	r3, r2
 801774e:	005b      	lsls	r3, r3, #1
 8017750:	4413      	add	r3, r2
 8017752:	009b      	lsls	r3, r3, #2
 8017754:	4618      	mov	r0, r3
 8017756:	f003 f861 	bl	801a81c <malloc>
 801775a:	4603      	mov	r3, r0
}
 801775c:	4618      	mov	r0, r3
 801775e:	3708      	adds	r7, #8
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <MENU_Init>:

uint8_t MENU_Init(Menu_HandleTypeDef *hmenu) {
 8017764:	b590      	push	{r4, r7, lr}
 8017766:	b089      	sub	sp, #36	@ 0x24
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
	// Initialize the state packet
	hmenu->state_packet = AllocateValueArr(64);
 801776c:	2040      	movs	r0, #64	@ 0x40
 801776e:	f7ff ffa1 	bl	80176b4 <AllocateValueArr>
 8017772:	4602      	mov	r2, r0
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	611a      	str	r2, [r3, #16]
	memset(hmenu->state_packet, 0x00, 64);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	691b      	ldr	r3, [r3, #16]
 801777c:	2240      	movs	r2, #64	@ 0x40
 801777e:	2100      	movs	r1, #0
 8017780:	4618      	mov	r0, r3
 8017782:	f003 fe5e 	bl	801b442 <memset>

	// Allocate pages
	hmenu->num_pages = 3;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2203      	movs	r2, #3
 801778a:	721a      	strb	r2, [r3, #8]
	hmenu->pages = AllocatePages(hmenu->num_pages);
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	7a1b      	ldrb	r3, [r3, #8]
 8017790:	4618      	mov	r0, r3
 8017792:	f7ff ffd5 	bl	8017740 <AllocatePages>
 8017796:	4602      	mov	r2, r0
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	60da      	str	r2, [r3, #12]

	// PAGE 0 (CAMERA)
	hmenu->pages[0].title = AllocateString("CAMERA");
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	68dc      	ldr	r4, [r3, #12]
 80177a0:	4893      	ldr	r0, [pc, #588]	@ (80179f0 <MENU_Init+0x28c>)
 80177a2:	f7ff ff95 	bl	80176d0 <AllocateString>
 80177a6:	4603      	mov	r3, r0
 80177a8:	6023      	str	r3, [r4, #0]

	hmenu->pages[0].num_properties = 3;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	68db      	ldr	r3, [r3, #12]
 80177ae:	2203      	movs	r2, #3
 80177b0:	711a      	strb	r2, [r3, #4]
	hmenu->pages[0].properties = AllocateProperties(hmenu->pages[0].num_properties);
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	68db      	ldr	r3, [r3, #12]
 80177b6:	791a      	ldrb	r2, [r3, #4]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	68dc      	ldr	r4, [r3, #12]
 80177bc:	4610      	mov	r0, r2
 80177be:	f7ff ffad 	bl	801771c <AllocateProperties>
 80177c2:	4603      	mov	r3, r0
 80177c4:	60a3      	str	r3, [r4, #8]

	// Camera Quality
	hmenu->pages[0].properties[0].name = AllocateString("QUALITY");
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	68db      	ldr	r3, [r3, #12]
 80177ca:	689c      	ldr	r4, [r3, #8]
 80177cc:	4889      	ldr	r0, [pc, #548]	@ (80179f4 <MENU_Init+0x290>)
 80177ce:	f7ff ff7f 	bl	80176d0 <AllocateString>
 80177d2:	4603      	mov	r3, r0
 80177d4:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].packet_byte = OP_CAMERA_QUALITY;
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	68db      	ldr	r3, [r3, #12]
 80177da:	689b      	ldr	r3, [r3, #8]
 80177dc:	2201      	movs	r2, #1
 80177de:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[0].num_options = 4;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	689b      	ldr	r3, [r3, #8]
 80177e6:	2204      	movs	r2, #4
 80177e8:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[0].option_names = AllocateStringArr(hmenu->pages[0].properties[0].num_options);
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	68db      	ldr	r3, [r3, #12]
 80177ee:	689b      	ldr	r3, [r3, #8]
 80177f0:	795a      	ldrb	r2, [r3, #5]
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	68db      	ldr	r3, [r3, #12]
 80177f6:	689c      	ldr	r4, [r3, #8]
 80177f8:	4610      	mov	r0, r2
 80177fa:	f7ff ff80 	bl	80176fe <AllocateStringArr>
 80177fe:	4603      	mov	r3, r0
 8017800:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[0].option_names[0] = AllocateString("LOW");
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	68db      	ldr	r3, [r3, #12]
 8017806:	689b      	ldr	r3, [r3, #8]
 8017808:	689c      	ldr	r4, [r3, #8]
 801780a:	487b      	ldr	r0, [pc, #492]	@ (80179f8 <MENU_Init+0x294>)
 801780c:	f7ff ff60 	bl	80176d0 <AllocateString>
 8017810:	4603      	mov	r3, r0
 8017812:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[1] = AllocateString("MED");
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	68db      	ldr	r3, [r3, #12]
 8017818:	689b      	ldr	r3, [r3, #8]
 801781a:	689b      	ldr	r3, [r3, #8]
 801781c:	1d1c      	adds	r4, r3, #4
 801781e:	4877      	ldr	r0, [pc, #476]	@ (80179fc <MENU_Init+0x298>)
 8017820:	f7ff ff56 	bl	80176d0 <AllocateString>
 8017824:	4603      	mov	r3, r0
 8017826:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[2] = AllocateString("HIGH");
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	689b      	ldr	r3, [r3, #8]
 801782e:	689b      	ldr	r3, [r3, #8]
 8017830:	f103 0408 	add.w	r4, r3, #8
 8017834:	4872      	ldr	r0, [pc, #456]	@ (8017a00 <MENU_Init+0x29c>)
 8017836:	f7ff ff4b 	bl	80176d0 <AllocateString>
 801783a:	4603      	mov	r3, r0
 801783c:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[0].option_names[3] = AllocateString("BEST");
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	68db      	ldr	r3, [r3, #12]
 8017842:	689b      	ldr	r3, [r3, #8]
 8017844:	689b      	ldr	r3, [r3, #8]
 8017846:	f103 040c 	add.w	r4, r3, #12
 801784a:	486e      	ldr	r0, [pc, #440]	@ (8017a04 <MENU_Init+0x2a0>)
 801784c:	f7ff ff40 	bl	80176d0 <AllocateString>
 8017850:	4603      	mov	r3, r0
 8017852:	6023      	str	r3, [r4, #0]

	// Camera Vertical Shift
	hmenu->pages[0].properties[1].name = AllocateString("SHOW MS");
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	68db      	ldr	r3, [r3, #12]
 8017858:	689b      	ldr	r3, [r3, #8]
 801785a:	f103 040c 	add.w	r4, r3, #12
 801785e:	486a      	ldr	r0, [pc, #424]	@ (8017a08 <MENU_Init+0x2a4>)
 8017860:	f7ff ff36 	bl	80176d0 <AllocateString>
 8017864:	4603      	mov	r3, r0
 8017866:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].packet_byte = OP_CAMERA_FRAMETIME;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	68db      	ldr	r3, [r3, #12]
 801786c:	689b      	ldr	r3, [r3, #8]
 801786e:	330c      	adds	r3, #12
 8017870:	2202      	movs	r2, #2
 8017872:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[1].num_options = 2;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	68db      	ldr	r3, [r3, #12]
 8017878:	689b      	ldr	r3, [r3, #8]
 801787a:	330c      	adds	r3, #12
 801787c:	2202      	movs	r2, #2
 801787e:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[1].option_names = AllocateStringArr(hmenu->pages[0].properties[1].num_options);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	689b      	ldr	r3, [r3, #8]
 8017886:	330c      	adds	r3, #12
 8017888:	795a      	ldrb	r2, [r3, #5]
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	689b      	ldr	r3, [r3, #8]
 8017890:	f103 040c 	add.w	r4, r3, #12
 8017894:	4610      	mov	r0, r2
 8017896:	f7ff ff32 	bl	80176fe <AllocateStringArr>
 801789a:	4603      	mov	r3, r0
 801789c:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[1].option_names[0] = AllocateString("[\x83\x83]");
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	689b      	ldr	r3, [r3, #8]
 80178a4:	330c      	adds	r3, #12
 80178a6:	689c      	ldr	r4, [r3, #8]
 80178a8:	4858      	ldr	r0, [pc, #352]	@ (8017a0c <MENU_Init+0x2a8>)
 80178aa:	f7ff ff11 	bl	80176d0 <AllocateString>
 80178ae:	4603      	mov	r3, r0
 80178b0:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[1].option_names[1] = AllocateString("[\x80\x80]");
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	68db      	ldr	r3, [r3, #12]
 80178b6:	689b      	ldr	r3, [r3, #8]
 80178b8:	330c      	adds	r3, #12
 80178ba:	689b      	ldr	r3, [r3, #8]
 80178bc:	1d1c      	adds	r4, r3, #4
 80178be:	4854      	ldr	r0, [pc, #336]	@ (8017a10 <MENU_Init+0x2ac>)
 80178c0:	f7ff ff06 	bl	80176d0 <AllocateString>
 80178c4:	4603      	mov	r3, r0
 80178c6:	6023      	str	r3, [r4, #0]

	// Camera Mode
	hmenu->pages[0].properties[2].name = AllocateString("ENCODING");
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	68db      	ldr	r3, [r3, #12]
 80178cc:	689b      	ldr	r3, [r3, #8]
 80178ce:	f103 0418 	add.w	r4, r3, #24
 80178d2:	4850      	ldr	r0, [pc, #320]	@ (8017a14 <MENU_Init+0x2b0>)
 80178d4:	f7ff fefc 	bl	80176d0 <AllocateString>
 80178d8:	4603      	mov	r3, r0
 80178da:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].packet_byte = OP_CAMERA_ENCODING;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	689b      	ldr	r3, [r3, #8]
 80178e2:	3318      	adds	r3, #24
 80178e4:	2200      	movs	r2, #0
 80178e6:	711a      	strb	r2, [r3, #4]

	hmenu->pages[0].properties[2].num_options = 2;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	68db      	ldr	r3, [r3, #12]
 80178ec:	689b      	ldr	r3, [r3, #8]
 80178ee:	3318      	adds	r3, #24
 80178f0:	2202      	movs	r2, #2
 80178f2:	715a      	strb	r2, [r3, #5]
	hmenu->pages[0].properties[2].option_names = AllocateStringArr(hmenu->pages[0].properties[2].num_options);
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	68db      	ldr	r3, [r3, #12]
 80178f8:	689b      	ldr	r3, [r3, #8]
 80178fa:	3318      	adds	r3, #24
 80178fc:	795a      	ldrb	r2, [r3, #5]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	68db      	ldr	r3, [r3, #12]
 8017902:	689b      	ldr	r3, [r3, #8]
 8017904:	f103 0418 	add.w	r4, r3, #24
 8017908:	4610      	mov	r0, r2
 801790a:	f7ff fef8 	bl	80176fe <AllocateStringArr>
 801790e:	4603      	mov	r3, r0
 8017910:	60a3      	str	r3, [r4, #8]
	hmenu->pages[0].properties[2].option_names[0] = AllocateString("JPEG");
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	68db      	ldr	r3, [r3, #12]
 8017916:	689b      	ldr	r3, [r3, #8]
 8017918:	3318      	adds	r3, #24
 801791a:	689c      	ldr	r4, [r3, #8]
 801791c:	483e      	ldr	r0, [pc, #248]	@ (8017a18 <MENU_Init+0x2b4>)
 801791e:	f7ff fed7 	bl	80176d0 <AllocateString>
 8017922:	4603      	mov	r3, r0
 8017924:	6023      	str	r3, [r4, #0]
	hmenu->pages[0].properties[2].option_names[1] = AllocateString("RAW");
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	68db      	ldr	r3, [r3, #12]
 801792a:	689b      	ldr	r3, [r3, #8]
 801792c:	3318      	adds	r3, #24
 801792e:	689b      	ldr	r3, [r3, #8]
 8017930:	1d1c      	adds	r4, r3, #4
 8017932:	483a      	ldr	r0, [pc, #232]	@ (8017a1c <MENU_Init+0x2b8>)
 8017934:	f7ff fecc 	bl	80176d0 <AllocateString>
 8017938:	4603      	mov	r3, r0
 801793a:	6023      	str	r3, [r4, #0]

	// PAGE 1 (LIGHTS)
	hmenu->pages[1].title = AllocateString("LIGHTING");
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	68db      	ldr	r3, [r3, #12]
 8017940:	f103 040c 	add.w	r4, r3, #12
 8017944:	4836      	ldr	r0, [pc, #216]	@ (8017a20 <MENU_Init+0x2bc>)
 8017946:	f7ff fec3 	bl	80176d0 <AllocateString>
 801794a:	4603      	mov	r3, r0
 801794c:	6023      	str	r3, [r4, #0]

	hmenu->pages[1].num_properties = 4;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	68db      	ldr	r3, [r3, #12]
 8017952:	330c      	adds	r3, #12
 8017954:	2204      	movs	r2, #4
 8017956:	711a      	strb	r2, [r3, #4]
	hmenu->pages[1].properties = AllocateProperties(hmenu->pages[1].num_properties);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	68db      	ldr	r3, [r3, #12]
 801795c:	330c      	adds	r3, #12
 801795e:	791a      	ldrb	r2, [r3, #4]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	68db      	ldr	r3, [r3, #12]
 8017964:	f103 040c 	add.w	r4, r3, #12
 8017968:	4610      	mov	r0, r2
 801796a:	f7ff fed7 	bl	801771c <AllocateProperties>
 801796e:	4603      	mov	r3, r0
 8017970:	60a3      	str	r3, [r4, #8]

	// Pre-allocate the percent strings
	uint8_t *percentStr[5];
	percentStr[0] = AllocateString("[\x80\x80\x80\x80]");
 8017972:	482c      	ldr	r0, [pc, #176]	@ (8017a24 <MENU_Init+0x2c0>)
 8017974:	f7ff feac 	bl	80176d0 <AllocateString>
 8017978:	4603      	mov	r3, r0
 801797a:	60bb      	str	r3, [r7, #8]
	percentStr[1] = AllocateString("[\x83\x80\x80\x80]");
 801797c:	482a      	ldr	r0, [pc, #168]	@ (8017a28 <MENU_Init+0x2c4>)
 801797e:	f7ff fea7 	bl	80176d0 <AllocateString>
 8017982:	4603      	mov	r3, r0
 8017984:	60fb      	str	r3, [r7, #12]
	percentStr[2] = AllocateString("[\x83\x83\x80\x80]");
 8017986:	4829      	ldr	r0, [pc, #164]	@ (8017a2c <MENU_Init+0x2c8>)
 8017988:	f7ff fea2 	bl	80176d0 <AllocateString>
 801798c:	4603      	mov	r3, r0
 801798e:	613b      	str	r3, [r7, #16]
	percentStr[3] = AllocateString("[\x83\x83\x83\x80]");
 8017990:	4827      	ldr	r0, [pc, #156]	@ (8017a30 <MENU_Init+0x2cc>)
 8017992:	f7ff fe9d 	bl	80176d0 <AllocateString>
 8017996:	4603      	mov	r3, r0
 8017998:	617b      	str	r3, [r7, #20]
	percentStr[4] = AllocateString("[\x83\x83\x83\x83]");
 801799a:	4826      	ldr	r0, [pc, #152]	@ (8017a34 <MENU_Init+0x2d0>)
 801799c:	f7ff fe98 	bl	80176d0 <AllocateString>
 80179a0:	4603      	mov	r3, r0
 80179a2:	61bb      	str	r3, [r7, #24]

	hmenu->pages[1].properties[0].name = AllocateString("HEADLIGHTS");
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	68db      	ldr	r3, [r3, #12]
 80179a8:	330c      	adds	r3, #12
 80179aa:	689c      	ldr	r4, [r3, #8]
 80179ac:	4822      	ldr	r0, [pc, #136]	@ (8017a38 <MENU_Init+0x2d4>)
 80179ae:	f7ff fe8f 	bl	80176d0 <AllocateString>
 80179b2:	4603      	mov	r3, r0
 80179b4:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[0].packet_byte = 3;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	68db      	ldr	r3, [r3, #12]
 80179ba:	330c      	adds	r3, #12
 80179bc:	689b      	ldr	r3, [r3, #8]
 80179be:	2203      	movs	r2, #3
 80179c0:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[0].num_options = 5;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	68db      	ldr	r3, [r3, #12]
 80179c6:	330c      	adds	r3, #12
 80179c8:	689b      	ldr	r3, [r3, #8]
 80179ca:	2205      	movs	r2, #5
 80179cc:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[0].option_names = AllocateStringArr(hmenu->pages[1].properties[0].num_options);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	68db      	ldr	r3, [r3, #12]
 80179d2:	330c      	adds	r3, #12
 80179d4:	689b      	ldr	r3, [r3, #8]
 80179d6:	795a      	ldrb	r2, [r3, #5]
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	68db      	ldr	r3, [r3, #12]
 80179dc:	330c      	adds	r3, #12
 80179de:	689c      	ldr	r4, [r3, #8]
 80179e0:	4610      	mov	r0, r2
 80179e2:	f7ff fe8c 	bl	80176fe <AllocateStringArr>
 80179e6:	4603      	mov	r3, r0
 80179e8:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 80179ea:	2300      	movs	r3, #0
 80179ec:	77fb      	strb	r3, [r7, #31]
 80179ee:	e037      	b.n	8017a60 <MENU_Init+0x2fc>
 80179f0:	0801d478 	.word	0x0801d478
 80179f4:	0801d480 	.word	0x0801d480
 80179f8:	0801d488 	.word	0x0801d488
 80179fc:	0801d48c 	.word	0x0801d48c
 8017a00:	0801d490 	.word	0x0801d490
 8017a04:	0801d498 	.word	0x0801d498
 8017a08:	0801d4a0 	.word	0x0801d4a0
 8017a0c:	0801d4a8 	.word	0x0801d4a8
 8017a10:	0801d4b0 	.word	0x0801d4b0
 8017a14:	0801d4b8 	.word	0x0801d4b8
 8017a18:	0801d4c4 	.word	0x0801d4c4
 8017a1c:	0801d4cc 	.word	0x0801d4cc
 8017a20:	0801d4d0 	.word	0x0801d4d0
 8017a24:	0801d4dc 	.word	0x0801d4dc
 8017a28:	0801d4e4 	.word	0x0801d4e4
 8017a2c:	0801d4ec 	.word	0x0801d4ec
 8017a30:	0801d4f4 	.word	0x0801d4f4
 8017a34:	0801d4fc 	.word	0x0801d4fc
 8017a38:	0801d504 	.word	0x0801d504
		hmenu->pages[1].properties[0].option_names[i] = percentStr[i];
 8017a3c:	7ffb      	ldrb	r3, [r7, #31]
 8017a3e:	687a      	ldr	r2, [r7, #4]
 8017a40:	68d2      	ldr	r2, [r2, #12]
 8017a42:	320c      	adds	r2, #12
 8017a44:	6892      	ldr	r2, [r2, #8]
 8017a46:	6891      	ldr	r1, [r2, #8]
 8017a48:	7ffa      	ldrb	r2, [r7, #31]
 8017a4a:	0092      	lsls	r2, r2, #2
 8017a4c:	440a      	add	r2, r1
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	3320      	adds	r3, #32
 8017a52:	443b      	add	r3, r7
 8017a54:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8017a58:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 8017a5a:	7ffb      	ldrb	r3, [r7, #31]
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	77fb      	strb	r3, [r7, #31]
 8017a60:	7ffb      	ldrb	r3, [r7, #31]
 8017a62:	2b04      	cmp	r3, #4
 8017a64:	d9ea      	bls.n	8017a3c <MENU_Init+0x2d8>

	hmenu->pages[1].properties[1].name = AllocateString("INT. R");
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	68db      	ldr	r3, [r3, #12]
 8017a6a:	330c      	adds	r3, #12
 8017a6c:	689b      	ldr	r3, [r3, #8]
 8017a6e:	f103 040c 	add.w	r4, r3, #12
 8017a72:	4864      	ldr	r0, [pc, #400]	@ (8017c04 <MENU_Init+0x4a0>)
 8017a74:	f7ff fe2c 	bl	80176d0 <AllocateString>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[1].packet_byte = 4;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	68db      	ldr	r3, [r3, #12]
 8017a80:	330c      	adds	r3, #12
 8017a82:	689b      	ldr	r3, [r3, #8]
 8017a84:	330c      	adds	r3, #12
 8017a86:	2204      	movs	r2, #4
 8017a88:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[1].num_options = 5;
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	68db      	ldr	r3, [r3, #12]
 8017a8e:	330c      	adds	r3, #12
 8017a90:	689b      	ldr	r3, [r3, #8]
 8017a92:	330c      	adds	r3, #12
 8017a94:	2205      	movs	r2, #5
 8017a96:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[1].option_names = AllocateStringArr(hmenu->pages[1].properties[1].num_options);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	68db      	ldr	r3, [r3, #12]
 8017a9c:	330c      	adds	r3, #12
 8017a9e:	689b      	ldr	r3, [r3, #8]
 8017aa0:	330c      	adds	r3, #12
 8017aa2:	795a      	ldrb	r2, [r3, #5]
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	68db      	ldr	r3, [r3, #12]
 8017aa8:	330c      	adds	r3, #12
 8017aaa:	689b      	ldr	r3, [r3, #8]
 8017aac:	f103 040c 	add.w	r4, r3, #12
 8017ab0:	4610      	mov	r0, r2
 8017ab2:	f7ff fe24 	bl	80176fe <AllocateStringArr>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 8017aba:	2300      	movs	r3, #0
 8017abc:	77bb      	strb	r3, [r7, #30]
 8017abe:	e012      	b.n	8017ae6 <MENU_Init+0x382>
		hmenu->pages[1].properties[1].option_names[i] = percentStr[i];
 8017ac0:	7fbb      	ldrb	r3, [r7, #30]
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	68d2      	ldr	r2, [r2, #12]
 8017ac6:	320c      	adds	r2, #12
 8017ac8:	6892      	ldr	r2, [r2, #8]
 8017aca:	320c      	adds	r2, #12
 8017acc:	6891      	ldr	r1, [r2, #8]
 8017ace:	7fba      	ldrb	r2, [r7, #30]
 8017ad0:	0092      	lsls	r2, r2, #2
 8017ad2:	440a      	add	r2, r1
 8017ad4:	009b      	lsls	r3, r3, #2
 8017ad6:	3320      	adds	r3, #32
 8017ad8:	443b      	add	r3, r7
 8017ada:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8017ade:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 8017ae0:	7fbb      	ldrb	r3, [r7, #30]
 8017ae2:	3301      	adds	r3, #1
 8017ae4:	77bb      	strb	r3, [r7, #30]
 8017ae6:	7fbb      	ldrb	r3, [r7, #30]
 8017ae8:	2b04      	cmp	r3, #4
 8017aea:	d9e9      	bls.n	8017ac0 <MENU_Init+0x35c>

	hmenu->pages[1].properties[2].name = AllocateString("INT. G");
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	68db      	ldr	r3, [r3, #12]
 8017af0:	330c      	adds	r3, #12
 8017af2:	689b      	ldr	r3, [r3, #8]
 8017af4:	f103 0418 	add.w	r4, r3, #24
 8017af8:	4843      	ldr	r0, [pc, #268]	@ (8017c08 <MENU_Init+0x4a4>)
 8017afa:	f7ff fde9 	bl	80176d0 <AllocateString>
 8017afe:	4603      	mov	r3, r0
 8017b00:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[2].packet_byte = 5;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	68db      	ldr	r3, [r3, #12]
 8017b06:	330c      	adds	r3, #12
 8017b08:	689b      	ldr	r3, [r3, #8]
 8017b0a:	3318      	adds	r3, #24
 8017b0c:	2205      	movs	r2, #5
 8017b0e:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[2].num_options = 5;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	68db      	ldr	r3, [r3, #12]
 8017b14:	330c      	adds	r3, #12
 8017b16:	689b      	ldr	r3, [r3, #8]
 8017b18:	3318      	adds	r3, #24
 8017b1a:	2205      	movs	r2, #5
 8017b1c:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[2].option_names = AllocateStringArr(hmenu->pages[1].properties[2].num_options);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	330c      	adds	r3, #12
 8017b24:	689b      	ldr	r3, [r3, #8]
 8017b26:	3318      	adds	r3, #24
 8017b28:	795a      	ldrb	r2, [r3, #5]
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	68db      	ldr	r3, [r3, #12]
 8017b2e:	330c      	adds	r3, #12
 8017b30:	689b      	ldr	r3, [r3, #8]
 8017b32:	f103 0418 	add.w	r4, r3, #24
 8017b36:	4610      	mov	r0, r2
 8017b38:	f7ff fde1 	bl	80176fe <AllocateStringArr>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 8017b40:	2300      	movs	r3, #0
 8017b42:	777b      	strb	r3, [r7, #29]
 8017b44:	e012      	b.n	8017b6c <MENU_Init+0x408>
		hmenu->pages[1].properties[2].option_names[i] = percentStr[i];
 8017b46:	7f7b      	ldrb	r3, [r7, #29]
 8017b48:	687a      	ldr	r2, [r7, #4]
 8017b4a:	68d2      	ldr	r2, [r2, #12]
 8017b4c:	320c      	adds	r2, #12
 8017b4e:	6892      	ldr	r2, [r2, #8]
 8017b50:	3218      	adds	r2, #24
 8017b52:	6891      	ldr	r1, [r2, #8]
 8017b54:	7f7a      	ldrb	r2, [r7, #29]
 8017b56:	0092      	lsls	r2, r2, #2
 8017b58:	440a      	add	r2, r1
 8017b5a:	009b      	lsls	r3, r3, #2
 8017b5c:	3320      	adds	r3, #32
 8017b5e:	443b      	add	r3, r7
 8017b60:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8017b64:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 8017b66:	7f7b      	ldrb	r3, [r7, #29]
 8017b68:	3301      	adds	r3, #1
 8017b6a:	777b      	strb	r3, [r7, #29]
 8017b6c:	7f7b      	ldrb	r3, [r7, #29]
 8017b6e:	2b04      	cmp	r3, #4
 8017b70:	d9e9      	bls.n	8017b46 <MENU_Init+0x3e2>

	hmenu->pages[1].properties[3].name = AllocateString("INT. B");
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	68db      	ldr	r3, [r3, #12]
 8017b76:	330c      	adds	r3, #12
 8017b78:	689b      	ldr	r3, [r3, #8]
 8017b7a:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017b7e:	4823      	ldr	r0, [pc, #140]	@ (8017c0c <MENU_Init+0x4a8>)
 8017b80:	f7ff fda6 	bl	80176d0 <AllocateString>
 8017b84:	4603      	mov	r3, r0
 8017b86:	6023      	str	r3, [r4, #0]
	hmenu->pages[1].properties[3].packet_byte = 6;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	68db      	ldr	r3, [r3, #12]
 8017b8c:	330c      	adds	r3, #12
 8017b8e:	689b      	ldr	r3, [r3, #8]
 8017b90:	3324      	adds	r3, #36	@ 0x24
 8017b92:	2206      	movs	r2, #6
 8017b94:	711a      	strb	r2, [r3, #4]

	hmenu->pages[1].properties[3].num_options = 5;
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	68db      	ldr	r3, [r3, #12]
 8017b9a:	330c      	adds	r3, #12
 8017b9c:	689b      	ldr	r3, [r3, #8]
 8017b9e:	3324      	adds	r3, #36	@ 0x24
 8017ba0:	2205      	movs	r2, #5
 8017ba2:	715a      	strb	r2, [r3, #5]
	hmenu->pages[1].properties[3].option_names = AllocateStringArr(hmenu->pages[1].properties[3].num_options);
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	68db      	ldr	r3, [r3, #12]
 8017ba8:	330c      	adds	r3, #12
 8017baa:	689b      	ldr	r3, [r3, #8]
 8017bac:	3324      	adds	r3, #36	@ 0x24
 8017bae:	795a      	ldrb	r2, [r3, #5]
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	68db      	ldr	r3, [r3, #12]
 8017bb4:	330c      	adds	r3, #12
 8017bb6:	689b      	ldr	r3, [r3, #8]
 8017bb8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8017bbc:	4610      	mov	r0, r2
 8017bbe:	f7ff fd9e 	bl	80176fe <AllocateStringArr>
 8017bc2:	4603      	mov	r3, r0
 8017bc4:	60a3      	str	r3, [r4, #8]

	for (uint8_t i = 0; i < 5; i++)
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	773b      	strb	r3, [r7, #28]
 8017bca:	e012      	b.n	8017bf2 <MENU_Init+0x48e>
		hmenu->pages[1].properties[3].option_names[i] = percentStr[i];
 8017bcc:	7f3b      	ldrb	r3, [r7, #28]
 8017bce:	687a      	ldr	r2, [r7, #4]
 8017bd0:	68d2      	ldr	r2, [r2, #12]
 8017bd2:	320c      	adds	r2, #12
 8017bd4:	6892      	ldr	r2, [r2, #8]
 8017bd6:	3224      	adds	r2, #36	@ 0x24
 8017bd8:	6891      	ldr	r1, [r2, #8]
 8017bda:	7f3a      	ldrb	r2, [r7, #28]
 8017bdc:	0092      	lsls	r2, r2, #2
 8017bde:	440a      	add	r2, r1
 8017be0:	009b      	lsls	r3, r3, #2
 8017be2:	3320      	adds	r3, #32
 8017be4:	443b      	add	r3, r7
 8017be6:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8017bea:	6013      	str	r3, [r2, #0]
	for (uint8_t i = 0; i < 5; i++)
 8017bec:	7f3b      	ldrb	r3, [r7, #28]
 8017bee:	3301      	adds	r3, #1
 8017bf0:	773b      	strb	r3, [r7, #28]
 8017bf2:	7f3b      	ldrb	r3, [r7, #28]
 8017bf4:	2b04      	cmp	r3, #4
 8017bf6:	d9e9      	bls.n	8017bcc <MENU_Init+0x468>

	return 0;
 8017bf8:	2300      	movs	r3, #0
}
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	3724      	adds	r7, #36	@ 0x24
 8017bfe:	46bd      	mov	sp, r7
 8017c00:	bd90      	pop	{r4, r7, pc}
 8017c02:	bf00      	nop
 8017c04:	0801d510 	.word	0x0801d510
 8017c08:	0801d518 	.word	0x0801d518
 8017c0c:	0801d520 	.word	0x0801d520

08017c10 <MENU_ParseInput>:
			SSD1306_DrawString(hmenu->ssdR_handle, " <", 2);
		}
	}
}

void MENU_ParseInput(Menu_HandleTypeDef *hmenu, uint8_t inputs[4]) {
 8017c10:	b480      	push	{r7}
 8017c12:	b087      	sub	sp, #28
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
 8017c18:	6039      	str	r1, [r7, #0]
	if (inputs[0]) {
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	781b      	ldrb	r3, [r3, #0]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d01d      	beq.n	8017c5e <MENU_ParseInput+0x4e>
		if (hmenu->current_page == 0) {
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	7d1b      	ldrb	r3, [r3, #20]
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d106      	bne.n	8017c38 <MENU_ParseInput+0x28>
			hmenu->current_page = hmenu->num_pages - 1;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	7a1b      	ldrb	r3, [r3, #8]
 8017c2e:	3b01      	subs	r3, #1
 8017c30:	b2da      	uxtb	r2, r3
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	751a      	strb	r2, [r3, #20]
 8017c36:	e005      	b.n	8017c44 <MENU_ParseInput+0x34>
		} else {
			hmenu->current_page--;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	7d1b      	ldrb	r3, [r3, #20]
 8017c3c:	3b01      	subs	r3, #1
 8017c3e:	b2da      	uxtb	r2, r3
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	2200      	movs	r2, #0
 8017c48:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2200      	movs	r2, #0
 8017c54:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	22ff      	movs	r2, #255	@ 0xff
 8017c5a:	75da      	strb	r2, [r3, #23]
 8017c5c:	e022      	b.n	8017ca4 <MENU_ParseInput+0x94>
	} else if (inputs[1]) {
 8017c5e:	683b      	ldr	r3, [r7, #0]
 8017c60:	3301      	adds	r3, #1
 8017c62:	781b      	ldrb	r3, [r3, #0]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d01d      	beq.n	8017ca4 <MENU_ParseInput+0x94>
		if (hmenu->current_page == hmenu->num_pages - 1) {
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	7d1b      	ldrb	r3, [r3, #20]
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	7a1b      	ldrb	r3, [r3, #8]
 8017c72:	3b01      	subs	r3, #1
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d103      	bne.n	8017c80 <MENU_ParseInput+0x70>
			hmenu->current_page = 0;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	751a      	strb	r2, [r3, #20]
 8017c7e:	e005      	b.n	8017c8c <MENU_ParseInput+0x7c>
		} else {
			hmenu->current_page++;
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	7d1b      	ldrb	r3, [r3, #20]
 8017c84:	3301      	adds	r3, #1
 8017c86:	b2da      	uxtb	r2, r3
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	751a      	strb	r2, [r3, #20]
		}
		hmenu->page_anim = 0;
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	2200      	movs	r2, #0
 8017c90:	755a      	strb	r2, [r3, #21]
		hmenu->property_anim = 0;
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	2200      	movs	r2, #0
 8017c96:	761a      	strb	r2, [r3, #24]
		hmenu->current_property = 0;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	759a      	strb	r2, [r3, #22]
		hmenu->last_property = 0xFF;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	22ff      	movs	r2, #255	@ 0xff
 8017ca2:	75da      	strb	r2, [r3, #23]
	}

	if (inputs[3]) {
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	3303      	adds	r3, #3
 8017ca8:	781b      	ldrb	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d021      	beq.n	8017cf2 <MENU_ParseInput+0xe2>
		hmenu->last_property = hmenu->current_property;
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	7d9a      	ldrb	r2, [r3, #22]
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	75da      	strb	r2, [r3, #23]
		if (hmenu->current_property == hmenu->pages[hmenu->current_page].num_properties - 1)
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	7d9b      	ldrb	r3, [r3, #22]
 8017cba:	4618      	mov	r0, r3
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	68da      	ldr	r2, [r3, #12]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	7d1b      	ldrb	r3, [r3, #20]
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	460b      	mov	r3, r1
 8017cc8:	005b      	lsls	r3, r3, #1
 8017cca:	440b      	add	r3, r1
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	4413      	add	r3, r2
 8017cd0:	791b      	ldrb	r3, [r3, #4]
 8017cd2:	3b01      	subs	r3, #1
 8017cd4:	4298      	cmp	r0, r3
 8017cd6:	d103      	bne.n	8017ce0 <MENU_ParseInput+0xd0>
			hmenu->current_property = 0;
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	2200      	movs	r2, #0
 8017cdc:	759a      	strb	r2, [r3, #22]
 8017cde:	e005      	b.n	8017cec <MENU_ParseInput+0xdc>
		else
			hmenu->current_property++;
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	7d9b      	ldrb	r3, [r3, #22]
 8017ce4:	3301      	adds	r3, #1
 8017ce6:	b2da      	uxtb	r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	759a      	strb	r2, [r3, #22]
		hmenu->property_anim = 0;
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	2200      	movs	r2, #0
 8017cf0:	761a      	strb	r2, [r3, #24]
	}

	if (inputs[2]) {
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	3302      	adds	r3, #2
 8017cf6:	781b      	ldrb	r3, [r3, #0]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d032      	beq.n	8017d62 <MENU_ParseInput+0x152>
		Menu_Property activeProperty = hmenu->pages[hmenu->current_page].properties[hmenu->current_property];
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	68da      	ldr	r2, [r3, #12]
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	7d1b      	ldrb	r3, [r3, #20]
 8017d04:	4619      	mov	r1, r3
 8017d06:	460b      	mov	r3, r1
 8017d08:	005b      	lsls	r3, r3, #1
 8017d0a:	440b      	add	r3, r1
 8017d0c:	009b      	lsls	r3, r3, #2
 8017d0e:	4413      	add	r3, r2
 8017d10:	689a      	ldr	r2, [r3, #8]
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	7d9b      	ldrb	r3, [r3, #22]
 8017d16:	4619      	mov	r1, r3
 8017d18:	460b      	mov	r3, r1
 8017d1a:	005b      	lsls	r3, r3, #1
 8017d1c:	440b      	add	r3, r1
 8017d1e:	009b      	lsls	r3, r3, #2
 8017d20:	441a      	add	r2, r3
 8017d22:	f107 0308 	add.w	r3, r7, #8
 8017d26:	ca07      	ldmia	r2, {r0, r1, r2}
 8017d28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		uint8_t propertyByte = activeProperty.packet_byte;
 8017d2c:	7b3b      	ldrb	r3, [r7, #12]
 8017d2e:	75fb      	strb	r3, [r7, #23]
		if (hmenu->state_packet[propertyByte] == activeProperty.num_options - 1)
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	691a      	ldr	r2, [r3, #16]
 8017d34:	7dfb      	ldrb	r3, [r7, #23]
 8017d36:	4413      	add	r3, r2
 8017d38:	781b      	ldrb	r3, [r3, #0]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	7b7b      	ldrb	r3, [r7, #13]
 8017d3e:	3b01      	subs	r3, #1
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d106      	bne.n	8017d52 <MENU_ParseInput+0x142>
			hmenu->state_packet[propertyByte] = 0;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	691a      	ldr	r2, [r3, #16]
 8017d48:	7dfb      	ldrb	r3, [r7, #23]
 8017d4a:	4413      	add	r3, r2
 8017d4c:	2200      	movs	r2, #0
 8017d4e:	701a      	strb	r2, [r3, #0]
		else
			hmenu->state_packet[propertyByte]++;
	}
}
 8017d50:	e007      	b.n	8017d62 <MENU_ParseInput+0x152>
			hmenu->state_packet[propertyByte]++;
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	691a      	ldr	r2, [r3, #16]
 8017d56:	7dfb      	ldrb	r3, [r7, #23]
 8017d58:	4413      	add	r3, r2
 8017d5a:	781a      	ldrb	r2, [r3, #0]
 8017d5c:	3201      	adds	r2, #1
 8017d5e:	b2d2      	uxtb	r2, r2
 8017d60:	701a      	strb	r2, [r3, #0]
}
 8017d62:	bf00      	nop
 8017d64:	371c      	adds	r7, #28
 8017d66:	46bd      	mov	sp, r7
 8017d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d6c:	4770      	bx	lr
	...

08017d70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b084      	sub	sp, #16
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
 8017d78:	460b      	mov	r3, r1
 8017d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017d7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8017d80:	f002 fd08 	bl	801a794 <USBD_static_malloc>
 8017d84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d109      	bne.n	8017da0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	32b0      	adds	r2, #176	@ 0xb0
 8017d96:	2100      	movs	r1, #0
 8017d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8017d9c:	2302      	movs	r3, #2
 8017d9e:	e0d4      	b.n	8017f4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8017da0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8017da4:	2100      	movs	r1, #0
 8017da6:	68f8      	ldr	r0, [r7, #12]
 8017da8:	f003 fb4b 	bl	801b442 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	32b0      	adds	r2, #176	@ 0xb0
 8017db6:	68f9      	ldr	r1, [r7, #12]
 8017db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	32b0      	adds	r2, #176	@ 0xb0
 8017dc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	7c1b      	ldrb	r3, [r3, #16]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d138      	bne.n	8017e4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8017f54 <USBD_CDC_Init+0x1e4>)
 8017dda:	7819      	ldrb	r1, [r3, #0]
 8017ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017de0:	2202      	movs	r2, #2
 8017de2:	6878      	ldr	r0, [r7, #4]
 8017de4:	f002 fbb3 	bl	801a54e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017de8:	4b5a      	ldr	r3, [pc, #360]	@ (8017f54 <USBD_CDC_Init+0x1e4>)
 8017dea:	781b      	ldrb	r3, [r3, #0]
 8017dec:	f003 020f 	and.w	r2, r3, #15
 8017df0:	6879      	ldr	r1, [r7, #4]
 8017df2:	4613      	mov	r3, r2
 8017df4:	009b      	lsls	r3, r3, #2
 8017df6:	4413      	add	r3, r2
 8017df8:	009b      	lsls	r3, r3, #2
 8017dfa:	440b      	add	r3, r1
 8017dfc:	3324      	adds	r3, #36	@ 0x24
 8017dfe:	2201      	movs	r2, #1
 8017e00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017e02:	4b55      	ldr	r3, [pc, #340]	@ (8017f58 <USBD_CDC_Init+0x1e8>)
 8017e04:	7819      	ldrb	r1, [r3, #0]
 8017e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017e0a:	2202      	movs	r2, #2
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	f002 fb9e 	bl	801a54e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017e12:	4b51      	ldr	r3, [pc, #324]	@ (8017f58 <USBD_CDC_Init+0x1e8>)
 8017e14:	781b      	ldrb	r3, [r3, #0]
 8017e16:	f003 020f 	and.w	r2, r3, #15
 8017e1a:	6879      	ldr	r1, [r7, #4]
 8017e1c:	4613      	mov	r3, r2
 8017e1e:	009b      	lsls	r3, r3, #2
 8017e20:	4413      	add	r3, r2
 8017e22:	009b      	lsls	r3, r3, #2
 8017e24:	440b      	add	r3, r1
 8017e26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e2a:	2201      	movs	r2, #1
 8017e2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8017e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8017f5c <USBD_CDC_Init+0x1ec>)
 8017e30:	781b      	ldrb	r3, [r3, #0]
 8017e32:	f003 020f 	and.w	r2, r3, #15
 8017e36:	6879      	ldr	r1, [r7, #4]
 8017e38:	4613      	mov	r3, r2
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	4413      	add	r3, r2
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	440b      	add	r3, r1
 8017e42:	3326      	adds	r3, #38	@ 0x26
 8017e44:	2210      	movs	r2, #16
 8017e46:	801a      	strh	r2, [r3, #0]
 8017e48:	e035      	b.n	8017eb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8017e4a:	4b42      	ldr	r3, [pc, #264]	@ (8017f54 <USBD_CDC_Init+0x1e4>)
 8017e4c:	7819      	ldrb	r1, [r3, #0]
 8017e4e:	2340      	movs	r3, #64	@ 0x40
 8017e50:	2202      	movs	r2, #2
 8017e52:	6878      	ldr	r0, [r7, #4]
 8017e54:	f002 fb7b 	bl	801a54e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8017e58:	4b3e      	ldr	r3, [pc, #248]	@ (8017f54 <USBD_CDC_Init+0x1e4>)
 8017e5a:	781b      	ldrb	r3, [r3, #0]
 8017e5c:	f003 020f 	and.w	r2, r3, #15
 8017e60:	6879      	ldr	r1, [r7, #4]
 8017e62:	4613      	mov	r3, r2
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	4413      	add	r3, r2
 8017e68:	009b      	lsls	r3, r3, #2
 8017e6a:	440b      	add	r3, r1
 8017e6c:	3324      	adds	r3, #36	@ 0x24
 8017e6e:	2201      	movs	r2, #1
 8017e70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8017e72:	4b39      	ldr	r3, [pc, #228]	@ (8017f58 <USBD_CDC_Init+0x1e8>)
 8017e74:	7819      	ldrb	r1, [r3, #0]
 8017e76:	2340      	movs	r3, #64	@ 0x40
 8017e78:	2202      	movs	r2, #2
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f002 fb67 	bl	801a54e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8017e80:	4b35      	ldr	r3, [pc, #212]	@ (8017f58 <USBD_CDC_Init+0x1e8>)
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	f003 020f 	and.w	r2, r3, #15
 8017e88:	6879      	ldr	r1, [r7, #4]
 8017e8a:	4613      	mov	r3, r2
 8017e8c:	009b      	lsls	r3, r3, #2
 8017e8e:	4413      	add	r3, r2
 8017e90:	009b      	lsls	r3, r3, #2
 8017e92:	440b      	add	r3, r1
 8017e94:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017e98:	2201      	movs	r2, #1
 8017e9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8017e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8017f5c <USBD_CDC_Init+0x1ec>)
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	f003 020f 	and.w	r2, r3, #15
 8017ea4:	6879      	ldr	r1, [r7, #4]
 8017ea6:	4613      	mov	r3, r2
 8017ea8:	009b      	lsls	r3, r3, #2
 8017eaa:	4413      	add	r3, r2
 8017eac:	009b      	lsls	r3, r3, #2
 8017eae:	440b      	add	r3, r1
 8017eb0:	3326      	adds	r3, #38	@ 0x26
 8017eb2:	2210      	movs	r2, #16
 8017eb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017eb6:	4b29      	ldr	r3, [pc, #164]	@ (8017f5c <USBD_CDC_Init+0x1ec>)
 8017eb8:	7819      	ldrb	r1, [r3, #0]
 8017eba:	2308      	movs	r3, #8
 8017ebc:	2203      	movs	r2, #3
 8017ebe:	6878      	ldr	r0, [r7, #4]
 8017ec0:	f002 fb45 	bl	801a54e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8017ec4:	4b25      	ldr	r3, [pc, #148]	@ (8017f5c <USBD_CDC_Init+0x1ec>)
 8017ec6:	781b      	ldrb	r3, [r3, #0]
 8017ec8:	f003 020f 	and.w	r2, r3, #15
 8017ecc:	6879      	ldr	r1, [r7, #4]
 8017ece:	4613      	mov	r3, r2
 8017ed0:	009b      	lsls	r3, r3, #2
 8017ed2:	4413      	add	r3, r2
 8017ed4:	009b      	lsls	r3, r3, #2
 8017ed6:	440b      	add	r3, r1
 8017ed8:	3324      	adds	r3, #36	@ 0x24
 8017eda:	2201      	movs	r2, #1
 8017edc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8017ede:	68fb      	ldr	r3, [r7, #12]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017eec:	687a      	ldr	r2, [r7, #4]
 8017eee:	33b0      	adds	r3, #176	@ 0xb0
 8017ef0:	009b      	lsls	r3, r3, #2
 8017ef2:	4413      	add	r3, r2
 8017ef4:	685b      	ldr	r3, [r3, #4]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017efa:	68fb      	ldr	r3, [r7, #12]
 8017efc:	2200      	movs	r2, #0
 8017efe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	2200      	movs	r2, #0
 8017f06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d101      	bne.n	8017f18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8017f14:	2302      	movs	r3, #2
 8017f16:	e018      	b.n	8017f4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	7c1b      	ldrb	r3, [r3, #16]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d10a      	bne.n	8017f36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017f20:	4b0d      	ldr	r3, [pc, #52]	@ (8017f58 <USBD_CDC_Init+0x1e8>)
 8017f22:	7819      	ldrb	r1, [r3, #0]
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f002 fbfc 	bl	801a72c <USBD_LL_PrepareReceive>
 8017f34:	e008      	b.n	8017f48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8017f36:	4b08      	ldr	r3, [pc, #32]	@ (8017f58 <USBD_CDC_Init+0x1e8>)
 8017f38:	7819      	ldrb	r1, [r3, #0]
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8017f40:	2340      	movs	r3, #64	@ 0x40
 8017f42:	6878      	ldr	r0, [r7, #4]
 8017f44:	f002 fbf2 	bl	801a72c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017f48:	2300      	movs	r3, #0
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3710      	adds	r7, #16
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	240002d7 	.word	0x240002d7
 8017f58:	240002d8 	.word	0x240002d8
 8017f5c:	240002d9 	.word	0x240002d9

08017f60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	460b      	mov	r3, r1
 8017f6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8017f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8018058 <USBD_CDC_DeInit+0xf8>)
 8017f6e:	781b      	ldrb	r3, [r3, #0]
 8017f70:	4619      	mov	r1, r3
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f002 fb11 	bl	801a59a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8017f78:	4b37      	ldr	r3, [pc, #220]	@ (8018058 <USBD_CDC_DeInit+0xf8>)
 8017f7a:	781b      	ldrb	r3, [r3, #0]
 8017f7c:	f003 020f 	and.w	r2, r3, #15
 8017f80:	6879      	ldr	r1, [r7, #4]
 8017f82:	4613      	mov	r3, r2
 8017f84:	009b      	lsls	r3, r3, #2
 8017f86:	4413      	add	r3, r2
 8017f88:	009b      	lsls	r3, r3, #2
 8017f8a:	440b      	add	r3, r1
 8017f8c:	3324      	adds	r3, #36	@ 0x24
 8017f8e:	2200      	movs	r2, #0
 8017f90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8017f92:	4b32      	ldr	r3, [pc, #200]	@ (801805c <USBD_CDC_DeInit+0xfc>)
 8017f94:	781b      	ldrb	r3, [r3, #0]
 8017f96:	4619      	mov	r1, r3
 8017f98:	6878      	ldr	r0, [r7, #4]
 8017f9a:	f002 fafe 	bl	801a59a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8017f9e:	4b2f      	ldr	r3, [pc, #188]	@ (801805c <USBD_CDC_DeInit+0xfc>)
 8017fa0:	781b      	ldrb	r3, [r3, #0]
 8017fa2:	f003 020f 	and.w	r2, r3, #15
 8017fa6:	6879      	ldr	r1, [r7, #4]
 8017fa8:	4613      	mov	r3, r2
 8017faa:	009b      	lsls	r3, r3, #2
 8017fac:	4413      	add	r3, r2
 8017fae:	009b      	lsls	r3, r3, #2
 8017fb0:	440b      	add	r3, r1
 8017fb2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8017fba:	4b29      	ldr	r3, [pc, #164]	@ (8018060 <USBD_CDC_DeInit+0x100>)
 8017fbc:	781b      	ldrb	r3, [r3, #0]
 8017fbe:	4619      	mov	r1, r3
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f002 faea 	bl	801a59a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8017fc6:	4b26      	ldr	r3, [pc, #152]	@ (8018060 <USBD_CDC_DeInit+0x100>)
 8017fc8:	781b      	ldrb	r3, [r3, #0]
 8017fca:	f003 020f 	and.w	r2, r3, #15
 8017fce:	6879      	ldr	r1, [r7, #4]
 8017fd0:	4613      	mov	r3, r2
 8017fd2:	009b      	lsls	r3, r3, #2
 8017fd4:	4413      	add	r3, r2
 8017fd6:	009b      	lsls	r3, r3, #2
 8017fd8:	440b      	add	r3, r1
 8017fda:	3324      	adds	r3, #36	@ 0x24
 8017fdc:	2200      	movs	r2, #0
 8017fde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8017fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8018060 <USBD_CDC_DeInit+0x100>)
 8017fe2:	781b      	ldrb	r3, [r3, #0]
 8017fe4:	f003 020f 	and.w	r2, r3, #15
 8017fe8:	6879      	ldr	r1, [r7, #4]
 8017fea:	4613      	mov	r3, r2
 8017fec:	009b      	lsls	r3, r3, #2
 8017fee:	4413      	add	r3, r2
 8017ff0:	009b      	lsls	r3, r3, #2
 8017ff2:	440b      	add	r3, r1
 8017ff4:	3326      	adds	r3, #38	@ 0x26
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	32b0      	adds	r2, #176	@ 0xb0
 8018004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018008:	2b00      	cmp	r3, #0
 801800a:	d01f      	beq.n	801804c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018012:	687a      	ldr	r2, [r7, #4]
 8018014:	33b0      	adds	r3, #176	@ 0xb0
 8018016:	009b      	lsls	r3, r3, #2
 8018018:	4413      	add	r3, r2
 801801a:	685b      	ldr	r3, [r3, #4]
 801801c:	685b      	ldr	r3, [r3, #4]
 801801e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	32b0      	adds	r2, #176	@ 0xb0
 801802a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801802e:	4618      	mov	r0, r3
 8018030:	f002 fbbe 	bl	801a7b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	32b0      	adds	r2, #176	@ 0xb0
 801803e:	2100      	movs	r1, #0
 8018040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	2200      	movs	r2, #0
 8018048:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 801804c:	2300      	movs	r3, #0
}
 801804e:	4618      	mov	r0, r3
 8018050:	3708      	adds	r7, #8
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}
 8018056:	bf00      	nop
 8018058:	240002d7 	.word	0x240002d7
 801805c:	240002d8 	.word	0x240002d8
 8018060:	240002d9 	.word	0x240002d9

08018064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b086      	sub	sp, #24
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
 801806c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	32b0      	adds	r2, #176	@ 0xb0
 8018078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801807c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801807e:	2300      	movs	r3, #0
 8018080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8018082:	2300      	movs	r3, #0
 8018084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8018086:	2300      	movs	r3, #0
 8018088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801808a:	693b      	ldr	r3, [r7, #16]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d101      	bne.n	8018094 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8018090:	2303      	movs	r3, #3
 8018092:	e0bf      	b.n	8018214 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018094:	683b      	ldr	r3, [r7, #0]
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801809c:	2b00      	cmp	r3, #0
 801809e:	d050      	beq.n	8018142 <USBD_CDC_Setup+0xde>
 80180a0:	2b20      	cmp	r3, #32
 80180a2:	f040 80af 	bne.w	8018204 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	88db      	ldrh	r3, [r3, #6]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d03a      	beq.n	8018124 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	781b      	ldrb	r3, [r3, #0]
 80180b2:	b25b      	sxtb	r3, r3
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	da1b      	bge.n	80180f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80180be:	687a      	ldr	r2, [r7, #4]
 80180c0:	33b0      	adds	r3, #176	@ 0xb0
 80180c2:	009b      	lsls	r3, r3, #2
 80180c4:	4413      	add	r3, r2
 80180c6:	685b      	ldr	r3, [r3, #4]
 80180c8:	689b      	ldr	r3, [r3, #8]
 80180ca:	683a      	ldr	r2, [r7, #0]
 80180cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80180ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80180d0:	683a      	ldr	r2, [r7, #0]
 80180d2:	88d2      	ldrh	r2, [r2, #6]
 80180d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80180d6:	683b      	ldr	r3, [r7, #0]
 80180d8:	88db      	ldrh	r3, [r3, #6]
 80180da:	2b07      	cmp	r3, #7
 80180dc:	bf28      	it	cs
 80180de:	2307      	movcs	r3, #7
 80180e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	89fa      	ldrh	r2, [r7, #14]
 80180e6:	4619      	mov	r1, r3
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f001 fdbd 	bl	8019c68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80180ee:	e090      	b.n	8018212 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80180f0:	683b      	ldr	r3, [r7, #0]
 80180f2:	785a      	ldrb	r2, [r3, #1]
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	88db      	ldrh	r3, [r3, #6]
 80180fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8018100:	d803      	bhi.n	801810a <USBD_CDC_Setup+0xa6>
 8018102:	683b      	ldr	r3, [r7, #0]
 8018104:	88db      	ldrh	r3, [r3, #6]
 8018106:	b2da      	uxtb	r2, r3
 8018108:	e000      	b.n	801810c <USBD_CDC_Setup+0xa8>
 801810a:	2240      	movs	r2, #64	@ 0x40
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8018112:	6939      	ldr	r1, [r7, #16]
 8018114:	693b      	ldr	r3, [r7, #16]
 8018116:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801811a:	461a      	mov	r2, r3
 801811c:	6878      	ldr	r0, [r7, #4]
 801811e:	f001 fdcf 	bl	8019cc0 <USBD_CtlPrepareRx>
      break;
 8018122:	e076      	b.n	8018212 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801812a:	687a      	ldr	r2, [r7, #4]
 801812c:	33b0      	adds	r3, #176	@ 0xb0
 801812e:	009b      	lsls	r3, r3, #2
 8018130:	4413      	add	r3, r2
 8018132:	685b      	ldr	r3, [r3, #4]
 8018134:	689b      	ldr	r3, [r3, #8]
 8018136:	683a      	ldr	r2, [r7, #0]
 8018138:	7850      	ldrb	r0, [r2, #1]
 801813a:	2200      	movs	r2, #0
 801813c:	6839      	ldr	r1, [r7, #0]
 801813e:	4798      	blx	r3
      break;
 8018140:	e067      	b.n	8018212 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018142:	683b      	ldr	r3, [r7, #0]
 8018144:	785b      	ldrb	r3, [r3, #1]
 8018146:	2b0b      	cmp	r3, #11
 8018148:	d851      	bhi.n	80181ee <USBD_CDC_Setup+0x18a>
 801814a:	a201      	add	r2, pc, #4	@ (adr r2, 8018150 <USBD_CDC_Setup+0xec>)
 801814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018150:	08018181 	.word	0x08018181
 8018154:	080181fd 	.word	0x080181fd
 8018158:	080181ef 	.word	0x080181ef
 801815c:	080181ef 	.word	0x080181ef
 8018160:	080181ef 	.word	0x080181ef
 8018164:	080181ef 	.word	0x080181ef
 8018168:	080181ef 	.word	0x080181ef
 801816c:	080181ef 	.word	0x080181ef
 8018170:	080181ef 	.word	0x080181ef
 8018174:	080181ef 	.word	0x080181ef
 8018178:	080181ab 	.word	0x080181ab
 801817c:	080181d5 	.word	0x080181d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018186:	b2db      	uxtb	r3, r3
 8018188:	2b03      	cmp	r3, #3
 801818a:	d107      	bne.n	801819c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801818c:	f107 030a 	add.w	r3, r7, #10
 8018190:	2202      	movs	r2, #2
 8018192:	4619      	mov	r1, r3
 8018194:	6878      	ldr	r0, [r7, #4]
 8018196:	f001 fd67 	bl	8019c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801819a:	e032      	b.n	8018202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801819c:	6839      	ldr	r1, [r7, #0]
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f001 fce5 	bl	8019b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80181a4:	2303      	movs	r3, #3
 80181a6:	75fb      	strb	r3, [r7, #23]
          break;
 80181a8:	e02b      	b.n	8018202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	2b03      	cmp	r3, #3
 80181b4:	d107      	bne.n	80181c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80181b6:	f107 030d 	add.w	r3, r7, #13
 80181ba:	2201      	movs	r2, #1
 80181bc:	4619      	mov	r1, r3
 80181be:	6878      	ldr	r0, [r7, #4]
 80181c0:	f001 fd52 	bl	8019c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80181c4:	e01d      	b.n	8018202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80181c6:	6839      	ldr	r1, [r7, #0]
 80181c8:	6878      	ldr	r0, [r7, #4]
 80181ca:	f001 fcd0 	bl	8019b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80181ce:	2303      	movs	r3, #3
 80181d0:	75fb      	strb	r3, [r7, #23]
          break;
 80181d2:	e016      	b.n	8018202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80181da:	b2db      	uxtb	r3, r3
 80181dc:	2b03      	cmp	r3, #3
 80181de:	d00f      	beq.n	8018200 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80181e0:	6839      	ldr	r1, [r7, #0]
 80181e2:	6878      	ldr	r0, [r7, #4]
 80181e4:	f001 fcc3 	bl	8019b6e <USBD_CtlError>
            ret = USBD_FAIL;
 80181e8:	2303      	movs	r3, #3
 80181ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80181ec:	e008      	b.n	8018200 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80181ee:	6839      	ldr	r1, [r7, #0]
 80181f0:	6878      	ldr	r0, [r7, #4]
 80181f2:	f001 fcbc 	bl	8019b6e <USBD_CtlError>
          ret = USBD_FAIL;
 80181f6:	2303      	movs	r3, #3
 80181f8:	75fb      	strb	r3, [r7, #23]
          break;
 80181fa:	e002      	b.n	8018202 <USBD_CDC_Setup+0x19e>
          break;
 80181fc:	bf00      	nop
 80181fe:	e008      	b.n	8018212 <USBD_CDC_Setup+0x1ae>
          break;
 8018200:	bf00      	nop
      }
      break;
 8018202:	e006      	b.n	8018212 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8018204:	6839      	ldr	r1, [r7, #0]
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f001 fcb1 	bl	8019b6e <USBD_CtlError>
      ret = USBD_FAIL;
 801820c:	2303      	movs	r3, #3
 801820e:	75fb      	strb	r3, [r7, #23]
      break;
 8018210:	bf00      	nop
  }

  return (uint8_t)ret;
 8018212:	7dfb      	ldrb	r3, [r7, #23]
}
 8018214:	4618      	mov	r0, r3
 8018216:	3718      	adds	r7, #24
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}

0801821c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801821c:	b580      	push	{r7, lr}
 801821e:	b084      	sub	sp, #16
 8018220:	af00      	add	r7, sp, #0
 8018222:	6078      	str	r0, [r7, #4]
 8018224:	460b      	mov	r3, r1
 8018226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801822e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	32b0      	adds	r2, #176	@ 0xb0
 801823a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801823e:	2b00      	cmp	r3, #0
 8018240:	d101      	bne.n	8018246 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8018242:	2303      	movs	r3, #3
 8018244:	e065      	b.n	8018312 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	32b0      	adds	r2, #176	@ 0xb0
 8018250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8018256:	78fb      	ldrb	r3, [r7, #3]
 8018258:	f003 020f 	and.w	r2, r3, #15
 801825c:	6879      	ldr	r1, [r7, #4]
 801825e:	4613      	mov	r3, r2
 8018260:	009b      	lsls	r3, r3, #2
 8018262:	4413      	add	r3, r2
 8018264:	009b      	lsls	r3, r3, #2
 8018266:	440b      	add	r3, r1
 8018268:	3318      	adds	r3, #24
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d02f      	beq.n	80182d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8018270:	78fb      	ldrb	r3, [r7, #3]
 8018272:	f003 020f 	and.w	r2, r3, #15
 8018276:	6879      	ldr	r1, [r7, #4]
 8018278:	4613      	mov	r3, r2
 801827a:	009b      	lsls	r3, r3, #2
 801827c:	4413      	add	r3, r2
 801827e:	009b      	lsls	r3, r3, #2
 8018280:	440b      	add	r3, r1
 8018282:	3318      	adds	r3, #24
 8018284:	681a      	ldr	r2, [r3, #0]
 8018286:	78fb      	ldrb	r3, [r7, #3]
 8018288:	f003 010f 	and.w	r1, r3, #15
 801828c:	68f8      	ldr	r0, [r7, #12]
 801828e:	460b      	mov	r3, r1
 8018290:	00db      	lsls	r3, r3, #3
 8018292:	440b      	add	r3, r1
 8018294:	009b      	lsls	r3, r3, #2
 8018296:	4403      	add	r3, r0
 8018298:	331c      	adds	r3, #28
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	fbb2 f1f3 	udiv	r1, r2, r3
 80182a0:	fb01 f303 	mul.w	r3, r1, r3
 80182a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d112      	bne.n	80182d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80182aa:	78fb      	ldrb	r3, [r7, #3]
 80182ac:	f003 020f 	and.w	r2, r3, #15
 80182b0:	6879      	ldr	r1, [r7, #4]
 80182b2:	4613      	mov	r3, r2
 80182b4:	009b      	lsls	r3, r3, #2
 80182b6:	4413      	add	r3, r2
 80182b8:	009b      	lsls	r3, r3, #2
 80182ba:	440b      	add	r3, r1
 80182bc:	3318      	adds	r3, #24
 80182be:	2200      	movs	r2, #0
 80182c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80182c2:	78f9      	ldrb	r1, [r7, #3]
 80182c4:	2300      	movs	r3, #0
 80182c6:	2200      	movs	r2, #0
 80182c8:	6878      	ldr	r0, [r7, #4]
 80182ca:	f002 fa0e 	bl	801a6ea <USBD_LL_Transmit>
 80182ce:	e01f      	b.n	8018310 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	2200      	movs	r2, #0
 80182d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80182de:	687a      	ldr	r2, [r7, #4]
 80182e0:	33b0      	adds	r3, #176	@ 0xb0
 80182e2:	009b      	lsls	r3, r3, #2
 80182e4:	4413      	add	r3, r2
 80182e6:	685b      	ldr	r3, [r3, #4]
 80182e8:	691b      	ldr	r3, [r3, #16]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d010      	beq.n	8018310 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80182f4:	687a      	ldr	r2, [r7, #4]
 80182f6:	33b0      	adds	r3, #176	@ 0xb0
 80182f8:	009b      	lsls	r3, r3, #2
 80182fa:	4413      	add	r3, r2
 80182fc:	685b      	ldr	r3, [r3, #4]
 80182fe:	691b      	ldr	r3, [r3, #16]
 8018300:	68ba      	ldr	r2, [r7, #8]
 8018302:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8018306:	68ba      	ldr	r2, [r7, #8]
 8018308:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 801830c:	78fa      	ldrb	r2, [r7, #3]
 801830e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8018310:	2300      	movs	r3, #0
}
 8018312:	4618      	mov	r0, r3
 8018314:	3710      	adds	r7, #16
 8018316:	46bd      	mov	sp, r7
 8018318:	bd80      	pop	{r7, pc}

0801831a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801831a:	b580      	push	{r7, lr}
 801831c:	b084      	sub	sp, #16
 801831e:	af00      	add	r7, sp, #0
 8018320:	6078      	str	r0, [r7, #4]
 8018322:	460b      	mov	r3, r1
 8018324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	32b0      	adds	r2, #176	@ 0xb0
 8018330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018334:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	32b0      	adds	r2, #176	@ 0xb0
 8018340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d101      	bne.n	801834c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8018348:	2303      	movs	r3, #3
 801834a:	e01a      	b.n	8018382 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801834c:	78fb      	ldrb	r3, [r7, #3]
 801834e:	4619      	mov	r1, r3
 8018350:	6878      	ldr	r0, [r7, #4]
 8018352:	f002 fa0c 	bl	801a76e <USBD_LL_GetRxDataSize>
 8018356:	4602      	mov	r2, r0
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	33b0      	adds	r3, #176	@ 0xb0
 8018368:	009b      	lsls	r3, r3, #2
 801836a:	4413      	add	r3, r2
 801836c:	685b      	ldr	r3, [r3, #4]
 801836e:	68db      	ldr	r3, [r3, #12]
 8018370:	68fa      	ldr	r2, [r7, #12]
 8018372:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8018376:	68fa      	ldr	r2, [r7, #12]
 8018378:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 801837c:	4611      	mov	r1, r2
 801837e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8018380:	2300      	movs	r3, #0
}
 8018382:	4618      	mov	r0, r3
 8018384:	3710      	adds	r7, #16
 8018386:	46bd      	mov	sp, r7
 8018388:	bd80      	pop	{r7, pc}

0801838a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801838a:	b580      	push	{r7, lr}
 801838c:	b084      	sub	sp, #16
 801838e:	af00      	add	r7, sp, #0
 8018390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	32b0      	adds	r2, #176	@ 0xb0
 801839c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80183a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d101      	bne.n	80183ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80183a8:	2303      	movs	r3, #3
 80183aa:	e024      	b.n	80183f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	33b0      	adds	r3, #176	@ 0xb0
 80183b6:	009b      	lsls	r3, r3, #2
 80183b8:	4413      	add	r3, r2
 80183ba:	685b      	ldr	r3, [r3, #4]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d019      	beq.n	80183f4 <USBD_CDC_EP0_RxReady+0x6a>
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80183c6:	2bff      	cmp	r3, #255	@ 0xff
 80183c8:	d014      	beq.n	80183f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80183d0:	687a      	ldr	r2, [r7, #4]
 80183d2:	33b0      	adds	r3, #176	@ 0xb0
 80183d4:	009b      	lsls	r3, r3, #2
 80183d6:	4413      	add	r3, r2
 80183d8:	685b      	ldr	r3, [r3, #4]
 80183da:	689b      	ldr	r3, [r3, #8]
 80183dc:	68fa      	ldr	r2, [r7, #12]
 80183de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80183e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80183e4:	68fa      	ldr	r2, [r7, #12]
 80183e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80183ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	22ff      	movs	r2, #255	@ 0xff
 80183f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80183f4:	2300      	movs	r3, #0
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3710      	adds	r7, #16
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
	...

08018400 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b086      	sub	sp, #24
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018408:	2182      	movs	r1, #130	@ 0x82
 801840a:	4818      	ldr	r0, [pc, #96]	@ (801846c <USBD_CDC_GetFSCfgDesc+0x6c>)
 801840c:	f000 fd4f 	bl	8018eae <USBD_GetEpDesc>
 8018410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018412:	2101      	movs	r1, #1
 8018414:	4815      	ldr	r0, [pc, #84]	@ (801846c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018416:	f000 fd4a 	bl	8018eae <USBD_GetEpDesc>
 801841a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801841c:	2181      	movs	r1, #129	@ 0x81
 801841e:	4813      	ldr	r0, [pc, #76]	@ (801846c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8018420:	f000 fd45 	bl	8018eae <USBD_GetEpDesc>
 8018424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018426:	697b      	ldr	r3, [r7, #20]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d002      	beq.n	8018432 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801842c:	697b      	ldr	r3, [r7, #20]
 801842e:	2210      	movs	r2, #16
 8018430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018432:	693b      	ldr	r3, [r7, #16]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d006      	beq.n	8018446 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018438:	693b      	ldr	r3, [r7, #16]
 801843a:	2200      	movs	r2, #0
 801843c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018440:	711a      	strb	r2, [r3, #4]
 8018442:	2200      	movs	r2, #0
 8018444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d006      	beq.n	801845a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	2200      	movs	r2, #0
 8018450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018454:	711a      	strb	r2, [r3, #4]
 8018456:	2200      	movs	r2, #0
 8018458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	2243      	movs	r2, #67	@ 0x43
 801845e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018460:	4b02      	ldr	r3, [pc, #8]	@ (801846c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8018462:	4618      	mov	r0, r3
 8018464:	3718      	adds	r7, #24
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}
 801846a:	bf00      	nop
 801846c:	24000294 	.word	0x24000294

08018470 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b086      	sub	sp, #24
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8018478:	2182      	movs	r1, #130	@ 0x82
 801847a:	4818      	ldr	r0, [pc, #96]	@ (80184dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 801847c:	f000 fd17 	bl	8018eae <USBD_GetEpDesc>
 8018480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8018482:	2101      	movs	r1, #1
 8018484:	4815      	ldr	r0, [pc, #84]	@ (80184dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018486:	f000 fd12 	bl	8018eae <USBD_GetEpDesc>
 801848a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801848c:	2181      	movs	r1, #129	@ 0x81
 801848e:	4813      	ldr	r0, [pc, #76]	@ (80184dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8018490:	f000 fd0d 	bl	8018eae <USBD_GetEpDesc>
 8018494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d002      	beq.n	80184a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801849c:	697b      	ldr	r3, [r7, #20]
 801849e:	2210      	movs	r2, #16
 80184a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d006      	beq.n	80184b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80184a8:	693b      	ldr	r3, [r7, #16]
 80184aa:	2200      	movs	r2, #0
 80184ac:	711a      	strb	r2, [r3, #4]
 80184ae:	2200      	movs	r2, #0
 80184b0:	f042 0202 	orr.w	r2, r2, #2
 80184b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d006      	beq.n	80184ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	2200      	movs	r2, #0
 80184c0:	711a      	strb	r2, [r3, #4]
 80184c2:	2200      	movs	r2, #0
 80184c4:	f042 0202 	orr.w	r2, r2, #2
 80184c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	2243      	movs	r2, #67	@ 0x43
 80184ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80184d0:	4b02      	ldr	r3, [pc, #8]	@ (80184dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80184d2:	4618      	mov	r0, r3
 80184d4:	3718      	adds	r7, #24
 80184d6:	46bd      	mov	sp, r7
 80184d8:	bd80      	pop	{r7, pc}
 80184da:	bf00      	nop
 80184dc:	24000294 	.word	0x24000294

080184e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b086      	sub	sp, #24
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80184e8:	2182      	movs	r1, #130	@ 0x82
 80184ea:	4818      	ldr	r0, [pc, #96]	@ (801854c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184ec:	f000 fcdf 	bl	8018eae <USBD_GetEpDesc>
 80184f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80184f2:	2101      	movs	r1, #1
 80184f4:	4815      	ldr	r0, [pc, #84]	@ (801854c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80184f6:	f000 fcda 	bl	8018eae <USBD_GetEpDesc>
 80184fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80184fc:	2181      	movs	r1, #129	@ 0x81
 80184fe:	4813      	ldr	r0, [pc, #76]	@ (801854c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8018500:	f000 fcd5 	bl	8018eae <USBD_GetEpDesc>
 8018504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8018506:	697b      	ldr	r3, [r7, #20]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d002      	beq.n	8018512 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801850c:	697b      	ldr	r3, [r7, #20]
 801850e:	2210      	movs	r2, #16
 8018510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8018512:	693b      	ldr	r3, [r7, #16]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d006      	beq.n	8018526 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8018518:	693b      	ldr	r3, [r7, #16]
 801851a:	2200      	movs	r2, #0
 801851c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018520:	711a      	strb	r2, [r3, #4]
 8018522:	2200      	movs	r2, #0
 8018524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d006      	beq.n	801853a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	2200      	movs	r2, #0
 8018530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8018534:	711a      	strb	r2, [r3, #4]
 8018536:	2200      	movs	r2, #0
 8018538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	2243      	movs	r2, #67	@ 0x43
 801853e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8018540:	4b02      	ldr	r3, [pc, #8]	@ (801854c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8018542:	4618      	mov	r0, r3
 8018544:	3718      	adds	r7, #24
 8018546:	46bd      	mov	sp, r7
 8018548:	bd80      	pop	{r7, pc}
 801854a:	bf00      	nop
 801854c:	24000294 	.word	0x24000294

08018550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8018550:	b480      	push	{r7}
 8018552:	b083      	sub	sp, #12
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	220a      	movs	r2, #10
 801855c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801855e:	4b03      	ldr	r3, [pc, #12]	@ (801856c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8018560:	4618      	mov	r0, r3
 8018562:	370c      	adds	r7, #12
 8018564:	46bd      	mov	sp, r7
 8018566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801856a:	4770      	bx	lr
 801856c:	24000250 	.word	0x24000250

08018570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8018570:	b480      	push	{r7}
 8018572:	b083      	sub	sp, #12
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
 8018578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801857a:	683b      	ldr	r3, [r7, #0]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d101      	bne.n	8018584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8018580:	2303      	movs	r3, #3
 8018582:	e009      	b.n	8018598 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801858a:	687a      	ldr	r2, [r7, #4]
 801858c:	33b0      	adds	r3, #176	@ 0xb0
 801858e:	009b      	lsls	r3, r3, #2
 8018590:	4413      	add	r3, r2
 8018592:	683a      	ldr	r2, [r7, #0]
 8018594:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8018596:	2300      	movs	r3, #0
}
 8018598:	4618      	mov	r0, r3
 801859a:	370c      	adds	r7, #12
 801859c:	46bd      	mov	sp, r7
 801859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185a2:	4770      	bx	lr

080185a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80185a4:	b480      	push	{r7}
 80185a6:	b087      	sub	sp, #28
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	60f8      	str	r0, [r7, #12]
 80185ac:	60b9      	str	r1, [r7, #8]
 80185ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	32b0      	adds	r2, #176	@ 0xb0
 80185ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80185c0:	697b      	ldr	r3, [r7, #20]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d101      	bne.n	80185ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80185c6:	2303      	movs	r3, #3
 80185c8:	e008      	b.n	80185dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80185ca:	697b      	ldr	r3, [r7, #20]
 80185cc:	68ba      	ldr	r2, [r7, #8]
 80185ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80185d2:	697b      	ldr	r3, [r7, #20]
 80185d4:	687a      	ldr	r2, [r7, #4]
 80185d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80185da:	2300      	movs	r3, #0
}
 80185dc:	4618      	mov	r0, r3
 80185de:	371c      	adds	r7, #28
 80185e0:	46bd      	mov	sp, r7
 80185e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185e6:	4770      	bx	lr

080185e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80185e8:	b480      	push	{r7}
 80185ea:	b085      	sub	sp, #20
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
 80185f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	32b0      	adds	r2, #176	@ 0xb0
 80185fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d101      	bne.n	801860c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8018608:	2303      	movs	r3, #3
 801860a:	e004      	b.n	8018616 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	683a      	ldr	r2, [r7, #0]
 8018610:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8018614:	2300      	movs	r3, #0
}
 8018616:	4618      	mov	r0, r3
 8018618:	3714      	adds	r7, #20
 801861a:	46bd      	mov	sp, r7
 801861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018620:	4770      	bx	lr
	...

08018624 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8018624:	b580      	push	{r7, lr}
 8018626:	b084      	sub	sp, #16
 8018628:	af00      	add	r7, sp, #0
 801862a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	32b0      	adds	r2, #176	@ 0xb0
 8018636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801863a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801863c:	2301      	movs	r3, #1
 801863e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d101      	bne.n	801864a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8018646:	2303      	movs	r3, #3
 8018648:	e025      	b.n	8018696 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801864a:	68bb      	ldr	r3, [r7, #8]
 801864c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018650:	2b00      	cmp	r3, #0
 8018652:	d11f      	bne.n	8018694 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8018654:	68bb      	ldr	r3, [r7, #8]
 8018656:	2201      	movs	r2, #1
 8018658:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801865c:	4b10      	ldr	r3, [pc, #64]	@ (80186a0 <USBD_CDC_TransmitPacket+0x7c>)
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	f003 020f 	and.w	r2, r3, #15
 8018664:	68bb      	ldr	r3, [r7, #8]
 8018666:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 801866a:	6878      	ldr	r0, [r7, #4]
 801866c:	4613      	mov	r3, r2
 801866e:	009b      	lsls	r3, r3, #2
 8018670:	4413      	add	r3, r2
 8018672:	009b      	lsls	r3, r3, #2
 8018674:	4403      	add	r3, r0
 8018676:	3318      	adds	r3, #24
 8018678:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801867a:	4b09      	ldr	r3, [pc, #36]	@ (80186a0 <USBD_CDC_TransmitPacket+0x7c>)
 801867c:	7819      	ldrb	r1, [r3, #0]
 801867e:	68bb      	ldr	r3, [r7, #8]
 8018680:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8018684:	68bb      	ldr	r3, [r7, #8]
 8018686:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	f002 f82d 	bl	801a6ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8018690:	2300      	movs	r3, #0
 8018692:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8018694:	7bfb      	ldrb	r3, [r7, #15]
}
 8018696:	4618      	mov	r0, r3
 8018698:	3710      	adds	r7, #16
 801869a:	46bd      	mov	sp, r7
 801869c:	bd80      	pop	{r7, pc}
 801869e:	bf00      	nop
 80186a0:	240002d7 	.word	0x240002d7

080186a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	b084      	sub	sp, #16
 80186a8:	af00      	add	r7, sp, #0
 80186aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	32b0      	adds	r2, #176	@ 0xb0
 80186b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	32b0      	adds	r2, #176	@ 0xb0
 80186c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d101      	bne.n	80186d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80186ce:	2303      	movs	r3, #3
 80186d0:	e018      	b.n	8018704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	7c1b      	ldrb	r3, [r3, #16]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d10a      	bne.n	80186f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80186da:	4b0c      	ldr	r3, [pc, #48]	@ (801870c <USBD_CDC_ReceivePacket+0x68>)
 80186dc:	7819      	ldrb	r1, [r3, #0]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80186e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80186e8:	6878      	ldr	r0, [r7, #4]
 80186ea:	f002 f81f 	bl	801a72c <USBD_LL_PrepareReceive>
 80186ee:	e008      	b.n	8018702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80186f0:	4b06      	ldr	r3, [pc, #24]	@ (801870c <USBD_CDC_ReceivePacket+0x68>)
 80186f2:	7819      	ldrb	r1, [r3, #0]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80186fa:	2340      	movs	r3, #64	@ 0x40
 80186fc:	6878      	ldr	r0, [r7, #4]
 80186fe:	f002 f815 	bl	801a72c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8018702:	2300      	movs	r3, #0
}
 8018704:	4618      	mov	r0, r3
 8018706:	3710      	adds	r7, #16
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	240002d8 	.word	0x240002d8

08018710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b086      	sub	sp, #24
 8018714:	af00      	add	r7, sp, #0
 8018716:	60f8      	str	r0, [r7, #12]
 8018718:	60b9      	str	r1, [r7, #8]
 801871a:	4613      	mov	r3, r2
 801871c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d101      	bne.n	8018728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018724:	2303      	movs	r3, #3
 8018726:	e01f      	b.n	8018768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	2200      	movs	r2, #0
 801872c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	2200      	movs	r2, #0
 8018734:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2200      	movs	r2, #0
 801873c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d003      	beq.n	801874e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	68ba      	ldr	r2, [r7, #8]
 801874a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	2201      	movs	r2, #1
 8018752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	79fa      	ldrb	r2, [r7, #7]
 801875a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801875c:	68f8      	ldr	r0, [r7, #12]
 801875e:	f001 fe8b 	bl	801a478 <USBD_LL_Init>
 8018762:	4603      	mov	r3, r0
 8018764:	75fb      	strb	r3, [r7, #23]

  return ret;
 8018766:	7dfb      	ldrb	r3, [r7, #23]
}
 8018768:	4618      	mov	r0, r3
 801876a:	3718      	adds	r7, #24
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}

08018770 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8018770:	b580      	push	{r7, lr}
 8018772:	b084      	sub	sp, #16
 8018774:	af00      	add	r7, sp, #0
 8018776:	6078      	str	r0, [r7, #4]
 8018778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801877a:	2300      	movs	r3, #0
 801877c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801877e:	683b      	ldr	r3, [r7, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d101      	bne.n	8018788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8018784:	2303      	movs	r3, #3
 8018786:	e025      	b.n	80187d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	683a      	ldr	r2, [r7, #0]
 801878c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018796:	687b      	ldr	r3, [r7, #4]
 8018798:	32ae      	adds	r2, #174	@ 0xae
 801879a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801879e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d00f      	beq.n	80187c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	32ae      	adds	r2, #174	@ 0xae
 80187ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80187b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80187b4:	f107 020e 	add.w	r2, r7, #14
 80187b8:	4610      	mov	r0, r2
 80187ba:	4798      	blx	r3
 80187bc:	4602      	mov	r2, r0
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80187ca:	1c5a      	adds	r2, r3, #1
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80187d2:	2300      	movs	r3, #0
}
 80187d4:	4618      	mov	r0, r3
 80187d6:	3710      	adds	r7, #16
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}

080187dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80187dc:	b580      	push	{r7, lr}
 80187de:	b082      	sub	sp, #8
 80187e0:	af00      	add	r7, sp, #0
 80187e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f001 fe97 	bl	801a518 <USBD_LL_Start>
 80187ea:	4603      	mov	r3, r0
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3708      	adds	r7, #8
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80187f4:	b480      	push	{r7}
 80187f6:	b083      	sub	sp, #12
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80187fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80187fe:	4618      	mov	r0, r3
 8018800:	370c      	adds	r7, #12
 8018802:	46bd      	mov	sp, r7
 8018804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018808:	4770      	bx	lr

0801880a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801880a:	b580      	push	{r7, lr}
 801880c:	b084      	sub	sp, #16
 801880e:	af00      	add	r7, sp, #0
 8018810:	6078      	str	r0, [r7, #4]
 8018812:	460b      	mov	r3, r1
 8018814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8018816:	2300      	movs	r3, #0
 8018818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018820:	2b00      	cmp	r3, #0
 8018822:	d009      	beq.n	8018838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	78fa      	ldrb	r2, [r7, #3]
 801882e:	4611      	mov	r1, r2
 8018830:	6878      	ldr	r0, [r7, #4]
 8018832:	4798      	blx	r3
 8018834:	4603      	mov	r3, r0
 8018836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018838:	7bfb      	ldrb	r3, [r7, #15]
}
 801883a:	4618      	mov	r0, r3
 801883c:	3710      	adds	r7, #16
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}

08018842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018842:	b580      	push	{r7, lr}
 8018844:	b084      	sub	sp, #16
 8018846:	af00      	add	r7, sp, #0
 8018848:	6078      	str	r0, [r7, #4]
 801884a:	460b      	mov	r3, r1
 801884c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801884e:	2300      	movs	r3, #0
 8018850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018858:	685b      	ldr	r3, [r3, #4]
 801885a:	78fa      	ldrb	r2, [r7, #3]
 801885c:	4611      	mov	r1, r2
 801885e:	6878      	ldr	r0, [r7, #4]
 8018860:	4798      	blx	r3
 8018862:	4603      	mov	r3, r0
 8018864:	2b00      	cmp	r3, #0
 8018866:	d001      	beq.n	801886c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8018868:	2303      	movs	r3, #3
 801886a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801886c:	7bfb      	ldrb	r3, [r7, #15]
}
 801886e:	4618      	mov	r0, r3
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}

08018876 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018876:	b580      	push	{r7, lr}
 8018878:	b084      	sub	sp, #16
 801887a:	af00      	add	r7, sp, #0
 801887c:	6078      	str	r0, [r7, #4]
 801887e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8018886:	6839      	ldr	r1, [r7, #0]
 8018888:	4618      	mov	r0, r3
 801888a:	f001 f936 	bl	8019afa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	2201      	movs	r2, #1
 8018892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801889c:	461a      	mov	r2, r3
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80188aa:	f003 031f 	and.w	r3, r3, #31
 80188ae:	2b02      	cmp	r3, #2
 80188b0:	d01a      	beq.n	80188e8 <USBD_LL_SetupStage+0x72>
 80188b2:	2b02      	cmp	r3, #2
 80188b4:	d822      	bhi.n	80188fc <USBD_LL_SetupStage+0x86>
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d002      	beq.n	80188c0 <USBD_LL_SetupStage+0x4a>
 80188ba:	2b01      	cmp	r3, #1
 80188bc:	d00a      	beq.n	80188d4 <USBD_LL_SetupStage+0x5e>
 80188be:	e01d      	b.n	80188fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188c6:	4619      	mov	r1, r3
 80188c8:	6878      	ldr	r0, [r7, #4]
 80188ca:	f000 fb63 	bl	8018f94 <USBD_StdDevReq>
 80188ce:	4603      	mov	r3, r0
 80188d0:	73fb      	strb	r3, [r7, #15]
      break;
 80188d2:	e020      	b.n	8018916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188da:	4619      	mov	r1, r3
 80188dc:	6878      	ldr	r0, [r7, #4]
 80188de:	f000 fbcb 	bl	8019078 <USBD_StdItfReq>
 80188e2:	4603      	mov	r3, r0
 80188e4:	73fb      	strb	r3, [r7, #15]
      break;
 80188e6:	e016      	b.n	8018916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80188ee:	4619      	mov	r1, r3
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f000 fc2d 	bl	8019150 <USBD_StdEPReq>
 80188f6:	4603      	mov	r3, r0
 80188f8:	73fb      	strb	r3, [r7, #15]
      break;
 80188fa:	e00c      	b.n	8018916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018902:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8018906:	b2db      	uxtb	r3, r3
 8018908:	4619      	mov	r1, r3
 801890a:	6878      	ldr	r0, [r7, #4]
 801890c:	f001 fe64 	bl	801a5d8 <USBD_LL_StallEP>
 8018910:	4603      	mov	r3, r0
 8018912:	73fb      	strb	r3, [r7, #15]
      break;
 8018914:	bf00      	nop
  }

  return ret;
 8018916:	7bfb      	ldrb	r3, [r7, #15]
}
 8018918:	4618      	mov	r0, r3
 801891a:	3710      	adds	r7, #16
 801891c:	46bd      	mov	sp, r7
 801891e:	bd80      	pop	{r7, pc}

08018920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b086      	sub	sp, #24
 8018924:	af00      	add	r7, sp, #0
 8018926:	60f8      	str	r0, [r7, #12]
 8018928:	460b      	mov	r3, r1
 801892a:	607a      	str	r2, [r7, #4]
 801892c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801892e:	2300      	movs	r3, #0
 8018930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8018932:	7afb      	ldrb	r3, [r7, #11]
 8018934:	2b00      	cmp	r3, #0
 8018936:	d16e      	bne.n	8018a16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801893e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018946:	2b03      	cmp	r3, #3
 8018948:	f040 8098 	bne.w	8018a7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801894c:	693b      	ldr	r3, [r7, #16]
 801894e:	689a      	ldr	r2, [r3, #8]
 8018950:	693b      	ldr	r3, [r7, #16]
 8018952:	68db      	ldr	r3, [r3, #12]
 8018954:	429a      	cmp	r2, r3
 8018956:	d913      	bls.n	8018980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8018958:	693b      	ldr	r3, [r7, #16]
 801895a:	689a      	ldr	r2, [r3, #8]
 801895c:	693b      	ldr	r3, [r7, #16]
 801895e:	68db      	ldr	r3, [r3, #12]
 8018960:	1ad2      	subs	r2, r2, r3
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	68da      	ldr	r2, [r3, #12]
 801896a:	693b      	ldr	r3, [r7, #16]
 801896c:	689b      	ldr	r3, [r3, #8]
 801896e:	4293      	cmp	r3, r2
 8018970:	bf28      	it	cs
 8018972:	4613      	movcs	r3, r2
 8018974:	461a      	mov	r2, r3
 8018976:	6879      	ldr	r1, [r7, #4]
 8018978:	68f8      	ldr	r0, [r7, #12]
 801897a:	f001 f9be 	bl	8019cfa <USBD_CtlContinueRx>
 801897e:	e07d      	b.n	8018a7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8018986:	f003 031f 	and.w	r3, r3, #31
 801898a:	2b02      	cmp	r3, #2
 801898c:	d014      	beq.n	80189b8 <USBD_LL_DataOutStage+0x98>
 801898e:	2b02      	cmp	r3, #2
 8018990:	d81d      	bhi.n	80189ce <USBD_LL_DataOutStage+0xae>
 8018992:	2b00      	cmp	r3, #0
 8018994:	d002      	beq.n	801899c <USBD_LL_DataOutStage+0x7c>
 8018996:	2b01      	cmp	r3, #1
 8018998:	d003      	beq.n	80189a2 <USBD_LL_DataOutStage+0x82>
 801899a:	e018      	b.n	80189ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801899c:	2300      	movs	r3, #0
 801899e:	75bb      	strb	r3, [r7, #22]
            break;
 80189a0:	e018      	b.n	80189d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80189a8:	b2db      	uxtb	r3, r3
 80189aa:	4619      	mov	r1, r3
 80189ac:	68f8      	ldr	r0, [r7, #12]
 80189ae:	f000 fa64 	bl	8018e7a <USBD_CoreFindIF>
 80189b2:	4603      	mov	r3, r0
 80189b4:	75bb      	strb	r3, [r7, #22]
            break;
 80189b6:	e00d      	b.n	80189d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80189be:	b2db      	uxtb	r3, r3
 80189c0:	4619      	mov	r1, r3
 80189c2:	68f8      	ldr	r0, [r7, #12]
 80189c4:	f000 fa66 	bl	8018e94 <USBD_CoreFindEP>
 80189c8:	4603      	mov	r3, r0
 80189ca:	75bb      	strb	r3, [r7, #22]
            break;
 80189cc:	e002      	b.n	80189d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80189ce:	2300      	movs	r3, #0
 80189d0:	75bb      	strb	r3, [r7, #22]
            break;
 80189d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80189d4:	7dbb      	ldrb	r3, [r7, #22]
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d119      	bne.n	8018a0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80189da:	68fb      	ldr	r3, [r7, #12]
 80189dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80189e0:	b2db      	uxtb	r3, r3
 80189e2:	2b03      	cmp	r3, #3
 80189e4:	d113      	bne.n	8018a0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80189e6:	7dba      	ldrb	r2, [r7, #22]
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	32ae      	adds	r2, #174	@ 0xae
 80189ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80189f0:	691b      	ldr	r3, [r3, #16]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d00b      	beq.n	8018a0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80189f6:	7dba      	ldrb	r2, [r7, #22]
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80189fe:	7dba      	ldrb	r2, [r7, #22]
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	32ae      	adds	r2, #174	@ 0xae
 8018a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a08:	691b      	ldr	r3, [r3, #16]
 8018a0a:	68f8      	ldr	r0, [r7, #12]
 8018a0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8018a0e:	68f8      	ldr	r0, [r7, #12]
 8018a10:	f001 f984 	bl	8019d1c <USBD_CtlSendStatus>
 8018a14:	e032      	b.n	8018a7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8018a16:	7afb      	ldrb	r3, [r7, #11]
 8018a18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	4619      	mov	r1, r3
 8018a20:	68f8      	ldr	r0, [r7, #12]
 8018a22:	f000 fa37 	bl	8018e94 <USBD_CoreFindEP>
 8018a26:	4603      	mov	r3, r0
 8018a28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018a2a:	7dbb      	ldrb	r3, [r7, #22]
 8018a2c:	2bff      	cmp	r3, #255	@ 0xff
 8018a2e:	d025      	beq.n	8018a7c <USBD_LL_DataOutStage+0x15c>
 8018a30:	7dbb      	ldrb	r3, [r7, #22]
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d122      	bne.n	8018a7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	2b03      	cmp	r3, #3
 8018a40:	d117      	bne.n	8018a72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8018a42:	7dba      	ldrb	r2, [r7, #22]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	32ae      	adds	r2, #174	@ 0xae
 8018a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a4c:	699b      	ldr	r3, [r3, #24]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d00f      	beq.n	8018a72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8018a52:	7dba      	ldrb	r2, [r7, #22]
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8018a5a:	7dba      	ldrb	r2, [r7, #22]
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	32ae      	adds	r2, #174	@ 0xae
 8018a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018a64:	699b      	ldr	r3, [r3, #24]
 8018a66:	7afa      	ldrb	r2, [r7, #11]
 8018a68:	4611      	mov	r1, r2
 8018a6a:	68f8      	ldr	r0, [r7, #12]
 8018a6c:	4798      	blx	r3
 8018a6e:	4603      	mov	r3, r0
 8018a70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8018a72:	7dfb      	ldrb	r3, [r7, #23]
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	d001      	beq.n	8018a7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8018a78:	7dfb      	ldrb	r3, [r7, #23]
 8018a7a:	e000      	b.n	8018a7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8018a7c:	2300      	movs	r3, #0
}
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3718      	adds	r7, #24
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}

08018a86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018a86:	b580      	push	{r7, lr}
 8018a88:	b086      	sub	sp, #24
 8018a8a:	af00      	add	r7, sp, #0
 8018a8c:	60f8      	str	r0, [r7, #12]
 8018a8e:	460b      	mov	r3, r1
 8018a90:	607a      	str	r2, [r7, #4]
 8018a92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8018a94:	7afb      	ldrb	r3, [r7, #11]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d16f      	bne.n	8018b7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	3314      	adds	r3, #20
 8018a9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018aa0:	68fb      	ldr	r3, [r7, #12]
 8018aa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8018aa6:	2b02      	cmp	r3, #2
 8018aa8:	d15a      	bne.n	8018b60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8018aaa:	693b      	ldr	r3, [r7, #16]
 8018aac:	689a      	ldr	r2, [r3, #8]
 8018aae:	693b      	ldr	r3, [r7, #16]
 8018ab0:	68db      	ldr	r3, [r3, #12]
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d914      	bls.n	8018ae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018ab6:	693b      	ldr	r3, [r7, #16]
 8018ab8:	689a      	ldr	r2, [r3, #8]
 8018aba:	693b      	ldr	r3, [r7, #16]
 8018abc:	68db      	ldr	r3, [r3, #12]
 8018abe:	1ad2      	subs	r2, r2, r3
 8018ac0:	693b      	ldr	r3, [r7, #16]
 8018ac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018ac4:	693b      	ldr	r3, [r7, #16]
 8018ac6:	689b      	ldr	r3, [r3, #8]
 8018ac8:	461a      	mov	r2, r3
 8018aca:	6879      	ldr	r1, [r7, #4]
 8018acc:	68f8      	ldr	r0, [r7, #12]
 8018ace:	f001 f8e6 	bl	8019c9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	2100      	movs	r1, #0
 8018ad8:	68f8      	ldr	r0, [r7, #12]
 8018ada:	f001 fe27 	bl	801a72c <USBD_LL_PrepareReceive>
 8018ade:	e03f      	b.n	8018b60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018ae0:	693b      	ldr	r3, [r7, #16]
 8018ae2:	68da      	ldr	r2, [r3, #12]
 8018ae4:	693b      	ldr	r3, [r7, #16]
 8018ae6:	689b      	ldr	r3, [r3, #8]
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	d11c      	bne.n	8018b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8018aec:	693b      	ldr	r3, [r7, #16]
 8018aee:	685a      	ldr	r2, [r3, #4]
 8018af0:	693b      	ldr	r3, [r7, #16]
 8018af2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018af4:	429a      	cmp	r2, r3
 8018af6:	d316      	bcc.n	8018b26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8018af8:	693b      	ldr	r3, [r7, #16]
 8018afa:	685a      	ldr	r2, [r3, #4]
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018b02:	429a      	cmp	r2, r3
 8018b04:	d20f      	bcs.n	8018b26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018b06:	2200      	movs	r2, #0
 8018b08:	2100      	movs	r1, #0
 8018b0a:	68f8      	ldr	r0, [r7, #12]
 8018b0c:	f001 f8c7 	bl	8019c9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	2200      	movs	r2, #0
 8018b14:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018b18:	2300      	movs	r3, #0
 8018b1a:	2200      	movs	r2, #0
 8018b1c:	2100      	movs	r1, #0
 8018b1e:	68f8      	ldr	r0, [r7, #12]
 8018b20:	f001 fe04 	bl	801a72c <USBD_LL_PrepareReceive>
 8018b24:	e01c      	b.n	8018b60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	2b03      	cmp	r3, #3
 8018b30:	d10f      	bne.n	8018b52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8018b32:	68fb      	ldr	r3, [r7, #12]
 8018b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b38:	68db      	ldr	r3, [r3, #12]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d009      	beq.n	8018b52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	2200      	movs	r2, #0
 8018b42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018b4c:	68db      	ldr	r3, [r3, #12]
 8018b4e:	68f8      	ldr	r0, [r7, #12]
 8018b50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8018b52:	2180      	movs	r1, #128	@ 0x80
 8018b54:	68f8      	ldr	r0, [r7, #12]
 8018b56:	f001 fd3f 	bl	801a5d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8018b5a:	68f8      	ldr	r0, [r7, #12]
 8018b5c:	f001 f8f1 	bl	8019d42 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d03a      	beq.n	8018be0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8018b6a:	68f8      	ldr	r0, [r7, #12]
 8018b6c:	f7ff fe42 	bl	80187f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	2200      	movs	r2, #0
 8018b74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8018b78:	e032      	b.n	8018be0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8018b7a:	7afb      	ldrb	r3, [r7, #11]
 8018b7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8018b80:	b2db      	uxtb	r3, r3
 8018b82:	4619      	mov	r1, r3
 8018b84:	68f8      	ldr	r0, [r7, #12]
 8018b86:	f000 f985 	bl	8018e94 <USBD_CoreFindEP>
 8018b8a:	4603      	mov	r3, r0
 8018b8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8018b8e:	7dfb      	ldrb	r3, [r7, #23]
 8018b90:	2bff      	cmp	r3, #255	@ 0xff
 8018b92:	d025      	beq.n	8018be0 <USBD_LL_DataInStage+0x15a>
 8018b94:	7dfb      	ldrb	r3, [r7, #23]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d122      	bne.n	8018be0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018ba0:	b2db      	uxtb	r3, r3
 8018ba2:	2b03      	cmp	r3, #3
 8018ba4:	d11c      	bne.n	8018be0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8018ba6:	7dfa      	ldrb	r2, [r7, #23]
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	32ae      	adds	r2, #174	@ 0xae
 8018bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bb0:	695b      	ldr	r3, [r3, #20]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d014      	beq.n	8018be0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8018bb6:	7dfa      	ldrb	r2, [r7, #23]
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8018bbe:	7dfa      	ldrb	r2, [r7, #23]
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	32ae      	adds	r2, #174	@ 0xae
 8018bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bc8:	695b      	ldr	r3, [r3, #20]
 8018bca:	7afa      	ldrb	r2, [r7, #11]
 8018bcc:	4611      	mov	r1, r2
 8018bce:	68f8      	ldr	r0, [r7, #12]
 8018bd0:	4798      	blx	r3
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8018bd6:	7dbb      	ldrb	r3, [r7, #22]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d001      	beq.n	8018be0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8018bdc:	7dbb      	ldrb	r3, [r7, #22]
 8018bde:	e000      	b.n	8018be2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8018be0:	2300      	movs	r3, #0
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3718      	adds	r7, #24
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}

08018bea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018bea:	b580      	push	{r7, lr}
 8018bec:	b084      	sub	sp, #16
 8018bee:	af00      	add	r7, sp, #0
 8018bf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	2201      	movs	r2, #1
 8018bfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	2200      	movs	r2, #0
 8018c02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	2200      	movs	r2, #0
 8018c0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	2200      	movs	r2, #0
 8018c10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	2200      	movs	r2, #0
 8018c18:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d014      	beq.n	8018c50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c2c:	685b      	ldr	r3, [r3, #4]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d00e      	beq.n	8018c50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018c38:	685b      	ldr	r3, [r3, #4]
 8018c3a:	687a      	ldr	r2, [r7, #4]
 8018c3c:	6852      	ldr	r2, [r2, #4]
 8018c3e:	b2d2      	uxtb	r2, r2
 8018c40:	4611      	mov	r1, r2
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	4798      	blx	r3
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d001      	beq.n	8018c50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8018c4c:	2303      	movs	r3, #3
 8018c4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018c50:	2340      	movs	r3, #64	@ 0x40
 8018c52:	2200      	movs	r2, #0
 8018c54:	2100      	movs	r1, #0
 8018c56:	6878      	ldr	r0, [r7, #4]
 8018c58:	f001 fc79 	bl	801a54e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	2201      	movs	r2, #1
 8018c60:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	2240      	movs	r2, #64	@ 0x40
 8018c68:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018c6c:	2340      	movs	r3, #64	@ 0x40
 8018c6e:	2200      	movs	r2, #0
 8018c70:	2180      	movs	r1, #128	@ 0x80
 8018c72:	6878      	ldr	r0, [r7, #4]
 8018c74:	f001 fc6b 	bl	801a54e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	2201      	movs	r2, #1
 8018c7c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	2240      	movs	r2, #64	@ 0x40
 8018c82:	621a      	str	r2, [r3, #32]

  return ret;
 8018c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c86:	4618      	mov	r0, r3
 8018c88:	3710      	adds	r7, #16
 8018c8a:	46bd      	mov	sp, r7
 8018c8c:	bd80      	pop	{r7, pc}

08018c8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018c8e:	b480      	push	{r7}
 8018c90:	b083      	sub	sp, #12
 8018c92:	af00      	add	r7, sp, #0
 8018c94:	6078      	str	r0, [r7, #4]
 8018c96:	460b      	mov	r3, r1
 8018c98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	78fa      	ldrb	r2, [r7, #3]
 8018c9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018ca0:	2300      	movs	r3, #0
}
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	370c      	adds	r7, #12
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cac:	4770      	bx	lr

08018cae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8018cae:	b480      	push	{r7}
 8018cb0:	b083      	sub	sp, #12
 8018cb2:	af00      	add	r7, sp, #0
 8018cb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cbc:	b2db      	uxtb	r3, r3
 8018cbe:	2b04      	cmp	r3, #4
 8018cc0:	d006      	beq.n	8018cd0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cc8:	b2da      	uxtb	r2, r3
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2204      	movs	r2, #4
 8018cd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8018cd8:	2300      	movs	r3, #0
}
 8018cda:	4618      	mov	r0, r3
 8018cdc:	370c      	adds	r7, #12
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce4:	4770      	bx	lr

08018ce6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018ce6:	b480      	push	{r7}
 8018ce8:	b083      	sub	sp, #12
 8018cea:	af00      	add	r7, sp, #0
 8018cec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018cf4:	b2db      	uxtb	r3, r3
 8018cf6:	2b04      	cmp	r3, #4
 8018cf8:	d106      	bne.n	8018d08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8018d00:	b2da      	uxtb	r2, r3
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8018d08:	2300      	movs	r3, #0
}
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	370c      	adds	r7, #12
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d14:	4770      	bx	lr

08018d16 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018d16:	b580      	push	{r7, lr}
 8018d18:	b082      	sub	sp, #8
 8018d1a:	af00      	add	r7, sp, #0
 8018d1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	2b03      	cmp	r3, #3
 8018d28:	d110      	bne.n	8018d4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d00b      	beq.n	8018d4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d3a:	69db      	ldr	r3, [r3, #28]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d005      	beq.n	8018d4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018d46:	69db      	ldr	r3, [r3, #28]
 8018d48:	6878      	ldr	r0, [r7, #4]
 8018d4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8018d4c:	2300      	movs	r3, #0
}
 8018d4e:	4618      	mov	r0, r3
 8018d50:	3708      	adds	r7, #8
 8018d52:	46bd      	mov	sp, r7
 8018d54:	bd80      	pop	{r7, pc}

08018d56 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018d56:	b580      	push	{r7, lr}
 8018d58:	b082      	sub	sp, #8
 8018d5a:	af00      	add	r7, sp, #0
 8018d5c:	6078      	str	r0, [r7, #4]
 8018d5e:	460b      	mov	r3, r1
 8018d60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	32ae      	adds	r2, #174	@ 0xae
 8018d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d101      	bne.n	8018d78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8018d74:	2303      	movs	r3, #3
 8018d76:	e01c      	b.n	8018db2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018d7e:	b2db      	uxtb	r3, r3
 8018d80:	2b03      	cmp	r3, #3
 8018d82:	d115      	bne.n	8018db0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	32ae      	adds	r2, #174	@ 0xae
 8018d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d92:	6a1b      	ldr	r3, [r3, #32]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d00b      	beq.n	8018db0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	32ae      	adds	r2, #174	@ 0xae
 8018da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018da6:	6a1b      	ldr	r3, [r3, #32]
 8018da8:	78fa      	ldrb	r2, [r7, #3]
 8018daa:	4611      	mov	r1, r2
 8018dac:	6878      	ldr	r0, [r7, #4]
 8018dae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018db0:	2300      	movs	r3, #0
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3708      	adds	r7, #8
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8018dba:	b580      	push	{r7, lr}
 8018dbc:	b082      	sub	sp, #8
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
 8018dc2:	460b      	mov	r3, r1
 8018dc4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	32ae      	adds	r2, #174	@ 0xae
 8018dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d101      	bne.n	8018ddc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8018dd8:	2303      	movs	r3, #3
 8018dda:	e01c      	b.n	8018e16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8018de2:	b2db      	uxtb	r3, r3
 8018de4:	2b03      	cmp	r3, #3
 8018de6:	d115      	bne.n	8018e14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	32ae      	adds	r2, #174	@ 0xae
 8018df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d00b      	beq.n	8018e14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	32ae      	adds	r2, #174	@ 0xae
 8018e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e0c:	78fa      	ldrb	r2, [r7, #3]
 8018e0e:	4611      	mov	r1, r2
 8018e10:	6878      	ldr	r0, [r7, #4]
 8018e12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018e14:	2300      	movs	r3, #0
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	3708      	adds	r7, #8
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}

08018e1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018e1e:	b480      	push	{r7}
 8018e20:	b083      	sub	sp, #12
 8018e22:	af00      	add	r7, sp, #0
 8018e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018e26:	2300      	movs	r3, #0
}
 8018e28:	4618      	mov	r0, r3
 8018e2a:	370c      	adds	r7, #12
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e32:	4770      	bx	lr

08018e34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8018e34:	b580      	push	{r7, lr}
 8018e36:	b084      	sub	sp, #16
 8018e38:	af00      	add	r7, sp, #0
 8018e3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2201      	movs	r2, #1
 8018e44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d00e      	beq.n	8018e70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8018e58:	685b      	ldr	r3, [r3, #4]
 8018e5a:	687a      	ldr	r2, [r7, #4]
 8018e5c:	6852      	ldr	r2, [r2, #4]
 8018e5e:	b2d2      	uxtb	r2, r2
 8018e60:	4611      	mov	r1, r2
 8018e62:	6878      	ldr	r0, [r7, #4]
 8018e64:	4798      	blx	r3
 8018e66:	4603      	mov	r3, r0
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d001      	beq.n	8018e70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8018e6c:	2303      	movs	r3, #3
 8018e6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8018e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8018e72:	4618      	mov	r0, r3
 8018e74:	3710      	adds	r7, #16
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}

08018e7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018e7a:	b480      	push	{r7}
 8018e7c:	b083      	sub	sp, #12
 8018e7e:	af00      	add	r7, sp, #0
 8018e80:	6078      	str	r0, [r7, #4]
 8018e82:	460b      	mov	r3, r1
 8018e84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018e86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018e88:	4618      	mov	r0, r3
 8018e8a:	370c      	adds	r7, #12
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e92:	4770      	bx	lr

08018e94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8018e94:	b480      	push	{r7}
 8018e96:	b083      	sub	sp, #12
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
 8018e9c:	460b      	mov	r3, r1
 8018e9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8018ea0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	370c      	adds	r7, #12
 8018ea6:	46bd      	mov	sp, r7
 8018ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eac:	4770      	bx	lr

08018eae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8018eae:	b580      	push	{r7, lr}
 8018eb0:	b086      	sub	sp, #24
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	6078      	str	r0, [r7, #4]
 8018eb6:	460b      	mov	r3, r1
 8018eb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8018ec6:	68fb      	ldr	r3, [r7, #12]
 8018ec8:	885b      	ldrh	r3, [r3, #2]
 8018eca:	b29b      	uxth	r3, r3
 8018ecc:	68fa      	ldr	r2, [r7, #12]
 8018ece:	7812      	ldrb	r2, [r2, #0]
 8018ed0:	4293      	cmp	r3, r2
 8018ed2:	d91f      	bls.n	8018f14 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	781b      	ldrb	r3, [r3, #0]
 8018ed8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8018eda:	e013      	b.n	8018f04 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8018edc:	f107 030a 	add.w	r3, r7, #10
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	6978      	ldr	r0, [r7, #20]
 8018ee4:	f000 f81b 	bl	8018f1e <USBD_GetNextDesc>
 8018ee8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8018eea:	697b      	ldr	r3, [r7, #20]
 8018eec:	785b      	ldrb	r3, [r3, #1]
 8018eee:	2b05      	cmp	r3, #5
 8018ef0:	d108      	bne.n	8018f04 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8018ef2:	697b      	ldr	r3, [r7, #20]
 8018ef4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8018ef6:	693b      	ldr	r3, [r7, #16]
 8018ef8:	789b      	ldrb	r3, [r3, #2]
 8018efa:	78fa      	ldrb	r2, [r7, #3]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d008      	beq.n	8018f12 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8018f00:	2300      	movs	r3, #0
 8018f02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	885b      	ldrh	r3, [r3, #2]
 8018f08:	b29a      	uxth	r2, r3
 8018f0a:	897b      	ldrh	r3, [r7, #10]
 8018f0c:	429a      	cmp	r2, r3
 8018f0e:	d8e5      	bhi.n	8018edc <USBD_GetEpDesc+0x2e>
 8018f10:	e000      	b.n	8018f14 <USBD_GetEpDesc+0x66>
          break;
 8018f12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8018f14:	693b      	ldr	r3, [r7, #16]
}
 8018f16:	4618      	mov	r0, r3
 8018f18:	3718      	adds	r7, #24
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	bd80      	pop	{r7, pc}

08018f1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8018f1e:	b480      	push	{r7}
 8018f20:	b085      	sub	sp, #20
 8018f22:	af00      	add	r7, sp, #0
 8018f24:	6078      	str	r0, [r7, #4]
 8018f26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8018f2c:	683b      	ldr	r3, [r7, #0]
 8018f2e:	881b      	ldrh	r3, [r3, #0]
 8018f30:	68fa      	ldr	r2, [r7, #12]
 8018f32:	7812      	ldrb	r2, [r2, #0]
 8018f34:	4413      	add	r3, r2
 8018f36:	b29a      	uxth	r2, r3
 8018f38:	683b      	ldr	r3, [r7, #0]
 8018f3a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	781b      	ldrb	r3, [r3, #0]
 8018f40:	461a      	mov	r2, r3
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	4413      	add	r3, r2
 8018f46:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8018f48:	68fb      	ldr	r3, [r7, #12]
}
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	3714      	adds	r7, #20
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f54:	4770      	bx	lr

08018f56 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018f56:	b480      	push	{r7}
 8018f58:	b087      	sub	sp, #28
 8018f5a:	af00      	add	r7, sp, #0
 8018f5c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018f62:	697b      	ldr	r3, [r7, #20]
 8018f64:	781b      	ldrb	r3, [r3, #0]
 8018f66:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	3301      	adds	r3, #1
 8018f6c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8018f6e:	697b      	ldr	r3, [r7, #20]
 8018f70:	781b      	ldrb	r3, [r3, #0]
 8018f72:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018f74:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8018f78:	021b      	lsls	r3, r3, #8
 8018f7a:	b21a      	sxth	r2, r3
 8018f7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018f80:	4313      	orrs	r3, r2
 8018f82:	b21b      	sxth	r3, r3
 8018f84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018f86:	89fb      	ldrh	r3, [r7, #14]
}
 8018f88:	4618      	mov	r0, r3
 8018f8a:	371c      	adds	r7, #28
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr

08018f94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b084      	sub	sp, #16
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
 8018f9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018fa2:	683b      	ldr	r3, [r7, #0]
 8018fa4:	781b      	ldrb	r3, [r3, #0]
 8018fa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018faa:	2b40      	cmp	r3, #64	@ 0x40
 8018fac:	d005      	beq.n	8018fba <USBD_StdDevReq+0x26>
 8018fae:	2b40      	cmp	r3, #64	@ 0x40
 8018fb0:	d857      	bhi.n	8019062 <USBD_StdDevReq+0xce>
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d00f      	beq.n	8018fd6 <USBD_StdDevReq+0x42>
 8018fb6:	2b20      	cmp	r3, #32
 8018fb8:	d153      	bne.n	8019062 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	32ae      	adds	r2, #174	@ 0xae
 8018fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018fc8:	689b      	ldr	r3, [r3, #8]
 8018fca:	6839      	ldr	r1, [r7, #0]
 8018fcc:	6878      	ldr	r0, [r7, #4]
 8018fce:	4798      	blx	r3
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8018fd4:	e04a      	b.n	801906c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	785b      	ldrb	r3, [r3, #1]
 8018fda:	2b09      	cmp	r3, #9
 8018fdc:	d83b      	bhi.n	8019056 <USBD_StdDevReq+0xc2>
 8018fde:	a201      	add	r2, pc, #4	@ (adr r2, 8018fe4 <USBD_StdDevReq+0x50>)
 8018fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fe4:	08019039 	.word	0x08019039
 8018fe8:	0801904d 	.word	0x0801904d
 8018fec:	08019057 	.word	0x08019057
 8018ff0:	08019043 	.word	0x08019043
 8018ff4:	08019057 	.word	0x08019057
 8018ff8:	08019017 	.word	0x08019017
 8018ffc:	0801900d 	.word	0x0801900d
 8019000:	08019057 	.word	0x08019057
 8019004:	0801902f 	.word	0x0801902f
 8019008:	08019021 	.word	0x08019021
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801900c:	6839      	ldr	r1, [r7, #0]
 801900e:	6878      	ldr	r0, [r7, #4]
 8019010:	f000 fa3c 	bl	801948c <USBD_GetDescriptor>
          break;
 8019014:	e024      	b.n	8019060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8019016:	6839      	ldr	r1, [r7, #0]
 8019018:	6878      	ldr	r0, [r7, #4]
 801901a:	f000 fbcb 	bl	80197b4 <USBD_SetAddress>
          break;
 801901e:	e01f      	b.n	8019060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8019020:	6839      	ldr	r1, [r7, #0]
 8019022:	6878      	ldr	r0, [r7, #4]
 8019024:	f000 fc0a 	bl	801983c <USBD_SetConfig>
 8019028:	4603      	mov	r3, r0
 801902a:	73fb      	strb	r3, [r7, #15]
          break;
 801902c:	e018      	b.n	8019060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801902e:	6839      	ldr	r1, [r7, #0]
 8019030:	6878      	ldr	r0, [r7, #4]
 8019032:	f000 fcad 	bl	8019990 <USBD_GetConfig>
          break;
 8019036:	e013      	b.n	8019060 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8019038:	6839      	ldr	r1, [r7, #0]
 801903a:	6878      	ldr	r0, [r7, #4]
 801903c:	f000 fcde 	bl	80199fc <USBD_GetStatus>
          break;
 8019040:	e00e      	b.n	8019060 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8019042:	6839      	ldr	r1, [r7, #0]
 8019044:	6878      	ldr	r0, [r7, #4]
 8019046:	f000 fd0d 	bl	8019a64 <USBD_SetFeature>
          break;
 801904a:	e009      	b.n	8019060 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801904c:	6839      	ldr	r1, [r7, #0]
 801904e:	6878      	ldr	r0, [r7, #4]
 8019050:	f000 fd31 	bl	8019ab6 <USBD_ClrFeature>
          break;
 8019054:	e004      	b.n	8019060 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8019056:	6839      	ldr	r1, [r7, #0]
 8019058:	6878      	ldr	r0, [r7, #4]
 801905a:	f000 fd88 	bl	8019b6e <USBD_CtlError>
          break;
 801905e:	bf00      	nop
      }
      break;
 8019060:	e004      	b.n	801906c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8019062:	6839      	ldr	r1, [r7, #0]
 8019064:	6878      	ldr	r0, [r7, #4]
 8019066:	f000 fd82 	bl	8019b6e <USBD_CtlError>
      break;
 801906a:	bf00      	nop
  }

  return ret;
 801906c:	7bfb      	ldrb	r3, [r7, #15]
}
 801906e:	4618      	mov	r0, r3
 8019070:	3710      	adds	r7, #16
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
 8019076:	bf00      	nop

08019078 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b084      	sub	sp, #16
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019082:	2300      	movs	r3, #0
 8019084:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019086:	683b      	ldr	r3, [r7, #0]
 8019088:	781b      	ldrb	r3, [r3, #0]
 801908a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801908e:	2b40      	cmp	r3, #64	@ 0x40
 8019090:	d005      	beq.n	801909e <USBD_StdItfReq+0x26>
 8019092:	2b40      	cmp	r3, #64	@ 0x40
 8019094:	d852      	bhi.n	801913c <USBD_StdItfReq+0xc4>
 8019096:	2b00      	cmp	r3, #0
 8019098:	d001      	beq.n	801909e <USBD_StdItfReq+0x26>
 801909a:	2b20      	cmp	r3, #32
 801909c:	d14e      	bne.n	801913c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80190a4:	b2db      	uxtb	r3, r3
 80190a6:	3b01      	subs	r3, #1
 80190a8:	2b02      	cmp	r3, #2
 80190aa:	d840      	bhi.n	801912e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80190ac:	683b      	ldr	r3, [r7, #0]
 80190ae:	889b      	ldrh	r3, [r3, #4]
 80190b0:	b2db      	uxtb	r3, r3
 80190b2:	2b01      	cmp	r3, #1
 80190b4:	d836      	bhi.n	8019124 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80190b6:	683b      	ldr	r3, [r7, #0]
 80190b8:	889b      	ldrh	r3, [r3, #4]
 80190ba:	b2db      	uxtb	r3, r3
 80190bc:	4619      	mov	r1, r3
 80190be:	6878      	ldr	r0, [r7, #4]
 80190c0:	f7ff fedb 	bl	8018e7a <USBD_CoreFindIF>
 80190c4:	4603      	mov	r3, r0
 80190c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80190c8:	7bbb      	ldrb	r3, [r7, #14]
 80190ca:	2bff      	cmp	r3, #255	@ 0xff
 80190cc:	d01d      	beq.n	801910a <USBD_StdItfReq+0x92>
 80190ce:	7bbb      	ldrb	r3, [r7, #14]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d11a      	bne.n	801910a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80190d4:	7bba      	ldrb	r2, [r7, #14]
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	32ae      	adds	r2, #174	@ 0xae
 80190da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190de:	689b      	ldr	r3, [r3, #8]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d00f      	beq.n	8019104 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80190e4:	7bba      	ldrb	r2, [r7, #14]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80190ec:	7bba      	ldrb	r2, [r7, #14]
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	32ae      	adds	r2, #174	@ 0xae
 80190f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80190f6:	689b      	ldr	r3, [r3, #8]
 80190f8:	6839      	ldr	r1, [r7, #0]
 80190fa:	6878      	ldr	r0, [r7, #4]
 80190fc:	4798      	blx	r3
 80190fe:	4603      	mov	r3, r0
 8019100:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019102:	e004      	b.n	801910e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8019104:	2303      	movs	r3, #3
 8019106:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8019108:	e001      	b.n	801910e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801910a:	2303      	movs	r3, #3
 801910c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801910e:	683b      	ldr	r3, [r7, #0]
 8019110:	88db      	ldrh	r3, [r3, #6]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d110      	bne.n	8019138 <USBD_StdItfReq+0xc0>
 8019116:	7bfb      	ldrb	r3, [r7, #15]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d10d      	bne.n	8019138 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f000 fdfd 	bl	8019d1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8019122:	e009      	b.n	8019138 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8019124:	6839      	ldr	r1, [r7, #0]
 8019126:	6878      	ldr	r0, [r7, #4]
 8019128:	f000 fd21 	bl	8019b6e <USBD_CtlError>
          break;
 801912c:	e004      	b.n	8019138 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801912e:	6839      	ldr	r1, [r7, #0]
 8019130:	6878      	ldr	r0, [r7, #4]
 8019132:	f000 fd1c 	bl	8019b6e <USBD_CtlError>
          break;
 8019136:	e000      	b.n	801913a <USBD_StdItfReq+0xc2>
          break;
 8019138:	bf00      	nop
      }
      break;
 801913a:	e004      	b.n	8019146 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801913c:	6839      	ldr	r1, [r7, #0]
 801913e:	6878      	ldr	r0, [r7, #4]
 8019140:	f000 fd15 	bl	8019b6e <USBD_CtlError>
      break;
 8019144:	bf00      	nop
  }

  return ret;
 8019146:	7bfb      	ldrb	r3, [r7, #15]
}
 8019148:	4618      	mov	r0, r3
 801914a:	3710      	adds	r7, #16
 801914c:	46bd      	mov	sp, r7
 801914e:	bd80      	pop	{r7, pc}

08019150 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019150:	b580      	push	{r7, lr}
 8019152:	b084      	sub	sp, #16
 8019154:	af00      	add	r7, sp, #0
 8019156:	6078      	str	r0, [r7, #4]
 8019158:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801915a:	2300      	movs	r3, #0
 801915c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801915e:	683b      	ldr	r3, [r7, #0]
 8019160:	889b      	ldrh	r3, [r3, #4]
 8019162:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8019164:	683b      	ldr	r3, [r7, #0]
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801916c:	2b40      	cmp	r3, #64	@ 0x40
 801916e:	d007      	beq.n	8019180 <USBD_StdEPReq+0x30>
 8019170:	2b40      	cmp	r3, #64	@ 0x40
 8019172:	f200 817f 	bhi.w	8019474 <USBD_StdEPReq+0x324>
 8019176:	2b00      	cmp	r3, #0
 8019178:	d02a      	beq.n	80191d0 <USBD_StdEPReq+0x80>
 801917a:	2b20      	cmp	r3, #32
 801917c:	f040 817a 	bne.w	8019474 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8019180:	7bbb      	ldrb	r3, [r7, #14]
 8019182:	4619      	mov	r1, r3
 8019184:	6878      	ldr	r0, [r7, #4]
 8019186:	f7ff fe85 	bl	8018e94 <USBD_CoreFindEP>
 801918a:	4603      	mov	r3, r0
 801918c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801918e:	7b7b      	ldrb	r3, [r7, #13]
 8019190:	2bff      	cmp	r3, #255	@ 0xff
 8019192:	f000 8174 	beq.w	801947e <USBD_StdEPReq+0x32e>
 8019196:	7b7b      	ldrb	r3, [r7, #13]
 8019198:	2b00      	cmp	r3, #0
 801919a:	f040 8170 	bne.w	801947e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801919e:	7b7a      	ldrb	r2, [r7, #13]
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80191a6:	7b7a      	ldrb	r2, [r7, #13]
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	32ae      	adds	r2, #174	@ 0xae
 80191ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191b0:	689b      	ldr	r3, [r3, #8]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	f000 8163 	beq.w	801947e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80191b8:	7b7a      	ldrb	r2, [r7, #13]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	32ae      	adds	r2, #174	@ 0xae
 80191be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80191c2:	689b      	ldr	r3, [r3, #8]
 80191c4:	6839      	ldr	r1, [r7, #0]
 80191c6:	6878      	ldr	r0, [r7, #4]
 80191c8:	4798      	blx	r3
 80191ca:	4603      	mov	r3, r0
 80191cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80191ce:	e156      	b.n	801947e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80191d0:	683b      	ldr	r3, [r7, #0]
 80191d2:	785b      	ldrb	r3, [r3, #1]
 80191d4:	2b03      	cmp	r3, #3
 80191d6:	d008      	beq.n	80191ea <USBD_StdEPReq+0x9a>
 80191d8:	2b03      	cmp	r3, #3
 80191da:	f300 8145 	bgt.w	8019468 <USBD_StdEPReq+0x318>
 80191de:	2b00      	cmp	r3, #0
 80191e0:	f000 809b 	beq.w	801931a <USBD_StdEPReq+0x1ca>
 80191e4:	2b01      	cmp	r3, #1
 80191e6:	d03c      	beq.n	8019262 <USBD_StdEPReq+0x112>
 80191e8:	e13e      	b.n	8019468 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80191f0:	b2db      	uxtb	r3, r3
 80191f2:	2b02      	cmp	r3, #2
 80191f4:	d002      	beq.n	80191fc <USBD_StdEPReq+0xac>
 80191f6:	2b03      	cmp	r3, #3
 80191f8:	d016      	beq.n	8019228 <USBD_StdEPReq+0xd8>
 80191fa:	e02c      	b.n	8019256 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80191fc:	7bbb      	ldrb	r3, [r7, #14]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d00d      	beq.n	801921e <USBD_StdEPReq+0xce>
 8019202:	7bbb      	ldrb	r3, [r7, #14]
 8019204:	2b80      	cmp	r3, #128	@ 0x80
 8019206:	d00a      	beq.n	801921e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019208:	7bbb      	ldrb	r3, [r7, #14]
 801920a:	4619      	mov	r1, r3
 801920c:	6878      	ldr	r0, [r7, #4]
 801920e:	f001 f9e3 	bl	801a5d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8019212:	2180      	movs	r1, #128	@ 0x80
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f001 f9df 	bl	801a5d8 <USBD_LL_StallEP>
 801921a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801921c:	e020      	b.n	8019260 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801921e:	6839      	ldr	r1, [r7, #0]
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f000 fca4 	bl	8019b6e <USBD_CtlError>
              break;
 8019226:	e01b      	b.n	8019260 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8019228:	683b      	ldr	r3, [r7, #0]
 801922a:	885b      	ldrh	r3, [r3, #2]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d10e      	bne.n	801924e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8019230:	7bbb      	ldrb	r3, [r7, #14]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d00b      	beq.n	801924e <USBD_StdEPReq+0xfe>
 8019236:	7bbb      	ldrb	r3, [r7, #14]
 8019238:	2b80      	cmp	r3, #128	@ 0x80
 801923a:	d008      	beq.n	801924e <USBD_StdEPReq+0xfe>
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	88db      	ldrh	r3, [r3, #6]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d104      	bne.n	801924e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8019244:	7bbb      	ldrb	r3, [r7, #14]
 8019246:	4619      	mov	r1, r3
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f001 f9c5 	bl	801a5d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f000 fd64 	bl	8019d1c <USBD_CtlSendStatus>

              break;
 8019254:	e004      	b.n	8019260 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8019256:	6839      	ldr	r1, [r7, #0]
 8019258:	6878      	ldr	r0, [r7, #4]
 801925a:	f000 fc88 	bl	8019b6e <USBD_CtlError>
              break;
 801925e:	bf00      	nop
          }
          break;
 8019260:	e107      	b.n	8019472 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019268:	b2db      	uxtb	r3, r3
 801926a:	2b02      	cmp	r3, #2
 801926c:	d002      	beq.n	8019274 <USBD_StdEPReq+0x124>
 801926e:	2b03      	cmp	r3, #3
 8019270:	d016      	beq.n	80192a0 <USBD_StdEPReq+0x150>
 8019272:	e04b      	b.n	801930c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8019274:	7bbb      	ldrb	r3, [r7, #14]
 8019276:	2b00      	cmp	r3, #0
 8019278:	d00d      	beq.n	8019296 <USBD_StdEPReq+0x146>
 801927a:	7bbb      	ldrb	r3, [r7, #14]
 801927c:	2b80      	cmp	r3, #128	@ 0x80
 801927e:	d00a      	beq.n	8019296 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8019280:	7bbb      	ldrb	r3, [r7, #14]
 8019282:	4619      	mov	r1, r3
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f001 f9a7 	bl	801a5d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801928a:	2180      	movs	r1, #128	@ 0x80
 801928c:	6878      	ldr	r0, [r7, #4]
 801928e:	f001 f9a3 	bl	801a5d8 <USBD_LL_StallEP>
 8019292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8019294:	e040      	b.n	8019318 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8019296:	6839      	ldr	r1, [r7, #0]
 8019298:	6878      	ldr	r0, [r7, #4]
 801929a:	f000 fc68 	bl	8019b6e <USBD_CtlError>
              break;
 801929e:	e03b      	b.n	8019318 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	885b      	ldrh	r3, [r3, #2]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d136      	bne.n	8019316 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80192a8:	7bbb      	ldrb	r3, [r7, #14]
 80192aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d004      	beq.n	80192bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80192b2:	7bbb      	ldrb	r3, [r7, #14]
 80192b4:	4619      	mov	r1, r3
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f001 f9ad 	bl	801a616 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80192bc:	6878      	ldr	r0, [r7, #4]
 80192be:	f000 fd2d 	bl	8019d1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80192c2:	7bbb      	ldrb	r3, [r7, #14]
 80192c4:	4619      	mov	r1, r3
 80192c6:	6878      	ldr	r0, [r7, #4]
 80192c8:	f7ff fde4 	bl	8018e94 <USBD_CoreFindEP>
 80192cc:	4603      	mov	r3, r0
 80192ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80192d0:	7b7b      	ldrb	r3, [r7, #13]
 80192d2:	2bff      	cmp	r3, #255	@ 0xff
 80192d4:	d01f      	beq.n	8019316 <USBD_StdEPReq+0x1c6>
 80192d6:	7b7b      	ldrb	r3, [r7, #13]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d11c      	bne.n	8019316 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80192dc:	7b7a      	ldrb	r2, [r7, #13]
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80192e4:	7b7a      	ldrb	r2, [r7, #13]
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	32ae      	adds	r2, #174	@ 0xae
 80192ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192ee:	689b      	ldr	r3, [r3, #8]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d010      	beq.n	8019316 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80192f4:	7b7a      	ldrb	r2, [r7, #13]
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	32ae      	adds	r2, #174	@ 0xae
 80192fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192fe:	689b      	ldr	r3, [r3, #8]
 8019300:	6839      	ldr	r1, [r7, #0]
 8019302:	6878      	ldr	r0, [r7, #4]
 8019304:	4798      	blx	r3
 8019306:	4603      	mov	r3, r0
 8019308:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801930a:	e004      	b.n	8019316 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	6878      	ldr	r0, [r7, #4]
 8019310:	f000 fc2d 	bl	8019b6e <USBD_CtlError>
              break;
 8019314:	e000      	b.n	8019318 <USBD_StdEPReq+0x1c8>
              break;
 8019316:	bf00      	nop
          }
          break;
 8019318:	e0ab      	b.n	8019472 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019320:	b2db      	uxtb	r3, r3
 8019322:	2b02      	cmp	r3, #2
 8019324:	d002      	beq.n	801932c <USBD_StdEPReq+0x1dc>
 8019326:	2b03      	cmp	r3, #3
 8019328:	d032      	beq.n	8019390 <USBD_StdEPReq+0x240>
 801932a:	e097      	b.n	801945c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801932c:	7bbb      	ldrb	r3, [r7, #14]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d007      	beq.n	8019342 <USBD_StdEPReq+0x1f2>
 8019332:	7bbb      	ldrb	r3, [r7, #14]
 8019334:	2b80      	cmp	r3, #128	@ 0x80
 8019336:	d004      	beq.n	8019342 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8019338:	6839      	ldr	r1, [r7, #0]
 801933a:	6878      	ldr	r0, [r7, #4]
 801933c:	f000 fc17 	bl	8019b6e <USBD_CtlError>
                break;
 8019340:	e091      	b.n	8019466 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019346:	2b00      	cmp	r3, #0
 8019348:	da0b      	bge.n	8019362 <USBD_StdEPReq+0x212>
 801934a:	7bbb      	ldrb	r3, [r7, #14]
 801934c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019350:	4613      	mov	r3, r2
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	4413      	add	r3, r2
 8019356:	009b      	lsls	r3, r3, #2
 8019358:	3310      	adds	r3, #16
 801935a:	687a      	ldr	r2, [r7, #4]
 801935c:	4413      	add	r3, r2
 801935e:	3304      	adds	r3, #4
 8019360:	e00b      	b.n	801937a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019362:	7bbb      	ldrb	r3, [r7, #14]
 8019364:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019368:	4613      	mov	r3, r2
 801936a:	009b      	lsls	r3, r3, #2
 801936c:	4413      	add	r3, r2
 801936e:	009b      	lsls	r3, r3, #2
 8019370:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019374:	687a      	ldr	r2, [r7, #4]
 8019376:	4413      	add	r3, r2
 8019378:	3304      	adds	r3, #4
 801937a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801937c:	68bb      	ldr	r3, [r7, #8]
 801937e:	2200      	movs	r2, #0
 8019380:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	2202      	movs	r2, #2
 8019386:	4619      	mov	r1, r3
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	f000 fc6d 	bl	8019c68 <USBD_CtlSendData>
              break;
 801938e:	e06a      	b.n	8019466 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8019390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019394:	2b00      	cmp	r3, #0
 8019396:	da11      	bge.n	80193bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8019398:	7bbb      	ldrb	r3, [r7, #14]
 801939a:	f003 020f 	and.w	r2, r3, #15
 801939e:	6879      	ldr	r1, [r7, #4]
 80193a0:	4613      	mov	r3, r2
 80193a2:	009b      	lsls	r3, r3, #2
 80193a4:	4413      	add	r3, r2
 80193a6:	009b      	lsls	r3, r3, #2
 80193a8:	440b      	add	r3, r1
 80193aa:	3324      	adds	r3, #36	@ 0x24
 80193ac:	881b      	ldrh	r3, [r3, #0]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d117      	bne.n	80193e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80193b2:	6839      	ldr	r1, [r7, #0]
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f000 fbda 	bl	8019b6e <USBD_CtlError>
                  break;
 80193ba:	e054      	b.n	8019466 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80193bc:	7bbb      	ldrb	r3, [r7, #14]
 80193be:	f003 020f 	and.w	r2, r3, #15
 80193c2:	6879      	ldr	r1, [r7, #4]
 80193c4:	4613      	mov	r3, r2
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	4413      	add	r3, r2
 80193ca:	009b      	lsls	r3, r3, #2
 80193cc:	440b      	add	r3, r1
 80193ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80193d2:	881b      	ldrh	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d104      	bne.n	80193e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80193d8:	6839      	ldr	r1, [r7, #0]
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f000 fbc7 	bl	8019b6e <USBD_CtlError>
                  break;
 80193e0:	e041      	b.n	8019466 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80193e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	da0b      	bge.n	8019402 <USBD_StdEPReq+0x2b2>
 80193ea:	7bbb      	ldrb	r3, [r7, #14]
 80193ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80193f0:	4613      	mov	r3, r2
 80193f2:	009b      	lsls	r3, r3, #2
 80193f4:	4413      	add	r3, r2
 80193f6:	009b      	lsls	r3, r3, #2
 80193f8:	3310      	adds	r3, #16
 80193fa:	687a      	ldr	r2, [r7, #4]
 80193fc:	4413      	add	r3, r2
 80193fe:	3304      	adds	r3, #4
 8019400:	e00b      	b.n	801941a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8019402:	7bbb      	ldrb	r3, [r7, #14]
 8019404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8019408:	4613      	mov	r3, r2
 801940a:	009b      	lsls	r3, r3, #2
 801940c:	4413      	add	r3, r2
 801940e:	009b      	lsls	r3, r3, #2
 8019410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	4413      	add	r3, r2
 8019418:	3304      	adds	r3, #4
 801941a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801941c:	7bbb      	ldrb	r3, [r7, #14]
 801941e:	2b00      	cmp	r3, #0
 8019420:	d002      	beq.n	8019428 <USBD_StdEPReq+0x2d8>
 8019422:	7bbb      	ldrb	r3, [r7, #14]
 8019424:	2b80      	cmp	r3, #128	@ 0x80
 8019426:	d103      	bne.n	8019430 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8019428:	68bb      	ldr	r3, [r7, #8]
 801942a:	2200      	movs	r2, #0
 801942c:	601a      	str	r2, [r3, #0]
 801942e:	e00e      	b.n	801944e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8019430:	7bbb      	ldrb	r3, [r7, #14]
 8019432:	4619      	mov	r1, r3
 8019434:	6878      	ldr	r0, [r7, #4]
 8019436:	f001 f90d 	bl	801a654 <USBD_LL_IsStallEP>
 801943a:	4603      	mov	r3, r0
 801943c:	2b00      	cmp	r3, #0
 801943e:	d003      	beq.n	8019448 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8019440:	68bb      	ldr	r3, [r7, #8]
 8019442:	2201      	movs	r2, #1
 8019444:	601a      	str	r2, [r3, #0]
 8019446:	e002      	b.n	801944e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	2200      	movs	r2, #0
 801944c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801944e:	68bb      	ldr	r3, [r7, #8]
 8019450:	2202      	movs	r2, #2
 8019452:	4619      	mov	r1, r3
 8019454:	6878      	ldr	r0, [r7, #4]
 8019456:	f000 fc07 	bl	8019c68 <USBD_CtlSendData>
              break;
 801945a:	e004      	b.n	8019466 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 801945c:	6839      	ldr	r1, [r7, #0]
 801945e:	6878      	ldr	r0, [r7, #4]
 8019460:	f000 fb85 	bl	8019b6e <USBD_CtlError>
              break;
 8019464:	bf00      	nop
          }
          break;
 8019466:	e004      	b.n	8019472 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8019468:	6839      	ldr	r1, [r7, #0]
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	f000 fb7f 	bl	8019b6e <USBD_CtlError>
          break;
 8019470:	bf00      	nop
      }
      break;
 8019472:	e005      	b.n	8019480 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8019474:	6839      	ldr	r1, [r7, #0]
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	f000 fb79 	bl	8019b6e <USBD_CtlError>
      break;
 801947c:	e000      	b.n	8019480 <USBD_StdEPReq+0x330>
      break;
 801947e:	bf00      	nop
  }

  return ret;
 8019480:	7bfb      	ldrb	r3, [r7, #15]
}
 8019482:	4618      	mov	r0, r3
 8019484:	3710      	adds	r7, #16
 8019486:	46bd      	mov	sp, r7
 8019488:	bd80      	pop	{r7, pc}
	...

0801948c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b084      	sub	sp, #16
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
 8019494:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8019496:	2300      	movs	r3, #0
 8019498:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801949a:	2300      	movs	r3, #0
 801949c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801949e:	2300      	movs	r3, #0
 80194a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80194a2:	683b      	ldr	r3, [r7, #0]
 80194a4:	885b      	ldrh	r3, [r3, #2]
 80194a6:	0a1b      	lsrs	r3, r3, #8
 80194a8:	b29b      	uxth	r3, r3
 80194aa:	3b01      	subs	r3, #1
 80194ac:	2b0e      	cmp	r3, #14
 80194ae:	f200 8152 	bhi.w	8019756 <USBD_GetDescriptor+0x2ca>
 80194b2:	a201      	add	r2, pc, #4	@ (adr r2, 80194b8 <USBD_GetDescriptor+0x2c>)
 80194b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194b8:	08019529 	.word	0x08019529
 80194bc:	08019541 	.word	0x08019541
 80194c0:	08019581 	.word	0x08019581
 80194c4:	08019757 	.word	0x08019757
 80194c8:	08019757 	.word	0x08019757
 80194cc:	080196f7 	.word	0x080196f7
 80194d0:	08019723 	.word	0x08019723
 80194d4:	08019757 	.word	0x08019757
 80194d8:	08019757 	.word	0x08019757
 80194dc:	08019757 	.word	0x08019757
 80194e0:	08019757 	.word	0x08019757
 80194e4:	08019757 	.word	0x08019757
 80194e8:	08019757 	.word	0x08019757
 80194ec:	08019757 	.word	0x08019757
 80194f0:	080194f5 	.word	0x080194f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80194fa:	69db      	ldr	r3, [r3, #28]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d00b      	beq.n	8019518 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019506:	69db      	ldr	r3, [r3, #28]
 8019508:	687a      	ldr	r2, [r7, #4]
 801950a:	7c12      	ldrb	r2, [r2, #16]
 801950c:	f107 0108 	add.w	r1, r7, #8
 8019510:	4610      	mov	r0, r2
 8019512:	4798      	blx	r3
 8019514:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019516:	e126      	b.n	8019766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019518:	6839      	ldr	r1, [r7, #0]
 801951a:	6878      	ldr	r0, [r7, #4]
 801951c:	f000 fb27 	bl	8019b6e <USBD_CtlError>
        err++;
 8019520:	7afb      	ldrb	r3, [r7, #11]
 8019522:	3301      	adds	r3, #1
 8019524:	72fb      	strb	r3, [r7, #11]
      break;
 8019526:	e11e      	b.n	8019766 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	687a      	ldr	r2, [r7, #4]
 8019532:	7c12      	ldrb	r2, [r2, #16]
 8019534:	f107 0108 	add.w	r1, r7, #8
 8019538:	4610      	mov	r0, r2
 801953a:	4798      	blx	r3
 801953c:	60f8      	str	r0, [r7, #12]
      break;
 801953e:	e112      	b.n	8019766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	7c1b      	ldrb	r3, [r3, #16]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d10d      	bne.n	8019564 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801954e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019550:	f107 0208 	add.w	r2, r7, #8
 8019554:	4610      	mov	r0, r2
 8019556:	4798      	blx	r3
 8019558:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801955a:	68fb      	ldr	r3, [r7, #12]
 801955c:	3301      	adds	r3, #1
 801955e:	2202      	movs	r2, #2
 8019560:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8019562:	e100      	b.n	8019766 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801956a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801956c:	f107 0208 	add.w	r2, r7, #8
 8019570:	4610      	mov	r0, r2
 8019572:	4798      	blx	r3
 8019574:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8019576:	68fb      	ldr	r3, [r7, #12]
 8019578:	3301      	adds	r3, #1
 801957a:	2202      	movs	r2, #2
 801957c:	701a      	strb	r2, [r3, #0]
      break;
 801957e:	e0f2      	b.n	8019766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	885b      	ldrh	r3, [r3, #2]
 8019584:	b2db      	uxtb	r3, r3
 8019586:	2b05      	cmp	r3, #5
 8019588:	f200 80ac 	bhi.w	80196e4 <USBD_GetDescriptor+0x258>
 801958c:	a201      	add	r2, pc, #4	@ (adr r2, 8019594 <USBD_GetDescriptor+0x108>)
 801958e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019592:	bf00      	nop
 8019594:	080195ad 	.word	0x080195ad
 8019598:	080195e1 	.word	0x080195e1
 801959c:	08019615 	.word	0x08019615
 80195a0:	08019649 	.word	0x08019649
 80195a4:	0801967d 	.word	0x0801967d
 80195a8:	080196b1 	.word	0x080196b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195b2:	685b      	ldr	r3, [r3, #4]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d00b      	beq.n	80195d0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195be:	685b      	ldr	r3, [r3, #4]
 80195c0:	687a      	ldr	r2, [r7, #4]
 80195c2:	7c12      	ldrb	r2, [r2, #16]
 80195c4:	f107 0108 	add.w	r1, r7, #8
 80195c8:	4610      	mov	r0, r2
 80195ca:	4798      	blx	r3
 80195cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80195ce:	e091      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80195d0:	6839      	ldr	r1, [r7, #0]
 80195d2:	6878      	ldr	r0, [r7, #4]
 80195d4:	f000 facb 	bl	8019b6e <USBD_CtlError>
            err++;
 80195d8:	7afb      	ldrb	r3, [r7, #11]
 80195da:	3301      	adds	r3, #1
 80195dc:	72fb      	strb	r3, [r7, #11]
          break;
 80195de:	e089      	b.n	80196f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195e6:	689b      	ldr	r3, [r3, #8]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d00b      	beq.n	8019604 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80195f2:	689b      	ldr	r3, [r3, #8]
 80195f4:	687a      	ldr	r2, [r7, #4]
 80195f6:	7c12      	ldrb	r2, [r2, #16]
 80195f8:	f107 0108 	add.w	r1, r7, #8
 80195fc:	4610      	mov	r0, r2
 80195fe:	4798      	blx	r3
 8019600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019602:	e077      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019604:	6839      	ldr	r1, [r7, #0]
 8019606:	6878      	ldr	r0, [r7, #4]
 8019608:	f000 fab1 	bl	8019b6e <USBD_CtlError>
            err++;
 801960c:	7afb      	ldrb	r3, [r7, #11]
 801960e:	3301      	adds	r3, #1
 8019610:	72fb      	strb	r3, [r7, #11]
          break;
 8019612:	e06f      	b.n	80196f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801961a:	68db      	ldr	r3, [r3, #12]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d00b      	beq.n	8019638 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019626:	68db      	ldr	r3, [r3, #12]
 8019628:	687a      	ldr	r2, [r7, #4]
 801962a:	7c12      	ldrb	r2, [r2, #16]
 801962c:	f107 0108 	add.w	r1, r7, #8
 8019630:	4610      	mov	r0, r2
 8019632:	4798      	blx	r3
 8019634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8019636:	e05d      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8019638:	6839      	ldr	r1, [r7, #0]
 801963a:	6878      	ldr	r0, [r7, #4]
 801963c:	f000 fa97 	bl	8019b6e <USBD_CtlError>
            err++;
 8019640:	7afb      	ldrb	r3, [r7, #11]
 8019642:	3301      	adds	r3, #1
 8019644:	72fb      	strb	r3, [r7, #11]
          break;
 8019646:	e055      	b.n	80196f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801964e:	691b      	ldr	r3, [r3, #16]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d00b      	beq.n	801966c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801965a:	691b      	ldr	r3, [r3, #16]
 801965c:	687a      	ldr	r2, [r7, #4]
 801965e:	7c12      	ldrb	r2, [r2, #16]
 8019660:	f107 0108 	add.w	r1, r7, #8
 8019664:	4610      	mov	r0, r2
 8019666:	4798      	blx	r3
 8019668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801966a:	e043      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801966c:	6839      	ldr	r1, [r7, #0]
 801966e:	6878      	ldr	r0, [r7, #4]
 8019670:	f000 fa7d 	bl	8019b6e <USBD_CtlError>
            err++;
 8019674:	7afb      	ldrb	r3, [r7, #11]
 8019676:	3301      	adds	r3, #1
 8019678:	72fb      	strb	r3, [r7, #11]
          break;
 801967a:	e03b      	b.n	80196f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8019682:	695b      	ldr	r3, [r3, #20]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d00b      	beq.n	80196a0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801968e:	695b      	ldr	r3, [r3, #20]
 8019690:	687a      	ldr	r2, [r7, #4]
 8019692:	7c12      	ldrb	r2, [r2, #16]
 8019694:	f107 0108 	add.w	r1, r7, #8
 8019698:	4610      	mov	r0, r2
 801969a:	4798      	blx	r3
 801969c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801969e:	e029      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80196a0:	6839      	ldr	r1, [r7, #0]
 80196a2:	6878      	ldr	r0, [r7, #4]
 80196a4:	f000 fa63 	bl	8019b6e <USBD_CtlError>
            err++;
 80196a8:	7afb      	ldrb	r3, [r7, #11]
 80196aa:	3301      	adds	r3, #1
 80196ac:	72fb      	strb	r3, [r7, #11]
          break;
 80196ae:	e021      	b.n	80196f4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80196b6:	699b      	ldr	r3, [r3, #24]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d00b      	beq.n	80196d4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80196c2:	699b      	ldr	r3, [r3, #24]
 80196c4:	687a      	ldr	r2, [r7, #4]
 80196c6:	7c12      	ldrb	r2, [r2, #16]
 80196c8:	f107 0108 	add.w	r1, r7, #8
 80196cc:	4610      	mov	r0, r2
 80196ce:	4798      	blx	r3
 80196d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80196d2:	e00f      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80196d4:	6839      	ldr	r1, [r7, #0]
 80196d6:	6878      	ldr	r0, [r7, #4]
 80196d8:	f000 fa49 	bl	8019b6e <USBD_CtlError>
            err++;
 80196dc:	7afb      	ldrb	r3, [r7, #11]
 80196de:	3301      	adds	r3, #1
 80196e0:	72fb      	strb	r3, [r7, #11]
          break;
 80196e2:	e007      	b.n	80196f4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80196e4:	6839      	ldr	r1, [r7, #0]
 80196e6:	6878      	ldr	r0, [r7, #4]
 80196e8:	f000 fa41 	bl	8019b6e <USBD_CtlError>
          err++;
 80196ec:	7afb      	ldrb	r3, [r7, #11]
 80196ee:	3301      	adds	r3, #1
 80196f0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80196f2:	bf00      	nop
      }
      break;
 80196f4:	e037      	b.n	8019766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	7c1b      	ldrb	r3, [r3, #16]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d109      	bne.n	8019712 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019706:	f107 0208 	add.w	r2, r7, #8
 801970a:	4610      	mov	r0, r2
 801970c:	4798      	blx	r3
 801970e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019710:	e029      	b.n	8019766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019712:	6839      	ldr	r1, [r7, #0]
 8019714:	6878      	ldr	r0, [r7, #4]
 8019716:	f000 fa2a 	bl	8019b6e <USBD_CtlError>
        err++;
 801971a:	7afb      	ldrb	r3, [r7, #11]
 801971c:	3301      	adds	r3, #1
 801971e:	72fb      	strb	r3, [r7, #11]
      break;
 8019720:	e021      	b.n	8019766 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	7c1b      	ldrb	r3, [r3, #16]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d10d      	bne.n	8019746 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8019730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019732:	f107 0208 	add.w	r2, r7, #8
 8019736:	4610      	mov	r0, r2
 8019738:	4798      	blx	r3
 801973a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	3301      	adds	r3, #1
 8019740:	2207      	movs	r2, #7
 8019742:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8019744:	e00f      	b.n	8019766 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8019746:	6839      	ldr	r1, [r7, #0]
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f000 fa10 	bl	8019b6e <USBD_CtlError>
        err++;
 801974e:	7afb      	ldrb	r3, [r7, #11]
 8019750:	3301      	adds	r3, #1
 8019752:	72fb      	strb	r3, [r7, #11]
      break;
 8019754:	e007      	b.n	8019766 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8019756:	6839      	ldr	r1, [r7, #0]
 8019758:	6878      	ldr	r0, [r7, #4]
 801975a:	f000 fa08 	bl	8019b6e <USBD_CtlError>
      err++;
 801975e:	7afb      	ldrb	r3, [r7, #11]
 8019760:	3301      	adds	r3, #1
 8019762:	72fb      	strb	r3, [r7, #11]
      break;
 8019764:	bf00      	nop
  }

  if (err != 0U)
 8019766:	7afb      	ldrb	r3, [r7, #11]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d11e      	bne.n	80197aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 801976c:	683b      	ldr	r3, [r7, #0]
 801976e:	88db      	ldrh	r3, [r3, #6]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d016      	beq.n	80197a2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8019774:	893b      	ldrh	r3, [r7, #8]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d00e      	beq.n	8019798 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	88da      	ldrh	r2, [r3, #6]
 801977e:	893b      	ldrh	r3, [r7, #8]
 8019780:	4293      	cmp	r3, r2
 8019782:	bf28      	it	cs
 8019784:	4613      	movcs	r3, r2
 8019786:	b29b      	uxth	r3, r3
 8019788:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801978a:	893b      	ldrh	r3, [r7, #8]
 801978c:	461a      	mov	r2, r3
 801978e:	68f9      	ldr	r1, [r7, #12]
 8019790:	6878      	ldr	r0, [r7, #4]
 8019792:	f000 fa69 	bl	8019c68 <USBD_CtlSendData>
 8019796:	e009      	b.n	80197ac <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8019798:	6839      	ldr	r1, [r7, #0]
 801979a:	6878      	ldr	r0, [r7, #4]
 801979c:	f000 f9e7 	bl	8019b6e <USBD_CtlError>
 80197a0:	e004      	b.n	80197ac <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80197a2:	6878      	ldr	r0, [r7, #4]
 80197a4:	f000 faba 	bl	8019d1c <USBD_CtlSendStatus>
 80197a8:	e000      	b.n	80197ac <USBD_GetDescriptor+0x320>
    return;
 80197aa:	bf00      	nop
  }
}
 80197ac:	3710      	adds	r7, #16
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}
 80197b2:	bf00      	nop

080197b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
 80197bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80197be:	683b      	ldr	r3, [r7, #0]
 80197c0:	889b      	ldrh	r3, [r3, #4]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d131      	bne.n	801982a <USBD_SetAddress+0x76>
 80197c6:	683b      	ldr	r3, [r7, #0]
 80197c8:	88db      	ldrh	r3, [r3, #6]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d12d      	bne.n	801982a <USBD_SetAddress+0x76>
 80197ce:	683b      	ldr	r3, [r7, #0]
 80197d0:	885b      	ldrh	r3, [r3, #2]
 80197d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80197d4:	d829      	bhi.n	801982a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80197d6:	683b      	ldr	r3, [r7, #0]
 80197d8:	885b      	ldrh	r3, [r3, #2]
 80197da:	b2db      	uxtb	r3, r3
 80197dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80197e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80197e8:	b2db      	uxtb	r3, r3
 80197ea:	2b03      	cmp	r3, #3
 80197ec:	d104      	bne.n	80197f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80197ee:	6839      	ldr	r1, [r7, #0]
 80197f0:	6878      	ldr	r0, [r7, #4]
 80197f2:	f000 f9bc 	bl	8019b6e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80197f6:	e01d      	b.n	8019834 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	7bfa      	ldrb	r2, [r7, #15]
 80197fc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8019800:	7bfb      	ldrb	r3, [r7, #15]
 8019802:	4619      	mov	r1, r3
 8019804:	6878      	ldr	r0, [r7, #4]
 8019806:	f000 ff51 	bl	801a6ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f000 fa86 	bl	8019d1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8019810:	7bfb      	ldrb	r3, [r7, #15]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d004      	beq.n	8019820 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2202      	movs	r2, #2
 801981a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801981e:	e009      	b.n	8019834 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	2201      	movs	r2, #1
 8019824:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019828:	e004      	b.n	8019834 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801982a:	6839      	ldr	r1, [r7, #0]
 801982c:	6878      	ldr	r0, [r7, #4]
 801982e:	f000 f99e 	bl	8019b6e <USBD_CtlError>
  }
}
 8019832:	bf00      	nop
 8019834:	bf00      	nop
 8019836:	3710      	adds	r7, #16
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b084      	sub	sp, #16
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
 8019844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8019846:	2300      	movs	r3, #0
 8019848:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801984a:	683b      	ldr	r3, [r7, #0]
 801984c:	885b      	ldrh	r3, [r3, #2]
 801984e:	b2da      	uxtb	r2, r3
 8019850:	4b4e      	ldr	r3, [pc, #312]	@ (801998c <USBD_SetConfig+0x150>)
 8019852:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8019854:	4b4d      	ldr	r3, [pc, #308]	@ (801998c <USBD_SetConfig+0x150>)
 8019856:	781b      	ldrb	r3, [r3, #0]
 8019858:	2b01      	cmp	r3, #1
 801985a:	d905      	bls.n	8019868 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801985c:	6839      	ldr	r1, [r7, #0]
 801985e:	6878      	ldr	r0, [r7, #4]
 8019860:	f000 f985 	bl	8019b6e <USBD_CtlError>
    return USBD_FAIL;
 8019864:	2303      	movs	r3, #3
 8019866:	e08c      	b.n	8019982 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801986e:	b2db      	uxtb	r3, r3
 8019870:	2b02      	cmp	r3, #2
 8019872:	d002      	beq.n	801987a <USBD_SetConfig+0x3e>
 8019874:	2b03      	cmp	r3, #3
 8019876:	d029      	beq.n	80198cc <USBD_SetConfig+0x90>
 8019878:	e075      	b.n	8019966 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801987a:	4b44      	ldr	r3, [pc, #272]	@ (801998c <USBD_SetConfig+0x150>)
 801987c:	781b      	ldrb	r3, [r3, #0]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d020      	beq.n	80198c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8019882:	4b42      	ldr	r3, [pc, #264]	@ (801998c <USBD_SetConfig+0x150>)
 8019884:	781b      	ldrb	r3, [r3, #0]
 8019886:	461a      	mov	r2, r3
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801988c:	4b3f      	ldr	r3, [pc, #252]	@ (801998c <USBD_SetConfig+0x150>)
 801988e:	781b      	ldrb	r3, [r3, #0]
 8019890:	4619      	mov	r1, r3
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f7fe ffb9 	bl	801880a <USBD_SetClassConfig>
 8019898:	4603      	mov	r3, r0
 801989a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801989c:	7bfb      	ldrb	r3, [r7, #15]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d008      	beq.n	80198b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80198a2:	6839      	ldr	r1, [r7, #0]
 80198a4:	6878      	ldr	r0, [r7, #4]
 80198a6:	f000 f962 	bl	8019b6e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	2202      	movs	r2, #2
 80198ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80198b2:	e065      	b.n	8019980 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80198b4:	6878      	ldr	r0, [r7, #4]
 80198b6:	f000 fa31 	bl	8019d1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	2203      	movs	r2, #3
 80198be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80198c2:	e05d      	b.n	8019980 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80198c4:	6878      	ldr	r0, [r7, #4]
 80198c6:	f000 fa29 	bl	8019d1c <USBD_CtlSendStatus>
      break;
 80198ca:	e059      	b.n	8019980 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80198cc:	4b2f      	ldr	r3, [pc, #188]	@ (801998c <USBD_SetConfig+0x150>)
 80198ce:	781b      	ldrb	r3, [r3, #0]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d112      	bne.n	80198fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	2202      	movs	r2, #2
 80198d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80198dc:	4b2b      	ldr	r3, [pc, #172]	@ (801998c <USBD_SetConfig+0x150>)
 80198de:	781b      	ldrb	r3, [r3, #0]
 80198e0:	461a      	mov	r2, r3
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80198e6:	4b29      	ldr	r3, [pc, #164]	@ (801998c <USBD_SetConfig+0x150>)
 80198e8:	781b      	ldrb	r3, [r3, #0]
 80198ea:	4619      	mov	r1, r3
 80198ec:	6878      	ldr	r0, [r7, #4]
 80198ee:	f7fe ffa8 	bl	8018842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80198f2:	6878      	ldr	r0, [r7, #4]
 80198f4:	f000 fa12 	bl	8019d1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80198f8:	e042      	b.n	8019980 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80198fa:	4b24      	ldr	r3, [pc, #144]	@ (801998c <USBD_SetConfig+0x150>)
 80198fc:	781b      	ldrb	r3, [r3, #0]
 80198fe:	461a      	mov	r2, r3
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	685b      	ldr	r3, [r3, #4]
 8019904:	429a      	cmp	r2, r3
 8019906:	d02a      	beq.n	801995e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	685b      	ldr	r3, [r3, #4]
 801990c:	b2db      	uxtb	r3, r3
 801990e:	4619      	mov	r1, r3
 8019910:	6878      	ldr	r0, [r7, #4]
 8019912:	f7fe ff96 	bl	8018842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8019916:	4b1d      	ldr	r3, [pc, #116]	@ (801998c <USBD_SetConfig+0x150>)
 8019918:	781b      	ldrb	r3, [r3, #0]
 801991a:	461a      	mov	r2, r3
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8019920:	4b1a      	ldr	r3, [pc, #104]	@ (801998c <USBD_SetConfig+0x150>)
 8019922:	781b      	ldrb	r3, [r3, #0]
 8019924:	4619      	mov	r1, r3
 8019926:	6878      	ldr	r0, [r7, #4]
 8019928:	f7fe ff6f 	bl	801880a <USBD_SetClassConfig>
 801992c:	4603      	mov	r3, r0
 801992e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8019930:	7bfb      	ldrb	r3, [r7, #15]
 8019932:	2b00      	cmp	r3, #0
 8019934:	d00f      	beq.n	8019956 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8019936:	6839      	ldr	r1, [r7, #0]
 8019938:	6878      	ldr	r0, [r7, #4]
 801993a:	f000 f918 	bl	8019b6e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	685b      	ldr	r3, [r3, #4]
 8019942:	b2db      	uxtb	r3, r3
 8019944:	4619      	mov	r1, r3
 8019946:	6878      	ldr	r0, [r7, #4]
 8019948:	f7fe ff7b 	bl	8018842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	2202      	movs	r2, #2
 8019950:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8019954:	e014      	b.n	8019980 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8019956:	6878      	ldr	r0, [r7, #4]
 8019958:	f000 f9e0 	bl	8019d1c <USBD_CtlSendStatus>
      break;
 801995c:	e010      	b.n	8019980 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801995e:	6878      	ldr	r0, [r7, #4]
 8019960:	f000 f9dc 	bl	8019d1c <USBD_CtlSendStatus>
      break;
 8019964:	e00c      	b.n	8019980 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8019966:	6839      	ldr	r1, [r7, #0]
 8019968:	6878      	ldr	r0, [r7, #4]
 801996a:	f000 f900 	bl	8019b6e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801996e:	4b07      	ldr	r3, [pc, #28]	@ (801998c <USBD_SetConfig+0x150>)
 8019970:	781b      	ldrb	r3, [r3, #0]
 8019972:	4619      	mov	r1, r3
 8019974:	6878      	ldr	r0, [r7, #4]
 8019976:	f7fe ff64 	bl	8018842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801997a:	2303      	movs	r3, #3
 801997c:	73fb      	strb	r3, [r7, #15]
      break;
 801997e:	bf00      	nop
  }

  return ret;
 8019980:	7bfb      	ldrb	r3, [r7, #15]
}
 8019982:	4618      	mov	r0, r3
 8019984:	3710      	adds	r7, #16
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}
 801998a:	bf00      	nop
 801998c:	240472a0 	.word	0x240472a0

08019990 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019990:	b580      	push	{r7, lr}
 8019992:	b082      	sub	sp, #8
 8019994:	af00      	add	r7, sp, #0
 8019996:	6078      	str	r0, [r7, #4]
 8019998:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801999a:	683b      	ldr	r3, [r7, #0]
 801999c:	88db      	ldrh	r3, [r3, #6]
 801999e:	2b01      	cmp	r3, #1
 80199a0:	d004      	beq.n	80199ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80199a2:	6839      	ldr	r1, [r7, #0]
 80199a4:	6878      	ldr	r0, [r7, #4]
 80199a6:	f000 f8e2 	bl	8019b6e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80199aa:	e023      	b.n	80199f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80199b2:	b2db      	uxtb	r3, r3
 80199b4:	2b02      	cmp	r3, #2
 80199b6:	dc02      	bgt.n	80199be <USBD_GetConfig+0x2e>
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	dc03      	bgt.n	80199c4 <USBD_GetConfig+0x34>
 80199bc:	e015      	b.n	80199ea <USBD_GetConfig+0x5a>
 80199be:	2b03      	cmp	r3, #3
 80199c0:	d00b      	beq.n	80199da <USBD_GetConfig+0x4a>
 80199c2:	e012      	b.n	80199ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2200      	movs	r2, #0
 80199c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	3308      	adds	r3, #8
 80199ce:	2201      	movs	r2, #1
 80199d0:	4619      	mov	r1, r3
 80199d2:	6878      	ldr	r0, [r7, #4]
 80199d4:	f000 f948 	bl	8019c68 <USBD_CtlSendData>
        break;
 80199d8:	e00c      	b.n	80199f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	3304      	adds	r3, #4
 80199de:	2201      	movs	r2, #1
 80199e0:	4619      	mov	r1, r3
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f000 f940 	bl	8019c68 <USBD_CtlSendData>
        break;
 80199e8:	e004      	b.n	80199f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80199ea:	6839      	ldr	r1, [r7, #0]
 80199ec:	6878      	ldr	r0, [r7, #4]
 80199ee:	f000 f8be 	bl	8019b6e <USBD_CtlError>
        break;
 80199f2:	bf00      	nop
}
 80199f4:	bf00      	nop
 80199f6:	3708      	adds	r7, #8
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b082      	sub	sp, #8
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
 8019a04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019a0c:	b2db      	uxtb	r3, r3
 8019a0e:	3b01      	subs	r3, #1
 8019a10:	2b02      	cmp	r3, #2
 8019a12:	d81e      	bhi.n	8019a52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8019a14:	683b      	ldr	r3, [r7, #0]
 8019a16:	88db      	ldrh	r3, [r3, #6]
 8019a18:	2b02      	cmp	r3, #2
 8019a1a:	d004      	beq.n	8019a26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8019a1c:	6839      	ldr	r1, [r7, #0]
 8019a1e:	6878      	ldr	r0, [r7, #4]
 8019a20:	f000 f8a5 	bl	8019b6e <USBD_CtlError>
        break;
 8019a24:	e01a      	b.n	8019a5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	2201      	movs	r2, #1
 8019a2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d005      	beq.n	8019a42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	68db      	ldr	r3, [r3, #12]
 8019a3a:	f043 0202 	orr.w	r2, r3, #2
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	330c      	adds	r3, #12
 8019a46:	2202      	movs	r2, #2
 8019a48:	4619      	mov	r1, r3
 8019a4a:	6878      	ldr	r0, [r7, #4]
 8019a4c:	f000 f90c 	bl	8019c68 <USBD_CtlSendData>
      break;
 8019a50:	e004      	b.n	8019a5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8019a52:	6839      	ldr	r1, [r7, #0]
 8019a54:	6878      	ldr	r0, [r7, #4]
 8019a56:	f000 f88a 	bl	8019b6e <USBD_CtlError>
      break;
 8019a5a:	bf00      	nop
  }
}
 8019a5c:	bf00      	nop
 8019a5e:	3708      	adds	r7, #8
 8019a60:	46bd      	mov	sp, r7
 8019a62:	bd80      	pop	{r7, pc}

08019a64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b082      	sub	sp, #8
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	6078      	str	r0, [r7, #4]
 8019a6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019a6e:	683b      	ldr	r3, [r7, #0]
 8019a70:	885b      	ldrh	r3, [r3, #2]
 8019a72:	2b01      	cmp	r3, #1
 8019a74:	d107      	bne.n	8019a86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2201      	movs	r2, #1
 8019a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f000 f94c 	bl	8019d1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8019a84:	e013      	b.n	8019aae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	885b      	ldrh	r3, [r3, #2]
 8019a8a:	2b02      	cmp	r3, #2
 8019a8c:	d10b      	bne.n	8019aa6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	889b      	ldrh	r3, [r3, #4]
 8019a92:	0a1b      	lsrs	r3, r3, #8
 8019a94:	b29b      	uxth	r3, r3
 8019a96:	b2da      	uxtb	r2, r3
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8019a9e:	6878      	ldr	r0, [r7, #4]
 8019aa0:	f000 f93c 	bl	8019d1c <USBD_CtlSendStatus>
}
 8019aa4:	e003      	b.n	8019aae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8019aa6:	6839      	ldr	r1, [r7, #0]
 8019aa8:	6878      	ldr	r0, [r7, #4]
 8019aaa:	f000 f860 	bl	8019b6e <USBD_CtlError>
}
 8019aae:	bf00      	nop
 8019ab0:	3708      	adds	r7, #8
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}

08019ab6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019ab6:	b580      	push	{r7, lr}
 8019ab8:	b082      	sub	sp, #8
 8019aba:	af00      	add	r7, sp, #0
 8019abc:	6078      	str	r0, [r7, #4]
 8019abe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8019ac6:	b2db      	uxtb	r3, r3
 8019ac8:	3b01      	subs	r3, #1
 8019aca:	2b02      	cmp	r3, #2
 8019acc:	d80b      	bhi.n	8019ae6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	885b      	ldrh	r3, [r3, #2]
 8019ad2:	2b01      	cmp	r3, #1
 8019ad4:	d10c      	bne.n	8019af0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	2200      	movs	r2, #0
 8019ada:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8019ade:	6878      	ldr	r0, [r7, #4]
 8019ae0:	f000 f91c 	bl	8019d1c <USBD_CtlSendStatus>
      }
      break;
 8019ae4:	e004      	b.n	8019af0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8019ae6:	6839      	ldr	r1, [r7, #0]
 8019ae8:	6878      	ldr	r0, [r7, #4]
 8019aea:	f000 f840 	bl	8019b6e <USBD_CtlError>
      break;
 8019aee:	e000      	b.n	8019af2 <USBD_ClrFeature+0x3c>
      break;
 8019af0:	bf00      	nop
  }
}
 8019af2:	bf00      	nop
 8019af4:	3708      	adds	r7, #8
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}

08019afa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019afa:	b580      	push	{r7, lr}
 8019afc:	b084      	sub	sp, #16
 8019afe:	af00      	add	r7, sp, #0
 8019b00:	6078      	str	r0, [r7, #4]
 8019b02:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	781a      	ldrb	r2, [r3, #0]
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	3301      	adds	r3, #1
 8019b14:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	781a      	ldrb	r2, [r3, #0]
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	3301      	adds	r3, #1
 8019b22:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8019b24:	68f8      	ldr	r0, [r7, #12]
 8019b26:	f7ff fa16 	bl	8018f56 <SWAPBYTE>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	461a      	mov	r2, r3
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	3301      	adds	r3, #1
 8019b36:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019b3e:	68f8      	ldr	r0, [r7, #12]
 8019b40:	f7ff fa09 	bl	8018f56 <SWAPBYTE>
 8019b44:	4603      	mov	r3, r0
 8019b46:	461a      	mov	r2, r3
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	3301      	adds	r3, #1
 8019b50:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	3301      	adds	r3, #1
 8019b56:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019b58:	68f8      	ldr	r0, [r7, #12]
 8019b5a:	f7ff f9fc 	bl	8018f56 <SWAPBYTE>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	461a      	mov	r2, r3
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	80da      	strh	r2, [r3, #6]
}
 8019b66:	bf00      	nop
 8019b68:	3710      	adds	r7, #16
 8019b6a:	46bd      	mov	sp, r7
 8019b6c:	bd80      	pop	{r7, pc}

08019b6e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019b6e:	b580      	push	{r7, lr}
 8019b70:	b082      	sub	sp, #8
 8019b72:	af00      	add	r7, sp, #0
 8019b74:	6078      	str	r0, [r7, #4]
 8019b76:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019b78:	2180      	movs	r1, #128	@ 0x80
 8019b7a:	6878      	ldr	r0, [r7, #4]
 8019b7c:	f000 fd2c 	bl	801a5d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8019b80:	2100      	movs	r1, #0
 8019b82:	6878      	ldr	r0, [r7, #4]
 8019b84:	f000 fd28 	bl	801a5d8 <USBD_LL_StallEP>
}
 8019b88:	bf00      	nop
 8019b8a:	3708      	adds	r7, #8
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	bd80      	pop	{r7, pc}

08019b90 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b086      	sub	sp, #24
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	60f8      	str	r0, [r7, #12]
 8019b98:	60b9      	str	r1, [r7, #8]
 8019b9a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d042      	beq.n	8019c2c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8019baa:	6938      	ldr	r0, [r7, #16]
 8019bac:	f000 f842 	bl	8019c34 <USBD_GetLen>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	3301      	adds	r3, #1
 8019bb4:	005b      	lsls	r3, r3, #1
 8019bb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019bba:	d808      	bhi.n	8019bce <USBD_GetString+0x3e>
 8019bbc:	6938      	ldr	r0, [r7, #16]
 8019bbe:	f000 f839 	bl	8019c34 <USBD_GetLen>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	3301      	adds	r3, #1
 8019bc6:	b29b      	uxth	r3, r3
 8019bc8:	005b      	lsls	r3, r3, #1
 8019bca:	b29a      	uxth	r2, r3
 8019bcc:	e001      	b.n	8019bd2 <USBD_GetString+0x42>
 8019bce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8019bd6:	7dfb      	ldrb	r3, [r7, #23]
 8019bd8:	68ba      	ldr	r2, [r7, #8]
 8019bda:	4413      	add	r3, r2
 8019bdc:	687a      	ldr	r2, [r7, #4]
 8019bde:	7812      	ldrb	r2, [r2, #0]
 8019be0:	701a      	strb	r2, [r3, #0]
  idx++;
 8019be2:	7dfb      	ldrb	r3, [r7, #23]
 8019be4:	3301      	adds	r3, #1
 8019be6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8019be8:	7dfb      	ldrb	r3, [r7, #23]
 8019bea:	68ba      	ldr	r2, [r7, #8]
 8019bec:	4413      	add	r3, r2
 8019bee:	2203      	movs	r2, #3
 8019bf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8019bf2:	7dfb      	ldrb	r3, [r7, #23]
 8019bf4:	3301      	adds	r3, #1
 8019bf6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8019bf8:	e013      	b.n	8019c22 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8019bfa:	7dfb      	ldrb	r3, [r7, #23]
 8019bfc:	68ba      	ldr	r2, [r7, #8]
 8019bfe:	4413      	add	r3, r2
 8019c00:	693a      	ldr	r2, [r7, #16]
 8019c02:	7812      	ldrb	r2, [r2, #0]
 8019c04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8019c06:	693b      	ldr	r3, [r7, #16]
 8019c08:	3301      	adds	r3, #1
 8019c0a:	613b      	str	r3, [r7, #16]
    idx++;
 8019c0c:	7dfb      	ldrb	r3, [r7, #23]
 8019c0e:	3301      	adds	r3, #1
 8019c10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019c12:	7dfb      	ldrb	r3, [r7, #23]
 8019c14:	68ba      	ldr	r2, [r7, #8]
 8019c16:	4413      	add	r3, r2
 8019c18:	2200      	movs	r2, #0
 8019c1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8019c1c:	7dfb      	ldrb	r3, [r7, #23]
 8019c1e:	3301      	adds	r3, #1
 8019c20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019c22:	693b      	ldr	r3, [r7, #16]
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d1e7      	bne.n	8019bfa <USBD_GetString+0x6a>
 8019c2a:	e000      	b.n	8019c2e <USBD_GetString+0x9e>
    return;
 8019c2c:	bf00      	nop
  }
}
 8019c2e:	3718      	adds	r7, #24
 8019c30:	46bd      	mov	sp, r7
 8019c32:	bd80      	pop	{r7, pc}

08019c34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019c34:	b480      	push	{r7}
 8019c36:	b085      	sub	sp, #20
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019c44:	e005      	b.n	8019c52 <USBD_GetLen+0x1e>
  {
    len++;
 8019c46:	7bfb      	ldrb	r3, [r7, #15]
 8019c48:	3301      	adds	r3, #1
 8019c4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8019c4c:	68bb      	ldr	r3, [r7, #8]
 8019c4e:	3301      	adds	r3, #1
 8019c50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019c52:	68bb      	ldr	r3, [r7, #8]
 8019c54:	781b      	ldrb	r3, [r3, #0]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d1f5      	bne.n	8019c46 <USBD_GetLen+0x12>
  }

  return len;
 8019c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c5c:	4618      	mov	r0, r3
 8019c5e:	3714      	adds	r7, #20
 8019c60:	46bd      	mov	sp, r7
 8019c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c66:	4770      	bx	lr

08019c68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8019c68:	b580      	push	{r7, lr}
 8019c6a:	b084      	sub	sp, #16
 8019c6c:	af00      	add	r7, sp, #0
 8019c6e:	60f8      	str	r0, [r7, #12]
 8019c70:	60b9      	str	r1, [r7, #8]
 8019c72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	2202      	movs	r2, #2
 8019c78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8019c7c:	68fb      	ldr	r3, [r7, #12]
 8019c7e:	687a      	ldr	r2, [r7, #4]
 8019c80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	687a      	ldr	r2, [r7, #4]
 8019c86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019c88:	687b      	ldr	r3, [r7, #4]
 8019c8a:	68ba      	ldr	r2, [r7, #8]
 8019c8c:	2100      	movs	r1, #0
 8019c8e:	68f8      	ldr	r0, [r7, #12]
 8019c90:	f000 fd2b 	bl	801a6ea <USBD_LL_Transmit>

  return USBD_OK;
 8019c94:	2300      	movs	r3, #0
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	3710      	adds	r7, #16
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}

08019c9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019c9e:	b580      	push	{r7, lr}
 8019ca0:	b084      	sub	sp, #16
 8019ca2:	af00      	add	r7, sp, #0
 8019ca4:	60f8      	str	r0, [r7, #12]
 8019ca6:	60b9      	str	r1, [r7, #8]
 8019ca8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	68ba      	ldr	r2, [r7, #8]
 8019cae:	2100      	movs	r1, #0
 8019cb0:	68f8      	ldr	r0, [r7, #12]
 8019cb2:	f000 fd1a 	bl	801a6ea <USBD_LL_Transmit>

  return USBD_OK;
 8019cb6:	2300      	movs	r3, #0
}
 8019cb8:	4618      	mov	r0, r3
 8019cba:	3710      	adds	r7, #16
 8019cbc:	46bd      	mov	sp, r7
 8019cbe:	bd80      	pop	{r7, pc}

08019cc0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b084      	sub	sp, #16
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	60f8      	str	r0, [r7, #12]
 8019cc8:	60b9      	str	r1, [r7, #8]
 8019cca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	2203      	movs	r2, #3
 8019cd0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	687a      	ldr	r2, [r7, #4]
 8019cd8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	687a      	ldr	r2, [r7, #4]
 8019ce0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	68ba      	ldr	r2, [r7, #8]
 8019ce8:	2100      	movs	r1, #0
 8019cea:	68f8      	ldr	r0, [r7, #12]
 8019cec:	f000 fd1e 	bl	801a72c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019cf0:	2300      	movs	r3, #0
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3710      	adds	r7, #16
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}

08019cfa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8019cfa:	b580      	push	{r7, lr}
 8019cfc:	b084      	sub	sp, #16
 8019cfe:	af00      	add	r7, sp, #0
 8019d00:	60f8      	str	r0, [r7, #12]
 8019d02:	60b9      	str	r1, [r7, #8]
 8019d04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	68ba      	ldr	r2, [r7, #8]
 8019d0a:	2100      	movs	r1, #0
 8019d0c:	68f8      	ldr	r0, [r7, #12]
 8019d0e:	f000 fd0d 	bl	801a72c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019d12:	2300      	movs	r3, #0
}
 8019d14:	4618      	mov	r0, r3
 8019d16:	3710      	adds	r7, #16
 8019d18:	46bd      	mov	sp, r7
 8019d1a:	bd80      	pop	{r7, pc}

08019d1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2204      	movs	r2, #4
 8019d28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	2200      	movs	r2, #0
 8019d30:	2100      	movs	r1, #0
 8019d32:	6878      	ldr	r0, [r7, #4]
 8019d34:	f000 fcd9 	bl	801a6ea <USBD_LL_Transmit>

  return USBD_OK;
 8019d38:	2300      	movs	r3, #0
}
 8019d3a:	4618      	mov	r0, r3
 8019d3c:	3708      	adds	r7, #8
 8019d3e:	46bd      	mov	sp, r7
 8019d40:	bd80      	pop	{r7, pc}

08019d42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019d42:	b580      	push	{r7, lr}
 8019d44:	b082      	sub	sp, #8
 8019d46:	af00      	add	r7, sp, #0
 8019d48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	2205      	movs	r2, #5
 8019d4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019d52:	2300      	movs	r3, #0
 8019d54:	2200      	movs	r2, #0
 8019d56:	2100      	movs	r1, #0
 8019d58:	6878      	ldr	r0, [r7, #4]
 8019d5a:	f000 fce7 	bl	801a72c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019d5e:	2300      	movs	r3, #0
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	4918      	ldr	r1, [pc, #96]	@ (8019dd0 <MX_USB_DEVICE_Init+0x68>)
 8019d70:	4818      	ldr	r0, [pc, #96]	@ (8019dd4 <MX_USB_DEVICE_Init+0x6c>)
 8019d72:	f7fe fccd 	bl	8018710 <USBD_Init>
 8019d76:	4603      	mov	r3, r0
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d001      	beq.n	8019d80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019d7c:	f7e7 ff00 	bl	8001b80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019d80:	4915      	ldr	r1, [pc, #84]	@ (8019dd8 <MX_USB_DEVICE_Init+0x70>)
 8019d82:	4814      	ldr	r0, [pc, #80]	@ (8019dd4 <MX_USB_DEVICE_Init+0x6c>)
 8019d84:	f7fe fcf4 	bl	8018770 <USBD_RegisterClass>
 8019d88:	4603      	mov	r3, r0
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d001      	beq.n	8019d92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019d8e:	f7e7 fef7 	bl	8001b80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019d92:	4912      	ldr	r1, [pc, #72]	@ (8019ddc <MX_USB_DEVICE_Init+0x74>)
 8019d94:	480f      	ldr	r0, [pc, #60]	@ (8019dd4 <MX_USB_DEVICE_Init+0x6c>)
 8019d96:	f7fe fbeb 	bl	8018570 <USBD_CDC_RegisterInterface>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d001      	beq.n	8019da4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019da0:	f7e7 feee 	bl	8001b80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019da4:	480b      	ldr	r0, [pc, #44]	@ (8019dd4 <MX_USB_DEVICE_Init+0x6c>)
 8019da6:	f7fe fd19 	bl	80187dc <USBD_Start>
 8019daa:	4603      	mov	r3, r0
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d001      	beq.n	8019db4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019db0:	f7e7 fee6 	bl	8001b80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8019db4:	f7f4 fdc8 	bl	800e948 <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8019db8:	4b06      	ldr	r3, [pc, #24]	@ (8019dd4 <MX_USB_DEVICE_Init+0x6c>)
 8019dba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8019dbe:	4a05      	ldr	r2, [pc, #20]	@ (8019dd4 <MX_USB_DEVICE_Init+0x6c>)
 8019dc0:	33b0      	adds	r3, #176	@ 0xb0
 8019dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019dc6:	4a06      	ldr	r2, [pc, #24]	@ (8019de0 <MX_USB_DEVICE_Init+0x78>)
 8019dc8:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019dca:	bf00      	nop
 8019dcc:	bd80      	pop	{r7, pc}
 8019dce:	bf00      	nop
 8019dd0:	240002f0 	.word	0x240002f0
 8019dd4:	240472a4 	.word	0x240472a4
 8019dd8:	2400025c 	.word	0x2400025c
 8019ddc:	240002dc 	.word	0x240002dc
 8019de0:	24047580 	.word	0x24047580

08019de4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019de4:	b580      	push	{r7, lr}
 8019de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019de8:	2200      	movs	r2, #0
 8019dea:	4905      	ldr	r1, [pc, #20]	@ (8019e00 <CDC_Init_FS+0x1c>)
 8019dec:	4805      	ldr	r0, [pc, #20]	@ (8019e04 <CDC_Init_FS+0x20>)
 8019dee:	f7fe fbd9 	bl	80185a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019df2:	4905      	ldr	r1, [pc, #20]	@ (8019e08 <CDC_Init_FS+0x24>)
 8019df4:	4803      	ldr	r0, [pc, #12]	@ (8019e04 <CDC_Init_FS+0x20>)
 8019df6:	f7fe fbf7 	bl	80185e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019dfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019dfc:	4618      	mov	r0, r3
 8019dfe:	bd80      	pop	{r7, pc}
 8019e00:	24047d84 	.word	0x24047d84
 8019e04:	240472a4 	.word	0x240472a4
 8019e08:	24047584 	.word	0x24047584

08019e0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019e0c:	b480      	push	{r7}
 8019e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019e10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	46bd      	mov	sp, r7
 8019e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e1a:	4770      	bx	lr

08019e1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	b083      	sub	sp, #12
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	4603      	mov	r3, r0
 8019e24:	6039      	str	r1, [r7, #0]
 8019e26:	71fb      	strb	r3, [r7, #7]
 8019e28:	4613      	mov	r3, r2
 8019e2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019e2c:	79fb      	ldrb	r3, [r7, #7]
 8019e2e:	2b23      	cmp	r3, #35	@ 0x23
 8019e30:	d84a      	bhi.n	8019ec8 <CDC_Control_FS+0xac>
 8019e32:	a201      	add	r2, pc, #4	@ (adr r2, 8019e38 <CDC_Control_FS+0x1c>)
 8019e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e38:	08019ec9 	.word	0x08019ec9
 8019e3c:	08019ec9 	.word	0x08019ec9
 8019e40:	08019ec9 	.word	0x08019ec9
 8019e44:	08019ec9 	.word	0x08019ec9
 8019e48:	08019ec9 	.word	0x08019ec9
 8019e4c:	08019ec9 	.word	0x08019ec9
 8019e50:	08019ec9 	.word	0x08019ec9
 8019e54:	08019ec9 	.word	0x08019ec9
 8019e58:	08019ec9 	.word	0x08019ec9
 8019e5c:	08019ec9 	.word	0x08019ec9
 8019e60:	08019ec9 	.word	0x08019ec9
 8019e64:	08019ec9 	.word	0x08019ec9
 8019e68:	08019ec9 	.word	0x08019ec9
 8019e6c:	08019ec9 	.word	0x08019ec9
 8019e70:	08019ec9 	.word	0x08019ec9
 8019e74:	08019ec9 	.word	0x08019ec9
 8019e78:	08019ec9 	.word	0x08019ec9
 8019e7c:	08019ec9 	.word	0x08019ec9
 8019e80:	08019ec9 	.word	0x08019ec9
 8019e84:	08019ec9 	.word	0x08019ec9
 8019e88:	08019ec9 	.word	0x08019ec9
 8019e8c:	08019ec9 	.word	0x08019ec9
 8019e90:	08019ec9 	.word	0x08019ec9
 8019e94:	08019ec9 	.word	0x08019ec9
 8019e98:	08019ec9 	.word	0x08019ec9
 8019e9c:	08019ec9 	.word	0x08019ec9
 8019ea0:	08019ec9 	.word	0x08019ec9
 8019ea4:	08019ec9 	.word	0x08019ec9
 8019ea8:	08019ec9 	.word	0x08019ec9
 8019eac:	08019ec9 	.word	0x08019ec9
 8019eb0:	08019ec9 	.word	0x08019ec9
 8019eb4:	08019ec9 	.word	0x08019ec9
 8019eb8:	08019ec9 	.word	0x08019ec9
 8019ebc:	08019ec9 	.word	0x08019ec9
 8019ec0:	08019ec9 	.word	0x08019ec9
 8019ec4:	08019ec9 	.word	0x08019ec9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019ec8:	bf00      	nop
  }

  return (USBD_OK);
 8019eca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019ecc:	4618      	mov	r0, r3
 8019ece:	370c      	adds	r7, #12
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed6:	4770      	bx	lr

08019ed8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b082      	sub	sp, #8
 8019edc:	af00      	add	r7, sp, #0
 8019ede:	6078      	str	r0, [r7, #4]
 8019ee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019ee2:	6879      	ldr	r1, [r7, #4]
 8019ee4:	480a      	ldr	r0, [pc, #40]	@ (8019f10 <CDC_Receive_FS+0x38>)
 8019ee6:	f7fe fb7f 	bl	80185e8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019eea:	4809      	ldr	r0, [pc, #36]	@ (8019f10 <CDC_Receive_FS+0x38>)
 8019eec:	f7fe fbda 	bl	80186a4 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8019ef0:	4b08      	ldr	r3, [pc, #32]	@ (8019f14 <CDC_Receive_FS+0x3c>)
 8019ef2:	2201      	movs	r2, #1
 8019ef4:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	b29a      	uxth	r2, r3
 8019efc:	2364      	movs	r3, #100	@ 0x64
 8019efe:	6879      	ldr	r1, [r7, #4]
 8019f00:	4805      	ldr	r0, [pc, #20]	@ (8019f18 <CDC_Receive_FS+0x40>)
 8019f02:	f7f9 fefb 	bl	8013cfc <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8019f06:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019f08:	4618      	mov	r0, r3
 8019f0a:	3708      	adds	r7, #8
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}
 8019f10:	240472a4 	.word	0x240472a4
 8019f14:	24047294 	.word	0x24047294
 8019f18:	24000a18 	.word	0x24000a18

08019f1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b084      	sub	sp, #16
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
 8019f24:	460b      	mov	r3, r1
 8019f26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019f28:	2300      	movs	r3, #0
 8019f2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8019f64 <CDC_Transmit_FS+0x48>)
 8019f2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8019f32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d001      	beq.n	8019f42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019f3e:	2301      	movs	r3, #1
 8019f40:	e00b      	b.n	8019f5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019f42:	887b      	ldrh	r3, [r7, #2]
 8019f44:	461a      	mov	r2, r3
 8019f46:	6879      	ldr	r1, [r7, #4]
 8019f48:	4806      	ldr	r0, [pc, #24]	@ (8019f64 <CDC_Transmit_FS+0x48>)
 8019f4a:	f7fe fb2b 	bl	80185a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019f4e:	4805      	ldr	r0, [pc, #20]	@ (8019f64 <CDC_Transmit_FS+0x48>)
 8019f50:	f7fe fb68 	bl	8018624 <USBD_CDC_TransmitPacket>
 8019f54:	4603      	mov	r3, r0
 8019f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3710      	adds	r7, #16
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}
 8019f62:	bf00      	nop
 8019f64:	240472a4 	.word	0x240472a4

08019f68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b087      	sub	sp, #28
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	60f8      	str	r0, [r7, #12]
 8019f70:	60b9      	str	r1, [r7, #8]
 8019f72:	4613      	mov	r3, r2
 8019f74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019f76:	2300      	movs	r3, #0
 8019f78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f7e:	4618      	mov	r0, r3
 8019f80:	371c      	adds	r7, #28
 8019f82:	46bd      	mov	sp, r7
 8019f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f88:	4770      	bx	lr
	...

08019f8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f8c:	b480      	push	{r7}
 8019f8e:	b083      	sub	sp, #12
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	4603      	mov	r3, r0
 8019f94:	6039      	str	r1, [r7, #0]
 8019f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019f98:	683b      	ldr	r3, [r7, #0]
 8019f9a:	2212      	movs	r2, #18
 8019f9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019f9e:	4b03      	ldr	r3, [pc, #12]	@ (8019fac <USBD_FS_DeviceDescriptor+0x20>)
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	370c      	adds	r7, #12
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019faa:	4770      	bx	lr
 8019fac:	24000310 	.word	0x24000310

08019fb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b083      	sub	sp, #12
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	6039      	str	r1, [r7, #0]
 8019fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	2204      	movs	r2, #4
 8019fc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019fc2:	4b03      	ldr	r3, [pc, #12]	@ (8019fd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	370c      	adds	r7, #12
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fce:	4770      	bx	lr
 8019fd0:	24000324 	.word	0x24000324

08019fd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b082      	sub	sp, #8
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	4603      	mov	r3, r0
 8019fdc:	6039      	str	r1, [r7, #0]
 8019fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019fe0:	79fb      	ldrb	r3, [r7, #7]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d105      	bne.n	8019ff2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019fe6:	683a      	ldr	r2, [r7, #0]
 8019fe8:	4907      	ldr	r1, [pc, #28]	@ (801a008 <USBD_FS_ProductStrDescriptor+0x34>)
 8019fea:	4808      	ldr	r0, [pc, #32]	@ (801a00c <USBD_FS_ProductStrDescriptor+0x38>)
 8019fec:	f7ff fdd0 	bl	8019b90 <USBD_GetString>
 8019ff0:	e004      	b.n	8019ffc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019ff2:	683a      	ldr	r2, [r7, #0]
 8019ff4:	4904      	ldr	r1, [pc, #16]	@ (801a008 <USBD_FS_ProductStrDescriptor+0x34>)
 8019ff6:	4805      	ldr	r0, [pc, #20]	@ (801a00c <USBD_FS_ProductStrDescriptor+0x38>)
 8019ff8:	f7ff fdca 	bl	8019b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019ffc:	4b02      	ldr	r3, [pc, #8]	@ (801a008 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	3708      	adds	r7, #8
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	24048584 	.word	0x24048584
 801a00c:	0801d5ac 	.word	0x0801d5ac

0801a010 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	4603      	mov	r3, r0
 801a018:	6039      	str	r1, [r7, #0]
 801a01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a01c:	683a      	ldr	r2, [r7, #0]
 801a01e:	4904      	ldr	r1, [pc, #16]	@ (801a030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a020:	4804      	ldr	r0, [pc, #16]	@ (801a034 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a022:	f7ff fdb5 	bl	8019b90 <USBD_GetString>
  return USBD_StrDesc;
 801a026:	4b02      	ldr	r3, [pc, #8]	@ (801a030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a028:	4618      	mov	r0, r3
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	24048584 	.word	0x24048584
 801a034:	0801d5c4 	.word	0x0801d5c4

0801a038 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	4603      	mov	r3, r0
 801a040:	6039      	str	r1, [r7, #0]
 801a042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	221a      	movs	r2, #26
 801a048:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a04a:	f000 f843 	bl	801a0d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a04e:	4b02      	ldr	r3, [pc, #8]	@ (801a058 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a050:	4618      	mov	r0, r3
 801a052:	3708      	adds	r7, #8
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}
 801a058:	24000328 	.word	0x24000328

0801a05c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b082      	sub	sp, #8
 801a060:	af00      	add	r7, sp, #0
 801a062:	4603      	mov	r3, r0
 801a064:	6039      	str	r1, [r7, #0]
 801a066:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a068:	79fb      	ldrb	r3, [r7, #7]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d105      	bne.n	801a07a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a06e:	683a      	ldr	r2, [r7, #0]
 801a070:	4907      	ldr	r1, [pc, #28]	@ (801a090 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a072:	4808      	ldr	r0, [pc, #32]	@ (801a094 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a074:	f7ff fd8c 	bl	8019b90 <USBD_GetString>
 801a078:	e004      	b.n	801a084 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a07a:	683a      	ldr	r2, [r7, #0]
 801a07c:	4904      	ldr	r1, [pc, #16]	@ (801a090 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a07e:	4805      	ldr	r0, [pc, #20]	@ (801a094 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a080:	f7ff fd86 	bl	8019b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a084:	4b02      	ldr	r3, [pc, #8]	@ (801a090 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a086:	4618      	mov	r0, r3
 801a088:	3708      	adds	r7, #8
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	24048584 	.word	0x24048584
 801a094:	0801d5d8 	.word	0x0801d5d8

0801a098 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	b082      	sub	sp, #8
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	4603      	mov	r3, r0
 801a0a0:	6039      	str	r1, [r7, #0]
 801a0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a0a4:	79fb      	ldrb	r3, [r7, #7]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d105      	bne.n	801a0b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0aa:	683a      	ldr	r2, [r7, #0]
 801a0ac:	4907      	ldr	r1, [pc, #28]	@ (801a0cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0ae:	4808      	ldr	r0, [pc, #32]	@ (801a0d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0b0:	f7ff fd6e 	bl	8019b90 <USBD_GetString>
 801a0b4:	e004      	b.n	801a0c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0b6:	683a      	ldr	r2, [r7, #0]
 801a0b8:	4904      	ldr	r1, [pc, #16]	@ (801a0cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0ba:	4805      	ldr	r0, [pc, #20]	@ (801a0d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0bc:	f7ff fd68 	bl	8019b90 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a0c0:	4b02      	ldr	r3, [pc, #8]	@ (801a0cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3708      	adds	r7, #8
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}
 801a0ca:	bf00      	nop
 801a0cc:	24048584 	.word	0x24048584
 801a0d0:	0801d5e4 	.word	0x0801d5e4

0801a0d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a0da:	4b0f      	ldr	r3, [pc, #60]	@ (801a118 <Get_SerialNum+0x44>)
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a0e0:	4b0e      	ldr	r3, [pc, #56]	@ (801a11c <Get_SerialNum+0x48>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a0e6:	4b0e      	ldr	r3, [pc, #56]	@ (801a120 <Get_SerialNum+0x4c>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a0ec:	68fa      	ldr	r2, [r7, #12]
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	4413      	add	r3, r2
 801a0f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d009      	beq.n	801a10e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a0fa:	2208      	movs	r2, #8
 801a0fc:	4909      	ldr	r1, [pc, #36]	@ (801a124 <Get_SerialNum+0x50>)
 801a0fe:	68f8      	ldr	r0, [r7, #12]
 801a100:	f000 f814 	bl	801a12c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a104:	2204      	movs	r2, #4
 801a106:	4908      	ldr	r1, [pc, #32]	@ (801a128 <Get_SerialNum+0x54>)
 801a108:	68b8      	ldr	r0, [r7, #8]
 801a10a:	f000 f80f 	bl	801a12c <IntToUnicode>
  }
}
 801a10e:	bf00      	nop
 801a110:	3710      	adds	r7, #16
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}
 801a116:	bf00      	nop
 801a118:	1ff1e800 	.word	0x1ff1e800
 801a11c:	1ff1e804 	.word	0x1ff1e804
 801a120:	1ff1e808 	.word	0x1ff1e808
 801a124:	2400032a 	.word	0x2400032a
 801a128:	2400033a 	.word	0x2400033a

0801a12c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a12c:	b480      	push	{r7}
 801a12e:	b087      	sub	sp, #28
 801a130:	af00      	add	r7, sp, #0
 801a132:	60f8      	str	r0, [r7, #12]
 801a134:	60b9      	str	r1, [r7, #8]
 801a136:	4613      	mov	r3, r2
 801a138:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a13a:	2300      	movs	r3, #0
 801a13c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a13e:	2300      	movs	r3, #0
 801a140:	75fb      	strb	r3, [r7, #23]
 801a142:	e027      	b.n	801a194 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	0f1b      	lsrs	r3, r3, #28
 801a148:	2b09      	cmp	r3, #9
 801a14a:	d80b      	bhi.n	801a164 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	0f1b      	lsrs	r3, r3, #28
 801a150:	b2da      	uxtb	r2, r3
 801a152:	7dfb      	ldrb	r3, [r7, #23]
 801a154:	005b      	lsls	r3, r3, #1
 801a156:	4619      	mov	r1, r3
 801a158:	68bb      	ldr	r3, [r7, #8]
 801a15a:	440b      	add	r3, r1
 801a15c:	3230      	adds	r2, #48	@ 0x30
 801a15e:	b2d2      	uxtb	r2, r2
 801a160:	701a      	strb	r2, [r3, #0]
 801a162:	e00a      	b.n	801a17a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	0f1b      	lsrs	r3, r3, #28
 801a168:	b2da      	uxtb	r2, r3
 801a16a:	7dfb      	ldrb	r3, [r7, #23]
 801a16c:	005b      	lsls	r3, r3, #1
 801a16e:	4619      	mov	r1, r3
 801a170:	68bb      	ldr	r3, [r7, #8]
 801a172:	440b      	add	r3, r1
 801a174:	3237      	adds	r2, #55	@ 0x37
 801a176:	b2d2      	uxtb	r2, r2
 801a178:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	011b      	lsls	r3, r3, #4
 801a17e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a180:	7dfb      	ldrb	r3, [r7, #23]
 801a182:	005b      	lsls	r3, r3, #1
 801a184:	3301      	adds	r3, #1
 801a186:	68ba      	ldr	r2, [r7, #8]
 801a188:	4413      	add	r3, r2
 801a18a:	2200      	movs	r2, #0
 801a18c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a18e:	7dfb      	ldrb	r3, [r7, #23]
 801a190:	3301      	adds	r3, #1
 801a192:	75fb      	strb	r3, [r7, #23]
 801a194:	7dfa      	ldrb	r2, [r7, #23]
 801a196:	79fb      	ldrb	r3, [r7, #7]
 801a198:	429a      	cmp	r2, r3
 801a19a:	d3d3      	bcc.n	801a144 <IntToUnicode+0x18>
  }
}
 801a19c:	bf00      	nop
 801a19e:	bf00      	nop
 801a1a0:	371c      	adds	r7, #28
 801a1a2:	46bd      	mov	sp, r7
 801a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a8:	4770      	bx	lr
	...

0801a1ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b0ba      	sub	sp, #232	@ 0xe8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a1b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	601a      	str	r2, [r3, #0]
 801a1bc:	605a      	str	r2, [r3, #4]
 801a1be:	609a      	str	r2, [r3, #8]
 801a1c0:	60da      	str	r2, [r3, #12]
 801a1c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a1c4:	f107 0310 	add.w	r3, r7, #16
 801a1c8:	22c0      	movs	r2, #192	@ 0xc0
 801a1ca:	2100      	movs	r1, #0
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f001 f938 	bl	801b442 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	4a2c      	ldr	r2, [pc, #176]	@ (801a288 <HAL_PCD_MspInit+0xdc>)
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	d151      	bne.n	801a280 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a1dc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 801a1e0:	f04f 0300 	mov.w	r3, #0
 801a1e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801a1e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801a1ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a1f0:	f107 0310 	add.w	r3, r7, #16
 801a1f4:	4618      	mov	r0, r3
 801a1f6:	f7f5 fb9d 	bl	800f934 <HAL_RCCEx_PeriphCLKConfig>
 801a1fa:	4603      	mov	r3, r0
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d001      	beq.n	801a204 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801a200:	f7e7 fcbe 	bl	8001b80 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a204:	f7f4 fba0 	bl	800e948 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a208:	4b20      	ldr	r3, [pc, #128]	@ (801a28c <HAL_PCD_MspInit+0xe0>)
 801a20a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a20e:	4a1f      	ldr	r2, [pc, #124]	@ (801a28c <HAL_PCD_MspInit+0xe0>)
 801a210:	f043 0301 	orr.w	r3, r3, #1
 801a214:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801a218:	4b1c      	ldr	r3, [pc, #112]	@ (801a28c <HAL_PCD_MspInit+0xe0>)
 801a21a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801a21e:	f003 0301 	and.w	r3, r3, #1
 801a222:	60fb      	str	r3, [r7, #12]
 801a224:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a226:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801a22a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a22e:	2302      	movs	r3, #2
 801a230:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a234:	2300      	movs	r3, #0
 801a236:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a23a:	2300      	movs	r3, #0
 801a23c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a240:	230a      	movs	r3, #10
 801a242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a246:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801a24a:	4619      	mov	r1, r3
 801a24c:	4810      	ldr	r0, [pc, #64]	@ (801a290 <HAL_PCD_MspInit+0xe4>)
 801a24e:	f7ed fc49 	bl	8007ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a252:	4b0e      	ldr	r3, [pc, #56]	@ (801a28c <HAL_PCD_MspInit+0xe0>)
 801a254:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a258:	4a0c      	ldr	r2, [pc, #48]	@ (801a28c <HAL_PCD_MspInit+0xe0>)
 801a25a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801a25e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801a262:	4b0a      	ldr	r3, [pc, #40]	@ (801a28c <HAL_PCD_MspInit+0xe0>)
 801a264:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801a268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801a26c:	60bb      	str	r3, [r7, #8]
 801a26e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a270:	2200      	movs	r2, #0
 801a272:	2100      	movs	r1, #0
 801a274:	2065      	movs	r0, #101	@ 0x65
 801a276:	f7ea fd32 	bl	8004cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a27a:	2065      	movs	r0, #101	@ 0x65
 801a27c:	f7ea fd49 	bl	8004d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a280:	bf00      	nop
 801a282:	37e8      	adds	r7, #232	@ 0xe8
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}
 801a288:	40080000 	.word	0x40080000
 801a28c:	58024400 	.word	0x58024400
 801a290:	58020000 	.word	0x58020000

0801a294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 801a2a2:	687b      	ldr	r3, [r7, #4]
 801a2a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801a2a8:	4619      	mov	r1, r3
 801a2aa:	4610      	mov	r0, r2
 801a2ac:	f7fe fae3 	bl	8018876 <USBD_LL_SetupStage>
}
 801a2b0:	bf00      	nop
 801a2b2:	3708      	adds	r7, #8
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}

0801a2b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b082      	sub	sp, #8
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	6078      	str	r0, [r7, #4]
 801a2c0:	460b      	mov	r3, r1
 801a2c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a2ca:	78fa      	ldrb	r2, [r7, #3]
 801a2cc:	6879      	ldr	r1, [r7, #4]
 801a2ce:	4613      	mov	r3, r2
 801a2d0:	00db      	lsls	r3, r3, #3
 801a2d2:	4413      	add	r3, r2
 801a2d4:	009b      	lsls	r3, r3, #2
 801a2d6:	440b      	add	r3, r1
 801a2d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801a2dc:	681a      	ldr	r2, [r3, #0]
 801a2de:	78fb      	ldrb	r3, [r7, #3]
 801a2e0:	4619      	mov	r1, r3
 801a2e2:	f7fe fb1d 	bl	8018920 <USBD_LL_DataOutStage>
}
 801a2e6:	bf00      	nop
 801a2e8:	3708      	adds	r7, #8
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bd80      	pop	{r7, pc}

0801a2ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2ee:	b580      	push	{r7, lr}
 801a2f0:	b082      	sub	sp, #8
 801a2f2:	af00      	add	r7, sp, #0
 801a2f4:	6078      	str	r0, [r7, #4]
 801a2f6:	460b      	mov	r3, r1
 801a2f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801a300:	78fa      	ldrb	r2, [r7, #3]
 801a302:	6879      	ldr	r1, [r7, #4]
 801a304:	4613      	mov	r3, r2
 801a306:	00db      	lsls	r3, r3, #3
 801a308:	4413      	add	r3, r2
 801a30a:	009b      	lsls	r3, r3, #2
 801a30c:	440b      	add	r3, r1
 801a30e:	3320      	adds	r3, #32
 801a310:	681a      	ldr	r2, [r3, #0]
 801a312:	78fb      	ldrb	r3, [r7, #3]
 801a314:	4619      	mov	r1, r3
 801a316:	f7fe fbb6 	bl	8018a86 <USBD_LL_DataInStage>
}
 801a31a:	bf00      	nop
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}

0801a322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a322:	b580      	push	{r7, lr}
 801a324:	b082      	sub	sp, #8
 801a326:	af00      	add	r7, sp, #0
 801a328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a330:	4618      	mov	r0, r3
 801a332:	f7fe fcf0 	bl	8018d16 <USBD_LL_SOF>
}
 801a336:	bf00      	nop
 801a338:	3708      	adds	r7, #8
 801a33a:	46bd      	mov	sp, r7
 801a33c:	bd80      	pop	{r7, pc}

0801a33e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a33e:	b580      	push	{r7, lr}
 801a340:	b084      	sub	sp, #16
 801a342:	af00      	add	r7, sp, #0
 801a344:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a346:	2301      	movs	r3, #1
 801a348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	79db      	ldrb	r3, [r3, #7]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d102      	bne.n	801a358 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a352:	2300      	movs	r3, #0
 801a354:	73fb      	strb	r3, [r7, #15]
 801a356:	e008      	b.n	801a36a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	79db      	ldrb	r3, [r3, #7]
 801a35c:	2b02      	cmp	r3, #2
 801a35e:	d102      	bne.n	801a366 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a360:	2301      	movs	r3, #1
 801a362:	73fb      	strb	r3, [r7, #15]
 801a364:	e001      	b.n	801a36a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a366:	f7e7 fc0b 	bl	8001b80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a370:	7bfa      	ldrb	r2, [r7, #15]
 801a372:	4611      	mov	r1, r2
 801a374:	4618      	mov	r0, r3
 801a376:	f7fe fc8a 	bl	8018c8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a380:	4618      	mov	r0, r3
 801a382:	f7fe fc32 	bl	8018bea <USBD_LL_Reset>
}
 801a386:	bf00      	nop
 801a388:	3710      	adds	r7, #16
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
	...

0801a390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a390:	b580      	push	{r7, lr}
 801a392:	b082      	sub	sp, #8
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a39e:	4618      	mov	r0, r3
 801a3a0:	f7fe fc85 	bl	8018cae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	687a      	ldr	r2, [r7, #4]
 801a3b0:	6812      	ldr	r2, [r2, #0]
 801a3b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801a3b6:	f043 0301 	orr.w	r3, r3, #1
 801a3ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	7adb      	ldrb	r3, [r3, #11]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d005      	beq.n	801a3d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a3c4:	4b04      	ldr	r3, [pc, #16]	@ (801a3d8 <HAL_PCD_SuspendCallback+0x48>)
 801a3c6:	691b      	ldr	r3, [r3, #16]
 801a3c8:	4a03      	ldr	r2, [pc, #12]	@ (801a3d8 <HAL_PCD_SuspendCallback+0x48>)
 801a3ca:	f043 0306 	orr.w	r3, r3, #6
 801a3ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a3d0:	bf00      	nop
 801a3d2:	3708      	adds	r7, #8
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	bd80      	pop	{r7, pc}
 801a3d8:	e000ed00 	.word	0xe000ed00

0801a3dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b082      	sub	sp, #8
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f7fe fc7b 	bl	8018ce6 <USBD_LL_Resume>
}
 801a3f0:	bf00      	nop
 801a3f2:	3708      	adds	r7, #8
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}

0801a3f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b082      	sub	sp, #8
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
 801a400:	460b      	mov	r3, r1
 801a402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a40a:	78fa      	ldrb	r2, [r7, #3]
 801a40c:	4611      	mov	r1, r2
 801a40e:	4618      	mov	r0, r3
 801a410:	f7fe fcd3 	bl	8018dba <USBD_LL_IsoOUTIncomplete>
}
 801a414:	bf00      	nop
 801a416:	3708      	adds	r7, #8
 801a418:	46bd      	mov	sp, r7
 801a41a:	bd80      	pop	{r7, pc}

0801a41c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a41c:	b580      	push	{r7, lr}
 801a41e:	b082      	sub	sp, #8
 801a420:	af00      	add	r7, sp, #0
 801a422:	6078      	str	r0, [r7, #4]
 801a424:	460b      	mov	r3, r1
 801a426:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a42e:	78fa      	ldrb	r2, [r7, #3]
 801a430:	4611      	mov	r1, r2
 801a432:	4618      	mov	r0, r3
 801a434:	f7fe fc8f 	bl	8018d56 <USBD_LL_IsoINIncomplete>
}
 801a438:	bf00      	nop
 801a43a:	3708      	adds	r7, #8
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd80      	pop	{r7, pc}

0801a440 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b082      	sub	sp, #8
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a44e:	4618      	mov	r0, r3
 801a450:	f7fe fce5 	bl	8018e1e <USBD_LL_DevConnected>
}
 801a454:	bf00      	nop
 801a456:	3708      	adds	r7, #8
 801a458:	46bd      	mov	sp, r7
 801a45a:	bd80      	pop	{r7, pc}

0801a45c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801a46a:	4618      	mov	r0, r3
 801a46c:	f7fe fce2 	bl	8018e34 <USBD_LL_DevDisconnected>
}
 801a470:	bf00      	nop
 801a472:	3708      	adds	r7, #8
 801a474:	46bd      	mov	sp, r7
 801a476:	bd80      	pop	{r7, pc}

0801a478 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b082      	sub	sp, #8
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	781b      	ldrb	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d13e      	bne.n	801a506 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a488:	4a21      	ldr	r2, [pc, #132]	@ (801a510 <USBD_LL_Init+0x98>)
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	4a1f      	ldr	r2, [pc, #124]	@ (801a510 <USBD_LL_Init+0x98>)
 801a494:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a498:	4b1d      	ldr	r3, [pc, #116]	@ (801a510 <USBD_LL_Init+0x98>)
 801a49a:	4a1e      	ldr	r2, [pc, #120]	@ (801a514 <USBD_LL_Init+0x9c>)
 801a49c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801a49e:	4b1c      	ldr	r3, [pc, #112]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4a0:	2209      	movs	r2, #9
 801a4a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a4a4:	4b1a      	ldr	r3, [pc, #104]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4a6:	2202      	movs	r2, #2
 801a4a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a4aa:	4b19      	ldr	r3, [pc, #100]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4ac:	2200      	movs	r2, #0
 801a4ae:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a4b0:	4b17      	ldr	r3, [pc, #92]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4b2:	2202      	movs	r2, #2
 801a4b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a4b6:	4b16      	ldr	r3, [pc, #88]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4b8:	2200      	movs	r2, #0
 801a4ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a4bc:	4b14      	ldr	r3, [pc, #80]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4be:	2200      	movs	r2, #0
 801a4c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a4c2:	4b13      	ldr	r3, [pc, #76]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801a4c8:	4b11      	ldr	r3, [pc, #68]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a4ce:	4b10      	ldr	r3, [pc, #64]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a4d4:	4b0e      	ldr	r3, [pc, #56]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4d6:	2200      	movs	r2, #0
 801a4d8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a4da:	480d      	ldr	r0, [pc, #52]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4dc:	f7f2 ff5a 	bl	800d394 <HAL_PCD_Init>
 801a4e0:	4603      	mov	r3, r0
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	d001      	beq.n	801a4ea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801a4e6:	f7e7 fb4b 	bl	8001b80 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a4ea:	2180      	movs	r1, #128	@ 0x80
 801a4ec:	4808      	ldr	r0, [pc, #32]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4ee:	f7f4 f9b0 	bl	800e852 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a4f2:	2240      	movs	r2, #64	@ 0x40
 801a4f4:	2100      	movs	r1, #0
 801a4f6:	4806      	ldr	r0, [pc, #24]	@ (801a510 <USBD_LL_Init+0x98>)
 801a4f8:	f7f4 f964 	bl	800e7c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a4fc:	2280      	movs	r2, #128	@ 0x80
 801a4fe:	2101      	movs	r1, #1
 801a500:	4803      	ldr	r0, [pc, #12]	@ (801a510 <USBD_LL_Init+0x98>)
 801a502:	f7f4 f95f 	bl	800e7c4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801a506:	2300      	movs	r3, #0
}
 801a508:	4618      	mov	r0, r3
 801a50a:	3708      	adds	r7, #8
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd80      	pop	{r7, pc}
 801a510:	24048784 	.word	0x24048784
 801a514:	40080000 	.word	0x40080000

0801a518 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a518:	b580      	push	{r7, lr}
 801a51a:	b084      	sub	sp, #16
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a520:	2300      	movs	r3, #0
 801a522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a524:	2300      	movs	r3, #0
 801a526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a52e:	4618      	mov	r0, r3
 801a530:	f7f3 f83c 	bl	800d5ac <HAL_PCD_Start>
 801a534:	4603      	mov	r3, r0
 801a536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a538:	7bfb      	ldrb	r3, [r7, #15]
 801a53a:	4618      	mov	r0, r3
 801a53c:	f000 f942 	bl	801a7c4 <USBD_Get_USB_Status>
 801a540:	4603      	mov	r3, r0
 801a542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a544:	7bbb      	ldrb	r3, [r7, #14]
}
 801a546:	4618      	mov	r0, r3
 801a548:	3710      	adds	r7, #16
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}

0801a54e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a54e:	b580      	push	{r7, lr}
 801a550:	b084      	sub	sp, #16
 801a552:	af00      	add	r7, sp, #0
 801a554:	6078      	str	r0, [r7, #4]
 801a556:	4608      	mov	r0, r1
 801a558:	4611      	mov	r1, r2
 801a55a:	461a      	mov	r2, r3
 801a55c:	4603      	mov	r3, r0
 801a55e:	70fb      	strb	r3, [r7, #3]
 801a560:	460b      	mov	r3, r1
 801a562:	70bb      	strb	r3, [r7, #2]
 801a564:	4613      	mov	r3, r2
 801a566:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a568:	2300      	movs	r3, #0
 801a56a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a56c:	2300      	movs	r3, #0
 801a56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a576:	78bb      	ldrb	r3, [r7, #2]
 801a578:	883a      	ldrh	r2, [r7, #0]
 801a57a:	78f9      	ldrb	r1, [r7, #3]
 801a57c:	f7f3 fd3d 	bl	800dffa <HAL_PCD_EP_Open>
 801a580:	4603      	mov	r3, r0
 801a582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a584:	7bfb      	ldrb	r3, [r7, #15]
 801a586:	4618      	mov	r0, r3
 801a588:	f000 f91c 	bl	801a7c4 <USBD_Get_USB_Status>
 801a58c:	4603      	mov	r3, r0
 801a58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a590:	7bbb      	ldrb	r3, [r7, #14]
}
 801a592:	4618      	mov	r0, r3
 801a594:	3710      	adds	r7, #16
 801a596:	46bd      	mov	sp, r7
 801a598:	bd80      	pop	{r7, pc}

0801a59a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a59a:	b580      	push	{r7, lr}
 801a59c:	b084      	sub	sp, #16
 801a59e:	af00      	add	r7, sp, #0
 801a5a0:	6078      	str	r0, [r7, #4]
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5b4:	78fa      	ldrb	r2, [r7, #3]
 801a5b6:	4611      	mov	r1, r2
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f7f3 fd88 	bl	800e0ce <HAL_PCD_EP_Close>
 801a5be:	4603      	mov	r3, r0
 801a5c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5c2:	7bfb      	ldrb	r3, [r7, #15]
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f000 f8fd 	bl	801a7c4 <USBD_Get_USB_Status>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a5ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5d0:	4618      	mov	r0, r3
 801a5d2:	3710      	adds	r7, #16
 801a5d4:	46bd      	mov	sp, r7
 801a5d6:	bd80      	pop	{r7, pc}

0801a5d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
 801a5e0:	460b      	mov	r3, r1
 801a5e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5e4:	2300      	movs	r3, #0
 801a5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a5f2:	78fa      	ldrb	r2, [r7, #3]
 801a5f4:	4611      	mov	r1, r2
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	f7f3 fe40 	bl	800e27c <HAL_PCD_EP_SetStall>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a600:	7bfb      	ldrb	r3, [r7, #15]
 801a602:	4618      	mov	r0, r3
 801a604:	f000 f8de 	bl	801a7c4 <USBD_Get_USB_Status>
 801a608:	4603      	mov	r3, r0
 801a60a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a60c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a60e:	4618      	mov	r0, r3
 801a610:	3710      	adds	r7, #16
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}

0801a616 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a616:	b580      	push	{r7, lr}
 801a618:	b084      	sub	sp, #16
 801a61a:	af00      	add	r7, sp, #0
 801a61c:	6078      	str	r0, [r7, #4]
 801a61e:	460b      	mov	r3, r1
 801a620:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a622:	2300      	movs	r3, #0
 801a624:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a626:	2300      	movs	r3, #0
 801a628:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a62a:	687b      	ldr	r3, [r7, #4]
 801a62c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a630:	78fa      	ldrb	r2, [r7, #3]
 801a632:	4611      	mov	r1, r2
 801a634:	4618      	mov	r0, r3
 801a636:	f7f3 fe84 	bl	800e342 <HAL_PCD_EP_ClrStall>
 801a63a:	4603      	mov	r3, r0
 801a63c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a63e:	7bfb      	ldrb	r3, [r7, #15]
 801a640:	4618      	mov	r0, r3
 801a642:	f000 f8bf 	bl	801a7c4 <USBD_Get_USB_Status>
 801a646:	4603      	mov	r3, r0
 801a648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a64a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a64c:	4618      	mov	r0, r3
 801a64e:	3710      	adds	r7, #16
 801a650:	46bd      	mov	sp, r7
 801a652:	bd80      	pop	{r7, pc}

0801a654 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a654:	b480      	push	{r7}
 801a656:	b085      	sub	sp, #20
 801a658:	af00      	add	r7, sp, #0
 801a65a:	6078      	str	r0, [r7, #4]
 801a65c:	460b      	mov	r3, r1
 801a65e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a666:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801a668:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	da0b      	bge.n	801a688 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801a670:	78fb      	ldrb	r3, [r7, #3]
 801a672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a676:	68f9      	ldr	r1, [r7, #12]
 801a678:	4613      	mov	r3, r2
 801a67a:	00db      	lsls	r3, r3, #3
 801a67c:	4413      	add	r3, r2
 801a67e:	009b      	lsls	r3, r3, #2
 801a680:	440b      	add	r3, r1
 801a682:	3316      	adds	r3, #22
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	e00b      	b.n	801a6a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801a688:	78fb      	ldrb	r3, [r7, #3]
 801a68a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a68e:	68f9      	ldr	r1, [r7, #12]
 801a690:	4613      	mov	r3, r2
 801a692:	00db      	lsls	r3, r3, #3
 801a694:	4413      	add	r3, r2
 801a696:	009b      	lsls	r3, r3, #2
 801a698:	440b      	add	r3, r1
 801a69a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801a69e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3714      	adds	r7, #20
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6aa:	4770      	bx	lr

0801a6ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	b084      	sub	sp, #16
 801a6b0:	af00      	add	r7, sp, #0
 801a6b2:	6078      	str	r0, [r7, #4]
 801a6b4:	460b      	mov	r3, r1
 801a6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6bc:	2300      	movs	r3, #0
 801a6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a6c6:	78fa      	ldrb	r2, [r7, #3]
 801a6c8:	4611      	mov	r1, r2
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f7f3 fc71 	bl	800dfb2 <HAL_PCD_SetAddress>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6d4:	7bfb      	ldrb	r3, [r7, #15]
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	f000 f874 	bl	801a7c4 <USBD_Get_USB_Status>
 801a6dc:	4603      	mov	r3, r0
 801a6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	3710      	adds	r7, #16
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd80      	pop	{r7, pc}

0801a6ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a6ea:	b580      	push	{r7, lr}
 801a6ec:	b086      	sub	sp, #24
 801a6ee:	af00      	add	r7, sp, #0
 801a6f0:	60f8      	str	r0, [r7, #12]
 801a6f2:	607a      	str	r2, [r7, #4]
 801a6f4:	603b      	str	r3, [r7, #0]
 801a6f6:	460b      	mov	r3, r1
 801a6f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6fa:	2300      	movs	r3, #0
 801a6fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6fe:	2300      	movs	r3, #0
 801a700:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a708:	7af9      	ldrb	r1, [r7, #11]
 801a70a:	683b      	ldr	r3, [r7, #0]
 801a70c:	687a      	ldr	r2, [r7, #4]
 801a70e:	f7f3 fd7b 	bl	800e208 <HAL_PCD_EP_Transmit>
 801a712:	4603      	mov	r3, r0
 801a714:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a716:	7dfb      	ldrb	r3, [r7, #23]
 801a718:	4618      	mov	r0, r3
 801a71a:	f000 f853 	bl	801a7c4 <USBD_Get_USB_Status>
 801a71e:	4603      	mov	r3, r0
 801a720:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a722:	7dbb      	ldrb	r3, [r7, #22]
}
 801a724:	4618      	mov	r0, r3
 801a726:	3718      	adds	r7, #24
 801a728:	46bd      	mov	sp, r7
 801a72a:	bd80      	pop	{r7, pc}

0801a72c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a72c:	b580      	push	{r7, lr}
 801a72e:	b086      	sub	sp, #24
 801a730:	af00      	add	r7, sp, #0
 801a732:	60f8      	str	r0, [r7, #12]
 801a734:	607a      	str	r2, [r7, #4]
 801a736:	603b      	str	r3, [r7, #0]
 801a738:	460b      	mov	r3, r1
 801a73a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a73c:	2300      	movs	r3, #0
 801a73e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a740:	2300      	movs	r3, #0
 801a742:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801a74a:	7af9      	ldrb	r1, [r7, #11]
 801a74c:	683b      	ldr	r3, [r7, #0]
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	f7f3 fd07 	bl	800e162 <HAL_PCD_EP_Receive>
 801a754:	4603      	mov	r3, r0
 801a756:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a758:	7dfb      	ldrb	r3, [r7, #23]
 801a75a:	4618      	mov	r0, r3
 801a75c:	f000 f832 	bl	801a7c4 <USBD_Get_USB_Status>
 801a760:	4603      	mov	r3, r0
 801a762:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801a764:	7dbb      	ldrb	r3, [r7, #22]
}
 801a766:	4618      	mov	r0, r3
 801a768:	3718      	adds	r7, #24
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}

0801a76e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a76e:	b580      	push	{r7, lr}
 801a770:	b082      	sub	sp, #8
 801a772:	af00      	add	r7, sp, #0
 801a774:	6078      	str	r0, [r7, #4]
 801a776:	460b      	mov	r3, r1
 801a778:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801a780:	78fa      	ldrb	r2, [r7, #3]
 801a782:	4611      	mov	r1, r2
 801a784:	4618      	mov	r0, r3
 801a786:	f7f3 fd27 	bl	800e1d8 <HAL_PCD_EP_GetRxCount>
 801a78a:	4603      	mov	r3, r0
}
 801a78c:	4618      	mov	r0, r3
 801a78e:	3708      	adds	r7, #8
 801a790:	46bd      	mov	sp, r7
 801a792:	bd80      	pop	{r7, pc}

0801a794 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801a794:	b480      	push	{r7}
 801a796:	b083      	sub	sp, #12
 801a798:	af00      	add	r7, sp, #0
 801a79a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801a79c:	4b03      	ldr	r3, [pc, #12]	@ (801a7ac <USBD_static_malloc+0x18>)
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	370c      	adds	r7, #12
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a8:	4770      	bx	lr
 801a7aa:	bf00      	nop
 801a7ac:	24048c68 	.word	0x24048c68

0801a7b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801a7b0:	b480      	push	{r7}
 801a7b2:	b083      	sub	sp, #12
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801a7b8:	bf00      	nop
 801a7ba:	370c      	adds	r7, #12
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7c2:	4770      	bx	lr

0801a7c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a7c4:	b480      	push	{r7}
 801a7c6:	b085      	sub	sp, #20
 801a7c8:	af00      	add	r7, sp, #0
 801a7ca:	4603      	mov	r3, r0
 801a7cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a7ce:	2300      	movs	r3, #0
 801a7d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a7d2:	79fb      	ldrb	r3, [r7, #7]
 801a7d4:	2b03      	cmp	r3, #3
 801a7d6:	d817      	bhi.n	801a808 <USBD_Get_USB_Status+0x44>
 801a7d8:	a201      	add	r2, pc, #4	@ (adr r2, 801a7e0 <USBD_Get_USB_Status+0x1c>)
 801a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7de:	bf00      	nop
 801a7e0:	0801a7f1 	.word	0x0801a7f1
 801a7e4:	0801a7f7 	.word	0x0801a7f7
 801a7e8:	0801a7fd 	.word	0x0801a7fd
 801a7ec:	0801a803 	.word	0x0801a803
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	73fb      	strb	r3, [r7, #15]
    break;
 801a7f4:	e00b      	b.n	801a80e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a7f6:	2303      	movs	r3, #3
 801a7f8:	73fb      	strb	r3, [r7, #15]
    break;
 801a7fa:	e008      	b.n	801a80e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a7fc:	2301      	movs	r3, #1
 801a7fe:	73fb      	strb	r3, [r7, #15]
    break;
 801a800:	e005      	b.n	801a80e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a802:	2303      	movs	r3, #3
 801a804:	73fb      	strb	r3, [r7, #15]
    break;
 801a806:	e002      	b.n	801a80e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a808:	2303      	movs	r3, #3
 801a80a:	73fb      	strb	r3, [r7, #15]
    break;
 801a80c:	bf00      	nop
  }
  return usb_status;
 801a80e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a810:	4618      	mov	r0, r3
 801a812:	3714      	adds	r7, #20
 801a814:	46bd      	mov	sp, r7
 801a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a81a:	4770      	bx	lr

0801a81c <malloc>:
 801a81c:	4b02      	ldr	r3, [pc, #8]	@ (801a828 <malloc+0xc>)
 801a81e:	4601      	mov	r1, r0
 801a820:	6818      	ldr	r0, [r3, #0]
 801a822:	f000 b825 	b.w	801a870 <_malloc_r>
 801a826:	bf00      	nop
 801a828:	24000350 	.word	0x24000350

0801a82c <sbrk_aligned>:
 801a82c:	b570      	push	{r4, r5, r6, lr}
 801a82e:	4e0f      	ldr	r6, [pc, #60]	@ (801a86c <sbrk_aligned+0x40>)
 801a830:	460c      	mov	r4, r1
 801a832:	6831      	ldr	r1, [r6, #0]
 801a834:	4605      	mov	r5, r0
 801a836:	b911      	cbnz	r1, 801a83e <sbrk_aligned+0x12>
 801a838:	f000 fe44 	bl	801b4c4 <_sbrk_r>
 801a83c:	6030      	str	r0, [r6, #0]
 801a83e:	4621      	mov	r1, r4
 801a840:	4628      	mov	r0, r5
 801a842:	f000 fe3f 	bl	801b4c4 <_sbrk_r>
 801a846:	1c43      	adds	r3, r0, #1
 801a848:	d103      	bne.n	801a852 <sbrk_aligned+0x26>
 801a84a:	f04f 34ff 	mov.w	r4, #4294967295
 801a84e:	4620      	mov	r0, r4
 801a850:	bd70      	pop	{r4, r5, r6, pc}
 801a852:	1cc4      	adds	r4, r0, #3
 801a854:	f024 0403 	bic.w	r4, r4, #3
 801a858:	42a0      	cmp	r0, r4
 801a85a:	d0f8      	beq.n	801a84e <sbrk_aligned+0x22>
 801a85c:	1a21      	subs	r1, r4, r0
 801a85e:	4628      	mov	r0, r5
 801a860:	f000 fe30 	bl	801b4c4 <_sbrk_r>
 801a864:	3001      	adds	r0, #1
 801a866:	d1f2      	bne.n	801a84e <sbrk_aligned+0x22>
 801a868:	e7ef      	b.n	801a84a <sbrk_aligned+0x1e>
 801a86a:	bf00      	nop
 801a86c:	24048e88 	.word	0x24048e88

0801a870 <_malloc_r>:
 801a870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a874:	1ccd      	adds	r5, r1, #3
 801a876:	f025 0503 	bic.w	r5, r5, #3
 801a87a:	3508      	adds	r5, #8
 801a87c:	2d0c      	cmp	r5, #12
 801a87e:	bf38      	it	cc
 801a880:	250c      	movcc	r5, #12
 801a882:	2d00      	cmp	r5, #0
 801a884:	4606      	mov	r6, r0
 801a886:	db01      	blt.n	801a88c <_malloc_r+0x1c>
 801a888:	42a9      	cmp	r1, r5
 801a88a:	d904      	bls.n	801a896 <_malloc_r+0x26>
 801a88c:	230c      	movs	r3, #12
 801a88e:	6033      	str	r3, [r6, #0]
 801a890:	2000      	movs	r0, #0
 801a892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a96c <_malloc_r+0xfc>
 801a89a:	f000 f869 	bl	801a970 <__malloc_lock>
 801a89e:	f8d8 3000 	ldr.w	r3, [r8]
 801a8a2:	461c      	mov	r4, r3
 801a8a4:	bb44      	cbnz	r4, 801a8f8 <_malloc_r+0x88>
 801a8a6:	4629      	mov	r1, r5
 801a8a8:	4630      	mov	r0, r6
 801a8aa:	f7ff ffbf 	bl	801a82c <sbrk_aligned>
 801a8ae:	1c43      	adds	r3, r0, #1
 801a8b0:	4604      	mov	r4, r0
 801a8b2:	d158      	bne.n	801a966 <_malloc_r+0xf6>
 801a8b4:	f8d8 4000 	ldr.w	r4, [r8]
 801a8b8:	4627      	mov	r7, r4
 801a8ba:	2f00      	cmp	r7, #0
 801a8bc:	d143      	bne.n	801a946 <_malloc_r+0xd6>
 801a8be:	2c00      	cmp	r4, #0
 801a8c0:	d04b      	beq.n	801a95a <_malloc_r+0xea>
 801a8c2:	6823      	ldr	r3, [r4, #0]
 801a8c4:	4639      	mov	r1, r7
 801a8c6:	4630      	mov	r0, r6
 801a8c8:	eb04 0903 	add.w	r9, r4, r3
 801a8cc:	f000 fdfa 	bl	801b4c4 <_sbrk_r>
 801a8d0:	4581      	cmp	r9, r0
 801a8d2:	d142      	bne.n	801a95a <_malloc_r+0xea>
 801a8d4:	6821      	ldr	r1, [r4, #0]
 801a8d6:	1a6d      	subs	r5, r5, r1
 801a8d8:	4629      	mov	r1, r5
 801a8da:	4630      	mov	r0, r6
 801a8dc:	f7ff ffa6 	bl	801a82c <sbrk_aligned>
 801a8e0:	3001      	adds	r0, #1
 801a8e2:	d03a      	beq.n	801a95a <_malloc_r+0xea>
 801a8e4:	6823      	ldr	r3, [r4, #0]
 801a8e6:	442b      	add	r3, r5
 801a8e8:	6023      	str	r3, [r4, #0]
 801a8ea:	f8d8 3000 	ldr.w	r3, [r8]
 801a8ee:	685a      	ldr	r2, [r3, #4]
 801a8f0:	bb62      	cbnz	r2, 801a94c <_malloc_r+0xdc>
 801a8f2:	f8c8 7000 	str.w	r7, [r8]
 801a8f6:	e00f      	b.n	801a918 <_malloc_r+0xa8>
 801a8f8:	6822      	ldr	r2, [r4, #0]
 801a8fa:	1b52      	subs	r2, r2, r5
 801a8fc:	d420      	bmi.n	801a940 <_malloc_r+0xd0>
 801a8fe:	2a0b      	cmp	r2, #11
 801a900:	d917      	bls.n	801a932 <_malloc_r+0xc2>
 801a902:	1961      	adds	r1, r4, r5
 801a904:	42a3      	cmp	r3, r4
 801a906:	6025      	str	r5, [r4, #0]
 801a908:	bf18      	it	ne
 801a90a:	6059      	strne	r1, [r3, #4]
 801a90c:	6863      	ldr	r3, [r4, #4]
 801a90e:	bf08      	it	eq
 801a910:	f8c8 1000 	streq.w	r1, [r8]
 801a914:	5162      	str	r2, [r4, r5]
 801a916:	604b      	str	r3, [r1, #4]
 801a918:	4630      	mov	r0, r6
 801a91a:	f000 f82f 	bl	801a97c <__malloc_unlock>
 801a91e:	f104 000b 	add.w	r0, r4, #11
 801a922:	1d23      	adds	r3, r4, #4
 801a924:	f020 0007 	bic.w	r0, r0, #7
 801a928:	1ac2      	subs	r2, r0, r3
 801a92a:	bf1c      	itt	ne
 801a92c:	1a1b      	subne	r3, r3, r0
 801a92e:	50a3      	strne	r3, [r4, r2]
 801a930:	e7af      	b.n	801a892 <_malloc_r+0x22>
 801a932:	6862      	ldr	r2, [r4, #4]
 801a934:	42a3      	cmp	r3, r4
 801a936:	bf0c      	ite	eq
 801a938:	f8c8 2000 	streq.w	r2, [r8]
 801a93c:	605a      	strne	r2, [r3, #4]
 801a93e:	e7eb      	b.n	801a918 <_malloc_r+0xa8>
 801a940:	4623      	mov	r3, r4
 801a942:	6864      	ldr	r4, [r4, #4]
 801a944:	e7ae      	b.n	801a8a4 <_malloc_r+0x34>
 801a946:	463c      	mov	r4, r7
 801a948:	687f      	ldr	r7, [r7, #4]
 801a94a:	e7b6      	b.n	801a8ba <_malloc_r+0x4a>
 801a94c:	461a      	mov	r2, r3
 801a94e:	685b      	ldr	r3, [r3, #4]
 801a950:	42a3      	cmp	r3, r4
 801a952:	d1fb      	bne.n	801a94c <_malloc_r+0xdc>
 801a954:	2300      	movs	r3, #0
 801a956:	6053      	str	r3, [r2, #4]
 801a958:	e7de      	b.n	801a918 <_malloc_r+0xa8>
 801a95a:	230c      	movs	r3, #12
 801a95c:	6033      	str	r3, [r6, #0]
 801a95e:	4630      	mov	r0, r6
 801a960:	f000 f80c 	bl	801a97c <__malloc_unlock>
 801a964:	e794      	b.n	801a890 <_malloc_r+0x20>
 801a966:	6005      	str	r5, [r0, #0]
 801a968:	e7d6      	b.n	801a918 <_malloc_r+0xa8>
 801a96a:	bf00      	nop
 801a96c:	24048e8c 	.word	0x24048e8c

0801a970 <__malloc_lock>:
 801a970:	4801      	ldr	r0, [pc, #4]	@ (801a978 <__malloc_lock+0x8>)
 801a972:	f000 bdf4 	b.w	801b55e <__retarget_lock_acquire_recursive>
 801a976:	bf00      	nop
 801a978:	24048fd0 	.word	0x24048fd0

0801a97c <__malloc_unlock>:
 801a97c:	4801      	ldr	r0, [pc, #4]	@ (801a984 <__malloc_unlock+0x8>)
 801a97e:	f000 bdef 	b.w	801b560 <__retarget_lock_release_recursive>
 801a982:	bf00      	nop
 801a984:	24048fd0 	.word	0x24048fd0

0801a988 <__cvt>:
 801a988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a98a:	ed2d 8b02 	vpush	{d8}
 801a98e:	eeb0 8b40 	vmov.f64	d8, d0
 801a992:	b085      	sub	sp, #20
 801a994:	4617      	mov	r7, r2
 801a996:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801a998:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a99a:	ee18 2a90 	vmov	r2, s17
 801a99e:	f025 0520 	bic.w	r5, r5, #32
 801a9a2:	2a00      	cmp	r2, #0
 801a9a4:	bfb6      	itet	lt
 801a9a6:	222d      	movlt	r2, #45	@ 0x2d
 801a9a8:	2200      	movge	r2, #0
 801a9aa:	eeb1 8b40 	vneglt.f64	d8, d0
 801a9ae:	2d46      	cmp	r5, #70	@ 0x46
 801a9b0:	460c      	mov	r4, r1
 801a9b2:	701a      	strb	r2, [r3, #0]
 801a9b4:	d004      	beq.n	801a9c0 <__cvt+0x38>
 801a9b6:	2d45      	cmp	r5, #69	@ 0x45
 801a9b8:	d100      	bne.n	801a9bc <__cvt+0x34>
 801a9ba:	3401      	adds	r4, #1
 801a9bc:	2102      	movs	r1, #2
 801a9be:	e000      	b.n	801a9c2 <__cvt+0x3a>
 801a9c0:	2103      	movs	r1, #3
 801a9c2:	ab03      	add	r3, sp, #12
 801a9c4:	9301      	str	r3, [sp, #4]
 801a9c6:	ab02      	add	r3, sp, #8
 801a9c8:	9300      	str	r3, [sp, #0]
 801a9ca:	4622      	mov	r2, r4
 801a9cc:	4633      	mov	r3, r6
 801a9ce:	eeb0 0b48 	vmov.f64	d0, d8
 801a9d2:	f000 fe65 	bl	801b6a0 <_dtoa_r>
 801a9d6:	2d47      	cmp	r5, #71	@ 0x47
 801a9d8:	d114      	bne.n	801aa04 <__cvt+0x7c>
 801a9da:	07fb      	lsls	r3, r7, #31
 801a9dc:	d50a      	bpl.n	801a9f4 <__cvt+0x6c>
 801a9de:	1902      	adds	r2, r0, r4
 801a9e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e8:	bf08      	it	eq
 801a9ea:	9203      	streq	r2, [sp, #12]
 801a9ec:	2130      	movs	r1, #48	@ 0x30
 801a9ee:	9b03      	ldr	r3, [sp, #12]
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	d319      	bcc.n	801aa28 <__cvt+0xa0>
 801a9f4:	9b03      	ldr	r3, [sp, #12]
 801a9f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a9f8:	1a1b      	subs	r3, r3, r0
 801a9fa:	6013      	str	r3, [r2, #0]
 801a9fc:	b005      	add	sp, #20
 801a9fe:	ecbd 8b02 	vpop	{d8}
 801aa02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa04:	2d46      	cmp	r5, #70	@ 0x46
 801aa06:	eb00 0204 	add.w	r2, r0, r4
 801aa0a:	d1e9      	bne.n	801a9e0 <__cvt+0x58>
 801aa0c:	7803      	ldrb	r3, [r0, #0]
 801aa0e:	2b30      	cmp	r3, #48	@ 0x30
 801aa10:	d107      	bne.n	801aa22 <__cvt+0x9a>
 801aa12:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa1a:	bf1c      	itt	ne
 801aa1c:	f1c4 0401 	rsbne	r4, r4, #1
 801aa20:	6034      	strne	r4, [r6, #0]
 801aa22:	6833      	ldr	r3, [r6, #0]
 801aa24:	441a      	add	r2, r3
 801aa26:	e7db      	b.n	801a9e0 <__cvt+0x58>
 801aa28:	1c5c      	adds	r4, r3, #1
 801aa2a:	9403      	str	r4, [sp, #12]
 801aa2c:	7019      	strb	r1, [r3, #0]
 801aa2e:	e7de      	b.n	801a9ee <__cvt+0x66>

0801aa30 <__exponent>:
 801aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aa32:	2900      	cmp	r1, #0
 801aa34:	bfba      	itte	lt
 801aa36:	4249      	neglt	r1, r1
 801aa38:	232d      	movlt	r3, #45	@ 0x2d
 801aa3a:	232b      	movge	r3, #43	@ 0x2b
 801aa3c:	2909      	cmp	r1, #9
 801aa3e:	7002      	strb	r2, [r0, #0]
 801aa40:	7043      	strb	r3, [r0, #1]
 801aa42:	dd29      	ble.n	801aa98 <__exponent+0x68>
 801aa44:	f10d 0307 	add.w	r3, sp, #7
 801aa48:	461d      	mov	r5, r3
 801aa4a:	270a      	movs	r7, #10
 801aa4c:	461a      	mov	r2, r3
 801aa4e:	fbb1 f6f7 	udiv	r6, r1, r7
 801aa52:	fb07 1416 	mls	r4, r7, r6, r1
 801aa56:	3430      	adds	r4, #48	@ 0x30
 801aa58:	f802 4c01 	strb.w	r4, [r2, #-1]
 801aa5c:	460c      	mov	r4, r1
 801aa5e:	2c63      	cmp	r4, #99	@ 0x63
 801aa60:	f103 33ff 	add.w	r3, r3, #4294967295
 801aa64:	4631      	mov	r1, r6
 801aa66:	dcf1      	bgt.n	801aa4c <__exponent+0x1c>
 801aa68:	3130      	adds	r1, #48	@ 0x30
 801aa6a:	1e94      	subs	r4, r2, #2
 801aa6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 801aa70:	1c41      	adds	r1, r0, #1
 801aa72:	4623      	mov	r3, r4
 801aa74:	42ab      	cmp	r3, r5
 801aa76:	d30a      	bcc.n	801aa8e <__exponent+0x5e>
 801aa78:	f10d 0309 	add.w	r3, sp, #9
 801aa7c:	1a9b      	subs	r3, r3, r2
 801aa7e:	42ac      	cmp	r4, r5
 801aa80:	bf88      	it	hi
 801aa82:	2300      	movhi	r3, #0
 801aa84:	3302      	adds	r3, #2
 801aa86:	4403      	add	r3, r0
 801aa88:	1a18      	subs	r0, r3, r0
 801aa8a:	b003      	add	sp, #12
 801aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 801aa92:	f801 6f01 	strb.w	r6, [r1, #1]!
 801aa96:	e7ed      	b.n	801aa74 <__exponent+0x44>
 801aa98:	2330      	movs	r3, #48	@ 0x30
 801aa9a:	3130      	adds	r1, #48	@ 0x30
 801aa9c:	7083      	strb	r3, [r0, #2]
 801aa9e:	70c1      	strb	r1, [r0, #3]
 801aaa0:	1d03      	adds	r3, r0, #4
 801aaa2:	e7f1      	b.n	801aa88 <__exponent+0x58>
 801aaa4:	0000      	movs	r0, r0
	...

0801aaa8 <_printf_float>:
 801aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aaac:	b08d      	sub	sp, #52	@ 0x34
 801aaae:	460c      	mov	r4, r1
 801aab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801aab4:	4616      	mov	r6, r2
 801aab6:	461f      	mov	r7, r3
 801aab8:	4605      	mov	r5, r0
 801aaba:	f000 fccb 	bl	801b454 <_localeconv_r>
 801aabe:	f8d0 b000 	ldr.w	fp, [r0]
 801aac2:	4658      	mov	r0, fp
 801aac4:	f7e5 fc5c 	bl	8000380 <strlen>
 801aac8:	2300      	movs	r3, #0
 801aaca:	930a      	str	r3, [sp, #40]	@ 0x28
 801aacc:	f8d8 3000 	ldr.w	r3, [r8]
 801aad0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801aad4:	6822      	ldr	r2, [r4, #0]
 801aad6:	9005      	str	r0, [sp, #20]
 801aad8:	3307      	adds	r3, #7
 801aada:	f023 0307 	bic.w	r3, r3, #7
 801aade:	f103 0108 	add.w	r1, r3, #8
 801aae2:	f8c8 1000 	str.w	r1, [r8]
 801aae6:	ed93 0b00 	vldr	d0, [r3]
 801aaea:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801ad48 <_printf_float+0x2a0>
 801aaee:	eeb0 7bc0 	vabs.f64	d7, d0
 801aaf2:	eeb4 7b46 	vcmp.f64	d7, d6
 801aaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aafa:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801aafe:	dd24      	ble.n	801ab4a <_printf_float+0xa2>
 801ab00:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ab04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab08:	d502      	bpl.n	801ab10 <_printf_float+0x68>
 801ab0a:	232d      	movs	r3, #45	@ 0x2d
 801ab0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ab10:	498f      	ldr	r1, [pc, #572]	@ (801ad50 <_printf_float+0x2a8>)
 801ab12:	4b90      	ldr	r3, [pc, #576]	@ (801ad54 <_printf_float+0x2ac>)
 801ab14:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 801ab18:	bf8c      	ite	hi
 801ab1a:	4688      	movhi	r8, r1
 801ab1c:	4698      	movls	r8, r3
 801ab1e:	f022 0204 	bic.w	r2, r2, #4
 801ab22:	2303      	movs	r3, #3
 801ab24:	6123      	str	r3, [r4, #16]
 801ab26:	6022      	str	r2, [r4, #0]
 801ab28:	f04f 0a00 	mov.w	sl, #0
 801ab2c:	9700      	str	r7, [sp, #0]
 801ab2e:	4633      	mov	r3, r6
 801ab30:	aa0b      	add	r2, sp, #44	@ 0x2c
 801ab32:	4621      	mov	r1, r4
 801ab34:	4628      	mov	r0, r5
 801ab36:	f000 f9d1 	bl	801aedc <_printf_common>
 801ab3a:	3001      	adds	r0, #1
 801ab3c:	f040 8089 	bne.w	801ac52 <_printf_float+0x1aa>
 801ab40:	f04f 30ff 	mov.w	r0, #4294967295
 801ab44:	b00d      	add	sp, #52	@ 0x34
 801ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab4a:	eeb4 0b40 	vcmp.f64	d0, d0
 801ab4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab52:	d709      	bvc.n	801ab68 <_printf_float+0xc0>
 801ab54:	ee10 3a90 	vmov	r3, s1
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	bfbc      	itt	lt
 801ab5c:	232d      	movlt	r3, #45	@ 0x2d
 801ab5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801ab62:	497d      	ldr	r1, [pc, #500]	@ (801ad58 <_printf_float+0x2b0>)
 801ab64:	4b7d      	ldr	r3, [pc, #500]	@ (801ad5c <_printf_float+0x2b4>)
 801ab66:	e7d5      	b.n	801ab14 <_printf_float+0x6c>
 801ab68:	6863      	ldr	r3, [r4, #4]
 801ab6a:	1c59      	adds	r1, r3, #1
 801ab6c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 801ab70:	d139      	bne.n	801abe6 <_printf_float+0x13e>
 801ab72:	2306      	movs	r3, #6
 801ab74:	6063      	str	r3, [r4, #4]
 801ab76:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801ab7a:	2300      	movs	r3, #0
 801ab7c:	6022      	str	r2, [r4, #0]
 801ab7e:	9303      	str	r3, [sp, #12]
 801ab80:	ab0a      	add	r3, sp, #40	@ 0x28
 801ab82:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801ab86:	ab09      	add	r3, sp, #36	@ 0x24
 801ab88:	9300      	str	r3, [sp, #0]
 801ab8a:	6861      	ldr	r1, [r4, #4]
 801ab8c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801ab90:	4628      	mov	r0, r5
 801ab92:	f7ff fef9 	bl	801a988 <__cvt>
 801ab96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801ab9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ab9c:	4680      	mov	r8, r0
 801ab9e:	d129      	bne.n	801abf4 <_printf_float+0x14c>
 801aba0:	1cc8      	adds	r0, r1, #3
 801aba2:	db02      	blt.n	801abaa <_printf_float+0x102>
 801aba4:	6863      	ldr	r3, [r4, #4]
 801aba6:	4299      	cmp	r1, r3
 801aba8:	dd41      	ble.n	801ac2e <_printf_float+0x186>
 801abaa:	f1a9 0902 	sub.w	r9, r9, #2
 801abae:	fa5f f989 	uxtb.w	r9, r9
 801abb2:	3901      	subs	r1, #1
 801abb4:	464a      	mov	r2, r9
 801abb6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801abba:	9109      	str	r1, [sp, #36]	@ 0x24
 801abbc:	f7ff ff38 	bl	801aa30 <__exponent>
 801abc0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801abc2:	1813      	adds	r3, r2, r0
 801abc4:	2a01      	cmp	r2, #1
 801abc6:	4682      	mov	sl, r0
 801abc8:	6123      	str	r3, [r4, #16]
 801abca:	dc02      	bgt.n	801abd2 <_printf_float+0x12a>
 801abcc:	6822      	ldr	r2, [r4, #0]
 801abce:	07d2      	lsls	r2, r2, #31
 801abd0:	d501      	bpl.n	801abd6 <_printf_float+0x12e>
 801abd2:	3301      	adds	r3, #1
 801abd4:	6123      	str	r3, [r4, #16]
 801abd6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d0a6      	beq.n	801ab2c <_printf_float+0x84>
 801abde:	232d      	movs	r3, #45	@ 0x2d
 801abe0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801abe4:	e7a2      	b.n	801ab2c <_printf_float+0x84>
 801abe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801abea:	d1c4      	bne.n	801ab76 <_printf_float+0xce>
 801abec:	2b00      	cmp	r3, #0
 801abee:	d1c2      	bne.n	801ab76 <_printf_float+0xce>
 801abf0:	2301      	movs	r3, #1
 801abf2:	e7bf      	b.n	801ab74 <_printf_float+0xcc>
 801abf4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801abf8:	d9db      	bls.n	801abb2 <_printf_float+0x10a>
 801abfa:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801abfe:	d118      	bne.n	801ac32 <_printf_float+0x18a>
 801ac00:	2900      	cmp	r1, #0
 801ac02:	6863      	ldr	r3, [r4, #4]
 801ac04:	dd0b      	ble.n	801ac1e <_printf_float+0x176>
 801ac06:	6121      	str	r1, [r4, #16]
 801ac08:	b913      	cbnz	r3, 801ac10 <_printf_float+0x168>
 801ac0a:	6822      	ldr	r2, [r4, #0]
 801ac0c:	07d0      	lsls	r0, r2, #31
 801ac0e:	d502      	bpl.n	801ac16 <_printf_float+0x16e>
 801ac10:	3301      	adds	r3, #1
 801ac12:	440b      	add	r3, r1
 801ac14:	6123      	str	r3, [r4, #16]
 801ac16:	65a1      	str	r1, [r4, #88]	@ 0x58
 801ac18:	f04f 0a00 	mov.w	sl, #0
 801ac1c:	e7db      	b.n	801abd6 <_printf_float+0x12e>
 801ac1e:	b913      	cbnz	r3, 801ac26 <_printf_float+0x17e>
 801ac20:	6822      	ldr	r2, [r4, #0]
 801ac22:	07d2      	lsls	r2, r2, #31
 801ac24:	d501      	bpl.n	801ac2a <_printf_float+0x182>
 801ac26:	3302      	adds	r3, #2
 801ac28:	e7f4      	b.n	801ac14 <_printf_float+0x16c>
 801ac2a:	2301      	movs	r3, #1
 801ac2c:	e7f2      	b.n	801ac14 <_printf_float+0x16c>
 801ac2e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801ac32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ac34:	4299      	cmp	r1, r3
 801ac36:	db05      	blt.n	801ac44 <_printf_float+0x19c>
 801ac38:	6823      	ldr	r3, [r4, #0]
 801ac3a:	6121      	str	r1, [r4, #16]
 801ac3c:	07d8      	lsls	r0, r3, #31
 801ac3e:	d5ea      	bpl.n	801ac16 <_printf_float+0x16e>
 801ac40:	1c4b      	adds	r3, r1, #1
 801ac42:	e7e7      	b.n	801ac14 <_printf_float+0x16c>
 801ac44:	2900      	cmp	r1, #0
 801ac46:	bfd4      	ite	le
 801ac48:	f1c1 0202 	rsble	r2, r1, #2
 801ac4c:	2201      	movgt	r2, #1
 801ac4e:	4413      	add	r3, r2
 801ac50:	e7e0      	b.n	801ac14 <_printf_float+0x16c>
 801ac52:	6823      	ldr	r3, [r4, #0]
 801ac54:	055a      	lsls	r2, r3, #21
 801ac56:	d407      	bmi.n	801ac68 <_printf_float+0x1c0>
 801ac58:	6923      	ldr	r3, [r4, #16]
 801ac5a:	4642      	mov	r2, r8
 801ac5c:	4631      	mov	r1, r6
 801ac5e:	4628      	mov	r0, r5
 801ac60:	47b8      	blx	r7
 801ac62:	3001      	adds	r0, #1
 801ac64:	d12a      	bne.n	801acbc <_printf_float+0x214>
 801ac66:	e76b      	b.n	801ab40 <_printf_float+0x98>
 801ac68:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801ac6c:	f240 80e0 	bls.w	801ae30 <_printf_float+0x388>
 801ac70:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801ac74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ac78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac7c:	d133      	bne.n	801ace6 <_printf_float+0x23e>
 801ac7e:	4a38      	ldr	r2, [pc, #224]	@ (801ad60 <_printf_float+0x2b8>)
 801ac80:	2301      	movs	r3, #1
 801ac82:	4631      	mov	r1, r6
 801ac84:	4628      	mov	r0, r5
 801ac86:	47b8      	blx	r7
 801ac88:	3001      	adds	r0, #1
 801ac8a:	f43f af59 	beq.w	801ab40 <_printf_float+0x98>
 801ac8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ac92:	4543      	cmp	r3, r8
 801ac94:	db02      	blt.n	801ac9c <_printf_float+0x1f4>
 801ac96:	6823      	ldr	r3, [r4, #0]
 801ac98:	07d8      	lsls	r0, r3, #31
 801ac9a:	d50f      	bpl.n	801acbc <_printf_float+0x214>
 801ac9c:	9b05      	ldr	r3, [sp, #20]
 801ac9e:	465a      	mov	r2, fp
 801aca0:	4631      	mov	r1, r6
 801aca2:	4628      	mov	r0, r5
 801aca4:	47b8      	blx	r7
 801aca6:	3001      	adds	r0, #1
 801aca8:	f43f af4a 	beq.w	801ab40 <_printf_float+0x98>
 801acac:	f04f 0900 	mov.w	r9, #0
 801acb0:	f108 38ff 	add.w	r8, r8, #4294967295
 801acb4:	f104 0a1a 	add.w	sl, r4, #26
 801acb8:	45c8      	cmp	r8, r9
 801acba:	dc09      	bgt.n	801acd0 <_printf_float+0x228>
 801acbc:	6823      	ldr	r3, [r4, #0]
 801acbe:	079b      	lsls	r3, r3, #30
 801acc0:	f100 8107 	bmi.w	801aed2 <_printf_float+0x42a>
 801acc4:	68e0      	ldr	r0, [r4, #12]
 801acc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801acc8:	4298      	cmp	r0, r3
 801acca:	bfb8      	it	lt
 801accc:	4618      	movlt	r0, r3
 801acce:	e739      	b.n	801ab44 <_printf_float+0x9c>
 801acd0:	2301      	movs	r3, #1
 801acd2:	4652      	mov	r2, sl
 801acd4:	4631      	mov	r1, r6
 801acd6:	4628      	mov	r0, r5
 801acd8:	47b8      	blx	r7
 801acda:	3001      	adds	r0, #1
 801acdc:	f43f af30 	beq.w	801ab40 <_printf_float+0x98>
 801ace0:	f109 0901 	add.w	r9, r9, #1
 801ace4:	e7e8      	b.n	801acb8 <_printf_float+0x210>
 801ace6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ace8:	2b00      	cmp	r3, #0
 801acea:	dc3b      	bgt.n	801ad64 <_printf_float+0x2bc>
 801acec:	4a1c      	ldr	r2, [pc, #112]	@ (801ad60 <_printf_float+0x2b8>)
 801acee:	2301      	movs	r3, #1
 801acf0:	4631      	mov	r1, r6
 801acf2:	4628      	mov	r0, r5
 801acf4:	47b8      	blx	r7
 801acf6:	3001      	adds	r0, #1
 801acf8:	f43f af22 	beq.w	801ab40 <_printf_float+0x98>
 801acfc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ad00:	ea59 0303 	orrs.w	r3, r9, r3
 801ad04:	d102      	bne.n	801ad0c <_printf_float+0x264>
 801ad06:	6823      	ldr	r3, [r4, #0]
 801ad08:	07d9      	lsls	r1, r3, #31
 801ad0a:	d5d7      	bpl.n	801acbc <_printf_float+0x214>
 801ad0c:	9b05      	ldr	r3, [sp, #20]
 801ad0e:	465a      	mov	r2, fp
 801ad10:	4631      	mov	r1, r6
 801ad12:	4628      	mov	r0, r5
 801ad14:	47b8      	blx	r7
 801ad16:	3001      	adds	r0, #1
 801ad18:	f43f af12 	beq.w	801ab40 <_printf_float+0x98>
 801ad1c:	f04f 0a00 	mov.w	sl, #0
 801ad20:	f104 0b1a 	add.w	fp, r4, #26
 801ad24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad26:	425b      	negs	r3, r3
 801ad28:	4553      	cmp	r3, sl
 801ad2a:	dc01      	bgt.n	801ad30 <_printf_float+0x288>
 801ad2c:	464b      	mov	r3, r9
 801ad2e:	e794      	b.n	801ac5a <_printf_float+0x1b2>
 801ad30:	2301      	movs	r3, #1
 801ad32:	465a      	mov	r2, fp
 801ad34:	4631      	mov	r1, r6
 801ad36:	4628      	mov	r0, r5
 801ad38:	47b8      	blx	r7
 801ad3a:	3001      	adds	r0, #1
 801ad3c:	f43f af00 	beq.w	801ab40 <_printf_float+0x98>
 801ad40:	f10a 0a01 	add.w	sl, sl, #1
 801ad44:	e7ee      	b.n	801ad24 <_printf_float+0x27c>
 801ad46:	bf00      	nop
 801ad48:	ffffffff 	.word	0xffffffff
 801ad4c:	7fefffff 	.word	0x7fefffff
 801ad50:	0801dc20 	.word	0x0801dc20
 801ad54:	0801dc1c 	.word	0x0801dc1c
 801ad58:	0801dc28 	.word	0x0801dc28
 801ad5c:	0801dc24 	.word	0x0801dc24
 801ad60:	0801dc2c 	.word	0x0801dc2c
 801ad64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ad66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ad6a:	4553      	cmp	r3, sl
 801ad6c:	bfa8      	it	ge
 801ad6e:	4653      	movge	r3, sl
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	4699      	mov	r9, r3
 801ad74:	dc37      	bgt.n	801ade6 <_printf_float+0x33e>
 801ad76:	2300      	movs	r3, #0
 801ad78:	9307      	str	r3, [sp, #28]
 801ad7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ad7e:	f104 021a 	add.w	r2, r4, #26
 801ad82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ad84:	9907      	ldr	r1, [sp, #28]
 801ad86:	9306      	str	r3, [sp, #24]
 801ad88:	eba3 0309 	sub.w	r3, r3, r9
 801ad8c:	428b      	cmp	r3, r1
 801ad8e:	dc31      	bgt.n	801adf4 <_printf_float+0x34c>
 801ad90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad92:	459a      	cmp	sl, r3
 801ad94:	dc3b      	bgt.n	801ae0e <_printf_float+0x366>
 801ad96:	6823      	ldr	r3, [r4, #0]
 801ad98:	07da      	lsls	r2, r3, #31
 801ad9a:	d438      	bmi.n	801ae0e <_printf_float+0x366>
 801ad9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad9e:	ebaa 0903 	sub.w	r9, sl, r3
 801ada2:	9b06      	ldr	r3, [sp, #24]
 801ada4:	ebaa 0303 	sub.w	r3, sl, r3
 801ada8:	4599      	cmp	r9, r3
 801adaa:	bfa8      	it	ge
 801adac:	4699      	movge	r9, r3
 801adae:	f1b9 0f00 	cmp.w	r9, #0
 801adb2:	dc34      	bgt.n	801ae1e <_printf_float+0x376>
 801adb4:	f04f 0800 	mov.w	r8, #0
 801adb8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801adbc:	f104 0b1a 	add.w	fp, r4, #26
 801adc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801adc2:	ebaa 0303 	sub.w	r3, sl, r3
 801adc6:	eba3 0309 	sub.w	r3, r3, r9
 801adca:	4543      	cmp	r3, r8
 801adcc:	f77f af76 	ble.w	801acbc <_printf_float+0x214>
 801add0:	2301      	movs	r3, #1
 801add2:	465a      	mov	r2, fp
 801add4:	4631      	mov	r1, r6
 801add6:	4628      	mov	r0, r5
 801add8:	47b8      	blx	r7
 801adda:	3001      	adds	r0, #1
 801addc:	f43f aeb0 	beq.w	801ab40 <_printf_float+0x98>
 801ade0:	f108 0801 	add.w	r8, r8, #1
 801ade4:	e7ec      	b.n	801adc0 <_printf_float+0x318>
 801ade6:	4642      	mov	r2, r8
 801ade8:	4631      	mov	r1, r6
 801adea:	4628      	mov	r0, r5
 801adec:	47b8      	blx	r7
 801adee:	3001      	adds	r0, #1
 801adf0:	d1c1      	bne.n	801ad76 <_printf_float+0x2ce>
 801adf2:	e6a5      	b.n	801ab40 <_printf_float+0x98>
 801adf4:	2301      	movs	r3, #1
 801adf6:	4631      	mov	r1, r6
 801adf8:	4628      	mov	r0, r5
 801adfa:	9206      	str	r2, [sp, #24]
 801adfc:	47b8      	blx	r7
 801adfe:	3001      	adds	r0, #1
 801ae00:	f43f ae9e 	beq.w	801ab40 <_printf_float+0x98>
 801ae04:	9b07      	ldr	r3, [sp, #28]
 801ae06:	9a06      	ldr	r2, [sp, #24]
 801ae08:	3301      	adds	r3, #1
 801ae0a:	9307      	str	r3, [sp, #28]
 801ae0c:	e7b9      	b.n	801ad82 <_printf_float+0x2da>
 801ae0e:	9b05      	ldr	r3, [sp, #20]
 801ae10:	465a      	mov	r2, fp
 801ae12:	4631      	mov	r1, r6
 801ae14:	4628      	mov	r0, r5
 801ae16:	47b8      	blx	r7
 801ae18:	3001      	adds	r0, #1
 801ae1a:	d1bf      	bne.n	801ad9c <_printf_float+0x2f4>
 801ae1c:	e690      	b.n	801ab40 <_printf_float+0x98>
 801ae1e:	9a06      	ldr	r2, [sp, #24]
 801ae20:	464b      	mov	r3, r9
 801ae22:	4442      	add	r2, r8
 801ae24:	4631      	mov	r1, r6
 801ae26:	4628      	mov	r0, r5
 801ae28:	47b8      	blx	r7
 801ae2a:	3001      	adds	r0, #1
 801ae2c:	d1c2      	bne.n	801adb4 <_printf_float+0x30c>
 801ae2e:	e687      	b.n	801ab40 <_printf_float+0x98>
 801ae30:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801ae34:	f1b9 0f01 	cmp.w	r9, #1
 801ae38:	dc01      	bgt.n	801ae3e <_printf_float+0x396>
 801ae3a:	07db      	lsls	r3, r3, #31
 801ae3c:	d536      	bpl.n	801aeac <_printf_float+0x404>
 801ae3e:	2301      	movs	r3, #1
 801ae40:	4642      	mov	r2, r8
 801ae42:	4631      	mov	r1, r6
 801ae44:	4628      	mov	r0, r5
 801ae46:	47b8      	blx	r7
 801ae48:	3001      	adds	r0, #1
 801ae4a:	f43f ae79 	beq.w	801ab40 <_printf_float+0x98>
 801ae4e:	9b05      	ldr	r3, [sp, #20]
 801ae50:	465a      	mov	r2, fp
 801ae52:	4631      	mov	r1, r6
 801ae54:	4628      	mov	r0, r5
 801ae56:	47b8      	blx	r7
 801ae58:	3001      	adds	r0, #1
 801ae5a:	f43f ae71 	beq.w	801ab40 <_printf_float+0x98>
 801ae5e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801ae62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ae66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae6a:	f109 39ff 	add.w	r9, r9, #4294967295
 801ae6e:	d018      	beq.n	801aea2 <_printf_float+0x3fa>
 801ae70:	464b      	mov	r3, r9
 801ae72:	f108 0201 	add.w	r2, r8, #1
 801ae76:	4631      	mov	r1, r6
 801ae78:	4628      	mov	r0, r5
 801ae7a:	47b8      	blx	r7
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	d10c      	bne.n	801ae9a <_printf_float+0x3f2>
 801ae80:	e65e      	b.n	801ab40 <_printf_float+0x98>
 801ae82:	2301      	movs	r3, #1
 801ae84:	465a      	mov	r2, fp
 801ae86:	4631      	mov	r1, r6
 801ae88:	4628      	mov	r0, r5
 801ae8a:	47b8      	blx	r7
 801ae8c:	3001      	adds	r0, #1
 801ae8e:	f43f ae57 	beq.w	801ab40 <_printf_float+0x98>
 801ae92:	f108 0801 	add.w	r8, r8, #1
 801ae96:	45c8      	cmp	r8, r9
 801ae98:	dbf3      	blt.n	801ae82 <_printf_float+0x3da>
 801ae9a:	4653      	mov	r3, sl
 801ae9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801aea0:	e6dc      	b.n	801ac5c <_printf_float+0x1b4>
 801aea2:	f04f 0800 	mov.w	r8, #0
 801aea6:	f104 0b1a 	add.w	fp, r4, #26
 801aeaa:	e7f4      	b.n	801ae96 <_printf_float+0x3ee>
 801aeac:	2301      	movs	r3, #1
 801aeae:	4642      	mov	r2, r8
 801aeb0:	e7e1      	b.n	801ae76 <_printf_float+0x3ce>
 801aeb2:	2301      	movs	r3, #1
 801aeb4:	464a      	mov	r2, r9
 801aeb6:	4631      	mov	r1, r6
 801aeb8:	4628      	mov	r0, r5
 801aeba:	47b8      	blx	r7
 801aebc:	3001      	adds	r0, #1
 801aebe:	f43f ae3f 	beq.w	801ab40 <_printf_float+0x98>
 801aec2:	f108 0801 	add.w	r8, r8, #1
 801aec6:	68e3      	ldr	r3, [r4, #12]
 801aec8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801aeca:	1a5b      	subs	r3, r3, r1
 801aecc:	4543      	cmp	r3, r8
 801aece:	dcf0      	bgt.n	801aeb2 <_printf_float+0x40a>
 801aed0:	e6f8      	b.n	801acc4 <_printf_float+0x21c>
 801aed2:	f04f 0800 	mov.w	r8, #0
 801aed6:	f104 0919 	add.w	r9, r4, #25
 801aeda:	e7f4      	b.n	801aec6 <_printf_float+0x41e>

0801aedc <_printf_common>:
 801aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aee0:	4616      	mov	r6, r2
 801aee2:	4698      	mov	r8, r3
 801aee4:	688a      	ldr	r2, [r1, #8]
 801aee6:	690b      	ldr	r3, [r1, #16]
 801aee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801aeec:	4293      	cmp	r3, r2
 801aeee:	bfb8      	it	lt
 801aef0:	4613      	movlt	r3, r2
 801aef2:	6033      	str	r3, [r6, #0]
 801aef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801aef8:	4607      	mov	r7, r0
 801aefa:	460c      	mov	r4, r1
 801aefc:	b10a      	cbz	r2, 801af02 <_printf_common+0x26>
 801aefe:	3301      	adds	r3, #1
 801af00:	6033      	str	r3, [r6, #0]
 801af02:	6823      	ldr	r3, [r4, #0]
 801af04:	0699      	lsls	r1, r3, #26
 801af06:	bf42      	ittt	mi
 801af08:	6833      	ldrmi	r3, [r6, #0]
 801af0a:	3302      	addmi	r3, #2
 801af0c:	6033      	strmi	r3, [r6, #0]
 801af0e:	6825      	ldr	r5, [r4, #0]
 801af10:	f015 0506 	ands.w	r5, r5, #6
 801af14:	d106      	bne.n	801af24 <_printf_common+0x48>
 801af16:	f104 0a19 	add.w	sl, r4, #25
 801af1a:	68e3      	ldr	r3, [r4, #12]
 801af1c:	6832      	ldr	r2, [r6, #0]
 801af1e:	1a9b      	subs	r3, r3, r2
 801af20:	42ab      	cmp	r3, r5
 801af22:	dc26      	bgt.n	801af72 <_printf_common+0x96>
 801af24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801af28:	6822      	ldr	r2, [r4, #0]
 801af2a:	3b00      	subs	r3, #0
 801af2c:	bf18      	it	ne
 801af2e:	2301      	movne	r3, #1
 801af30:	0692      	lsls	r2, r2, #26
 801af32:	d42b      	bmi.n	801af8c <_printf_common+0xb0>
 801af34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801af38:	4641      	mov	r1, r8
 801af3a:	4638      	mov	r0, r7
 801af3c:	47c8      	blx	r9
 801af3e:	3001      	adds	r0, #1
 801af40:	d01e      	beq.n	801af80 <_printf_common+0xa4>
 801af42:	6823      	ldr	r3, [r4, #0]
 801af44:	6922      	ldr	r2, [r4, #16]
 801af46:	f003 0306 	and.w	r3, r3, #6
 801af4a:	2b04      	cmp	r3, #4
 801af4c:	bf02      	ittt	eq
 801af4e:	68e5      	ldreq	r5, [r4, #12]
 801af50:	6833      	ldreq	r3, [r6, #0]
 801af52:	1aed      	subeq	r5, r5, r3
 801af54:	68a3      	ldr	r3, [r4, #8]
 801af56:	bf0c      	ite	eq
 801af58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801af5c:	2500      	movne	r5, #0
 801af5e:	4293      	cmp	r3, r2
 801af60:	bfc4      	itt	gt
 801af62:	1a9b      	subgt	r3, r3, r2
 801af64:	18ed      	addgt	r5, r5, r3
 801af66:	2600      	movs	r6, #0
 801af68:	341a      	adds	r4, #26
 801af6a:	42b5      	cmp	r5, r6
 801af6c:	d11a      	bne.n	801afa4 <_printf_common+0xc8>
 801af6e:	2000      	movs	r0, #0
 801af70:	e008      	b.n	801af84 <_printf_common+0xa8>
 801af72:	2301      	movs	r3, #1
 801af74:	4652      	mov	r2, sl
 801af76:	4641      	mov	r1, r8
 801af78:	4638      	mov	r0, r7
 801af7a:	47c8      	blx	r9
 801af7c:	3001      	adds	r0, #1
 801af7e:	d103      	bne.n	801af88 <_printf_common+0xac>
 801af80:	f04f 30ff 	mov.w	r0, #4294967295
 801af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af88:	3501      	adds	r5, #1
 801af8a:	e7c6      	b.n	801af1a <_printf_common+0x3e>
 801af8c:	18e1      	adds	r1, r4, r3
 801af8e:	1c5a      	adds	r2, r3, #1
 801af90:	2030      	movs	r0, #48	@ 0x30
 801af92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801af96:	4422      	add	r2, r4
 801af98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801af9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801afa0:	3302      	adds	r3, #2
 801afa2:	e7c7      	b.n	801af34 <_printf_common+0x58>
 801afa4:	2301      	movs	r3, #1
 801afa6:	4622      	mov	r2, r4
 801afa8:	4641      	mov	r1, r8
 801afaa:	4638      	mov	r0, r7
 801afac:	47c8      	blx	r9
 801afae:	3001      	adds	r0, #1
 801afb0:	d0e6      	beq.n	801af80 <_printf_common+0xa4>
 801afb2:	3601      	adds	r6, #1
 801afb4:	e7d9      	b.n	801af6a <_printf_common+0x8e>
	...

0801afb8 <_printf_i>:
 801afb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801afbc:	7e0f      	ldrb	r7, [r1, #24]
 801afbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801afc0:	2f78      	cmp	r7, #120	@ 0x78
 801afc2:	4691      	mov	r9, r2
 801afc4:	4680      	mov	r8, r0
 801afc6:	460c      	mov	r4, r1
 801afc8:	469a      	mov	sl, r3
 801afca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801afce:	d807      	bhi.n	801afe0 <_printf_i+0x28>
 801afd0:	2f62      	cmp	r7, #98	@ 0x62
 801afd2:	d80a      	bhi.n	801afea <_printf_i+0x32>
 801afd4:	2f00      	cmp	r7, #0
 801afd6:	f000 80d1 	beq.w	801b17c <_printf_i+0x1c4>
 801afda:	2f58      	cmp	r7, #88	@ 0x58
 801afdc:	f000 80b8 	beq.w	801b150 <_printf_i+0x198>
 801afe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801afe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801afe8:	e03a      	b.n	801b060 <_printf_i+0xa8>
 801afea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801afee:	2b15      	cmp	r3, #21
 801aff0:	d8f6      	bhi.n	801afe0 <_printf_i+0x28>
 801aff2:	a101      	add	r1, pc, #4	@ (adr r1, 801aff8 <_printf_i+0x40>)
 801aff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aff8:	0801b051 	.word	0x0801b051
 801affc:	0801b065 	.word	0x0801b065
 801b000:	0801afe1 	.word	0x0801afe1
 801b004:	0801afe1 	.word	0x0801afe1
 801b008:	0801afe1 	.word	0x0801afe1
 801b00c:	0801afe1 	.word	0x0801afe1
 801b010:	0801b065 	.word	0x0801b065
 801b014:	0801afe1 	.word	0x0801afe1
 801b018:	0801afe1 	.word	0x0801afe1
 801b01c:	0801afe1 	.word	0x0801afe1
 801b020:	0801afe1 	.word	0x0801afe1
 801b024:	0801b163 	.word	0x0801b163
 801b028:	0801b08f 	.word	0x0801b08f
 801b02c:	0801b11d 	.word	0x0801b11d
 801b030:	0801afe1 	.word	0x0801afe1
 801b034:	0801afe1 	.word	0x0801afe1
 801b038:	0801b185 	.word	0x0801b185
 801b03c:	0801afe1 	.word	0x0801afe1
 801b040:	0801b08f 	.word	0x0801b08f
 801b044:	0801afe1 	.word	0x0801afe1
 801b048:	0801afe1 	.word	0x0801afe1
 801b04c:	0801b125 	.word	0x0801b125
 801b050:	6833      	ldr	r3, [r6, #0]
 801b052:	1d1a      	adds	r2, r3, #4
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	6032      	str	r2, [r6, #0]
 801b058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801b05c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801b060:	2301      	movs	r3, #1
 801b062:	e09c      	b.n	801b19e <_printf_i+0x1e6>
 801b064:	6833      	ldr	r3, [r6, #0]
 801b066:	6820      	ldr	r0, [r4, #0]
 801b068:	1d19      	adds	r1, r3, #4
 801b06a:	6031      	str	r1, [r6, #0]
 801b06c:	0606      	lsls	r6, r0, #24
 801b06e:	d501      	bpl.n	801b074 <_printf_i+0xbc>
 801b070:	681d      	ldr	r5, [r3, #0]
 801b072:	e003      	b.n	801b07c <_printf_i+0xc4>
 801b074:	0645      	lsls	r5, r0, #25
 801b076:	d5fb      	bpl.n	801b070 <_printf_i+0xb8>
 801b078:	f9b3 5000 	ldrsh.w	r5, [r3]
 801b07c:	2d00      	cmp	r5, #0
 801b07e:	da03      	bge.n	801b088 <_printf_i+0xd0>
 801b080:	232d      	movs	r3, #45	@ 0x2d
 801b082:	426d      	negs	r5, r5
 801b084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b088:	4858      	ldr	r0, [pc, #352]	@ (801b1ec <_printf_i+0x234>)
 801b08a:	230a      	movs	r3, #10
 801b08c:	e011      	b.n	801b0b2 <_printf_i+0xfa>
 801b08e:	6821      	ldr	r1, [r4, #0]
 801b090:	6833      	ldr	r3, [r6, #0]
 801b092:	0608      	lsls	r0, r1, #24
 801b094:	f853 5b04 	ldr.w	r5, [r3], #4
 801b098:	d402      	bmi.n	801b0a0 <_printf_i+0xe8>
 801b09a:	0649      	lsls	r1, r1, #25
 801b09c:	bf48      	it	mi
 801b09e:	b2ad      	uxthmi	r5, r5
 801b0a0:	2f6f      	cmp	r7, #111	@ 0x6f
 801b0a2:	4852      	ldr	r0, [pc, #328]	@ (801b1ec <_printf_i+0x234>)
 801b0a4:	6033      	str	r3, [r6, #0]
 801b0a6:	bf14      	ite	ne
 801b0a8:	230a      	movne	r3, #10
 801b0aa:	2308      	moveq	r3, #8
 801b0ac:	2100      	movs	r1, #0
 801b0ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801b0b2:	6866      	ldr	r6, [r4, #4]
 801b0b4:	60a6      	str	r6, [r4, #8]
 801b0b6:	2e00      	cmp	r6, #0
 801b0b8:	db05      	blt.n	801b0c6 <_printf_i+0x10e>
 801b0ba:	6821      	ldr	r1, [r4, #0]
 801b0bc:	432e      	orrs	r6, r5
 801b0be:	f021 0104 	bic.w	r1, r1, #4
 801b0c2:	6021      	str	r1, [r4, #0]
 801b0c4:	d04b      	beq.n	801b15e <_printf_i+0x1a6>
 801b0c6:	4616      	mov	r6, r2
 801b0c8:	fbb5 f1f3 	udiv	r1, r5, r3
 801b0cc:	fb03 5711 	mls	r7, r3, r1, r5
 801b0d0:	5dc7      	ldrb	r7, [r0, r7]
 801b0d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b0d6:	462f      	mov	r7, r5
 801b0d8:	42bb      	cmp	r3, r7
 801b0da:	460d      	mov	r5, r1
 801b0dc:	d9f4      	bls.n	801b0c8 <_printf_i+0x110>
 801b0de:	2b08      	cmp	r3, #8
 801b0e0:	d10b      	bne.n	801b0fa <_printf_i+0x142>
 801b0e2:	6823      	ldr	r3, [r4, #0]
 801b0e4:	07df      	lsls	r7, r3, #31
 801b0e6:	d508      	bpl.n	801b0fa <_printf_i+0x142>
 801b0e8:	6923      	ldr	r3, [r4, #16]
 801b0ea:	6861      	ldr	r1, [r4, #4]
 801b0ec:	4299      	cmp	r1, r3
 801b0ee:	bfde      	ittt	le
 801b0f0:	2330      	movle	r3, #48	@ 0x30
 801b0f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b0f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b0fa:	1b92      	subs	r2, r2, r6
 801b0fc:	6122      	str	r2, [r4, #16]
 801b0fe:	f8cd a000 	str.w	sl, [sp]
 801b102:	464b      	mov	r3, r9
 801b104:	aa03      	add	r2, sp, #12
 801b106:	4621      	mov	r1, r4
 801b108:	4640      	mov	r0, r8
 801b10a:	f7ff fee7 	bl	801aedc <_printf_common>
 801b10e:	3001      	adds	r0, #1
 801b110:	d14a      	bne.n	801b1a8 <_printf_i+0x1f0>
 801b112:	f04f 30ff 	mov.w	r0, #4294967295
 801b116:	b004      	add	sp, #16
 801b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b11c:	6823      	ldr	r3, [r4, #0]
 801b11e:	f043 0320 	orr.w	r3, r3, #32
 801b122:	6023      	str	r3, [r4, #0]
 801b124:	4832      	ldr	r0, [pc, #200]	@ (801b1f0 <_printf_i+0x238>)
 801b126:	2778      	movs	r7, #120	@ 0x78
 801b128:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b12c:	6823      	ldr	r3, [r4, #0]
 801b12e:	6831      	ldr	r1, [r6, #0]
 801b130:	061f      	lsls	r7, r3, #24
 801b132:	f851 5b04 	ldr.w	r5, [r1], #4
 801b136:	d402      	bmi.n	801b13e <_printf_i+0x186>
 801b138:	065f      	lsls	r7, r3, #25
 801b13a:	bf48      	it	mi
 801b13c:	b2ad      	uxthmi	r5, r5
 801b13e:	6031      	str	r1, [r6, #0]
 801b140:	07d9      	lsls	r1, r3, #31
 801b142:	bf44      	itt	mi
 801b144:	f043 0320 	orrmi.w	r3, r3, #32
 801b148:	6023      	strmi	r3, [r4, #0]
 801b14a:	b11d      	cbz	r5, 801b154 <_printf_i+0x19c>
 801b14c:	2310      	movs	r3, #16
 801b14e:	e7ad      	b.n	801b0ac <_printf_i+0xf4>
 801b150:	4826      	ldr	r0, [pc, #152]	@ (801b1ec <_printf_i+0x234>)
 801b152:	e7e9      	b.n	801b128 <_printf_i+0x170>
 801b154:	6823      	ldr	r3, [r4, #0]
 801b156:	f023 0320 	bic.w	r3, r3, #32
 801b15a:	6023      	str	r3, [r4, #0]
 801b15c:	e7f6      	b.n	801b14c <_printf_i+0x194>
 801b15e:	4616      	mov	r6, r2
 801b160:	e7bd      	b.n	801b0de <_printf_i+0x126>
 801b162:	6833      	ldr	r3, [r6, #0]
 801b164:	6825      	ldr	r5, [r4, #0]
 801b166:	6961      	ldr	r1, [r4, #20]
 801b168:	1d18      	adds	r0, r3, #4
 801b16a:	6030      	str	r0, [r6, #0]
 801b16c:	062e      	lsls	r6, r5, #24
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	d501      	bpl.n	801b176 <_printf_i+0x1be>
 801b172:	6019      	str	r1, [r3, #0]
 801b174:	e002      	b.n	801b17c <_printf_i+0x1c4>
 801b176:	0668      	lsls	r0, r5, #25
 801b178:	d5fb      	bpl.n	801b172 <_printf_i+0x1ba>
 801b17a:	8019      	strh	r1, [r3, #0]
 801b17c:	2300      	movs	r3, #0
 801b17e:	6123      	str	r3, [r4, #16]
 801b180:	4616      	mov	r6, r2
 801b182:	e7bc      	b.n	801b0fe <_printf_i+0x146>
 801b184:	6833      	ldr	r3, [r6, #0]
 801b186:	1d1a      	adds	r2, r3, #4
 801b188:	6032      	str	r2, [r6, #0]
 801b18a:	681e      	ldr	r6, [r3, #0]
 801b18c:	6862      	ldr	r2, [r4, #4]
 801b18e:	2100      	movs	r1, #0
 801b190:	4630      	mov	r0, r6
 801b192:	f7e5 f8a5 	bl	80002e0 <memchr>
 801b196:	b108      	cbz	r0, 801b19c <_printf_i+0x1e4>
 801b198:	1b80      	subs	r0, r0, r6
 801b19a:	6060      	str	r0, [r4, #4]
 801b19c:	6863      	ldr	r3, [r4, #4]
 801b19e:	6123      	str	r3, [r4, #16]
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b1a6:	e7aa      	b.n	801b0fe <_printf_i+0x146>
 801b1a8:	6923      	ldr	r3, [r4, #16]
 801b1aa:	4632      	mov	r2, r6
 801b1ac:	4649      	mov	r1, r9
 801b1ae:	4640      	mov	r0, r8
 801b1b0:	47d0      	blx	sl
 801b1b2:	3001      	adds	r0, #1
 801b1b4:	d0ad      	beq.n	801b112 <_printf_i+0x15a>
 801b1b6:	6823      	ldr	r3, [r4, #0]
 801b1b8:	079b      	lsls	r3, r3, #30
 801b1ba:	d413      	bmi.n	801b1e4 <_printf_i+0x22c>
 801b1bc:	68e0      	ldr	r0, [r4, #12]
 801b1be:	9b03      	ldr	r3, [sp, #12]
 801b1c0:	4298      	cmp	r0, r3
 801b1c2:	bfb8      	it	lt
 801b1c4:	4618      	movlt	r0, r3
 801b1c6:	e7a6      	b.n	801b116 <_printf_i+0x15e>
 801b1c8:	2301      	movs	r3, #1
 801b1ca:	4632      	mov	r2, r6
 801b1cc:	4649      	mov	r1, r9
 801b1ce:	4640      	mov	r0, r8
 801b1d0:	47d0      	blx	sl
 801b1d2:	3001      	adds	r0, #1
 801b1d4:	d09d      	beq.n	801b112 <_printf_i+0x15a>
 801b1d6:	3501      	adds	r5, #1
 801b1d8:	68e3      	ldr	r3, [r4, #12]
 801b1da:	9903      	ldr	r1, [sp, #12]
 801b1dc:	1a5b      	subs	r3, r3, r1
 801b1de:	42ab      	cmp	r3, r5
 801b1e0:	dcf2      	bgt.n	801b1c8 <_printf_i+0x210>
 801b1e2:	e7eb      	b.n	801b1bc <_printf_i+0x204>
 801b1e4:	2500      	movs	r5, #0
 801b1e6:	f104 0619 	add.w	r6, r4, #25
 801b1ea:	e7f5      	b.n	801b1d8 <_printf_i+0x220>
 801b1ec:	0801dc2e 	.word	0x0801dc2e
 801b1f0:	0801dc3f 	.word	0x0801dc3f

0801b1f4 <std>:
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	b510      	push	{r4, lr}
 801b1f8:	4604      	mov	r4, r0
 801b1fa:	e9c0 3300 	strd	r3, r3, [r0]
 801b1fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b202:	6083      	str	r3, [r0, #8]
 801b204:	8181      	strh	r1, [r0, #12]
 801b206:	6643      	str	r3, [r0, #100]	@ 0x64
 801b208:	81c2      	strh	r2, [r0, #14]
 801b20a:	6183      	str	r3, [r0, #24]
 801b20c:	4619      	mov	r1, r3
 801b20e:	2208      	movs	r2, #8
 801b210:	305c      	adds	r0, #92	@ 0x5c
 801b212:	f000 f916 	bl	801b442 <memset>
 801b216:	4b0d      	ldr	r3, [pc, #52]	@ (801b24c <std+0x58>)
 801b218:	6263      	str	r3, [r4, #36]	@ 0x24
 801b21a:	4b0d      	ldr	r3, [pc, #52]	@ (801b250 <std+0x5c>)
 801b21c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b21e:	4b0d      	ldr	r3, [pc, #52]	@ (801b254 <std+0x60>)
 801b220:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b222:	4b0d      	ldr	r3, [pc, #52]	@ (801b258 <std+0x64>)
 801b224:	6323      	str	r3, [r4, #48]	@ 0x30
 801b226:	4b0d      	ldr	r3, [pc, #52]	@ (801b25c <std+0x68>)
 801b228:	6224      	str	r4, [r4, #32]
 801b22a:	429c      	cmp	r4, r3
 801b22c:	d006      	beq.n	801b23c <std+0x48>
 801b22e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b232:	4294      	cmp	r4, r2
 801b234:	d002      	beq.n	801b23c <std+0x48>
 801b236:	33d0      	adds	r3, #208	@ 0xd0
 801b238:	429c      	cmp	r4, r3
 801b23a:	d105      	bne.n	801b248 <std+0x54>
 801b23c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b244:	f000 b98a 	b.w	801b55c <__retarget_lock_init_recursive>
 801b248:	bd10      	pop	{r4, pc}
 801b24a:	bf00      	nop
 801b24c:	0801b3bd 	.word	0x0801b3bd
 801b250:	0801b3df 	.word	0x0801b3df
 801b254:	0801b417 	.word	0x0801b417
 801b258:	0801b43b 	.word	0x0801b43b
 801b25c:	24048e90 	.word	0x24048e90

0801b260 <stdio_exit_handler>:
 801b260:	4a02      	ldr	r2, [pc, #8]	@ (801b26c <stdio_exit_handler+0xc>)
 801b262:	4903      	ldr	r1, [pc, #12]	@ (801b270 <stdio_exit_handler+0x10>)
 801b264:	4803      	ldr	r0, [pc, #12]	@ (801b274 <stdio_exit_handler+0x14>)
 801b266:	f000 b869 	b.w	801b33c <_fwalk_sglue>
 801b26a:	bf00      	nop
 801b26c:	24000344 	.word	0x24000344
 801b270:	0801cc9d 	.word	0x0801cc9d
 801b274:	24000354 	.word	0x24000354

0801b278 <cleanup_stdio>:
 801b278:	6841      	ldr	r1, [r0, #4]
 801b27a:	4b0c      	ldr	r3, [pc, #48]	@ (801b2ac <cleanup_stdio+0x34>)
 801b27c:	4299      	cmp	r1, r3
 801b27e:	b510      	push	{r4, lr}
 801b280:	4604      	mov	r4, r0
 801b282:	d001      	beq.n	801b288 <cleanup_stdio+0x10>
 801b284:	f001 fd0a 	bl	801cc9c <_fflush_r>
 801b288:	68a1      	ldr	r1, [r4, #8]
 801b28a:	4b09      	ldr	r3, [pc, #36]	@ (801b2b0 <cleanup_stdio+0x38>)
 801b28c:	4299      	cmp	r1, r3
 801b28e:	d002      	beq.n	801b296 <cleanup_stdio+0x1e>
 801b290:	4620      	mov	r0, r4
 801b292:	f001 fd03 	bl	801cc9c <_fflush_r>
 801b296:	68e1      	ldr	r1, [r4, #12]
 801b298:	4b06      	ldr	r3, [pc, #24]	@ (801b2b4 <cleanup_stdio+0x3c>)
 801b29a:	4299      	cmp	r1, r3
 801b29c:	d004      	beq.n	801b2a8 <cleanup_stdio+0x30>
 801b29e:	4620      	mov	r0, r4
 801b2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2a4:	f001 bcfa 	b.w	801cc9c <_fflush_r>
 801b2a8:	bd10      	pop	{r4, pc}
 801b2aa:	bf00      	nop
 801b2ac:	24048e90 	.word	0x24048e90
 801b2b0:	24048ef8 	.word	0x24048ef8
 801b2b4:	24048f60 	.word	0x24048f60

0801b2b8 <global_stdio_init.part.0>:
 801b2b8:	b510      	push	{r4, lr}
 801b2ba:	4b0b      	ldr	r3, [pc, #44]	@ (801b2e8 <global_stdio_init.part.0+0x30>)
 801b2bc:	4c0b      	ldr	r4, [pc, #44]	@ (801b2ec <global_stdio_init.part.0+0x34>)
 801b2be:	4a0c      	ldr	r2, [pc, #48]	@ (801b2f0 <global_stdio_init.part.0+0x38>)
 801b2c0:	601a      	str	r2, [r3, #0]
 801b2c2:	4620      	mov	r0, r4
 801b2c4:	2200      	movs	r2, #0
 801b2c6:	2104      	movs	r1, #4
 801b2c8:	f7ff ff94 	bl	801b1f4 <std>
 801b2cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b2d0:	2201      	movs	r2, #1
 801b2d2:	2109      	movs	r1, #9
 801b2d4:	f7ff ff8e 	bl	801b1f4 <std>
 801b2d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b2dc:	2202      	movs	r2, #2
 801b2de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2e2:	2112      	movs	r1, #18
 801b2e4:	f7ff bf86 	b.w	801b1f4 <std>
 801b2e8:	24048fc8 	.word	0x24048fc8
 801b2ec:	24048e90 	.word	0x24048e90
 801b2f0:	0801b261 	.word	0x0801b261

0801b2f4 <__sfp_lock_acquire>:
 801b2f4:	4801      	ldr	r0, [pc, #4]	@ (801b2fc <__sfp_lock_acquire+0x8>)
 801b2f6:	f000 b932 	b.w	801b55e <__retarget_lock_acquire_recursive>
 801b2fa:	bf00      	nop
 801b2fc:	24048fd1 	.word	0x24048fd1

0801b300 <__sfp_lock_release>:
 801b300:	4801      	ldr	r0, [pc, #4]	@ (801b308 <__sfp_lock_release+0x8>)
 801b302:	f000 b92d 	b.w	801b560 <__retarget_lock_release_recursive>
 801b306:	bf00      	nop
 801b308:	24048fd1 	.word	0x24048fd1

0801b30c <__sinit>:
 801b30c:	b510      	push	{r4, lr}
 801b30e:	4604      	mov	r4, r0
 801b310:	f7ff fff0 	bl	801b2f4 <__sfp_lock_acquire>
 801b314:	6a23      	ldr	r3, [r4, #32]
 801b316:	b11b      	cbz	r3, 801b320 <__sinit+0x14>
 801b318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b31c:	f7ff bff0 	b.w	801b300 <__sfp_lock_release>
 801b320:	4b04      	ldr	r3, [pc, #16]	@ (801b334 <__sinit+0x28>)
 801b322:	6223      	str	r3, [r4, #32]
 801b324:	4b04      	ldr	r3, [pc, #16]	@ (801b338 <__sinit+0x2c>)
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d1f5      	bne.n	801b318 <__sinit+0xc>
 801b32c:	f7ff ffc4 	bl	801b2b8 <global_stdio_init.part.0>
 801b330:	e7f2      	b.n	801b318 <__sinit+0xc>
 801b332:	bf00      	nop
 801b334:	0801b279 	.word	0x0801b279
 801b338:	24048fc8 	.word	0x24048fc8

0801b33c <_fwalk_sglue>:
 801b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b340:	4607      	mov	r7, r0
 801b342:	4688      	mov	r8, r1
 801b344:	4614      	mov	r4, r2
 801b346:	2600      	movs	r6, #0
 801b348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b34c:	f1b9 0901 	subs.w	r9, r9, #1
 801b350:	d505      	bpl.n	801b35e <_fwalk_sglue+0x22>
 801b352:	6824      	ldr	r4, [r4, #0]
 801b354:	2c00      	cmp	r4, #0
 801b356:	d1f7      	bne.n	801b348 <_fwalk_sglue+0xc>
 801b358:	4630      	mov	r0, r6
 801b35a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b35e:	89ab      	ldrh	r3, [r5, #12]
 801b360:	2b01      	cmp	r3, #1
 801b362:	d907      	bls.n	801b374 <_fwalk_sglue+0x38>
 801b364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b368:	3301      	adds	r3, #1
 801b36a:	d003      	beq.n	801b374 <_fwalk_sglue+0x38>
 801b36c:	4629      	mov	r1, r5
 801b36e:	4638      	mov	r0, r7
 801b370:	47c0      	blx	r8
 801b372:	4306      	orrs	r6, r0
 801b374:	3568      	adds	r5, #104	@ 0x68
 801b376:	e7e9      	b.n	801b34c <_fwalk_sglue+0x10>

0801b378 <siprintf>:
 801b378:	b40e      	push	{r1, r2, r3}
 801b37a:	b510      	push	{r4, lr}
 801b37c:	b09d      	sub	sp, #116	@ 0x74
 801b37e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b380:	9002      	str	r0, [sp, #8]
 801b382:	9006      	str	r0, [sp, #24]
 801b384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b388:	480a      	ldr	r0, [pc, #40]	@ (801b3b4 <siprintf+0x3c>)
 801b38a:	9107      	str	r1, [sp, #28]
 801b38c:	9104      	str	r1, [sp, #16]
 801b38e:	490a      	ldr	r1, [pc, #40]	@ (801b3b8 <siprintf+0x40>)
 801b390:	f853 2b04 	ldr.w	r2, [r3], #4
 801b394:	9105      	str	r1, [sp, #20]
 801b396:	2400      	movs	r4, #0
 801b398:	a902      	add	r1, sp, #8
 801b39a:	6800      	ldr	r0, [r0, #0]
 801b39c:	9301      	str	r3, [sp, #4]
 801b39e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b3a0:	f001 fafc 	bl	801c99c <_svfiprintf_r>
 801b3a4:	9b02      	ldr	r3, [sp, #8]
 801b3a6:	701c      	strb	r4, [r3, #0]
 801b3a8:	b01d      	add	sp, #116	@ 0x74
 801b3aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b3ae:	b003      	add	sp, #12
 801b3b0:	4770      	bx	lr
 801b3b2:	bf00      	nop
 801b3b4:	24000350 	.word	0x24000350
 801b3b8:	ffff0208 	.word	0xffff0208

0801b3bc <__sread>:
 801b3bc:	b510      	push	{r4, lr}
 801b3be:	460c      	mov	r4, r1
 801b3c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3c4:	f000 f86c 	bl	801b4a0 <_read_r>
 801b3c8:	2800      	cmp	r0, #0
 801b3ca:	bfab      	itete	ge
 801b3cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b3ce:	89a3      	ldrhlt	r3, [r4, #12]
 801b3d0:	181b      	addge	r3, r3, r0
 801b3d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b3d6:	bfac      	ite	ge
 801b3d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b3da:	81a3      	strhlt	r3, [r4, #12]
 801b3dc:	bd10      	pop	{r4, pc}

0801b3de <__swrite>:
 801b3de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3e2:	461f      	mov	r7, r3
 801b3e4:	898b      	ldrh	r3, [r1, #12]
 801b3e6:	05db      	lsls	r3, r3, #23
 801b3e8:	4605      	mov	r5, r0
 801b3ea:	460c      	mov	r4, r1
 801b3ec:	4616      	mov	r6, r2
 801b3ee:	d505      	bpl.n	801b3fc <__swrite+0x1e>
 801b3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3f4:	2302      	movs	r3, #2
 801b3f6:	2200      	movs	r2, #0
 801b3f8:	f000 f840 	bl	801b47c <_lseek_r>
 801b3fc:	89a3      	ldrh	r3, [r4, #12]
 801b3fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b406:	81a3      	strh	r3, [r4, #12]
 801b408:	4632      	mov	r2, r6
 801b40a:	463b      	mov	r3, r7
 801b40c:	4628      	mov	r0, r5
 801b40e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b412:	f000 b867 	b.w	801b4e4 <_write_r>

0801b416 <__sseek>:
 801b416:	b510      	push	{r4, lr}
 801b418:	460c      	mov	r4, r1
 801b41a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b41e:	f000 f82d 	bl	801b47c <_lseek_r>
 801b422:	1c43      	adds	r3, r0, #1
 801b424:	89a3      	ldrh	r3, [r4, #12]
 801b426:	bf15      	itete	ne
 801b428:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b42a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b42e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b432:	81a3      	strheq	r3, [r4, #12]
 801b434:	bf18      	it	ne
 801b436:	81a3      	strhne	r3, [r4, #12]
 801b438:	bd10      	pop	{r4, pc}

0801b43a <__sclose>:
 801b43a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b43e:	f000 b80d 	b.w	801b45c <_close_r>

0801b442 <memset>:
 801b442:	4402      	add	r2, r0
 801b444:	4603      	mov	r3, r0
 801b446:	4293      	cmp	r3, r2
 801b448:	d100      	bne.n	801b44c <memset+0xa>
 801b44a:	4770      	bx	lr
 801b44c:	f803 1b01 	strb.w	r1, [r3], #1
 801b450:	e7f9      	b.n	801b446 <memset+0x4>
	...

0801b454 <_localeconv_r>:
 801b454:	4800      	ldr	r0, [pc, #0]	@ (801b458 <_localeconv_r+0x4>)
 801b456:	4770      	bx	lr
 801b458:	24000490 	.word	0x24000490

0801b45c <_close_r>:
 801b45c:	b538      	push	{r3, r4, r5, lr}
 801b45e:	4d06      	ldr	r5, [pc, #24]	@ (801b478 <_close_r+0x1c>)
 801b460:	2300      	movs	r3, #0
 801b462:	4604      	mov	r4, r0
 801b464:	4608      	mov	r0, r1
 801b466:	602b      	str	r3, [r5, #0]
 801b468:	f7e7 f8da 	bl	8002620 <_close>
 801b46c:	1c43      	adds	r3, r0, #1
 801b46e:	d102      	bne.n	801b476 <_close_r+0x1a>
 801b470:	682b      	ldr	r3, [r5, #0]
 801b472:	b103      	cbz	r3, 801b476 <_close_r+0x1a>
 801b474:	6023      	str	r3, [r4, #0]
 801b476:	bd38      	pop	{r3, r4, r5, pc}
 801b478:	24048fcc 	.word	0x24048fcc

0801b47c <_lseek_r>:
 801b47c:	b538      	push	{r3, r4, r5, lr}
 801b47e:	4d07      	ldr	r5, [pc, #28]	@ (801b49c <_lseek_r+0x20>)
 801b480:	4604      	mov	r4, r0
 801b482:	4608      	mov	r0, r1
 801b484:	4611      	mov	r1, r2
 801b486:	2200      	movs	r2, #0
 801b488:	602a      	str	r2, [r5, #0]
 801b48a:	461a      	mov	r2, r3
 801b48c:	f7e7 f8ef 	bl	800266e <_lseek>
 801b490:	1c43      	adds	r3, r0, #1
 801b492:	d102      	bne.n	801b49a <_lseek_r+0x1e>
 801b494:	682b      	ldr	r3, [r5, #0]
 801b496:	b103      	cbz	r3, 801b49a <_lseek_r+0x1e>
 801b498:	6023      	str	r3, [r4, #0]
 801b49a:	bd38      	pop	{r3, r4, r5, pc}
 801b49c:	24048fcc 	.word	0x24048fcc

0801b4a0 <_read_r>:
 801b4a0:	b538      	push	{r3, r4, r5, lr}
 801b4a2:	4d07      	ldr	r5, [pc, #28]	@ (801b4c0 <_read_r+0x20>)
 801b4a4:	4604      	mov	r4, r0
 801b4a6:	4608      	mov	r0, r1
 801b4a8:	4611      	mov	r1, r2
 801b4aa:	2200      	movs	r2, #0
 801b4ac:	602a      	str	r2, [r5, #0]
 801b4ae:	461a      	mov	r2, r3
 801b4b0:	f7e7 f87d 	bl	80025ae <_read>
 801b4b4:	1c43      	adds	r3, r0, #1
 801b4b6:	d102      	bne.n	801b4be <_read_r+0x1e>
 801b4b8:	682b      	ldr	r3, [r5, #0]
 801b4ba:	b103      	cbz	r3, 801b4be <_read_r+0x1e>
 801b4bc:	6023      	str	r3, [r4, #0]
 801b4be:	bd38      	pop	{r3, r4, r5, pc}
 801b4c0:	24048fcc 	.word	0x24048fcc

0801b4c4 <_sbrk_r>:
 801b4c4:	b538      	push	{r3, r4, r5, lr}
 801b4c6:	4d06      	ldr	r5, [pc, #24]	@ (801b4e0 <_sbrk_r+0x1c>)
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	4604      	mov	r4, r0
 801b4cc:	4608      	mov	r0, r1
 801b4ce:	602b      	str	r3, [r5, #0]
 801b4d0:	f7e7 f8da 	bl	8002688 <_sbrk>
 801b4d4:	1c43      	adds	r3, r0, #1
 801b4d6:	d102      	bne.n	801b4de <_sbrk_r+0x1a>
 801b4d8:	682b      	ldr	r3, [r5, #0]
 801b4da:	b103      	cbz	r3, 801b4de <_sbrk_r+0x1a>
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	bd38      	pop	{r3, r4, r5, pc}
 801b4e0:	24048fcc 	.word	0x24048fcc

0801b4e4 <_write_r>:
 801b4e4:	b538      	push	{r3, r4, r5, lr}
 801b4e6:	4d07      	ldr	r5, [pc, #28]	@ (801b504 <_write_r+0x20>)
 801b4e8:	4604      	mov	r4, r0
 801b4ea:	4608      	mov	r0, r1
 801b4ec:	4611      	mov	r1, r2
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	602a      	str	r2, [r5, #0]
 801b4f2:	461a      	mov	r2, r3
 801b4f4:	f7e7 f878 	bl	80025e8 <_write>
 801b4f8:	1c43      	adds	r3, r0, #1
 801b4fa:	d102      	bne.n	801b502 <_write_r+0x1e>
 801b4fc:	682b      	ldr	r3, [r5, #0]
 801b4fe:	b103      	cbz	r3, 801b502 <_write_r+0x1e>
 801b500:	6023      	str	r3, [r4, #0]
 801b502:	bd38      	pop	{r3, r4, r5, pc}
 801b504:	24048fcc 	.word	0x24048fcc

0801b508 <__errno>:
 801b508:	4b01      	ldr	r3, [pc, #4]	@ (801b510 <__errno+0x8>)
 801b50a:	6818      	ldr	r0, [r3, #0]
 801b50c:	4770      	bx	lr
 801b50e:	bf00      	nop
 801b510:	24000350 	.word	0x24000350

0801b514 <__libc_init_array>:
 801b514:	b570      	push	{r4, r5, r6, lr}
 801b516:	4d0d      	ldr	r5, [pc, #52]	@ (801b54c <__libc_init_array+0x38>)
 801b518:	4c0d      	ldr	r4, [pc, #52]	@ (801b550 <__libc_init_array+0x3c>)
 801b51a:	1b64      	subs	r4, r4, r5
 801b51c:	10a4      	asrs	r4, r4, #2
 801b51e:	2600      	movs	r6, #0
 801b520:	42a6      	cmp	r6, r4
 801b522:	d109      	bne.n	801b538 <__libc_init_array+0x24>
 801b524:	4d0b      	ldr	r5, [pc, #44]	@ (801b554 <__libc_init_array+0x40>)
 801b526:	4c0c      	ldr	r4, [pc, #48]	@ (801b558 <__libc_init_array+0x44>)
 801b528:	f001 ff38 	bl	801d39c <_init>
 801b52c:	1b64      	subs	r4, r4, r5
 801b52e:	10a4      	asrs	r4, r4, #2
 801b530:	2600      	movs	r6, #0
 801b532:	42a6      	cmp	r6, r4
 801b534:	d105      	bne.n	801b542 <__libc_init_array+0x2e>
 801b536:	bd70      	pop	{r4, r5, r6, pc}
 801b538:	f855 3b04 	ldr.w	r3, [r5], #4
 801b53c:	4798      	blx	r3
 801b53e:	3601      	adds	r6, #1
 801b540:	e7ee      	b.n	801b520 <__libc_init_array+0xc>
 801b542:	f855 3b04 	ldr.w	r3, [r5], #4
 801b546:	4798      	blx	r3
 801b548:	3601      	adds	r6, #1
 801b54a:	e7f2      	b.n	801b532 <__libc_init_array+0x1e>
 801b54c:	0801df9c 	.word	0x0801df9c
 801b550:	0801df9c 	.word	0x0801df9c
 801b554:	0801df9c 	.word	0x0801df9c
 801b558:	0801dfa0 	.word	0x0801dfa0

0801b55c <__retarget_lock_init_recursive>:
 801b55c:	4770      	bx	lr

0801b55e <__retarget_lock_acquire_recursive>:
 801b55e:	4770      	bx	lr

0801b560 <__retarget_lock_release_recursive>:
 801b560:	4770      	bx	lr

0801b562 <strcpy>:
 801b562:	4603      	mov	r3, r0
 801b564:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b568:	f803 2b01 	strb.w	r2, [r3], #1
 801b56c:	2a00      	cmp	r2, #0
 801b56e:	d1f9      	bne.n	801b564 <strcpy+0x2>
 801b570:	4770      	bx	lr

0801b572 <memcpy>:
 801b572:	440a      	add	r2, r1
 801b574:	4291      	cmp	r1, r2
 801b576:	f100 33ff 	add.w	r3, r0, #4294967295
 801b57a:	d100      	bne.n	801b57e <memcpy+0xc>
 801b57c:	4770      	bx	lr
 801b57e:	b510      	push	{r4, lr}
 801b580:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b584:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b588:	4291      	cmp	r1, r2
 801b58a:	d1f9      	bne.n	801b580 <memcpy+0xe>
 801b58c:	bd10      	pop	{r4, pc}

0801b58e <quorem>:
 801b58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b592:	6903      	ldr	r3, [r0, #16]
 801b594:	690c      	ldr	r4, [r1, #16]
 801b596:	42a3      	cmp	r3, r4
 801b598:	4607      	mov	r7, r0
 801b59a:	db7e      	blt.n	801b69a <quorem+0x10c>
 801b59c:	3c01      	subs	r4, #1
 801b59e:	f101 0814 	add.w	r8, r1, #20
 801b5a2:	00a3      	lsls	r3, r4, #2
 801b5a4:	f100 0514 	add.w	r5, r0, #20
 801b5a8:	9300      	str	r3, [sp, #0]
 801b5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5ae:	9301      	str	r3, [sp, #4]
 801b5b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5b8:	3301      	adds	r3, #1
 801b5ba:	429a      	cmp	r2, r3
 801b5bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b5c0:	fbb2 f6f3 	udiv	r6, r2, r3
 801b5c4:	d32e      	bcc.n	801b624 <quorem+0x96>
 801b5c6:	f04f 0a00 	mov.w	sl, #0
 801b5ca:	46c4      	mov	ip, r8
 801b5cc:	46ae      	mov	lr, r5
 801b5ce:	46d3      	mov	fp, sl
 801b5d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b5d4:	b298      	uxth	r0, r3
 801b5d6:	fb06 a000 	mla	r0, r6, r0, sl
 801b5da:	0c02      	lsrs	r2, r0, #16
 801b5dc:	0c1b      	lsrs	r3, r3, #16
 801b5de:	fb06 2303 	mla	r3, r6, r3, r2
 801b5e2:	f8de 2000 	ldr.w	r2, [lr]
 801b5e6:	b280      	uxth	r0, r0
 801b5e8:	b292      	uxth	r2, r2
 801b5ea:	1a12      	subs	r2, r2, r0
 801b5ec:	445a      	add	r2, fp
 801b5ee:	f8de 0000 	ldr.w	r0, [lr]
 801b5f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b5f6:	b29b      	uxth	r3, r3
 801b5f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b5fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b600:	b292      	uxth	r2, r2
 801b602:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b606:	45e1      	cmp	r9, ip
 801b608:	f84e 2b04 	str.w	r2, [lr], #4
 801b60c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b610:	d2de      	bcs.n	801b5d0 <quorem+0x42>
 801b612:	9b00      	ldr	r3, [sp, #0]
 801b614:	58eb      	ldr	r3, [r5, r3]
 801b616:	b92b      	cbnz	r3, 801b624 <quorem+0x96>
 801b618:	9b01      	ldr	r3, [sp, #4]
 801b61a:	3b04      	subs	r3, #4
 801b61c:	429d      	cmp	r5, r3
 801b61e:	461a      	mov	r2, r3
 801b620:	d32f      	bcc.n	801b682 <quorem+0xf4>
 801b622:	613c      	str	r4, [r7, #16]
 801b624:	4638      	mov	r0, r7
 801b626:	f001 f855 	bl	801c6d4 <__mcmp>
 801b62a:	2800      	cmp	r0, #0
 801b62c:	db25      	blt.n	801b67a <quorem+0xec>
 801b62e:	4629      	mov	r1, r5
 801b630:	2000      	movs	r0, #0
 801b632:	f858 2b04 	ldr.w	r2, [r8], #4
 801b636:	f8d1 c000 	ldr.w	ip, [r1]
 801b63a:	fa1f fe82 	uxth.w	lr, r2
 801b63e:	fa1f f38c 	uxth.w	r3, ip
 801b642:	eba3 030e 	sub.w	r3, r3, lr
 801b646:	4403      	add	r3, r0
 801b648:	0c12      	lsrs	r2, r2, #16
 801b64a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b64e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b652:	b29b      	uxth	r3, r3
 801b654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b658:	45c1      	cmp	r9, r8
 801b65a:	f841 3b04 	str.w	r3, [r1], #4
 801b65e:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b662:	d2e6      	bcs.n	801b632 <quorem+0xa4>
 801b664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b668:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b66c:	b922      	cbnz	r2, 801b678 <quorem+0xea>
 801b66e:	3b04      	subs	r3, #4
 801b670:	429d      	cmp	r5, r3
 801b672:	461a      	mov	r2, r3
 801b674:	d30b      	bcc.n	801b68e <quorem+0x100>
 801b676:	613c      	str	r4, [r7, #16]
 801b678:	3601      	adds	r6, #1
 801b67a:	4630      	mov	r0, r6
 801b67c:	b003      	add	sp, #12
 801b67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b682:	6812      	ldr	r2, [r2, #0]
 801b684:	3b04      	subs	r3, #4
 801b686:	2a00      	cmp	r2, #0
 801b688:	d1cb      	bne.n	801b622 <quorem+0x94>
 801b68a:	3c01      	subs	r4, #1
 801b68c:	e7c6      	b.n	801b61c <quorem+0x8e>
 801b68e:	6812      	ldr	r2, [r2, #0]
 801b690:	3b04      	subs	r3, #4
 801b692:	2a00      	cmp	r2, #0
 801b694:	d1ef      	bne.n	801b676 <quorem+0xe8>
 801b696:	3c01      	subs	r4, #1
 801b698:	e7ea      	b.n	801b670 <quorem+0xe2>
 801b69a:	2000      	movs	r0, #0
 801b69c:	e7ee      	b.n	801b67c <quorem+0xee>
	...

0801b6a0 <_dtoa_r>:
 801b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6a4:	ed2d 8b02 	vpush	{d8}
 801b6a8:	69c7      	ldr	r7, [r0, #28]
 801b6aa:	b091      	sub	sp, #68	@ 0x44
 801b6ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b6b0:	ec55 4b10 	vmov	r4, r5, d0
 801b6b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801b6b6:	9107      	str	r1, [sp, #28]
 801b6b8:	4681      	mov	r9, r0
 801b6ba:	9209      	str	r2, [sp, #36]	@ 0x24
 801b6bc:	930d      	str	r3, [sp, #52]	@ 0x34
 801b6be:	b97f      	cbnz	r7, 801b6e0 <_dtoa_r+0x40>
 801b6c0:	2010      	movs	r0, #16
 801b6c2:	f7ff f8ab 	bl	801a81c <malloc>
 801b6c6:	4602      	mov	r2, r0
 801b6c8:	f8c9 001c 	str.w	r0, [r9, #28]
 801b6cc:	b920      	cbnz	r0, 801b6d8 <_dtoa_r+0x38>
 801b6ce:	4ba0      	ldr	r3, [pc, #640]	@ (801b950 <_dtoa_r+0x2b0>)
 801b6d0:	21ef      	movs	r1, #239	@ 0xef
 801b6d2:	48a0      	ldr	r0, [pc, #640]	@ (801b954 <_dtoa_r+0x2b4>)
 801b6d4:	f001 fb24 	bl	801cd20 <__assert_func>
 801b6d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b6dc:	6007      	str	r7, [r0, #0]
 801b6de:	60c7      	str	r7, [r0, #12]
 801b6e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b6e4:	6819      	ldr	r1, [r3, #0]
 801b6e6:	b159      	cbz	r1, 801b700 <_dtoa_r+0x60>
 801b6e8:	685a      	ldr	r2, [r3, #4]
 801b6ea:	604a      	str	r2, [r1, #4]
 801b6ec:	2301      	movs	r3, #1
 801b6ee:	4093      	lsls	r3, r2
 801b6f0:	608b      	str	r3, [r1, #8]
 801b6f2:	4648      	mov	r0, r9
 801b6f4:	f000 fdbc 	bl	801c270 <_Bfree>
 801b6f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b6fc:	2200      	movs	r2, #0
 801b6fe:	601a      	str	r2, [r3, #0]
 801b700:	1e2b      	subs	r3, r5, #0
 801b702:	bfbb      	ittet	lt
 801b704:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b708:	9303      	strlt	r3, [sp, #12]
 801b70a:	2300      	movge	r3, #0
 801b70c:	2201      	movlt	r2, #1
 801b70e:	bfac      	ite	ge
 801b710:	6033      	strge	r3, [r6, #0]
 801b712:	6032      	strlt	r2, [r6, #0]
 801b714:	4b90      	ldr	r3, [pc, #576]	@ (801b958 <_dtoa_r+0x2b8>)
 801b716:	9e03      	ldr	r6, [sp, #12]
 801b718:	43b3      	bics	r3, r6
 801b71a:	d110      	bne.n	801b73e <_dtoa_r+0x9e>
 801b71c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b71e:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b722:	6013      	str	r3, [r2, #0]
 801b724:	f3c6 0313 	ubfx	r3, r6, #0, #20
 801b728:	4323      	orrs	r3, r4
 801b72a:	f000 84e6 	beq.w	801c0fa <_dtoa_r+0xa5a>
 801b72e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b730:	4f8a      	ldr	r7, [pc, #552]	@ (801b95c <_dtoa_r+0x2bc>)
 801b732:	2b00      	cmp	r3, #0
 801b734:	f000 84e8 	beq.w	801c108 <_dtoa_r+0xa68>
 801b738:	1cfb      	adds	r3, r7, #3
 801b73a:	f000 bce3 	b.w	801c104 <_dtoa_r+0xa64>
 801b73e:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b742:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b74a:	d10a      	bne.n	801b762 <_dtoa_r+0xc2>
 801b74c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b74e:	2301      	movs	r3, #1
 801b750:	6013      	str	r3, [r2, #0]
 801b752:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b754:	b113      	cbz	r3, 801b75c <_dtoa_r+0xbc>
 801b756:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801b758:	4b81      	ldr	r3, [pc, #516]	@ (801b960 <_dtoa_r+0x2c0>)
 801b75a:	6013      	str	r3, [r2, #0]
 801b75c:	4f81      	ldr	r7, [pc, #516]	@ (801b964 <_dtoa_r+0x2c4>)
 801b75e:	f000 bcd3 	b.w	801c108 <_dtoa_r+0xa68>
 801b762:	aa0e      	add	r2, sp, #56	@ 0x38
 801b764:	a90f      	add	r1, sp, #60	@ 0x3c
 801b766:	4648      	mov	r0, r9
 801b768:	eeb0 0b48 	vmov.f64	d0, d8
 801b76c:	f001 f862 	bl	801c834 <__d2b>
 801b770:	f3c6 530a 	ubfx	r3, r6, #20, #11
 801b774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b776:	9001      	str	r0, [sp, #4]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d045      	beq.n	801b808 <_dtoa_r+0x168>
 801b77c:	eeb0 7b48 	vmov.f64	d7, d8
 801b780:	ee18 1a90 	vmov	r1, s17
 801b784:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b788:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801b78c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 801b790:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801b794:	2500      	movs	r5, #0
 801b796:	ee07 1a90 	vmov	s15, r1
 801b79a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801b79e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801b938 <_dtoa_r+0x298>
 801b7a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b7a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 801b940 <_dtoa_r+0x2a0>
 801b7aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b7ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 801b948 <_dtoa_r+0x2a8>
 801b7b2:	ee07 3a90 	vmov	s15, r3
 801b7b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b7ba:	eeb0 7b46 	vmov.f64	d7, d6
 801b7be:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b7c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b7c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7ce:	ee16 8a90 	vmov	r8, s13
 801b7d2:	d508      	bpl.n	801b7e6 <_dtoa_r+0x146>
 801b7d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b7d8:	eeb4 6b47 	vcmp.f64	d6, d7
 801b7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7e0:	bf18      	it	ne
 801b7e2:	f108 38ff 	addne.w	r8, r8, #4294967295
 801b7e6:	f1b8 0f16 	cmp.w	r8, #22
 801b7ea:	d82b      	bhi.n	801b844 <_dtoa_r+0x1a4>
 801b7ec:	495e      	ldr	r1, [pc, #376]	@ (801b968 <_dtoa_r+0x2c8>)
 801b7ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 801b7f2:	ed91 7b00 	vldr	d7, [r1]
 801b7f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7fe:	d501      	bpl.n	801b804 <_dtoa_r+0x164>
 801b800:	f108 38ff 	add.w	r8, r8, #4294967295
 801b804:	2100      	movs	r1, #0
 801b806:	e01e      	b.n	801b846 <_dtoa_r+0x1a6>
 801b808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b80a:	4413      	add	r3, r2
 801b80c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 801b810:	2920      	cmp	r1, #32
 801b812:	bfc1      	itttt	gt
 801b814:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 801b818:	408e      	lslgt	r6, r1
 801b81a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801b81e:	fa24 f101 	lsrgt.w	r1, r4, r1
 801b822:	bfd6      	itet	le
 801b824:	f1c1 0120 	rsble	r1, r1, #32
 801b828:	4331      	orrgt	r1, r6
 801b82a:	fa04 f101 	lslle.w	r1, r4, r1
 801b82e:	ee07 1a90 	vmov	s15, r1
 801b832:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b836:	3b01      	subs	r3, #1
 801b838:	ee17 1a90 	vmov	r1, s15
 801b83c:	2501      	movs	r5, #1
 801b83e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801b842:	e7a8      	b.n	801b796 <_dtoa_r+0xf6>
 801b844:	2101      	movs	r1, #1
 801b846:	1ad2      	subs	r2, r2, r3
 801b848:	1e53      	subs	r3, r2, #1
 801b84a:	9306      	str	r3, [sp, #24]
 801b84c:	bf45      	ittet	mi
 801b84e:	f1c2 0301 	rsbmi	r3, r2, #1
 801b852:	9304      	strmi	r3, [sp, #16]
 801b854:	2300      	movpl	r3, #0
 801b856:	2300      	movmi	r3, #0
 801b858:	bf4c      	ite	mi
 801b85a:	9306      	strmi	r3, [sp, #24]
 801b85c:	9304      	strpl	r3, [sp, #16]
 801b85e:	f1b8 0f00 	cmp.w	r8, #0
 801b862:	910c      	str	r1, [sp, #48]	@ 0x30
 801b864:	db18      	blt.n	801b898 <_dtoa_r+0x1f8>
 801b866:	9b06      	ldr	r3, [sp, #24]
 801b868:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801b86c:	4443      	add	r3, r8
 801b86e:	9306      	str	r3, [sp, #24]
 801b870:	2300      	movs	r3, #0
 801b872:	9a07      	ldr	r2, [sp, #28]
 801b874:	2a09      	cmp	r2, #9
 801b876:	d845      	bhi.n	801b904 <_dtoa_r+0x264>
 801b878:	2a05      	cmp	r2, #5
 801b87a:	bfc4      	itt	gt
 801b87c:	3a04      	subgt	r2, #4
 801b87e:	9207      	strgt	r2, [sp, #28]
 801b880:	9a07      	ldr	r2, [sp, #28]
 801b882:	f1a2 0202 	sub.w	r2, r2, #2
 801b886:	bfcc      	ite	gt
 801b888:	2400      	movgt	r4, #0
 801b88a:	2401      	movle	r4, #1
 801b88c:	2a03      	cmp	r2, #3
 801b88e:	d844      	bhi.n	801b91a <_dtoa_r+0x27a>
 801b890:	e8df f002 	tbb	[pc, r2]
 801b894:	0b173634 	.word	0x0b173634
 801b898:	9b04      	ldr	r3, [sp, #16]
 801b89a:	2200      	movs	r2, #0
 801b89c:	eba3 0308 	sub.w	r3, r3, r8
 801b8a0:	9304      	str	r3, [sp, #16]
 801b8a2:	920a      	str	r2, [sp, #40]	@ 0x28
 801b8a4:	f1c8 0300 	rsb	r3, r8, #0
 801b8a8:	e7e3      	b.n	801b872 <_dtoa_r+0x1d2>
 801b8aa:	2201      	movs	r2, #1
 801b8ac:	9208      	str	r2, [sp, #32]
 801b8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8b0:	eb08 0b02 	add.w	fp, r8, r2
 801b8b4:	f10b 0a01 	add.w	sl, fp, #1
 801b8b8:	4652      	mov	r2, sl
 801b8ba:	2a01      	cmp	r2, #1
 801b8bc:	bfb8      	it	lt
 801b8be:	2201      	movlt	r2, #1
 801b8c0:	e006      	b.n	801b8d0 <_dtoa_r+0x230>
 801b8c2:	2201      	movs	r2, #1
 801b8c4:	9208      	str	r2, [sp, #32]
 801b8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b8c8:	2a00      	cmp	r2, #0
 801b8ca:	dd29      	ble.n	801b920 <_dtoa_r+0x280>
 801b8cc:	4693      	mov	fp, r2
 801b8ce:	4692      	mov	sl, r2
 801b8d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801b8d4:	2100      	movs	r1, #0
 801b8d6:	2004      	movs	r0, #4
 801b8d8:	f100 0614 	add.w	r6, r0, #20
 801b8dc:	4296      	cmp	r6, r2
 801b8de:	d926      	bls.n	801b92e <_dtoa_r+0x28e>
 801b8e0:	6079      	str	r1, [r7, #4]
 801b8e2:	4648      	mov	r0, r9
 801b8e4:	9305      	str	r3, [sp, #20]
 801b8e6:	f000 fc83 	bl	801c1f0 <_Balloc>
 801b8ea:	9b05      	ldr	r3, [sp, #20]
 801b8ec:	4607      	mov	r7, r0
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	d13e      	bne.n	801b970 <_dtoa_r+0x2d0>
 801b8f2:	4b1e      	ldr	r3, [pc, #120]	@ (801b96c <_dtoa_r+0x2cc>)
 801b8f4:	4602      	mov	r2, r0
 801b8f6:	f240 11af 	movw	r1, #431	@ 0x1af
 801b8fa:	e6ea      	b.n	801b6d2 <_dtoa_r+0x32>
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	e7e1      	b.n	801b8c4 <_dtoa_r+0x224>
 801b900:	2200      	movs	r2, #0
 801b902:	e7d3      	b.n	801b8ac <_dtoa_r+0x20c>
 801b904:	2401      	movs	r4, #1
 801b906:	2200      	movs	r2, #0
 801b908:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801b90c:	f04f 3bff 	mov.w	fp, #4294967295
 801b910:	2100      	movs	r1, #0
 801b912:	46da      	mov	sl, fp
 801b914:	2212      	movs	r2, #18
 801b916:	9109      	str	r1, [sp, #36]	@ 0x24
 801b918:	e7da      	b.n	801b8d0 <_dtoa_r+0x230>
 801b91a:	2201      	movs	r2, #1
 801b91c:	9208      	str	r2, [sp, #32]
 801b91e:	e7f5      	b.n	801b90c <_dtoa_r+0x26c>
 801b920:	f04f 0b01 	mov.w	fp, #1
 801b924:	46da      	mov	sl, fp
 801b926:	465a      	mov	r2, fp
 801b928:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801b92c:	e7d0      	b.n	801b8d0 <_dtoa_r+0x230>
 801b92e:	3101      	adds	r1, #1
 801b930:	0040      	lsls	r0, r0, #1
 801b932:	e7d1      	b.n	801b8d8 <_dtoa_r+0x238>
 801b934:	f3af 8000 	nop.w
 801b938:	636f4361 	.word	0x636f4361
 801b93c:	3fd287a7 	.word	0x3fd287a7
 801b940:	8b60c8b3 	.word	0x8b60c8b3
 801b944:	3fc68a28 	.word	0x3fc68a28
 801b948:	509f79fb 	.word	0x509f79fb
 801b94c:	3fd34413 	.word	0x3fd34413
 801b950:	0801dc5d 	.word	0x0801dc5d
 801b954:	0801dc74 	.word	0x0801dc74
 801b958:	7ff00000 	.word	0x7ff00000
 801b95c:	0801dc59 	.word	0x0801dc59
 801b960:	0801dc2d 	.word	0x0801dc2d
 801b964:	0801dc2c 	.word	0x0801dc2c
 801b968:	0801ddc8 	.word	0x0801ddc8
 801b96c:	0801dccc 	.word	0x0801dccc
 801b970:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801b974:	f1ba 0f0e 	cmp.w	sl, #14
 801b978:	6010      	str	r0, [r2, #0]
 801b97a:	d86e      	bhi.n	801ba5a <_dtoa_r+0x3ba>
 801b97c:	2c00      	cmp	r4, #0
 801b97e:	d06c      	beq.n	801ba5a <_dtoa_r+0x3ba>
 801b980:	f1b8 0f00 	cmp.w	r8, #0
 801b984:	f340 80b4 	ble.w	801baf0 <_dtoa_r+0x450>
 801b988:	4ac8      	ldr	r2, [pc, #800]	@ (801bcac <_dtoa_r+0x60c>)
 801b98a:	f008 010f 	and.w	r1, r8, #15
 801b98e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801b992:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801b996:	ed92 7b00 	vldr	d7, [r2]
 801b99a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801b99e:	f000 809b 	beq.w	801bad8 <_dtoa_r+0x438>
 801b9a2:	4ac3      	ldr	r2, [pc, #780]	@ (801bcb0 <_dtoa_r+0x610>)
 801b9a4:	ed92 6b08 	vldr	d6, [r2, #32]
 801b9a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b9ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b9b0:	f001 010f 	and.w	r1, r1, #15
 801b9b4:	2203      	movs	r2, #3
 801b9b6:	48be      	ldr	r0, [pc, #760]	@ (801bcb0 <_dtoa_r+0x610>)
 801b9b8:	2900      	cmp	r1, #0
 801b9ba:	f040 808f 	bne.w	801badc <_dtoa_r+0x43c>
 801b9be:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b9c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b9c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b9ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b9cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b9d0:	2900      	cmp	r1, #0
 801b9d2:	f000 80b3 	beq.w	801bb3c <_dtoa_r+0x49c>
 801b9d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801b9da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9e2:	f140 80ab 	bpl.w	801bb3c <_dtoa_r+0x49c>
 801b9e6:	f1ba 0f00 	cmp.w	sl, #0
 801b9ea:	f000 80a7 	beq.w	801bb3c <_dtoa_r+0x49c>
 801b9ee:	f1bb 0f00 	cmp.w	fp, #0
 801b9f2:	dd30      	ble.n	801ba56 <_dtoa_r+0x3b6>
 801b9f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 801b9f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b9fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ba00:	f108 31ff 	add.w	r1, r8, #4294967295
 801ba04:	9105      	str	r1, [sp, #20]
 801ba06:	3201      	adds	r2, #1
 801ba08:	465c      	mov	r4, fp
 801ba0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ba0e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801ba12:	ee07 2a90 	vmov	s15, r2
 801ba16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ba1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ba1e:	ee15 2a90 	vmov	r2, s11
 801ba22:	ec51 0b15 	vmov	r0, r1, d5
 801ba26:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801ba2a:	2c00      	cmp	r4, #0
 801ba2c:	f040 808a 	bne.w	801bb44 <_dtoa_r+0x4a4>
 801ba30:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801ba34:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ba38:	ec41 0b17 	vmov	d7, r0, r1
 801ba3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba44:	f300 826a 	bgt.w	801bf1c <_dtoa_r+0x87c>
 801ba48:	eeb1 7b47 	vneg.f64	d7, d7
 801ba4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba54:	d423      	bmi.n	801ba9e <_dtoa_r+0x3fe>
 801ba56:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ba5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ba5c:	2a00      	cmp	r2, #0
 801ba5e:	f2c0 8129 	blt.w	801bcb4 <_dtoa_r+0x614>
 801ba62:	f1b8 0f0e 	cmp.w	r8, #14
 801ba66:	f300 8125 	bgt.w	801bcb4 <_dtoa_r+0x614>
 801ba6a:	4b90      	ldr	r3, [pc, #576]	@ (801bcac <_dtoa_r+0x60c>)
 801ba6c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ba70:	ed93 6b00 	vldr	d6, [r3]
 801ba74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	f280 80c8 	bge.w	801bc0c <_dtoa_r+0x56c>
 801ba7c:	f1ba 0f00 	cmp.w	sl, #0
 801ba80:	f300 80c4 	bgt.w	801bc0c <_dtoa_r+0x56c>
 801ba84:	d10b      	bne.n	801ba9e <_dtoa_r+0x3fe>
 801ba86:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801ba8a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801ba8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ba92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ba96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba9a:	f2c0 823c 	blt.w	801bf16 <_dtoa_r+0x876>
 801ba9e:	2400      	movs	r4, #0
 801baa0:	4625      	mov	r5, r4
 801baa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801baa4:	43db      	mvns	r3, r3
 801baa6:	9305      	str	r3, [sp, #20]
 801baa8:	463e      	mov	r6, r7
 801baaa:	f04f 0800 	mov.w	r8, #0
 801baae:	4621      	mov	r1, r4
 801bab0:	4648      	mov	r0, r9
 801bab2:	f000 fbdd 	bl	801c270 <_Bfree>
 801bab6:	2d00      	cmp	r5, #0
 801bab8:	f000 80a2 	beq.w	801bc00 <_dtoa_r+0x560>
 801babc:	f1b8 0f00 	cmp.w	r8, #0
 801bac0:	d005      	beq.n	801bace <_dtoa_r+0x42e>
 801bac2:	45a8      	cmp	r8, r5
 801bac4:	d003      	beq.n	801bace <_dtoa_r+0x42e>
 801bac6:	4641      	mov	r1, r8
 801bac8:	4648      	mov	r0, r9
 801baca:	f000 fbd1 	bl	801c270 <_Bfree>
 801bace:	4629      	mov	r1, r5
 801bad0:	4648      	mov	r0, r9
 801bad2:	f000 fbcd 	bl	801c270 <_Bfree>
 801bad6:	e093      	b.n	801bc00 <_dtoa_r+0x560>
 801bad8:	2202      	movs	r2, #2
 801bada:	e76c      	b.n	801b9b6 <_dtoa_r+0x316>
 801badc:	07cc      	lsls	r4, r1, #31
 801bade:	d504      	bpl.n	801baea <_dtoa_r+0x44a>
 801bae0:	ed90 6b00 	vldr	d6, [r0]
 801bae4:	3201      	adds	r2, #1
 801bae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801baea:	1049      	asrs	r1, r1, #1
 801baec:	3008      	adds	r0, #8
 801baee:	e763      	b.n	801b9b8 <_dtoa_r+0x318>
 801baf0:	d022      	beq.n	801bb38 <_dtoa_r+0x498>
 801baf2:	f1c8 0100 	rsb	r1, r8, #0
 801baf6:	4a6d      	ldr	r2, [pc, #436]	@ (801bcac <_dtoa_r+0x60c>)
 801baf8:	f001 000f 	and.w	r0, r1, #15
 801bafc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801bb00:	ed92 7b00 	vldr	d7, [r2]
 801bb04:	ee28 7b07 	vmul.f64	d7, d8, d7
 801bb08:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb0c:	4868      	ldr	r0, [pc, #416]	@ (801bcb0 <_dtoa_r+0x610>)
 801bb0e:	1109      	asrs	r1, r1, #4
 801bb10:	2400      	movs	r4, #0
 801bb12:	2202      	movs	r2, #2
 801bb14:	b929      	cbnz	r1, 801bb22 <_dtoa_r+0x482>
 801bb16:	2c00      	cmp	r4, #0
 801bb18:	f43f af57 	beq.w	801b9ca <_dtoa_r+0x32a>
 801bb1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb20:	e753      	b.n	801b9ca <_dtoa_r+0x32a>
 801bb22:	07ce      	lsls	r6, r1, #31
 801bb24:	d505      	bpl.n	801bb32 <_dtoa_r+0x492>
 801bb26:	ed90 6b00 	vldr	d6, [r0]
 801bb2a:	3201      	adds	r2, #1
 801bb2c:	2401      	movs	r4, #1
 801bb2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bb32:	1049      	asrs	r1, r1, #1
 801bb34:	3008      	adds	r0, #8
 801bb36:	e7ed      	b.n	801bb14 <_dtoa_r+0x474>
 801bb38:	2202      	movs	r2, #2
 801bb3a:	e746      	b.n	801b9ca <_dtoa_r+0x32a>
 801bb3c:	f8cd 8014 	str.w	r8, [sp, #20]
 801bb40:	4654      	mov	r4, sl
 801bb42:	e762      	b.n	801ba0a <_dtoa_r+0x36a>
 801bb44:	4a59      	ldr	r2, [pc, #356]	@ (801bcac <_dtoa_r+0x60c>)
 801bb46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801bb4a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801bb4e:	9a08      	ldr	r2, [sp, #32]
 801bb50:	ec41 0b17 	vmov	d7, r0, r1
 801bb54:	443c      	add	r4, r7
 801bb56:	b34a      	cbz	r2, 801bbac <_dtoa_r+0x50c>
 801bb58:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801bb5c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801bb60:	463e      	mov	r6, r7
 801bb62:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bb66:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801bb6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bb6e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bb72:	ee14 2a90 	vmov	r2, s9
 801bb76:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bb7a:	3230      	adds	r2, #48	@ 0x30
 801bb7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bb80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb88:	f806 2b01 	strb.w	r2, [r6], #1
 801bb8c:	d438      	bmi.n	801bc00 <_dtoa_r+0x560>
 801bb8e:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bb92:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb9a:	d46e      	bmi.n	801bc7a <_dtoa_r+0x5da>
 801bb9c:	42a6      	cmp	r6, r4
 801bb9e:	f43f af5a 	beq.w	801ba56 <_dtoa_r+0x3b6>
 801bba2:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bba6:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bbaa:	e7e0      	b.n	801bb6e <_dtoa_r+0x4ce>
 801bbac:	4621      	mov	r1, r4
 801bbae:	463e      	mov	r6, r7
 801bbb0:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bbb4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801bbb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bbbc:	ee14 2a90 	vmov	r2, s9
 801bbc0:	3230      	adds	r2, #48	@ 0x30
 801bbc2:	f806 2b01 	strb.w	r2, [r6], #1
 801bbc6:	42a6      	cmp	r6, r4
 801bbc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bbcc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bbd0:	d119      	bne.n	801bc06 <_dtoa_r+0x566>
 801bbd2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801bbd6:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bbda:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbe2:	dc4a      	bgt.n	801bc7a <_dtoa_r+0x5da>
 801bbe4:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bbe8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbf0:	f57f af31 	bpl.w	801ba56 <_dtoa_r+0x3b6>
 801bbf4:	460e      	mov	r6, r1
 801bbf6:	3901      	subs	r1, #1
 801bbf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bbfc:	2b30      	cmp	r3, #48	@ 0x30
 801bbfe:	d0f9      	beq.n	801bbf4 <_dtoa_r+0x554>
 801bc00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801bc04:	e027      	b.n	801bc56 <_dtoa_r+0x5b6>
 801bc06:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bc0a:	e7d5      	b.n	801bbb8 <_dtoa_r+0x518>
 801bc0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801bc14:	463e      	mov	r6, r7
 801bc16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bc1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bc1e:	ee15 3a10 	vmov	r3, s10
 801bc22:	3330      	adds	r3, #48	@ 0x30
 801bc24:	f806 3b01 	strb.w	r3, [r6], #1
 801bc28:	1bf3      	subs	r3, r6, r7
 801bc2a:	459a      	cmp	sl, r3
 801bc2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bc30:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bc34:	d132      	bne.n	801bc9c <_dtoa_r+0x5fc>
 801bc36:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bc3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc42:	dc18      	bgt.n	801bc76 <_dtoa_r+0x5d6>
 801bc44:	eeb4 7b46 	vcmp.f64	d7, d6
 801bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc4c:	d103      	bne.n	801bc56 <_dtoa_r+0x5b6>
 801bc4e:	ee15 3a10 	vmov	r3, s10
 801bc52:	07db      	lsls	r3, r3, #31
 801bc54:	d40f      	bmi.n	801bc76 <_dtoa_r+0x5d6>
 801bc56:	9901      	ldr	r1, [sp, #4]
 801bc58:	4648      	mov	r0, r9
 801bc5a:	f000 fb09 	bl	801c270 <_Bfree>
 801bc5e:	2300      	movs	r3, #0
 801bc60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bc62:	7033      	strb	r3, [r6, #0]
 801bc64:	f108 0301 	add.w	r3, r8, #1
 801bc68:	6013      	str	r3, [r2, #0]
 801bc6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	f000 824b 	beq.w	801c108 <_dtoa_r+0xa68>
 801bc72:	601e      	str	r6, [r3, #0]
 801bc74:	e248      	b.n	801c108 <_dtoa_r+0xa68>
 801bc76:	f8cd 8014 	str.w	r8, [sp, #20]
 801bc7a:	4633      	mov	r3, r6
 801bc7c:	461e      	mov	r6, r3
 801bc7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bc82:	2a39      	cmp	r2, #57	@ 0x39
 801bc84:	d106      	bne.n	801bc94 <_dtoa_r+0x5f4>
 801bc86:	429f      	cmp	r7, r3
 801bc88:	d1f8      	bne.n	801bc7c <_dtoa_r+0x5dc>
 801bc8a:	9a05      	ldr	r2, [sp, #20]
 801bc8c:	3201      	adds	r2, #1
 801bc8e:	9205      	str	r2, [sp, #20]
 801bc90:	2230      	movs	r2, #48	@ 0x30
 801bc92:	703a      	strb	r2, [r7, #0]
 801bc94:	781a      	ldrb	r2, [r3, #0]
 801bc96:	3201      	adds	r2, #1
 801bc98:	701a      	strb	r2, [r3, #0]
 801bc9a:	e7b1      	b.n	801bc00 <_dtoa_r+0x560>
 801bc9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bca0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801bca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca8:	d1b5      	bne.n	801bc16 <_dtoa_r+0x576>
 801bcaa:	e7d4      	b.n	801bc56 <_dtoa_r+0x5b6>
 801bcac:	0801ddc8 	.word	0x0801ddc8
 801bcb0:	0801dda0 	.word	0x0801dda0
 801bcb4:	9908      	ldr	r1, [sp, #32]
 801bcb6:	2900      	cmp	r1, #0
 801bcb8:	f000 80e9 	beq.w	801be8e <_dtoa_r+0x7ee>
 801bcbc:	9907      	ldr	r1, [sp, #28]
 801bcbe:	2901      	cmp	r1, #1
 801bcc0:	f300 80cb 	bgt.w	801be5a <_dtoa_r+0x7ba>
 801bcc4:	2d00      	cmp	r5, #0
 801bcc6:	f000 80c4 	beq.w	801be52 <_dtoa_r+0x7b2>
 801bcca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801bcce:	9e04      	ldr	r6, [sp, #16]
 801bcd0:	461c      	mov	r4, r3
 801bcd2:	9305      	str	r3, [sp, #20]
 801bcd4:	9b04      	ldr	r3, [sp, #16]
 801bcd6:	4413      	add	r3, r2
 801bcd8:	9304      	str	r3, [sp, #16]
 801bcda:	9b06      	ldr	r3, [sp, #24]
 801bcdc:	2101      	movs	r1, #1
 801bcde:	4413      	add	r3, r2
 801bce0:	4648      	mov	r0, r9
 801bce2:	9306      	str	r3, [sp, #24]
 801bce4:	f000 fb78 	bl	801c3d8 <__i2b>
 801bce8:	9b05      	ldr	r3, [sp, #20]
 801bcea:	4605      	mov	r5, r0
 801bcec:	b166      	cbz	r6, 801bd08 <_dtoa_r+0x668>
 801bcee:	9a06      	ldr	r2, [sp, #24]
 801bcf0:	2a00      	cmp	r2, #0
 801bcf2:	dd09      	ble.n	801bd08 <_dtoa_r+0x668>
 801bcf4:	42b2      	cmp	r2, r6
 801bcf6:	9904      	ldr	r1, [sp, #16]
 801bcf8:	bfa8      	it	ge
 801bcfa:	4632      	movge	r2, r6
 801bcfc:	1a89      	subs	r1, r1, r2
 801bcfe:	9104      	str	r1, [sp, #16]
 801bd00:	9906      	ldr	r1, [sp, #24]
 801bd02:	1ab6      	subs	r6, r6, r2
 801bd04:	1a8a      	subs	r2, r1, r2
 801bd06:	9206      	str	r2, [sp, #24]
 801bd08:	b30b      	cbz	r3, 801bd4e <_dtoa_r+0x6ae>
 801bd0a:	9a08      	ldr	r2, [sp, #32]
 801bd0c:	2a00      	cmp	r2, #0
 801bd0e:	f000 80c5 	beq.w	801be9c <_dtoa_r+0x7fc>
 801bd12:	2c00      	cmp	r4, #0
 801bd14:	f000 80bf 	beq.w	801be96 <_dtoa_r+0x7f6>
 801bd18:	4629      	mov	r1, r5
 801bd1a:	4622      	mov	r2, r4
 801bd1c:	4648      	mov	r0, r9
 801bd1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bd20:	f000 fc12 	bl	801c548 <__pow5mult>
 801bd24:	9a01      	ldr	r2, [sp, #4]
 801bd26:	4601      	mov	r1, r0
 801bd28:	4605      	mov	r5, r0
 801bd2a:	4648      	mov	r0, r9
 801bd2c:	f000 fb6a 	bl	801c404 <__multiply>
 801bd30:	9901      	ldr	r1, [sp, #4]
 801bd32:	9005      	str	r0, [sp, #20]
 801bd34:	4648      	mov	r0, r9
 801bd36:	f000 fa9b 	bl	801c270 <_Bfree>
 801bd3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bd3c:	1b1b      	subs	r3, r3, r4
 801bd3e:	f000 80b0 	beq.w	801bea2 <_dtoa_r+0x802>
 801bd42:	9905      	ldr	r1, [sp, #20]
 801bd44:	461a      	mov	r2, r3
 801bd46:	4648      	mov	r0, r9
 801bd48:	f000 fbfe 	bl	801c548 <__pow5mult>
 801bd4c:	9001      	str	r0, [sp, #4]
 801bd4e:	2101      	movs	r1, #1
 801bd50:	4648      	mov	r0, r9
 801bd52:	f000 fb41 	bl	801c3d8 <__i2b>
 801bd56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bd58:	4604      	mov	r4, r0
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	f000 81da 	beq.w	801c114 <_dtoa_r+0xa74>
 801bd60:	461a      	mov	r2, r3
 801bd62:	4601      	mov	r1, r0
 801bd64:	4648      	mov	r0, r9
 801bd66:	f000 fbef 	bl	801c548 <__pow5mult>
 801bd6a:	9b07      	ldr	r3, [sp, #28]
 801bd6c:	2b01      	cmp	r3, #1
 801bd6e:	4604      	mov	r4, r0
 801bd70:	f300 80a0 	bgt.w	801beb4 <_dtoa_r+0x814>
 801bd74:	9b02      	ldr	r3, [sp, #8]
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	f040 8096 	bne.w	801bea8 <_dtoa_r+0x808>
 801bd7c:	9b03      	ldr	r3, [sp, #12]
 801bd7e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801bd82:	2a00      	cmp	r2, #0
 801bd84:	f040 8092 	bne.w	801beac <_dtoa_r+0x80c>
 801bd88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801bd8c:	0d12      	lsrs	r2, r2, #20
 801bd8e:	0512      	lsls	r2, r2, #20
 801bd90:	2a00      	cmp	r2, #0
 801bd92:	f000 808d 	beq.w	801beb0 <_dtoa_r+0x810>
 801bd96:	9b04      	ldr	r3, [sp, #16]
 801bd98:	3301      	adds	r3, #1
 801bd9a:	9304      	str	r3, [sp, #16]
 801bd9c:	9b06      	ldr	r3, [sp, #24]
 801bd9e:	3301      	adds	r3, #1
 801bda0:	9306      	str	r3, [sp, #24]
 801bda2:	2301      	movs	r3, #1
 801bda4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bda6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 81b9 	beq.w	801c120 <_dtoa_r+0xa80>
 801bdae:	6922      	ldr	r2, [r4, #16]
 801bdb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bdb4:	6910      	ldr	r0, [r2, #16]
 801bdb6:	f000 fac3 	bl	801c340 <__hi0bits>
 801bdba:	f1c0 0020 	rsb	r0, r0, #32
 801bdbe:	9b06      	ldr	r3, [sp, #24]
 801bdc0:	4418      	add	r0, r3
 801bdc2:	f010 001f 	ands.w	r0, r0, #31
 801bdc6:	f000 8081 	beq.w	801becc <_dtoa_r+0x82c>
 801bdca:	f1c0 0220 	rsb	r2, r0, #32
 801bdce:	2a04      	cmp	r2, #4
 801bdd0:	dd73      	ble.n	801beba <_dtoa_r+0x81a>
 801bdd2:	9b04      	ldr	r3, [sp, #16]
 801bdd4:	f1c0 001c 	rsb	r0, r0, #28
 801bdd8:	4403      	add	r3, r0
 801bdda:	9304      	str	r3, [sp, #16]
 801bddc:	9b06      	ldr	r3, [sp, #24]
 801bdde:	4406      	add	r6, r0
 801bde0:	4403      	add	r3, r0
 801bde2:	9306      	str	r3, [sp, #24]
 801bde4:	9b04      	ldr	r3, [sp, #16]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	dd05      	ble.n	801bdf6 <_dtoa_r+0x756>
 801bdea:	9901      	ldr	r1, [sp, #4]
 801bdec:	461a      	mov	r2, r3
 801bdee:	4648      	mov	r0, r9
 801bdf0:	f000 fc04 	bl	801c5fc <__lshift>
 801bdf4:	9001      	str	r0, [sp, #4]
 801bdf6:	9b06      	ldr	r3, [sp, #24]
 801bdf8:	2b00      	cmp	r3, #0
 801bdfa:	dd05      	ble.n	801be08 <_dtoa_r+0x768>
 801bdfc:	4621      	mov	r1, r4
 801bdfe:	461a      	mov	r2, r3
 801be00:	4648      	mov	r0, r9
 801be02:	f000 fbfb 	bl	801c5fc <__lshift>
 801be06:	4604      	mov	r4, r0
 801be08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be0a:	2b00      	cmp	r3, #0
 801be0c:	d060      	beq.n	801bed0 <_dtoa_r+0x830>
 801be0e:	9801      	ldr	r0, [sp, #4]
 801be10:	4621      	mov	r1, r4
 801be12:	f000 fc5f 	bl	801c6d4 <__mcmp>
 801be16:	2800      	cmp	r0, #0
 801be18:	da5a      	bge.n	801bed0 <_dtoa_r+0x830>
 801be1a:	f108 33ff 	add.w	r3, r8, #4294967295
 801be1e:	9305      	str	r3, [sp, #20]
 801be20:	9901      	ldr	r1, [sp, #4]
 801be22:	2300      	movs	r3, #0
 801be24:	220a      	movs	r2, #10
 801be26:	4648      	mov	r0, r9
 801be28:	f000 fa44 	bl	801c2b4 <__multadd>
 801be2c:	9b08      	ldr	r3, [sp, #32]
 801be2e:	9001      	str	r0, [sp, #4]
 801be30:	2b00      	cmp	r3, #0
 801be32:	f000 8177 	beq.w	801c124 <_dtoa_r+0xa84>
 801be36:	4629      	mov	r1, r5
 801be38:	2300      	movs	r3, #0
 801be3a:	220a      	movs	r2, #10
 801be3c:	4648      	mov	r0, r9
 801be3e:	f000 fa39 	bl	801c2b4 <__multadd>
 801be42:	f1bb 0f00 	cmp.w	fp, #0
 801be46:	4605      	mov	r5, r0
 801be48:	dc6e      	bgt.n	801bf28 <_dtoa_r+0x888>
 801be4a:	9b07      	ldr	r3, [sp, #28]
 801be4c:	2b02      	cmp	r3, #2
 801be4e:	dc48      	bgt.n	801bee2 <_dtoa_r+0x842>
 801be50:	e06a      	b.n	801bf28 <_dtoa_r+0x888>
 801be52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801be54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801be58:	e739      	b.n	801bcce <_dtoa_r+0x62e>
 801be5a:	f10a 34ff 	add.w	r4, sl, #4294967295
 801be5e:	42a3      	cmp	r3, r4
 801be60:	db07      	blt.n	801be72 <_dtoa_r+0x7d2>
 801be62:	f1ba 0f00 	cmp.w	sl, #0
 801be66:	eba3 0404 	sub.w	r4, r3, r4
 801be6a:	db0b      	blt.n	801be84 <_dtoa_r+0x7e4>
 801be6c:	9e04      	ldr	r6, [sp, #16]
 801be6e:	4652      	mov	r2, sl
 801be70:	e72f      	b.n	801bcd2 <_dtoa_r+0x632>
 801be72:	1ae2      	subs	r2, r4, r3
 801be74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801be76:	9e04      	ldr	r6, [sp, #16]
 801be78:	4413      	add	r3, r2
 801be7a:	930a      	str	r3, [sp, #40]	@ 0x28
 801be7c:	4652      	mov	r2, sl
 801be7e:	4623      	mov	r3, r4
 801be80:	2400      	movs	r4, #0
 801be82:	e726      	b.n	801bcd2 <_dtoa_r+0x632>
 801be84:	9a04      	ldr	r2, [sp, #16]
 801be86:	eba2 060a 	sub.w	r6, r2, sl
 801be8a:	2200      	movs	r2, #0
 801be8c:	e721      	b.n	801bcd2 <_dtoa_r+0x632>
 801be8e:	9e04      	ldr	r6, [sp, #16]
 801be90:	9d08      	ldr	r5, [sp, #32]
 801be92:	461c      	mov	r4, r3
 801be94:	e72a      	b.n	801bcec <_dtoa_r+0x64c>
 801be96:	9a01      	ldr	r2, [sp, #4]
 801be98:	9205      	str	r2, [sp, #20]
 801be9a:	e752      	b.n	801bd42 <_dtoa_r+0x6a2>
 801be9c:	9901      	ldr	r1, [sp, #4]
 801be9e:	461a      	mov	r2, r3
 801bea0:	e751      	b.n	801bd46 <_dtoa_r+0x6a6>
 801bea2:	9b05      	ldr	r3, [sp, #20]
 801bea4:	9301      	str	r3, [sp, #4]
 801bea6:	e752      	b.n	801bd4e <_dtoa_r+0x6ae>
 801bea8:	2300      	movs	r3, #0
 801beaa:	e77b      	b.n	801bda4 <_dtoa_r+0x704>
 801beac:	9b02      	ldr	r3, [sp, #8]
 801beae:	e779      	b.n	801bda4 <_dtoa_r+0x704>
 801beb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 801beb2:	e778      	b.n	801bda6 <_dtoa_r+0x706>
 801beb4:	2300      	movs	r3, #0
 801beb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801beb8:	e779      	b.n	801bdae <_dtoa_r+0x70e>
 801beba:	d093      	beq.n	801bde4 <_dtoa_r+0x744>
 801bebc:	9b04      	ldr	r3, [sp, #16]
 801bebe:	321c      	adds	r2, #28
 801bec0:	4413      	add	r3, r2
 801bec2:	9304      	str	r3, [sp, #16]
 801bec4:	9b06      	ldr	r3, [sp, #24]
 801bec6:	4416      	add	r6, r2
 801bec8:	4413      	add	r3, r2
 801beca:	e78a      	b.n	801bde2 <_dtoa_r+0x742>
 801becc:	4602      	mov	r2, r0
 801bece:	e7f5      	b.n	801bebc <_dtoa_r+0x81c>
 801bed0:	f1ba 0f00 	cmp.w	sl, #0
 801bed4:	f8cd 8014 	str.w	r8, [sp, #20]
 801bed8:	46d3      	mov	fp, sl
 801beda:	dc21      	bgt.n	801bf20 <_dtoa_r+0x880>
 801bedc:	9b07      	ldr	r3, [sp, #28]
 801bede:	2b02      	cmp	r3, #2
 801bee0:	dd1e      	ble.n	801bf20 <_dtoa_r+0x880>
 801bee2:	f1bb 0f00 	cmp.w	fp, #0
 801bee6:	f47f addc 	bne.w	801baa2 <_dtoa_r+0x402>
 801beea:	4621      	mov	r1, r4
 801beec:	465b      	mov	r3, fp
 801beee:	2205      	movs	r2, #5
 801bef0:	4648      	mov	r0, r9
 801bef2:	f000 f9df 	bl	801c2b4 <__multadd>
 801bef6:	4601      	mov	r1, r0
 801bef8:	4604      	mov	r4, r0
 801befa:	9801      	ldr	r0, [sp, #4]
 801befc:	f000 fbea 	bl	801c6d4 <__mcmp>
 801bf00:	2800      	cmp	r0, #0
 801bf02:	f77f adce 	ble.w	801baa2 <_dtoa_r+0x402>
 801bf06:	463e      	mov	r6, r7
 801bf08:	2331      	movs	r3, #49	@ 0x31
 801bf0a:	f806 3b01 	strb.w	r3, [r6], #1
 801bf0e:	9b05      	ldr	r3, [sp, #20]
 801bf10:	3301      	adds	r3, #1
 801bf12:	9305      	str	r3, [sp, #20]
 801bf14:	e5c9      	b.n	801baaa <_dtoa_r+0x40a>
 801bf16:	f8cd 8014 	str.w	r8, [sp, #20]
 801bf1a:	4654      	mov	r4, sl
 801bf1c:	4625      	mov	r5, r4
 801bf1e:	e7f2      	b.n	801bf06 <_dtoa_r+0x866>
 801bf20:	9b08      	ldr	r3, [sp, #32]
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	f000 8102 	beq.w	801c12c <_dtoa_r+0xa8c>
 801bf28:	2e00      	cmp	r6, #0
 801bf2a:	dd05      	ble.n	801bf38 <_dtoa_r+0x898>
 801bf2c:	4629      	mov	r1, r5
 801bf2e:	4632      	mov	r2, r6
 801bf30:	4648      	mov	r0, r9
 801bf32:	f000 fb63 	bl	801c5fc <__lshift>
 801bf36:	4605      	mov	r5, r0
 801bf38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d058      	beq.n	801bff0 <_dtoa_r+0x950>
 801bf3e:	6869      	ldr	r1, [r5, #4]
 801bf40:	4648      	mov	r0, r9
 801bf42:	f000 f955 	bl	801c1f0 <_Balloc>
 801bf46:	4606      	mov	r6, r0
 801bf48:	b928      	cbnz	r0, 801bf56 <_dtoa_r+0x8b6>
 801bf4a:	4b82      	ldr	r3, [pc, #520]	@ (801c154 <_dtoa_r+0xab4>)
 801bf4c:	4602      	mov	r2, r0
 801bf4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801bf52:	f7ff bbbe 	b.w	801b6d2 <_dtoa_r+0x32>
 801bf56:	692a      	ldr	r2, [r5, #16]
 801bf58:	3202      	adds	r2, #2
 801bf5a:	0092      	lsls	r2, r2, #2
 801bf5c:	f105 010c 	add.w	r1, r5, #12
 801bf60:	300c      	adds	r0, #12
 801bf62:	f7ff fb06 	bl	801b572 <memcpy>
 801bf66:	2201      	movs	r2, #1
 801bf68:	4631      	mov	r1, r6
 801bf6a:	4648      	mov	r0, r9
 801bf6c:	f000 fb46 	bl	801c5fc <__lshift>
 801bf70:	1c7b      	adds	r3, r7, #1
 801bf72:	9304      	str	r3, [sp, #16]
 801bf74:	eb07 030b 	add.w	r3, r7, fp
 801bf78:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf7a:	9b02      	ldr	r3, [sp, #8]
 801bf7c:	f003 0301 	and.w	r3, r3, #1
 801bf80:	46a8      	mov	r8, r5
 801bf82:	9308      	str	r3, [sp, #32]
 801bf84:	4605      	mov	r5, r0
 801bf86:	9b04      	ldr	r3, [sp, #16]
 801bf88:	9801      	ldr	r0, [sp, #4]
 801bf8a:	4621      	mov	r1, r4
 801bf8c:	f103 3bff 	add.w	fp, r3, #4294967295
 801bf90:	f7ff fafd 	bl	801b58e <quorem>
 801bf94:	4641      	mov	r1, r8
 801bf96:	9002      	str	r0, [sp, #8]
 801bf98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801bf9c:	9801      	ldr	r0, [sp, #4]
 801bf9e:	f000 fb99 	bl	801c6d4 <__mcmp>
 801bfa2:	462a      	mov	r2, r5
 801bfa4:	9006      	str	r0, [sp, #24]
 801bfa6:	4621      	mov	r1, r4
 801bfa8:	4648      	mov	r0, r9
 801bfaa:	f000 fbaf 	bl	801c70c <__mdiff>
 801bfae:	68c2      	ldr	r2, [r0, #12]
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	b9fa      	cbnz	r2, 801bff4 <_dtoa_r+0x954>
 801bfb4:	4601      	mov	r1, r0
 801bfb6:	9801      	ldr	r0, [sp, #4]
 801bfb8:	f000 fb8c 	bl	801c6d4 <__mcmp>
 801bfbc:	4602      	mov	r2, r0
 801bfbe:	4631      	mov	r1, r6
 801bfc0:	4648      	mov	r0, r9
 801bfc2:	920a      	str	r2, [sp, #40]	@ 0x28
 801bfc4:	f000 f954 	bl	801c270 <_Bfree>
 801bfc8:	9b07      	ldr	r3, [sp, #28]
 801bfca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bfcc:	9e04      	ldr	r6, [sp, #16]
 801bfce:	ea42 0103 	orr.w	r1, r2, r3
 801bfd2:	9b08      	ldr	r3, [sp, #32]
 801bfd4:	4319      	orrs	r1, r3
 801bfd6:	d10f      	bne.n	801bff8 <_dtoa_r+0x958>
 801bfd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801bfdc:	d028      	beq.n	801c030 <_dtoa_r+0x990>
 801bfde:	9b06      	ldr	r3, [sp, #24]
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	dd02      	ble.n	801bfea <_dtoa_r+0x94a>
 801bfe4:	9b02      	ldr	r3, [sp, #8]
 801bfe6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 801bfea:	f88b a000 	strb.w	sl, [fp]
 801bfee:	e55e      	b.n	801baae <_dtoa_r+0x40e>
 801bff0:	4628      	mov	r0, r5
 801bff2:	e7bd      	b.n	801bf70 <_dtoa_r+0x8d0>
 801bff4:	2201      	movs	r2, #1
 801bff6:	e7e2      	b.n	801bfbe <_dtoa_r+0x91e>
 801bff8:	9b06      	ldr	r3, [sp, #24]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	db04      	blt.n	801c008 <_dtoa_r+0x968>
 801bffe:	9907      	ldr	r1, [sp, #28]
 801c000:	430b      	orrs	r3, r1
 801c002:	9908      	ldr	r1, [sp, #32]
 801c004:	430b      	orrs	r3, r1
 801c006:	d120      	bne.n	801c04a <_dtoa_r+0x9aa>
 801c008:	2a00      	cmp	r2, #0
 801c00a:	ddee      	ble.n	801bfea <_dtoa_r+0x94a>
 801c00c:	9901      	ldr	r1, [sp, #4]
 801c00e:	2201      	movs	r2, #1
 801c010:	4648      	mov	r0, r9
 801c012:	f000 faf3 	bl	801c5fc <__lshift>
 801c016:	4621      	mov	r1, r4
 801c018:	9001      	str	r0, [sp, #4]
 801c01a:	f000 fb5b 	bl	801c6d4 <__mcmp>
 801c01e:	2800      	cmp	r0, #0
 801c020:	dc03      	bgt.n	801c02a <_dtoa_r+0x98a>
 801c022:	d1e2      	bne.n	801bfea <_dtoa_r+0x94a>
 801c024:	f01a 0f01 	tst.w	sl, #1
 801c028:	d0df      	beq.n	801bfea <_dtoa_r+0x94a>
 801c02a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801c02e:	d1d9      	bne.n	801bfe4 <_dtoa_r+0x944>
 801c030:	2339      	movs	r3, #57	@ 0x39
 801c032:	f88b 3000 	strb.w	r3, [fp]
 801c036:	4633      	mov	r3, r6
 801c038:	461e      	mov	r6, r3
 801c03a:	3b01      	subs	r3, #1
 801c03c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c040:	2a39      	cmp	r2, #57	@ 0x39
 801c042:	d052      	beq.n	801c0ea <_dtoa_r+0xa4a>
 801c044:	3201      	adds	r2, #1
 801c046:	701a      	strb	r2, [r3, #0]
 801c048:	e531      	b.n	801baae <_dtoa_r+0x40e>
 801c04a:	2a00      	cmp	r2, #0
 801c04c:	dd07      	ble.n	801c05e <_dtoa_r+0x9be>
 801c04e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801c052:	d0ed      	beq.n	801c030 <_dtoa_r+0x990>
 801c054:	f10a 0301 	add.w	r3, sl, #1
 801c058:	f88b 3000 	strb.w	r3, [fp]
 801c05c:	e527      	b.n	801baae <_dtoa_r+0x40e>
 801c05e:	9b04      	ldr	r3, [sp, #16]
 801c060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c062:	f803 ac01 	strb.w	sl, [r3, #-1]
 801c066:	4293      	cmp	r3, r2
 801c068:	d029      	beq.n	801c0be <_dtoa_r+0xa1e>
 801c06a:	9901      	ldr	r1, [sp, #4]
 801c06c:	2300      	movs	r3, #0
 801c06e:	220a      	movs	r2, #10
 801c070:	4648      	mov	r0, r9
 801c072:	f000 f91f 	bl	801c2b4 <__multadd>
 801c076:	45a8      	cmp	r8, r5
 801c078:	9001      	str	r0, [sp, #4]
 801c07a:	f04f 0300 	mov.w	r3, #0
 801c07e:	f04f 020a 	mov.w	r2, #10
 801c082:	4641      	mov	r1, r8
 801c084:	4648      	mov	r0, r9
 801c086:	d107      	bne.n	801c098 <_dtoa_r+0x9f8>
 801c088:	f000 f914 	bl	801c2b4 <__multadd>
 801c08c:	4680      	mov	r8, r0
 801c08e:	4605      	mov	r5, r0
 801c090:	9b04      	ldr	r3, [sp, #16]
 801c092:	3301      	adds	r3, #1
 801c094:	9304      	str	r3, [sp, #16]
 801c096:	e776      	b.n	801bf86 <_dtoa_r+0x8e6>
 801c098:	f000 f90c 	bl	801c2b4 <__multadd>
 801c09c:	4629      	mov	r1, r5
 801c09e:	4680      	mov	r8, r0
 801c0a0:	2300      	movs	r3, #0
 801c0a2:	220a      	movs	r2, #10
 801c0a4:	4648      	mov	r0, r9
 801c0a6:	f000 f905 	bl	801c2b4 <__multadd>
 801c0aa:	4605      	mov	r5, r0
 801c0ac:	e7f0      	b.n	801c090 <_dtoa_r+0x9f0>
 801c0ae:	f1bb 0f00 	cmp.w	fp, #0
 801c0b2:	bfcc      	ite	gt
 801c0b4:	465e      	movgt	r6, fp
 801c0b6:	2601      	movle	r6, #1
 801c0b8:	443e      	add	r6, r7
 801c0ba:	f04f 0800 	mov.w	r8, #0
 801c0be:	9901      	ldr	r1, [sp, #4]
 801c0c0:	2201      	movs	r2, #1
 801c0c2:	4648      	mov	r0, r9
 801c0c4:	f000 fa9a 	bl	801c5fc <__lshift>
 801c0c8:	4621      	mov	r1, r4
 801c0ca:	9001      	str	r0, [sp, #4]
 801c0cc:	f000 fb02 	bl	801c6d4 <__mcmp>
 801c0d0:	2800      	cmp	r0, #0
 801c0d2:	dcb0      	bgt.n	801c036 <_dtoa_r+0x996>
 801c0d4:	d102      	bne.n	801c0dc <_dtoa_r+0xa3c>
 801c0d6:	f01a 0f01 	tst.w	sl, #1
 801c0da:	d1ac      	bne.n	801c036 <_dtoa_r+0x996>
 801c0dc:	4633      	mov	r3, r6
 801c0de:	461e      	mov	r6, r3
 801c0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c0e4:	2a30      	cmp	r2, #48	@ 0x30
 801c0e6:	d0fa      	beq.n	801c0de <_dtoa_r+0xa3e>
 801c0e8:	e4e1      	b.n	801baae <_dtoa_r+0x40e>
 801c0ea:	429f      	cmp	r7, r3
 801c0ec:	d1a4      	bne.n	801c038 <_dtoa_r+0x998>
 801c0ee:	9b05      	ldr	r3, [sp, #20]
 801c0f0:	3301      	adds	r3, #1
 801c0f2:	9305      	str	r3, [sp, #20]
 801c0f4:	2331      	movs	r3, #49	@ 0x31
 801c0f6:	703b      	strb	r3, [r7, #0]
 801c0f8:	e4d9      	b.n	801baae <_dtoa_r+0x40e>
 801c0fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c0fc:	4f16      	ldr	r7, [pc, #88]	@ (801c158 <_dtoa_r+0xab8>)
 801c0fe:	b11b      	cbz	r3, 801c108 <_dtoa_r+0xa68>
 801c100:	f107 0308 	add.w	r3, r7, #8
 801c104:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801c106:	6013      	str	r3, [r2, #0]
 801c108:	4638      	mov	r0, r7
 801c10a:	b011      	add	sp, #68	@ 0x44
 801c10c:	ecbd 8b02 	vpop	{d8}
 801c110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c114:	9b07      	ldr	r3, [sp, #28]
 801c116:	2b01      	cmp	r3, #1
 801c118:	f77f ae2c 	ble.w	801bd74 <_dtoa_r+0x6d4>
 801c11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c11e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c120:	2001      	movs	r0, #1
 801c122:	e64c      	b.n	801bdbe <_dtoa_r+0x71e>
 801c124:	f1bb 0f00 	cmp.w	fp, #0
 801c128:	f77f aed8 	ble.w	801bedc <_dtoa_r+0x83c>
 801c12c:	463e      	mov	r6, r7
 801c12e:	9801      	ldr	r0, [sp, #4]
 801c130:	4621      	mov	r1, r4
 801c132:	f7ff fa2c 	bl	801b58e <quorem>
 801c136:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801c13a:	f806 ab01 	strb.w	sl, [r6], #1
 801c13e:	1bf2      	subs	r2, r6, r7
 801c140:	4593      	cmp	fp, r2
 801c142:	ddb4      	ble.n	801c0ae <_dtoa_r+0xa0e>
 801c144:	9901      	ldr	r1, [sp, #4]
 801c146:	2300      	movs	r3, #0
 801c148:	220a      	movs	r2, #10
 801c14a:	4648      	mov	r0, r9
 801c14c:	f000 f8b2 	bl	801c2b4 <__multadd>
 801c150:	9001      	str	r0, [sp, #4]
 801c152:	e7ec      	b.n	801c12e <_dtoa_r+0xa8e>
 801c154:	0801dccc 	.word	0x0801dccc
 801c158:	0801dc50 	.word	0x0801dc50

0801c15c <_free_r>:
 801c15c:	b538      	push	{r3, r4, r5, lr}
 801c15e:	4605      	mov	r5, r0
 801c160:	2900      	cmp	r1, #0
 801c162:	d041      	beq.n	801c1e8 <_free_r+0x8c>
 801c164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c168:	1f0c      	subs	r4, r1, #4
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	bfb8      	it	lt
 801c16e:	18e4      	addlt	r4, r4, r3
 801c170:	f7fe fbfe 	bl	801a970 <__malloc_lock>
 801c174:	4a1d      	ldr	r2, [pc, #116]	@ (801c1ec <_free_r+0x90>)
 801c176:	6813      	ldr	r3, [r2, #0]
 801c178:	b933      	cbnz	r3, 801c188 <_free_r+0x2c>
 801c17a:	6063      	str	r3, [r4, #4]
 801c17c:	6014      	str	r4, [r2, #0]
 801c17e:	4628      	mov	r0, r5
 801c180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c184:	f7fe bbfa 	b.w	801a97c <__malloc_unlock>
 801c188:	42a3      	cmp	r3, r4
 801c18a:	d908      	bls.n	801c19e <_free_r+0x42>
 801c18c:	6820      	ldr	r0, [r4, #0]
 801c18e:	1821      	adds	r1, r4, r0
 801c190:	428b      	cmp	r3, r1
 801c192:	bf01      	itttt	eq
 801c194:	6819      	ldreq	r1, [r3, #0]
 801c196:	685b      	ldreq	r3, [r3, #4]
 801c198:	1809      	addeq	r1, r1, r0
 801c19a:	6021      	streq	r1, [r4, #0]
 801c19c:	e7ed      	b.n	801c17a <_free_r+0x1e>
 801c19e:	461a      	mov	r2, r3
 801c1a0:	685b      	ldr	r3, [r3, #4]
 801c1a2:	b10b      	cbz	r3, 801c1a8 <_free_r+0x4c>
 801c1a4:	42a3      	cmp	r3, r4
 801c1a6:	d9fa      	bls.n	801c19e <_free_r+0x42>
 801c1a8:	6811      	ldr	r1, [r2, #0]
 801c1aa:	1850      	adds	r0, r2, r1
 801c1ac:	42a0      	cmp	r0, r4
 801c1ae:	d10b      	bne.n	801c1c8 <_free_r+0x6c>
 801c1b0:	6820      	ldr	r0, [r4, #0]
 801c1b2:	4401      	add	r1, r0
 801c1b4:	1850      	adds	r0, r2, r1
 801c1b6:	4283      	cmp	r3, r0
 801c1b8:	6011      	str	r1, [r2, #0]
 801c1ba:	d1e0      	bne.n	801c17e <_free_r+0x22>
 801c1bc:	6818      	ldr	r0, [r3, #0]
 801c1be:	685b      	ldr	r3, [r3, #4]
 801c1c0:	6053      	str	r3, [r2, #4]
 801c1c2:	4408      	add	r0, r1
 801c1c4:	6010      	str	r0, [r2, #0]
 801c1c6:	e7da      	b.n	801c17e <_free_r+0x22>
 801c1c8:	d902      	bls.n	801c1d0 <_free_r+0x74>
 801c1ca:	230c      	movs	r3, #12
 801c1cc:	602b      	str	r3, [r5, #0]
 801c1ce:	e7d6      	b.n	801c17e <_free_r+0x22>
 801c1d0:	6820      	ldr	r0, [r4, #0]
 801c1d2:	1821      	adds	r1, r4, r0
 801c1d4:	428b      	cmp	r3, r1
 801c1d6:	bf04      	itt	eq
 801c1d8:	6819      	ldreq	r1, [r3, #0]
 801c1da:	685b      	ldreq	r3, [r3, #4]
 801c1dc:	6063      	str	r3, [r4, #4]
 801c1de:	bf04      	itt	eq
 801c1e0:	1809      	addeq	r1, r1, r0
 801c1e2:	6021      	streq	r1, [r4, #0]
 801c1e4:	6054      	str	r4, [r2, #4]
 801c1e6:	e7ca      	b.n	801c17e <_free_r+0x22>
 801c1e8:	bd38      	pop	{r3, r4, r5, pc}
 801c1ea:	bf00      	nop
 801c1ec:	24048e8c 	.word	0x24048e8c

0801c1f0 <_Balloc>:
 801c1f0:	b570      	push	{r4, r5, r6, lr}
 801c1f2:	69c6      	ldr	r6, [r0, #28]
 801c1f4:	4604      	mov	r4, r0
 801c1f6:	460d      	mov	r5, r1
 801c1f8:	b976      	cbnz	r6, 801c218 <_Balloc+0x28>
 801c1fa:	2010      	movs	r0, #16
 801c1fc:	f7fe fb0e 	bl	801a81c <malloc>
 801c200:	4602      	mov	r2, r0
 801c202:	61e0      	str	r0, [r4, #28]
 801c204:	b920      	cbnz	r0, 801c210 <_Balloc+0x20>
 801c206:	4b18      	ldr	r3, [pc, #96]	@ (801c268 <_Balloc+0x78>)
 801c208:	4818      	ldr	r0, [pc, #96]	@ (801c26c <_Balloc+0x7c>)
 801c20a:	216b      	movs	r1, #107	@ 0x6b
 801c20c:	f000 fd88 	bl	801cd20 <__assert_func>
 801c210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c214:	6006      	str	r6, [r0, #0]
 801c216:	60c6      	str	r6, [r0, #12]
 801c218:	69e6      	ldr	r6, [r4, #28]
 801c21a:	68f3      	ldr	r3, [r6, #12]
 801c21c:	b183      	cbz	r3, 801c240 <_Balloc+0x50>
 801c21e:	69e3      	ldr	r3, [r4, #28]
 801c220:	68db      	ldr	r3, [r3, #12]
 801c222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c226:	b9b8      	cbnz	r0, 801c258 <_Balloc+0x68>
 801c228:	2101      	movs	r1, #1
 801c22a:	fa01 f605 	lsl.w	r6, r1, r5
 801c22e:	1d72      	adds	r2, r6, #5
 801c230:	0092      	lsls	r2, r2, #2
 801c232:	4620      	mov	r0, r4
 801c234:	f000 fd92 	bl	801cd5c <_calloc_r>
 801c238:	b160      	cbz	r0, 801c254 <_Balloc+0x64>
 801c23a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c23e:	e00e      	b.n	801c25e <_Balloc+0x6e>
 801c240:	2221      	movs	r2, #33	@ 0x21
 801c242:	2104      	movs	r1, #4
 801c244:	4620      	mov	r0, r4
 801c246:	f000 fd89 	bl	801cd5c <_calloc_r>
 801c24a:	69e3      	ldr	r3, [r4, #28]
 801c24c:	60f0      	str	r0, [r6, #12]
 801c24e:	68db      	ldr	r3, [r3, #12]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d1e4      	bne.n	801c21e <_Balloc+0x2e>
 801c254:	2000      	movs	r0, #0
 801c256:	bd70      	pop	{r4, r5, r6, pc}
 801c258:	6802      	ldr	r2, [r0, #0]
 801c25a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c25e:	2300      	movs	r3, #0
 801c260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c264:	e7f7      	b.n	801c256 <_Balloc+0x66>
 801c266:	bf00      	nop
 801c268:	0801dc5d 	.word	0x0801dc5d
 801c26c:	0801dcdd 	.word	0x0801dcdd

0801c270 <_Bfree>:
 801c270:	b570      	push	{r4, r5, r6, lr}
 801c272:	69c6      	ldr	r6, [r0, #28]
 801c274:	4605      	mov	r5, r0
 801c276:	460c      	mov	r4, r1
 801c278:	b976      	cbnz	r6, 801c298 <_Bfree+0x28>
 801c27a:	2010      	movs	r0, #16
 801c27c:	f7fe face 	bl	801a81c <malloc>
 801c280:	4602      	mov	r2, r0
 801c282:	61e8      	str	r0, [r5, #28]
 801c284:	b920      	cbnz	r0, 801c290 <_Bfree+0x20>
 801c286:	4b09      	ldr	r3, [pc, #36]	@ (801c2ac <_Bfree+0x3c>)
 801c288:	4809      	ldr	r0, [pc, #36]	@ (801c2b0 <_Bfree+0x40>)
 801c28a:	218f      	movs	r1, #143	@ 0x8f
 801c28c:	f000 fd48 	bl	801cd20 <__assert_func>
 801c290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c294:	6006      	str	r6, [r0, #0]
 801c296:	60c6      	str	r6, [r0, #12]
 801c298:	b13c      	cbz	r4, 801c2aa <_Bfree+0x3a>
 801c29a:	69eb      	ldr	r3, [r5, #28]
 801c29c:	6862      	ldr	r2, [r4, #4]
 801c29e:	68db      	ldr	r3, [r3, #12]
 801c2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c2a4:	6021      	str	r1, [r4, #0]
 801c2a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c2aa:	bd70      	pop	{r4, r5, r6, pc}
 801c2ac:	0801dc5d 	.word	0x0801dc5d
 801c2b0:	0801dcdd 	.word	0x0801dcdd

0801c2b4 <__multadd>:
 801c2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b8:	690d      	ldr	r5, [r1, #16]
 801c2ba:	4607      	mov	r7, r0
 801c2bc:	460c      	mov	r4, r1
 801c2be:	461e      	mov	r6, r3
 801c2c0:	f101 0c14 	add.w	ip, r1, #20
 801c2c4:	2000      	movs	r0, #0
 801c2c6:	f8dc 3000 	ldr.w	r3, [ip]
 801c2ca:	b299      	uxth	r1, r3
 801c2cc:	fb02 6101 	mla	r1, r2, r1, r6
 801c2d0:	0c1e      	lsrs	r6, r3, #16
 801c2d2:	0c0b      	lsrs	r3, r1, #16
 801c2d4:	fb02 3306 	mla	r3, r2, r6, r3
 801c2d8:	b289      	uxth	r1, r1
 801c2da:	3001      	adds	r0, #1
 801c2dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c2e0:	4285      	cmp	r5, r0
 801c2e2:	f84c 1b04 	str.w	r1, [ip], #4
 801c2e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c2ea:	dcec      	bgt.n	801c2c6 <__multadd+0x12>
 801c2ec:	b30e      	cbz	r6, 801c332 <__multadd+0x7e>
 801c2ee:	68a3      	ldr	r3, [r4, #8]
 801c2f0:	42ab      	cmp	r3, r5
 801c2f2:	dc19      	bgt.n	801c328 <__multadd+0x74>
 801c2f4:	6861      	ldr	r1, [r4, #4]
 801c2f6:	4638      	mov	r0, r7
 801c2f8:	3101      	adds	r1, #1
 801c2fa:	f7ff ff79 	bl	801c1f0 <_Balloc>
 801c2fe:	4680      	mov	r8, r0
 801c300:	b928      	cbnz	r0, 801c30e <__multadd+0x5a>
 801c302:	4602      	mov	r2, r0
 801c304:	4b0c      	ldr	r3, [pc, #48]	@ (801c338 <__multadd+0x84>)
 801c306:	480d      	ldr	r0, [pc, #52]	@ (801c33c <__multadd+0x88>)
 801c308:	21ba      	movs	r1, #186	@ 0xba
 801c30a:	f000 fd09 	bl	801cd20 <__assert_func>
 801c30e:	6922      	ldr	r2, [r4, #16]
 801c310:	3202      	adds	r2, #2
 801c312:	f104 010c 	add.w	r1, r4, #12
 801c316:	0092      	lsls	r2, r2, #2
 801c318:	300c      	adds	r0, #12
 801c31a:	f7ff f92a 	bl	801b572 <memcpy>
 801c31e:	4621      	mov	r1, r4
 801c320:	4638      	mov	r0, r7
 801c322:	f7ff ffa5 	bl	801c270 <_Bfree>
 801c326:	4644      	mov	r4, r8
 801c328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c32c:	3501      	adds	r5, #1
 801c32e:	615e      	str	r6, [r3, #20]
 801c330:	6125      	str	r5, [r4, #16]
 801c332:	4620      	mov	r0, r4
 801c334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c338:	0801dccc 	.word	0x0801dccc
 801c33c:	0801dcdd 	.word	0x0801dcdd

0801c340 <__hi0bits>:
 801c340:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c344:	4603      	mov	r3, r0
 801c346:	bf36      	itet	cc
 801c348:	0403      	lslcc	r3, r0, #16
 801c34a:	2000      	movcs	r0, #0
 801c34c:	2010      	movcc	r0, #16
 801c34e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c352:	bf3c      	itt	cc
 801c354:	021b      	lslcc	r3, r3, #8
 801c356:	3008      	addcc	r0, #8
 801c358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c35c:	bf3c      	itt	cc
 801c35e:	011b      	lslcc	r3, r3, #4
 801c360:	3004      	addcc	r0, #4
 801c362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c366:	bf3c      	itt	cc
 801c368:	009b      	lslcc	r3, r3, #2
 801c36a:	3002      	addcc	r0, #2
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	db05      	blt.n	801c37c <__hi0bits+0x3c>
 801c370:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c374:	f100 0001 	add.w	r0, r0, #1
 801c378:	bf08      	it	eq
 801c37a:	2020      	moveq	r0, #32
 801c37c:	4770      	bx	lr

0801c37e <__lo0bits>:
 801c37e:	6803      	ldr	r3, [r0, #0]
 801c380:	4602      	mov	r2, r0
 801c382:	f013 0007 	ands.w	r0, r3, #7
 801c386:	d00b      	beq.n	801c3a0 <__lo0bits+0x22>
 801c388:	07d9      	lsls	r1, r3, #31
 801c38a:	d421      	bmi.n	801c3d0 <__lo0bits+0x52>
 801c38c:	0798      	lsls	r0, r3, #30
 801c38e:	bf49      	itett	mi
 801c390:	085b      	lsrmi	r3, r3, #1
 801c392:	089b      	lsrpl	r3, r3, #2
 801c394:	2001      	movmi	r0, #1
 801c396:	6013      	strmi	r3, [r2, #0]
 801c398:	bf5c      	itt	pl
 801c39a:	6013      	strpl	r3, [r2, #0]
 801c39c:	2002      	movpl	r0, #2
 801c39e:	4770      	bx	lr
 801c3a0:	b299      	uxth	r1, r3
 801c3a2:	b909      	cbnz	r1, 801c3a8 <__lo0bits+0x2a>
 801c3a4:	0c1b      	lsrs	r3, r3, #16
 801c3a6:	2010      	movs	r0, #16
 801c3a8:	b2d9      	uxtb	r1, r3
 801c3aa:	b909      	cbnz	r1, 801c3b0 <__lo0bits+0x32>
 801c3ac:	3008      	adds	r0, #8
 801c3ae:	0a1b      	lsrs	r3, r3, #8
 801c3b0:	0719      	lsls	r1, r3, #28
 801c3b2:	bf04      	itt	eq
 801c3b4:	091b      	lsreq	r3, r3, #4
 801c3b6:	3004      	addeq	r0, #4
 801c3b8:	0799      	lsls	r1, r3, #30
 801c3ba:	bf04      	itt	eq
 801c3bc:	089b      	lsreq	r3, r3, #2
 801c3be:	3002      	addeq	r0, #2
 801c3c0:	07d9      	lsls	r1, r3, #31
 801c3c2:	d403      	bmi.n	801c3cc <__lo0bits+0x4e>
 801c3c4:	085b      	lsrs	r3, r3, #1
 801c3c6:	f100 0001 	add.w	r0, r0, #1
 801c3ca:	d003      	beq.n	801c3d4 <__lo0bits+0x56>
 801c3cc:	6013      	str	r3, [r2, #0]
 801c3ce:	4770      	bx	lr
 801c3d0:	2000      	movs	r0, #0
 801c3d2:	4770      	bx	lr
 801c3d4:	2020      	movs	r0, #32
 801c3d6:	4770      	bx	lr

0801c3d8 <__i2b>:
 801c3d8:	b510      	push	{r4, lr}
 801c3da:	460c      	mov	r4, r1
 801c3dc:	2101      	movs	r1, #1
 801c3de:	f7ff ff07 	bl	801c1f0 <_Balloc>
 801c3e2:	4602      	mov	r2, r0
 801c3e4:	b928      	cbnz	r0, 801c3f2 <__i2b+0x1a>
 801c3e6:	4b05      	ldr	r3, [pc, #20]	@ (801c3fc <__i2b+0x24>)
 801c3e8:	4805      	ldr	r0, [pc, #20]	@ (801c400 <__i2b+0x28>)
 801c3ea:	f240 1145 	movw	r1, #325	@ 0x145
 801c3ee:	f000 fc97 	bl	801cd20 <__assert_func>
 801c3f2:	2301      	movs	r3, #1
 801c3f4:	6144      	str	r4, [r0, #20]
 801c3f6:	6103      	str	r3, [r0, #16]
 801c3f8:	bd10      	pop	{r4, pc}
 801c3fa:	bf00      	nop
 801c3fc:	0801dccc 	.word	0x0801dccc
 801c400:	0801dcdd 	.word	0x0801dcdd

0801c404 <__multiply>:
 801c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c408:	4617      	mov	r7, r2
 801c40a:	690a      	ldr	r2, [r1, #16]
 801c40c:	693b      	ldr	r3, [r7, #16]
 801c40e:	429a      	cmp	r2, r3
 801c410:	bfa8      	it	ge
 801c412:	463b      	movge	r3, r7
 801c414:	4689      	mov	r9, r1
 801c416:	bfa4      	itt	ge
 801c418:	460f      	movge	r7, r1
 801c41a:	4699      	movge	r9, r3
 801c41c:	693d      	ldr	r5, [r7, #16]
 801c41e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c422:	68bb      	ldr	r3, [r7, #8]
 801c424:	6879      	ldr	r1, [r7, #4]
 801c426:	eb05 060a 	add.w	r6, r5, sl
 801c42a:	42b3      	cmp	r3, r6
 801c42c:	b085      	sub	sp, #20
 801c42e:	bfb8      	it	lt
 801c430:	3101      	addlt	r1, #1
 801c432:	f7ff fedd 	bl	801c1f0 <_Balloc>
 801c436:	b930      	cbnz	r0, 801c446 <__multiply+0x42>
 801c438:	4602      	mov	r2, r0
 801c43a:	4b41      	ldr	r3, [pc, #260]	@ (801c540 <__multiply+0x13c>)
 801c43c:	4841      	ldr	r0, [pc, #260]	@ (801c544 <__multiply+0x140>)
 801c43e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c442:	f000 fc6d 	bl	801cd20 <__assert_func>
 801c446:	f100 0414 	add.w	r4, r0, #20
 801c44a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801c44e:	4623      	mov	r3, r4
 801c450:	2200      	movs	r2, #0
 801c452:	4573      	cmp	r3, lr
 801c454:	d320      	bcc.n	801c498 <__multiply+0x94>
 801c456:	f107 0814 	add.w	r8, r7, #20
 801c45a:	f109 0114 	add.w	r1, r9, #20
 801c45e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801c462:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801c466:	9302      	str	r3, [sp, #8]
 801c468:	1beb      	subs	r3, r5, r7
 801c46a:	3b15      	subs	r3, #21
 801c46c:	f023 0303 	bic.w	r3, r3, #3
 801c470:	3304      	adds	r3, #4
 801c472:	3715      	adds	r7, #21
 801c474:	42bd      	cmp	r5, r7
 801c476:	bf38      	it	cc
 801c478:	2304      	movcc	r3, #4
 801c47a:	9301      	str	r3, [sp, #4]
 801c47c:	9b02      	ldr	r3, [sp, #8]
 801c47e:	9103      	str	r1, [sp, #12]
 801c480:	428b      	cmp	r3, r1
 801c482:	d80c      	bhi.n	801c49e <__multiply+0x9a>
 801c484:	2e00      	cmp	r6, #0
 801c486:	dd03      	ble.n	801c490 <__multiply+0x8c>
 801c488:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d055      	beq.n	801c53c <__multiply+0x138>
 801c490:	6106      	str	r6, [r0, #16]
 801c492:	b005      	add	sp, #20
 801c494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c498:	f843 2b04 	str.w	r2, [r3], #4
 801c49c:	e7d9      	b.n	801c452 <__multiply+0x4e>
 801c49e:	f8b1 a000 	ldrh.w	sl, [r1]
 801c4a2:	f1ba 0f00 	cmp.w	sl, #0
 801c4a6:	d01f      	beq.n	801c4e8 <__multiply+0xe4>
 801c4a8:	46c4      	mov	ip, r8
 801c4aa:	46a1      	mov	r9, r4
 801c4ac:	2700      	movs	r7, #0
 801c4ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c4b2:	f8d9 3000 	ldr.w	r3, [r9]
 801c4b6:	fa1f fb82 	uxth.w	fp, r2
 801c4ba:	b29b      	uxth	r3, r3
 801c4bc:	fb0a 330b 	mla	r3, sl, fp, r3
 801c4c0:	443b      	add	r3, r7
 801c4c2:	f8d9 7000 	ldr.w	r7, [r9]
 801c4c6:	0c12      	lsrs	r2, r2, #16
 801c4c8:	0c3f      	lsrs	r7, r7, #16
 801c4ca:	fb0a 7202 	mla	r2, sl, r2, r7
 801c4ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801c4d2:	b29b      	uxth	r3, r3
 801c4d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c4d8:	4565      	cmp	r5, ip
 801c4da:	f849 3b04 	str.w	r3, [r9], #4
 801c4de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801c4e2:	d8e4      	bhi.n	801c4ae <__multiply+0xaa>
 801c4e4:	9b01      	ldr	r3, [sp, #4]
 801c4e6:	50e7      	str	r7, [r4, r3]
 801c4e8:	9b03      	ldr	r3, [sp, #12]
 801c4ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c4ee:	3104      	adds	r1, #4
 801c4f0:	f1b9 0f00 	cmp.w	r9, #0
 801c4f4:	d020      	beq.n	801c538 <__multiply+0x134>
 801c4f6:	6823      	ldr	r3, [r4, #0]
 801c4f8:	4647      	mov	r7, r8
 801c4fa:	46a4      	mov	ip, r4
 801c4fc:	f04f 0a00 	mov.w	sl, #0
 801c500:	f8b7 b000 	ldrh.w	fp, [r7]
 801c504:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801c508:	fb09 220b 	mla	r2, r9, fp, r2
 801c50c:	4452      	add	r2, sl
 801c50e:	b29b      	uxth	r3, r3
 801c510:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c514:	f84c 3b04 	str.w	r3, [ip], #4
 801c518:	f857 3b04 	ldr.w	r3, [r7], #4
 801c51c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c520:	f8bc 3000 	ldrh.w	r3, [ip]
 801c524:	fb09 330a 	mla	r3, r9, sl, r3
 801c528:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801c52c:	42bd      	cmp	r5, r7
 801c52e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c532:	d8e5      	bhi.n	801c500 <__multiply+0xfc>
 801c534:	9a01      	ldr	r2, [sp, #4]
 801c536:	50a3      	str	r3, [r4, r2]
 801c538:	3404      	adds	r4, #4
 801c53a:	e79f      	b.n	801c47c <__multiply+0x78>
 801c53c:	3e01      	subs	r6, #1
 801c53e:	e7a1      	b.n	801c484 <__multiply+0x80>
 801c540:	0801dccc 	.word	0x0801dccc
 801c544:	0801dcdd 	.word	0x0801dcdd

0801c548 <__pow5mult>:
 801c548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c54c:	4615      	mov	r5, r2
 801c54e:	f012 0203 	ands.w	r2, r2, #3
 801c552:	4607      	mov	r7, r0
 801c554:	460e      	mov	r6, r1
 801c556:	d007      	beq.n	801c568 <__pow5mult+0x20>
 801c558:	4c25      	ldr	r4, [pc, #148]	@ (801c5f0 <__pow5mult+0xa8>)
 801c55a:	3a01      	subs	r2, #1
 801c55c:	2300      	movs	r3, #0
 801c55e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c562:	f7ff fea7 	bl	801c2b4 <__multadd>
 801c566:	4606      	mov	r6, r0
 801c568:	10ad      	asrs	r5, r5, #2
 801c56a:	d03d      	beq.n	801c5e8 <__pow5mult+0xa0>
 801c56c:	69fc      	ldr	r4, [r7, #28]
 801c56e:	b97c      	cbnz	r4, 801c590 <__pow5mult+0x48>
 801c570:	2010      	movs	r0, #16
 801c572:	f7fe f953 	bl	801a81c <malloc>
 801c576:	4602      	mov	r2, r0
 801c578:	61f8      	str	r0, [r7, #28]
 801c57a:	b928      	cbnz	r0, 801c588 <__pow5mult+0x40>
 801c57c:	4b1d      	ldr	r3, [pc, #116]	@ (801c5f4 <__pow5mult+0xac>)
 801c57e:	481e      	ldr	r0, [pc, #120]	@ (801c5f8 <__pow5mult+0xb0>)
 801c580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801c584:	f000 fbcc 	bl	801cd20 <__assert_func>
 801c588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c58c:	6004      	str	r4, [r0, #0]
 801c58e:	60c4      	str	r4, [r0, #12]
 801c590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801c594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c598:	b94c      	cbnz	r4, 801c5ae <__pow5mult+0x66>
 801c59a:	f240 2171 	movw	r1, #625	@ 0x271
 801c59e:	4638      	mov	r0, r7
 801c5a0:	f7ff ff1a 	bl	801c3d8 <__i2b>
 801c5a4:	2300      	movs	r3, #0
 801c5a6:	f8c8 0008 	str.w	r0, [r8, #8]
 801c5aa:	4604      	mov	r4, r0
 801c5ac:	6003      	str	r3, [r0, #0]
 801c5ae:	f04f 0900 	mov.w	r9, #0
 801c5b2:	07eb      	lsls	r3, r5, #31
 801c5b4:	d50a      	bpl.n	801c5cc <__pow5mult+0x84>
 801c5b6:	4631      	mov	r1, r6
 801c5b8:	4622      	mov	r2, r4
 801c5ba:	4638      	mov	r0, r7
 801c5bc:	f7ff ff22 	bl	801c404 <__multiply>
 801c5c0:	4631      	mov	r1, r6
 801c5c2:	4680      	mov	r8, r0
 801c5c4:	4638      	mov	r0, r7
 801c5c6:	f7ff fe53 	bl	801c270 <_Bfree>
 801c5ca:	4646      	mov	r6, r8
 801c5cc:	106d      	asrs	r5, r5, #1
 801c5ce:	d00b      	beq.n	801c5e8 <__pow5mult+0xa0>
 801c5d0:	6820      	ldr	r0, [r4, #0]
 801c5d2:	b938      	cbnz	r0, 801c5e4 <__pow5mult+0x9c>
 801c5d4:	4622      	mov	r2, r4
 801c5d6:	4621      	mov	r1, r4
 801c5d8:	4638      	mov	r0, r7
 801c5da:	f7ff ff13 	bl	801c404 <__multiply>
 801c5de:	6020      	str	r0, [r4, #0]
 801c5e0:	f8c0 9000 	str.w	r9, [r0]
 801c5e4:	4604      	mov	r4, r0
 801c5e6:	e7e4      	b.n	801c5b2 <__pow5mult+0x6a>
 801c5e8:	4630      	mov	r0, r6
 801c5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c5ee:	bf00      	nop
 801c5f0:	0801dd90 	.word	0x0801dd90
 801c5f4:	0801dc5d 	.word	0x0801dc5d
 801c5f8:	0801dcdd 	.word	0x0801dcdd

0801c5fc <__lshift>:
 801c5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c600:	460c      	mov	r4, r1
 801c602:	6849      	ldr	r1, [r1, #4]
 801c604:	6923      	ldr	r3, [r4, #16]
 801c606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c60a:	68a3      	ldr	r3, [r4, #8]
 801c60c:	4607      	mov	r7, r0
 801c60e:	4691      	mov	r9, r2
 801c610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c614:	f108 0601 	add.w	r6, r8, #1
 801c618:	42b3      	cmp	r3, r6
 801c61a:	db0b      	blt.n	801c634 <__lshift+0x38>
 801c61c:	4638      	mov	r0, r7
 801c61e:	f7ff fde7 	bl	801c1f0 <_Balloc>
 801c622:	4605      	mov	r5, r0
 801c624:	b948      	cbnz	r0, 801c63a <__lshift+0x3e>
 801c626:	4602      	mov	r2, r0
 801c628:	4b28      	ldr	r3, [pc, #160]	@ (801c6cc <__lshift+0xd0>)
 801c62a:	4829      	ldr	r0, [pc, #164]	@ (801c6d0 <__lshift+0xd4>)
 801c62c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801c630:	f000 fb76 	bl	801cd20 <__assert_func>
 801c634:	3101      	adds	r1, #1
 801c636:	005b      	lsls	r3, r3, #1
 801c638:	e7ee      	b.n	801c618 <__lshift+0x1c>
 801c63a:	2300      	movs	r3, #0
 801c63c:	f100 0114 	add.w	r1, r0, #20
 801c640:	f100 0210 	add.w	r2, r0, #16
 801c644:	4618      	mov	r0, r3
 801c646:	4553      	cmp	r3, sl
 801c648:	db33      	blt.n	801c6b2 <__lshift+0xb6>
 801c64a:	6920      	ldr	r0, [r4, #16]
 801c64c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c650:	f104 0314 	add.w	r3, r4, #20
 801c654:	f019 091f 	ands.w	r9, r9, #31
 801c658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c65c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c660:	d02b      	beq.n	801c6ba <__lshift+0xbe>
 801c662:	f1c9 0e20 	rsb	lr, r9, #32
 801c666:	468a      	mov	sl, r1
 801c668:	2200      	movs	r2, #0
 801c66a:	6818      	ldr	r0, [r3, #0]
 801c66c:	fa00 f009 	lsl.w	r0, r0, r9
 801c670:	4310      	orrs	r0, r2
 801c672:	f84a 0b04 	str.w	r0, [sl], #4
 801c676:	f853 2b04 	ldr.w	r2, [r3], #4
 801c67a:	459c      	cmp	ip, r3
 801c67c:	fa22 f20e 	lsr.w	r2, r2, lr
 801c680:	d8f3      	bhi.n	801c66a <__lshift+0x6e>
 801c682:	ebac 0304 	sub.w	r3, ip, r4
 801c686:	3b15      	subs	r3, #21
 801c688:	f023 0303 	bic.w	r3, r3, #3
 801c68c:	3304      	adds	r3, #4
 801c68e:	f104 0015 	add.w	r0, r4, #21
 801c692:	4560      	cmp	r0, ip
 801c694:	bf88      	it	hi
 801c696:	2304      	movhi	r3, #4
 801c698:	50ca      	str	r2, [r1, r3]
 801c69a:	b10a      	cbz	r2, 801c6a0 <__lshift+0xa4>
 801c69c:	f108 0602 	add.w	r6, r8, #2
 801c6a0:	3e01      	subs	r6, #1
 801c6a2:	4638      	mov	r0, r7
 801c6a4:	612e      	str	r6, [r5, #16]
 801c6a6:	4621      	mov	r1, r4
 801c6a8:	f7ff fde2 	bl	801c270 <_Bfree>
 801c6ac:	4628      	mov	r0, r5
 801c6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6b2:	f842 0f04 	str.w	r0, [r2, #4]!
 801c6b6:	3301      	adds	r3, #1
 801c6b8:	e7c5      	b.n	801c646 <__lshift+0x4a>
 801c6ba:	3904      	subs	r1, #4
 801c6bc:	f853 2b04 	ldr.w	r2, [r3], #4
 801c6c0:	f841 2f04 	str.w	r2, [r1, #4]!
 801c6c4:	459c      	cmp	ip, r3
 801c6c6:	d8f9      	bhi.n	801c6bc <__lshift+0xc0>
 801c6c8:	e7ea      	b.n	801c6a0 <__lshift+0xa4>
 801c6ca:	bf00      	nop
 801c6cc:	0801dccc 	.word	0x0801dccc
 801c6d0:	0801dcdd 	.word	0x0801dcdd

0801c6d4 <__mcmp>:
 801c6d4:	690a      	ldr	r2, [r1, #16]
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	6900      	ldr	r0, [r0, #16]
 801c6da:	1a80      	subs	r0, r0, r2
 801c6dc:	b530      	push	{r4, r5, lr}
 801c6de:	d10e      	bne.n	801c6fe <__mcmp+0x2a>
 801c6e0:	3314      	adds	r3, #20
 801c6e2:	3114      	adds	r1, #20
 801c6e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801c6e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801c6ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801c6f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801c6f4:	4295      	cmp	r5, r2
 801c6f6:	d003      	beq.n	801c700 <__mcmp+0x2c>
 801c6f8:	d205      	bcs.n	801c706 <__mcmp+0x32>
 801c6fa:	f04f 30ff 	mov.w	r0, #4294967295
 801c6fe:	bd30      	pop	{r4, r5, pc}
 801c700:	42a3      	cmp	r3, r4
 801c702:	d3f3      	bcc.n	801c6ec <__mcmp+0x18>
 801c704:	e7fb      	b.n	801c6fe <__mcmp+0x2a>
 801c706:	2001      	movs	r0, #1
 801c708:	e7f9      	b.n	801c6fe <__mcmp+0x2a>
	...

0801c70c <__mdiff>:
 801c70c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c710:	4689      	mov	r9, r1
 801c712:	4606      	mov	r6, r0
 801c714:	4611      	mov	r1, r2
 801c716:	4648      	mov	r0, r9
 801c718:	4614      	mov	r4, r2
 801c71a:	f7ff ffdb 	bl	801c6d4 <__mcmp>
 801c71e:	1e05      	subs	r5, r0, #0
 801c720:	d112      	bne.n	801c748 <__mdiff+0x3c>
 801c722:	4629      	mov	r1, r5
 801c724:	4630      	mov	r0, r6
 801c726:	f7ff fd63 	bl	801c1f0 <_Balloc>
 801c72a:	4602      	mov	r2, r0
 801c72c:	b928      	cbnz	r0, 801c73a <__mdiff+0x2e>
 801c72e:	4b3f      	ldr	r3, [pc, #252]	@ (801c82c <__mdiff+0x120>)
 801c730:	f240 2137 	movw	r1, #567	@ 0x237
 801c734:	483e      	ldr	r0, [pc, #248]	@ (801c830 <__mdiff+0x124>)
 801c736:	f000 faf3 	bl	801cd20 <__assert_func>
 801c73a:	2301      	movs	r3, #1
 801c73c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c740:	4610      	mov	r0, r2
 801c742:	b003      	add	sp, #12
 801c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c748:	bfbc      	itt	lt
 801c74a:	464b      	movlt	r3, r9
 801c74c:	46a1      	movlt	r9, r4
 801c74e:	4630      	mov	r0, r6
 801c750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801c754:	bfba      	itte	lt
 801c756:	461c      	movlt	r4, r3
 801c758:	2501      	movlt	r5, #1
 801c75a:	2500      	movge	r5, #0
 801c75c:	f7ff fd48 	bl	801c1f0 <_Balloc>
 801c760:	4602      	mov	r2, r0
 801c762:	b918      	cbnz	r0, 801c76c <__mdiff+0x60>
 801c764:	4b31      	ldr	r3, [pc, #196]	@ (801c82c <__mdiff+0x120>)
 801c766:	f240 2145 	movw	r1, #581	@ 0x245
 801c76a:	e7e3      	b.n	801c734 <__mdiff+0x28>
 801c76c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c770:	6926      	ldr	r6, [r4, #16]
 801c772:	60c5      	str	r5, [r0, #12]
 801c774:	f109 0310 	add.w	r3, r9, #16
 801c778:	f109 0514 	add.w	r5, r9, #20
 801c77c:	f104 0e14 	add.w	lr, r4, #20
 801c780:	f100 0b14 	add.w	fp, r0, #20
 801c784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c78c:	9301      	str	r3, [sp, #4]
 801c78e:	46d9      	mov	r9, fp
 801c790:	f04f 0c00 	mov.w	ip, #0
 801c794:	9b01      	ldr	r3, [sp, #4]
 801c796:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c79a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c79e:	9301      	str	r3, [sp, #4]
 801c7a0:	fa1f f38a 	uxth.w	r3, sl
 801c7a4:	4619      	mov	r1, r3
 801c7a6:	b283      	uxth	r3, r0
 801c7a8:	1acb      	subs	r3, r1, r3
 801c7aa:	0c00      	lsrs	r0, r0, #16
 801c7ac:	4463      	add	r3, ip
 801c7ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c7b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c7b6:	b29b      	uxth	r3, r3
 801c7b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c7bc:	4576      	cmp	r6, lr
 801c7be:	f849 3b04 	str.w	r3, [r9], #4
 801c7c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c7c6:	d8e5      	bhi.n	801c794 <__mdiff+0x88>
 801c7c8:	1b33      	subs	r3, r6, r4
 801c7ca:	3b15      	subs	r3, #21
 801c7cc:	f023 0303 	bic.w	r3, r3, #3
 801c7d0:	3415      	adds	r4, #21
 801c7d2:	3304      	adds	r3, #4
 801c7d4:	42a6      	cmp	r6, r4
 801c7d6:	bf38      	it	cc
 801c7d8:	2304      	movcc	r3, #4
 801c7da:	441d      	add	r5, r3
 801c7dc:	445b      	add	r3, fp
 801c7de:	461e      	mov	r6, r3
 801c7e0:	462c      	mov	r4, r5
 801c7e2:	4544      	cmp	r4, r8
 801c7e4:	d30e      	bcc.n	801c804 <__mdiff+0xf8>
 801c7e6:	f108 0103 	add.w	r1, r8, #3
 801c7ea:	1b49      	subs	r1, r1, r5
 801c7ec:	f021 0103 	bic.w	r1, r1, #3
 801c7f0:	3d03      	subs	r5, #3
 801c7f2:	45a8      	cmp	r8, r5
 801c7f4:	bf38      	it	cc
 801c7f6:	2100      	movcc	r1, #0
 801c7f8:	440b      	add	r3, r1
 801c7fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c7fe:	b191      	cbz	r1, 801c826 <__mdiff+0x11a>
 801c800:	6117      	str	r7, [r2, #16]
 801c802:	e79d      	b.n	801c740 <__mdiff+0x34>
 801c804:	f854 1b04 	ldr.w	r1, [r4], #4
 801c808:	46e6      	mov	lr, ip
 801c80a:	0c08      	lsrs	r0, r1, #16
 801c80c:	fa1c fc81 	uxtah	ip, ip, r1
 801c810:	4471      	add	r1, lr
 801c812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c816:	b289      	uxth	r1, r1
 801c818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c81c:	f846 1b04 	str.w	r1, [r6], #4
 801c820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c824:	e7dd      	b.n	801c7e2 <__mdiff+0xd6>
 801c826:	3f01      	subs	r7, #1
 801c828:	e7e7      	b.n	801c7fa <__mdiff+0xee>
 801c82a:	bf00      	nop
 801c82c:	0801dccc 	.word	0x0801dccc
 801c830:	0801dcdd 	.word	0x0801dcdd

0801c834 <__d2b>:
 801c834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c838:	460f      	mov	r7, r1
 801c83a:	2101      	movs	r1, #1
 801c83c:	ec59 8b10 	vmov	r8, r9, d0
 801c840:	4616      	mov	r6, r2
 801c842:	f7ff fcd5 	bl	801c1f0 <_Balloc>
 801c846:	4604      	mov	r4, r0
 801c848:	b930      	cbnz	r0, 801c858 <__d2b+0x24>
 801c84a:	4602      	mov	r2, r0
 801c84c:	4b23      	ldr	r3, [pc, #140]	@ (801c8dc <__d2b+0xa8>)
 801c84e:	4824      	ldr	r0, [pc, #144]	@ (801c8e0 <__d2b+0xac>)
 801c850:	f240 310f 	movw	r1, #783	@ 0x30f
 801c854:	f000 fa64 	bl	801cd20 <__assert_func>
 801c858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c85c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c860:	b10d      	cbz	r5, 801c866 <__d2b+0x32>
 801c862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c866:	9301      	str	r3, [sp, #4]
 801c868:	f1b8 0300 	subs.w	r3, r8, #0
 801c86c:	d023      	beq.n	801c8b6 <__d2b+0x82>
 801c86e:	4668      	mov	r0, sp
 801c870:	9300      	str	r3, [sp, #0]
 801c872:	f7ff fd84 	bl	801c37e <__lo0bits>
 801c876:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c87a:	b1d0      	cbz	r0, 801c8b2 <__d2b+0x7e>
 801c87c:	f1c0 0320 	rsb	r3, r0, #32
 801c880:	fa02 f303 	lsl.w	r3, r2, r3
 801c884:	430b      	orrs	r3, r1
 801c886:	40c2      	lsrs	r2, r0
 801c888:	6163      	str	r3, [r4, #20]
 801c88a:	9201      	str	r2, [sp, #4]
 801c88c:	9b01      	ldr	r3, [sp, #4]
 801c88e:	61a3      	str	r3, [r4, #24]
 801c890:	2b00      	cmp	r3, #0
 801c892:	bf0c      	ite	eq
 801c894:	2201      	moveq	r2, #1
 801c896:	2202      	movne	r2, #2
 801c898:	6122      	str	r2, [r4, #16]
 801c89a:	b1a5      	cbz	r5, 801c8c6 <__d2b+0x92>
 801c89c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c8a0:	4405      	add	r5, r0
 801c8a2:	603d      	str	r5, [r7, #0]
 801c8a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c8a8:	6030      	str	r0, [r6, #0]
 801c8aa:	4620      	mov	r0, r4
 801c8ac:	b003      	add	sp, #12
 801c8ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8b2:	6161      	str	r1, [r4, #20]
 801c8b4:	e7ea      	b.n	801c88c <__d2b+0x58>
 801c8b6:	a801      	add	r0, sp, #4
 801c8b8:	f7ff fd61 	bl	801c37e <__lo0bits>
 801c8bc:	9b01      	ldr	r3, [sp, #4]
 801c8be:	6163      	str	r3, [r4, #20]
 801c8c0:	3020      	adds	r0, #32
 801c8c2:	2201      	movs	r2, #1
 801c8c4:	e7e8      	b.n	801c898 <__d2b+0x64>
 801c8c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c8ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c8ce:	6038      	str	r0, [r7, #0]
 801c8d0:	6918      	ldr	r0, [r3, #16]
 801c8d2:	f7ff fd35 	bl	801c340 <__hi0bits>
 801c8d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c8da:	e7e5      	b.n	801c8a8 <__d2b+0x74>
 801c8dc:	0801dccc 	.word	0x0801dccc
 801c8e0:	0801dcdd 	.word	0x0801dcdd

0801c8e4 <__ssputs_r>:
 801c8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c8e8:	688e      	ldr	r6, [r1, #8]
 801c8ea:	461f      	mov	r7, r3
 801c8ec:	42be      	cmp	r6, r7
 801c8ee:	680b      	ldr	r3, [r1, #0]
 801c8f0:	4682      	mov	sl, r0
 801c8f2:	460c      	mov	r4, r1
 801c8f4:	4690      	mov	r8, r2
 801c8f6:	d82d      	bhi.n	801c954 <__ssputs_r+0x70>
 801c8f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c8fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c900:	d026      	beq.n	801c950 <__ssputs_r+0x6c>
 801c902:	6965      	ldr	r5, [r4, #20]
 801c904:	6909      	ldr	r1, [r1, #16]
 801c906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c90a:	eba3 0901 	sub.w	r9, r3, r1
 801c90e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c912:	1c7b      	adds	r3, r7, #1
 801c914:	444b      	add	r3, r9
 801c916:	106d      	asrs	r5, r5, #1
 801c918:	429d      	cmp	r5, r3
 801c91a:	bf38      	it	cc
 801c91c:	461d      	movcc	r5, r3
 801c91e:	0553      	lsls	r3, r2, #21
 801c920:	d527      	bpl.n	801c972 <__ssputs_r+0x8e>
 801c922:	4629      	mov	r1, r5
 801c924:	f7fd ffa4 	bl	801a870 <_malloc_r>
 801c928:	4606      	mov	r6, r0
 801c92a:	b360      	cbz	r0, 801c986 <__ssputs_r+0xa2>
 801c92c:	6921      	ldr	r1, [r4, #16]
 801c92e:	464a      	mov	r2, r9
 801c930:	f7fe fe1f 	bl	801b572 <memcpy>
 801c934:	89a3      	ldrh	r3, [r4, #12]
 801c936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c93e:	81a3      	strh	r3, [r4, #12]
 801c940:	6126      	str	r6, [r4, #16]
 801c942:	6165      	str	r5, [r4, #20]
 801c944:	444e      	add	r6, r9
 801c946:	eba5 0509 	sub.w	r5, r5, r9
 801c94a:	6026      	str	r6, [r4, #0]
 801c94c:	60a5      	str	r5, [r4, #8]
 801c94e:	463e      	mov	r6, r7
 801c950:	42be      	cmp	r6, r7
 801c952:	d900      	bls.n	801c956 <__ssputs_r+0x72>
 801c954:	463e      	mov	r6, r7
 801c956:	6820      	ldr	r0, [r4, #0]
 801c958:	4632      	mov	r2, r6
 801c95a:	4641      	mov	r1, r8
 801c95c:	f000 f9c6 	bl	801ccec <memmove>
 801c960:	68a3      	ldr	r3, [r4, #8]
 801c962:	1b9b      	subs	r3, r3, r6
 801c964:	60a3      	str	r3, [r4, #8]
 801c966:	6823      	ldr	r3, [r4, #0]
 801c968:	4433      	add	r3, r6
 801c96a:	6023      	str	r3, [r4, #0]
 801c96c:	2000      	movs	r0, #0
 801c96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c972:	462a      	mov	r2, r5
 801c974:	f000 fa18 	bl	801cda8 <_realloc_r>
 801c978:	4606      	mov	r6, r0
 801c97a:	2800      	cmp	r0, #0
 801c97c:	d1e0      	bne.n	801c940 <__ssputs_r+0x5c>
 801c97e:	6921      	ldr	r1, [r4, #16]
 801c980:	4650      	mov	r0, sl
 801c982:	f7ff fbeb 	bl	801c15c <_free_r>
 801c986:	230c      	movs	r3, #12
 801c988:	f8ca 3000 	str.w	r3, [sl]
 801c98c:	89a3      	ldrh	r3, [r4, #12]
 801c98e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c992:	81a3      	strh	r3, [r4, #12]
 801c994:	f04f 30ff 	mov.w	r0, #4294967295
 801c998:	e7e9      	b.n	801c96e <__ssputs_r+0x8a>
	...

0801c99c <_svfiprintf_r>:
 801c99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9a0:	4698      	mov	r8, r3
 801c9a2:	898b      	ldrh	r3, [r1, #12]
 801c9a4:	061b      	lsls	r3, r3, #24
 801c9a6:	b09d      	sub	sp, #116	@ 0x74
 801c9a8:	4607      	mov	r7, r0
 801c9aa:	460d      	mov	r5, r1
 801c9ac:	4614      	mov	r4, r2
 801c9ae:	d510      	bpl.n	801c9d2 <_svfiprintf_r+0x36>
 801c9b0:	690b      	ldr	r3, [r1, #16]
 801c9b2:	b973      	cbnz	r3, 801c9d2 <_svfiprintf_r+0x36>
 801c9b4:	2140      	movs	r1, #64	@ 0x40
 801c9b6:	f7fd ff5b 	bl	801a870 <_malloc_r>
 801c9ba:	6028      	str	r0, [r5, #0]
 801c9bc:	6128      	str	r0, [r5, #16]
 801c9be:	b930      	cbnz	r0, 801c9ce <_svfiprintf_r+0x32>
 801c9c0:	230c      	movs	r3, #12
 801c9c2:	603b      	str	r3, [r7, #0]
 801c9c4:	f04f 30ff 	mov.w	r0, #4294967295
 801c9c8:	b01d      	add	sp, #116	@ 0x74
 801c9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9ce:	2340      	movs	r3, #64	@ 0x40
 801c9d0:	616b      	str	r3, [r5, #20]
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9d6:	2320      	movs	r3, #32
 801c9d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c9dc:	f8cd 800c 	str.w	r8, [sp, #12]
 801c9e0:	2330      	movs	r3, #48	@ 0x30
 801c9e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cb80 <_svfiprintf_r+0x1e4>
 801c9e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c9ea:	f04f 0901 	mov.w	r9, #1
 801c9ee:	4623      	mov	r3, r4
 801c9f0:	469a      	mov	sl, r3
 801c9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9f6:	b10a      	cbz	r2, 801c9fc <_svfiprintf_r+0x60>
 801c9f8:	2a25      	cmp	r2, #37	@ 0x25
 801c9fa:	d1f9      	bne.n	801c9f0 <_svfiprintf_r+0x54>
 801c9fc:	ebba 0b04 	subs.w	fp, sl, r4
 801ca00:	d00b      	beq.n	801ca1a <_svfiprintf_r+0x7e>
 801ca02:	465b      	mov	r3, fp
 801ca04:	4622      	mov	r2, r4
 801ca06:	4629      	mov	r1, r5
 801ca08:	4638      	mov	r0, r7
 801ca0a:	f7ff ff6b 	bl	801c8e4 <__ssputs_r>
 801ca0e:	3001      	adds	r0, #1
 801ca10:	f000 80a7 	beq.w	801cb62 <_svfiprintf_r+0x1c6>
 801ca14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca16:	445a      	add	r2, fp
 801ca18:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca1a:	f89a 3000 	ldrb.w	r3, [sl]
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	f000 809f 	beq.w	801cb62 <_svfiprintf_r+0x1c6>
 801ca24:	2300      	movs	r3, #0
 801ca26:	f04f 32ff 	mov.w	r2, #4294967295
 801ca2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca2e:	f10a 0a01 	add.w	sl, sl, #1
 801ca32:	9304      	str	r3, [sp, #16]
 801ca34:	9307      	str	r3, [sp, #28]
 801ca36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ca3a:	931a      	str	r3, [sp, #104]	@ 0x68
 801ca3c:	4654      	mov	r4, sl
 801ca3e:	2205      	movs	r2, #5
 801ca40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca44:	484e      	ldr	r0, [pc, #312]	@ (801cb80 <_svfiprintf_r+0x1e4>)
 801ca46:	f7e3 fc4b 	bl	80002e0 <memchr>
 801ca4a:	9a04      	ldr	r2, [sp, #16]
 801ca4c:	b9d8      	cbnz	r0, 801ca86 <_svfiprintf_r+0xea>
 801ca4e:	06d0      	lsls	r0, r2, #27
 801ca50:	bf44      	itt	mi
 801ca52:	2320      	movmi	r3, #32
 801ca54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca58:	0711      	lsls	r1, r2, #28
 801ca5a:	bf44      	itt	mi
 801ca5c:	232b      	movmi	r3, #43	@ 0x2b
 801ca5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ca62:	f89a 3000 	ldrb.w	r3, [sl]
 801ca66:	2b2a      	cmp	r3, #42	@ 0x2a
 801ca68:	d015      	beq.n	801ca96 <_svfiprintf_r+0xfa>
 801ca6a:	9a07      	ldr	r2, [sp, #28]
 801ca6c:	4654      	mov	r4, sl
 801ca6e:	2000      	movs	r0, #0
 801ca70:	f04f 0c0a 	mov.w	ip, #10
 801ca74:	4621      	mov	r1, r4
 801ca76:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ca7a:	3b30      	subs	r3, #48	@ 0x30
 801ca7c:	2b09      	cmp	r3, #9
 801ca7e:	d94b      	bls.n	801cb18 <_svfiprintf_r+0x17c>
 801ca80:	b1b0      	cbz	r0, 801cab0 <_svfiprintf_r+0x114>
 801ca82:	9207      	str	r2, [sp, #28]
 801ca84:	e014      	b.n	801cab0 <_svfiprintf_r+0x114>
 801ca86:	eba0 0308 	sub.w	r3, r0, r8
 801ca8a:	fa09 f303 	lsl.w	r3, r9, r3
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	9304      	str	r3, [sp, #16]
 801ca92:	46a2      	mov	sl, r4
 801ca94:	e7d2      	b.n	801ca3c <_svfiprintf_r+0xa0>
 801ca96:	9b03      	ldr	r3, [sp, #12]
 801ca98:	1d19      	adds	r1, r3, #4
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	9103      	str	r1, [sp, #12]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	bfbb      	ittet	lt
 801caa2:	425b      	neglt	r3, r3
 801caa4:	f042 0202 	orrlt.w	r2, r2, #2
 801caa8:	9307      	strge	r3, [sp, #28]
 801caaa:	9307      	strlt	r3, [sp, #28]
 801caac:	bfb8      	it	lt
 801caae:	9204      	strlt	r2, [sp, #16]
 801cab0:	7823      	ldrb	r3, [r4, #0]
 801cab2:	2b2e      	cmp	r3, #46	@ 0x2e
 801cab4:	d10a      	bne.n	801cacc <_svfiprintf_r+0x130>
 801cab6:	7863      	ldrb	r3, [r4, #1]
 801cab8:	2b2a      	cmp	r3, #42	@ 0x2a
 801caba:	d132      	bne.n	801cb22 <_svfiprintf_r+0x186>
 801cabc:	9b03      	ldr	r3, [sp, #12]
 801cabe:	1d1a      	adds	r2, r3, #4
 801cac0:	681b      	ldr	r3, [r3, #0]
 801cac2:	9203      	str	r2, [sp, #12]
 801cac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cac8:	3402      	adds	r4, #2
 801caca:	9305      	str	r3, [sp, #20]
 801cacc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cb90 <_svfiprintf_r+0x1f4>
 801cad0:	7821      	ldrb	r1, [r4, #0]
 801cad2:	2203      	movs	r2, #3
 801cad4:	4650      	mov	r0, sl
 801cad6:	f7e3 fc03 	bl	80002e0 <memchr>
 801cada:	b138      	cbz	r0, 801caec <_svfiprintf_r+0x150>
 801cadc:	9b04      	ldr	r3, [sp, #16]
 801cade:	eba0 000a 	sub.w	r0, r0, sl
 801cae2:	2240      	movs	r2, #64	@ 0x40
 801cae4:	4082      	lsls	r2, r0
 801cae6:	4313      	orrs	r3, r2
 801cae8:	3401      	adds	r4, #1
 801caea:	9304      	str	r3, [sp, #16]
 801caec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801caf0:	4824      	ldr	r0, [pc, #144]	@ (801cb84 <_svfiprintf_r+0x1e8>)
 801caf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801caf6:	2206      	movs	r2, #6
 801caf8:	f7e3 fbf2 	bl	80002e0 <memchr>
 801cafc:	2800      	cmp	r0, #0
 801cafe:	d036      	beq.n	801cb6e <_svfiprintf_r+0x1d2>
 801cb00:	4b21      	ldr	r3, [pc, #132]	@ (801cb88 <_svfiprintf_r+0x1ec>)
 801cb02:	bb1b      	cbnz	r3, 801cb4c <_svfiprintf_r+0x1b0>
 801cb04:	9b03      	ldr	r3, [sp, #12]
 801cb06:	3307      	adds	r3, #7
 801cb08:	f023 0307 	bic.w	r3, r3, #7
 801cb0c:	3308      	adds	r3, #8
 801cb0e:	9303      	str	r3, [sp, #12]
 801cb10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb12:	4433      	add	r3, r6
 801cb14:	9309      	str	r3, [sp, #36]	@ 0x24
 801cb16:	e76a      	b.n	801c9ee <_svfiprintf_r+0x52>
 801cb18:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb1c:	460c      	mov	r4, r1
 801cb1e:	2001      	movs	r0, #1
 801cb20:	e7a8      	b.n	801ca74 <_svfiprintf_r+0xd8>
 801cb22:	2300      	movs	r3, #0
 801cb24:	3401      	adds	r4, #1
 801cb26:	9305      	str	r3, [sp, #20]
 801cb28:	4619      	mov	r1, r3
 801cb2a:	f04f 0c0a 	mov.w	ip, #10
 801cb2e:	4620      	mov	r0, r4
 801cb30:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb34:	3a30      	subs	r2, #48	@ 0x30
 801cb36:	2a09      	cmp	r2, #9
 801cb38:	d903      	bls.n	801cb42 <_svfiprintf_r+0x1a6>
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	d0c6      	beq.n	801cacc <_svfiprintf_r+0x130>
 801cb3e:	9105      	str	r1, [sp, #20]
 801cb40:	e7c4      	b.n	801cacc <_svfiprintf_r+0x130>
 801cb42:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb46:	4604      	mov	r4, r0
 801cb48:	2301      	movs	r3, #1
 801cb4a:	e7f0      	b.n	801cb2e <_svfiprintf_r+0x192>
 801cb4c:	ab03      	add	r3, sp, #12
 801cb4e:	9300      	str	r3, [sp, #0]
 801cb50:	462a      	mov	r2, r5
 801cb52:	4b0e      	ldr	r3, [pc, #56]	@ (801cb8c <_svfiprintf_r+0x1f0>)
 801cb54:	a904      	add	r1, sp, #16
 801cb56:	4638      	mov	r0, r7
 801cb58:	f7fd ffa6 	bl	801aaa8 <_printf_float>
 801cb5c:	1c42      	adds	r2, r0, #1
 801cb5e:	4606      	mov	r6, r0
 801cb60:	d1d6      	bne.n	801cb10 <_svfiprintf_r+0x174>
 801cb62:	89ab      	ldrh	r3, [r5, #12]
 801cb64:	065b      	lsls	r3, r3, #25
 801cb66:	f53f af2d 	bmi.w	801c9c4 <_svfiprintf_r+0x28>
 801cb6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cb6c:	e72c      	b.n	801c9c8 <_svfiprintf_r+0x2c>
 801cb6e:	ab03      	add	r3, sp, #12
 801cb70:	9300      	str	r3, [sp, #0]
 801cb72:	462a      	mov	r2, r5
 801cb74:	4b05      	ldr	r3, [pc, #20]	@ (801cb8c <_svfiprintf_r+0x1f0>)
 801cb76:	a904      	add	r1, sp, #16
 801cb78:	4638      	mov	r0, r7
 801cb7a:	f7fe fa1d 	bl	801afb8 <_printf_i>
 801cb7e:	e7ed      	b.n	801cb5c <_svfiprintf_r+0x1c0>
 801cb80:	0801dd36 	.word	0x0801dd36
 801cb84:	0801dd40 	.word	0x0801dd40
 801cb88:	0801aaa9 	.word	0x0801aaa9
 801cb8c:	0801c8e5 	.word	0x0801c8e5
 801cb90:	0801dd3c 	.word	0x0801dd3c

0801cb94 <__sflush_r>:
 801cb94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb9c:	0716      	lsls	r6, r2, #28
 801cb9e:	4605      	mov	r5, r0
 801cba0:	460c      	mov	r4, r1
 801cba2:	d454      	bmi.n	801cc4e <__sflush_r+0xba>
 801cba4:	684b      	ldr	r3, [r1, #4]
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	dc02      	bgt.n	801cbb0 <__sflush_r+0x1c>
 801cbaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	dd48      	ble.n	801cc42 <__sflush_r+0xae>
 801cbb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cbb2:	2e00      	cmp	r6, #0
 801cbb4:	d045      	beq.n	801cc42 <__sflush_r+0xae>
 801cbb6:	2300      	movs	r3, #0
 801cbb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801cbbc:	682f      	ldr	r7, [r5, #0]
 801cbbe:	6a21      	ldr	r1, [r4, #32]
 801cbc0:	602b      	str	r3, [r5, #0]
 801cbc2:	d030      	beq.n	801cc26 <__sflush_r+0x92>
 801cbc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801cbc6:	89a3      	ldrh	r3, [r4, #12]
 801cbc8:	0759      	lsls	r1, r3, #29
 801cbca:	d505      	bpl.n	801cbd8 <__sflush_r+0x44>
 801cbcc:	6863      	ldr	r3, [r4, #4]
 801cbce:	1ad2      	subs	r2, r2, r3
 801cbd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cbd2:	b10b      	cbz	r3, 801cbd8 <__sflush_r+0x44>
 801cbd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cbd6:	1ad2      	subs	r2, r2, r3
 801cbd8:	2300      	movs	r3, #0
 801cbda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801cbdc:	6a21      	ldr	r1, [r4, #32]
 801cbde:	4628      	mov	r0, r5
 801cbe0:	47b0      	blx	r6
 801cbe2:	1c43      	adds	r3, r0, #1
 801cbe4:	89a3      	ldrh	r3, [r4, #12]
 801cbe6:	d106      	bne.n	801cbf6 <__sflush_r+0x62>
 801cbe8:	6829      	ldr	r1, [r5, #0]
 801cbea:	291d      	cmp	r1, #29
 801cbec:	d82b      	bhi.n	801cc46 <__sflush_r+0xb2>
 801cbee:	4a2a      	ldr	r2, [pc, #168]	@ (801cc98 <__sflush_r+0x104>)
 801cbf0:	40ca      	lsrs	r2, r1
 801cbf2:	07d6      	lsls	r6, r2, #31
 801cbf4:	d527      	bpl.n	801cc46 <__sflush_r+0xb2>
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	6062      	str	r2, [r4, #4]
 801cbfa:	04d9      	lsls	r1, r3, #19
 801cbfc:	6922      	ldr	r2, [r4, #16]
 801cbfe:	6022      	str	r2, [r4, #0]
 801cc00:	d504      	bpl.n	801cc0c <__sflush_r+0x78>
 801cc02:	1c42      	adds	r2, r0, #1
 801cc04:	d101      	bne.n	801cc0a <__sflush_r+0x76>
 801cc06:	682b      	ldr	r3, [r5, #0]
 801cc08:	b903      	cbnz	r3, 801cc0c <__sflush_r+0x78>
 801cc0a:	6560      	str	r0, [r4, #84]	@ 0x54
 801cc0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801cc0e:	602f      	str	r7, [r5, #0]
 801cc10:	b1b9      	cbz	r1, 801cc42 <__sflush_r+0xae>
 801cc12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cc16:	4299      	cmp	r1, r3
 801cc18:	d002      	beq.n	801cc20 <__sflush_r+0x8c>
 801cc1a:	4628      	mov	r0, r5
 801cc1c:	f7ff fa9e 	bl	801c15c <_free_r>
 801cc20:	2300      	movs	r3, #0
 801cc22:	6363      	str	r3, [r4, #52]	@ 0x34
 801cc24:	e00d      	b.n	801cc42 <__sflush_r+0xae>
 801cc26:	2301      	movs	r3, #1
 801cc28:	4628      	mov	r0, r5
 801cc2a:	47b0      	blx	r6
 801cc2c:	4602      	mov	r2, r0
 801cc2e:	1c50      	adds	r0, r2, #1
 801cc30:	d1c9      	bne.n	801cbc6 <__sflush_r+0x32>
 801cc32:	682b      	ldr	r3, [r5, #0]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d0c6      	beq.n	801cbc6 <__sflush_r+0x32>
 801cc38:	2b1d      	cmp	r3, #29
 801cc3a:	d001      	beq.n	801cc40 <__sflush_r+0xac>
 801cc3c:	2b16      	cmp	r3, #22
 801cc3e:	d11e      	bne.n	801cc7e <__sflush_r+0xea>
 801cc40:	602f      	str	r7, [r5, #0]
 801cc42:	2000      	movs	r0, #0
 801cc44:	e022      	b.n	801cc8c <__sflush_r+0xf8>
 801cc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc4a:	b21b      	sxth	r3, r3
 801cc4c:	e01b      	b.n	801cc86 <__sflush_r+0xf2>
 801cc4e:	690f      	ldr	r7, [r1, #16]
 801cc50:	2f00      	cmp	r7, #0
 801cc52:	d0f6      	beq.n	801cc42 <__sflush_r+0xae>
 801cc54:	0793      	lsls	r3, r2, #30
 801cc56:	680e      	ldr	r6, [r1, #0]
 801cc58:	bf08      	it	eq
 801cc5a:	694b      	ldreq	r3, [r1, #20]
 801cc5c:	600f      	str	r7, [r1, #0]
 801cc5e:	bf18      	it	ne
 801cc60:	2300      	movne	r3, #0
 801cc62:	eba6 0807 	sub.w	r8, r6, r7
 801cc66:	608b      	str	r3, [r1, #8]
 801cc68:	f1b8 0f00 	cmp.w	r8, #0
 801cc6c:	dde9      	ble.n	801cc42 <__sflush_r+0xae>
 801cc6e:	6a21      	ldr	r1, [r4, #32]
 801cc70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801cc72:	4643      	mov	r3, r8
 801cc74:	463a      	mov	r2, r7
 801cc76:	4628      	mov	r0, r5
 801cc78:	47b0      	blx	r6
 801cc7a:	2800      	cmp	r0, #0
 801cc7c:	dc08      	bgt.n	801cc90 <__sflush_r+0xfc>
 801cc7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cc82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cc86:	81a3      	strh	r3, [r4, #12]
 801cc88:	f04f 30ff 	mov.w	r0, #4294967295
 801cc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc90:	4407      	add	r7, r0
 801cc92:	eba8 0800 	sub.w	r8, r8, r0
 801cc96:	e7e7      	b.n	801cc68 <__sflush_r+0xd4>
 801cc98:	20400001 	.word	0x20400001

0801cc9c <_fflush_r>:
 801cc9c:	b538      	push	{r3, r4, r5, lr}
 801cc9e:	690b      	ldr	r3, [r1, #16]
 801cca0:	4605      	mov	r5, r0
 801cca2:	460c      	mov	r4, r1
 801cca4:	b913      	cbnz	r3, 801ccac <_fflush_r+0x10>
 801cca6:	2500      	movs	r5, #0
 801cca8:	4628      	mov	r0, r5
 801ccaa:	bd38      	pop	{r3, r4, r5, pc}
 801ccac:	b118      	cbz	r0, 801ccb6 <_fflush_r+0x1a>
 801ccae:	6a03      	ldr	r3, [r0, #32]
 801ccb0:	b90b      	cbnz	r3, 801ccb6 <_fflush_r+0x1a>
 801ccb2:	f7fe fb2b 	bl	801b30c <__sinit>
 801ccb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d0f3      	beq.n	801cca6 <_fflush_r+0xa>
 801ccbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ccc0:	07d0      	lsls	r0, r2, #31
 801ccc2:	d404      	bmi.n	801ccce <_fflush_r+0x32>
 801ccc4:	0599      	lsls	r1, r3, #22
 801ccc6:	d402      	bmi.n	801ccce <_fflush_r+0x32>
 801ccc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ccca:	f7fe fc48 	bl	801b55e <__retarget_lock_acquire_recursive>
 801ccce:	4628      	mov	r0, r5
 801ccd0:	4621      	mov	r1, r4
 801ccd2:	f7ff ff5f 	bl	801cb94 <__sflush_r>
 801ccd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ccd8:	07da      	lsls	r2, r3, #31
 801ccda:	4605      	mov	r5, r0
 801ccdc:	d4e4      	bmi.n	801cca8 <_fflush_r+0xc>
 801ccde:	89a3      	ldrh	r3, [r4, #12]
 801cce0:	059b      	lsls	r3, r3, #22
 801cce2:	d4e1      	bmi.n	801cca8 <_fflush_r+0xc>
 801cce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cce6:	f7fe fc3b 	bl	801b560 <__retarget_lock_release_recursive>
 801ccea:	e7dd      	b.n	801cca8 <_fflush_r+0xc>

0801ccec <memmove>:
 801ccec:	4288      	cmp	r0, r1
 801ccee:	b510      	push	{r4, lr}
 801ccf0:	eb01 0402 	add.w	r4, r1, r2
 801ccf4:	d902      	bls.n	801ccfc <memmove+0x10>
 801ccf6:	4284      	cmp	r4, r0
 801ccf8:	4623      	mov	r3, r4
 801ccfa:	d807      	bhi.n	801cd0c <memmove+0x20>
 801ccfc:	1e43      	subs	r3, r0, #1
 801ccfe:	42a1      	cmp	r1, r4
 801cd00:	d008      	beq.n	801cd14 <memmove+0x28>
 801cd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cd06:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cd0a:	e7f8      	b.n	801ccfe <memmove+0x12>
 801cd0c:	4402      	add	r2, r0
 801cd0e:	4601      	mov	r1, r0
 801cd10:	428a      	cmp	r2, r1
 801cd12:	d100      	bne.n	801cd16 <memmove+0x2a>
 801cd14:	bd10      	pop	{r4, pc}
 801cd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cd1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cd1e:	e7f7      	b.n	801cd10 <memmove+0x24>

0801cd20 <__assert_func>:
 801cd20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cd22:	4614      	mov	r4, r2
 801cd24:	461a      	mov	r2, r3
 801cd26:	4b09      	ldr	r3, [pc, #36]	@ (801cd4c <__assert_func+0x2c>)
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	4605      	mov	r5, r0
 801cd2c:	68d8      	ldr	r0, [r3, #12]
 801cd2e:	b14c      	cbz	r4, 801cd44 <__assert_func+0x24>
 801cd30:	4b07      	ldr	r3, [pc, #28]	@ (801cd50 <__assert_func+0x30>)
 801cd32:	9100      	str	r1, [sp, #0]
 801cd34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cd38:	4906      	ldr	r1, [pc, #24]	@ (801cd54 <__assert_func+0x34>)
 801cd3a:	462b      	mov	r3, r5
 801cd3c:	f000 f870 	bl	801ce20 <fiprintf>
 801cd40:	f000 f880 	bl	801ce44 <abort>
 801cd44:	4b04      	ldr	r3, [pc, #16]	@ (801cd58 <__assert_func+0x38>)
 801cd46:	461c      	mov	r4, r3
 801cd48:	e7f3      	b.n	801cd32 <__assert_func+0x12>
 801cd4a:	bf00      	nop
 801cd4c:	24000350 	.word	0x24000350
 801cd50:	0801dd51 	.word	0x0801dd51
 801cd54:	0801dd5e 	.word	0x0801dd5e
 801cd58:	0801dd8c 	.word	0x0801dd8c

0801cd5c <_calloc_r>:
 801cd5c:	b570      	push	{r4, r5, r6, lr}
 801cd5e:	fba1 5402 	umull	r5, r4, r1, r2
 801cd62:	b934      	cbnz	r4, 801cd72 <_calloc_r+0x16>
 801cd64:	4629      	mov	r1, r5
 801cd66:	f7fd fd83 	bl	801a870 <_malloc_r>
 801cd6a:	4606      	mov	r6, r0
 801cd6c:	b928      	cbnz	r0, 801cd7a <_calloc_r+0x1e>
 801cd6e:	4630      	mov	r0, r6
 801cd70:	bd70      	pop	{r4, r5, r6, pc}
 801cd72:	220c      	movs	r2, #12
 801cd74:	6002      	str	r2, [r0, #0]
 801cd76:	2600      	movs	r6, #0
 801cd78:	e7f9      	b.n	801cd6e <_calloc_r+0x12>
 801cd7a:	462a      	mov	r2, r5
 801cd7c:	4621      	mov	r1, r4
 801cd7e:	f7fe fb60 	bl	801b442 <memset>
 801cd82:	e7f4      	b.n	801cd6e <_calloc_r+0x12>

0801cd84 <__ascii_mbtowc>:
 801cd84:	b082      	sub	sp, #8
 801cd86:	b901      	cbnz	r1, 801cd8a <__ascii_mbtowc+0x6>
 801cd88:	a901      	add	r1, sp, #4
 801cd8a:	b142      	cbz	r2, 801cd9e <__ascii_mbtowc+0x1a>
 801cd8c:	b14b      	cbz	r3, 801cda2 <__ascii_mbtowc+0x1e>
 801cd8e:	7813      	ldrb	r3, [r2, #0]
 801cd90:	600b      	str	r3, [r1, #0]
 801cd92:	7812      	ldrb	r2, [r2, #0]
 801cd94:	1e10      	subs	r0, r2, #0
 801cd96:	bf18      	it	ne
 801cd98:	2001      	movne	r0, #1
 801cd9a:	b002      	add	sp, #8
 801cd9c:	4770      	bx	lr
 801cd9e:	4610      	mov	r0, r2
 801cda0:	e7fb      	b.n	801cd9a <__ascii_mbtowc+0x16>
 801cda2:	f06f 0001 	mvn.w	r0, #1
 801cda6:	e7f8      	b.n	801cd9a <__ascii_mbtowc+0x16>

0801cda8 <_realloc_r>:
 801cda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cdac:	4607      	mov	r7, r0
 801cdae:	4614      	mov	r4, r2
 801cdb0:	460d      	mov	r5, r1
 801cdb2:	b921      	cbnz	r1, 801cdbe <_realloc_r+0x16>
 801cdb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cdb8:	4611      	mov	r1, r2
 801cdba:	f7fd bd59 	b.w	801a870 <_malloc_r>
 801cdbe:	b92a      	cbnz	r2, 801cdcc <_realloc_r+0x24>
 801cdc0:	f7ff f9cc 	bl	801c15c <_free_r>
 801cdc4:	4625      	mov	r5, r4
 801cdc6:	4628      	mov	r0, r5
 801cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdcc:	f000 f841 	bl	801ce52 <_malloc_usable_size_r>
 801cdd0:	4284      	cmp	r4, r0
 801cdd2:	4606      	mov	r6, r0
 801cdd4:	d802      	bhi.n	801cddc <_realloc_r+0x34>
 801cdd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cdda:	d8f4      	bhi.n	801cdc6 <_realloc_r+0x1e>
 801cddc:	4621      	mov	r1, r4
 801cdde:	4638      	mov	r0, r7
 801cde0:	f7fd fd46 	bl	801a870 <_malloc_r>
 801cde4:	4680      	mov	r8, r0
 801cde6:	b908      	cbnz	r0, 801cdec <_realloc_r+0x44>
 801cde8:	4645      	mov	r5, r8
 801cdea:	e7ec      	b.n	801cdc6 <_realloc_r+0x1e>
 801cdec:	42b4      	cmp	r4, r6
 801cdee:	4622      	mov	r2, r4
 801cdf0:	4629      	mov	r1, r5
 801cdf2:	bf28      	it	cs
 801cdf4:	4632      	movcs	r2, r6
 801cdf6:	f7fe fbbc 	bl	801b572 <memcpy>
 801cdfa:	4629      	mov	r1, r5
 801cdfc:	4638      	mov	r0, r7
 801cdfe:	f7ff f9ad 	bl	801c15c <_free_r>
 801ce02:	e7f1      	b.n	801cde8 <_realloc_r+0x40>

0801ce04 <__ascii_wctomb>:
 801ce04:	4603      	mov	r3, r0
 801ce06:	4608      	mov	r0, r1
 801ce08:	b141      	cbz	r1, 801ce1c <__ascii_wctomb+0x18>
 801ce0a:	2aff      	cmp	r2, #255	@ 0xff
 801ce0c:	d904      	bls.n	801ce18 <__ascii_wctomb+0x14>
 801ce0e:	228a      	movs	r2, #138	@ 0x8a
 801ce10:	601a      	str	r2, [r3, #0]
 801ce12:	f04f 30ff 	mov.w	r0, #4294967295
 801ce16:	4770      	bx	lr
 801ce18:	700a      	strb	r2, [r1, #0]
 801ce1a:	2001      	movs	r0, #1
 801ce1c:	4770      	bx	lr
	...

0801ce20 <fiprintf>:
 801ce20:	b40e      	push	{r1, r2, r3}
 801ce22:	b503      	push	{r0, r1, lr}
 801ce24:	4601      	mov	r1, r0
 801ce26:	ab03      	add	r3, sp, #12
 801ce28:	4805      	ldr	r0, [pc, #20]	@ (801ce40 <fiprintf+0x20>)
 801ce2a:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce2e:	6800      	ldr	r0, [r0, #0]
 801ce30:	9301      	str	r3, [sp, #4]
 801ce32:	f000 f83f 	bl	801ceb4 <_vfiprintf_r>
 801ce36:	b002      	add	sp, #8
 801ce38:	f85d eb04 	ldr.w	lr, [sp], #4
 801ce3c:	b003      	add	sp, #12
 801ce3e:	4770      	bx	lr
 801ce40:	24000350 	.word	0x24000350

0801ce44 <abort>:
 801ce44:	b508      	push	{r3, lr}
 801ce46:	2006      	movs	r0, #6
 801ce48:	f000 fa08 	bl	801d25c <raise>
 801ce4c:	2001      	movs	r0, #1
 801ce4e:	f7e5 fba3 	bl	8002598 <_exit>

0801ce52 <_malloc_usable_size_r>:
 801ce52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ce56:	1f18      	subs	r0, r3, #4
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	bfbc      	itt	lt
 801ce5c:	580b      	ldrlt	r3, [r1, r0]
 801ce5e:	18c0      	addlt	r0, r0, r3
 801ce60:	4770      	bx	lr

0801ce62 <__sfputc_r>:
 801ce62:	6893      	ldr	r3, [r2, #8]
 801ce64:	3b01      	subs	r3, #1
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	b410      	push	{r4}
 801ce6a:	6093      	str	r3, [r2, #8]
 801ce6c:	da08      	bge.n	801ce80 <__sfputc_r+0x1e>
 801ce6e:	6994      	ldr	r4, [r2, #24]
 801ce70:	42a3      	cmp	r3, r4
 801ce72:	db01      	blt.n	801ce78 <__sfputc_r+0x16>
 801ce74:	290a      	cmp	r1, #10
 801ce76:	d103      	bne.n	801ce80 <__sfputc_r+0x1e>
 801ce78:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce7c:	f000 b932 	b.w	801d0e4 <__swbuf_r>
 801ce80:	6813      	ldr	r3, [r2, #0]
 801ce82:	1c58      	adds	r0, r3, #1
 801ce84:	6010      	str	r0, [r2, #0]
 801ce86:	7019      	strb	r1, [r3, #0]
 801ce88:	4608      	mov	r0, r1
 801ce8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ce8e:	4770      	bx	lr

0801ce90 <__sfputs_r>:
 801ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce92:	4606      	mov	r6, r0
 801ce94:	460f      	mov	r7, r1
 801ce96:	4614      	mov	r4, r2
 801ce98:	18d5      	adds	r5, r2, r3
 801ce9a:	42ac      	cmp	r4, r5
 801ce9c:	d101      	bne.n	801cea2 <__sfputs_r+0x12>
 801ce9e:	2000      	movs	r0, #0
 801cea0:	e007      	b.n	801ceb2 <__sfputs_r+0x22>
 801cea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cea6:	463a      	mov	r2, r7
 801cea8:	4630      	mov	r0, r6
 801ceaa:	f7ff ffda 	bl	801ce62 <__sfputc_r>
 801ceae:	1c43      	adds	r3, r0, #1
 801ceb0:	d1f3      	bne.n	801ce9a <__sfputs_r+0xa>
 801ceb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ceb4 <_vfiprintf_r>:
 801ceb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceb8:	460d      	mov	r5, r1
 801ceba:	b09d      	sub	sp, #116	@ 0x74
 801cebc:	4614      	mov	r4, r2
 801cebe:	4698      	mov	r8, r3
 801cec0:	4606      	mov	r6, r0
 801cec2:	b118      	cbz	r0, 801cecc <_vfiprintf_r+0x18>
 801cec4:	6a03      	ldr	r3, [r0, #32]
 801cec6:	b90b      	cbnz	r3, 801cecc <_vfiprintf_r+0x18>
 801cec8:	f7fe fa20 	bl	801b30c <__sinit>
 801cecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cece:	07d9      	lsls	r1, r3, #31
 801ced0:	d405      	bmi.n	801cede <_vfiprintf_r+0x2a>
 801ced2:	89ab      	ldrh	r3, [r5, #12]
 801ced4:	059a      	lsls	r2, r3, #22
 801ced6:	d402      	bmi.n	801cede <_vfiprintf_r+0x2a>
 801ced8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ceda:	f7fe fb40 	bl	801b55e <__retarget_lock_acquire_recursive>
 801cede:	89ab      	ldrh	r3, [r5, #12]
 801cee0:	071b      	lsls	r3, r3, #28
 801cee2:	d501      	bpl.n	801cee8 <_vfiprintf_r+0x34>
 801cee4:	692b      	ldr	r3, [r5, #16]
 801cee6:	b99b      	cbnz	r3, 801cf10 <_vfiprintf_r+0x5c>
 801cee8:	4629      	mov	r1, r5
 801ceea:	4630      	mov	r0, r6
 801ceec:	f000 f938 	bl	801d160 <__swsetup_r>
 801cef0:	b170      	cbz	r0, 801cf10 <_vfiprintf_r+0x5c>
 801cef2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cef4:	07dc      	lsls	r4, r3, #31
 801cef6:	d504      	bpl.n	801cf02 <_vfiprintf_r+0x4e>
 801cef8:	f04f 30ff 	mov.w	r0, #4294967295
 801cefc:	b01d      	add	sp, #116	@ 0x74
 801cefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf02:	89ab      	ldrh	r3, [r5, #12]
 801cf04:	0598      	lsls	r0, r3, #22
 801cf06:	d4f7      	bmi.n	801cef8 <_vfiprintf_r+0x44>
 801cf08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf0a:	f7fe fb29 	bl	801b560 <__retarget_lock_release_recursive>
 801cf0e:	e7f3      	b.n	801cef8 <_vfiprintf_r+0x44>
 801cf10:	2300      	movs	r3, #0
 801cf12:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf14:	2320      	movs	r3, #32
 801cf16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cf1a:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf1e:	2330      	movs	r3, #48	@ 0x30
 801cf20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d0d0 <_vfiprintf_r+0x21c>
 801cf24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cf28:	f04f 0901 	mov.w	r9, #1
 801cf2c:	4623      	mov	r3, r4
 801cf2e:	469a      	mov	sl, r3
 801cf30:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf34:	b10a      	cbz	r2, 801cf3a <_vfiprintf_r+0x86>
 801cf36:	2a25      	cmp	r2, #37	@ 0x25
 801cf38:	d1f9      	bne.n	801cf2e <_vfiprintf_r+0x7a>
 801cf3a:	ebba 0b04 	subs.w	fp, sl, r4
 801cf3e:	d00b      	beq.n	801cf58 <_vfiprintf_r+0xa4>
 801cf40:	465b      	mov	r3, fp
 801cf42:	4622      	mov	r2, r4
 801cf44:	4629      	mov	r1, r5
 801cf46:	4630      	mov	r0, r6
 801cf48:	f7ff ffa2 	bl	801ce90 <__sfputs_r>
 801cf4c:	3001      	adds	r0, #1
 801cf4e:	f000 80a7 	beq.w	801d0a0 <_vfiprintf_r+0x1ec>
 801cf52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf54:	445a      	add	r2, fp
 801cf56:	9209      	str	r2, [sp, #36]	@ 0x24
 801cf58:	f89a 3000 	ldrb.w	r3, [sl]
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	f000 809f 	beq.w	801d0a0 <_vfiprintf_r+0x1ec>
 801cf62:	2300      	movs	r3, #0
 801cf64:	f04f 32ff 	mov.w	r2, #4294967295
 801cf68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf6c:	f10a 0a01 	add.w	sl, sl, #1
 801cf70:	9304      	str	r3, [sp, #16]
 801cf72:	9307      	str	r3, [sp, #28]
 801cf74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cf78:	931a      	str	r3, [sp, #104]	@ 0x68
 801cf7a:	4654      	mov	r4, sl
 801cf7c:	2205      	movs	r2, #5
 801cf7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf82:	4853      	ldr	r0, [pc, #332]	@ (801d0d0 <_vfiprintf_r+0x21c>)
 801cf84:	f7e3 f9ac 	bl	80002e0 <memchr>
 801cf88:	9a04      	ldr	r2, [sp, #16]
 801cf8a:	b9d8      	cbnz	r0, 801cfc4 <_vfiprintf_r+0x110>
 801cf8c:	06d1      	lsls	r1, r2, #27
 801cf8e:	bf44      	itt	mi
 801cf90:	2320      	movmi	r3, #32
 801cf92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cf96:	0713      	lsls	r3, r2, #28
 801cf98:	bf44      	itt	mi
 801cf9a:	232b      	movmi	r3, #43	@ 0x2b
 801cf9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfa0:	f89a 3000 	ldrb.w	r3, [sl]
 801cfa4:	2b2a      	cmp	r3, #42	@ 0x2a
 801cfa6:	d015      	beq.n	801cfd4 <_vfiprintf_r+0x120>
 801cfa8:	9a07      	ldr	r2, [sp, #28]
 801cfaa:	4654      	mov	r4, sl
 801cfac:	2000      	movs	r0, #0
 801cfae:	f04f 0c0a 	mov.w	ip, #10
 801cfb2:	4621      	mov	r1, r4
 801cfb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cfb8:	3b30      	subs	r3, #48	@ 0x30
 801cfba:	2b09      	cmp	r3, #9
 801cfbc:	d94b      	bls.n	801d056 <_vfiprintf_r+0x1a2>
 801cfbe:	b1b0      	cbz	r0, 801cfee <_vfiprintf_r+0x13a>
 801cfc0:	9207      	str	r2, [sp, #28]
 801cfc2:	e014      	b.n	801cfee <_vfiprintf_r+0x13a>
 801cfc4:	eba0 0308 	sub.w	r3, r0, r8
 801cfc8:	fa09 f303 	lsl.w	r3, r9, r3
 801cfcc:	4313      	orrs	r3, r2
 801cfce:	9304      	str	r3, [sp, #16]
 801cfd0:	46a2      	mov	sl, r4
 801cfd2:	e7d2      	b.n	801cf7a <_vfiprintf_r+0xc6>
 801cfd4:	9b03      	ldr	r3, [sp, #12]
 801cfd6:	1d19      	adds	r1, r3, #4
 801cfd8:	681b      	ldr	r3, [r3, #0]
 801cfda:	9103      	str	r1, [sp, #12]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	bfbb      	ittet	lt
 801cfe0:	425b      	neglt	r3, r3
 801cfe2:	f042 0202 	orrlt.w	r2, r2, #2
 801cfe6:	9307      	strge	r3, [sp, #28]
 801cfe8:	9307      	strlt	r3, [sp, #28]
 801cfea:	bfb8      	it	lt
 801cfec:	9204      	strlt	r2, [sp, #16]
 801cfee:	7823      	ldrb	r3, [r4, #0]
 801cff0:	2b2e      	cmp	r3, #46	@ 0x2e
 801cff2:	d10a      	bne.n	801d00a <_vfiprintf_r+0x156>
 801cff4:	7863      	ldrb	r3, [r4, #1]
 801cff6:	2b2a      	cmp	r3, #42	@ 0x2a
 801cff8:	d132      	bne.n	801d060 <_vfiprintf_r+0x1ac>
 801cffa:	9b03      	ldr	r3, [sp, #12]
 801cffc:	1d1a      	adds	r2, r3, #4
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	9203      	str	r2, [sp, #12]
 801d002:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d006:	3402      	adds	r4, #2
 801d008:	9305      	str	r3, [sp, #20]
 801d00a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d0e0 <_vfiprintf_r+0x22c>
 801d00e:	7821      	ldrb	r1, [r4, #0]
 801d010:	2203      	movs	r2, #3
 801d012:	4650      	mov	r0, sl
 801d014:	f7e3 f964 	bl	80002e0 <memchr>
 801d018:	b138      	cbz	r0, 801d02a <_vfiprintf_r+0x176>
 801d01a:	9b04      	ldr	r3, [sp, #16]
 801d01c:	eba0 000a 	sub.w	r0, r0, sl
 801d020:	2240      	movs	r2, #64	@ 0x40
 801d022:	4082      	lsls	r2, r0
 801d024:	4313      	orrs	r3, r2
 801d026:	3401      	adds	r4, #1
 801d028:	9304      	str	r3, [sp, #16]
 801d02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d02e:	4829      	ldr	r0, [pc, #164]	@ (801d0d4 <_vfiprintf_r+0x220>)
 801d030:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d034:	2206      	movs	r2, #6
 801d036:	f7e3 f953 	bl	80002e0 <memchr>
 801d03a:	2800      	cmp	r0, #0
 801d03c:	d03f      	beq.n	801d0be <_vfiprintf_r+0x20a>
 801d03e:	4b26      	ldr	r3, [pc, #152]	@ (801d0d8 <_vfiprintf_r+0x224>)
 801d040:	bb1b      	cbnz	r3, 801d08a <_vfiprintf_r+0x1d6>
 801d042:	9b03      	ldr	r3, [sp, #12]
 801d044:	3307      	adds	r3, #7
 801d046:	f023 0307 	bic.w	r3, r3, #7
 801d04a:	3308      	adds	r3, #8
 801d04c:	9303      	str	r3, [sp, #12]
 801d04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d050:	443b      	add	r3, r7
 801d052:	9309      	str	r3, [sp, #36]	@ 0x24
 801d054:	e76a      	b.n	801cf2c <_vfiprintf_r+0x78>
 801d056:	fb0c 3202 	mla	r2, ip, r2, r3
 801d05a:	460c      	mov	r4, r1
 801d05c:	2001      	movs	r0, #1
 801d05e:	e7a8      	b.n	801cfb2 <_vfiprintf_r+0xfe>
 801d060:	2300      	movs	r3, #0
 801d062:	3401      	adds	r4, #1
 801d064:	9305      	str	r3, [sp, #20]
 801d066:	4619      	mov	r1, r3
 801d068:	f04f 0c0a 	mov.w	ip, #10
 801d06c:	4620      	mov	r0, r4
 801d06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d072:	3a30      	subs	r2, #48	@ 0x30
 801d074:	2a09      	cmp	r2, #9
 801d076:	d903      	bls.n	801d080 <_vfiprintf_r+0x1cc>
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d0c6      	beq.n	801d00a <_vfiprintf_r+0x156>
 801d07c:	9105      	str	r1, [sp, #20]
 801d07e:	e7c4      	b.n	801d00a <_vfiprintf_r+0x156>
 801d080:	fb0c 2101 	mla	r1, ip, r1, r2
 801d084:	4604      	mov	r4, r0
 801d086:	2301      	movs	r3, #1
 801d088:	e7f0      	b.n	801d06c <_vfiprintf_r+0x1b8>
 801d08a:	ab03      	add	r3, sp, #12
 801d08c:	9300      	str	r3, [sp, #0]
 801d08e:	462a      	mov	r2, r5
 801d090:	4b12      	ldr	r3, [pc, #72]	@ (801d0dc <_vfiprintf_r+0x228>)
 801d092:	a904      	add	r1, sp, #16
 801d094:	4630      	mov	r0, r6
 801d096:	f7fd fd07 	bl	801aaa8 <_printf_float>
 801d09a:	4607      	mov	r7, r0
 801d09c:	1c78      	adds	r0, r7, #1
 801d09e:	d1d6      	bne.n	801d04e <_vfiprintf_r+0x19a>
 801d0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d0a2:	07d9      	lsls	r1, r3, #31
 801d0a4:	d405      	bmi.n	801d0b2 <_vfiprintf_r+0x1fe>
 801d0a6:	89ab      	ldrh	r3, [r5, #12]
 801d0a8:	059a      	lsls	r2, r3, #22
 801d0aa:	d402      	bmi.n	801d0b2 <_vfiprintf_r+0x1fe>
 801d0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d0ae:	f7fe fa57 	bl	801b560 <__retarget_lock_release_recursive>
 801d0b2:	89ab      	ldrh	r3, [r5, #12]
 801d0b4:	065b      	lsls	r3, r3, #25
 801d0b6:	f53f af1f 	bmi.w	801cef8 <_vfiprintf_r+0x44>
 801d0ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d0bc:	e71e      	b.n	801cefc <_vfiprintf_r+0x48>
 801d0be:	ab03      	add	r3, sp, #12
 801d0c0:	9300      	str	r3, [sp, #0]
 801d0c2:	462a      	mov	r2, r5
 801d0c4:	4b05      	ldr	r3, [pc, #20]	@ (801d0dc <_vfiprintf_r+0x228>)
 801d0c6:	a904      	add	r1, sp, #16
 801d0c8:	4630      	mov	r0, r6
 801d0ca:	f7fd ff75 	bl	801afb8 <_printf_i>
 801d0ce:	e7e4      	b.n	801d09a <_vfiprintf_r+0x1e6>
 801d0d0:	0801dd36 	.word	0x0801dd36
 801d0d4:	0801dd40 	.word	0x0801dd40
 801d0d8:	0801aaa9 	.word	0x0801aaa9
 801d0dc:	0801ce91 	.word	0x0801ce91
 801d0e0:	0801dd3c 	.word	0x0801dd3c

0801d0e4 <__swbuf_r>:
 801d0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0e6:	460e      	mov	r6, r1
 801d0e8:	4614      	mov	r4, r2
 801d0ea:	4605      	mov	r5, r0
 801d0ec:	b118      	cbz	r0, 801d0f6 <__swbuf_r+0x12>
 801d0ee:	6a03      	ldr	r3, [r0, #32]
 801d0f0:	b90b      	cbnz	r3, 801d0f6 <__swbuf_r+0x12>
 801d0f2:	f7fe f90b 	bl	801b30c <__sinit>
 801d0f6:	69a3      	ldr	r3, [r4, #24]
 801d0f8:	60a3      	str	r3, [r4, #8]
 801d0fa:	89a3      	ldrh	r3, [r4, #12]
 801d0fc:	071a      	lsls	r2, r3, #28
 801d0fe:	d501      	bpl.n	801d104 <__swbuf_r+0x20>
 801d100:	6923      	ldr	r3, [r4, #16]
 801d102:	b943      	cbnz	r3, 801d116 <__swbuf_r+0x32>
 801d104:	4621      	mov	r1, r4
 801d106:	4628      	mov	r0, r5
 801d108:	f000 f82a 	bl	801d160 <__swsetup_r>
 801d10c:	b118      	cbz	r0, 801d116 <__swbuf_r+0x32>
 801d10e:	f04f 37ff 	mov.w	r7, #4294967295
 801d112:	4638      	mov	r0, r7
 801d114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d116:	6823      	ldr	r3, [r4, #0]
 801d118:	6922      	ldr	r2, [r4, #16]
 801d11a:	1a98      	subs	r0, r3, r2
 801d11c:	6963      	ldr	r3, [r4, #20]
 801d11e:	b2f6      	uxtb	r6, r6
 801d120:	4283      	cmp	r3, r0
 801d122:	4637      	mov	r7, r6
 801d124:	dc05      	bgt.n	801d132 <__swbuf_r+0x4e>
 801d126:	4621      	mov	r1, r4
 801d128:	4628      	mov	r0, r5
 801d12a:	f7ff fdb7 	bl	801cc9c <_fflush_r>
 801d12e:	2800      	cmp	r0, #0
 801d130:	d1ed      	bne.n	801d10e <__swbuf_r+0x2a>
 801d132:	68a3      	ldr	r3, [r4, #8]
 801d134:	3b01      	subs	r3, #1
 801d136:	60a3      	str	r3, [r4, #8]
 801d138:	6823      	ldr	r3, [r4, #0]
 801d13a:	1c5a      	adds	r2, r3, #1
 801d13c:	6022      	str	r2, [r4, #0]
 801d13e:	701e      	strb	r6, [r3, #0]
 801d140:	6962      	ldr	r2, [r4, #20]
 801d142:	1c43      	adds	r3, r0, #1
 801d144:	429a      	cmp	r2, r3
 801d146:	d004      	beq.n	801d152 <__swbuf_r+0x6e>
 801d148:	89a3      	ldrh	r3, [r4, #12]
 801d14a:	07db      	lsls	r3, r3, #31
 801d14c:	d5e1      	bpl.n	801d112 <__swbuf_r+0x2e>
 801d14e:	2e0a      	cmp	r6, #10
 801d150:	d1df      	bne.n	801d112 <__swbuf_r+0x2e>
 801d152:	4621      	mov	r1, r4
 801d154:	4628      	mov	r0, r5
 801d156:	f7ff fda1 	bl	801cc9c <_fflush_r>
 801d15a:	2800      	cmp	r0, #0
 801d15c:	d0d9      	beq.n	801d112 <__swbuf_r+0x2e>
 801d15e:	e7d6      	b.n	801d10e <__swbuf_r+0x2a>

0801d160 <__swsetup_r>:
 801d160:	b538      	push	{r3, r4, r5, lr}
 801d162:	4b29      	ldr	r3, [pc, #164]	@ (801d208 <__swsetup_r+0xa8>)
 801d164:	4605      	mov	r5, r0
 801d166:	6818      	ldr	r0, [r3, #0]
 801d168:	460c      	mov	r4, r1
 801d16a:	b118      	cbz	r0, 801d174 <__swsetup_r+0x14>
 801d16c:	6a03      	ldr	r3, [r0, #32]
 801d16e:	b90b      	cbnz	r3, 801d174 <__swsetup_r+0x14>
 801d170:	f7fe f8cc 	bl	801b30c <__sinit>
 801d174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d178:	0719      	lsls	r1, r3, #28
 801d17a:	d422      	bmi.n	801d1c2 <__swsetup_r+0x62>
 801d17c:	06da      	lsls	r2, r3, #27
 801d17e:	d407      	bmi.n	801d190 <__swsetup_r+0x30>
 801d180:	2209      	movs	r2, #9
 801d182:	602a      	str	r2, [r5, #0]
 801d184:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d188:	81a3      	strh	r3, [r4, #12]
 801d18a:	f04f 30ff 	mov.w	r0, #4294967295
 801d18e:	e033      	b.n	801d1f8 <__swsetup_r+0x98>
 801d190:	0758      	lsls	r0, r3, #29
 801d192:	d512      	bpl.n	801d1ba <__swsetup_r+0x5a>
 801d194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d196:	b141      	cbz	r1, 801d1aa <__swsetup_r+0x4a>
 801d198:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d19c:	4299      	cmp	r1, r3
 801d19e:	d002      	beq.n	801d1a6 <__swsetup_r+0x46>
 801d1a0:	4628      	mov	r0, r5
 801d1a2:	f7fe ffdb 	bl	801c15c <_free_r>
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	6363      	str	r3, [r4, #52]	@ 0x34
 801d1aa:	89a3      	ldrh	r3, [r4, #12]
 801d1ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801d1b0:	81a3      	strh	r3, [r4, #12]
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	6063      	str	r3, [r4, #4]
 801d1b6:	6923      	ldr	r3, [r4, #16]
 801d1b8:	6023      	str	r3, [r4, #0]
 801d1ba:	89a3      	ldrh	r3, [r4, #12]
 801d1bc:	f043 0308 	orr.w	r3, r3, #8
 801d1c0:	81a3      	strh	r3, [r4, #12]
 801d1c2:	6923      	ldr	r3, [r4, #16]
 801d1c4:	b94b      	cbnz	r3, 801d1da <__swsetup_r+0x7a>
 801d1c6:	89a3      	ldrh	r3, [r4, #12]
 801d1c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801d1cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d1d0:	d003      	beq.n	801d1da <__swsetup_r+0x7a>
 801d1d2:	4621      	mov	r1, r4
 801d1d4:	4628      	mov	r0, r5
 801d1d6:	f000 f883 	bl	801d2e0 <__smakebuf_r>
 801d1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1de:	f013 0201 	ands.w	r2, r3, #1
 801d1e2:	d00a      	beq.n	801d1fa <__swsetup_r+0x9a>
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	60a2      	str	r2, [r4, #8]
 801d1e8:	6962      	ldr	r2, [r4, #20]
 801d1ea:	4252      	negs	r2, r2
 801d1ec:	61a2      	str	r2, [r4, #24]
 801d1ee:	6922      	ldr	r2, [r4, #16]
 801d1f0:	b942      	cbnz	r2, 801d204 <__swsetup_r+0xa4>
 801d1f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801d1f6:	d1c5      	bne.n	801d184 <__swsetup_r+0x24>
 801d1f8:	bd38      	pop	{r3, r4, r5, pc}
 801d1fa:	0799      	lsls	r1, r3, #30
 801d1fc:	bf58      	it	pl
 801d1fe:	6962      	ldrpl	r2, [r4, #20]
 801d200:	60a2      	str	r2, [r4, #8]
 801d202:	e7f4      	b.n	801d1ee <__swsetup_r+0x8e>
 801d204:	2000      	movs	r0, #0
 801d206:	e7f7      	b.n	801d1f8 <__swsetup_r+0x98>
 801d208:	24000350 	.word	0x24000350

0801d20c <_raise_r>:
 801d20c:	291f      	cmp	r1, #31
 801d20e:	b538      	push	{r3, r4, r5, lr}
 801d210:	4605      	mov	r5, r0
 801d212:	460c      	mov	r4, r1
 801d214:	d904      	bls.n	801d220 <_raise_r+0x14>
 801d216:	2316      	movs	r3, #22
 801d218:	6003      	str	r3, [r0, #0]
 801d21a:	f04f 30ff 	mov.w	r0, #4294967295
 801d21e:	bd38      	pop	{r3, r4, r5, pc}
 801d220:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d222:	b112      	cbz	r2, 801d22a <_raise_r+0x1e>
 801d224:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d228:	b94b      	cbnz	r3, 801d23e <_raise_r+0x32>
 801d22a:	4628      	mov	r0, r5
 801d22c:	f000 f830 	bl	801d290 <_getpid_r>
 801d230:	4622      	mov	r2, r4
 801d232:	4601      	mov	r1, r0
 801d234:	4628      	mov	r0, r5
 801d236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d23a:	f000 b817 	b.w	801d26c <_kill_r>
 801d23e:	2b01      	cmp	r3, #1
 801d240:	d00a      	beq.n	801d258 <_raise_r+0x4c>
 801d242:	1c59      	adds	r1, r3, #1
 801d244:	d103      	bne.n	801d24e <_raise_r+0x42>
 801d246:	2316      	movs	r3, #22
 801d248:	6003      	str	r3, [r0, #0]
 801d24a:	2001      	movs	r0, #1
 801d24c:	e7e7      	b.n	801d21e <_raise_r+0x12>
 801d24e:	2100      	movs	r1, #0
 801d250:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d254:	4620      	mov	r0, r4
 801d256:	4798      	blx	r3
 801d258:	2000      	movs	r0, #0
 801d25a:	e7e0      	b.n	801d21e <_raise_r+0x12>

0801d25c <raise>:
 801d25c:	4b02      	ldr	r3, [pc, #8]	@ (801d268 <raise+0xc>)
 801d25e:	4601      	mov	r1, r0
 801d260:	6818      	ldr	r0, [r3, #0]
 801d262:	f7ff bfd3 	b.w	801d20c <_raise_r>
 801d266:	bf00      	nop
 801d268:	24000350 	.word	0x24000350

0801d26c <_kill_r>:
 801d26c:	b538      	push	{r3, r4, r5, lr}
 801d26e:	4d07      	ldr	r5, [pc, #28]	@ (801d28c <_kill_r+0x20>)
 801d270:	2300      	movs	r3, #0
 801d272:	4604      	mov	r4, r0
 801d274:	4608      	mov	r0, r1
 801d276:	4611      	mov	r1, r2
 801d278:	602b      	str	r3, [r5, #0]
 801d27a:	f7e5 f97d 	bl	8002578 <_kill>
 801d27e:	1c43      	adds	r3, r0, #1
 801d280:	d102      	bne.n	801d288 <_kill_r+0x1c>
 801d282:	682b      	ldr	r3, [r5, #0]
 801d284:	b103      	cbz	r3, 801d288 <_kill_r+0x1c>
 801d286:	6023      	str	r3, [r4, #0]
 801d288:	bd38      	pop	{r3, r4, r5, pc}
 801d28a:	bf00      	nop
 801d28c:	24048fcc 	.word	0x24048fcc

0801d290 <_getpid_r>:
 801d290:	f7e5 b96a 	b.w	8002568 <_getpid>

0801d294 <__swhatbuf_r>:
 801d294:	b570      	push	{r4, r5, r6, lr}
 801d296:	460c      	mov	r4, r1
 801d298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d29c:	2900      	cmp	r1, #0
 801d29e:	b096      	sub	sp, #88	@ 0x58
 801d2a0:	4615      	mov	r5, r2
 801d2a2:	461e      	mov	r6, r3
 801d2a4:	da0d      	bge.n	801d2c2 <__swhatbuf_r+0x2e>
 801d2a6:	89a3      	ldrh	r3, [r4, #12]
 801d2a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d2ac:	f04f 0100 	mov.w	r1, #0
 801d2b0:	bf14      	ite	ne
 801d2b2:	2340      	movne	r3, #64	@ 0x40
 801d2b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d2b8:	2000      	movs	r0, #0
 801d2ba:	6031      	str	r1, [r6, #0]
 801d2bc:	602b      	str	r3, [r5, #0]
 801d2be:	b016      	add	sp, #88	@ 0x58
 801d2c0:	bd70      	pop	{r4, r5, r6, pc}
 801d2c2:	466a      	mov	r2, sp
 801d2c4:	f000 f848 	bl	801d358 <_fstat_r>
 801d2c8:	2800      	cmp	r0, #0
 801d2ca:	dbec      	blt.n	801d2a6 <__swhatbuf_r+0x12>
 801d2cc:	9901      	ldr	r1, [sp, #4]
 801d2ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d2d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d2d6:	4259      	negs	r1, r3
 801d2d8:	4159      	adcs	r1, r3
 801d2da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d2de:	e7eb      	b.n	801d2b8 <__swhatbuf_r+0x24>

0801d2e0 <__smakebuf_r>:
 801d2e0:	898b      	ldrh	r3, [r1, #12]
 801d2e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d2e4:	079d      	lsls	r5, r3, #30
 801d2e6:	4606      	mov	r6, r0
 801d2e8:	460c      	mov	r4, r1
 801d2ea:	d507      	bpl.n	801d2fc <__smakebuf_r+0x1c>
 801d2ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d2f0:	6023      	str	r3, [r4, #0]
 801d2f2:	6123      	str	r3, [r4, #16]
 801d2f4:	2301      	movs	r3, #1
 801d2f6:	6163      	str	r3, [r4, #20]
 801d2f8:	b003      	add	sp, #12
 801d2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d2fc:	ab01      	add	r3, sp, #4
 801d2fe:	466a      	mov	r2, sp
 801d300:	f7ff ffc8 	bl	801d294 <__swhatbuf_r>
 801d304:	9f00      	ldr	r7, [sp, #0]
 801d306:	4605      	mov	r5, r0
 801d308:	4639      	mov	r1, r7
 801d30a:	4630      	mov	r0, r6
 801d30c:	f7fd fab0 	bl	801a870 <_malloc_r>
 801d310:	b948      	cbnz	r0, 801d326 <__smakebuf_r+0x46>
 801d312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d316:	059a      	lsls	r2, r3, #22
 801d318:	d4ee      	bmi.n	801d2f8 <__smakebuf_r+0x18>
 801d31a:	f023 0303 	bic.w	r3, r3, #3
 801d31e:	f043 0302 	orr.w	r3, r3, #2
 801d322:	81a3      	strh	r3, [r4, #12]
 801d324:	e7e2      	b.n	801d2ec <__smakebuf_r+0xc>
 801d326:	89a3      	ldrh	r3, [r4, #12]
 801d328:	6020      	str	r0, [r4, #0]
 801d32a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d32e:	81a3      	strh	r3, [r4, #12]
 801d330:	9b01      	ldr	r3, [sp, #4]
 801d332:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d336:	b15b      	cbz	r3, 801d350 <__smakebuf_r+0x70>
 801d338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d33c:	4630      	mov	r0, r6
 801d33e:	f000 f81d 	bl	801d37c <_isatty_r>
 801d342:	b128      	cbz	r0, 801d350 <__smakebuf_r+0x70>
 801d344:	89a3      	ldrh	r3, [r4, #12]
 801d346:	f023 0303 	bic.w	r3, r3, #3
 801d34a:	f043 0301 	orr.w	r3, r3, #1
 801d34e:	81a3      	strh	r3, [r4, #12]
 801d350:	89a3      	ldrh	r3, [r4, #12]
 801d352:	431d      	orrs	r5, r3
 801d354:	81a5      	strh	r5, [r4, #12]
 801d356:	e7cf      	b.n	801d2f8 <__smakebuf_r+0x18>

0801d358 <_fstat_r>:
 801d358:	b538      	push	{r3, r4, r5, lr}
 801d35a:	4d07      	ldr	r5, [pc, #28]	@ (801d378 <_fstat_r+0x20>)
 801d35c:	2300      	movs	r3, #0
 801d35e:	4604      	mov	r4, r0
 801d360:	4608      	mov	r0, r1
 801d362:	4611      	mov	r1, r2
 801d364:	602b      	str	r3, [r5, #0]
 801d366:	f7e5 f967 	bl	8002638 <_fstat>
 801d36a:	1c43      	adds	r3, r0, #1
 801d36c:	d102      	bne.n	801d374 <_fstat_r+0x1c>
 801d36e:	682b      	ldr	r3, [r5, #0]
 801d370:	b103      	cbz	r3, 801d374 <_fstat_r+0x1c>
 801d372:	6023      	str	r3, [r4, #0]
 801d374:	bd38      	pop	{r3, r4, r5, pc}
 801d376:	bf00      	nop
 801d378:	24048fcc 	.word	0x24048fcc

0801d37c <_isatty_r>:
 801d37c:	b538      	push	{r3, r4, r5, lr}
 801d37e:	4d06      	ldr	r5, [pc, #24]	@ (801d398 <_isatty_r+0x1c>)
 801d380:	2300      	movs	r3, #0
 801d382:	4604      	mov	r4, r0
 801d384:	4608      	mov	r0, r1
 801d386:	602b      	str	r3, [r5, #0]
 801d388:	f7e5 f966 	bl	8002658 <_isatty>
 801d38c:	1c43      	adds	r3, r0, #1
 801d38e:	d102      	bne.n	801d396 <_isatty_r+0x1a>
 801d390:	682b      	ldr	r3, [r5, #0]
 801d392:	b103      	cbz	r3, 801d396 <_isatty_r+0x1a>
 801d394:	6023      	str	r3, [r4, #0]
 801d396:	bd38      	pop	{r3, r4, r5, pc}
 801d398:	24048fcc 	.word	0x24048fcc

0801d39c <_init>:
 801d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d39e:	bf00      	nop
 801d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3a2:	bc08      	pop	{r3}
 801d3a4:	469e      	mov	lr, r3
 801d3a6:	4770      	bx	lr

0801d3a8 <_fini>:
 801d3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3aa:	bf00      	nop
 801d3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d3ae:	bc08      	pop	{r3}
 801d3b0:	469e      	mov	lr, r3
 801d3b2:	4770      	bx	lr
