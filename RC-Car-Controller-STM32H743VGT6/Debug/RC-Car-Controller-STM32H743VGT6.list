
RC-Car-Controller-STM32H743VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d28  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08018fc8  08018fc8  00019fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801963c  0801963c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019644  08019644  0001a644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019648  08019648  0001a648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000380  24000000  0801964c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0002ad10  24000380  080199cc  0001b380  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2402b090  080199cc  0001c090  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b380  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002d5b9  00000000  00000000  0001b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005572  00000000  00000000  00048967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fa8  00000000  00000000  0004dee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000187c  00000000  00000000  0004fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003df52  00000000  00000000  00051704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e368  00000000  00000000  0008f656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178a26  00000000  00000000  000bd9be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002363e4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c94  00000000  00000000  00236428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007f  00000000  00000000  0023f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000380 	.word	0x24000380
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018fb0 	.word	0x08018fb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000384 	.word	0x24000384
 80002dc:	08018fb0 	.word	0x08018fb0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006c2:	f001 f9d9 	bl	8001a78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f002 fa39 	bl	8002b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f911 	bl	80008f0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006ce:	f000 f989 	bl	80009e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d2:	f000 fc09 	bl	8000ee8 <MX_GPIO_Init>
  MX_MDMA_Init();
 80006d6:	f000 fbe7 	bl	8000ea8 <MX_MDMA_Init>
  MX_DMA_Init();
 80006da:	f000 fb95 	bl	8000e08 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006de:	f000 fb41 	bl	8000d64 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80006e2:	f017 fa63 	bl	8017bac <MX_USB_DEVICE_Init>
  MX_JPEG_Init();
 80006e6:	f000 fad3 	bl	8000c90 <MX_JPEG_Init>
  MX_I2C1_Init();
 80006ea:	f000 fa51 	bl	8000b90 <MX_I2C1_Init>
  MX_SPI4_Init();
 80006ee:	f000 fae3 	bl	8000cb8 <MX_SPI4_Init>
  MX_ADC1_Init();
 80006f2:	f000 f9c1 	bl	8000a78 <MX_ADC1_Init>
  MX_I2C2_Init();
 80006f6:	f000 fa8b 	bl	8000c10 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	// ------------------------------------------------------------ SETUP ADC DMA -- //

	HAL_ADC_Start_DMA(&hadc1, adc_buffer, 20);
 80006fa:	2214      	movs	r2, #20
 80006fc:	4965      	ldr	r1, [pc, #404]	@ (8000894 <main+0x1d8>)
 80006fe:	4866      	ldr	r0, [pc, #408]	@ (8000898 <main+0x1dc>)
 8000700:	f002 fe9a 	bl	8003438 <HAL_ADC_Start_DMA>

	// ------------------------------------------------------------ SETUP SSD1306 -- //

	uint8_t init_result = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	71fb      	strb	r3, [r7, #7]

	hssd1.i2c_handle = &hi2c2;
 8000708:	4b64      	ldr	r3, [pc, #400]	@ (800089c <main+0x1e0>)
 800070a:	4a65      	ldr	r2, [pc, #404]	@ (80008a0 <main+0x1e4>)
 800070c:	601a      	str	r2, [r3, #0]
	hssd1.address = OLED_ADDR;
 800070e:	4b63      	ldr	r3, [pc, #396]	@ (800089c <main+0x1e0>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	711a      	strb	r2, [r3, #4]
	hssd1.vram_full = ssd1_vram;
 8000714:	4b61      	ldr	r3, [pc, #388]	@ (800089c <main+0x1e0>)
 8000716:	4a63      	ldr	r2, [pc, #396]	@ (80008a4 <main+0x1e8>)
 8000718:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd1);
 800071a:	4860      	ldr	r0, [pc, #384]	@ (800089c <main+0x1e0>)
 800071c:	f001 ff88 	bl	8002630 <SSD1306_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d013      	beq.n	8000752 <main+0x96>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD1: %d\r\n", init_result);
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	461a      	mov	r2, r3
 800072e:	495e      	ldr	r1, [pc, #376]	@ (80008a8 <main+0x1ec>)
 8000730:	485e      	ldr	r0, [pc, #376]	@ (80008ac <main+0x1f0>)
 8000732:	f018 f84b 	bl	80187cc <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000736:	485d      	ldr	r0, [pc, #372]	@ (80008ac <main+0x1f0>)
 8000738:	f7ff fdd2 	bl	80002e0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	485a      	ldr	r0, [pc, #360]	@ (80008ac <main+0x1f0>)
 8000742:	f017 fb0d 	bl	8017d60 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f002 fa89 	bl	8002c60 <HAL_Delay>
		while (1) {
 800074e:	bf00      	nop
 8000750:	e7eb      	b.n	800072a <main+0x6e>
		}
	}

	hssd2.i2c_handle = &hi2c1;
 8000752:	4b57      	ldr	r3, [pc, #348]	@ (80008b0 <main+0x1f4>)
 8000754:	4a57      	ldr	r2, [pc, #348]	@ (80008b4 <main+0x1f8>)
 8000756:	601a      	str	r2, [r3, #0]
	hssd2.address = OLED_ADDR;
 8000758:	4b55      	ldr	r3, [pc, #340]	@ (80008b0 <main+0x1f4>)
 800075a:	223c      	movs	r2, #60	@ 0x3c
 800075c:	711a      	strb	r2, [r3, #4]
	hssd2.vram_full = ssd2_vram;
 800075e:	4b54      	ldr	r3, [pc, #336]	@ (80008b0 <main+0x1f4>)
 8000760:	4a55      	ldr	r2, [pc, #340]	@ (80008b8 <main+0x1fc>)
 8000762:	609a      	str	r2, [r3, #8]
	init_result = SSD1306_Init(&hssd2);
 8000764:	4852      	ldr	r0, [pc, #328]	@ (80008b0 <main+0x1f4>)
 8000766:	f001 ff63 	bl	8002630 <SSD1306_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d013      	beq.n	800079c <main+0xe0>
		while (1) {
			sprintf(usb_msg, "Failed to Init SSD2: %d\r\n", init_result);
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	461a      	mov	r2, r3
 8000778:	4950      	ldr	r1, [pc, #320]	@ (80008bc <main+0x200>)
 800077a:	484c      	ldr	r0, [pc, #304]	@ (80008ac <main+0x1f0>)
 800077c:	f018 f826 	bl	80187cc <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 8000780:	484a      	ldr	r0, [pc, #296]	@ (80008ac <main+0x1f0>)
 8000782:	f7ff fdad 	bl	80002e0 <strlen>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	4848      	ldr	r0, [pc, #288]	@ (80008ac <main+0x1f0>)
 800078c:	f017 fae8 	bl	8017d60 <CDC_Transmit_FS>
			HAL_Delay(1000);
 8000790:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000794:	f002 fa64 	bl	8002c60 <HAL_Delay>
		while (1) {
 8000798:	bf00      	nop
 800079a:	e7eb      	b.n	8000774 <main+0xb8>
		}
	}

	// ------------------------------------------------------------ SETUP ST7789 -- //
	hst7789.spi_handle = &hspi4;
 800079c:	4b48      	ldr	r3, [pc, #288]	@ (80008c0 <main+0x204>)
 800079e:	4a49      	ldr	r2, [pc, #292]	@ (80008c4 <main+0x208>)
 80007a0:	601a      	str	r2, [r3, #0]
	hst7789.spi_state = 0;
 80007a2:	4b47      	ldr	r3, [pc, #284]	@ (80008c0 <main+0x204>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	711a      	strb	r2, [r3, #4]
	hst7789.dc_gpio_handle = SPI4_DC_GPIO_Port;
 80007a8:	4b45      	ldr	r3, [pc, #276]	@ (80008c0 <main+0x204>)
 80007aa:	4a47      	ldr	r2, [pc, #284]	@ (80008c8 <main+0x20c>)
 80007ac:	609a      	str	r2, [r3, #8]
	hst7789.dc_gpio_pin = SPI4_DC_Pin;
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <main+0x204>)
 80007b0:	2220      	movs	r2, #32
 80007b2:	819a      	strh	r2, [r3, #12]
	hst7789.vram = st7789_vram;
 80007b4:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <main+0x204>)
 80007b6:	4a45      	ldr	r2, [pc, #276]	@ (80008cc <main+0x210>)
 80007b8:	611a      	str	r2, [r3, #16]
	init_result = ST7789_Init(&hst7789);
 80007ba:	4841      	ldr	r0, [pc, #260]	@ (80008c0 <main+0x204>)
 80007bc:	f002 f868 	bl	8002890 <ST7789_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	71fb      	strb	r3, [r7, #7]
	if (init_result) {
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d013      	beq.n	80007f2 <main+0x136>
		while (1) {
			sprintf(usb_msg, "Failed to Init ST7789: %d\r\n", init_result);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4940      	ldr	r1, [pc, #256]	@ (80008d0 <main+0x214>)
 80007d0:	4836      	ldr	r0, [pc, #216]	@ (80008ac <main+0x1f0>)
 80007d2:	f017 fffb 	bl	80187cc <siprintf>
			CDC_Transmit_FS(usb_msg, strlen(usb_msg));
 80007d6:	4835      	ldr	r0, [pc, #212]	@ (80008ac <main+0x1f0>)
 80007d8:	f7ff fd82 	bl	80002e0 <strlen>
 80007dc:	4603      	mov	r3, r0
 80007de:	4619      	mov	r1, r3
 80007e0:	4832      	ldr	r0, [pc, #200]	@ (80008ac <main+0x1f0>)
 80007e2:	f017 fabd 	bl	8017d60 <CDC_Transmit_FS>
			HAL_Delay(1000);
 80007e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ea:	f002 fa39 	bl	8002c60 <HAL_Delay>
		while (1) {
 80007ee:	bf00      	nop
 80007f0:	e7eb      	b.n	80007ca <main+0x10e>
		}
	}

	// Clear the screen
	ST7789_Clear(&hst7789, 0x00);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4832      	ldr	r0, [pc, #200]	@ (80008c0 <main+0x204>)
 80007f6:	f002 f8f6 	bl	80029e6 <ST7789_Clear>
	ST7789_UpdateSector(&hst7789, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	4830      	ldr	r0, [pc, #192]	@ (80008c0 <main+0x204>)
 80007fe:	f002 f905 	bl	8002a0c <ST7789_UpdateSector>
	HAL_Delay(50);
 8000802:	2032      	movs	r0, #50	@ 0x32
 8000804:	f002 fa2c 	bl	8002c60 <HAL_Delay>
	ST7789_UpdateSector(&hst7789, 1);
 8000808:	2101      	movs	r1, #1
 800080a:	482d      	ldr	r0, [pc, #180]	@ (80008c0 <main+0x204>)
 800080c:	f002 f8fe 	bl	8002a0c <ST7789_UpdateSector>

	// ------------------------------------------------------------ SETUP JPEG DECODE -- //
	// override the header
	// DO NOT MODIFY THE JPEG_RAW BUF BELOW BYTE 526
	memcpy(jpeg_raw1, jpeg_header, JPEG_HEADERSIZE);
 8000810:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <main+0x218>)
 8000812:	4b31      	ldr	r3, [pc, #196]	@ (80008d8 <main+0x21c>)
 8000814:	4610      	mov	r0, r2
 8000816:	4619      	mov	r1, r3
 8000818:	f240 230e 	movw	r3, #526	@ 0x20e
 800081c:	461a      	mov	r2, r3
 800081e:	f018 f83b 	bl	8018898 <memcpy>
	memcpy(jpeg_raw2, jpeg_header, JPEG_HEADERSIZE);
 8000822:	4a2e      	ldr	r2, [pc, #184]	@ (80008dc <main+0x220>)
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <main+0x21c>)
 8000826:	4610      	mov	r0, r2
 8000828:	4619      	mov	r1, r3
 800082a:	f240 230e 	movw	r3, #526	@ 0x20e
 800082e:	461a      	mov	r2, r3
 8000830:	f018 f832 	bl	8018898 <memcpy>

	// ------------------------------------------------------------ SETUP XBEE -- //
	hxbee.uart_handle = &huart1;
 8000834:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <main+0x224>)
 8000836:	4a2b      	ldr	r2, [pc, #172]	@ (80008e4 <main+0x228>)
 8000838:	601a      	str	r2, [r3, #0]
	hxbee.pktRx_max = 5;
 800083a:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <main+0x224>)
 800083c:	2205      	movs	r2, #5
 800083e:	761a      	strb	r2, [r3, #24]
	hxbee.pktTx_max = 5;
 8000840:	4b27      	ldr	r3, [pc, #156]	@ (80008e0 <main+0x224>)
 8000842:	2205      	movs	r2, #5
 8000844:	f883 2020 	strb.w	r2, [r3, #32]

	if (XBEE_Init(&hxbee)) {
 8000848:	4825      	ldr	r0, [pc, #148]	@ (80008e0 <main+0x224>)
 800084a:	f015 f854 	bl	80158f6 <XBEE_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00e      	beq.n	8000872 <main+0x1b6>
		sprintf(ssd_msg, " Failed to Init XBEE");
 8000854:	4924      	ldr	r1, [pc, #144]	@ (80008e8 <main+0x22c>)
 8000856:	4825      	ldr	r0, [pc, #148]	@ (80008ec <main+0x230>)
 8000858:	f017 ffb8 	bl	80187cc <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 800085c:	4823      	ldr	r0, [pc, #140]	@ (80008ec <main+0x230>)
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	@ (80008ec <main+0x230>)
 800086a:	f001 f8df 	bl	8001a2c <WriteDebug>
		while (1) { }
 800086e:	bf00      	nop
 8000870:	e7fd      	b.n	800086e <main+0x1b2>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		SCH_XBeeRX();		// Process any incoming packets
 8000872:	f000 fbe9 	bl	8001048 <SCH_XBeeRX>
		SCH_ImageDecode();	// Decode pending MCU blocks
 8000876:	f000 fc81 	bl	800117c <SCH_ImageDecode>
		SCH_OLEDUpdate();	// Update the OLEDs
 800087a:	f000 fd51 	bl	8001320 <SCH_OLEDUpdate>
		SCH_GetInputs();	// Get user inputs
 800087e:	f000 fdbd 	bl	80013fc <SCH_GetInputs>

		if (hst7789.spi_state == 0)
 8000882:	4b0f      	ldr	r3, [pc, #60]	@ (80008c0 <main+0x204>)
 8000884:	791b      	ldrb	r3, [r3, #4]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d1f3      	bne.n	8000872 <main+0x1b6>
			ST7789_UpdateAutomatic(&hst7789);
 800088a:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <main+0x204>)
 800088c:	f002 f91e 	bl	8002acc <ST7789_UpdateAutomatic>
		SCH_XBeeRX();		// Process any incoming packets
 8000890:	e7ef      	b.n	8000872 <main+0x1b6>
 8000892:	bf00      	nop
 8000894:	24026a74 	.word	0x24026a74
 8000898:	2400039c 	.word	0x2400039c
 800089c:	2400096c 	.word	0x2400096c
 80008a0:	240004cc 	.word	0x240004cc
 80008a4:	24000994 	.word	0x24000994
 80008a8:	08018fc8 	.word	0x08018fc8
 80008ac:	240011f8 	.word	0x240011f8
 80008b0:	24000980 	.word	0x24000980
 80008b4:	24000478 	.word	0x24000478
 80008b8:	24000d94 	.word	0x24000d94
 80008bc:	08018fe4 	.word	0x08018fe4
 80008c0:	2400125c 	.word	0x2400125c
 80008c4:	24000740 	.word	0x24000740
 80008c8:	58021000 	.word	0x58021000
 80008cc:	24001274 	.word	0x24001274
 80008d0:	08019000 	.word	0x08019000
 80008d4:	24026ad0 	.word	0x24026ad0
 80008d8:	2400001c 	.word	0x2400001c
 80008dc:	24027850 	.word	0x24027850
 80008e0:	24026aa8 	.word	0x24026aa8
 80008e4:	24000840 	.word	0x24000840
 80008e8:	0801901c 	.word	0x0801901c
 80008ec:	24001194 	.word	0x24001194

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f017 ff86 	bl	8018810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f017 ff80 	bl	8018810 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f00c ffd1 	bl	800d8b8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <SystemClock_Config+0xec>)
 800091c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091e:	4a2f      	ldr	r2, [pc, #188]	@ (80009dc <SystemClock_Config+0xec>)
 8000920:	f023 0301 	bic.w	r3, r3, #1
 8000924:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <SystemClock_Config+0xec>)
 8000928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	4b2b      	ldr	r3, [pc, #172]	@ (80009e0 <SystemClock_Config+0xf0>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a2a      	ldr	r2, [pc, #168]	@ (80009e0 <SystemClock_Config+0xf0>)
 8000936:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <SystemClock_Config+0xf0>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000948:	bf00      	nop
 800094a:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <SystemClock_Config+0xf0>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000956:	d1f8      	bne.n	800094a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000958:	2301      	movs	r3, #1
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800095c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000962:	2302      	movs	r3, #2
 8000964:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000966:	2302      	movs	r3, #2
 8000968:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800096e:	2318      	movs	r3, #24
 8000970:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000972:	2302      	movs	r3, #2
 8000974:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000976:	2306      	movs	r3, #6
 8000978:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800097e:	230c      	movs	r3, #12
 8000980:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000982:	2300      	movs	r3, #0
 8000984:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	4618      	mov	r0, r3
 8000990:	f00c ffdc 	bl	800d94c <HAL_RCC_OscConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800099a:	f001 f899 	bl	8001ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	233f      	movs	r3, #63	@ 0x3f
 80009a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a2:	2303      	movs	r3, #3
 80009a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ae:	2340      	movs	r3, #64	@ 0x40
 80009b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009b2:	2340      	movs	r3, #64	@ 0x40
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00d fc1b 	bl	800e200 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80009d0:	f001 f87e 	bl	8001ad0 <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3770      	adds	r7, #112	@ 0x70
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58000400 	.word	0x58000400
 80009e0:	58024800 	.word	0x58024800

080009e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0b0      	sub	sp, #192	@ 0xc0
 80009e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	22c0      	movs	r2, #192	@ 0xc0
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f017 ff0d 	bl	8018810 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C2
 80009f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a74 <PeriphCommonClock_Config+0x90>)
 80009f8:	f04f 0300 	mov.w	r3, #0
 80009fc:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SPI4;
  PeriphClkInitStruct.PLL2.PLL2M = 16;
 8000a00:	2310      	movs	r3, #16
 8000a02:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 128;
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 8000a08:	2314      	movs	r3, #20
 8000a0a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 12;
 8000a24:	230c      	movs	r3, #12
 8000a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 3;
 8000a30:	2303      	movs	r3, #3
 8000a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000a34:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8000a44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a48:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f00d ff5c 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <PeriphCommonClock_Config+0x86>
  {
    Error_Handler();
 8000a66:	f001 f833 	bl	8001ad0 <Error_Handler>
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	37c0      	adds	r7, #192	@ 0xc0
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	00082008 	.word	0x00082008

08000a78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a9c:	4b38      	ldr	r3, [pc, #224]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000a9e:	4a39      	ldr	r2, [pc, #228]	@ (8000b84 <MX_ADC1_Init+0x10c>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 8000aa2:	4b37      	ldr	r3, [pc, #220]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000aa4:	f44f 12e0 	mov.w	r2, #1835008	@ 0x1c0000
 8000aa8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000aaa:	4b35      	ldr	r3, [pc, #212]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ab0:	4b33      	ldr	r3, [pc, #204]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ab6:	4b32      	ldr	r3, [pc, #200]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ab8:	2208      	movs	r2, #8
 8000aba:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000abc:	4b30      	ldr	r3, [pc, #192]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 2;
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000aca:	2202      	movs	r2, #2
 8000acc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ace:	4b2c      	ldr	r3, [pc, #176]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ada:	4b29      	ldr	r3, [pc, #164]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000aec:	4b24      	ldr	r3, [pc, #144]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000af2:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000afa:	4b21      	ldr	r3, [pc, #132]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b00:	481f      	ldr	r0, [pc, #124]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000b02:	f002 faf7 	bl	80030f4 <HAL_ADC_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b0c:	f000 ffe0 	bl	8001ad0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4819      	ldr	r0, [pc, #100]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000b1c:	f003 faa4 	bl	8004068 <HAL_ADCEx_MultiModeConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b26:	f000 ffd3 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_ADC1_Init+0x110>)
 8000b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000b32:	2307      	movs	r3, #7
 8000b34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b36:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b3a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000b4e:	f002 fd4b 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b58:	f000 ffba 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_ADC1_Init+0x114>)
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b60:	230c      	movs	r3, #12
 8000b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	4619      	mov	r1, r3
 8000b68:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_ADC1_Init+0x108>)
 8000b6a:	f002 fd3d 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b74:	f000 ffac 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2400039c 	.word	0x2400039c
 8000b84:	40022000 	.word	0x40022000
 8000b88:	0c900008 	.word	0x0c900008
 8000b8c:	10c00010 	.word	0x10c00010

08000b90 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b94:	4b1b      	ldr	r3, [pc, #108]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000b96:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <MX_I2C1_Init+0x78>)
 8000b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00401959;
 8000b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c0c <MX_I2C1_Init+0x7c>)
 8000b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ba0:	4b18      	ldr	r3, [pc, #96]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba6:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bb2:	4b14      	ldr	r3, [pc, #80]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb8:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bca:	480e      	ldr	r0, [pc, #56]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bcc:	f006 fcea 	bl	80075a4 <HAL_I2C_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bd6:	f000 ff7b 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4809      	ldr	r0, [pc, #36]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bde:	f009 f91b 	bl	8009e18 <HAL_I2CEx_ConfigAnalogFilter>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000be8:	f000 ff72 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bec:	2100      	movs	r1, #0
 8000bee:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <MX_I2C1_Init+0x74>)
 8000bf0:	f009 f95d 	bl	8009eae <HAL_I2CEx_ConfigDigitalFilter>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 ff69 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	24000478 	.word	0x24000478
 8000c08:	40005400 	.word	0x40005400
 8000c0c:	00401959 	.word	0x00401959

08000c10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <MX_I2C2_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00401959;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_I2C2_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c4c:	f006 fcaa 	bl	80075a4 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 ff3b 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c5e:	f009 f8db 	bl	8009e18 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 ff32 	bl	8001ad0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c70:	f009 f91d 	bl	8009eae <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 ff29 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	240004cc 	.word	0x240004cc
 8000c88:	40005800 	.word	0x40005800
 8000c8c:	00401959 	.word	0x00401959

08000c90 <MX_JPEG_Init>:
  * @brief JPEG Initialization Function
  * @param None
  * @retval None
  */
static void MX_JPEG_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_JPEG_Init+0x20>)
 8000c96:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <MX_JPEG_Init+0x24>)
 8000c98:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_JPEG_Init+0x20>)
 8000c9c:	f009 f954 	bl	8009f48 <HAL_JPEG_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8000ca6:	f000 ff13 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000610 	.word	0x24000610
 8000cb4:	52003000 	.word	0x52003000

08000cb8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000cbc:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cbe:	4a28      	ldr	r2, [pc, #160]	@ (8000d60 <MX_SPI4_Init+0xa8>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b26      	ldr	r3, [pc, #152]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000cca:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000ccc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000cd0:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd8:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cde:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000ce6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cea:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d10:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d18:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d30:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d36:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d3c:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d42:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d48:	4804      	ldr	r0, [pc, #16]	@ (8000d5c <MX_SPI4_Init+0xa4>)
 8000d4a:	f010 fae3 	bl	8011314 <HAL_SPI_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000d54:	f000 febc 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	24000740 	.word	0x24000740
 8000d60:	40013400 	.word	0x40013400

08000d64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d6a:	4a25      	ldr	r2, [pc, #148]	@ (8000e00 <MX_USART1_UART_Init+0x9c>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 111111;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d70:	4a24      	ldr	r2, [pc, #144]	@ (8000e04 <MX_USART1_UART_Init+0xa0>)
 8000d72:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d88:	220c      	movs	r2, #12
 8000d8a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d98:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000da6:	2220      	movs	r2, #32
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000daa:	4b14      	ldr	r3, [pc, #80]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000db0:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000db2:	4812      	ldr	r0, [pc, #72]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000db4:	f011 fa59 	bl	801226a <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000dbe:	f000 fe87 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000dc6:	f013 f974 	bl	80140b2 <HAL_UARTEx_SetTxFifoThreshold>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_USART1_UART_Init+0x70>
  {
    Error_Handler();
 8000dd0:	f000 fe7e 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000dd8:	f013 f9a9 	bl	801412e <HAL_UARTEx_SetRxFifoThreshold>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x82>
  {
    Error_Handler();
 8000de2:	f000 fe75 	bl	8001ad0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_USART1_UART_Init+0x98>)
 8000de8:	f013 f928 	bl	801403c <HAL_UARTEx_EnableFifoMode>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART1_UART_Init+0x92>
  {
    Error_Handler();
 8000df2:	f000 fe6d 	bl	8001ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	24000840 	.word	0x24000840
 8000e00:	40011000 	.word	0x40011000
 8000e04:	0001b207 	.word	0x0001b207

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <MX_DMA_Init+0x9c>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e14:	4a23      	ldr	r2, [pc, #140]	@ (8000ea4 <MX_DMA_Init+0x9c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_DMA_Init+0x9c>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_DMA_Init+0x9c>)
 8000e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e32:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea4 <MX_DMA_Init+0x9c>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_DMA_Init+0x9c>)
 8000e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f003 fac3 	bl	80043da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e54:	200b      	movs	r0, #11
 8000e56:	f003 fada 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	200c      	movs	r0, #12
 8000e60:	f003 fabb 	bl	80043da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e64:	200c      	movs	r0, #12
 8000e66:	f003 fad2 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	200d      	movs	r0, #13
 8000e70:	f003 fab3 	bl	80043da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e74:	200d      	movs	r0, #13
 8000e76:	f003 faca 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	200e      	movs	r0, #14
 8000e80:	f003 faab 	bl	80043da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e84:	200e      	movs	r0, #14
 8000e86:	f003 fac2 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2038      	movs	r0, #56	@ 0x38
 8000e90:	f003 faa3 	bl	80043da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e94:	2038      	movs	r0, #56	@ 0x38
 8000e96:	f003 faba 	bl	800440e <HAL_NVIC_EnableIRQ>

}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000eae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_MDMA_Init+0x3c>)
 8000eb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee4 <MX_MDMA_Init+0x3c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_MDMA_Init+0x3c>)
 8000ec0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	207a      	movs	r0, #122	@ 0x7a
 8000ed2:	f003 fa82 	bl	80043da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000ed6:	207a      	movs	r0, #122	@ 0x7a
 8000ed8:	f003 fa99 	bl	800440e <HAL_NVIC_EnableIRQ>

}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	58024400 	.word	0x58024400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b4e      	ldr	r3, [pc, #312]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	4a4c      	ldr	r2, [pc, #304]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1c:	4b46      	ldr	r3, [pc, #280]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	4a45      	ldr	r2, [pc, #276]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2c:	4b42      	ldr	r3, [pc, #264]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	4a3d      	ldr	r2, [pc, #244]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	4a36      	ldr	r2, [pc, #216]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f68:	4b33      	ldr	r3, [pc, #204]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b30      	ldr	r3, [pc, #192]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f86:	4b2c      	ldr	r3, [pc, #176]	@ (8001038 <MX_GPIO_Init+0x150>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_DC_GPIO_Port, SPI4_DC_Pin, GPIO_PIN_SET);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2120      	movs	r1, #32
 8000f98:	4828      	ldr	r0, [pc, #160]	@ (800103c <MX_GPIO_Init+0x154>)
 8000f9a:	f006 fae9 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_RST_GPIO_Port, SPI4_RST_Pin, GPIO_PIN_SET);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fa4:	4826      	ldr	r0, [pc, #152]	@ (8001040 <MX_GPIO_Init+0x158>)
 8000fa6:	f006 fae3 	bl	8007570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_DC_Pin */
  GPIO_InitStruct.Pin = SPI4_DC_Pin;
 8000faa:	2320      	movs	r3, #32
 8000fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_DC_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481e      	ldr	r0, [pc, #120]	@ (800103c <MX_GPIO_Init+0x154>)
 8000fc2:	f006 f90d 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LB_Pin */
  GPIO_InitStruct.Pin = BTN_LB_Pin;
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_LB_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0314 	add.w	r3, r7, #20
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481a      	ldr	r0, [pc, #104]	@ (8001044 <MX_GPIO_Init+0x15c>)
 8000fda:	f006 f901 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_RB_Pin */
  GPIO_InitStruct.Pin = BTN_RB_Pin;
 8000fde:	2320      	movs	r3, #32
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_RB_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	@ (8001040 <MX_GPIO_Init+0x158>)
 8000ff2:	f006 f8f5 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_LF_Pin BTN_RF_Pin */
  GPIO_InitStruct.Pin = BTN_LF_Pin|BTN_RF_Pin;
 8000ff6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	@ (8001040 <MX_GPIO_Init+0x158>)
 800100c:	f006 f8e8 	bl	80071e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI4_RST_Pin */
  GPIO_InitStruct.Pin = SPI4_RST_Pin;
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI4_RST_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_GPIO_Init+0x158>)
 800102a:	f006 f8d9 	bl	80071e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	58024400 	.word	0x58024400
 800103c:	58021000 	.word	0x58021000
 8001040:	58020800 	.word	0x58020800
 8001044:	58020000 	.word	0x58020000

08001048 <SCH_XBeeRX>:

/* USER CODE BEGIN 4 */
// ------------------------------------------------------------ SCHDULING FUNCTIONS -- //
void SCH_XBeeRX() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
	// If there's a packet, process it
	// If the packet is good, push it to the screen
	uint16_t rx_byte;
	uint8_t *rx_packet;
	uint8_t ret = XBEE_RXPacket(&hxbee, &rx_packet, &rx_byte);
 800104e:	1d3a      	adds	r2, r7, #4
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	483e      	ldr	r0, [pc, #248]	@ (8001150 <SCH_XBeeRX+0x108>)
 8001056:	f014 fca1 	bl	801599c <XBEE_RXPacket>
 800105a:	4603      	mov	r3, r0
 800105c:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d171      	bne.n	8001148 <SCH_XBeeRX+0x100>
		if (rx_byte <= JPEG_WIDTH*JPEG_HEIGHT/64 + 1) {
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	2b37      	cmp	r3, #55	@ 0x37
 8001068:	d86e      	bhi.n	8001148 <SCH_XBeeRX+0x100>
			// Data was fully sent
			if (rx_byte < uart_rx_lastPacketNum && jpeg_state == 0) {
 800106a:	88ba      	ldrh	r2, [r7, #4]
 800106c:	4b39      	ldr	r3, [pc, #228]	@ (8001154 <SCH_XBeeRX+0x10c>)
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d24b      	bcs.n	800110c <SCH_XBeeRX+0xc4>
 8001074:	4b38      	ldr	r3, [pc, #224]	@ (8001158 <SCH_XBeeRX+0x110>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d147      	bne.n	800110c <SCH_XBeeRX+0xc4>
				// Start the jpeg decode
				jpeg_size = uart_rx_lastPacketNum*64 + JPEG_HEADERSIZE;
 800107c:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <SCH_XBeeRX+0x10c>)
 800107e:	881b      	ldrh	r3, [r3, #0]
 8001080:	019b      	lsls	r3, r3, #6
 8001082:	b29b      	uxth	r3, r3
 8001084:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001088:	b29a      	uxth	r2, r3
 800108a:	4b34      	ldr	r3, [pc, #208]	@ (800115c <SCH_XBeeRX+0x114>)
 800108c:	801a      	strh	r2, [r3, #0]
				HAL_StatusTypeDef ret;
				if (jpeg_currentraw)
 800108e:	4b34      	ldr	r3, [pc, #208]	@ (8001160 <SCH_XBeeRX+0x118>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00d      	beq.n	80010b2 <SCH_XBeeRX+0x6a>
					ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw1, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 8001096:	4b31      	ldr	r3, [pc, #196]	@ (800115c <SCH_XBeeRX+0x114>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4b30      	ldr	r3, [pc, #192]	@ (8001164 <SCH_XBeeRX+0x11c>)
 80010a4:	4930      	ldr	r1, [pc, #192]	@ (8001168 <SCH_XBeeRX+0x120>)
 80010a6:	4831      	ldr	r0, [pc, #196]	@ (800116c <SCH_XBeeRX+0x124>)
 80010a8:	f009 f865 	bl	800a176 <HAL_JPEG_Decode_DMA>
 80010ac:	4603      	mov	r3, r0
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	e00c      	b.n	80010cc <SCH_XBeeRX+0x84>
				else {
					ret = HAL_JPEG_Decode_DMA(&hjpeg, jpeg_raw2, jpeg_size, jpeg_out, JPEG_MCU_WIDTH*JPEG_MCU_HEIGHT*64);
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <SCH_XBeeRX+0x114>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	f44f 6358 	mov.w	r3, #3456	@ 0xd80
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <SCH_XBeeRX+0x11c>)
 80010c0:	492b      	ldr	r1, [pc, #172]	@ (8001170 <SCH_XBeeRX+0x128>)
 80010c2:	482a      	ldr	r0, [pc, #168]	@ (800116c <SCH_XBeeRX+0x124>)
 80010c4:	f009 f857 	bl	800a176 <HAL_JPEG_Decode_DMA>
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
				}
				jpeg_currentraw = !jpeg_currentraw;
 80010cc:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <SCH_XBeeRX+0x118>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	4b20      	ldr	r3, [pc, #128]	@ (8001160 <SCH_XBeeRX+0x118>)
 80010de:	701a      	strb	r2, [r3, #0]

				if (ret) {
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00f      	beq.n	8001106 <SCH_XBeeRX+0xbe>
					sprintf(ssd_msg, " JPEG FAIL %d", ret);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4922      	ldr	r1, [pc, #136]	@ (8001174 <SCH_XBeeRX+0x12c>)
 80010ec:	4822      	ldr	r0, [pc, #136]	@ (8001178 <SCH_XBeeRX+0x130>)
 80010ee:	f017 fb6d 	bl	80187cc <siprintf>
					WriteDebug(ssd_msg, strlen(ssd_msg));
 80010f2:	4821      	ldr	r0, [pc, #132]	@ (8001178 <SCH_XBeeRX+0x130>)
 80010f4:	f7ff f8f4 	bl	80002e0 <strlen>
 80010f8:	4603      	mov	r3, r0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4619      	mov	r1, r3
 80010fe:	481e      	ldr	r0, [pc, #120]	@ (8001178 <SCH_XBeeRX+0x130>)
 8001100:	f000 fc94 	bl	8001a2c <WriteDebug>
 8001104:	e002      	b.n	800110c <SCH_XBeeRX+0xc4>
				} else {
					jpeg_state = 1;
 8001106:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <SCH_XBeeRX+0x110>)
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
				}
			}
			uart_rx_lastPacketNum = rx_byte;
 800110c:	88ba      	ldrh	r2, [r7, #4]
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <SCH_XBeeRX+0x10c>)
 8001110:	801a      	strh	r2, [r3, #0]

			// fill in the received data
			if (jpeg_currentraw)
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <SCH_XBeeRX+0x118>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d00b      	beq.n	8001132 <SCH_XBeeRX+0xea>
				memcpy(jpeg_raw1 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
 800111a:	88bb      	ldrh	r3, [r7, #4]
 800111c:	019b      	lsls	r3, r3, #6
 800111e:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 8001122:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <SCH_XBeeRX+0x120>)
 8001124:	4413      	add	r3, r2
 8001126:	6839      	ldr	r1, [r7, #0]
 8001128:	2240      	movs	r2, #64	@ 0x40
 800112a:	4618      	mov	r0, r3
 800112c:	f017 fbb4 	bl	8018898 <memcpy>
			else {
				memcpy(jpeg_raw2 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
			}
		}
	}
}
 8001130:	e00a      	b.n	8001148 <SCH_XBeeRX+0x100>
				memcpy(jpeg_raw2 + JPEG_HEADERSIZE + rx_byte * 64, rx_packet, 64);
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	019b      	lsls	r3, r3, #6
 8001136:	f203 230e 	addw	r3, r3, #526	@ 0x20e
 800113a:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <SCH_XBeeRX+0x128>)
 800113c:	4413      	add	r3, r2
 800113e:	6839      	ldr	r1, [r7, #0]
 8001140:	2240      	movs	r2, #64	@ 0x40
 8001142:	4618      	mov	r0, r3
 8001144:	f017 fba8 	bl	8018898 <memcpy>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	24026aa8 	.word	0x24026aa8
 8001154:	24026acc 	.word	0x24026acc
 8001158:	24029352 	.word	0x24029352
 800115c:	24029350 	.word	0x24029350
 8001160:	24026ace 	.word	0x24026ace
 8001164:	240285d0 	.word	0x240285d0
 8001168:	24026ad0 	.word	0x24026ad0
 800116c:	24000610 	.word	0x24000610
 8001170:	24027850 	.word	0x24027850
 8001174:	08019034 	.word	0x08019034
 8001178:	24001194 	.word	0x24001194

0800117c <SCH_ImageDecode>:

void SCH_ImageDecode() {
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
	if (jpeg_state != 2) return;
 8001182:	4b63      	ldr	r3, [pc, #396]	@ (8001310 <SCH_ImageDecode+0x194>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b02      	cmp	r3, #2
 8001188:	f040 80bc 	bne.w	8001304 <SCH_ImageDecode+0x188>
		// Loop through every mcu block
		for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 800118c:	2300      	movs	r3, #0
 800118e:	82fb      	strh	r3, [r7, #22]
 8001190:	e0a3      	b.n	80012da <SCH_ImageDecode+0x15e>
			uint16_t mcu_idx = current_mcu_y*JPEG_MCU_WIDTH + mcu_x;
 8001192:	4b60      	ldr	r3, [pc, #384]	@ (8001314 <SCH_ImageDecode+0x198>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	0052      	lsls	r2, r2, #1
 800119a:	4413      	add	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	8afb      	ldrh	r3, [r7, #22]
 80011a2:	4413      	add	r3, r2
 80011a4:	81fb      	strh	r3, [r7, #14]

			for (uint16_t y = 0; y < 8; y++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	82bb      	strh	r3, [r7, #20]
 80011aa:	e08f      	b.n	80012cc <SCH_ImageDecode+0x150>
				for (uint16_t x = 0; x < 8; x++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	827b      	strh	r3, [r7, #18]
 80011b0:	e085      	b.n	80012be <SCH_ImageDecode+0x142>
					// Bounds check
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80011b2:	8afb      	ldrh	r3, [r7, #22]
 80011b4:	00da      	lsls	r2, r3, #3
 80011b6:	8a7b      	ldrh	r3, [r7, #18]
 80011b8:	4413      	add	r3, r2
 80011ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80011bc:	dc77      	bgt.n	80012ae <SCH_ImageDecode+0x132>
					// COLOR FORMAT
					// |RRRRR GGG|GGG BBBBB|
					// TODO: stop transmitting overscan to save bandwidth

					uint32_t pix_x = (mcu_x*8 + x)*5;
 80011be:	8afb      	ldrh	r3, [r7, #22]
 80011c0:	00da      	lsls	r2, r3, #3
 80011c2:	8a7b      	ldrh	r3, [r7, #18]
 80011c4:	441a      	add	r2, r3
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	60bb      	str	r3, [r7, #8]
					if (pix_x >= LCD_WIDTH-1) continue;
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2bee      	cmp	r3, #238	@ 0xee
 80011d2:	d86e      	bhi.n	80012b2 <SCH_ImageDecode+0x136>
					pix_x = LCD_WIDTH - pix_x - 1;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80011da:	60bb      	str	r3, [r7, #8]
					uint32_t pix_y = (current_mcu_y*8 + y)*5;
 80011dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001314 <SCH_ImageDecode+0x198>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	00da      	lsls	r2, r3, #3
 80011e2:	8abb      	ldrh	r3, [r7, #20]
 80011e4:	441a      	add	r2, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	607b      	str	r3, [r7, #4]
					if (pix_y >= LCD_HEIGHT-2) continue;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 80011f4:	d25f      	bcs.n	80012b6 <SCH_ImageDecode+0x13a>

					uint8_t sample = jpeg_out[mcu_idx*64 + y*8 + x];
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	00da      	lsls	r2, r3, #3
 80011fa:	8abb      	ldrh	r3, [r7, #20]
 80011fc:	4413      	add	r3, r2
 80011fe:	00da      	lsls	r2, r3, #3
 8001200:	8a7b      	ldrh	r3, [r7, #18]
 8001202:	4413      	add	r3, r2
 8001204:	4a44      	ldr	r2, [pc, #272]	@ (8001318 <SCH_ImageDecode+0x19c>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	70fb      	strb	r3, [r7, #3]
					uint8_t msb = (sample & 0b11111000) | ((sample & 0b11100000)>>5);
 800120a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800120e:	f023 0307 	bic.w	r3, r3, #7
 8001212:	b25a      	sxtb	r2, r3
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	b2db      	uxtb	r3, r3
 800121a:	b25b      	sxtb	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b25b      	sxtb	r3, r3
 8001220:	70bb      	strb	r3, [r7, #2]
					uint8_t lsb = ((sample & 0b11111000) >> 3) | ((sample & 0b00011100)<<3);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	b2db      	uxtb	r3, r3
 8001228:	b25a      	sxtb	r2, r3
 800122a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	b25b      	sxtb	r3, r3
 8001232:	f023 031f 	bic.w	r3, r3, #31
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b25b      	sxtb	r3, r3
 800123c:	707b      	strb	r3, [r7, #1]

					// TODO: Speed this up as much as possible, even if it means skipping lines
					// Loop through the pixels in a box
					for (uint8_t xOff = 0; xOff < 3; xOff++) {
 800123e:	2300      	movs	r3, #0
 8001240:	747b      	strb	r3, [r7, #17]
 8001242:	e030      	b.n	80012a6 <SCH_ImageDecode+0x12a>
						for (uint8_t yOff = 0; yOff < 3; yOff++) {
 8001244:	2300      	movs	r3, #0
 8001246:	743b      	strb	r3, [r7, #16]
 8001248:	e027      	b.n	800129a <SCH_ImageDecode+0x11e>
							hst7789.vram[(pix_y+yOff)*LCD_WIDTH*2 + (pix_x+xOff)*2    ] = msb;
 800124a:	4b34      	ldr	r3, [pc, #208]	@ (800131c <SCH_ImageDecode+0x1a0>)
 800124c:	6919      	ldr	r1, [r3, #16]
 800124e:	7c3a      	ldrb	r2, [r7, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	441a      	add	r2, r3
 8001254:	4613      	mov	r3, r2
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	1a9b      	subs	r3, r3, r2
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4618      	mov	r0, r3
 800125e:	7c7a      	ldrb	r2, [r7, #17]
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4413      	add	r3, r2
 8001264:	4403      	add	r3, r0
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	78ba      	ldrb	r2, [r7, #2]
 800126c:	701a      	strb	r2, [r3, #0]
							hst7789.vram[(pix_y+yOff)*LCD_WIDTH*2 + (pix_x+xOff)*2 + 1] = lsb;
 800126e:	4b2b      	ldr	r3, [pc, #172]	@ (800131c <SCH_ImageDecode+0x1a0>)
 8001270:	6919      	ldr	r1, [r3, #16]
 8001272:	7c3a      	ldrb	r2, [r7, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	441a      	add	r2, r3
 8001278:	4613      	mov	r3, r2
 800127a:	011b      	lsls	r3, r3, #4
 800127c:	1a9b      	subs	r3, r3, r2
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4618      	mov	r0, r3
 8001282:	7c7a      	ldrb	r2, [r7, #17]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4413      	add	r3, r2
 8001288:	4403      	add	r3, r0
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	3301      	adds	r3, #1
 800128e:	440b      	add	r3, r1
 8001290:	787a      	ldrb	r2, [r7, #1]
 8001292:	701a      	strb	r2, [r3, #0]
						for (uint8_t yOff = 0; yOff < 3; yOff++) {
 8001294:	7c3b      	ldrb	r3, [r7, #16]
 8001296:	3301      	adds	r3, #1
 8001298:	743b      	strb	r3, [r7, #16]
 800129a:	7c3b      	ldrb	r3, [r7, #16]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d9d4      	bls.n	800124a <SCH_ImageDecode+0xce>
					for (uint8_t xOff = 0; xOff < 3; xOff++) {
 80012a0:	7c7b      	ldrb	r3, [r7, #17]
 80012a2:	3301      	adds	r3, #1
 80012a4:	747b      	strb	r3, [r7, #17]
 80012a6:	7c7b      	ldrb	r3, [r7, #17]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d9cb      	bls.n	8001244 <SCH_ImageDecode+0xc8>
 80012ac:	e004      	b.n	80012b8 <SCH_ImageDecode+0x13c>
					if ((mcu_x*8 + x) > LCD_WIDTH) continue;
 80012ae:	bf00      	nop
 80012b0:	e002      	b.n	80012b8 <SCH_ImageDecode+0x13c>
					if (pix_x >= LCD_WIDTH-1) continue;
 80012b2:	bf00      	nop
 80012b4:	e000      	b.n	80012b8 <SCH_ImageDecode+0x13c>
					if (pix_y >= LCD_HEIGHT-2) continue;
 80012b6:	bf00      	nop
				for (uint16_t x = 0; x < 8; x++) {
 80012b8:	8a7b      	ldrh	r3, [r7, #18]
 80012ba:	3301      	adds	r3, #1
 80012bc:	827b      	strh	r3, [r7, #18]
 80012be:	8a7b      	ldrh	r3, [r7, #18]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	f67f af76 	bls.w	80011b2 <SCH_ImageDecode+0x36>
			for (uint16_t y = 0; y < 8; y++) {
 80012c6:	8abb      	ldrh	r3, [r7, #20]
 80012c8:	3301      	adds	r3, #1
 80012ca:	82bb      	strh	r3, [r7, #20]
 80012cc:	8abb      	ldrh	r3, [r7, #20]
 80012ce:	2b07      	cmp	r3, #7
 80012d0:	f67f af6c 	bls.w	80011ac <SCH_ImageDecode+0x30>
		for (uint16_t mcu_x = 0; mcu_x < JPEG_MCU_WIDTH; mcu_x++) {
 80012d4:	8afb      	ldrh	r3, [r7, #22]
 80012d6:	3301      	adds	r3, #1
 80012d8:	82fb      	strh	r3, [r7, #22]
 80012da:	8afb      	ldrh	r3, [r7, #22]
 80012dc:	2b05      	cmp	r3, #5
 80012de:	f67f af58 	bls.w	8001192 <SCH_ImageDecode+0x16>
					}
				}
			}
		}

		current_mcu_y++;
 80012e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <SCH_ImageDecode+0x198>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <SCH_ImageDecode+0x198>)
 80012ec:	701a      	strb	r2, [r3, #0]

		if (current_mcu_y >= JPEG_MCU_HEIGHT) {
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <SCH_ImageDecode+0x198>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d907      	bls.n	8001306 <SCH_ImageDecode+0x18a>
			//ST7789_UpdateSector(&hst7789, 2);
			current_mcu_y = 0;
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <SCH_ImageDecode+0x198>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
			// Flag JPEG as idle
			jpeg_state = 0;
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <SCH_ImageDecode+0x194>)
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
 8001302:	e000      	b.n	8001306 <SCH_ImageDecode+0x18a>
	if (jpeg_state != 2) return;
 8001304:	bf00      	nop
		}
}
 8001306:	371c      	adds	r7, #28
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	24029352 	.word	0x24029352
 8001314:	24029353 	.word	0x24029353
 8001318:	240285d0 	.word	0x240285d0
 800131c:	2400125c 	.word	0x2400125c

08001320 <SCH_OLEDUpdate>:

void SCH_OLEDUpdate() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
	// Get delta time and allow delay for screen refresh
	uint32_t delta_t = DeltaTime(sch_tim_oled);
 8001326:	4b30      	ldr	r3, [pc, #192]	@ (80013e8 <SCH_OLEDUpdate+0xc8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f8ce 	bl	80014cc <DeltaTime>
 8001330:	6138      	str	r0, [r7, #16]
	if (delta_t < SCH_MS_OLED) return;
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	2b31      	cmp	r3, #49	@ 0x31
 8001336:	d952      	bls.n	80013de <SCH_OLEDUpdate+0xbe>

	// Update the timer for the next DT period
	sch_tim_oled = HAL_GetTick();
 8001338:	f001 fc86 	bl	8002c48 <HAL_GetTick>
 800133c:	4603      	mov	r3, r0
 800133e:	4a2a      	ldr	r2, [pc, #168]	@ (80013e8 <SCH_OLEDUpdate+0xc8>)
 8001340:	6013      	str	r3, [r2, #0]

	// Display the screen contents
	// Clear existing VRAM
	SSD1306_Clear(&hssd1);
 8001342:	482a      	ldr	r0, [pc, #168]	@ (80013ec <SCH_OLEDUpdate+0xcc>)
 8001344:	f001 f9be 	bl	80026c4 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001348:	4829      	ldr	r0, [pc, #164]	@ (80013f0 <SCH_OLEDUpdate+0xd0>)
 800134a:	f001 f9bb 	bl	80026c4 <SSD1306_Clear>

	// Draw the sliders
	Draw_Slider(0);
 800134e:	2000      	movs	r0, #0
 8001350:	f000 fa22 	bl	8001798 <Draw_Slider>
	Draw_Slider(1);
 8001354:	2001      	movs	r0, #1
 8001356:	f000 fa1f 	bl	8001798 <Draw_Slider>

	// DEBUG INPUT
	uint8_t tmp_msg[10] = {0};
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	811a      	strh	r2, [r3, #8]
	for (uint16_t i = 0; i < 4; i++) {
 8001364:	2300      	movs	r3, #0
 8001366:	82fb      	strh	r3, [r7, #22]
 8001368:	e02f      	b.n	80013ca <SCH_OLEDUpdate+0xaa>
		hssd1.str_cursor = 32 + (i+1)*128;
 800136a:	8afb      	ldrh	r3, [r7, #22]
 800136c:	01db      	lsls	r3, r3, #7
 800136e:	b29b      	uxth	r3, r3
 8001370:	33a0      	adds	r3, #160	@ 0xa0
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <SCH_OLEDUpdate+0xcc>)
 8001376:	821a      	strh	r2, [r3, #16]
		hssd2.str_cursor = 32 + (i+1)*128;
 8001378:	8afb      	ldrh	r3, [r7, #22]
 800137a:	01db      	lsls	r3, r3, #7
 800137c:	b29b      	uxth	r3, r3
 800137e:	33a0      	adds	r3, #160	@ 0xa0
 8001380:	b29a      	uxth	r2, r3
 8001382:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <SCH_OLEDUpdate+0xd0>)
 8001384:	821a      	strh	r2, [r3, #16]
		sprintf(tmp_msg, "%03d", test_vals[i]);
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	4a1a      	ldr	r2, [pc, #104]	@ (80013f4 <SCH_OLEDUpdate+0xd4>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	461a      	mov	r2, r3
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4919      	ldr	r1, [pc, #100]	@ (80013f8 <SCH_OLEDUpdate+0xd8>)
 8001392:	4618      	mov	r0, r3
 8001394:	f017 fa1a 	bl	80187cc <siprintf>
		SSD1306_DrawString(&hssd1, tmp_msg, strlen(tmp_msg));
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4618      	mov	r0, r3
 800139c:	f7fe ffa0 	bl	80002e0 <strlen>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4619      	mov	r1, r3
 80013a8:	4810      	ldr	r0, [pc, #64]	@ (80013ec <SCH_OLEDUpdate+0xcc>)
 80013aa:	f001 fa09 	bl	80027c0 <SSD1306_DrawString>
		SSD1306_DrawString(&hssd2, tmp_msg, strlen(tmp_msg));
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7fe ff95 	bl	80002e0 <strlen>
 80013b6:	4603      	mov	r3, r0
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <SCH_OLEDUpdate+0xd0>)
 80013c0:	f001 f9fe 	bl	80027c0 <SSD1306_DrawString>
	for (uint16_t i = 0; i < 4; i++) {
 80013c4:	8afb      	ldrh	r3, [r7, #22]
 80013c6:	3301      	adds	r3, #1
 80013c8:	82fb      	strh	r3, [r7, #22]
 80013ca:	8afb      	ldrh	r3, [r7, #22]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d9cc      	bls.n	800136a <SCH_OLEDUpdate+0x4a>
	}


	// Update the screens
	SSD1306_Update(&hssd1);
 80013d0:	4806      	ldr	r0, [pc, #24]	@ (80013ec <SCH_OLEDUpdate+0xcc>)
 80013d2:	f001 f98b 	bl	80026ec <SSD1306_Update>
	SSD1306_Update(&hssd2);
 80013d6:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <SCH_OLEDUpdate+0xd0>)
 80013d8:	f001 f988 	bl	80026ec <SSD1306_Update>
 80013dc:	e000      	b.n	80013e0 <SCH_OLEDUpdate+0xc0>
	if (delta_t < SCH_MS_OLED) return;
 80013de:	bf00      	nop
}
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2400094c 	.word	0x2400094c
 80013ec:	2400096c 	.word	0x2400096c
 80013f0:	24000980 	.word	0x24000980
 80013f4:	24000968 	.word	0x24000968
 80013f8:	08019044 	.word	0x08019044

080013fc <SCH_GetInputs>:

void SCH_GetInputs() {
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 4; i++) {
 8001402:	2300      	movs	r3, #0
 8001404:	71fb      	strb	r3, [r7, #7]
 8001406:	e04d      	b.n	80014a4 <SCH_GetInputs+0xa8>
		// Debounce timer
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4a2a      	ldr	r2, [pc, #168]	@ (80014b4 <SCH_GetInputs+0xb8>)
 800140c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001410:	4618      	mov	r0, r3
 8001412:	f000 f85b 	bl	80014cc <DeltaTime>
 8001416:	4603      	mov	r3, r0
 8001418:	2b13      	cmp	r3, #19
 800141a:	d93f      	bls.n	800149c <SCH_GetInputs+0xa0>

		// Get input
		uint8_t i_new = !HAL_GPIO_ReadPin(i_ports[i], i_pins[i]);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	4a26      	ldr	r2, [pc, #152]	@ (80014b8 <SCH_GetInputs+0xbc>)
 8001420:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4925      	ldr	r1, [pc, #148]	@ (80014bc <SCH_GetInputs+0xc0>)
 8001428:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f006 f886 	bl	8007540 <HAL_GPIO_ReadPin>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf0c      	ite	eq
 800143a:	2301      	moveq	r3, #1
 800143c:	2300      	movne	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	71bb      	strb	r3, [r7, #6]

		// Update debounce timer
		if (i_new != istate_hold[i])
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <SCH_GetInputs+0xc4>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	79ba      	ldrb	r2, [r7, #6]
 800144a:	429a      	cmp	r2, r3
 800144c:	d006      	beq.n	800145c <SCH_GetInputs+0x60>
			istate_time[i] = HAL_GetTick();
 800144e:	79fc      	ldrb	r4, [r7, #7]
 8001450:	f001 fbfa 	bl	8002c48 <HAL_GetTick>
 8001454:	4603      	mov	r3, r0
 8001456:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <SCH_GetInputs+0xb8>)
 8001458:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

		istate_pressed[i] = i_new && !istate_hold[i];	// Just pressed
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <SCH_GetInputs+0x74>
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a16      	ldr	r2, [pc, #88]	@ (80014c0 <SCH_GetInputs+0xc4>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <SCH_GetInputs+0x74>
 800146c:	2201      	movs	r2, #1
 800146e:	e000      	b.n	8001472 <SCH_GetInputs+0x76>
 8001470:	2200      	movs	r2, #0
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	b2d1      	uxtb	r1, r2
 8001476:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <SCH_GetInputs+0xc8>)
 8001478:	54d1      	strb	r1, [r2, r3]
		istate_hold[i] = i_new;							// Update sotred val
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	4910      	ldr	r1, [pc, #64]	@ (80014c0 <SCH_GetInputs+0xc4>)
 800147e:	79ba      	ldrb	r2, [r7, #6]
 8001480:	54ca      	strb	r2, [r1, r3]

		// DEBUG
		if (istate_pressed[i]) {
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4a0f      	ldr	r2, [pc, #60]	@ (80014c4 <SCH_GetInputs+0xc8>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <SCH_GetInputs+0xa2>
			test_vals[i]++;
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4a0e      	ldr	r2, [pc, #56]	@ (80014c8 <SCH_GetInputs+0xcc>)
 8001490:	5cd2      	ldrb	r2, [r2, r3]
 8001492:	3201      	adds	r2, #1
 8001494:	b2d1      	uxtb	r1, r2
 8001496:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <SCH_GetInputs+0xcc>)
 8001498:	54d1      	strb	r1, [r2, r3]
 800149a:	e000      	b.n	800149e <SCH_GetInputs+0xa2>
		if (DeltaTime(istate_time[i]) < INPUT_DEBOUNCE) continue;
 800149c:	bf00      	nop
	for (uint8_t i = 0; i < 4; i++) {
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	3301      	adds	r3, #1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d9ae      	bls.n	8001408 <SCH_GetInputs+0xc>
		}
	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}
 80014b4:	24000954 	.word	0x24000954
 80014b8:	24000000 	.word	0x24000000
 80014bc:	24000010 	.word	0x24000010
 80014c0:	24000950 	.word	0x24000950
 80014c4:	24000964 	.word	0x24000964
 80014c8:	24000968 	.word	0x24000968

080014cc <DeltaTime>:

// ------------------------------------------------------------ UTILITY FUNCTIONS -- //

uint32_t DeltaTime(uint32_t start_t) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	uint32_t now_t = HAL_GetTick();
 80014d4:	f001 fbb8 	bl	8002c48 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]
	if (now_t < start_t) {
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d204      	bcs.n	80014ec <DeltaTime+0x20>
		// Overflow has occurred
		return (0xFFFFFFFF - start_t) + now_t;
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	3b01      	subs	r3, #1
 80014ea:	e002      	b.n	80014f2 <DeltaTime+0x26>
	}

	return now_t - start_t;
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	1ad3      	subs	r3, r2, r3
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_UART_RxCpltCallback>:
}

// DEBUG FUNCTIONS

// ------------------------------------------------------------ OVERRIDE UART DMA CALLBACKS -- //
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	uint8_t ret = XBEE_RX_DMACallback(&hxbee);
 8001504:	480d      	ldr	r0, [pc, #52]	@ (800153c <HAL_UART_RxCpltCallback+0x40>)
 8001506:	f014 fa9b 	bl	8015a40 <XBEE_RX_DMACallback>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
	if (ret) {
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00e      	beq.n	8001532 <HAL_UART_RxCpltCallback+0x36>
		sprintf(ssd_msg, " PKT Err: %d", ret);
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	461a      	mov	r2, r3
 8001518:	4909      	ldr	r1, [pc, #36]	@ (8001540 <HAL_UART_RxCpltCallback+0x44>)
 800151a:	480a      	ldr	r0, [pc, #40]	@ (8001544 <HAL_UART_RxCpltCallback+0x48>)
 800151c:	f017 f956 	bl	80187cc <siprintf>
		WriteDebug(ssd_msg, strlen(ssd_msg));
 8001520:	4808      	ldr	r0, [pc, #32]	@ (8001544 <HAL_UART_RxCpltCallback+0x48>)
 8001522:	f7fe fedd 	bl	80002e0 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <HAL_UART_RxCpltCallback+0x48>)
 800152e:	f000 fa7d 	bl	8001a2c <WriteDebug>
	}
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	24026aa8 	.word	0x24026aa8
 8001540:	0801904c 	.word	0x0801904c
 8001544:	24001194 	.word	0x24001194

08001548 <HAL_JPEG_DecodeCpltCallback>:

// ------------------------------------------------------------ OVERRIDE JPEG DMA CALLBACKS -- //
// JPEG hardware has completed the current image
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef * hjpeg) {
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	// Reset JPEG variables
	//sprintf(ssd_msg, " JPEG CPLT %d", hjpeg->OutDataLength);
	//WriteDebug(ssd_msg, strlen(ssd_msg));
	jpeg_state = 2;
 8001550:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8001552:	2202      	movs	r2, #2
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	24029352 	.word	0x24029352

08001568 <HAL_JPEG_ErrorCallback>:

// JPEG hardware encountered an error
void HAL_JPEG_ErrorCallback (JPEG_HandleTypeDef * hjpeg) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	sprintf(ssd_msg, " JPEG ERROR");
 8001570:	4909      	ldr	r1, [pc, #36]	@ (8001598 <HAL_JPEG_ErrorCallback+0x30>)
 8001572:	480a      	ldr	r0, [pc, #40]	@ (800159c <HAL_JPEG_ErrorCallback+0x34>)
 8001574:	f017 f92a 	bl	80187cc <siprintf>
	WriteDebug(ssd_msg, strlen(ssd_msg));
 8001578:	4808      	ldr	r0, [pc, #32]	@ (800159c <HAL_JPEG_ErrorCallback+0x34>)
 800157a:	f7fe feb1 	bl	80002e0 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <HAL_JPEG_ErrorCallback+0x34>)
 8001586:	f000 fa51 	bl	8001a2c <WriteDebug>
	//HAL_JPEG_Abort(&hjpeg);
	jpeg_state = 2;
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_JPEG_ErrorCallback+0x38>)
 800158c:	2202      	movs	r2, #2
 800158e:	701a      	strb	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0801905c 	.word	0x0801905c
 800159c:	24001194 	.word	0x24001194
 80015a0:	24029352 	.word	0x24029352

080015a4 <HAL_JPEG_DataReadyCallback>:

void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef * hjpeg, uint8_t * pDataOut, uint32_t OutDataLength) {
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	//	sprintf(ssd_msg, " JPEG D %d", OutDataLength);
	//	WriteDebug(ssd_msg, strlen(ssd_msg));
	//HAL_JPEG_Abort(hjpeg);
	jpeg_state = 2;
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <HAL_JPEG_DataReadyCallback+0x20>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	701a      	strb	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	24029352 	.word	0x24029352

080015c8 <HAL_SPI_TxCpltCallback>:

// ------------------------------------------------------------ OVERRIDE SPI DMA CALLBACKS -- //
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
	ST7789_DMATransmitCplt(&hst7789);
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <HAL_SPI_TxCpltCallback+0x18>)
 80015d2:	f001 faa5 	bl	8002b20 <ST7789_DMATransmitCplt>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2400125c 	.word	0x2400125c
 80015e4:	00000000 	.word	0x00000000

080015e8 <HAL_ADC_ConvCpltCallback>:

// ------------------------------------------------------------ OVERRIDE ADC DMA CALLBACKS -- //
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	// Roll the blunt (rolling average)
	//adc_average[0] = 0;
	//adc_average[1] = 0;
	uint16_t adc_newavg[2] = {0, 0};
 80015f0:	2300      	movs	r3, #0
 80015f2:	81bb      	strh	r3, [r7, #12]
 80015f4:	2300      	movs	r3, #0
 80015f6:	81fb      	strh	r3, [r7, #14]
	for (int i = 0; i < 20; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e01f      	b.n	800163e <HAL_ADC_ConvCpltCallback+0x56>
		// Accumulate the samples
		// Have to pre-divide so the result fits in a uint16
		adc_newavg[i%2] += (adc_buffer[i])/10;	// DIV 10*4, this includes the 4 for the interp. process
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b00      	cmp	r3, #0
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	bfb8      	it	lt
 8001608:	425b      	neglt	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	0053      	lsls	r3, r2, #1
 800160e:	3318      	adds	r3, #24
 8001610:	443b      	add	r3, r7
 8001612:	f833 1c0c 	ldrh.w	r1, [r3, #-12]
 8001616:	4858      	ldr	r0, [pc, #352]	@ (8001778 <HAL_ADC_ConvCpltCallback+0x190>)
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800161e:	4857      	ldr	r0, [pc, #348]	@ (800177c <HAL_ADC_ConvCpltCallback+0x194>)
 8001620:	fba0 0303 	umull	r0, r3, r0, r3
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	b29b      	uxth	r3, r3
 8001628:	440b      	add	r3, r1
 800162a:	b299      	uxth	r1, r3
 800162c:	0053      	lsls	r3, r2, #1
 800162e:	3318      	adds	r3, #24
 8001630:	443b      	add	r3, r7
 8001632:	460a      	mov	r2, r1
 8001634:	f823 2c0c 	strh.w	r2, [r3, #-12]
	for (int i = 0; i < 20; i++) {
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b13      	cmp	r3, #19
 8001642:	dddc      	ble.n	80015fe <HAL_ADC_ConvCpltCallback+0x16>
	}

	for (int i = 0; i < 2; i++) {
 8001644:	2300      	movs	r3, #0
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	e081      	b.n	800174e <HAL_ADC_ConvCpltCallback+0x166>
		// Interpolate for smoother control
		adc_average[i] *= 0.4;
 800164a:	4a4d      	ldr	r2, [pc, #308]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x198>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800165a:	ed9f 6b43 	vldr	d6, [pc, #268]	@ 8001768 <HAL_ADC_ConvCpltCallback+0x180>
 800165e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001662:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001666:	ee17 3a90 	vmov	r3, s15
 800166a:	b299      	uxth	r1, r3
 800166c:	4a44      	ldr	r2, [pc, #272]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x198>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		adc_average[i] += adc_newavg[i]*0.6;
 8001674:	4a42      	ldr	r2, [pc, #264]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x198>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800167c:	ee07 3a90 	vmov	s15, r3
 8001680:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	3318      	adds	r3, #24
 800168a:	443b      	add	r3, r7
 800168c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001698:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8001770 <HAL_ADC_ConvCpltCallback+0x188>
 800169c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80016a8:	ee17 3a90 	vmov	r3, s15
 80016ac:	b299      	uxth	r1, r3
 80016ae:	4a34      	ldr	r2, [pc, #208]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x198>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		slider_direction[i] = !(adc_average[i] >> 15); // shift right to only keep 1 MSB (sign bit)
 80016b6:	4a32      	ldr	r2, [pc, #200]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x198>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016be:	b21b      	sxth	r3, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	0bdb      	lsrs	r3, r3, #15
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4619      	mov	r1, r3
 80016ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001784 <HAL_ADC_ConvCpltCallback+0x19c>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4413      	add	r3, r2
 80016d0:	460a      	mov	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
		slider_magnitude[i] = adc_average[i] >> 7;	// shift right to chop off 1 MSB and 7 LSB
 80016d4:	4a2a      	ldr	r2, [pc, #168]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x198>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016dc:	09db      	lsrs	r3, r3, #7
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b2d9      	uxtb	r1, r3
 80016e2:	4a29      	ldr	r2, [pc, #164]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4413      	add	r3, r2
 80016e8:	460a      	mov	r2, r1
 80016ea:	701a      	strb	r2, [r3, #0]
		if (slider_direction[i]) slider_magnitude[i] = 0xFF - slider_magnitude[i];	// Flip the magnitude if the slider is inverted
 80016ec:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <HAL_ADC_ConvCpltCallback+0x19c>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4413      	add	r3, r2
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00a      	beq.n	800170e <HAL_ADC_ConvCpltCallback+0x126>
 80016f8:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	4413      	add	r3, r2
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	43db      	mvns	r3, r3
 8001702:	b2d9      	uxtb	r1, r3
 8001704:	4a20      	ldr	r2, [pc, #128]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4413      	add	r3, r2
 800170a:	460a      	mov	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] < slider_min_deadzone)
 800170e:	4a1e      	ldr	r2, [pc, #120]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4413      	add	r3, r2
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b1d      	ldr	r3, [pc, #116]	@ (800178c <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	429a      	cmp	r2, r3
 800171c:	d204      	bcs.n	8001728 <HAL_ADC_ConvCpltCallback+0x140>
			slider_magnitude[i] = 0;
 800171e:	4a1a      	ldr	r2, [pc, #104]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

		if (slider_magnitude[i] > 0xFF-slider_max_deadzone)
 8001728:	4a17      	ldr	r2, [pc, #92]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4413      	add	r3, r2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b17      	ldr	r3, [pc, #92]	@ (8001790 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800173a:	429a      	cmp	r2, r3
 800173c:	dd04      	ble.n	8001748 <HAL_ADC_ConvCpltCallback+0x160>
			slider_magnitude[i] = 0xFF;
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	22ff      	movs	r2, #255	@ 0xff
 8001746:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 2; i++) {
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	3301      	adds	r3, #1
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b01      	cmp	r3, #1
 8001752:	f77f af7a 	ble.w	800164a <HAL_ADC_ConvCpltCallback+0x62>

	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	f3af 8000 	nop.w
 8001768:	9999999a 	.word	0x9999999a
 800176c:	3fd99999 	.word	0x3fd99999
 8001770:	33333333 	.word	0x33333333
 8001774:	3fe33333 	.word	0x3fe33333
 8001778:	24026a74 	.word	0x24026a74
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	24026a9c 	.word	0x24026a9c
 8001784:	24026aa4 	.word	0x24026aa4
 8001788:	24026aa0 	.word	0x24026aa0
 800178c:	24000018 	.word	0x24000018
 8001790:	24000019 	.word	0x24000019
 8001794:	00000000 	.word	0x00000000

08001798 <Draw_Slider>:

// ------------------------------------------------------------ DRAW COMMANDS -- //
void Draw_Slider(uint8_t slider_id) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b08e      	sub	sp, #56	@ 0x38
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	uint8_t byte_sel = slider_magnitude[slider_id] >> 5;					// Byte threshold
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	4a9a      	ldr	r2, [pc, #616]	@ (8001a10 <Draw_Slider+0x278>)
 80017a6:	5cd3      	ldrb	r3, [r2, r3]
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	77fb      	strb	r3, [r7, #31]
	uint8_t bit_sel = (slider_magnitude[slider_id] >> 2) & 0b00000111;		// Partial byte threshold
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	4a98      	ldr	r2, [pc, #608]	@ (8001a10 <Draw_Slider+0x278>)
 80017b0:	5cd3      	ldrb	r3, [r2, r3]
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	77bb      	strb	r3, [r7, #30]
	uint8_t subbit_sel = (slider_magnitude[slider_id]) & 0b00000111;	// Fine control display
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a94      	ldr	r2, [pc, #592]	@ (8001a10 <Draw_Slider+0x278>)
 80017c0:	5cd3      	ldrb	r3, [r2, r3]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	777b      	strb	r3, [r7, #29]

	uint8_t slider_vram[8] = {0};
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]

	if (slider_direction[slider_id]) {
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	4a8f      	ldr	r2, [pc, #572]	@ (8001a14 <Draw_Slider+0x27c>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d032      	beq.n	8001842 <Draw_Slider+0xaa>
		for (int i = 0; i < 8; i++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
 80017e0:	e02b      	b.n	800183a <Draw_Slider+0xa2>
			if (i < byte_sel) slider_vram[7-i] = 0xFF;	// Before partial byte, fill
 80017e2:	7ffb      	ldrb	r3, [r7, #31]
 80017e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017e6:	429a      	cmp	r2, r3
 80017e8:	da07      	bge.n	80017fa <Draw_Slider+0x62>
 80017ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ec:	f1c3 0307 	rsb	r3, r3, #7
 80017f0:	3338      	adds	r3, #56	@ 0x38
 80017f2:	443b      	add	r3, r7
 80017f4:	22ff      	movs	r2, #255	@ 0xff
 80017f6:	f803 2c28 	strb.w	r2, [r3, #-40]
			if (i > byte_sel) slider_vram[7-i] = 0x00;	// After partial byte, empty
 80017fa:	7ffb      	ldrb	r3, [r7, #31]
 80017fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017fe:	429a      	cmp	r2, r3
 8001800:	dd07      	ble.n	8001812 <Draw_Slider+0x7a>
 8001802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001804:	f1c3 0307 	rsb	r3, r3, #7
 8001808:	3338      	adds	r3, #56	@ 0x38
 800180a:	443b      	add	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	f803 2c28 	strb.w	r2, [r3, #-40]
			if (i == byte_sel) slider_vram[7-i] = 0xFF << (7-bit_sel);	// Partial byte
 8001812:	7ffb      	ldrb	r3, [r7, #31]
 8001814:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001816:	429a      	cmp	r2, r3
 8001818:	d10c      	bne.n	8001834 <Draw_Slider+0x9c>
 800181a:	7fbb      	ldrb	r3, [r7, #30]
 800181c:	f1c3 0307 	rsb	r3, r3, #7
 8001820:	22ff      	movs	r2, #255	@ 0xff
 8001822:	409a      	lsls	r2, r3
 8001824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001826:	f1c3 0307 	rsb	r3, r3, #7
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	3338      	adds	r3, #56	@ 0x38
 800182e:	443b      	add	r3, r7
 8001830:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (int i = 0; i < 8; i++) {
 8001834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001836:	3301      	adds	r3, #1
 8001838:	637b      	str	r3, [r7, #52]	@ 0x34
 800183a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183c:	2b07      	cmp	r3, #7
 800183e:	ddd0      	ble.n	80017e2 <Draw_Slider+0x4a>
 8001840:	e02d      	b.n	800189e <Draw_Slider+0x106>
		}
	} else {
		for (int i = 0; i < 8; i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
 8001846:	e027      	b.n	8001898 <Draw_Slider+0x100>
			if (i < byte_sel) slider_vram[i] = 0xFF;
 8001848:	7ffb      	ldrb	r3, [r7, #31]
 800184a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800184c:	429a      	cmp	r2, r3
 800184e:	da05      	bge.n	800185c <Draw_Slider+0xc4>
 8001850:	f107 0210 	add.w	r2, r7, #16
 8001854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001856:	4413      	add	r3, r2
 8001858:	22ff      	movs	r2, #255	@ 0xff
 800185a:	701a      	strb	r2, [r3, #0]
			if (i > byte_sel) slider_vram[i] = 0x00;
 800185c:	7ffb      	ldrb	r3, [r7, #31]
 800185e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001860:	429a      	cmp	r2, r3
 8001862:	dd05      	ble.n	8001870 <Draw_Slider+0xd8>
 8001864:	f107 0210 	add.w	r2, r7, #16
 8001868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186a:	4413      	add	r3, r2
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
			if (i == byte_sel) slider_vram[i] = 0xFF >> (7-bit_sel);
 8001870:	7ffb      	ldrb	r3, [r7, #31]
 8001872:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001874:	429a      	cmp	r2, r3
 8001876:	d10c      	bne.n	8001892 <Draw_Slider+0xfa>
 8001878:	7fbb      	ldrb	r3, [r7, #30]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	22ff      	movs	r2, #255	@ 0xff
 8001880:	fa42 f303 	asr.w	r3, r2, r3
 8001884:	b2d9      	uxtb	r1, r3
 8001886:	f107 0210 	add.w	r2, r7, #16
 800188a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800188c:	4413      	add	r3, r2
 800188e:	460a      	mov	r2, r1
 8001890:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++) {
 8001892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001894:	3301      	adds	r3, #1
 8001896:	633b      	str	r3, [r7, #48]	@ 0x30
 8001898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800189a:	2b07      	cmp	r3, #7
 800189c:	ddd4      	ble.n	8001848 <Draw_Slider+0xb0>
		}
	}

	uint8_t slider_str[4] = {0};
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
	sprintf(slider_str, "%03d", (uint8_t)(slider_magnitude[slider_id] / 2.55));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4a5a      	ldr	r2, [pc, #360]	@ (8001a10 <Draw_Slider+0x278>)
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018b0:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001a08 <Draw_Slider+0x270>
 80018b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018b8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80018bc:	edc7 7a00 	vstr	s15, [r7]
 80018c0:	783b      	ldrb	r3, [r7, #0]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4953      	ldr	r1, [pc, #332]	@ (8001a18 <Draw_Slider+0x280>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f016 ff7d 	bl	80187cc <siprintf>

	if (slider_id == 0) {
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d148      	bne.n	800196a <Draw_Slider+0x1d2>
		uint16_t curs = 1;
 80018d8:	2301      	movs	r3, #1
 80018da:	833b      	strh	r3, [r7, #24]
		for (int y = 0; y < 8; y++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018e0:	e02f      	b.n	8001942 <Draw_Slider+0x1aa>
			for (int x = 3; x < 8; x++)
 80018e2:	2303      	movs	r3, #3
 80018e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018e6:	e00f      	b.n	8001908 <Draw_Slider+0x170>
				ssd1_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 80018e8:	8b3a      	ldrh	r2, [r7, #24]
 80018ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ec:	01db      	lsls	r3, r3, #7
 80018ee:	441a      	add	r2, r3
 80018f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	f107 0110 	add.w	r1, r7, #16
 80018f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018fa:	440a      	add	r2, r1
 80018fc:	7811      	ldrb	r1, [r2, #0]
 80018fe:	4a47      	ldr	r2, [pc, #284]	@ (8001a1c <Draw_Slider+0x284>)
 8001900:	54d1      	strb	r1, [r2, r3]
			for (int x = 3; x < 8; x++)
 8001902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001904:	3301      	adds	r3, #1
 8001906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190a:	2b07      	cmp	r3, #7
 800190c:	ddec      	ble.n	80018e8 <Draw_Slider+0x150>
			ssd1_vram[curs + y*128 + 0] = 0xC0 >> subbit_sel;	// Set the fine control disp.
 800190e:	7f7b      	ldrb	r3, [r7, #29]
 8001910:	22c0      	movs	r2, #192	@ 0xc0
 8001912:	fa42 f103 	asr.w	r1, r2, r3
 8001916:	8b3a      	ldrh	r2, [r7, #24]
 8001918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191a:	01db      	lsls	r3, r3, #7
 800191c:	4413      	add	r3, r2
 800191e:	b2c9      	uxtb	r1, r1
 8001920:	4a3e      	ldr	r2, [pc, #248]	@ (8001a1c <Draw_Slider+0x284>)
 8001922:	54d1      	strb	r1, [r2, r3]
			ssd1_vram[curs + y*128 + 1] = 0xC0 >> subbit_sel;
 8001924:	7f7b      	ldrb	r3, [r7, #29]
 8001926:	22c0      	movs	r2, #192	@ 0xc0
 8001928:	fa42 f103 	asr.w	r1, r2, r3
 800192c:	8b3a      	ldrh	r2, [r7, #24]
 800192e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001930:	01db      	lsls	r3, r3, #7
 8001932:	4413      	add	r3, r2
 8001934:	3301      	adds	r3, #1
 8001936:	b2c9      	uxtb	r1, r1
 8001938:	4a38      	ldr	r2, [pc, #224]	@ (8001a1c <Draw_Slider+0x284>)
 800193a:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 800193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193e:	3301      	adds	r3, #1
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001944:	2b07      	cmp	r3, #7
 8001946:	ddcc      	ble.n	80018e2 <Draw_Slider+0x14a>
		}
		hssd1.str_cursor = 9;
 8001948:	4b35      	ldr	r3, [pc, #212]	@ (8001a20 <Draw_Slider+0x288>)
 800194a:	2209      	movs	r2, #9
 800194c:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(&hssd1, slider_str, strlen(slider_str));
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fcc4 	bl	80002e0 <strlen>
 8001958:	4603      	mov	r3, r0
 800195a:	b2da      	uxtb	r2, r3
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	4619      	mov	r1, r3
 8001962:	482f      	ldr	r0, [pc, #188]	@ (8001a20 <Draw_Slider+0x288>)
 8001964:	f000 ff2c 	bl	80027c0 <SSD1306_DrawString>
			ssd2_vram[curs + y*128 + 7] = 0xC0 >> subbit_sel;
		}
		hssd2.str_cursor = 100;
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
	}
}
 8001968:	e048      	b.n	80019fc <Draw_Slider+0x264>
		uint16_t curs = 120;
 800196a:	2378      	movs	r3, #120	@ 0x78
 800196c:	837b      	strh	r3, [r7, #26]
		for (int y = 0; y < 8; y++) {
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	@ 0x24
 8001972:	e030      	b.n	80019d6 <Draw_Slider+0x23e>
			for (int x = 0; x < 5; x++)
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	e00f      	b.n	800199a <Draw_Slider+0x202>
				ssd2_vram[curs + y*128 + x] = slider_vram[y];	// Set large bar
 800197a:	8b7a      	ldrh	r2, [r7, #26]
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800197e:	01db      	lsls	r3, r3, #7
 8001980:	441a      	add	r2, r3
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	4413      	add	r3, r2
 8001986:	f107 0110 	add.w	r1, r7, #16
 800198a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800198c:	440a      	add	r2, r1
 800198e:	7811      	ldrb	r1, [r2, #0]
 8001990:	4a24      	ldr	r2, [pc, #144]	@ (8001a24 <Draw_Slider+0x28c>)
 8001992:	54d1      	strb	r1, [r2, r3]
			for (int x = 0; x < 5; x++)
 8001994:	6a3b      	ldr	r3, [r7, #32]
 8001996:	3301      	adds	r3, #1
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	6a3b      	ldr	r3, [r7, #32]
 800199c:	2b04      	cmp	r3, #4
 800199e:	ddec      	ble.n	800197a <Draw_Slider+0x1e2>
			ssd2_vram[curs + y*128 + 6] = 0xC0 >> subbit_sel;	// Set the fine control disp.
 80019a0:	7f7b      	ldrb	r3, [r7, #29]
 80019a2:	22c0      	movs	r2, #192	@ 0xc0
 80019a4:	fa42 f103 	asr.w	r1, r2, r3
 80019a8:	8b7a      	ldrh	r2, [r7, #26]
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	01db      	lsls	r3, r3, #7
 80019ae:	4413      	add	r3, r2
 80019b0:	3306      	adds	r3, #6
 80019b2:	b2c9      	uxtb	r1, r1
 80019b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a24 <Draw_Slider+0x28c>)
 80019b6:	54d1      	strb	r1, [r2, r3]
			ssd2_vram[curs + y*128 + 7] = 0xC0 >> subbit_sel;
 80019b8:	7f7b      	ldrb	r3, [r7, #29]
 80019ba:	22c0      	movs	r2, #192	@ 0xc0
 80019bc:	fa42 f103 	asr.w	r1, r2, r3
 80019c0:	8b7a      	ldrh	r2, [r7, #26]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	01db      	lsls	r3, r3, #7
 80019c6:	4413      	add	r3, r2
 80019c8:	3307      	adds	r3, #7
 80019ca:	b2c9      	uxtb	r1, r1
 80019cc:	4a15      	ldr	r2, [pc, #84]	@ (8001a24 <Draw_Slider+0x28c>)
 80019ce:	54d1      	strb	r1, [r2, r3]
		for (int y = 0; y < 8; y++) {
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	3301      	adds	r3, #1
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	2b07      	cmp	r3, #7
 80019da:	ddcb      	ble.n	8001974 <Draw_Slider+0x1dc>
		hssd2.str_cursor = 100;
 80019dc:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <Draw_Slider+0x290>)
 80019de:	2264      	movs	r2, #100	@ 0x64
 80019e0:	821a      	strh	r2, [r3, #16]
		SSD1306_DrawString(&hssd2, slider_str, strlen(slider_str));
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fc7a 	bl	80002e0 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	f107 030c 	add.w	r3, r7, #12
 80019f4:	4619      	mov	r1, r3
 80019f6:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <Draw_Slider+0x290>)
 80019f8:	f000 fee2 	bl	80027c0 <SSD1306_DrawString>
}
 80019fc:	bf00      	nop
 80019fe:	3738      	adds	r7, #56	@ 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	f3af 8000 	nop.w
 8001a08:	66666666 	.word	0x66666666
 8001a0c:	40046666 	.word	0x40046666
 8001a10:	24026aa0 	.word	0x24026aa0
 8001a14:	24026aa4 	.word	0x24026aa4
 8001a18:	08019044 	.word	0x08019044
 8001a1c:	24000994 	.word	0x24000994
 8001a20:	2400096c 	.word	0x2400096c
 8001a24:	24000d94 	.word	0x24000d94
 8001a28:	24000980 	.word	0x24000980

08001a2c <WriteDebug>:

// Debug
void WriteDebug(uint8_t *str_ptr, uint8_t str_len) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
	SSD1306_Clear(&hssd1);
 8001a38:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <WriteDebug+0x44>)
 8001a3a:	f000 fe43 	bl	80026c4 <SSD1306_Clear>
	SSD1306_Clear(&hssd2);
 8001a3e:	480d      	ldr	r0, [pc, #52]	@ (8001a74 <WriteDebug+0x48>)
 8001a40:	f000 fe40 	bl	80026c4 <SSD1306_Clear>
	SSD1306_DrawString(&hssd1, str_ptr, str_len);
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	461a      	mov	r2, r3
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <WriteDebug+0x44>)
 8001a4c:	f000 feb8 	bl	80027c0 <SSD1306_DrawString>
	SSD1306_DrawString(&hssd2, str_ptr, str_len);
 8001a50:	78fb      	ldrb	r3, [r7, #3]
 8001a52:	461a      	mov	r2, r3
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	4807      	ldr	r0, [pc, #28]	@ (8001a74 <WriteDebug+0x48>)
 8001a58:	f000 feb2 	bl	80027c0 <SSD1306_DrawString>
	SSD1306_Update(&hssd1);
 8001a5c:	4804      	ldr	r0, [pc, #16]	@ (8001a70 <WriteDebug+0x44>)
 8001a5e:	f000 fe45 	bl	80026ec <SSD1306_Update>
	SSD1306_Update(&hssd2);
 8001a62:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <WriteDebug+0x48>)
 8001a64:	f000 fe42 	bl	80026ec <SSD1306_Update>
}
 8001a68:	bf00      	nop
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2400096c 	.word	0x2400096c
 8001a74:	24000980 	.word	0x24000980

08001a78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001a8a:	f002 fcdb 	bl	8004444 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001a9a:	231f      	movs	r3, #31
 8001a9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001a9e:	2387      	movs	r3, #135	@ 0x87
 8001aa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001aba:	463b      	mov	r3, r7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fcf9 	bl	80044b4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ac2:	2004      	movs	r0, #4
 8001ac4:	f002 fcd6 	bl	8004474 <HAL_MPU_Enable>

}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad4:	b672      	cpsid	i
}
 8001ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <Error_Handler+0x8>

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_MspInit+0x30>)
 8001ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae8:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <HAL_MspInit+0x30>)
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_MspInit+0x30>)
 8001af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	607b      	str	r3, [r7, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	58024400 	.word	0x58024400

08001b10 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c28 <HAL_ADC_MspInit+0x118>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d175      	bne.n	8001c1e <HAL_ADC_MspInit+0x10e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b32:	4b3e      	ldr	r3, [pc, #248]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b38:	4a3c      	ldr	r2, [pc, #240]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b42:	4b3a      	ldr	r3, [pc, #232]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b36      	ldr	r3, [pc, #216]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b56:	4a35      	ldr	r2, [pc, #212]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b60:	4b32      	ldr	r3, [pc, #200]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b74:	4a2d      	ldr	r2, [pc, #180]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_ADC_MspInit+0x11c>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = WIPE_L_Pin;
 8001b8c:	2340      	movs	r3, #64	@ 0x40
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b90:	2303      	movs	r3, #3
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_L_GPIO_Port, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4824      	ldr	r0, [pc, #144]	@ (8001c30 <HAL_ADC_MspInit+0x120>)
 8001ba0:	f005 fb1e 	bl	80071e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WIPE_R_Pin;
 8001ba4:	2310      	movs	r3, #16
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WIPE_R_GPIO_Port, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	481f      	ldr	r0, [pc, #124]	@ (8001c34 <HAL_ADC_MspInit+0x124>)
 8001bb8:	f005 fb12 	bl	80071e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream3;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001c3c <HAL_ADC_MspInit+0x12c>)
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bc4:	2209      	movs	r2, #9
 8001bc6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bda:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001be2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001be4:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001be6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001bfa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c02:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c04:	f002 fc96 	bl	8004534 <HAL_DMA_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001c0e:	f7ff ff5f 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a08      	ldr	r2, [pc, #32]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c16:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_ADC_MspInit+0x128>)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	@ 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	58020000 	.word	0x58020000
 8001c34:	58020800 	.word	0x58020800
 8001c38:	24000400 	.word	0x24000400
 8001c3c:	40020058 	.word	0x40020058

08001c40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08c      	sub	sp, #48	@ 0x30
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a73      	ldr	r2, [pc, #460]	@ (8001e2c <HAL_I2C_MspInit+0x1ec>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d16d      	bne.n	8001d3e <HAL_I2C_MspInit+0xfe>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b73      	ldr	r3, [pc, #460]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c68:	4a71      	ldr	r2, [pc, #452]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c72:	4b6f      	ldr	r3, [pc, #444]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	61bb      	str	r3, [r7, #24]
 8001c7e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001c80:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c86:	2312      	movs	r3, #18
 8001c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c92:	2304      	movs	r3, #4
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4865      	ldr	r0, [pc, #404]	@ (8001e34 <HAL_I2C_MspInit+0x1f4>)
 8001c9e:	f005 fa9f 	bl	80071e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca2:	4b63      	ldr	r3, [pc, #396]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ca8:	4a61      	ldr	r2, [pc, #388]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001caa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8001cc0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8001e3c <HAL_I2C_MspInit+0x1fc>)
 8001cc4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cc8:	2222      	movs	r2, #34	@ 0x22
 8001cca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cce:	2240      	movs	r2, #64	@ 0x40
 8001cd0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cd2:	4b59      	ldr	r3, [pc, #356]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd8:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001cde:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ce0:	4b55      	ldr	r3, [pc, #340]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce6:	4b54      	ldr	r3, [pc, #336]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001cec:	4b52      	ldr	r3, [pc, #328]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001cf2:	4b51      	ldr	r3, [pc, #324]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cf4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cf8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d00:	484d      	ldr	r0, [pc, #308]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001d02:	f002 fc17 	bl	8004534 <HAL_DMA_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001d0c:	f7ff fee0 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a49      	ldr	r2, [pc, #292]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001d14:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d16:	4a48      	ldr	r2, [pc, #288]	@ (8001e38 <HAL_I2C_MspInit+0x1f8>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	201f      	movs	r0, #31
 8001d22:	f002 fb5a 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d26:	201f      	movs	r0, #31
 8001d28:	f002 fb71 	bl	800440e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2020      	movs	r0, #32
 8001d32:	f002 fb52 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d36:	2020      	movs	r0, #32
 8001d38:	f002 fb69 	bl	800440e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d3c:	e071      	b.n	8001e22 <HAL_I2C_MspInit+0x1e2>
  else if(hi2c->Instance==I2C2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a3f      	ldr	r2, [pc, #252]	@ (8001e40 <HAL_I2C_MspInit+0x200>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d16c      	bne.n	8001e22 <HAL_I2C_MspInit+0x1e2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b39      	ldr	r3, [pc, #228]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4e:	4a38      	ldr	r2, [pc, #224]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001d50:	f043 0302 	orr.w	r3, r3, #2
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d58:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6c:	2312      	movs	r3, #18
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	482c      	ldr	r0, [pc, #176]	@ (8001e34 <HAL_I2C_MspInit+0x1f4>)
 8001d84:	f005 fa2c 	bl	80071e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d88:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d8e:	4a28      	ldr	r2, [pc, #160]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001d90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <HAL_I2C_MspInit+0x1f0>)
 8001d9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_tx.Instance = DMA1_Stream1;
 8001da6:	4b27      	ldr	r3, [pc, #156]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001da8:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <HAL_I2C_MspInit+0x208>)
 8001daa:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001dac:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dae:	2224      	movs	r2, #36	@ 0x24
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db2:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001db4:	2240      	movs	r2, #64	@ 0x40
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b22      	ldr	r3, [pc, #136]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b21      	ldr	r3, [pc, #132]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dde:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de0:	4b18      	ldr	r3, [pc, #96]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001de6:	4817      	ldr	r0, [pc, #92]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001de8:	f002 fba4 	bl	8004534 <HAL_DMA_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_MspInit+0x1b6>
      Error_Handler();
 8001df2:	f7ff fe6d 	bl	8001ad0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dfc:	4a11      	ldr	r2, [pc, #68]	@ (8001e44 <HAL_I2C_MspInit+0x204>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2100      	movs	r1, #0
 8001e06:	2021      	movs	r0, #33	@ 0x21
 8001e08:	f002 fae7 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001e0c:	2021      	movs	r0, #33	@ 0x21
 8001e0e:	f002 fafe 	bl	800440e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	2022      	movs	r0, #34	@ 0x22
 8001e18:	f002 fadf 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e1c:	2022      	movs	r0, #34	@ 0x22
 8001e1e:	f002 faf6 	bl	800440e <HAL_NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3730      	adds	r7, #48	@ 0x30
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40005400 	.word	0x40005400
 8001e30:	58024400 	.word	0x58024400
 8001e34:	58020400 	.word	0x58020400
 8001e38:	24000520 	.word	0x24000520
 8001e3c:	40020040 	.word	0x40020040
 8001e40:	40005800 	.word	0x40005800
 8001e44:	24000598 	.word	0x24000598
 8001e48:	40020028 	.word	0x40020028

08001e4c <HAL_JPEG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(hjpeg->Instance==JPEG)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a55      	ldr	r2, [pc, #340]	@ (8001fb0 <HAL_JPEG_MspInit+0x164>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f040 80a3 	bne.w	8001fa6 <HAL_JPEG_MspInit+0x15a>
  {
    /* USER CODE BEGIN JPEG_MspInit 0 */

    /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001e60:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <HAL_JPEG_MspInit+0x168>)
 8001e62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e66:	4a53      	ldr	r2, [pc, #332]	@ (8001fb4 <HAL_JPEG_MspInit+0x168>)
 8001e68:	f043 0320 	orr.w	r3, r3, #32
 8001e6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <HAL_JPEG_MspInit+0x168>)
 8001e72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    /* JPEG MDMA Init */
    /* JPEG_INFIFO_TH Init */
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel0;
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001e80:	4a4e      	ldr	r2, [pc, #312]	@ (8001fbc <HAL_JPEG_MspInit+0x170>)
 8001e82:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001e84:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001e86:	2211      	movs	r2, #17
 8001e88:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001e90:	4b49      	ldr	r3, [pc, #292]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001e96:	4b48      	ldr	r3, [pc, #288]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001e9c:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 8001ea2:	4b45      	ldr	r3, [pc, #276]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8001ea8:	4b43      	ldr	r3, [pc, #268]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001eae:	4b42      	ldr	r3, [pc, #264]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001eb4:	4b40      	ldr	r3, [pc, #256]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001eb6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
 8001ece:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 8001ed4:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001eda:	4837      	ldr	r0, [pc, #220]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001edc:	f009 feaa 	bl	800bc34 <HAL_MDMA_Init>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_JPEG_MspInit+0x9e>
    {
      Error_Handler();
 8001ee6:	f7ff fdf3 	bl	8001ad0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	4832      	ldr	r0, [pc, #200]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001ef0:	f009 feec 	bl	800bccc <HAL_MDMA_ConfigPostRequestMask>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_JPEG_MspInit+0xb2>
    {
      Error_Handler();
 8001efa:	f7ff fde9 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f04:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb8 <HAL_JPEG_MspInit+0x16c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG_OUTFIFO_NE Init */
    hmdma_jpeg_outfifo_ne.Instance = MDMA_Channel1;
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc4 <HAL_JPEG_MspInit+0x178>)
 8001f0e:	601a      	str	r2, [r3, #0]
    hmdma_jpeg_outfifo_ne.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_NE;
 8001f10:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f12:	2214      	movs	r2, #20
 8001f14:	605a      	str	r2, [r3, #4]
    hmdma_jpeg_outfifo_ne.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8001f16:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
    hmdma_jpeg_outfifo_ne.Init.Priority = MDMA_PRIORITY_MEDIUM;
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f1e:	2240      	movs	r2, #64	@ 0x40
 8001f20:	60da      	str	r2, [r3, #12]
    hmdma_jpeg_outfifo_ne.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001f22:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
    hmdma_jpeg_outfifo_ne.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
    hmdma_jpeg_outfifo_ne.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8001f2e:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f30:	2208      	movs	r2, #8
 8001f32:	619a      	str	r2, [r3, #24]
    hmdma_jpeg_outfifo_ne.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f36:	2220      	movs	r2, #32
 8001f38:	61da      	str	r2, [r3, #28]
    hmdma_jpeg_outfifo_ne.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
    hmdma_jpeg_outfifo_ne.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24
    hmdma_jpeg_outfifo_ne.Init.BufferTransferLength = 4;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	629a      	str	r2, [r3, #40]	@ 0x28
    hmdma_jpeg_outfifo_ne.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmdma_jpeg_outfifo_ne.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	631a      	str	r2, [r3, #48]	@ 0x30
    hmdma_jpeg_outfifo_ne.Init.SourceBlockAddressOffset = 0;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmdma_jpeg_outfifo_ne.Init.DestBlockAddressOffset = 0;
 8001f60:	4b17      	ldr	r3, [pc, #92]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	639a      	str	r2, [r3, #56]	@ 0x38
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_ne) != HAL_OK)
 8001f66:	4816      	ldr	r0, [pc, #88]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f68:	f009 fe64 	bl	800bc34 <HAL_MDMA_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_JPEG_MspInit+0x12a>
    {
      Error_Handler();
 8001f72:	f7ff fdad 	bl	8001ad0 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_ne, 0, 0) != HAL_OK)
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4811      	ldr	r0, [pc, #68]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f7c:	f009 fea6 	bl	800bccc <HAL_MDMA_ConfigPostRequestMask>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_JPEG_MspInit+0x13e>
    {
      Error_Handler();
 8001f86:	f7ff fda3 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_ne);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f90:	4a0b      	ldr	r2, [pc, #44]	@ (8001fc0 <HAL_JPEG_MspInit+0x174>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6413      	str	r3, [r2, #64]	@ 0x40

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2079      	movs	r0, #121	@ 0x79
 8001f9c:	f002 fa1d 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001fa0:	2079      	movs	r0, #121	@ 0x79
 8001fa2:	f002 fa34 	bl	800440e <HAL_NVIC_EnableIRQ>

    /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	52003000 	.word	0x52003000
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	24000668 	.word	0x24000668
 8001fbc:	52000040 	.word	0x52000040
 8001fc0:	240006d4 	.word	0x240006d4
 8001fc4:	52000080 	.word	0x52000080

08001fc8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a3d      	ldr	r2, [pc, #244]	@ (80020dc <HAL_SPI_MspInit+0x114>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d173      	bne.n	80020d2 <HAL_SPI_MspInit+0x10a>
  {
    /* USER CODE BEGIN SPI4_MspInit 0 */

    /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001fea:	4b3d      	ldr	r3, [pc, #244]	@ (80020e0 <HAL_SPI_MspInit+0x118>)
 8001fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ff0:	4a3b      	ldr	r2, [pc, #236]	@ (80020e0 <HAL_SPI_MspInit+0x118>)
 8001ff2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ffa:	4b39      	ldr	r3, [pc, #228]	@ (80020e0 <HAL_SPI_MspInit+0x118>)
 8001ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002008:	4b35      	ldr	r3, [pc, #212]	@ (80020e0 <HAL_SPI_MspInit+0x118>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200e:	4a34      	ldr	r2, [pc, #208]	@ (80020e0 <HAL_SPI_MspInit+0x118>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_SPI_MspInit+0x118>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE4     ------> SPI4_NSS
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002026:	2344      	movs	r3, #68	@ 0x44
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002036:	2305      	movs	r3, #5
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	4828      	ldr	r0, [pc, #160]	@ (80020e4 <HAL_SPI_MspInit+0x11c>)
 8002042:	f005 f8cd 	bl	80071e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002046:	2310      	movs	r3, #16
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002056:	2305      	movs	r3, #5
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	4820      	ldr	r0, [pc, #128]	@ (80020e4 <HAL_SPI_MspInit+0x11c>)
 8002062:	f005 f8bd 	bl	80071e0 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 8002068:	4a20      	ldr	r2, [pc, #128]	@ (80020ec <HAL_SPI_MspInit+0x124>)
 800206a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 800206c:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 800206e:	2254      	movs	r2, #84	@ 0x54
 8002070:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002072:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 8002074:	2240      	movs	r2, #64	@ 0x40
 8002076:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 8002080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002084:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002086:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 8002094:	2200      	movs	r2, #0
 8002096:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002098:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 800209a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800209e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80020a6:	4810      	ldr	r0, [pc, #64]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 80020a8:	f002 fa44 	bl	8004534 <HAL_DMA_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_SPI_MspInit+0xee>
    {
      Error_Handler();
 80020b2:	f7ff fd0d 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 80020ba:	679a      	str	r2, [r3, #120]	@ 0x78
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <HAL_SPI_MspInit+0x120>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2054      	movs	r0, #84	@ 0x54
 80020c8:	f002 f987 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80020cc:	2054      	movs	r0, #84	@ 0x54
 80020ce:	f002 f99e 	bl	800440e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	@ 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40013400 	.word	0x40013400
 80020e0:	58024400 	.word	0x58024400
 80020e4:	58021000 	.word	0x58021000
 80020e8:	240007c8 	.word	0x240007c8
 80020ec:	40020010 	.word	0x40020010

080020f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0ba      	sub	sp, #232	@ 0xe8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	22c0      	movs	r2, #192	@ 0xc0
 800210e:	2100      	movs	r1, #0
 8002110:	4618      	mov	r0, r3
 8002112:	f016 fb7d 	bl	8018810 <memset>
  if(huart->Instance==USART1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a43      	ldr	r2, [pc, #268]	@ (8002228 <HAL_UART_MspInit+0x138>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d17e      	bne.n	800221e <HAL_UART_MspInit+0x12e>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002120:	f04f 0201 	mov.w	r2, #1
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4618      	mov	r0, r3
 8002138:	f00c fbee 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002142:	f7ff fcc5 	bl	8001ad0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002146:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_UART_MspInit+0x13c>)
 8002148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800214c:	4a37      	ldr	r2, [pc, #220]	@ (800222c <HAL_UART_MspInit+0x13c>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002156:	4b35      	ldr	r3, [pc, #212]	@ (800222c <HAL_UART_MspInit+0x13c>)
 8002158:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b31      	ldr	r3, [pc, #196]	@ (800222c <HAL_UART_MspInit+0x13c>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216a:	4a30      	ldr	r2, [pc, #192]	@ (800222c <HAL_UART_MspInit+0x13c>)
 800216c:	f043 0302 	orr.w	r3, r3, #2
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002174:	4b2d      	ldr	r3, [pc, #180]	@ (800222c <HAL_UART_MspInit+0x13c>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002182:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800219c:	2304      	movs	r3, #4
 800219e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021a6:	4619      	mov	r1, r3
 80021a8:	4821      	ldr	r0, [pc, #132]	@ (8002230 <HAL_UART_MspInit+0x140>)
 80021aa:	f005 f819 	bl	80071e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream0;
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021b0:	4a21      	ldr	r2, [pc, #132]	@ (8002238 <HAL_UART_MspInit+0x148>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80021b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021b6:	2229      	movs	r2, #41	@ 0x29
 80021b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021e8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021f0:	4810      	ldr	r0, [pc, #64]	@ (8002234 <HAL_UART_MspInit+0x144>)
 80021f2:	f002 f99f 	bl	8004534 <HAL_DMA_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80021fc:	f7ff fc68 	bl	8001ad0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a0c      	ldr	r2, [pc, #48]	@ (8002234 <HAL_UART_MspInit+0x144>)
 8002204:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <HAL_UART_MspInit+0x144>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2025      	movs	r0, #37	@ 0x25
 8002214:	f002 f8e1 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002218:	2025      	movs	r0, #37	@ 0x25
 800221a:	f002 f8f8 	bl	800440e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800221e:	bf00      	nop
 8002220:	37e8      	adds	r7, #232	@ 0xe8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40011000 	.word	0x40011000
 800222c:	58024400 	.word	0x58024400
 8002230:	58020400 	.word	0x58020400
 8002234:	240008d4 	.word	0x240008d4
 8002238:	40020410 	.word	0x40020410

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002292:	f000 fcc5 	bl	8002c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80022a0:	4802      	ldr	r0, [pc, #8]	@ (80022ac <DMA1_Stream0_IRQHandler+0x10>)
 80022a2:	f003 fc71 	bl	8005b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	240007c8 	.word	0x240007c8

080022b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80022b4:	4802      	ldr	r0, [pc, #8]	@ (80022c0 <DMA1_Stream1_IRQHandler+0x10>)
 80022b6:	f003 fc67 	bl	8005b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	24000598 	.word	0x24000598

080022c4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80022c8:	4802      	ldr	r0, [pc, #8]	@ (80022d4 <DMA1_Stream2_IRQHandler+0x10>)
 80022ca:	f003 fc5d 	bl	8005b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	24000520 	.word	0x24000520

080022d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <DMA1_Stream3_IRQHandler+0x10>)
 80022de:	f003 fc53 	bl	8005b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	24000400 	.word	0x24000400

080022ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <I2C1_EV_IRQHandler+0x10>)
 80022f2:	f005 fc1f 	bl	8007b34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	24000478 	.word	0x24000478

08002300 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <I2C1_ER_IRQHandler+0x10>)
 8002306:	f005 fc2f 	bl	8007b68 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	24000478 	.word	0x24000478

08002314 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <I2C2_EV_IRQHandler+0x10>)
 800231a:	f005 fc0b 	bl	8007b34 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	240004cc 	.word	0x240004cc

08002328 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <I2C2_ER_IRQHandler+0x10>)
 800232e:	f005 fc1b 	bl	8007b68 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	240004cc 	.word	0x240004cc

0800233c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <USART1_IRQHandler+0x10>)
 8002342:	f010 f8bd 	bl	80124c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	24000840 	.word	0x24000840

08002350 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <DMA2_Stream0_IRQHandler+0x10>)
 8002356:	f003 fc17 	bl	8005b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	240008d4 	.word	0x240008d4

08002364 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <SPI4_IRQHandler+0x10>)
 800236a:	f00f fc27 	bl	8011bbc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	24000740 	.word	0x24000740

08002378 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <OTG_FS_IRQHandler+0x10>)
 800237e:	f00a f93c 	bl	800c5fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2402a844 	.word	0x2402a844

0800238c <JPEG_IRQHandler>:

/**
  * @brief This function handles JPEG global interrupt.
  */
void JPEG_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <JPEG_IRQHandler+0x10>)
 8002392:	f007 ffcb 	bl	800a32c <HAL_JPEG_IRQHandler>
  /* USER CODE BEGIN JPEG_IRQn 1 */

  /* USER CODE END JPEG_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	24000610 	.word	0x24000610

080023a0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 80023a4:	4803      	ldr	r0, [pc, #12]	@ (80023b4 <MDMA_IRQHandler+0x14>)
 80023a6:	f009 fd8b 	bl	800bec0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_ne);
 80023aa:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <MDMA_IRQHandler+0x18>)
 80023ac:	f009 fd88 	bl	800bec0 <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	24000668 	.word	0x24000668
 80023b8:	240006d4 	.word	0x240006d4

080023bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c4:	4a14      	ldr	r2, [pc, #80]	@ (8002418 <_sbrk+0x5c>)
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <_sbrk+0x60>)
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d0:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d8:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <_sbrk+0x64>)
 80023da:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <_sbrk+0x68>)
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ec:	f016 fa28 	bl	8018840 <__errno>
 80023f0:	4603      	mov	r3, r0
 80023f2:	220c      	movs	r2, #12
 80023f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e009      	b.n	8002410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023fc:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002402:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a05      	ldr	r2, [pc, #20]	@ (8002420 <_sbrk+0x64>)
 800240c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	24080000 	.word	0x24080000
 800241c:	00000400 	.word	0x00000400
 8002420:	24029358 	.word	0x24029358
 8002424:	2402b090 	.word	0x2402b090

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800242c:	4b43      	ldr	r3, [pc, #268]	@ (800253c <SystemInit+0x114>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002432:	4a42      	ldr	r2, [pc, #264]	@ (800253c <SystemInit+0x114>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800243c:	4b40      	ldr	r3, [pc, #256]	@ (8002540 <SystemInit+0x118>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	2b06      	cmp	r3, #6
 8002446:	d807      	bhi.n	8002458 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002448:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <SystemInit+0x118>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 030f 	bic.w	r3, r3, #15
 8002450:	4a3b      	ldr	r2, [pc, #236]	@ (8002540 <SystemInit+0x118>)
 8002452:	f043 0307 	orr.w	r3, r3, #7
 8002456:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <SystemInit+0x11c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a39      	ldr	r2, [pc, #228]	@ (8002544 <SystemInit+0x11c>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002464:	4b37      	ldr	r3, [pc, #220]	@ (8002544 <SystemInit+0x11c>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800246a:	4b36      	ldr	r3, [pc, #216]	@ (8002544 <SystemInit+0x11c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4935      	ldr	r1, [pc, #212]	@ (8002544 <SystemInit+0x11c>)
 8002470:	4b35      	ldr	r3, [pc, #212]	@ (8002548 <SystemInit+0x120>)
 8002472:	4013      	ands	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002476:	4b32      	ldr	r3, [pc, #200]	@ (8002540 <SystemInit+0x118>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002482:	4b2f      	ldr	r3, [pc, #188]	@ (8002540 <SystemInit+0x118>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 030f 	bic.w	r3, r3, #15
 800248a:	4a2d      	ldr	r2, [pc, #180]	@ (8002540 <SystemInit+0x118>)
 800248c:	f043 0307 	orr.w	r3, r3, #7
 8002490:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <SystemInit+0x11c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002498:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <SystemInit+0x11c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800249e:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <SystemInit+0x11c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80024a4:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <SystemInit+0x11c>)
 80024a6:	4a29      	ldr	r2, [pc, #164]	@ (800254c <SystemInit+0x124>)
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80024aa:	4b26      	ldr	r3, [pc, #152]	@ (8002544 <SystemInit+0x11c>)
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <SystemInit+0x128>)
 80024ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80024b0:	4b24      	ldr	r3, [pc, #144]	@ (8002544 <SystemInit+0x11c>)
 80024b2:	4a28      	ldr	r2, [pc, #160]	@ (8002554 <SystemInit+0x12c>)
 80024b4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80024b6:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <SystemInit+0x11c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80024bc:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <SystemInit+0x11c>)
 80024be:	4a25      	ldr	r2, [pc, #148]	@ (8002554 <SystemInit+0x12c>)
 80024c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80024c2:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <SystemInit+0x11c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80024c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002544 <SystemInit+0x11c>)
 80024ca:	4a22      	ldr	r2, [pc, #136]	@ (8002554 <SystemInit+0x12c>)
 80024cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <SystemInit+0x11c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002544 <SystemInit+0x11c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002544 <SystemInit+0x11c>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024e0:	4b18      	ldr	r3, [pc, #96]	@ (8002544 <SystemInit+0x11c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <SystemInit+0x130>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <SystemInit+0x134>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f2:	d202      	bcs.n	80024fa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002560 <SystemInit+0x138>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80024fa:	4b12      	ldr	r3, [pc, #72]	@ (8002544 <SystemInit+0x11c>)
 80024fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002500:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d113      	bne.n	8002530 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002508:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <SystemInit+0x11c>)
 800250a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800250e:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <SystemInit+0x11c>)
 8002510:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002514:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002518:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <SystemInit+0x13c>)
 800251a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800251e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <SystemInit+0x11c>)
 8002522:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002526:	4a07      	ldr	r2, [pc, #28]	@ (8002544 <SystemInit+0x11c>)
 8002528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800252c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00
 8002540:	52002000 	.word	0x52002000
 8002544:	58024400 	.word	0x58024400
 8002548:	eaf6ed7f 	.word	0xeaf6ed7f
 800254c:	02020200 	.word	0x02020200
 8002550:	01ff0000 	.word	0x01ff0000
 8002554:	01010280 	.word	0x01010280
 8002558:	5c001000 	.word	0x5c001000
 800255c:	ffff0000 	.word	0xffff0000
 8002560:	51008108 	.word	0x51008108
 8002564:	52004000 	.word	0x52004000

08002568 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <ExitRun0Mode+0x2c>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <ExitRun0Mode+0x2c>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002578:	bf00      	nop
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <ExitRun0Mode+0x2c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f9      	beq.n	800257a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	58024800 	.word	0x58024800

08002598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002598:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80025d4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800259c:	f7ff ffe4 	bl	8002568 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025a0:	f7ff ff42 	bl	8002428 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a4:	480c      	ldr	r0, [pc, #48]	@ (80025d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025a6:	490d      	ldr	r1, [pc, #52]	@ (80025dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025a8:	4a0d      	ldr	r2, [pc, #52]	@ (80025e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025ac:	e002      	b.n	80025b4 <LoopCopyDataInit>

080025ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b2:	3304      	adds	r3, #4

080025b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b8:	d3f9      	bcc.n	80025ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ba:	4a0a      	ldr	r2, [pc, #40]	@ (80025e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025bc:	4c0a      	ldr	r4, [pc, #40]	@ (80025e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c0:	e001      	b.n	80025c6 <LoopFillZerobss>

080025c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c4:	3204      	adds	r2, #4

080025c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c8:	d3fb      	bcc.n	80025c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ca:	f016 f93f 	bl	801884c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ce:	f7fe f875 	bl	80006bc <main>
  bx  lr
 80025d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80025d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025dc:	24000380 	.word	0x24000380
  ldr r2, =_sidata
 80025e0:	0801964c 	.word	0x0801964c
  ldr r2, =_sbss
 80025e4:	24000380 	.word	0x24000380
  ldr r4, =_ebss
 80025e8:	2402b090 	.word	0x2402b090

080025ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC3_IRQHandler>

080025ee <SSD1306_SendCommand>:
    0x06, 0x00, 0b00010000, 0b00001000, 0b00010000, 0b00100000, 0b00010000, 0x00  // ------ 126 - ~
};

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------
uint8_t SSD1306_SendCommand(SSD1306_HandleTypeDef *hssd, uint8_t command) {
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b086      	sub	sp, #24
 80025f2:	af02      	add	r7, sp, #8
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
	uint8_t composite[2] = {COMMAND, command};
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	733b      	strb	r3, [r7, #12]
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	737b      	strb	r3, [r7, #13]
	if (HAL_I2C_Master_Transmit(hssd->i2c_handle, (hssd->address) << 1, composite, 2, 100))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	791b      	ldrb	r3, [r3, #4]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	b299      	uxth	r1, r3
 800260e:	f107 020c 	add.w	r2, r7, #12
 8002612:	2364      	movs	r3, #100	@ 0x64
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2302      	movs	r3, #2
 8002618:	f005 f860 	bl	80076dc <HAL_I2C_Master_Transmit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SSD1306_SendCommand+0x38>
		return ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <SSD1306_SendCommand+0x3a>
	return SUCCESS;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <SSD1306_Init>:


uint8_t SSD1306_Init(SSD1306_HandleTypeDef *hssd) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	// Set the cursor
	hssd->str_cursor = 0;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	821a      	strh	r2, [r3, #16]
	hssd->vram = hssd->vram_full + 1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	60da      	str	r2, [r3, #12]
	// Some control variables
	uint16_t n_commands = SSD1306_INITCMDS[0];
 8002648:	2312      	movs	r3, #18
 800264a:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 800264c:	2301      	movs	r3, #1
 800264e:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 8002650:	e02c      	b.n	80026ac <SSD1306_Init+0x7c>
	        // Get no. of Args
	        n_arguments = SSD1306_INITCMDS[cmd_idx];
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <SSD1306_Init+0x90>)
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	81bb      	strh	r3, [r7, #12]
	        cmd_idx++;
 800265a:	897b      	ldrh	r3, [r7, #10]
 800265c:	3301      	adds	r3, #1
 800265e:	817b      	strh	r3, [r7, #10]

	        // Send initial command
	        if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002660:	897b      	ldrh	r3, [r7, #10]
 8002662:	4a17      	ldr	r2, [pc, #92]	@ (80026c0 <SSD1306_Init+0x90>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	4619      	mov	r1, r3
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff ffc0 	bl	80025ee <SSD1306_SendCommand>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <SSD1306_Init+0x4a>
 8002674:	897b      	ldrh	r3, [r7, #10]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e01e      	b.n	80026b8 <SSD1306_Init+0x88>
	        cmd_idx++;
 800267a:	897b      	ldrh	r3, [r7, #10]
 800267c:	3301      	adds	r3, #1
 800267e:	817b      	strh	r3, [r7, #10]

	        // Send argumemts
	        while (n_arguments--) {
 8002680:	e00f      	b.n	80026a2 <SSD1306_Init+0x72>
	            if (SSD1306_SendCommand(hssd, SSD1306_INITCMDS[cmd_idx])) return cmd_idx;
 8002682:	897b      	ldrh	r3, [r7, #10]
 8002684:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <SSD1306_Init+0x90>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ffaf 	bl	80025ee <SSD1306_SendCommand>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <SSD1306_Init+0x6c>
 8002696:	897b      	ldrh	r3, [r7, #10]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e00d      	b.n	80026b8 <SSD1306_Init+0x88>
	            cmd_idx++;
 800269c:	897b      	ldrh	r3, [r7, #10]
 800269e:	3301      	adds	r3, #1
 80026a0:	817b      	strh	r3, [r7, #10]
	        while (n_arguments--) {
 80026a2:	89bb      	ldrh	r3, [r7, #12]
 80026a4:	1e5a      	subs	r2, r3, #1
 80026a6:	81ba      	strh	r2, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ea      	bne.n	8002682 <SSD1306_Init+0x52>
	while (n_commands--) {
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	1e5a      	subs	r2, r3, #1
 80026b0:	81fa      	strh	r2, [r7, #14]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1cd      	bne.n	8002652 <SSD1306_Init+0x22>
	        }
	    }
	    return 0;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	080190c0 	.word	0x080190c0

080026c4 <SSD1306_Clear>:

uint8_t SSD1306_Clear(SSD1306_HandleTypeDef *hssd) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	hssd->str_cursor = 0;						// Reset the cursor to top-left
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	821a      	strh	r2, [r3, #16]
	memset(hssd->vram, 0x00, CACHE_SIZE_MEM);	// clear vram
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f016 f897 	bl	8018810 <memset>
	return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <SSD1306_Update>:


uint8_t SSD1306_Update(SSD1306_HandleTypeDef *hssd) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	hssd->vram_full[0] = DATA_STREAM; 			// Identify the outgoing data as a stream
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2240      	movs	r2, #64	@ 0x40
 80026fa:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit_DMA(hssd->i2c_handle, (hssd->address) << 1, hssd->vram_full, CACHE_SIZE_MEM + 1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	791b      	ldrb	r3, [r3, #4]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	b299      	uxth	r1, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	f240 4301 	movw	r3, #1025	@ 0x401
 8002710:	f005 f8fc 	bl	800790c <HAL_I2C_Master_Transmit_DMA>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <SSD1306_DrawChar>:

uint8_t SSD1306_DrawChar(SSD1306_HandleTypeDef *hssd, char ch) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	70fb      	strb	r3, [r7, #3]
	// Account for newline
	if (ch == '\n') {
 800272c:	78fb      	ldrb	r3, [r7, #3]
 800272e:	2b0a      	cmp	r3, #10
 8002730:	d109      	bne.n	8002746 <SSD1306_DrawChar+0x26>
		hssd->str_cursor = (hssd->str_cursor/128)*128;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	8a1b      	ldrh	r3, [r3, #16]
 8002736:	09db      	lsrs	r3, r3, #7
 8002738:	b29b      	uxth	r3, r3
 800273a:	01db      	lsls	r3, r3, #7
 800273c:	b29a      	uxth	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	821a      	strh	r2, [r3, #16]
		return SUCCESS;
 8002742:	2300      	movs	r3, #0
 8002744:	e036      	b.n	80027b4 <SSD1306_DrawChar+0x94>
	}
	if (ch < 32 || ch > 126) return ERROR;	// char is unable to be rendered
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	2b1f      	cmp	r3, #31
 800274a:	d902      	bls.n	8002752 <SSD1306_DrawChar+0x32>
 800274c:	78fb      	ldrb	r3, [r7, #3]
 800274e:	2b7e      	cmp	r3, #126	@ 0x7e
 8002750:	d901      	bls.n	8002756 <SSD1306_DrawChar+0x36>
 8002752:	2301      	movs	r3, #1
 8002754:	e02e      	b.n	80027b4 <SSD1306_DrawChar+0x94>
	char newC = ch - 32;					// offset the index-space so the ASCII code aligns with the font table
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	3b20      	subs	r3, #32
 800275a:	73fb      	strb	r3, [r7, #15]
	if (ch >= 97 && ch <= 122) newC -= 32;	// convert lowercase to uppercase
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b60      	cmp	r3, #96	@ 0x60
 8002760:	d906      	bls.n	8002770 <SSD1306_DrawChar+0x50>
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	2b7a      	cmp	r3, #122	@ 0x7a
 8002766:	d803      	bhi.n	8002770 <SSD1306_DrawChar+0x50>
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	3b20      	subs	r3, #32
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	e005      	b.n	800277c <SSD1306_DrawChar+0x5c>
	else if (ch >= 123) newC -= 26;			// remap the brace set to align with the font table
 8002770:	78fb      	ldrb	r3, [r7, #3]
 8002772:	2b7a      	cmp	r3, #122	@ 0x7a
 8002774:	d902      	bls.n	800277c <SSD1306_DrawChar+0x5c>
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3b1a      	subs	r3, #26
 800277a:	73fb      	strb	r3, [r7, #15]

	uint8_t len = ALPHNUM[newC*8];
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4a0e      	ldr	r2, [pc, #56]	@ (80027bc <SSD1306_DrawChar+0x9c>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	73bb      	strb	r3, [r7, #14]
	memcpy(hssd->vram + hssd->str_cursor, ALPHNUM+(newC*8)+1, len);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	8a12      	ldrh	r2, [r2, #16]
 800278e:	1898      	adds	r0, r3, r2
 8002790:	7bfb      	ldrb	r3, [r7, #15]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	3301      	adds	r3, #1
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <SSD1306_DrawChar+0x9c>)
 8002798:	4413      	add	r3, r2
 800279a:	7bba      	ldrb	r2, [r7, #14]
 800279c:	4619      	mov	r1, r3
 800279e:	f016 f87b 	bl	8018898 <memcpy>
	hssd->str_cursor += len;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8a1a      	ldrh	r2, [r3, #16]
 80027a6:	7bbb      	ldrb	r3, [r7, #14]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	821a      	strh	r2, [r3, #16]
	return SUCCESS;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	080190f4 	.word	0x080190f4

080027c0 <SSD1306_DrawString>:


uint8_t SSD1306_DrawString(SSD1306_HandleTypeDef *hssd, char *str, uint8_t length) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < length; i++) {
 80027ce:	2300      	movs	r3, #0
 80027d0:	75fb      	strb	r3, [r7, #23]
 80027d2:	e013      	b.n	80027fc <SSD1306_DrawString+0x3c>
	    if (SSD1306_DrawChar(hssd, str[i])) hssd->str_cursor += 0x06;
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	4413      	add	r3, r2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f7ff ff9e 	bl	8002720 <SSD1306_DrawChar>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <SSD1306_DrawString+0x36>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8a1b      	ldrh	r3, [r3, #16]
 80027ee:	3306      	adds	r3, #6
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	821a      	strh	r2, [r3, #16]
	for (uint8_t i = 0; i < length; i++) {
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	3301      	adds	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
 80027fc:	7dfa      	ldrb	r2, [r7, #23]
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	429a      	cmp	r2, r3
 8002802:	d3e7      	bcc.n	80027d4 <SSD1306_DrawString+0x14>
	}

	return SUCCESS;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3718      	adds	r7, #24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <ST7789_SendByte_Command>:

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

// Writes a single command byte to the LCD
uint8_t ST7789_SendByte_Command(ST7789_HandleTypeDef *hst7789, uint8_t command) {
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_RESET);	// assert DC LO (~CMD)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6898      	ldr	r0, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	899b      	ldrh	r3, [r3, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	4619      	mov	r1, r3
 8002826:	f004 fea3 	bl	8007570 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &command, 1, 500))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	1cf9      	adds	r1, r7, #3
 8002830:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002834:	2201      	movs	r2, #1
 8002836:	f00e fe91 	bl	801155c <HAL_SPI_Transmit>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <ST7789_SendByte_Command+0x36>
		return ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <ST7789_SendByte_Command+0x38>
	return SUCCESS;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <ST7789_SendByte_Data>:

uint8_t ST7789_SendByte_Data(ST7789_HandleTypeDef *hst7789, uint8_t data) {
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (DATA)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6898      	ldr	r0, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	899b      	ldrh	r3, [r3, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	4619      	mov	r1, r3
 8002866:	f004 fe83 	bl	8007570 <HAL_GPIO_WritePin>

	// Write the data
	if (HAL_SPI_Transmit(hst7789->spi_handle, &data, 1, 500))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	1cf9      	adds	r1, r7, #3
 8002870:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002874:	2201      	movs	r2, #1
 8002876:	f00e fe71 	bl	801155c <HAL_SPI_Transmit>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <ST7789_SendByte_Data+0x36>
		return ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <ST7789_SendByte_Data+0x38>
	return SUCCESS;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <ST7789_Init>:
	if (HAL_SPI_Transmit(hst7789->spi_handle, (uint8_t*)(&data), 2, 500))
		return ERROR;
	return SUCCESS;
}

uint8_t ST7789_Init(ST7789_HandleTypeDef *hst7789) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

	hst7789->updating_sector = 0;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	751a      	strb	r2, [r3, #20]

	// Wake up the SPI line
	uint8_t dummy = 0x00;
 800289e:	2300      	movs	r3, #0
 80028a0:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit_DMA(hst7789->spi_handle, &dummy, 1);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f107 0109 	add.w	r1, r7, #9
 80028aa:	2201      	movs	r2, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00f f843 	bl	8011938 <HAL_SPI_Transmit_DMA>
	HAL_Delay(10);
 80028b2:	200a      	movs	r0, #10
 80028b4:	f000 f9d4 	bl	8002c60 <HAL_Delay>

	// Some control variables
	uint16_t n_commands = ST7789_INITCMDS[0];
 80028b8:	2313      	movs	r3, #19
 80028ba:	81fb      	strh	r3, [r7, #14]
	uint16_t n_arguments;
	uint16_t cmd_idx = 1;
 80028bc:	2301      	movs	r3, #1
 80028be:	817b      	strh	r3, [r7, #10]

	// Read the init sequence
	while (n_commands--) {
 80028c0:	e02c      	b.n	800291c <ST7789_Init+0x8c>
		// Get no. of Args
	    n_arguments = ST7789_INITCMDS[cmd_idx];
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002930 <ST7789_Init+0xa0>)
 80028c6:	5cd3      	ldrb	r3, [r2, r3]
 80028c8:	81bb      	strh	r3, [r7, #12]
	    cmd_idx++;
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	3301      	adds	r3, #1
 80028ce:	817b      	strh	r3, [r7, #10]

	    // Send initial command
	    if (ST7789_SendByte_Command(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	4a17      	ldr	r2, [pc, #92]	@ (8002930 <ST7789_Init+0xa0>)
 80028d4:	5cd3      	ldrb	r3, [r2, r3]
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ff98 	bl	800280e <ST7789_SendByte_Command>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d002      	beq.n	80028ea <ST7789_Init+0x5a>
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	e01e      	b.n	8002928 <ST7789_Init+0x98>
	    cmd_idx++;
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	3301      	adds	r3, #1
 80028ee:	817b      	strh	r3, [r7, #10]

	    // Send argumemts
	    while (n_arguments--) {
 80028f0:	e00f      	b.n	8002912 <ST7789_Init+0x82>
			if (ST7789_SendByte_Data(hst7789, ST7789_INITCMDS[cmd_idx])) return cmd_idx;
 80028f2:	897b      	ldrh	r3, [r7, #10]
 80028f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002930 <ST7789_Init+0xa0>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff ffa7 	bl	800284e <ST7789_SendByte_Data>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d002      	beq.n	800290c <ST7789_Init+0x7c>
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	b2db      	uxtb	r3, r3
 800290a:	e00d      	b.n	8002928 <ST7789_Init+0x98>
				cmd_idx++;
 800290c:	897b      	ldrh	r3, [r7, #10]
 800290e:	3301      	adds	r3, #1
 8002910:	817b      	strh	r3, [r7, #10]
	    while (n_arguments--) {
 8002912:	89bb      	ldrh	r3, [r7, #12]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	81ba      	strh	r2, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ea      	bne.n	80028f2 <ST7789_Init+0x62>
	while (n_commands--) {
 800291c:	89fb      	ldrh	r3, [r7, #14]
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	81fa      	strh	r2, [r7, #14]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1cd      	bne.n	80028c2 <ST7789_Init+0x32>
	    }
	}
	return SUCCESS;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	0801931c 	.word	0x0801931c

08002934 <ST7789_SetWindow>:

	ST7789_SendByte_Command(hst7789, 0x2C);
}

// Sets the "window"?
void ST7789_SetWindow(ST7789_HandleTypeDef *hst7789, uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t  yEnd) {
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
	ST7789_SendByte_Command(hst7789, 0x2a);
 800294e:	212a      	movs	r1, #42	@ 0x2a
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ff5c 	bl	800280e <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, xStart >>8);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	0a1b      	lsrs	r3, r3, #8
 800295a:	b29b      	uxth	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4619      	mov	r1, r3
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f7ff ff74 	bl	800284e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, xStart & 0xff);
 8002966:	897b      	ldrh	r3, [r7, #10]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	4619      	mov	r1, r3
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff ff6e 	bl	800284e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) >> 8);
 8002972:	88fb      	ldrh	r3, [r7, #6]
 8002974:	3b01      	subs	r3, #1
 8002976:	121b      	asrs	r3, r3, #8
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4619      	mov	r1, r3
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff ff66 	bl	800284e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (xEnd - 1) & 0xff);
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4619      	mov	r1, r3
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff ff5e 	bl	800284e <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2b);
 8002992:	212b      	movs	r1, #43	@ 0x2b
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff ff3a 	bl	800280e <ST7789_SendByte_Command>
	ST7789_SendByte_Data(hst7789, yStart >>8);
 800299a:	893b      	ldrh	r3, [r7, #8]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	b29b      	uxth	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	4619      	mov	r1, r3
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff ff52 	bl	800284e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, yStart & 0xff);
 80029aa:	893b      	ldrh	r3, [r7, #8]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4619      	mov	r1, r3
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ff4c 	bl	800284e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) >> 8);
 80029b6:	8b3b      	ldrh	r3, [r7, #24]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	121b      	asrs	r3, r3, #8
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	4619      	mov	r1, r3
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f7ff ff44 	bl	800284e <ST7789_SendByte_Data>
	ST7789_SendByte_Data(hst7789, (yEnd - 1) & 0xff);
 80029c6:	8b3b      	ldrh	r3, [r7, #24]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f7ff ff3c 	bl	800284e <ST7789_SendByte_Data>

	ST7789_SendByte_Command(hst7789, 0x2C);
 80029d6:	212c      	movs	r1, #44	@ 0x2c
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff ff18 	bl	800280e <ST7789_SendByte_Command>
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <ST7789_Clear>:


uint8_t ST7789_Clear(ST7789_HandleTypeDef *hst7789, uint8_t col) {
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]
	// fill VRAM with white
	memset(hst7789->vram, col, LCD_WIDTH*LCD_HEIGHT*2);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	78f9      	ldrb	r1, [r7, #3]
 80029f8:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 80029fc:	4618      	mov	r0, r3
 80029fe:	f015 ff07 	bl	8018810 <memset>
	return SUCCESS;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3708      	adds	r7, #8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <ST7789_UpdateSector>:

uint8_t ST7789_UpdateSector(ST7789_HandleTypeDef *hst7789, uint8_t screen_section) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	70fb      	strb	r3, [r7, #3]
	// Check for bounds/busy
	if (hst7789->spi_state == 1) return ERROR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	791b      	ldrb	r3, [r3, #4]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <ST7789_UpdateSector+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e04e      	b.n	8002ac2 <ST7789_UpdateSector+0xb6>
	if (screen_section > 2) return ERROR;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <ST7789_UpdateSector+0x22>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e049      	b.n	8002ac2 <ST7789_UpdateSector+0xb6>

	hst7789->updating_sector = screen_section;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	751a      	strb	r2, [r3, #20]

	// Flag as busy
	hst7789->spi_state = 1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	711a      	strb	r2, [r3, #4]

	// Set the window based on the vram offset
	ST7789_SetWindow(hst7789, 0, (screen_section*0xEA60)/(LCD_WIDTH*2), LCD_WIDTH, LCD_HEIGHT);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	0152      	lsls	r2, r2, #5
 8002a42:	1ad2      	subs	r2, r2, r3
 8002a44:	0092      	lsls	r2, r2, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	23f0      	movs	r3, #240	@ 0xf0
 8002a52:	2100      	movs	r1, #0
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff6d 	bl	8002934 <ST7789_SetWindow>

	HAL_GPIO_WritePin(hst7789->dc_gpio_handle, hst7789->dc_gpio_pin, GPIO_PIN_SET);		// assert DC HI (~CMD)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6898      	ldr	r0, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	899b      	ldrh	r3, [r3, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4619      	mov	r1, r3
 8002a66:	f004 fd83 	bl	8007570 <HAL_GPIO_WritePin>


	if (screen_section != 2) {
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d013      	beq.n	8002a98 <ST7789_UpdateSector+0x8c>
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0xEA60))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002a7e:	fb01 f202 	mul.w	r2, r1, r2
 8002a82:	4413      	add	r3, r2
 8002a84:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f00e ff55 	bl	8011938 <HAL_SPI_Transmit_DMA>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <ST7789_UpdateSector+0xb4>
			return ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e014      	b.n	8002ac2 <ST7789_UpdateSector+0xb6>
	} else {
		if (HAL_SPI_Transmit_DMA(hst7789->spi_handle, hst7789->vram + screen_section*0xEA60, 0x8340))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8002aa6:	fb01 f202 	mul.w	r2, r1, r2
 8002aaa:	4413      	add	r3, r2
 8002aac:	f248 3240 	movw	r2, #33600	@ 0x8340
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f00e ff41 	bl	8011938 <HAL_SPI_Transmit_DMA>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <ST7789_UpdateSector+0xb4>
			return ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e000      	b.n	8002ac2 <ST7789_UpdateSector+0xb6>
	}
//	return SUCCESS;
	//HAL_SPI_Transmit(hst7789->spi_handle, hst7789->vram, 0xEA60, 500);
	return SUCCESS;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <ST7789_UpdateAutomatic>:

uint8_t ST7789_UpdateAutomatic(ST7789_HandleTypeDef *hst7789) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	// perform a screen update
	if (ST7789_UpdateSector(hst7789, hst7789->updating_sector)) return ERROR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	7d1b      	ldrb	r3, [r3, #20]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ff96 	bl	8002a0c <ST7789_UpdateSector>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <ST7789_UpdateAutomatic+0x1e>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e013      	b.n	8002b12 <ST7789_UpdateAutomatic+0x46>

	// increment the sector to be updated
	hst7789->updating_sector++;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	7d1b      	ldrb	r3, [r3, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	751a      	strb	r2, [r3, #20]
	hst7789->updating_sector %= 3;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7d1a      	ldrb	r2, [r3, #20]
 8002afa:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <ST7789_UpdateAutomatic+0x50>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	0859      	lsrs	r1, r3, #1
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	751a      	strb	r2, [r3, #20]

	return SUCCESS;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	aaaaaaab 	.word	0xaaaaaaab

08002b20 <ST7789_DMATransmitCplt>:


void ST7789_DMATransmitCplt(ST7789_HandleTypeDef *hst7789) {
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	// Flag idle
	hst7789->spi_state = 0;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	711a      	strb	r2, [r3, #4]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b42:	2003      	movs	r0, #3
 8002b44:	f001 fc3e 	bl	80043c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b48:	f00b fd10 	bl	800e56c <HAL_RCC_GetSysClockFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <HAL_Init+0x68>)
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	4913      	ldr	r1, [pc, #76]	@ (8002ba8 <HAL_Init+0x6c>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
 8002b64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <HAL_Init+0x68>)
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba8 <HAL_Init+0x6c>)
 8002b70:	5cd3      	ldrb	r3, [r2, r3]
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8002bac <HAL_Init+0x70>)
 8002b7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b80:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <HAL_Init+0x74>)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b86:	200f      	movs	r0, #15
 8002b88:	f000 f814 	bl	8002bb4 <HAL_InitTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e002      	b.n	8002b9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b96:	f7fe ffa1 	bl	8001adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	58024400 	.word	0x58024400
 8002ba8:	080190b0 	.word	0x080190b0
 8002bac:	24000230 	.word	0x24000230
 8002bb0:	2400022c 	.word	0x2400022c

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_InitTick+0x60>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e021      	b.n	8002c0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	@ (8002c18 <HAL_InitTick+0x64>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_InitTick+0x60>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 fc23 	bl	800442a <HAL_SYSTICK_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00e      	b.n	8002c0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d80a      	bhi.n	8002c0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f001 fbed 	bl	80043da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c00:	4a06      	ldr	r2, [pc, #24]	@ (8002c1c <HAL_InitTick+0x68>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	24000238 	.word	0x24000238
 8002c18:	2400022c 	.word	0x2400022c
 8002c1c:	24000234 	.word	0x24000234

08002c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c24:	4b06      	ldr	r3, [pc, #24]	@ (8002c40 <HAL_IncTick+0x20>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_IncTick+0x24>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	4a04      	ldr	r2, [pc, #16]	@ (8002c44 <HAL_IncTick+0x24>)
 8002c32:	6013      	str	r3, [r2, #0]
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	24000238 	.word	0x24000238
 8002c44:	2402935c 	.word	0x2402935c

08002c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	@ (8002c5c <HAL_GetTick+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2402935c 	.word	0x2402935c

08002c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c68:	f7ff ffee 	bl	8002c48 <HAL_GetTick>
 8002c6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d005      	beq.n	8002c86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <HAL_Delay+0x44>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c86:	bf00      	nop
 8002c88:	f7ff ffde 	bl	8002c48 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d8f7      	bhi.n	8002c88 <HAL_Delay+0x28>
  {
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	24000238 	.word	0x24000238

08002ca8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cac:	4b03      	ldr	r3, [pc, #12]	@ (8002cbc <HAL_GetREVID+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	0c1b      	lsrs	r3, r3, #16
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	5c001000 	.word	0x5c001000

08002cc0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b087      	sub	sp, #28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <LL_ADC_SetChannelPreselection+0x24>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2201      	movs	r2, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	e015      	b.n	8002d78 <LL_ADC_SetChannelPreselection+0x50>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2201      	movs	r2, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	69d2      	ldr	r2, [r2, #28]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002d82:	bf00      	nop
 8002d84:	371c      	adds	r7, #28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b087      	sub	sp, #28
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3360      	adds	r3, #96	@ 0x60
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b085      	sub	sp, #20
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	431a      	orrs	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	611a      	str	r2, [r3, #16]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3360      	adds	r3, #96	@ 0x60
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	601a      	str	r2, [r3, #0]
  }
}
 8002e2a:	bf00      	nop
 8002e2c:	371c      	adds	r7, #28
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	3330      	adds	r3, #48	@ 0x30
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0a1b      	lsrs	r3, r3, #8
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	4413      	add	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	211f      	movs	r1, #31
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	0e9b      	lsrs	r3, r3, #26
 8002e94:	f003 011f 	and.w	r1, r3, #31
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ea8:	bf00      	nop
 8002eaa:	371c      	adds	r7, #28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3314      	adds	r3, #20
 8002eea:	461a      	mov	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	0e5b      	lsrs	r3, r3, #25
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	4413      	add	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0d1b      	lsrs	r3, r3, #20
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2107      	movs	r1, #7
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	401a      	ands	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	0d1b      	lsrs	r3, r3, #20
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f003 0318 	and.w	r3, r3, #24
 8002f52:	4908      	ldr	r1, [pc, #32]	@ (8002f74 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f54:	40d9      	lsrs	r1, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	400b      	ands	r3, r1
 8002f5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	000fffff 	.word	0x000fffff

08002f78 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 031f 	and.w	r3, r3, #31
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	4b04      	ldr	r3, [pc, #16]	@ (8002fb4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6093      	str	r3, [r2, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	5fffffc0 	.word	0x5fffffc0

08002fb8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <LL_ADC_EnableInternalRegulator+0x24>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr
 8003004:	6fffffc0 	.word	0x6fffffc0

08003008 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003018:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800301c:	d101      	bne.n	8003022 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <LL_ADC_Enable+0x24>)
 800303e:	4013      	ands	r3, r2
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	7fffffc0 	.word	0x7fffffc0

08003058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <LL_ADC_IsEnabled+0x18>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <LL_ADC_IsEnabled+0x1a>
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	4b05      	ldr	r3, [pc, #20]	@ (80030a4 <LL_ADC_REG_StartConversion+0x24>)
 800308e:	4013      	ands	r3, r2
 8003090:	f043 0204 	orr.w	r2, r3, #4
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	7fffffc0 	.word	0x7fffffc0

080030a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d101      	bne.n	80030c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80030bc:	2301      	movs	r3, #1
 80030be:	e000      	b.n	80030c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d101      	bne.n	80030e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003100:	2300      	movs	r3, #0
 8003102:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e18f      	b.n	800342e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fe fcf7 	bl	8001b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff3f 	bl	8002fb8 <LL_ADC_IsDeepPowerDownEnabled>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d004      	beq.n	800314a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff25 	bl	8002f94 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff5a 	bl	8003008 <LL_ADC_IsInternalRegulatorEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ff3e 	bl	8002fe0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003164:	4b87      	ldr	r3, [pc, #540]	@ (8003384 <HAL_ADC_Init+0x290>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	4a87      	ldr	r2, [pc, #540]	@ (8003388 <HAL_ADC_Init+0x294>)
 800316c:	fba2 2303 	umull	r2, r3, r2, r3
 8003170:	099b      	lsrs	r3, r3, #6
 8003172:	3301      	adds	r3, #1
 8003174:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003176:	e002      	b.n	800317e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3b01      	subs	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff ff3d 	bl	8003008 <LL_ADC_IsInternalRegulatorEnabled>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	f043 0210 	orr.w	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	f043 0201 	orr.w	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff77 	bl	80030a8 <LL_ADC_REG_IsConversionOngoing>
 80031ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 8129 	bne.w	800341c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 8125 	bne.w	800341c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff ff36 	bl	8003058 <LL_ADC_IsEnabled>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d136      	bne.n	8003260 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a65      	ldr	r2, [pc, #404]	@ (800338c <HAL_ADC_Init+0x298>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d004      	beq.n	8003206 <HAL_ADC_Init+0x112>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a63      	ldr	r2, [pc, #396]	@ (8003390 <HAL_ADC_Init+0x29c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10e      	bne.n	8003224 <HAL_ADC_Init+0x130>
 8003206:	4861      	ldr	r0, [pc, #388]	@ (800338c <HAL_ADC_Init+0x298>)
 8003208:	f7ff ff26 	bl	8003058 <LL_ADC_IsEnabled>
 800320c:	4604      	mov	r4, r0
 800320e:	4860      	ldr	r0, [pc, #384]	@ (8003390 <HAL_ADC_Init+0x29c>)
 8003210:	f7ff ff22 	bl	8003058 <LL_ADC_IsEnabled>
 8003214:	4603      	mov	r3, r0
 8003216:	4323      	orrs	r3, r4
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf0c      	ite	eq
 800321c:	2301      	moveq	r3, #1
 800321e:	2300      	movne	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	e008      	b.n	8003236 <HAL_ADC_Init+0x142>
 8003224:	485b      	ldr	r0, [pc, #364]	@ (8003394 <HAL_ADC_Init+0x2a0>)
 8003226:	f7ff ff17 	bl	8003058 <LL_ADC_IsEnabled>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d012      	beq.n	8003260 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a53      	ldr	r2, [pc, #332]	@ (800338c <HAL_ADC_Init+0x298>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_ADC_Init+0x15a>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a51      	ldr	r2, [pc, #324]	@ (8003390 <HAL_ADC_Init+0x29c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x15e>
 800324e:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_ADC_Init+0x2a4>)
 8003250:	e000      	b.n	8003254 <HAL_ADC_Init+0x160>
 8003252:	4a52      	ldr	r2, [pc, #328]	@ (800339c <HAL_ADC_Init+0x2a8>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4619      	mov	r1, r3
 800325a:	4610      	mov	r0, r2
 800325c:	f7ff fd30 	bl	8002cc0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003260:	f7ff fd22 	bl	8002ca8 <HAL_GetREVID>
 8003264:	4603      	mov	r3, r0
 8003266:	f241 0203 	movw	r2, #4099	@ 0x1003
 800326a:	4293      	cmp	r3, r2
 800326c:	d914      	bls.n	8003298 <HAL_ADC_Init+0x1a4>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b10      	cmp	r3, #16
 8003274:	d110      	bne.n	8003298 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	7d5b      	ldrb	r3, [r3, #21]
 800327a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003280:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003286:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7f1b      	ldrb	r3, [r3, #28]
 800328c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800328e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003290:	f043 030c 	orr.w	r3, r3, #12
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e00d      	b.n	80032b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	7d5b      	ldrb	r3, [r3, #21]
 800329c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80032a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7f1b      	ldrb	r3, [r3, #28]
 80032ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	7f1b      	ldrb	r3, [r3, #28]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	045b      	lsls	r3, r3, #17
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d009      	beq.n	80032e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	4b2c      	ldr	r3, [pc, #176]	@ (80033a0 <HAL_ADC_Init+0x2ac>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	69b9      	ldr	r1, [r7, #24]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fed2 	bl	80030a8 <LL_ADC_REG_IsConversionOngoing>
 8003304:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fedf 	bl	80030ce <LL_ADC_INJ_IsConversionOngoing>
 8003310:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15f      	bne.n	80033d8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d15c      	bne.n	80033d8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7d1b      	ldrb	r3, [r3, #20]
 8003322:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <HAL_ADC_Init+0x2b0>)
 8003334:	4013      	ands	r3, r2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	430b      	orrs	r3, r1
 800333e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003346:	2b01      	cmp	r3, #1
 8003348:	d130      	bne.n	80033ac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691a      	ldr	r2, [r3, #16]
 8003356:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <HAL_ADC_Init+0x2b4>)
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800335e:	3a01      	subs	r2, #1
 8003360:	0411      	lsls	r1, r2, #16
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003366:	4311      	orrs	r1, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003372:	430a      	orrs	r2, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	611a      	str	r2, [r3, #16]
 8003380:	e01c      	b.n	80033bc <HAL_ADC_Init+0x2c8>
 8003382:	bf00      	nop
 8003384:	2400022c 	.word	0x2400022c
 8003388:	053e2d63 	.word	0x053e2d63
 800338c:	40022000 	.word	0x40022000
 8003390:	40022100 	.word	0x40022100
 8003394:	58026000 	.word	0x58026000
 8003398:	40022300 	.word	0x40022300
 800339c:	58026300 	.word	0x58026300
 80033a0:	fff0c003 	.word	0xfff0c003
 80033a4:	ffffbffc 	.word	0xffffbffc
 80033a8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fd16 	bl	8003e04 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d10c      	bne.n	80033fa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e6:	f023 010f 	bic.w	r1, r3, #15
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	1e5a      	subs	r2, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80033f8:	e007      	b.n	800340a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 020f 	bic.w	r2, r2, #15
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	655a      	str	r2, [r3, #84]	@ 0x54
 800341a:	e007      	b.n	800342c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f043 0210 	orr.w	r2, r3, #16
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800342c:	7ffb      	ldrb	r3, [r7, #31]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop

08003438 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a55      	ldr	r2, [pc, #340]	@ (80035a0 <HAL_ADC_Start_DMA+0x168>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_ADC_Start_DMA+0x20>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a54      	ldr	r2, [pc, #336]	@ (80035a4 <HAL_ADC_Start_DMA+0x16c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d101      	bne.n	800345c <HAL_ADC_Start_DMA+0x24>
 8003458:	4b53      	ldr	r3, [pc, #332]	@ (80035a8 <HAL_ADC_Start_DMA+0x170>)
 800345a:	e000      	b.n	800345e <HAL_ADC_Start_DMA+0x26>
 800345c:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <HAL_ADC_Start_DMA+0x174>)
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fd8a 	bl	8002f78 <LL_ADC_GetMultimode>
 8003464:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fe1c 	bl	80030a8 <LL_ADC_REG_IsConversionOngoing>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	f040 808c 	bne.w	8003590 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Start_DMA+0x4e>
 8003482:	2302      	movs	r3, #2
 8003484:	e087      	b.n	8003596 <HAL_ADC_Start_DMA+0x15e>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d002      	beq.n	80034a0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b09      	cmp	r3, #9
 800349e:	d170      	bne.n	8003582 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fb91 	bl	8003bc8 <ADC_Enable>
 80034a6:	4603      	mov	r3, r0
 80034a8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d163      	bne.n	8003578 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034b4:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <HAL_ADC_Start_DMA+0x178>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a37      	ldr	r2, [pc, #220]	@ (80035a4 <HAL_ADC_Start_DMA+0x16c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d002      	beq.n	80034d0 <HAL_ADC_Start_DMA+0x98>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e000      	b.n	80034d2 <HAL_ADC_Start_DMA+0x9a>
 80034d0:	4b33      	ldr	r3, [pc, #204]	@ (80035a0 <HAL_ADC_Start_DMA+0x168>)
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	6812      	ldr	r2, [r2, #0]
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d002      	beq.n	80034e0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d006      	beq.n	8003506 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fc:	f023 0206 	bic.w	r2, r3, #6
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	659a      	str	r2, [r3, #88]	@ 0x58
 8003504:	e002      	b.n	800350c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003510:	4a28      	ldr	r2, [pc, #160]	@ (80035b4 <HAL_ADC_Start_DMA+0x17c>)
 8003512:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_ADC_Start_DMA+0x180>)
 800351a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003520:	4a26      	ldr	r2, [pc, #152]	@ (80035bc <HAL_ADC_Start_DMA+0x184>)
 8003522:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	221c      	movs	r2, #28
 800352a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0210 	orr.w	r2, r2, #16
 8003542:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7ff fcb0 	bl	8002eb4 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3340      	adds	r3, #64	@ 0x40
 800355e:	4619      	mov	r1, r3
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f001 fb42 	bl	8004bec <HAL_DMA_Start_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff fd85 	bl	8003080 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003576:	e00d      	b.n	8003594 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003580:	e008      	b.n	8003594 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800358e:	e001      	b.n	8003594 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40022100 	.word	0x40022100
 80035a8:	40022300 	.word	0x40022300
 80035ac:	58026300 	.word	0x58026300
 80035b0:	fffff0fe 	.word	0xfffff0fe
 80035b4:	08003cdd 	.word	0x08003cdd
 80035b8:	08003db5 	.word	0x08003db5
 80035bc:	08003dd1 	.word	0x08003dd1

080035c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b08d      	sub	sp, #52	@ 0x34
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a65      	ldr	r2, [pc, #404]	@ (8003798 <HAL_ADC_ConfigChannel+0x1b0>)
 8003602:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x2a>
 800360e:	2302      	movs	r3, #2
 8003610:	e2c7      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x5ba>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff fd42 	bl	80030a8 <LL_ADC_REG_IsConversionOngoing>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	f040 82ac 	bne.w	8003b84 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db2c      	blt.n	800368e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800363c:	2b00      	cmp	r3, #0
 800363e:	d108      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x6a>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	0e9b      	lsrs	r3, r3, #26
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2201      	movs	r2, #1
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	e016      	b.n	8003680 <HAL_ADC_ConfigChannel+0x98>
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa93 f3a3 	rbit	r3, r3
 800365e:	613b      	str	r3, [r7, #16]
  return result;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800366a:	2320      	movs	r3, #32
 800366c:	e003      	b.n	8003676 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	69d1      	ldr	r1, [r2, #28]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	430b      	orrs	r3, r1
 800368c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	f7ff fbde 	bl	8002e5c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fcff 	bl	80030a8 <LL_ADC_REG_IsConversionOngoing>
 80036aa:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fd0c 	bl	80030ce <LL_ADC_INJ_IsConversionOngoing>
 80036b6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f040 80b8 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 80b4 	bne.w	8003830 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6818      	ldr	r0, [r3, #0]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	6819      	ldr	r1, [r3, #0]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f7ff fc00 	bl	8002eda <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036da:	4b30      	ldr	r3, [pc, #192]	@ (800379c <HAL_ADC_ConfigChannel+0x1b4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e6:	d10b      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x118>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	e01d      	b.n	800373c <HAL_ADC_ConfigChannel+0x154>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0310 	and.w	r3, r3, #16
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x13e>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	e00a      	b.n	800373c <HAL_ADC_ConfigChannel+0x154>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	089b      	lsrs	r3, r3, #2
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	2b04      	cmp	r3, #4
 8003744:	d02c      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	f7ff fb1b 	bl	8002d8e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6919      	ldr	r1, [r3, #16]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	7e5b      	ldrb	r3, [r3, #25]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d102      	bne.n	800376e <HAL_ADC_ConfigChannel+0x186>
 8003768:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800376c:	e000      	b.n	8003770 <HAL_ADC_ConfigChannel+0x188>
 800376e:	2300      	movs	r3, #0
 8003770:	461a      	mov	r2, r3
 8003772:	f7ff fb45 	bl	8002e00 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	7e1b      	ldrb	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d102      	bne.n	800378c <HAL_ADC_ConfigChannel+0x1a4>
 8003786:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800378a:	e000      	b.n	800378e <HAL_ADC_ConfigChannel+0x1a6>
 800378c:	2300      	movs	r3, #0
 800378e:	461a      	mov	r2, r3
 8003790:	f7ff fb1d 	bl	8002dce <LL_ADC_SetDataRightShift>
 8003794:	e04c      	b.n	8003830 <HAL_ADC_ConfigChannel+0x248>
 8003796:	bf00      	nop
 8003798:	47ff0000 	.word	0x47ff0000
 800379c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	069b      	lsls	r3, r3, #26
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d107      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	069b      	lsls	r3, r3, #26
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d107      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	069b      	lsls	r3, r3, #26
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d107      	bne.n	800380c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800380a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003812:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	069b      	lsls	r3, r3, #26
 800381c:	429a      	cmp	r2, r3
 800381e:	d107      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800382e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fc0f 	bl	8003058 <LL_ADC_IsEnabled>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	f040 81aa 	bne.w	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	f7ff fb6e 	bl	8002f30 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a87      	ldr	r2, [pc, #540]	@ (8003a78 <HAL_ADC_ConfigChannel+0x490>)
 800385a:	4293      	cmp	r3, r2
 800385c:	f040 809a 	bne.w	8003994 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4984      	ldr	r1, [pc, #528]	@ (8003a7c <HAL_ADC_ConfigChannel+0x494>)
 800386a:	428b      	cmp	r3, r1
 800386c:	d147      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x316>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4983      	ldr	r1, [pc, #524]	@ (8003a80 <HAL_ADC_ConfigChannel+0x498>)
 8003874:	428b      	cmp	r3, r1
 8003876:	d040      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x312>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4981      	ldr	r1, [pc, #516]	@ (8003a84 <HAL_ADC_ConfigChannel+0x49c>)
 800387e:	428b      	cmp	r3, r1
 8003880:	d039      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x30e>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4980      	ldr	r1, [pc, #512]	@ (8003a88 <HAL_ADC_ConfigChannel+0x4a0>)
 8003888:	428b      	cmp	r3, r1
 800388a:	d032      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x30a>
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	497e      	ldr	r1, [pc, #504]	@ (8003a8c <HAL_ADC_ConfigChannel+0x4a4>)
 8003892:	428b      	cmp	r3, r1
 8003894:	d02b      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x306>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	497d      	ldr	r1, [pc, #500]	@ (8003a90 <HAL_ADC_ConfigChannel+0x4a8>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d024      	beq.n	80038ea <HAL_ADC_ConfigChannel+0x302>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	497b      	ldr	r1, [pc, #492]	@ (8003a94 <HAL_ADC_ConfigChannel+0x4ac>)
 80038a6:	428b      	cmp	r3, r1
 80038a8:	d01d      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x2fe>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	497a      	ldr	r1, [pc, #488]	@ (8003a98 <HAL_ADC_ConfigChannel+0x4b0>)
 80038b0:	428b      	cmp	r3, r1
 80038b2:	d016      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x2fa>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4978      	ldr	r1, [pc, #480]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4b4>)
 80038ba:	428b      	cmp	r3, r1
 80038bc:	d00f      	beq.n	80038de <HAL_ADC_ConfigChannel+0x2f6>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4977      	ldr	r1, [pc, #476]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x4b8>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d008      	beq.n	80038da <HAL_ADC_ConfigChannel+0x2f2>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4975      	ldr	r1, [pc, #468]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x4bc>)
 80038ce:	428b      	cmp	r3, r1
 80038d0:	d101      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x2ee>
 80038d2:	4b75      	ldr	r3, [pc, #468]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x4c0>)
 80038d4:	e05a      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038d6:	2300      	movs	r3, #0
 80038d8:	e058      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038da:	4b74      	ldr	r3, [pc, #464]	@ (8003aac <HAL_ADC_ConfigChannel+0x4c4>)
 80038dc:	e056      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038de:	4b74      	ldr	r3, [pc, #464]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x4c8>)
 80038e0:	e054      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038e2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4b4>)
 80038e4:	e052      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a98 <HAL_ADC_ConfigChannel+0x4b0>)
 80038e8:	e050      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038ea:	4b72      	ldr	r3, [pc, #456]	@ (8003ab4 <HAL_ADC_ConfigChannel+0x4cc>)
 80038ec:	e04e      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038ee:	4b72      	ldr	r3, [pc, #456]	@ (8003ab8 <HAL_ADC_ConfigChannel+0x4d0>)
 80038f0:	e04c      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038f2:	4b72      	ldr	r3, [pc, #456]	@ (8003abc <HAL_ADC_ConfigChannel+0x4d4>)
 80038f4:	e04a      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038f6:	4b72      	ldr	r3, [pc, #456]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x4d8>)
 80038f8:	e048      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e046      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4970      	ldr	r1, [pc, #448]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4dc>)
 8003904:	428b      	cmp	r3, r1
 8003906:	d140      	bne.n	800398a <HAL_ADC_ConfigChannel+0x3a2>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	495c      	ldr	r1, [pc, #368]	@ (8003a80 <HAL_ADC_ConfigChannel+0x498>)
 800390e:	428b      	cmp	r3, r1
 8003910:	d039      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x39e>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	495b      	ldr	r1, [pc, #364]	@ (8003a84 <HAL_ADC_ConfigChannel+0x49c>)
 8003918:	428b      	cmp	r3, r1
 800391a:	d032      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x39a>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4959      	ldr	r1, [pc, #356]	@ (8003a88 <HAL_ADC_ConfigChannel+0x4a0>)
 8003922:	428b      	cmp	r3, r1
 8003924:	d02b      	beq.n	800397e <HAL_ADC_ConfigChannel+0x396>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4958      	ldr	r1, [pc, #352]	@ (8003a8c <HAL_ADC_ConfigChannel+0x4a4>)
 800392c:	428b      	cmp	r3, r1
 800392e:	d024      	beq.n	800397a <HAL_ADC_ConfigChannel+0x392>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4956      	ldr	r1, [pc, #344]	@ (8003a90 <HAL_ADC_ConfigChannel+0x4a8>)
 8003936:	428b      	cmp	r3, r1
 8003938:	d01d      	beq.n	8003976 <HAL_ADC_ConfigChannel+0x38e>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4955      	ldr	r1, [pc, #340]	@ (8003a94 <HAL_ADC_ConfigChannel+0x4ac>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d016      	beq.n	8003972 <HAL_ADC_ConfigChannel+0x38a>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4953      	ldr	r1, [pc, #332]	@ (8003a98 <HAL_ADC_ConfigChannel+0x4b0>)
 800394a:	428b      	cmp	r3, r1
 800394c:	d00f      	beq.n	800396e <HAL_ADC_ConfigChannel+0x386>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4952      	ldr	r1, [pc, #328]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4b4>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d008      	beq.n	800396a <HAL_ADC_ConfigChannel+0x382>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4951      	ldr	r1, [pc, #324]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x4bc>)
 800395e:	428b      	cmp	r3, r1
 8003960:	d101      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x37e>
 8003962:	4b51      	ldr	r3, [pc, #324]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x4c0>)
 8003964:	e012      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 8003966:	2300      	movs	r3, #0
 8003968:	e010      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 800396a:	4b51      	ldr	r3, [pc, #324]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x4c8>)
 800396c:	e00e      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 800396e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a9c <HAL_ADC_ConfigChannel+0x4b4>)
 8003970:	e00c      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 8003972:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <HAL_ADC_ConfigChannel+0x4b0>)
 8003974:	e00a      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 8003976:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab4 <HAL_ADC_ConfigChannel+0x4cc>)
 8003978:	e008      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 800397a:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab8 <HAL_ADC_ConfigChannel+0x4d0>)
 800397c:	e006      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 800397e:	4b4f      	ldr	r3, [pc, #316]	@ (8003abc <HAL_ADC_ConfigChannel+0x4d4>)
 8003980:	e004      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 8003982:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x4d8>)
 8003984:	e002      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_ADC_ConfigChannel+0x3a4>
 800398a:	2300      	movs	r3, #0
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7ff f9ca 	bl	8002d28 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f280 80fc 	bge.w	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a36      	ldr	r2, [pc, #216]	@ (8003a7c <HAL_ADC_ConfigChannel+0x494>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d004      	beq.n	80039b2 <HAL_ADC_ConfigChannel+0x3ca>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a45      	ldr	r2, [pc, #276]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4dc>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x3ce>
 80039b2:	4b45      	ldr	r3, [pc, #276]	@ (8003ac8 <HAL_ADC_ConfigChannel+0x4e0>)
 80039b4:	e000      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x3d0>
 80039b6:	4b45      	ldr	r3, [pc, #276]	@ (8003acc <HAL_ADC_ConfigChannel+0x4e4>)
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff f9a7 	bl	8002d0c <LL_ADC_GetCommonPathInternalCh>
 80039be:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a7c <HAL_ADC_ConfigChannel+0x494>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_ADC_ConfigChannel+0x3ec>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4dc>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d10e      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x40a>
 80039d4:	4829      	ldr	r0, [pc, #164]	@ (8003a7c <HAL_ADC_ConfigChannel+0x494>)
 80039d6:	f7ff fb3f 	bl	8003058 <LL_ADC_IsEnabled>
 80039da:	4604      	mov	r4, r0
 80039dc:	4839      	ldr	r0, [pc, #228]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4dc>)
 80039de:	f7ff fb3b 	bl	8003058 <LL_ADC_IsEnabled>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4323      	orrs	r3, r4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf0c      	ite	eq
 80039ea:	2301      	moveq	r3, #1
 80039ec:	2300      	movne	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	e008      	b.n	8003a04 <HAL_ADC_ConfigChannel+0x41c>
 80039f2:	4837      	ldr	r0, [pc, #220]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4e8>)
 80039f4:	f7ff fb30 	bl	8003058 <LL_ADC_IsEnabled>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80b3 	beq.w	8003b70 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a31      	ldr	r2, [pc, #196]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x4ec>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d165      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x4f8>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d160      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4e8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	f040 80b6 	bne.w	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	@ (8003a7c <HAL_ADC_ConfigChannel+0x494>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x456>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a22      	ldr	r2, [pc, #136]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x45a>
 8003a3e:	4a22      	ldr	r2, [pc, #136]	@ (8003ac8 <HAL_ADC_ConfigChannel+0x4e0>)
 8003a40:	e000      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x45c>
 8003a42:	4a22      	ldr	r2, [pc, #136]	@ (8003acc <HAL_ADC_ConfigChannel+0x4e4>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	f7ff f94a 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a52:	4b21      	ldr	r3, [pc, #132]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x4f0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	099b      	lsrs	r3, r3, #6
 8003a58:	4a20      	ldr	r2, [pc, #128]	@ (8003adc <HAL_ADC_ConfigChannel+0x4f4>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	099b      	lsrs	r3, r3, #6
 8003a60:	3301      	adds	r3, #1
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a66:	e002      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f9      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a74:	e08f      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
 8003a76:	bf00      	nop
 8003a78:	47ff0000 	.word	0x47ff0000
 8003a7c:	40022000 	.word	0x40022000
 8003a80:	04300002 	.word	0x04300002
 8003a84:	08600004 	.word	0x08600004
 8003a88:	0c900008 	.word	0x0c900008
 8003a8c:	10c00010 	.word	0x10c00010
 8003a90:	14f00020 	.word	0x14f00020
 8003a94:	2a000400 	.word	0x2a000400
 8003a98:	2e300800 	.word	0x2e300800
 8003a9c:	32601000 	.word	0x32601000
 8003aa0:	43210000 	.word	0x43210000
 8003aa4:	4b840000 	.word	0x4b840000
 8003aa8:	4fb80000 	.word	0x4fb80000
 8003aac:	47520000 	.word	0x47520000
 8003ab0:	36902000 	.word	0x36902000
 8003ab4:	25b00200 	.word	0x25b00200
 8003ab8:	21800100 	.word	0x21800100
 8003abc:	1d500080 	.word	0x1d500080
 8003ac0:	19200040 	.word	0x19200040
 8003ac4:	40022100 	.word	0x40022100
 8003ac8:	40022300 	.word	0x40022300
 8003acc:	58026300 	.word	0x58026300
 8003ad0:	58026000 	.word	0x58026000
 8003ad4:	cb840000 	.word	0xcb840000
 8003ad8:	2400022c 	.word	0x2400022c
 8003adc:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a31      	ldr	r2, [pc, #196]	@ (8003bac <HAL_ADC_ConfigChannel+0x5c4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d11e      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x540>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d119      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x5c8>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d14b      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x5cc>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d004      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x52a>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d101      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x52e>
 8003b12:	4a2a      	ldr	r2, [pc, #168]	@ (8003bbc <HAL_ADC_ConfigChannel+0x5d4>)
 8003b14:	e000      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x530>
 8003b16:	4a2a      	ldr	r2, [pc, #168]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x5d8>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f7ff f8e0 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b26:	e036      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a25      	ldr	r2, [pc, #148]	@ (8003bc4 <HAL_ADC_ConfigChannel+0x5dc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d131      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d12c      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x5c8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d127      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x5cc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_ADC_ConfigChannel+0x572>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a18      	ldr	r2, [pc, #96]	@ (8003bb8 <HAL_ADC_ConfigChannel+0x5d0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d101      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x576>
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_ADC_ConfigChannel+0x5d4>)
 8003b5c:	e000      	b.n	8003b60 <HAL_ADC_ConfigChannel+0x578>
 8003b5e:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <HAL_ADC_ConfigChannel+0x5d8>)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003b66:	4619      	mov	r1, r3
 8003b68:	4610      	mov	r0, r2
 8003b6a:	f7ff f8bc 	bl	8002ce6 <LL_ADC_SetCommonPathInternalCh>
 8003b6e:	e012      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003b82:	e008      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3734      	adds	r7, #52	@ 0x34
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd90      	pop	{r4, r7, pc}
 8003baa:	bf00      	nop
 8003bac:	c7520000 	.word	0xc7520000
 8003bb0:	58026000 	.word	0x58026000
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40022100 	.word	0x40022100
 8003bbc:	40022300 	.word	0x40022300
 8003bc0:	58026300 	.word	0x58026300
 8003bc4:	cfb80000 	.word	0xcfb80000

08003bc8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fa3f 	bl	8003058 <LL_ADC_IsEnabled>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d16e      	bne.n	8003cbe <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	4b38      	ldr	r3, [pc, #224]	@ (8003cc8 <ADC_Enable+0x100>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf2:	f043 0210 	orr.w	r2, r3, #16
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfe:	f043 0201 	orr.w	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e05a      	b.n	8003cc0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7ff fa0e 	bl	8003030 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003c14:	f7ff f818 	bl	8002c48 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ccc <ADC_Enable+0x104>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <ADC_Enable+0x66>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a29      	ldr	r2, [pc, #164]	@ (8003cd0 <ADC_Enable+0x108>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d101      	bne.n	8003c32 <ADC_Enable+0x6a>
 8003c2e:	4b29      	ldr	r3, [pc, #164]	@ (8003cd4 <ADC_Enable+0x10c>)
 8003c30:	e000      	b.n	8003c34 <ADC_Enable+0x6c>
 8003c32:	4b29      	ldr	r3, [pc, #164]	@ (8003cd8 <ADC_Enable+0x110>)
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff f99f 	bl	8002f78 <LL_ADC_GetMultimode>
 8003c3a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a23      	ldr	r2, [pc, #140]	@ (8003cd0 <ADC_Enable+0x108>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d002      	beq.n	8003c4c <ADC_Enable+0x84>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	e000      	b.n	8003c4e <ADC_Enable+0x86>
 8003c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ccc <ADC_Enable+0x104>)
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02c      	beq.n	8003cb0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d130      	bne.n	8003cbe <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c5c:	e028      	b.n	8003cb0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff f9f8 	bl	8003058 <LL_ADC_IsEnabled>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d104      	bne.n	8003c78 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff f9dc 	bl	8003030 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c78:	f7fe ffe6 	bl	8002c48 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d914      	bls.n	8003cb0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d00d      	beq.n	8003cb0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c98:	f043 0210 	orr.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca4:	f043 0201 	orr.w	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d1cf      	bne.n	8003c5e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	8000003f 	.word	0x8000003f
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	40022100 	.word	0x40022100
 8003cd4:	40022300 	.word	0x40022300
 8003cd8:	58026300 	.word	0x58026300

08003cdc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14b      	bne.n	8003d8e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cfa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d021      	beq.n	8003d54 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff f88e 	bl	8002e36 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d032      	beq.n	8003d86 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d12b      	bne.n	8003d86 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d11f      	bne.n	8003d86 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	f043 0201 	orr.w	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
 8003d52:	e018      	b.n	8003d86 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d111      	bne.n	8003d86 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7fd fc2e 	bl	80015e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d8c:	e00e      	b.n	8003dac <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff fc1a 	bl	80035d4 <HAL_ADC_ErrorCallback>
}
 8003da0:	e004      	b.n	8003dac <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	4798      	blx	r3
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fbfc 	bl	80035c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dee:	f043 0204 	orr.w	r2, r3, #4
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f7ff fbec 	bl	80035d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a7a      	ldr	r2, [pc, #488]	@ (8003ffc <ADC_ConfigureBoostMode+0x1f8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <ADC_ConfigureBoostMode+0x1c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a79      	ldr	r2, [pc, #484]	@ (8004000 <ADC_ConfigureBoostMode+0x1fc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d109      	bne.n	8003e34 <ADC_ConfigureBoostMode+0x30>
 8003e20:	4b78      	ldr	r3, [pc, #480]	@ (8004004 <ADC_ConfigureBoostMode+0x200>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e008      	b.n	8003e46 <ADC_ConfigureBoostMode+0x42>
 8003e34:	4b74      	ldr	r3, [pc, #464]	@ (8004008 <ADC_ConfigureBoostMode+0x204>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01c      	beq.n	8003e84 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e4a:	f00a fd09 	bl	800e860 <HAL_RCC_GetHCLKFreq>
 8003e4e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e58:	d010      	beq.n	8003e7c <ADC_ConfigureBoostMode+0x78>
 8003e5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e5e:	d873      	bhi.n	8003f48 <ADC_ConfigureBoostMode+0x144>
 8003e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e64:	d002      	beq.n	8003e6c <ADC_ConfigureBoostMode+0x68>
 8003e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e6a:	d16d      	bne.n	8003f48 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	60fb      	str	r3, [r7, #12]
        break;
 8003e7a:	e068      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	60fb      	str	r3, [r7, #12]
        break;
 8003e82:	e064      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e84:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e88:	f04f 0100 	mov.w	r1, #0
 8003e8c:	f00b ff4e 	bl	800fd2c <HAL_RCCEx_GetPeriphCLKFreq>
 8003e90:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003e9a:	d051      	beq.n	8003f40 <ADC_ConfigureBoostMode+0x13c>
 8003e9c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ea0:	d854      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003ea2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003ea6:	d047      	beq.n	8003f38 <ADC_ConfigureBoostMode+0x134>
 8003ea8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003eac:	d84e      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003eae:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003eb2:	d03d      	beq.n	8003f30 <ADC_ConfigureBoostMode+0x12c>
 8003eb4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003eb8:	d848      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003eba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ebe:	d033      	beq.n	8003f28 <ADC_ConfigureBoostMode+0x124>
 8003ec0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ec4:	d842      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003ec6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003eca:	d029      	beq.n	8003f20 <ADC_ConfigureBoostMode+0x11c>
 8003ecc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003ed0:	d83c      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003ed2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003ed6:	d01a      	beq.n	8003f0e <ADC_ConfigureBoostMode+0x10a>
 8003ed8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003edc:	d836      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003ede:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ee2:	d014      	beq.n	8003f0e <ADC_ConfigureBoostMode+0x10a>
 8003ee4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003ee8:	d830      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eee:	d00e      	beq.n	8003f0e <ADC_ConfigureBoostMode+0x10a>
 8003ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ef4:	d82a      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003ef6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003efa:	d008      	beq.n	8003f0e <ADC_ConfigureBoostMode+0x10a>
 8003efc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003f00:	d824      	bhi.n	8003f4c <ADC_ConfigureBoostMode+0x148>
 8003f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f06:	d002      	beq.n	8003f0e <ADC_ConfigureBoostMode+0x10a>
 8003f08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f0c:	d11e      	bne.n	8003f4c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0c9b      	lsrs	r3, r3, #18
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
        break;
 8003f1e:	e016      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	60fb      	str	r3, [r7, #12]
        break;
 8003f26:	e012      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	60fb      	str	r3, [r7, #12]
        break;
 8003f2e:	e00e      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	099b      	lsrs	r3, r3, #6
 8003f34:	60fb      	str	r3, [r7, #12]
        break;
 8003f36:	e00a      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	09db      	lsrs	r3, r3, #7
 8003f3c:	60fb      	str	r3, [r7, #12]
        break;
 8003f3e:	e006      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	60fb      	str	r3, [r7, #12]
        break;
 8003f46:	e002      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e000      	b.n	8003f4e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f4c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f4e:	f7fe feab 	bl	8002ca8 <HAL_GetREVID>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d815      	bhi.n	8003f88 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a2b      	ldr	r2, [pc, #172]	@ (800400c <ADC_ConfigureBoostMode+0x208>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d908      	bls.n	8003f76 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f74:	e03e      	b.n	8003ff4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f84:	609a      	str	r2, [r3, #8]
}
 8003f86:	e035      	b.n	8003ff4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a1f      	ldr	r2, [pc, #124]	@ (8004010 <ADC_ConfigureBoostMode+0x20c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d808      	bhi.n	8003fa8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003fa4:	609a      	str	r2, [r3, #8]
}
 8003fa6:	e025      	b.n	8003ff4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4a1a      	ldr	r2, [pc, #104]	@ (8004014 <ADC_ConfigureBoostMode+0x210>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d80a      	bhi.n	8003fc6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	e016      	b.n	8003ff4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	4a13      	ldr	r2, [pc, #76]	@ (8004018 <ADC_ConfigureBoostMode+0x214>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d80a      	bhi.n	8003fe4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe0:	609a      	str	r2, [r3, #8]
}
 8003fe2:	e007      	b.n	8003ff4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689a      	ldr	r2, [r3, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40022000 	.word	0x40022000
 8004000:	40022100 	.word	0x40022100
 8004004:	40022300 	.word	0x40022300
 8004008:	58026300 	.word	0x58026300
 800400c:	01312d00 	.word	0x01312d00
 8004010:	005f5e10 	.word	0x005f5e10
 8004014:	00bebc20 	.word	0x00bebc20
 8004018:	017d7840 	.word	0x017d7840

0800401c <LL_ADC_IsEnabled>:
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <LL_ADC_IsEnabled+0x18>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <LL_ADC_IsEnabled+0x1a>
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_ADC_REG_IsConversionOngoing>:
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0304 	and.w	r3, r3, #4
 8004052:	2b04      	cmp	r3, #4
 8004054:	d101      	bne.n	800405a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004068:	b590      	push	{r4, r7, lr}
 800406a:	b09f      	sub	sp, #124	@ 0x7c
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004082:	2302      	movs	r3, #2
 8004084:	e0be      	b.n	8004204 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800408e:	2300      	movs	r3, #0
 8004090:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004092:	2300      	movs	r3, #0
 8004094:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5c      	ldr	r2, [pc, #368]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d102      	bne.n	80040a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80040a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	e001      	b.n	80040aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b4:	f043 0220 	orr.w	r2, r3, #32
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e09d      	b.n	8004204 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7ff ffb9 	bl	8004042 <LL_ADC_REG_IsConversionOngoing>
 80040d0:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ffb3 	bl	8004042 <LL_ADC_REG_IsConversionOngoing>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d17f      	bne.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d17c      	bne.n	80041e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a47      	ldr	r2, [pc, #284]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a46      	ldr	r2, [pc, #280]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80040fc:	4b45      	ldr	r3, [pc, #276]	@ (8004214 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040fe:	e000      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004100:	4b45      	ldr	r3, [pc, #276]	@ (8004218 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004102:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d039      	beq.n	8004180 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800410c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	431a      	orrs	r2, r3
 800411a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800411c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3a      	ldr	r2, [pc, #232]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d004      	beq.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a38      	ldr	r2, [pc, #224]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d10e      	bne.n	8004150 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004132:	4836      	ldr	r0, [pc, #216]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004134:	f7ff ff72 	bl	800401c <LL_ADC_IsEnabled>
 8004138:	4604      	mov	r4, r0
 800413a:	4835      	ldr	r0, [pc, #212]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800413c:	f7ff ff6e 	bl	800401c <LL_ADC_IsEnabled>
 8004140:	4603      	mov	r3, r0
 8004142:	4323      	orrs	r3, r4
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e008      	b.n	8004162 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004150:	4832      	ldr	r0, [pc, #200]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004152:	f7ff ff63 	bl	800401c <LL_ADC_IsEnabled>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d047      	beq.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800416c:	4013      	ands	r3, r2
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	6811      	ldr	r1, [r2, #0]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	6892      	ldr	r2, [r2, #8]
 8004176:	430a      	orrs	r2, r1
 8004178:	431a      	orrs	r2, r3
 800417a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800417e:	e03a      	b.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800418a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1e      	ldr	r2, [pc, #120]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d10e      	bne.n	80041be <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80041a0:	481a      	ldr	r0, [pc, #104]	@ (800420c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80041a2:	f7ff ff3b 	bl	800401c <LL_ADC_IsEnabled>
 80041a6:	4604      	mov	r4, r0
 80041a8:	4819      	ldr	r0, [pc, #100]	@ (8004210 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80041aa:	f7ff ff37 	bl	800401c <LL_ADC_IsEnabled>
 80041ae:	4603      	mov	r3, r0
 80041b0:	4323      	orrs	r3, r4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf0c      	ite	eq
 80041b6:	2301      	moveq	r3, #1
 80041b8:	2300      	movne	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	e008      	b.n	80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041be:	4817      	ldr	r0, [pc, #92]	@ (800421c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80041c0:	f7ff ff2c 	bl	800401c <LL_ADC_IsEnabled>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80041da:	4013      	ands	r3, r2
 80041dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041e0:	e009      	b.n	80041f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	f043 0220 	orr.w	r2, r3, #32
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80041f4:	e000      	b.n	80041f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004200:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004204:	4618      	mov	r0, r3
 8004206:	377c      	adds	r7, #124	@ 0x7c
 8004208:	46bd      	mov	sp, r7
 800420a:	bd90      	pop	{r4, r7, pc}
 800420c:	40022000 	.word	0x40022000
 8004210:	40022100 	.word	0x40022100
 8004214:	40022300 	.word	0x40022300
 8004218:	58026300 	.word	0x58026300
 800421c:	58026000 	.word	0x58026000
 8004220:	fffff0e0 	.word	0xfffff0e0

08004224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004234:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <__NVIC_SetPriorityGrouping+0x40>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004240:	4013      	ands	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <__NVIC_SetPriorityGrouping+0x44>)
 800424e:	4313      	orrs	r3, r2
 8004250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004252:	4a04      	ldr	r2, [pc, #16]	@ (8004264 <__NVIC_SetPriorityGrouping+0x40>)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	60d3      	str	r3, [r2, #12]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00
 8004268:	05fa0000 	.word	0x05fa0000

0800426c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004270:	4b04      	ldr	r3, [pc, #16]	@ (8004284 <__NVIC_GetPriorityGrouping+0x18>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	0a1b      	lsrs	r3, r3, #8
 8004276:	f003 0307 	and.w	r3, r3, #7
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	db0b      	blt.n	80042b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	4907      	ldr	r1, [pc, #28]	@ (80042c0 <__NVIC_EnableIRQ+0x38>)
 80042a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	2001      	movs	r0, #1
 80042aa:	fa00 f202 	lsl.w	r2, r0, r2
 80042ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	e000e100 	.word	0xe000e100

080042c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	4603      	mov	r3, r0
 80042cc:	6039      	str	r1, [r7, #0]
 80042ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	db0a      	blt.n	80042ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	490c      	ldr	r1, [pc, #48]	@ (8004310 <__NVIC_SetPriority+0x4c>)
 80042de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042e2:	0112      	lsls	r2, r2, #4
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	440b      	add	r3, r1
 80042e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042ec:	e00a      	b.n	8004304 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	4908      	ldr	r1, [pc, #32]	@ (8004314 <__NVIC_SetPriority+0x50>)
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	3b04      	subs	r3, #4
 80042fc:	0112      	lsls	r2, r2, #4
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	440b      	add	r3, r1
 8004302:	761a      	strb	r2, [r3, #24]
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000e100 	.word	0xe000e100
 8004314:	e000ed00 	.word	0xe000ed00

08004318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004318:	b480      	push	{r7}
 800431a:	b089      	sub	sp, #36	@ 0x24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f1c3 0307 	rsb	r3, r3, #7
 8004332:	2b04      	cmp	r3, #4
 8004334:	bf28      	it	cs
 8004336:	2304      	movcs	r3, #4
 8004338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	3304      	adds	r3, #4
 800433e:	2b06      	cmp	r3, #6
 8004340:	d902      	bls.n	8004348 <NVIC_EncodePriority+0x30>
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3b03      	subs	r3, #3
 8004346:	e000      	b.n	800434a <NVIC_EncodePriority+0x32>
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800434c:	f04f 32ff 	mov.w	r2, #4294967295
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	43da      	mvns	r2, r3
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	401a      	ands	r2, r3
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004360:	f04f 31ff 	mov.w	r1, #4294967295
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	43d9      	mvns	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004370:	4313      	orrs	r3, r2
         );
}
 8004372:	4618      	mov	r0, r3
 8004374:	3724      	adds	r7, #36	@ 0x24
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3b01      	subs	r3, #1
 800438c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004390:	d301      	bcc.n	8004396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004392:	2301      	movs	r3, #1
 8004394:	e00f      	b.n	80043b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004396:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <SysTick_Config+0x40>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3b01      	subs	r3, #1
 800439c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800439e:	210f      	movs	r1, #15
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	f7ff ff8e 	bl	80042c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <SysTick_Config+0x40>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ae:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <SysTick_Config+0x40>)
 80043b0:	2207      	movs	r2, #7
 80043b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	e000e010 	.word	0xe000e010

080043c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff29 	bl	8004224 <__NVIC_SetPriorityGrouping>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4603      	mov	r3, r0
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043e8:	f7ff ff40 	bl	800426c <__NVIC_GetPriorityGrouping>
 80043ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	6978      	ldr	r0, [r7, #20]
 80043f4:	f7ff ff90 	bl	8004318 <NVIC_EncodePriority>
 80043f8:	4602      	mov	r2, r0
 80043fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff5f 	bl	80042c4 <__NVIC_SetPriority>
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	4603      	mov	r3, r0
 8004416:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff33 	bl	8004288 <__NVIC_EnableIRQ>
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b082      	sub	sp, #8
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7ff ffa4 	bl	8004380 <SysTick_Config>
 8004438:	4603      	mov	r3, r0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004448:	f3bf 8f5f 	dmb	sy
}
 800444c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800444e:	4b07      	ldr	r3, [pc, #28]	@ (800446c <HAL_MPU_Disable+0x28>)
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	4a06      	ldr	r2, [pc, #24]	@ (800446c <HAL_MPU_Disable+0x28>)
 8004454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004458:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800445a:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <HAL_MPU_Disable+0x2c>)
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
}
 8004460:	bf00      	nop
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	e000ed00 	.word	0xe000ed00
 8004470:	e000ed90 	.word	0xe000ed90

08004474 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800447c:	4a0b      	ldr	r2, [pc, #44]	@ (80044ac <HAL_MPU_Enable+0x38>)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004486:	4b0a      	ldr	r3, [pc, #40]	@ (80044b0 <HAL_MPU_Enable+0x3c>)
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_MPU_Enable+0x3c>)
 800448c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004490:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004492:	f3bf 8f4f 	dsb	sy
}
 8004496:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004498:	f3bf 8f6f 	isb	sy
}
 800449c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	e000ed90 	.word	0xe000ed90
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	785a      	ldrb	r2, [r3, #1]
 80044c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_MPU_ConfigRegion+0x7c>)
 80044c2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80044c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004530 <HAL_MPU_ConfigRegion+0x7c>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	4a19      	ldr	r2, [pc, #100]	@ (8004530 <HAL_MPU_ConfigRegion+0x7c>)
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80044d0:	4a17      	ldr	r2, [pc, #92]	@ (8004530 <HAL_MPU_ConfigRegion+0x7c>)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7b1b      	ldrb	r3, [r3, #12]
 80044dc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7adb      	ldrb	r3, [r3, #11]
 80044e2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80044e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	7a9b      	ldrb	r3, [r3, #10]
 80044ea:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80044ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	7b5b      	ldrb	r3, [r3, #13]
 80044f2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80044f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	7b9b      	ldrb	r3, [r3, #14]
 80044fa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80044fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7bdb      	ldrb	r3, [r3, #15]
 8004502:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	7a5b      	ldrb	r3, [r3, #9]
 800450a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800450c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	7a1b      	ldrb	r3, [r3, #8]
 8004512:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004514:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800451c:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800451e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004520:	6113      	str	r3, [r2, #16]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	e000ed90 	.word	0xe000ed90

08004534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800453c:	f7fe fb84 	bl	8002c48 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e316      	b.n	8004b7a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a66      	ldr	r2, [pc, #408]	@ (80046ec <HAL_DMA_Init+0x1b8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d04a      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a65      	ldr	r2, [pc, #404]	@ (80046f0 <HAL_DMA_Init+0x1bc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d045      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a63      	ldr	r2, [pc, #396]	@ (80046f4 <HAL_DMA_Init+0x1c0>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d040      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a62      	ldr	r2, [pc, #392]	@ (80046f8 <HAL_DMA_Init+0x1c4>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d03b      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a60      	ldr	r2, [pc, #384]	@ (80046fc <HAL_DMA_Init+0x1c8>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d036      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a5f      	ldr	r2, [pc, #380]	@ (8004700 <HAL_DMA_Init+0x1cc>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d031      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a5d      	ldr	r2, [pc, #372]	@ (8004704 <HAL_DMA_Init+0x1d0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d02c      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a5c      	ldr	r2, [pc, #368]	@ (8004708 <HAL_DMA_Init+0x1d4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d027      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5a      	ldr	r2, [pc, #360]	@ (800470c <HAL_DMA_Init+0x1d8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d022      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a59      	ldr	r2, [pc, #356]	@ (8004710 <HAL_DMA_Init+0x1dc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d01d      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a57      	ldr	r2, [pc, #348]	@ (8004714 <HAL_DMA_Init+0x1e0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d018      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a56      	ldr	r2, [pc, #344]	@ (8004718 <HAL_DMA_Init+0x1e4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d013      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a54      	ldr	r2, [pc, #336]	@ (800471c <HAL_DMA_Init+0x1e8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d00e      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a53      	ldr	r2, [pc, #332]	@ (8004720 <HAL_DMA_Init+0x1ec>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a51      	ldr	r2, [pc, #324]	@ (8004724 <HAL_DMA_Init+0x1f0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <HAL_DMA_Init+0xb8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a50      	ldr	r2, [pc, #320]	@ (8004728 <HAL_DMA_Init+0x1f4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d101      	bne.n	80045f0 <HAL_DMA_Init+0xbc>
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <HAL_DMA_Init+0xbe>
 80045f0:	2300      	movs	r3, #0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 813b 	beq.w	800486e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a37      	ldr	r2, [pc, #220]	@ (80046ec <HAL_DMA_Init+0x1b8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d04a      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a36      	ldr	r2, [pc, #216]	@ (80046f0 <HAL_DMA_Init+0x1bc>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d045      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a34      	ldr	r2, [pc, #208]	@ (80046f4 <HAL_DMA_Init+0x1c0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d040      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a33      	ldr	r2, [pc, #204]	@ (80046f8 <HAL_DMA_Init+0x1c4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d03b      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a31      	ldr	r2, [pc, #196]	@ (80046fc <HAL_DMA_Init+0x1c8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d036      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a30      	ldr	r2, [pc, #192]	@ (8004700 <HAL_DMA_Init+0x1cc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d031      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a2e      	ldr	r2, [pc, #184]	@ (8004704 <HAL_DMA_Init+0x1d0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02c      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a2d      	ldr	r2, [pc, #180]	@ (8004708 <HAL_DMA_Init+0x1d4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d027      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2b      	ldr	r2, [pc, #172]	@ (800470c <HAL_DMA_Init+0x1d8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2a      	ldr	r2, [pc, #168]	@ (8004710 <HAL_DMA_Init+0x1dc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d01d      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a28      	ldr	r2, [pc, #160]	@ (8004714 <HAL_DMA_Init+0x1e0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d018      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a27      	ldr	r2, [pc, #156]	@ (8004718 <HAL_DMA_Init+0x1e4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d013      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a25      	ldr	r2, [pc, #148]	@ (800471c <HAL_DMA_Init+0x1e8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00e      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a24      	ldr	r2, [pc, #144]	@ (8004720 <HAL_DMA_Init+0x1ec>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d009      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <HAL_DMA_Init+0x1f0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d004      	beq.n	80046a8 <HAL_DMA_Init+0x174>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a21      	ldr	r2, [pc, #132]	@ (8004728 <HAL_DMA_Init+0x1f4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d108      	bne.n	80046ba <HAL_DMA_Init+0x186>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e007      	b.n	80046ca <HAL_DMA_Init+0x196>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046ca:	e02f      	b.n	800472c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046cc:	f7fe fabc 	bl	8002c48 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b05      	cmp	r3, #5
 80046d8:	d928      	bls.n	800472c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2203      	movs	r2, #3
 80046e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e246      	b.n	8004b7a <HAL_DMA_Init+0x646>
 80046ec:	40020010 	.word	0x40020010
 80046f0:	40020028 	.word	0x40020028
 80046f4:	40020040 	.word	0x40020040
 80046f8:	40020058 	.word	0x40020058
 80046fc:	40020070 	.word	0x40020070
 8004700:	40020088 	.word	0x40020088
 8004704:	400200a0 	.word	0x400200a0
 8004708:	400200b8 	.word	0x400200b8
 800470c:	40020410 	.word	0x40020410
 8004710:	40020428 	.word	0x40020428
 8004714:	40020440 	.word	0x40020440
 8004718:	40020458 	.word	0x40020458
 800471c:	40020470 	.word	0x40020470
 8004720:	40020488 	.word	0x40020488
 8004724:	400204a0 	.word	0x400204a0
 8004728:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1c8      	bne.n	80046cc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4b83      	ldr	r3, [pc, #524]	@ (8004954 <HAL_DMA_Init+0x420>)
 8004746:	4013      	ands	r3, r2
 8004748:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004752:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	2b04      	cmp	r3, #4
 800477e:	d107      	bne.n	8004790 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004788:	4313      	orrs	r3, r2
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004790:	4b71      	ldr	r3, [pc, #452]	@ (8004958 <HAL_DMA_Init+0x424>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b71      	ldr	r3, [pc, #452]	@ (800495c <HAL_DMA_Init+0x428>)
 8004796:	4013      	ands	r3, r2
 8004798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800479c:	d328      	bcc.n	80047f0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b28      	cmp	r3, #40	@ 0x28
 80047a4:	d903      	bls.n	80047ae <HAL_DMA_Init+0x27a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80047ac:	d917      	bls.n	80047de <HAL_DMA_Init+0x2aa>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80047b4:	d903      	bls.n	80047be <HAL_DMA_Init+0x28a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b42      	cmp	r3, #66	@ 0x42
 80047bc:	d90f      	bls.n	80047de <HAL_DMA_Init+0x2aa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b46      	cmp	r3, #70	@ 0x46
 80047c4:	d903      	bls.n	80047ce <HAL_DMA_Init+0x29a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b48      	cmp	r3, #72	@ 0x48
 80047cc:	d907      	bls.n	80047de <HAL_DMA_Init+0x2aa>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80047d4:	d905      	bls.n	80047e2 <HAL_DMA_Init+0x2ae>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b52      	cmp	r3, #82	@ 0x52
 80047dc:	d801      	bhi.n	80047e2 <HAL_DMA_Init+0x2ae>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_DMA_Init+0x2b0>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ee:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0307 	bic.w	r3, r3, #7
 8004806:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	2b04      	cmp	r3, #4
 8004818:	d117      	bne.n	800484a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00e      	beq.n	800484a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f002 fb4d 	bl	8006ecc <DMA_CheckFifoParam>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2240      	movs	r2, #64	@ 0x40
 800483c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e197      	b.n	8004b7a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f002 fa88 	bl	8006d68 <DMA_CalcBaseAndBitshift>
 8004858:	4603      	mov	r3, r0
 800485a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	223f      	movs	r2, #63	@ 0x3f
 8004866:	409a      	lsls	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	e0cd      	b.n	8004a0a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a3b      	ldr	r2, [pc, #236]	@ (8004960 <HAL_DMA_Init+0x42c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d022      	beq.n	80048be <HAL_DMA_Init+0x38a>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a39      	ldr	r2, [pc, #228]	@ (8004964 <HAL_DMA_Init+0x430>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d01d      	beq.n	80048be <HAL_DMA_Init+0x38a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a38      	ldr	r2, [pc, #224]	@ (8004968 <HAL_DMA_Init+0x434>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <HAL_DMA_Init+0x38a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a36      	ldr	r2, [pc, #216]	@ (800496c <HAL_DMA_Init+0x438>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d013      	beq.n	80048be <HAL_DMA_Init+0x38a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a35      	ldr	r2, [pc, #212]	@ (8004970 <HAL_DMA_Init+0x43c>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_DMA_Init+0x38a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a33      	ldr	r2, [pc, #204]	@ (8004974 <HAL_DMA_Init+0x440>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d009      	beq.n	80048be <HAL_DMA_Init+0x38a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a32      	ldr	r2, [pc, #200]	@ (8004978 <HAL_DMA_Init+0x444>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_DMA_Init+0x38a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a30      	ldr	r2, [pc, #192]	@ (800497c <HAL_DMA_Init+0x448>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d101      	bne.n	80048c2 <HAL_DMA_Init+0x38e>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <HAL_DMA_Init+0x390>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 8097 	beq.w	80049f8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <HAL_DMA_Init+0x42c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d021      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <HAL_DMA_Init+0x430>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01c      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <HAL_DMA_Init+0x434>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d017      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1f      	ldr	r2, [pc, #124]	@ (800496c <HAL_DMA_Init+0x438>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d012      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004970 <HAL_DMA_Init+0x43c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00d      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1c      	ldr	r2, [pc, #112]	@ (8004974 <HAL_DMA_Init+0x440>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d008      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1b      	ldr	r2, [pc, #108]	@ (8004978 <HAL_DMA_Init+0x444>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <HAL_DMA_Init+0x3e4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <HAL_DMA_Init+0x448>)
 8004916:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <HAL_DMA_Init+0x44c>)
 8004934:	4013      	ands	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b40      	cmp	r3, #64	@ 0x40
 800493e:	d021      	beq.n	8004984 <HAL_DMA_Init+0x450>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b80      	cmp	r3, #128	@ 0x80
 8004946:	d102      	bne.n	800494e <HAL_DMA_Init+0x41a>
 8004948:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800494c:	e01b      	b.n	8004986 <HAL_DMA_Init+0x452>
 800494e:	2300      	movs	r3, #0
 8004950:	e019      	b.n	8004986 <HAL_DMA_Init+0x452>
 8004952:	bf00      	nop
 8004954:	fe10803f 	.word	0xfe10803f
 8004958:	5c001000 	.word	0x5c001000
 800495c:	ffff0000 	.word	0xffff0000
 8004960:	58025408 	.word	0x58025408
 8004964:	5802541c 	.word	0x5802541c
 8004968:	58025430 	.word	0x58025430
 800496c:	58025444 	.word	0x58025444
 8004970:	58025458 	.word	0x58025458
 8004974:	5802546c 	.word	0x5802546c
 8004978:	58025480 	.word	0x58025480
 800497c:	58025494 	.word	0x58025494
 8004980:	fffe000f 	.word	0xfffe000f
 8004984:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	68d2      	ldr	r2, [r2, #12]
 800498a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800498c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004994:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800499c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80049a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80049ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80049b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b6e      	ldr	r3, [pc, #440]	@ (8004b84 <HAL_DMA_Init+0x650>)
 80049cc:	4413      	add	r3, r2
 80049ce:	4a6e      	ldr	r2, [pc, #440]	@ (8004b88 <HAL_DMA_Init+0x654>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	091b      	lsrs	r3, r3, #4
 80049d6:	009a      	lsls	r2, r3, #2
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f002 f9c3 	bl	8006d68 <DMA_CalcBaseAndBitshift>
 80049e2:	4603      	mov	r3, r0
 80049e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	f003 031f 	and.w	r3, r3, #31
 80049ee:	2201      	movs	r2, #1
 80049f0:	409a      	lsls	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	e008      	b.n	8004a0a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2240      	movs	r2, #64	@ 0x40
 80049fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2203      	movs	r2, #3
 8004a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e0b7      	b.n	8004b7a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8004b8c <HAL_DMA_Init+0x658>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d072      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a5d      	ldr	r2, [pc, #372]	@ (8004b90 <HAL_DMA_Init+0x65c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d06d      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a5c      	ldr	r2, [pc, #368]	@ (8004b94 <HAL_DMA_Init+0x660>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d068      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8004b98 <HAL_DMA_Init+0x664>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d063      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a59      	ldr	r2, [pc, #356]	@ (8004b9c <HAL_DMA_Init+0x668>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d05e      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a57      	ldr	r2, [pc, #348]	@ (8004ba0 <HAL_DMA_Init+0x66c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d059      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a56      	ldr	r2, [pc, #344]	@ (8004ba4 <HAL_DMA_Init+0x670>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d054      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a54      	ldr	r2, [pc, #336]	@ (8004ba8 <HAL_DMA_Init+0x674>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04f      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a53      	ldr	r2, [pc, #332]	@ (8004bac <HAL_DMA_Init+0x678>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d04a      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a51      	ldr	r2, [pc, #324]	@ (8004bb0 <HAL_DMA_Init+0x67c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d045      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a50      	ldr	r2, [pc, #320]	@ (8004bb4 <HAL_DMA_Init+0x680>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d040      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8004bb8 <HAL_DMA_Init+0x684>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d03b      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a4d      	ldr	r2, [pc, #308]	@ (8004bbc <HAL_DMA_Init+0x688>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d036      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc0 <HAL_DMA_Init+0x68c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d031      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a4a      	ldr	r2, [pc, #296]	@ (8004bc4 <HAL_DMA_Init+0x690>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d02c      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a48      	ldr	r2, [pc, #288]	@ (8004bc8 <HAL_DMA_Init+0x694>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d027      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a47      	ldr	r2, [pc, #284]	@ (8004bcc <HAL_DMA_Init+0x698>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d022      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a45      	ldr	r2, [pc, #276]	@ (8004bd0 <HAL_DMA_Init+0x69c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01d      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a44      	ldr	r2, [pc, #272]	@ (8004bd4 <HAL_DMA_Init+0x6a0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d018      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a42      	ldr	r2, [pc, #264]	@ (8004bd8 <HAL_DMA_Init+0x6a4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a41      	ldr	r2, [pc, #260]	@ (8004bdc <HAL_DMA_Init+0x6a8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00e      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a3f      	ldr	r2, [pc, #252]	@ (8004be0 <HAL_DMA_Init+0x6ac>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a3e      	ldr	r2, [pc, #248]	@ (8004be4 <HAL_DMA_Init+0x6b0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_DMA_Init+0x5c6>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a3c      	ldr	r2, [pc, #240]	@ (8004be8 <HAL_DMA_Init+0x6b4>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d101      	bne.n	8004afe <HAL_DMA_Init+0x5ca>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <HAL_DMA_Init+0x5cc>
 8004afe:	2300      	movs	r3, #0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d032      	beq.n	8004b6a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f002 fa5d 	bl	8006fc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b80      	cmp	r3, #128	@ 0x80
 8004b10:	d102      	bne.n	8004b18 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b20:	b2d2      	uxtb	r2, r2
 8004b22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d010      	beq.n	8004b58 <HAL_DMA_Init+0x624>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d80c      	bhi.n	8004b58 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f002 fada 	bl	80070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	e008      	b.n	8004b6a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	a7fdabf8 	.word	0xa7fdabf8
 8004b88:	cccccccd 	.word	0xcccccccd
 8004b8c:	40020010 	.word	0x40020010
 8004b90:	40020028 	.word	0x40020028
 8004b94:	40020040 	.word	0x40020040
 8004b98:	40020058 	.word	0x40020058
 8004b9c:	40020070 	.word	0x40020070
 8004ba0:	40020088 	.word	0x40020088
 8004ba4:	400200a0 	.word	0x400200a0
 8004ba8:	400200b8 	.word	0x400200b8
 8004bac:	40020410 	.word	0x40020410
 8004bb0:	40020428 	.word	0x40020428
 8004bb4:	40020440 	.word	0x40020440
 8004bb8:	40020458 	.word	0x40020458
 8004bbc:	40020470 	.word	0x40020470
 8004bc0:	40020488 	.word	0x40020488
 8004bc4:	400204a0 	.word	0x400204a0
 8004bc8:	400204b8 	.word	0x400204b8
 8004bcc:	58025408 	.word	0x58025408
 8004bd0:	5802541c 	.word	0x5802541c
 8004bd4:	58025430 	.word	0x58025430
 8004bd8:	58025444 	.word	0x58025444
 8004bdc:	58025458 	.word	0x58025458
 8004be0:	5802546c 	.word	0x5802546c
 8004be4:	58025480 	.word	0x58025480
 8004be8:	58025494 	.word	0x58025494

08004bec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e226      	b.n	8005056 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_DMA_Start_IT+0x2a>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e21f      	b.n	8005056 <HAL_DMA_Start_IT+0x46a>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	f040 820a 	bne.w	8005040 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a68      	ldr	r2, [pc, #416]	@ (8004de0 <HAL_DMA_Start_IT+0x1f4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d04a      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a66      	ldr	r2, [pc, #408]	@ (8004de4 <HAL_DMA_Start_IT+0x1f8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d045      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a65      	ldr	r2, [pc, #404]	@ (8004de8 <HAL_DMA_Start_IT+0x1fc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d040      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a63      	ldr	r2, [pc, #396]	@ (8004dec <HAL_DMA_Start_IT+0x200>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d03b      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a62      	ldr	r2, [pc, #392]	@ (8004df0 <HAL_DMA_Start_IT+0x204>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d036      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a60      	ldr	r2, [pc, #384]	@ (8004df4 <HAL_DMA_Start_IT+0x208>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a5f      	ldr	r2, [pc, #380]	@ (8004df8 <HAL_DMA_Start_IT+0x20c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d02c      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a5d      	ldr	r2, [pc, #372]	@ (8004dfc <HAL_DMA_Start_IT+0x210>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d027      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a5c      	ldr	r2, [pc, #368]	@ (8004e00 <HAL_DMA_Start_IT+0x214>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d022      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a5a      	ldr	r2, [pc, #360]	@ (8004e04 <HAL_DMA_Start_IT+0x218>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d01d      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a59      	ldr	r2, [pc, #356]	@ (8004e08 <HAL_DMA_Start_IT+0x21c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d018      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a57      	ldr	r2, [pc, #348]	@ (8004e0c <HAL_DMA_Start_IT+0x220>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d013      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a56      	ldr	r2, [pc, #344]	@ (8004e10 <HAL_DMA_Start_IT+0x224>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00e      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a54      	ldr	r2, [pc, #336]	@ (8004e14 <HAL_DMA_Start_IT+0x228>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a53      	ldr	r2, [pc, #332]	@ (8004e18 <HAL_DMA_Start_IT+0x22c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d004      	beq.n	8004cda <HAL_DMA_Start_IT+0xee>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a51      	ldr	r2, [pc, #324]	@ (8004e1c <HAL_DMA_Start_IT+0x230>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d108      	bne.n	8004cec <HAL_DMA_Start_IT+0x100>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0201 	bic.w	r2, r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e007      	b.n	8004cfc <HAL_DMA_Start_IT+0x110>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f001 fe84 	bl	8006a10 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a34      	ldr	r2, [pc, #208]	@ (8004de0 <HAL_DMA_Start_IT+0x1f4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d04a      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a33      	ldr	r2, [pc, #204]	@ (8004de4 <HAL_DMA_Start_IT+0x1f8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d045      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a31      	ldr	r2, [pc, #196]	@ (8004de8 <HAL_DMA_Start_IT+0x1fc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d040      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a30      	ldr	r2, [pc, #192]	@ (8004dec <HAL_DMA_Start_IT+0x200>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d03b      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a2e      	ldr	r2, [pc, #184]	@ (8004df0 <HAL_DMA_Start_IT+0x204>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d036      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <HAL_DMA_Start_IT+0x208>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d031      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <HAL_DMA_Start_IT+0x20c>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d02c      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a2a      	ldr	r2, [pc, #168]	@ (8004dfc <HAL_DMA_Start_IT+0x210>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d027      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a28      	ldr	r2, [pc, #160]	@ (8004e00 <HAL_DMA_Start_IT+0x214>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d022      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a27      	ldr	r2, [pc, #156]	@ (8004e04 <HAL_DMA_Start_IT+0x218>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d01d      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a25      	ldr	r2, [pc, #148]	@ (8004e08 <HAL_DMA_Start_IT+0x21c>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d018      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a24      	ldr	r2, [pc, #144]	@ (8004e0c <HAL_DMA_Start_IT+0x220>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d013      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a22      	ldr	r2, [pc, #136]	@ (8004e10 <HAL_DMA_Start_IT+0x224>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a21      	ldr	r2, [pc, #132]	@ (8004e14 <HAL_DMA_Start_IT+0x228>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1f      	ldr	r2, [pc, #124]	@ (8004e18 <HAL_DMA_Start_IT+0x22c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_DMA_Start_IT+0x1bc>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e1c <HAL_DMA_Start_IT+0x230>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d101      	bne.n	8004dac <HAL_DMA_Start_IT+0x1c0>
 8004da8:	2301      	movs	r3, #1
 8004daa:	e000      	b.n	8004dae <HAL_DMA_Start_IT+0x1c2>
 8004dac:	2300      	movs	r3, #0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d036      	beq.n	8004e20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 021e 	bic.w	r2, r3, #30
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f042 0216 	orr.w	r2, r2, #22
 8004dc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d03e      	beq.n	8004e4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0208 	orr.w	r2, r2, #8
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e035      	b.n	8004e4c <HAL_DMA_Start_IT+0x260>
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020088 	.word	0x40020088
 8004df8:	400200a0 	.word	0x400200a0
 8004dfc:	400200b8 	.word	0x400200b8
 8004e00:	40020410 	.word	0x40020410
 8004e04:	40020428 	.word	0x40020428
 8004e08:	40020440 	.word	0x40020440
 8004e0c:	40020458 	.word	0x40020458
 8004e10:	40020470 	.word	0x40020470
 8004e14:	40020488 	.word	0x40020488
 8004e18:	400204a0 	.word	0x400204a0
 8004e1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 020e 	bic.w	r2, r3, #14
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 020a 	orr.w	r2, r2, #10
 8004e32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0204 	orr.w	r2, r2, #4
 8004e4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a83      	ldr	r2, [pc, #524]	@ (8005060 <HAL_DMA_Start_IT+0x474>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d072      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a82      	ldr	r2, [pc, #520]	@ (8005064 <HAL_DMA_Start_IT+0x478>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d06d      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a80      	ldr	r2, [pc, #512]	@ (8005068 <HAL_DMA_Start_IT+0x47c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d068      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7f      	ldr	r2, [pc, #508]	@ (800506c <HAL_DMA_Start_IT+0x480>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d063      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a7d      	ldr	r2, [pc, #500]	@ (8005070 <HAL_DMA_Start_IT+0x484>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d05e      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a7c      	ldr	r2, [pc, #496]	@ (8005074 <HAL_DMA_Start_IT+0x488>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d059      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a7a      	ldr	r2, [pc, #488]	@ (8005078 <HAL_DMA_Start_IT+0x48c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d054      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a79      	ldr	r2, [pc, #484]	@ (800507c <HAL_DMA_Start_IT+0x490>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d04f      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a77      	ldr	r2, [pc, #476]	@ (8005080 <HAL_DMA_Start_IT+0x494>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d04a      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a76      	ldr	r2, [pc, #472]	@ (8005084 <HAL_DMA_Start_IT+0x498>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d045      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a74      	ldr	r2, [pc, #464]	@ (8005088 <HAL_DMA_Start_IT+0x49c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d040      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a73      	ldr	r2, [pc, #460]	@ (800508c <HAL_DMA_Start_IT+0x4a0>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d03b      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a71      	ldr	r2, [pc, #452]	@ (8005090 <HAL_DMA_Start_IT+0x4a4>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d036      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a70      	ldr	r2, [pc, #448]	@ (8005094 <HAL_DMA_Start_IT+0x4a8>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d031      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a6e      	ldr	r2, [pc, #440]	@ (8005098 <HAL_DMA_Start_IT+0x4ac>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02c      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a6d      	ldr	r2, [pc, #436]	@ (800509c <HAL_DMA_Start_IT+0x4b0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d027      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80050a0 <HAL_DMA_Start_IT+0x4b4>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a6a      	ldr	r2, [pc, #424]	@ (80050a4 <HAL_DMA_Start_IT+0x4b8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01d      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a68      	ldr	r2, [pc, #416]	@ (80050a8 <HAL_DMA_Start_IT+0x4bc>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a67      	ldr	r2, [pc, #412]	@ (80050ac <HAL_DMA_Start_IT+0x4c0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a65      	ldr	r2, [pc, #404]	@ (80050b0 <HAL_DMA_Start_IT+0x4c4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a64      	ldr	r2, [pc, #400]	@ (80050b4 <HAL_DMA_Start_IT+0x4c8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a62      	ldr	r2, [pc, #392]	@ (80050b8 <HAL_DMA_Start_IT+0x4cc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_DMA_Start_IT+0x350>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a61      	ldr	r2, [pc, #388]	@ (80050bc <HAL_DMA_Start_IT+0x4d0>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <HAL_DMA_Start_IT+0x354>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_DMA_Start_IT+0x356>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01a      	beq.n	8004f7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a37      	ldr	r2, [pc, #220]	@ (8005060 <HAL_DMA_Start_IT+0x474>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d04a      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a36      	ldr	r2, [pc, #216]	@ (8005064 <HAL_DMA_Start_IT+0x478>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d045      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a34      	ldr	r2, [pc, #208]	@ (8005068 <HAL_DMA_Start_IT+0x47c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d040      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a33      	ldr	r2, [pc, #204]	@ (800506c <HAL_DMA_Start_IT+0x480>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d03b      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a31      	ldr	r2, [pc, #196]	@ (8005070 <HAL_DMA_Start_IT+0x484>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d036      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a30      	ldr	r2, [pc, #192]	@ (8005074 <HAL_DMA_Start_IT+0x488>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d031      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2e      	ldr	r2, [pc, #184]	@ (8005078 <HAL_DMA_Start_IT+0x48c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02c      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800507c <HAL_DMA_Start_IT+0x490>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d027      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a2b      	ldr	r2, [pc, #172]	@ (8005080 <HAL_DMA_Start_IT+0x494>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a2a      	ldr	r2, [pc, #168]	@ (8005084 <HAL_DMA_Start_IT+0x498>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01d      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a28      	ldr	r2, [pc, #160]	@ (8005088 <HAL_DMA_Start_IT+0x49c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a27      	ldr	r2, [pc, #156]	@ (800508c <HAL_DMA_Start_IT+0x4a0>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a25      	ldr	r2, [pc, #148]	@ (8005090 <HAL_DMA_Start_IT+0x4a4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a24      	ldr	r2, [pc, #144]	@ (8005094 <HAL_DMA_Start_IT+0x4a8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a22      	ldr	r2, [pc, #136]	@ (8005098 <HAL_DMA_Start_IT+0x4ac>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_DMA_Start_IT+0x430>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	@ (800509c <HAL_DMA_Start_IT+0x4b0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <HAL_DMA_Start_IT+0x442>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e012      	b.n	8005054 <HAL_DMA_Start_IT+0x468>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e009      	b.n	8005054 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005046:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005054:	7dfb      	ldrb	r3, [r7, #23]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40020010 	.word	0x40020010
 8005064:	40020028 	.word	0x40020028
 8005068:	40020040 	.word	0x40020040
 800506c:	40020058 	.word	0x40020058
 8005070:	40020070 	.word	0x40020070
 8005074:	40020088 	.word	0x40020088
 8005078:	400200a0 	.word	0x400200a0
 800507c:	400200b8 	.word	0x400200b8
 8005080:	40020410 	.word	0x40020410
 8005084:	40020428 	.word	0x40020428
 8005088:	40020440 	.word	0x40020440
 800508c:	40020458 	.word	0x40020458
 8005090:	40020470 	.word	0x40020470
 8005094:	40020488 	.word	0x40020488
 8005098:	400204a0 	.word	0x400204a0
 800509c:	400204b8 	.word	0x400204b8
 80050a0:	58025408 	.word	0x58025408
 80050a4:	5802541c 	.word	0x5802541c
 80050a8:	58025430 	.word	0x58025430
 80050ac:	58025444 	.word	0x58025444
 80050b0:	58025458 	.word	0x58025458
 80050b4:	5802546c 	.word	0x5802546c
 80050b8:	58025480 	.word	0x58025480
 80050bc:	58025494 	.word	0x58025494

080050c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80050c8:	f7fd fdbe 	bl	8002c48 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e2dc      	b.n	8005692 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d008      	beq.n	80050f6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2280      	movs	r2, #128	@ 0x80
 80050e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e2cd      	b.n	8005692 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a76      	ldr	r2, [pc, #472]	@ (80052d4 <HAL_DMA_Abort+0x214>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d04a      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a74      	ldr	r2, [pc, #464]	@ (80052d8 <HAL_DMA_Abort+0x218>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d045      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a73      	ldr	r2, [pc, #460]	@ (80052dc <HAL_DMA_Abort+0x21c>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d040      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a71      	ldr	r2, [pc, #452]	@ (80052e0 <HAL_DMA_Abort+0x220>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d03b      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a70      	ldr	r2, [pc, #448]	@ (80052e4 <HAL_DMA_Abort+0x224>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d036      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a6e      	ldr	r2, [pc, #440]	@ (80052e8 <HAL_DMA_Abort+0x228>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d031      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a6d      	ldr	r2, [pc, #436]	@ (80052ec <HAL_DMA_Abort+0x22c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d02c      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a6b      	ldr	r2, [pc, #428]	@ (80052f0 <HAL_DMA_Abort+0x230>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d027      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a6a      	ldr	r2, [pc, #424]	@ (80052f4 <HAL_DMA_Abort+0x234>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d022      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a68      	ldr	r2, [pc, #416]	@ (80052f8 <HAL_DMA_Abort+0x238>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01d      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a67      	ldr	r2, [pc, #412]	@ (80052fc <HAL_DMA_Abort+0x23c>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d018      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a65      	ldr	r2, [pc, #404]	@ (8005300 <HAL_DMA_Abort+0x240>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a64      	ldr	r2, [pc, #400]	@ (8005304 <HAL_DMA_Abort+0x244>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a62      	ldr	r2, [pc, #392]	@ (8005308 <HAL_DMA_Abort+0x248>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a61      	ldr	r2, [pc, #388]	@ (800530c <HAL_DMA_Abort+0x24c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_DMA_Abort+0xd6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a5f      	ldr	r2, [pc, #380]	@ (8005310 <HAL_DMA_Abort+0x250>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d101      	bne.n	800519a <HAL_DMA_Abort+0xda>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <HAL_DMA_Abort+0xdc>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d013      	beq.n	80051c8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 021e 	bic.w	r2, r2, #30
 80051ae:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051be:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e00a      	b.n	80051de <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 020e 	bic.w	r2, r2, #14
 80051d6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a3c      	ldr	r2, [pc, #240]	@ (80052d4 <HAL_DMA_Abort+0x214>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d072      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a3a      	ldr	r2, [pc, #232]	@ (80052d8 <HAL_DMA_Abort+0x218>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d06d      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a39      	ldr	r2, [pc, #228]	@ (80052dc <HAL_DMA_Abort+0x21c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d068      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a37      	ldr	r2, [pc, #220]	@ (80052e0 <HAL_DMA_Abort+0x220>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d063      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a36      	ldr	r2, [pc, #216]	@ (80052e4 <HAL_DMA_Abort+0x224>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d05e      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a34      	ldr	r2, [pc, #208]	@ (80052e8 <HAL_DMA_Abort+0x228>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d059      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a33      	ldr	r2, [pc, #204]	@ (80052ec <HAL_DMA_Abort+0x22c>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d054      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a31      	ldr	r2, [pc, #196]	@ (80052f0 <HAL_DMA_Abort+0x230>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04f      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a30      	ldr	r2, [pc, #192]	@ (80052f4 <HAL_DMA_Abort+0x234>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d04a      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a2e      	ldr	r2, [pc, #184]	@ (80052f8 <HAL_DMA_Abort+0x238>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d045      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a2d      	ldr	r2, [pc, #180]	@ (80052fc <HAL_DMA_Abort+0x23c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d040      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2b      	ldr	r2, [pc, #172]	@ (8005300 <HAL_DMA_Abort+0x240>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d03b      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a2a      	ldr	r2, [pc, #168]	@ (8005304 <HAL_DMA_Abort+0x244>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d036      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a28      	ldr	r2, [pc, #160]	@ (8005308 <HAL_DMA_Abort+0x248>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d031      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a27      	ldr	r2, [pc, #156]	@ (800530c <HAL_DMA_Abort+0x24c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d02c      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a25      	ldr	r2, [pc, #148]	@ (8005310 <HAL_DMA_Abort+0x250>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d027      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a24      	ldr	r2, [pc, #144]	@ (8005314 <HAL_DMA_Abort+0x254>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d022      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a22      	ldr	r2, [pc, #136]	@ (8005318 <HAL_DMA_Abort+0x258>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a21      	ldr	r2, [pc, #132]	@ (800531c <HAL_DMA_Abort+0x25c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d018      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005320 <HAL_DMA_Abort+0x260>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005324 <HAL_DMA_Abort+0x264>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <HAL_DMA_Abort+0x268>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <HAL_DMA_Abort+0x26c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_DMA_Abort+0x20e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a19      	ldr	r2, [pc, #100]	@ (8005330 <HAL_DMA_Abort+0x270>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d132      	bne.n	8005334 <HAL_DMA_Abort+0x274>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e031      	b.n	8005336 <HAL_DMA_Abort+0x276>
 80052d2:	bf00      	nop
 80052d4:	40020010 	.word	0x40020010
 80052d8:	40020028 	.word	0x40020028
 80052dc:	40020040 	.word	0x40020040
 80052e0:	40020058 	.word	0x40020058
 80052e4:	40020070 	.word	0x40020070
 80052e8:	40020088 	.word	0x40020088
 80052ec:	400200a0 	.word	0x400200a0
 80052f0:	400200b8 	.word	0x400200b8
 80052f4:	40020410 	.word	0x40020410
 80052f8:	40020428 	.word	0x40020428
 80052fc:	40020440 	.word	0x40020440
 8005300:	40020458 	.word	0x40020458
 8005304:	40020470 	.word	0x40020470
 8005308:	40020488 	.word	0x40020488
 800530c:	400204a0 	.word	0x400204a0
 8005310:	400204b8 	.word	0x400204b8
 8005314:	58025408 	.word	0x58025408
 8005318:	5802541c 	.word	0x5802541c
 800531c:	58025430 	.word	0x58025430
 8005320:	58025444 	.word	0x58025444
 8005324:	58025458 	.word	0x58025458
 8005328:	5802546c 	.word	0x5802546c
 800532c:	58025480 	.word	0x58025480
 8005330:	58025494 	.word	0x58025494
 8005334:	2300      	movs	r3, #0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005344:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005348:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6d      	ldr	r2, [pc, #436]	@ (8005504 <HAL_DMA_Abort+0x444>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d04a      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a6b      	ldr	r2, [pc, #428]	@ (8005508 <HAL_DMA_Abort+0x448>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d045      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a6a      	ldr	r2, [pc, #424]	@ (800550c <HAL_DMA_Abort+0x44c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d040      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a68      	ldr	r2, [pc, #416]	@ (8005510 <HAL_DMA_Abort+0x450>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d03b      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a67      	ldr	r2, [pc, #412]	@ (8005514 <HAL_DMA_Abort+0x454>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d036      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a65      	ldr	r2, [pc, #404]	@ (8005518 <HAL_DMA_Abort+0x458>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d031      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a64      	ldr	r2, [pc, #400]	@ (800551c <HAL_DMA_Abort+0x45c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d02c      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a62      	ldr	r2, [pc, #392]	@ (8005520 <HAL_DMA_Abort+0x460>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d027      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a61      	ldr	r2, [pc, #388]	@ (8005524 <HAL_DMA_Abort+0x464>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005528 <HAL_DMA_Abort+0x468>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d01d      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a5e      	ldr	r2, [pc, #376]	@ (800552c <HAL_DMA_Abort+0x46c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a5c      	ldr	r2, [pc, #368]	@ (8005530 <HAL_DMA_Abort+0x470>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005534 <HAL_DMA_Abort+0x474>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a59      	ldr	r2, [pc, #356]	@ (8005538 <HAL_DMA_Abort+0x478>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a58      	ldr	r2, [pc, #352]	@ (800553c <HAL_DMA_Abort+0x47c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_DMA_Abort+0x32a>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a56      	ldr	r2, [pc, #344]	@ (8005540 <HAL_DMA_Abort+0x480>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d108      	bne.n	80053fc <HAL_DMA_Abort+0x33c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0201 	bic.w	r2, r2, #1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	e007      	b.n	800540c <HAL_DMA_Abort+0x34c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0201 	bic.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800540c:	e013      	b.n	8005436 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800540e:	f7fd fc1b 	bl	8002c48 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b05      	cmp	r3, #5
 800541a:	d90c      	bls.n	8005436 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2203      	movs	r2, #3
 8005426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e12d      	b.n	8005692 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e5      	bne.n	800540e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <HAL_DMA_Abort+0x444>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d04a      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a2d      	ldr	r2, [pc, #180]	@ (8005508 <HAL_DMA_Abort+0x448>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d045      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a2c      	ldr	r2, [pc, #176]	@ (800550c <HAL_DMA_Abort+0x44c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d040      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a2a      	ldr	r2, [pc, #168]	@ (8005510 <HAL_DMA_Abort+0x450>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d03b      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a29      	ldr	r2, [pc, #164]	@ (8005514 <HAL_DMA_Abort+0x454>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d036      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a27      	ldr	r2, [pc, #156]	@ (8005518 <HAL_DMA_Abort+0x458>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d031      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a26      	ldr	r2, [pc, #152]	@ (800551c <HAL_DMA_Abort+0x45c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d02c      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a24      	ldr	r2, [pc, #144]	@ (8005520 <HAL_DMA_Abort+0x460>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d027      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a23      	ldr	r2, [pc, #140]	@ (8005524 <HAL_DMA_Abort+0x464>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a21      	ldr	r2, [pc, #132]	@ (8005528 <HAL_DMA_Abort+0x468>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01d      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a20      	ldr	r2, [pc, #128]	@ (800552c <HAL_DMA_Abort+0x46c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d018      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005530 <HAL_DMA_Abort+0x470>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a1d      	ldr	r2, [pc, #116]	@ (8005534 <HAL_DMA_Abort+0x474>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00e      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005538 <HAL_DMA_Abort+0x478>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d009      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1a      	ldr	r2, [pc, #104]	@ (800553c <HAL_DMA_Abort+0x47c>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d004      	beq.n	80054e2 <HAL_DMA_Abort+0x422>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <HAL_DMA_Abort+0x480>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d101      	bne.n	80054e6 <HAL_DMA_Abort+0x426>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <HAL_DMA_Abort+0x428>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02b      	beq.n	8005544 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	223f      	movs	r2, #63	@ 0x3f
 80054fc:	409a      	lsls	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	609a      	str	r2, [r3, #8]
 8005502:	e02a      	b.n	800555a <HAL_DMA_Abort+0x49a>
 8005504:	40020010 	.word	0x40020010
 8005508:	40020028 	.word	0x40020028
 800550c:	40020040 	.word	0x40020040
 8005510:	40020058 	.word	0x40020058
 8005514:	40020070 	.word	0x40020070
 8005518:	40020088 	.word	0x40020088
 800551c:	400200a0 	.word	0x400200a0
 8005520:	400200b8 	.word	0x400200b8
 8005524:	40020410 	.word	0x40020410
 8005528:	40020428 	.word	0x40020428
 800552c:	40020440 	.word	0x40020440
 8005530:	40020458 	.word	0x40020458
 8005534:	40020470 	.word	0x40020470
 8005538:	40020488 	.word	0x40020488
 800553c:	400204a0 	.word	0x400204a0
 8005540:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	2201      	movs	r2, #1
 8005554:	409a      	lsls	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a4f      	ldr	r2, [pc, #316]	@ (800569c <HAL_DMA_Abort+0x5dc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d072      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a4d      	ldr	r2, [pc, #308]	@ (80056a0 <HAL_DMA_Abort+0x5e0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d06d      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4c      	ldr	r2, [pc, #304]	@ (80056a4 <HAL_DMA_Abort+0x5e4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d068      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a4a      	ldr	r2, [pc, #296]	@ (80056a8 <HAL_DMA_Abort+0x5e8>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d063      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a49      	ldr	r2, [pc, #292]	@ (80056ac <HAL_DMA_Abort+0x5ec>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d05e      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a47      	ldr	r2, [pc, #284]	@ (80056b0 <HAL_DMA_Abort+0x5f0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d059      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a46      	ldr	r2, [pc, #280]	@ (80056b4 <HAL_DMA_Abort+0x5f4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d054      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a44      	ldr	r2, [pc, #272]	@ (80056b8 <HAL_DMA_Abort+0x5f8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d04f      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a43      	ldr	r2, [pc, #268]	@ (80056bc <HAL_DMA_Abort+0x5fc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a41      	ldr	r2, [pc, #260]	@ (80056c0 <HAL_DMA_Abort+0x600>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a40      	ldr	r2, [pc, #256]	@ (80056c4 <HAL_DMA_Abort+0x604>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a3e      	ldr	r2, [pc, #248]	@ (80056c8 <HAL_DMA_Abort+0x608>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a3d      	ldr	r2, [pc, #244]	@ (80056cc <HAL_DMA_Abort+0x60c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <HAL_DMA_Abort+0x610>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a3a      	ldr	r2, [pc, #232]	@ (80056d4 <HAL_DMA_Abort+0x614>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a38      	ldr	r2, [pc, #224]	@ (80056d8 <HAL_DMA_Abort+0x618>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a37      	ldr	r2, [pc, #220]	@ (80056dc <HAL_DMA_Abort+0x61c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a35      	ldr	r2, [pc, #212]	@ (80056e0 <HAL_DMA_Abort+0x620>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a34      	ldr	r2, [pc, #208]	@ (80056e4 <HAL_DMA_Abort+0x624>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a32      	ldr	r2, [pc, #200]	@ (80056e8 <HAL_DMA_Abort+0x628>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a31      	ldr	r2, [pc, #196]	@ (80056ec <HAL_DMA_Abort+0x62c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2f      	ldr	r2, [pc, #188]	@ (80056f0 <HAL_DMA_Abort+0x630>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2e      	ldr	r2, [pc, #184]	@ (80056f4 <HAL_DMA_Abort+0x634>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_Abort+0x58a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2c      	ldr	r2, [pc, #176]	@ (80056f8 <HAL_DMA_Abort+0x638>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d101      	bne.n	800564e <HAL_DMA_Abort+0x58e>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_DMA_Abort+0x590>
 800564e:	2300      	movs	r3, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d015      	beq.n	8005680 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800565c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00c      	beq.n	8005680 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005674:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800567e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	40020010 	.word	0x40020010
 80056a0:	40020028 	.word	0x40020028
 80056a4:	40020040 	.word	0x40020040
 80056a8:	40020058 	.word	0x40020058
 80056ac:	40020070 	.word	0x40020070
 80056b0:	40020088 	.word	0x40020088
 80056b4:	400200a0 	.word	0x400200a0
 80056b8:	400200b8 	.word	0x400200b8
 80056bc:	40020410 	.word	0x40020410
 80056c0:	40020428 	.word	0x40020428
 80056c4:	40020440 	.word	0x40020440
 80056c8:	40020458 	.word	0x40020458
 80056cc:	40020470 	.word	0x40020470
 80056d0:	40020488 	.word	0x40020488
 80056d4:	400204a0 	.word	0x400204a0
 80056d8:	400204b8 	.word	0x400204b8
 80056dc:	58025408 	.word	0x58025408
 80056e0:	5802541c 	.word	0x5802541c
 80056e4:	58025430 	.word	0x58025430
 80056e8:	58025444 	.word	0x58025444
 80056ec:	58025458 	.word	0x58025458
 80056f0:	5802546c 	.word	0x5802546c
 80056f4:	58025480 	.word	0x58025480
 80056f8:	58025494 	.word	0x58025494

080056fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e237      	b.n	8005b7e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d004      	beq.n	8005724 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2280      	movs	r2, #128	@ 0x80
 800571e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e22c      	b.n	8005b7e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a5c      	ldr	r2, [pc, #368]	@ (800589c <HAL_DMA_Abort_IT+0x1a0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04a      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a5b      	ldr	r2, [pc, #364]	@ (80058a0 <HAL_DMA_Abort_IT+0x1a4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d045      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a59      	ldr	r2, [pc, #356]	@ (80058a4 <HAL_DMA_Abort_IT+0x1a8>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d040      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a58      	ldr	r2, [pc, #352]	@ (80058a8 <HAL_DMA_Abort_IT+0x1ac>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d03b      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a56      	ldr	r2, [pc, #344]	@ (80058ac <HAL_DMA_Abort_IT+0x1b0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d036      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a55      	ldr	r2, [pc, #340]	@ (80058b0 <HAL_DMA_Abort_IT+0x1b4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d031      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a53      	ldr	r2, [pc, #332]	@ (80058b4 <HAL_DMA_Abort_IT+0x1b8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d02c      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a52      	ldr	r2, [pc, #328]	@ (80058b8 <HAL_DMA_Abort_IT+0x1bc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d027      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a50      	ldr	r2, [pc, #320]	@ (80058bc <HAL_DMA_Abort_IT+0x1c0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d022      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a4f      	ldr	r2, [pc, #316]	@ (80058c0 <HAL_DMA_Abort_IT+0x1c4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d01d      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a4d      	ldr	r2, [pc, #308]	@ (80058c4 <HAL_DMA_Abort_IT+0x1c8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a4c      	ldr	r2, [pc, #304]	@ (80058c8 <HAL_DMA_Abort_IT+0x1cc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d013      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a4a      	ldr	r2, [pc, #296]	@ (80058cc <HAL_DMA_Abort_IT+0x1d0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a49      	ldr	r2, [pc, #292]	@ (80058d0 <HAL_DMA_Abort_IT+0x1d4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a47      	ldr	r2, [pc, #284]	@ (80058d4 <HAL_DMA_Abort_IT+0x1d8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_DMA_Abort_IT+0xc8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a46      	ldr	r2, [pc, #280]	@ (80058d8 <HAL_DMA_Abort_IT+0x1dc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_DMA_Abort_IT+0xcc>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_DMA_Abort_IT+0xce>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 8086 	beq.w	80058dc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2204      	movs	r2, #4
 80057d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2f      	ldr	r2, [pc, #188]	@ (800589c <HAL_DMA_Abort_IT+0x1a0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04a      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2e      	ldr	r2, [pc, #184]	@ (80058a0 <HAL_DMA_Abort_IT+0x1a4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d045      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <HAL_DMA_Abort_IT+0x1a8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d040      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2b      	ldr	r2, [pc, #172]	@ (80058a8 <HAL_DMA_Abort_IT+0x1ac>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d03b      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a29      	ldr	r2, [pc, #164]	@ (80058ac <HAL_DMA_Abort_IT+0x1b0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d036      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a28      	ldr	r2, [pc, #160]	@ (80058b0 <HAL_DMA_Abort_IT+0x1b4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d031      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a26      	ldr	r2, [pc, #152]	@ (80058b4 <HAL_DMA_Abort_IT+0x1b8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02c      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a25      	ldr	r2, [pc, #148]	@ (80058b8 <HAL_DMA_Abort_IT+0x1bc>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d027      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a23      	ldr	r2, [pc, #140]	@ (80058bc <HAL_DMA_Abort_IT+0x1c0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a22      	ldr	r2, [pc, #136]	@ (80058c0 <HAL_DMA_Abort_IT+0x1c4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d01d      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a20      	ldr	r2, [pc, #128]	@ (80058c4 <HAL_DMA_Abort_IT+0x1c8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1f      	ldr	r2, [pc, #124]	@ (80058c8 <HAL_DMA_Abort_IT+0x1cc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1d      	ldr	r2, [pc, #116]	@ (80058cc <HAL_DMA_Abort_IT+0x1d0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1c      	ldr	r2, [pc, #112]	@ (80058d0 <HAL_DMA_Abort_IT+0x1d4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1a      	ldr	r2, [pc, #104]	@ (80058d4 <HAL_DMA_Abort_IT+0x1d8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_DMA_Abort_IT+0x17c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a19      	ldr	r2, [pc, #100]	@ (80058d8 <HAL_DMA_Abort_IT+0x1dc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <HAL_DMA_Abort_IT+0x18e>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0201 	bic.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e178      	b.n	8005b7c <HAL_DMA_Abort_IT+0x480>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0201 	bic.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e16f      	b.n	8005b7c <HAL_DMA_Abort_IT+0x480>
 800589c:	40020010 	.word	0x40020010
 80058a0:	40020028 	.word	0x40020028
 80058a4:	40020040 	.word	0x40020040
 80058a8:	40020058 	.word	0x40020058
 80058ac:	40020070 	.word	0x40020070
 80058b0:	40020088 	.word	0x40020088
 80058b4:	400200a0 	.word	0x400200a0
 80058b8:	400200b8 	.word	0x400200b8
 80058bc:	40020410 	.word	0x40020410
 80058c0:	40020428 	.word	0x40020428
 80058c4:	40020440 	.word	0x40020440
 80058c8:	40020458 	.word	0x40020458
 80058cc:	40020470 	.word	0x40020470
 80058d0:	40020488 	.word	0x40020488
 80058d4:	400204a0 	.word	0x400204a0
 80058d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 020e 	bic.w	r2, r2, #14
 80058ea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a6c      	ldr	r2, [pc, #432]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3a8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d04a      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3ac>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d045      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a69      	ldr	r2, [pc, #420]	@ (8005aac <HAL_DMA_Abort_IT+0x3b0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d040      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a68      	ldr	r2, [pc, #416]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3b4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d03b      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a66      	ldr	r2, [pc, #408]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3b8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d036      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a65      	ldr	r2, [pc, #404]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3bc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d031      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a63      	ldr	r2, [pc, #396]	@ (8005abc <HAL_DMA_Abort_IT+0x3c0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d02c      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a62      	ldr	r2, [pc, #392]	@ (8005ac0 <HAL_DMA_Abort_IT+0x3c4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d027      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a60      	ldr	r2, [pc, #384]	@ (8005ac4 <HAL_DMA_Abort_IT+0x3c8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d022      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a5f      	ldr	r2, [pc, #380]	@ (8005ac8 <HAL_DMA_Abort_IT+0x3cc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d01d      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5d      	ldr	r2, [pc, #372]	@ (8005acc <HAL_DMA_Abort_IT+0x3d0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d018      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a5c      	ldr	r2, [pc, #368]	@ (8005ad0 <HAL_DMA_Abort_IT+0x3d4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d013      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a5a      	ldr	r2, [pc, #360]	@ (8005ad4 <HAL_DMA_Abort_IT+0x3d8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00e      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a59      	ldr	r2, [pc, #356]	@ (8005ad8 <HAL_DMA_Abort_IT+0x3dc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d009      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a57      	ldr	r2, [pc, #348]	@ (8005adc <HAL_DMA_Abort_IT+0x3e0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d004      	beq.n	800598c <HAL_DMA_Abort_IT+0x290>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a56      	ldr	r2, [pc, #344]	@ (8005ae0 <HAL_DMA_Abort_IT+0x3e4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d108      	bne.n	800599e <HAL_DMA_Abort_IT+0x2a2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0201 	bic.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	e007      	b.n	80059ae <HAL_DMA_Abort_IT+0x2b2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0201 	bic.w	r2, r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a3c      	ldr	r2, [pc, #240]	@ (8005aa4 <HAL_DMA_Abort_IT+0x3a8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d072      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3a      	ldr	r2, [pc, #232]	@ (8005aa8 <HAL_DMA_Abort_IT+0x3ac>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d06d      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a39      	ldr	r2, [pc, #228]	@ (8005aac <HAL_DMA_Abort_IT+0x3b0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d068      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a37      	ldr	r2, [pc, #220]	@ (8005ab0 <HAL_DMA_Abort_IT+0x3b4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d063      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a36      	ldr	r2, [pc, #216]	@ (8005ab4 <HAL_DMA_Abort_IT+0x3b8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d05e      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a34      	ldr	r2, [pc, #208]	@ (8005ab8 <HAL_DMA_Abort_IT+0x3bc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d059      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a33      	ldr	r2, [pc, #204]	@ (8005abc <HAL_DMA_Abort_IT+0x3c0>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d054      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a31      	ldr	r2, [pc, #196]	@ (8005ac0 <HAL_DMA_Abort_IT+0x3c4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d04f      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a30      	ldr	r2, [pc, #192]	@ (8005ac4 <HAL_DMA_Abort_IT+0x3c8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04a      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8005ac8 <HAL_DMA_Abort_IT+0x3cc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d045      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a2d      	ldr	r2, [pc, #180]	@ (8005acc <HAL_DMA_Abort_IT+0x3d0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a2b      	ldr	r2, [pc, #172]	@ (8005ad0 <HAL_DMA_Abort_IT+0x3d4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d03b      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad4 <HAL_DMA_Abort_IT+0x3d8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d036      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a28      	ldr	r2, [pc, #160]	@ (8005ad8 <HAL_DMA_Abort_IT+0x3dc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d031      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a27      	ldr	r2, [pc, #156]	@ (8005adc <HAL_DMA_Abort_IT+0x3e0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d02c      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a25      	ldr	r2, [pc, #148]	@ (8005ae0 <HAL_DMA_Abort_IT+0x3e4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d027      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a24      	ldr	r2, [pc, #144]	@ (8005ae4 <HAL_DMA_Abort_IT+0x3e8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d022      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a22      	ldr	r2, [pc, #136]	@ (8005ae8 <HAL_DMA_Abort_IT+0x3ec>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01d      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a21      	ldr	r2, [pc, #132]	@ (8005aec <HAL_DMA_Abort_IT+0x3f0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d018      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1f      	ldr	r2, [pc, #124]	@ (8005af0 <HAL_DMA_Abort_IT+0x3f4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8005af4 <HAL_DMA_Abort_IT+0x3f8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d00e      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a1c      	ldr	r2, [pc, #112]	@ (8005af8 <HAL_DMA_Abort_IT+0x3fc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d009      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8005afc <HAL_DMA_Abort_IT+0x400>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d004      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x3a2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a19      	ldr	r2, [pc, #100]	@ (8005b00 <HAL_DMA_Abort_IT+0x404>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d132      	bne.n	8005b04 <HAL_DMA_Abort_IT+0x408>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e031      	b.n	8005b06 <HAL_DMA_Abort_IT+0x40a>
 8005aa2:	bf00      	nop
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	40020070 	.word	0x40020070
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	400200a0 	.word	0x400200a0
 8005ac0:	400200b8 	.word	0x400200b8
 8005ac4:	40020410 	.word	0x40020410
 8005ac8:	40020428 	.word	0x40020428
 8005acc:	40020440 	.word	0x40020440
 8005ad0:	40020458 	.word	0x40020458
 8005ad4:	40020470 	.word	0x40020470
 8005ad8:	40020488 	.word	0x40020488
 8005adc:	400204a0 	.word	0x400204a0
 8005ae0:	400204b8 	.word	0x400204b8
 8005ae4:	58025408 	.word	0x58025408
 8005ae8:	5802541c 	.word	0x5802541c
 8005aec:	58025430 	.word	0x58025430
 8005af0:	58025444 	.word	0x58025444
 8005af4:	58025458 	.word	0x58025458
 8005af8:	5802546c 	.word	0x5802546c
 8005afc:	58025480 	.word	0x58025480
 8005b00:	58025494 	.word	0x58025494
 8005b04:	2300      	movs	r3, #0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d028      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b18:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	f003 031f 	and.w	r3, r3, #31
 8005b28:	2201      	movs	r2, #1
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005b38:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00c      	beq.n	8005b5c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005b50:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005b5a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop

08005b88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08a      	sub	sp, #40	@ 0x28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b94:	4b67      	ldr	r3, [pc, #412]	@ (8005d34 <HAL_DMA_IRQHandler+0x1ac>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a67      	ldr	r2, [pc, #412]	@ (8005d38 <HAL_DMA_IRQHandler+0x1b0>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8005d3c <HAL_DMA_IRQHandler+0x1b4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5d      	ldr	r2, [pc, #372]	@ (8005d40 <HAL_DMA_IRQHandler+0x1b8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8005d44 <HAL_DMA_IRQHandler+0x1bc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a5a      	ldr	r2, [pc, #360]	@ (8005d48 <HAL_DMA_IRQHandler+0x1c0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a59      	ldr	r2, [pc, #356]	@ (8005d4c <HAL_DMA_IRQHandler+0x1c4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a57      	ldr	r2, [pc, #348]	@ (8005d50 <HAL_DMA_IRQHandler+0x1c8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a56      	ldr	r2, [pc, #344]	@ (8005d54 <HAL_DMA_IRQHandler+0x1cc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a54      	ldr	r2, [pc, #336]	@ (8005d58 <HAL_DMA_IRQHandler+0x1d0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a53      	ldr	r2, [pc, #332]	@ (8005d5c <HAL_DMA_IRQHandler+0x1d4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a51      	ldr	r2, [pc, #324]	@ (8005d60 <HAL_DMA_IRQHandler+0x1d8>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a50      	ldr	r2, [pc, #320]	@ (8005d64 <HAL_DMA_IRQHandler+0x1dc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a4e      	ldr	r2, [pc, #312]	@ (8005d68 <HAL_DMA_IRQHandler+0x1e0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a4d      	ldr	r2, [pc, #308]	@ (8005d6c <HAL_DMA_IRQHandler+0x1e4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a4b      	ldr	r2, [pc, #300]	@ (8005d70 <HAL_DMA_IRQHandler+0x1e8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8005d74 <HAL_DMA_IRQHandler+0x1ec>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_DMA_IRQHandler+0xd2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a48      	ldr	r2, [pc, #288]	@ (8005d78 <HAL_DMA_IRQHandler+0x1f0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_DMA_IRQHandler+0xd6>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_DMA_IRQHandler+0xd8>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 842b 	beq.w	80064bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	2208      	movs	r2, #8
 8005c70:	409a      	lsls	r2, r3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4013      	ands	r3, r2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 80a2 	beq.w	8005dc0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2e      	ldr	r2, [pc, #184]	@ (8005d3c <HAL_DMA_IRQHandler+0x1b4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d04a      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d40 <HAL_DMA_IRQHandler+0x1b8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d045      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a2b      	ldr	r2, [pc, #172]	@ (8005d44 <HAL_DMA_IRQHandler+0x1bc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d040      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005d48 <HAL_DMA_IRQHandler+0x1c0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d03b      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a28      	ldr	r2, [pc, #160]	@ (8005d4c <HAL_DMA_IRQHandler+0x1c4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d036      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a27      	ldr	r2, [pc, #156]	@ (8005d50 <HAL_DMA_IRQHandler+0x1c8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d031      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a25      	ldr	r2, [pc, #148]	@ (8005d54 <HAL_DMA_IRQHandler+0x1cc>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02c      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a24      	ldr	r2, [pc, #144]	@ (8005d58 <HAL_DMA_IRQHandler+0x1d0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d027      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a22      	ldr	r2, [pc, #136]	@ (8005d5c <HAL_DMA_IRQHandler+0x1d4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a21      	ldr	r2, [pc, #132]	@ (8005d60 <HAL_DMA_IRQHandler+0x1d8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d01d      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8005d64 <HAL_DMA_IRQHandler+0x1dc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <HAL_DMA_IRQHandler+0x1e0>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d6c <HAL_DMA_IRQHandler+0x1e4>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1b      	ldr	r2, [pc, #108]	@ (8005d70 <HAL_DMA_IRQHandler+0x1e8>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	@ (8005d74 <HAL_DMA_IRQHandler+0x1ec>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x194>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a18      	ldr	r2, [pc, #96]	@ (8005d78 <HAL_DMA_IRQHandler+0x1f0>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d12f      	bne.n	8005d7c <HAL_DMA_IRQHandler+0x1f4>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bf14      	ite	ne
 8005d2a:	2301      	movne	r3, #1
 8005d2c:	2300      	moveq	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	e02e      	b.n	8005d90 <HAL_DMA_IRQHandler+0x208>
 8005d32:	bf00      	nop
 8005d34:	2400022c 	.word	0x2400022c
 8005d38:	1b4e81b5 	.word	0x1b4e81b5
 8005d3c:	40020010 	.word	0x40020010
 8005d40:	40020028 	.word	0x40020028
 8005d44:	40020040 	.word	0x40020040
 8005d48:	40020058 	.word	0x40020058
 8005d4c:	40020070 	.word	0x40020070
 8005d50:	40020088 	.word	0x40020088
 8005d54:	400200a0 	.word	0x400200a0
 8005d58:	400200b8 	.word	0x400200b8
 8005d5c:	40020410 	.word	0x40020410
 8005d60:	40020428 	.word	0x40020428
 8005d64:	40020440 	.word	0x40020440
 8005d68:	40020458 	.word	0x40020458
 8005d6c:	40020470 	.word	0x40020470
 8005d70:	40020488 	.word	0x40020488
 8005d74:	400204a0 	.word	0x400204a0
 8005d78:	400204b8 	.word	0x400204b8
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	bf14      	ite	ne
 8005d8a:	2301      	movne	r3, #1
 8005d8c:	2300      	moveq	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d015      	beq.n	8005dc0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0204 	bic.w	r2, r2, #4
 8005da2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2208      	movs	r2, #8
 8005dae:	409a      	lsls	r2, r3
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	f043 0201 	orr.w	r2, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d06e      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a69      	ldr	r2, [pc, #420]	@ (8005f80 <HAL_DMA_IRQHandler+0x3f8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d04a      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a67      	ldr	r2, [pc, #412]	@ (8005f84 <HAL_DMA_IRQHandler+0x3fc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d045      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a66      	ldr	r2, [pc, #408]	@ (8005f88 <HAL_DMA_IRQHandler+0x400>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d040      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a64      	ldr	r2, [pc, #400]	@ (8005f8c <HAL_DMA_IRQHandler+0x404>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d03b      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a63      	ldr	r2, [pc, #396]	@ (8005f90 <HAL_DMA_IRQHandler+0x408>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d036      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a61      	ldr	r2, [pc, #388]	@ (8005f94 <HAL_DMA_IRQHandler+0x40c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d031      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a60      	ldr	r2, [pc, #384]	@ (8005f98 <HAL_DMA_IRQHandler+0x410>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d02c      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a5e      	ldr	r2, [pc, #376]	@ (8005f9c <HAL_DMA_IRQHandler+0x414>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d027      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a5d      	ldr	r2, [pc, #372]	@ (8005fa0 <HAL_DMA_IRQHandler+0x418>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d022      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a5b      	ldr	r2, [pc, #364]	@ (8005fa4 <HAL_DMA_IRQHandler+0x41c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d01d      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a5a      	ldr	r2, [pc, #360]	@ (8005fa8 <HAL_DMA_IRQHandler+0x420>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d018      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a58      	ldr	r2, [pc, #352]	@ (8005fac <HAL_DMA_IRQHandler+0x424>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d013      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a57      	ldr	r2, [pc, #348]	@ (8005fb0 <HAL_DMA_IRQHandler+0x428>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d00e      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a55      	ldr	r2, [pc, #340]	@ (8005fb4 <HAL_DMA_IRQHandler+0x42c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d009      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a54      	ldr	r2, [pc, #336]	@ (8005fb8 <HAL_DMA_IRQHandler+0x430>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d004      	beq.n	8005e76 <HAL_DMA_IRQHandler+0x2ee>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a52      	ldr	r2, [pc, #328]	@ (8005fbc <HAL_DMA_IRQHandler+0x434>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d10a      	bne.n	8005e8c <HAL_DMA_IRQHandler+0x304>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	bf14      	ite	ne
 8005e84:	2301      	movne	r3, #1
 8005e86:	2300      	moveq	r3, #0
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	e003      	b.n	8005e94 <HAL_DMA_IRQHandler+0x30c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2300      	movs	r3, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00d      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9c:	f003 031f 	and.w	r3, r3, #31
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eac:	f043 0202 	orr.w	r2, r3, #2
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 808f 	beq.w	8005fe8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <HAL_DMA_IRQHandler+0x3f8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d04a      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f84 <HAL_DMA_IRQHandler+0x3fc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d045      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a29      	ldr	r2, [pc, #164]	@ (8005f88 <HAL_DMA_IRQHandler+0x400>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d040      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a27      	ldr	r2, [pc, #156]	@ (8005f8c <HAL_DMA_IRQHandler+0x404>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d03b      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a26      	ldr	r2, [pc, #152]	@ (8005f90 <HAL_DMA_IRQHandler+0x408>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d036      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a24      	ldr	r2, [pc, #144]	@ (8005f94 <HAL_DMA_IRQHandler+0x40c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d031      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a23      	ldr	r2, [pc, #140]	@ (8005f98 <HAL_DMA_IRQHandler+0x410>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d02c      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a21      	ldr	r2, [pc, #132]	@ (8005f9c <HAL_DMA_IRQHandler+0x414>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d027      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a20      	ldr	r2, [pc, #128]	@ (8005fa0 <HAL_DMA_IRQHandler+0x418>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d022      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa4 <HAL_DMA_IRQHandler+0x41c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d01d      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa8 <HAL_DMA_IRQHandler+0x420>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d018      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fac <HAL_DMA_IRQHandler+0x424>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d013      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb0 <HAL_DMA_IRQHandler+0x428>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00e      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <HAL_DMA_IRQHandler+0x42c>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d009      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a17      	ldr	r2, [pc, #92]	@ (8005fb8 <HAL_DMA_IRQHandler+0x430>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d004      	beq.n	8005f6a <HAL_DMA_IRQHandler+0x3e2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a15      	ldr	r2, [pc, #84]	@ (8005fbc <HAL_DMA_IRQHandler+0x434>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d12a      	bne.n	8005fc0 <HAL_DMA_IRQHandler+0x438>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bf14      	ite	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	2300      	moveq	r3, #0
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	e023      	b.n	8005fc8 <HAL_DMA_IRQHandler+0x440>
 8005f80:	40020010 	.word	0x40020010
 8005f84:	40020028 	.word	0x40020028
 8005f88:	40020040 	.word	0x40020040
 8005f8c:	40020058 	.word	0x40020058
 8005f90:	40020070 	.word	0x40020070
 8005f94:	40020088 	.word	0x40020088
 8005f98:	400200a0 	.word	0x400200a0
 8005f9c:	400200b8 	.word	0x400200b8
 8005fa0:	40020410 	.word	0x40020410
 8005fa4:	40020428 	.word	0x40020428
 8005fa8:	40020440 	.word	0x40020440
 8005fac:	40020458 	.word	0x40020458
 8005fb0:	40020470 	.word	0x40020470
 8005fb4:	40020488 	.word	0x40020488
 8005fb8:	400204a0 	.word	0x400204a0
 8005fbc:	400204b8 	.word	0x400204b8
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00d      	beq.n	8005fe8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd0:	f003 031f 	and.w	r3, r3, #31
 8005fd4:	2204      	movs	r2, #4
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe0:	f043 0204 	orr.w	r2, r3, #4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80a6 	beq.w	800614a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a85      	ldr	r2, [pc, #532]	@ (8006218 <HAL_DMA_IRQHandler+0x690>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d04a      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a83      	ldr	r2, [pc, #524]	@ (800621c <HAL_DMA_IRQHandler+0x694>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d045      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a82      	ldr	r2, [pc, #520]	@ (8006220 <HAL_DMA_IRQHandler+0x698>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d040      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a80      	ldr	r2, [pc, #512]	@ (8006224 <HAL_DMA_IRQHandler+0x69c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d03b      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a7f      	ldr	r2, [pc, #508]	@ (8006228 <HAL_DMA_IRQHandler+0x6a0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d036      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a7d      	ldr	r2, [pc, #500]	@ (800622c <HAL_DMA_IRQHandler+0x6a4>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d031      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a7c      	ldr	r2, [pc, #496]	@ (8006230 <HAL_DMA_IRQHandler+0x6a8>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d02c      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a7a      	ldr	r2, [pc, #488]	@ (8006234 <HAL_DMA_IRQHandler+0x6ac>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d027      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a79      	ldr	r2, [pc, #484]	@ (8006238 <HAL_DMA_IRQHandler+0x6b0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d022      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a77      	ldr	r2, [pc, #476]	@ (800623c <HAL_DMA_IRQHandler+0x6b4>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d01d      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a76      	ldr	r2, [pc, #472]	@ (8006240 <HAL_DMA_IRQHandler+0x6b8>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d018      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a74      	ldr	r2, [pc, #464]	@ (8006244 <HAL_DMA_IRQHandler+0x6bc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d013      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a73      	ldr	r2, [pc, #460]	@ (8006248 <HAL_DMA_IRQHandler+0x6c0>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a71      	ldr	r2, [pc, #452]	@ (800624c <HAL_DMA_IRQHandler+0x6c4>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d009      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a70      	ldr	r2, [pc, #448]	@ (8006250 <HAL_DMA_IRQHandler+0x6c8>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d004      	beq.n	800609e <HAL_DMA_IRQHandler+0x516>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a6e      	ldr	r2, [pc, #440]	@ (8006254 <HAL_DMA_IRQHandler+0x6cc>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10a      	bne.n	80060b4 <HAL_DMA_IRQHandler+0x52c>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e009      	b.n	80060c8 <HAL_DMA_IRQHandler+0x540>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0304 	and.w	r3, r3, #4
 80060be:	2b00      	cmp	r3, #0
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d03e      	beq.n	800614a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	2210      	movs	r2, #16
 80060d6:	409a      	lsls	r2, r3
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d018      	beq.n	800611c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d108      	bne.n	800610a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d024      	beq.n	800614a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
 8006108:	e01f      	b.n	800614a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01b      	beq.n	800614a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
 800611a:	e016      	b.n	800614a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006126:	2b00      	cmp	r3, #0
 8006128:	d107      	bne.n	800613a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0208 	bic.w	r2, r2, #8
 8006138:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	2220      	movs	r2, #32
 8006154:	409a      	lsls	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 8110 	beq.w	8006380 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2c      	ldr	r2, [pc, #176]	@ (8006218 <HAL_DMA_IRQHandler+0x690>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d04a      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <HAL_DMA_IRQHandler+0x694>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d045      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a29      	ldr	r2, [pc, #164]	@ (8006220 <HAL_DMA_IRQHandler+0x698>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d040      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a28      	ldr	r2, [pc, #160]	@ (8006224 <HAL_DMA_IRQHandler+0x69c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d03b      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a26      	ldr	r2, [pc, #152]	@ (8006228 <HAL_DMA_IRQHandler+0x6a0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d036      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a25      	ldr	r2, [pc, #148]	@ (800622c <HAL_DMA_IRQHandler+0x6a4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d031      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a23      	ldr	r2, [pc, #140]	@ (8006230 <HAL_DMA_IRQHandler+0x6a8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d02c      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a22      	ldr	r2, [pc, #136]	@ (8006234 <HAL_DMA_IRQHandler+0x6ac>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d027      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a20      	ldr	r2, [pc, #128]	@ (8006238 <HAL_DMA_IRQHandler+0x6b0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d022      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <HAL_DMA_IRQHandler+0x6b4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d01d      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <HAL_DMA_IRQHandler+0x6b8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d018      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006244 <HAL_DMA_IRQHandler+0x6bc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d013      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a1a      	ldr	r2, [pc, #104]	@ (8006248 <HAL_DMA_IRQHandler+0x6c0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00e      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a19      	ldr	r2, [pc, #100]	@ (800624c <HAL_DMA_IRQHandler+0x6c4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d009      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a17      	ldr	r2, [pc, #92]	@ (8006250 <HAL_DMA_IRQHandler+0x6c8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d004      	beq.n	8006200 <HAL_DMA_IRQHandler+0x678>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a16      	ldr	r2, [pc, #88]	@ (8006254 <HAL_DMA_IRQHandler+0x6cc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d12b      	bne.n	8006258 <HAL_DMA_IRQHandler+0x6d0>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	2b00      	cmp	r3, #0
 800620c:	bf14      	ite	ne
 800620e:	2301      	movne	r3, #1
 8006210:	2300      	moveq	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e02a      	b.n	800626c <HAL_DMA_IRQHandler+0x6e4>
 8006216:	bf00      	nop
 8006218:	40020010 	.word	0x40020010
 800621c:	40020028 	.word	0x40020028
 8006220:	40020040 	.word	0x40020040
 8006224:	40020058 	.word	0x40020058
 8006228:	40020070 	.word	0x40020070
 800622c:	40020088 	.word	0x40020088
 8006230:	400200a0 	.word	0x400200a0
 8006234:	400200b8 	.word	0x400200b8
 8006238:	40020410 	.word	0x40020410
 800623c:	40020428 	.word	0x40020428
 8006240:	40020440 	.word	0x40020440
 8006244:	40020458 	.word	0x40020458
 8006248:	40020470 	.word	0x40020470
 800624c:	40020488 	.word	0x40020488
 8006250:	400204a0 	.word	0x400204a0
 8006254:	400204b8 	.word	0x400204b8
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	bf14      	ite	ne
 8006266:	2301      	movne	r3, #1
 8006268:	2300      	moveq	r3, #0
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8087 	beq.w	8006380 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2220      	movs	r2, #32
 800627c:	409a      	lsls	r2, r3
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b04      	cmp	r3, #4
 800628c:	d139      	bne.n	8006302 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0216 	bic.w	r2, r2, #22
 800629c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695a      	ldr	r2, [r3, #20]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80062ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d103      	bne.n	80062be <HAL_DMA_IRQHandler+0x736>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f022 0208 	bic.w	r2, r2, #8
 80062cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	223f      	movs	r2, #63	@ 0x3f
 80062d8:	409a      	lsls	r2, r3
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 834a 	beq.w	800698c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	4798      	blx	r3
          }
          return;
 8006300:	e344      	b.n	800698c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d018      	beq.n	8006342 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d108      	bne.n	8006330 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006322:	2b00      	cmp	r3, #0
 8006324:	d02c      	beq.n	8006380 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
 800632e:	e027      	b.n	8006380 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d023      	beq.n	8006380 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
 8006340:	e01e      	b.n	8006380 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10f      	bne.n	8006370 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0210 	bic.w	r2, r2, #16
 800635e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8306 	beq.w	8006996 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 8088 	beq.w	80064a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2204      	movs	r2, #4
 800639c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a7a      	ldr	r2, [pc, #488]	@ (8006590 <HAL_DMA_IRQHandler+0xa08>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d04a      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a79      	ldr	r2, [pc, #484]	@ (8006594 <HAL_DMA_IRQHandler+0xa0c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d045      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a77      	ldr	r2, [pc, #476]	@ (8006598 <HAL_DMA_IRQHandler+0xa10>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d040      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a76      	ldr	r2, [pc, #472]	@ (800659c <HAL_DMA_IRQHandler+0xa14>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d03b      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a74      	ldr	r2, [pc, #464]	@ (80065a0 <HAL_DMA_IRQHandler+0xa18>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d036      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a73      	ldr	r2, [pc, #460]	@ (80065a4 <HAL_DMA_IRQHandler+0xa1c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d031      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a71      	ldr	r2, [pc, #452]	@ (80065a8 <HAL_DMA_IRQHandler+0xa20>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d02c      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a70      	ldr	r2, [pc, #448]	@ (80065ac <HAL_DMA_IRQHandler+0xa24>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d027      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a6e      	ldr	r2, [pc, #440]	@ (80065b0 <HAL_DMA_IRQHandler+0xa28>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d022      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a6d      	ldr	r2, [pc, #436]	@ (80065b4 <HAL_DMA_IRQHandler+0xa2c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d01d      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6b      	ldr	r2, [pc, #428]	@ (80065b8 <HAL_DMA_IRQHandler+0xa30>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d018      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6a      	ldr	r2, [pc, #424]	@ (80065bc <HAL_DMA_IRQHandler+0xa34>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d013      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a68      	ldr	r2, [pc, #416]	@ (80065c0 <HAL_DMA_IRQHandler+0xa38>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d00e      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a67      	ldr	r2, [pc, #412]	@ (80065c4 <HAL_DMA_IRQHandler+0xa3c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a65      	ldr	r2, [pc, #404]	@ (80065c8 <HAL_DMA_IRQHandler+0xa40>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_DMA_IRQHandler+0x8b8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a64      	ldr	r2, [pc, #400]	@ (80065cc <HAL_DMA_IRQHandler+0xa44>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d108      	bne.n	8006452 <HAL_DMA_IRQHandler+0x8ca>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f022 0201 	bic.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e007      	b.n	8006462 <HAL_DMA_IRQHandler+0x8da>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800646a:	429a      	cmp	r2, r3
 800646c:	d307      	bcc.n	800647e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f2      	bne.n	8006462 <HAL_DMA_IRQHandler+0x8da>
 800647c:	e000      	b.n	8006480 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800647e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d004      	beq.n	8006498 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2203      	movs	r2, #3
 8006492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006496:	e003      	b.n	80064a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8272 	beq.w	8006996 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	e26c      	b.n	8006996 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a43      	ldr	r2, [pc, #268]	@ (80065d0 <HAL_DMA_IRQHandler+0xa48>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d022      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a42      	ldr	r2, [pc, #264]	@ (80065d4 <HAL_DMA_IRQHandler+0xa4c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d01d      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a40      	ldr	r2, [pc, #256]	@ (80065d8 <HAL_DMA_IRQHandler+0xa50>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d018      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a3f      	ldr	r2, [pc, #252]	@ (80065dc <HAL_DMA_IRQHandler+0xa54>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a3d      	ldr	r2, [pc, #244]	@ (80065e0 <HAL_DMA_IRQHandler+0xa58>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00e      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3c      	ldr	r2, [pc, #240]	@ (80065e4 <HAL_DMA_IRQHandler+0xa5c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d009      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a3a      	ldr	r2, [pc, #232]	@ (80065e8 <HAL_DMA_IRQHandler+0xa60>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <HAL_DMA_IRQHandler+0x984>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a39      	ldr	r2, [pc, #228]	@ (80065ec <HAL_DMA_IRQHandler+0xa64>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d101      	bne.n	8006510 <HAL_DMA_IRQHandler+0x988>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <HAL_DMA_IRQHandler+0x98a>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 823f 	beq.w	8006996 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2204      	movs	r2, #4
 800652a:	409a      	lsls	r2, r3
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80cd 	beq.w	80066d0 <HAL_DMA_IRQHandler+0xb48>
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80c7 	beq.w	80066d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2204      	movs	r2, #4
 800654c:	409a      	lsls	r2, r3
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d049      	beq.n	80065f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8210 	beq.w	8006990 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006578:	e20a      	b.n	8006990 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8206 	beq.w	8006990 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800658c:	e200      	b.n	8006990 <HAL_DMA_IRQHandler+0xe08>
 800658e:	bf00      	nop
 8006590:	40020010 	.word	0x40020010
 8006594:	40020028 	.word	0x40020028
 8006598:	40020040 	.word	0x40020040
 800659c:	40020058 	.word	0x40020058
 80065a0:	40020070 	.word	0x40020070
 80065a4:	40020088 	.word	0x40020088
 80065a8:	400200a0 	.word	0x400200a0
 80065ac:	400200b8 	.word	0x400200b8
 80065b0:	40020410 	.word	0x40020410
 80065b4:	40020428 	.word	0x40020428
 80065b8:	40020440 	.word	0x40020440
 80065bc:	40020458 	.word	0x40020458
 80065c0:	40020470 	.word	0x40020470
 80065c4:	40020488 	.word	0x40020488
 80065c8:	400204a0 	.word	0x400204a0
 80065cc:	400204b8 	.word	0x400204b8
 80065d0:	58025408 	.word	0x58025408
 80065d4:	5802541c 	.word	0x5802541c
 80065d8:	58025430 	.word	0x58025430
 80065dc:	58025444 	.word	0x58025444
 80065e0:	58025458 	.word	0x58025458
 80065e4:	5802546c 	.word	0x5802546c
 80065e8:	58025480 	.word	0x58025480
 80065ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d160      	bne.n	80066bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a7f      	ldr	r2, [pc, #508]	@ (80067fc <HAL_DMA_IRQHandler+0xc74>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d04a      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a7d      	ldr	r2, [pc, #500]	@ (8006800 <HAL_DMA_IRQHandler+0xc78>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d045      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a7c      	ldr	r2, [pc, #496]	@ (8006804 <HAL_DMA_IRQHandler+0xc7c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d040      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a7a      	ldr	r2, [pc, #488]	@ (8006808 <HAL_DMA_IRQHandler+0xc80>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d03b      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a79      	ldr	r2, [pc, #484]	@ (800680c <HAL_DMA_IRQHandler+0xc84>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d036      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a77      	ldr	r2, [pc, #476]	@ (8006810 <HAL_DMA_IRQHandler+0xc88>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d031      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a76      	ldr	r2, [pc, #472]	@ (8006814 <HAL_DMA_IRQHandler+0xc8c>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d02c      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a74      	ldr	r2, [pc, #464]	@ (8006818 <HAL_DMA_IRQHandler+0xc90>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d027      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a73      	ldr	r2, [pc, #460]	@ (800681c <HAL_DMA_IRQHandler+0xc94>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d022      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a71      	ldr	r2, [pc, #452]	@ (8006820 <HAL_DMA_IRQHandler+0xc98>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d01d      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a70      	ldr	r2, [pc, #448]	@ (8006824 <HAL_DMA_IRQHandler+0xc9c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d018      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a6e      	ldr	r2, [pc, #440]	@ (8006828 <HAL_DMA_IRQHandler+0xca0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d013      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a6d      	ldr	r2, [pc, #436]	@ (800682c <HAL_DMA_IRQHandler+0xca4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d00e      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a6b      	ldr	r2, [pc, #428]	@ (8006830 <HAL_DMA_IRQHandler+0xca8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d009      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a6a      	ldr	r2, [pc, #424]	@ (8006834 <HAL_DMA_IRQHandler+0xcac>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d004      	beq.n	800669a <HAL_DMA_IRQHandler+0xb12>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a68      	ldr	r2, [pc, #416]	@ (8006838 <HAL_DMA_IRQHandler+0xcb0>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d108      	bne.n	80066ac <HAL_DMA_IRQHandler+0xb24>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f022 0208 	bic.w	r2, r2, #8
 80066a8:	601a      	str	r2, [r3, #0]
 80066aa:	e007      	b.n	80066bc <HAL_DMA_IRQHandler+0xb34>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0204 	bic.w	r2, r2, #4
 80066ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8165 	beq.w	8006990 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066ce:	e15f      	b.n	8006990 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	2202      	movs	r2, #2
 80066da:	409a      	lsls	r2, r3
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80c5 	beq.w	8006870 <HAL_DMA_IRQHandler+0xce8>
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 80bf 	beq.w	8006870 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	2202      	movs	r2, #2
 80066fc:	409a      	lsls	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d018      	beq.n	800673e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 813a 	beq.w	8006994 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006728:	e134      	b.n	8006994 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 8130 	beq.w	8006994 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800673c:	e12a      	b.n	8006994 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 8089 	bne.w	800685c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a2b      	ldr	r2, [pc, #172]	@ (80067fc <HAL_DMA_IRQHandler+0xc74>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d04a      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a29      	ldr	r2, [pc, #164]	@ (8006800 <HAL_DMA_IRQHandler+0xc78>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d045      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a28      	ldr	r2, [pc, #160]	@ (8006804 <HAL_DMA_IRQHandler+0xc7c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d040      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a26      	ldr	r2, [pc, #152]	@ (8006808 <HAL_DMA_IRQHandler+0xc80>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d03b      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a25      	ldr	r2, [pc, #148]	@ (800680c <HAL_DMA_IRQHandler+0xc84>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d036      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a23      	ldr	r2, [pc, #140]	@ (8006810 <HAL_DMA_IRQHandler+0xc88>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d031      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a22      	ldr	r2, [pc, #136]	@ (8006814 <HAL_DMA_IRQHandler+0xc8c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d02c      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a20      	ldr	r2, [pc, #128]	@ (8006818 <HAL_DMA_IRQHandler+0xc90>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d027      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a1f      	ldr	r2, [pc, #124]	@ (800681c <HAL_DMA_IRQHandler+0xc94>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006820 <HAL_DMA_IRQHandler+0xc98>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01d      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006824 <HAL_DMA_IRQHandler+0xc9c>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d018      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006828 <HAL_DMA_IRQHandler+0xca0>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a19      	ldr	r2, [pc, #100]	@ (800682c <HAL_DMA_IRQHandler+0xca4>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <HAL_DMA_IRQHandler+0xca8>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <HAL_DMA_IRQHandler+0xcac>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <HAL_DMA_IRQHandler+0xc62>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a14      	ldr	r2, [pc, #80]	@ (8006838 <HAL_DMA_IRQHandler+0xcb0>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d128      	bne.n	800683c <HAL_DMA_IRQHandler+0xcb4>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0214 	bic.w	r2, r2, #20
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e027      	b.n	800684c <HAL_DMA_IRQHandler+0xcc4>
 80067fc:	40020010 	.word	0x40020010
 8006800:	40020028 	.word	0x40020028
 8006804:	40020040 	.word	0x40020040
 8006808:	40020058 	.word	0x40020058
 800680c:	40020070 	.word	0x40020070
 8006810:	40020088 	.word	0x40020088
 8006814:	400200a0 	.word	0x400200a0
 8006818:	400200b8 	.word	0x400200b8
 800681c:	40020410 	.word	0x40020410
 8006820:	40020428 	.word	0x40020428
 8006824:	40020440 	.word	0x40020440
 8006828:	40020458 	.word	0x40020458
 800682c:	40020470 	.word	0x40020470
 8006830:	40020488 	.word	0x40020488
 8006834:	400204a0 	.word	0x400204a0
 8006838:	400204b8 	.word	0x400204b8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 020a 	bic.w	r2, r2, #10
 800684a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 8097 	beq.w	8006994 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800686e:	e091      	b.n	8006994 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	2208      	movs	r2, #8
 800687a:	409a      	lsls	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	4013      	ands	r3, r2
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8088 	beq.w	8006996 <HAL_DMA_IRQHandler+0xe0e>
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8082 	beq.w	8006996 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a41      	ldr	r2, [pc, #260]	@ (800699c <HAL_DMA_IRQHandler+0xe14>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d04a      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a3f      	ldr	r2, [pc, #252]	@ (80069a0 <HAL_DMA_IRQHandler+0xe18>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d045      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a3e      	ldr	r2, [pc, #248]	@ (80069a4 <HAL_DMA_IRQHandler+0xe1c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d040      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a3c      	ldr	r2, [pc, #240]	@ (80069a8 <HAL_DMA_IRQHandler+0xe20>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d03b      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a3b      	ldr	r2, [pc, #236]	@ (80069ac <HAL_DMA_IRQHandler+0xe24>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d036      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a39      	ldr	r2, [pc, #228]	@ (80069b0 <HAL_DMA_IRQHandler+0xe28>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d031      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a38      	ldr	r2, [pc, #224]	@ (80069b4 <HAL_DMA_IRQHandler+0xe2c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d02c      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a36      	ldr	r2, [pc, #216]	@ (80069b8 <HAL_DMA_IRQHandler+0xe30>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d027      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a35      	ldr	r2, [pc, #212]	@ (80069bc <HAL_DMA_IRQHandler+0xe34>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d022      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a33      	ldr	r2, [pc, #204]	@ (80069c0 <HAL_DMA_IRQHandler+0xe38>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01d      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a32      	ldr	r2, [pc, #200]	@ (80069c4 <HAL_DMA_IRQHandler+0xe3c>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a30      	ldr	r2, [pc, #192]	@ (80069c8 <HAL_DMA_IRQHandler+0xe40>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d013      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a2f      	ldr	r2, [pc, #188]	@ (80069cc <HAL_DMA_IRQHandler+0xe44>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00e      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a2d      	ldr	r2, [pc, #180]	@ (80069d0 <HAL_DMA_IRQHandler+0xe48>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d009      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a2c      	ldr	r2, [pc, #176]	@ (80069d4 <HAL_DMA_IRQHandler+0xe4c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_DMA_IRQHandler+0xdaa>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2a      	ldr	r2, [pc, #168]	@ (80069d8 <HAL_DMA_IRQHandler+0xe50>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d108      	bne.n	8006944 <HAL_DMA_IRQHandler+0xdbc>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 021c 	bic.w	r2, r2, #28
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	e007      	b.n	8006954 <HAL_DMA_IRQHandler+0xdcc>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 020e 	bic.w	r2, r2, #14
 8006952:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006958:	f003 031f 	and.w	r3, r3, #31
 800695c:	2201      	movs	r2, #1
 800695e:	409a      	lsls	r2, r3
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	4798      	blx	r3
 800698a:	e004      	b.n	8006996 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006990:	bf00      	nop
 8006992:	e000      	b.n	8006996 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006994:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006996:	3728      	adds	r7, #40	@ 0x28
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	40020010 	.word	0x40020010
 80069a0:	40020028 	.word	0x40020028
 80069a4:	40020040 	.word	0x40020040
 80069a8:	40020058 	.word	0x40020058
 80069ac:	40020070 	.word	0x40020070
 80069b0:	40020088 	.word	0x40020088
 80069b4:	400200a0 	.word	0x400200a0
 80069b8:	400200b8 	.word	0x400200b8
 80069bc:	40020410 	.word	0x40020410
 80069c0:	40020428 	.word	0x40020428
 80069c4:	40020440 	.word	0x40020440
 80069c8:	40020458 	.word	0x40020458
 80069cc:	40020470 	.word	0x40020470
 80069d0:	40020488 	.word	0x40020488
 80069d4:	400204a0 	.word	0x400204a0
 80069d8:	400204b8 	.word	0x400204b8

080069dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069ea:	b2db      	uxtb	r3, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a22:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a28:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a7f      	ldr	r2, [pc, #508]	@ (8006c2c <DMA_SetConfig+0x21c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d072      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a7d      	ldr	r2, [pc, #500]	@ (8006c30 <DMA_SetConfig+0x220>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d06d      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a7c      	ldr	r2, [pc, #496]	@ (8006c34 <DMA_SetConfig+0x224>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d068      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c38 <DMA_SetConfig+0x228>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d063      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a79      	ldr	r2, [pc, #484]	@ (8006c3c <DMA_SetConfig+0x22c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d05e      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a77      	ldr	r2, [pc, #476]	@ (8006c40 <DMA_SetConfig+0x230>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d059      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a76      	ldr	r2, [pc, #472]	@ (8006c44 <DMA_SetConfig+0x234>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d054      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a74      	ldr	r2, [pc, #464]	@ (8006c48 <DMA_SetConfig+0x238>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d04f      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a73      	ldr	r2, [pc, #460]	@ (8006c4c <DMA_SetConfig+0x23c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d04a      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a71      	ldr	r2, [pc, #452]	@ (8006c50 <DMA_SetConfig+0x240>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d045      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a70      	ldr	r2, [pc, #448]	@ (8006c54 <DMA_SetConfig+0x244>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d040      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a6e      	ldr	r2, [pc, #440]	@ (8006c58 <DMA_SetConfig+0x248>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d03b      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8006c5c <DMA_SetConfig+0x24c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d036      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6b      	ldr	r2, [pc, #428]	@ (8006c60 <DMA_SetConfig+0x250>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d031      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a6a      	ldr	r2, [pc, #424]	@ (8006c64 <DMA_SetConfig+0x254>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d02c      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a68      	ldr	r2, [pc, #416]	@ (8006c68 <DMA_SetConfig+0x258>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d027      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a67      	ldr	r2, [pc, #412]	@ (8006c6c <DMA_SetConfig+0x25c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d022      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a65      	ldr	r2, [pc, #404]	@ (8006c70 <DMA_SetConfig+0x260>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d01d      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a64      	ldr	r2, [pc, #400]	@ (8006c74 <DMA_SetConfig+0x264>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d018      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a62      	ldr	r2, [pc, #392]	@ (8006c78 <DMA_SetConfig+0x268>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a61      	ldr	r2, [pc, #388]	@ (8006c7c <DMA_SetConfig+0x26c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00e      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a5f      	ldr	r2, [pc, #380]	@ (8006c80 <DMA_SetConfig+0x270>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8006c84 <DMA_SetConfig+0x274>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <DMA_SetConfig+0x10a>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a5c      	ldr	r2, [pc, #368]	@ (8006c88 <DMA_SetConfig+0x278>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <DMA_SetConfig+0x10e>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <DMA_SetConfig+0x110>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006b2c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b3e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a39      	ldr	r2, [pc, #228]	@ (8006c2c <DMA_SetConfig+0x21c>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d04a      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a38      	ldr	r2, [pc, #224]	@ (8006c30 <DMA_SetConfig+0x220>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d045      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a36      	ldr	r2, [pc, #216]	@ (8006c34 <DMA_SetConfig+0x224>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d040      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a35      	ldr	r2, [pc, #212]	@ (8006c38 <DMA_SetConfig+0x228>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d03b      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a33      	ldr	r2, [pc, #204]	@ (8006c3c <DMA_SetConfig+0x22c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d036      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a32      	ldr	r2, [pc, #200]	@ (8006c40 <DMA_SetConfig+0x230>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d031      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a30      	ldr	r2, [pc, #192]	@ (8006c44 <DMA_SetConfig+0x234>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d02c      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8006c48 <DMA_SetConfig+0x238>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d027      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a2d      	ldr	r2, [pc, #180]	@ (8006c4c <DMA_SetConfig+0x23c>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d022      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8006c50 <DMA_SetConfig+0x240>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d01d      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8006c54 <DMA_SetConfig+0x244>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d018      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a29      	ldr	r2, [pc, #164]	@ (8006c58 <DMA_SetConfig+0x248>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d013      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a27      	ldr	r2, [pc, #156]	@ (8006c5c <DMA_SetConfig+0x24c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <DMA_SetConfig+0x250>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d009      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a24      	ldr	r2, [pc, #144]	@ (8006c64 <DMA_SetConfig+0x254>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <DMA_SetConfig+0x1d0>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a23      	ldr	r2, [pc, #140]	@ (8006c68 <DMA_SetConfig+0x258>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d101      	bne.n	8006be4 <DMA_SetConfig+0x1d4>
 8006be0:	2301      	movs	r3, #1
 8006be2:	e000      	b.n	8006be6 <DMA_SetConfig+0x1d6>
 8006be4:	2300      	movs	r3, #0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d059      	beq.n	8006c9e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	223f      	movs	r2, #63	@ 0x3f
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c08:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b40      	cmp	r3, #64	@ 0x40
 8006c18:	d138      	bne.n	8006c8c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c2a:	e086      	b.n	8006d3a <DMA_SetConfig+0x32a>
 8006c2c:	40020010 	.word	0x40020010
 8006c30:	40020028 	.word	0x40020028
 8006c34:	40020040 	.word	0x40020040
 8006c38:	40020058 	.word	0x40020058
 8006c3c:	40020070 	.word	0x40020070
 8006c40:	40020088 	.word	0x40020088
 8006c44:	400200a0 	.word	0x400200a0
 8006c48:	400200b8 	.word	0x400200b8
 8006c4c:	40020410 	.word	0x40020410
 8006c50:	40020428 	.word	0x40020428
 8006c54:	40020440 	.word	0x40020440
 8006c58:	40020458 	.word	0x40020458
 8006c5c:	40020470 	.word	0x40020470
 8006c60:	40020488 	.word	0x40020488
 8006c64:	400204a0 	.word	0x400204a0
 8006c68:	400204b8 	.word	0x400204b8
 8006c6c:	58025408 	.word	0x58025408
 8006c70:	5802541c 	.word	0x5802541c
 8006c74:	58025430 	.word	0x58025430
 8006c78:	58025444 	.word	0x58025444
 8006c7c:	58025458 	.word	0x58025458
 8006c80:	5802546c 	.word	0x5802546c
 8006c84:	58025480 	.word	0x58025480
 8006c88:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	60da      	str	r2, [r3, #12]
}
 8006c9c:	e04d      	b.n	8006d3a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a29      	ldr	r2, [pc, #164]	@ (8006d48 <DMA_SetConfig+0x338>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d022      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a27      	ldr	r2, [pc, #156]	@ (8006d4c <DMA_SetConfig+0x33c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d01d      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a26      	ldr	r2, [pc, #152]	@ (8006d50 <DMA_SetConfig+0x340>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d018      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a24      	ldr	r2, [pc, #144]	@ (8006d54 <DMA_SetConfig+0x344>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d013      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a23      	ldr	r2, [pc, #140]	@ (8006d58 <DMA_SetConfig+0x348>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d00e      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a21      	ldr	r2, [pc, #132]	@ (8006d5c <DMA_SetConfig+0x34c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d009      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a20      	ldr	r2, [pc, #128]	@ (8006d60 <DMA_SetConfig+0x350>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d004      	beq.n	8006cee <DMA_SetConfig+0x2de>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <DMA_SetConfig+0x354>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d101      	bne.n	8006cf2 <DMA_SetConfig+0x2e2>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e000      	b.n	8006cf4 <DMA_SetConfig+0x2e4>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d020      	beq.n	8006d3a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfc:	f003 031f 	and.w	r3, r3, #31
 8006d00:	2201      	movs	r2, #1
 8006d02:	409a      	lsls	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b40      	cmp	r3, #64	@ 0x40
 8006d16:	d108      	bne.n	8006d2a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	60da      	str	r2, [r3, #12]
}
 8006d28:	e007      	b.n	8006d3a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	60da      	str	r2, [r3, #12]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	58025408 	.word	0x58025408
 8006d4c:	5802541c 	.word	0x5802541c
 8006d50:	58025430 	.word	0x58025430
 8006d54:	58025444 	.word	0x58025444
 8006d58:	58025458 	.word	0x58025458
 8006d5c:	5802546c 	.word	0x5802546c
 8006d60:	58025480 	.word	0x58025480
 8006d64:	58025494 	.word	0x58025494

08006d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a42      	ldr	r2, [pc, #264]	@ (8006e80 <DMA_CalcBaseAndBitshift+0x118>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04a      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a41      	ldr	r2, [pc, #260]	@ (8006e84 <DMA_CalcBaseAndBitshift+0x11c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d045      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3f      	ldr	r2, [pc, #252]	@ (8006e88 <DMA_CalcBaseAndBitshift+0x120>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d040      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a3e      	ldr	r2, [pc, #248]	@ (8006e8c <DMA_CalcBaseAndBitshift+0x124>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d03b      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e90 <DMA_CalcBaseAndBitshift+0x128>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d036      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a3b      	ldr	r2, [pc, #236]	@ (8006e94 <DMA_CalcBaseAndBitshift+0x12c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d031      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a39      	ldr	r2, [pc, #228]	@ (8006e98 <DMA_CalcBaseAndBitshift+0x130>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a38      	ldr	r2, [pc, #224]	@ (8006e9c <DMA_CalcBaseAndBitshift+0x134>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a36      	ldr	r2, [pc, #216]	@ (8006ea0 <DMA_CalcBaseAndBitshift+0x138>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a35      	ldr	r2, [pc, #212]	@ (8006ea4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a33      	ldr	r2, [pc, #204]	@ (8006ea8 <DMA_CalcBaseAndBitshift+0x140>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a32      	ldr	r2, [pc, #200]	@ (8006eac <DMA_CalcBaseAndBitshift+0x144>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a30      	ldr	r2, [pc, #192]	@ (8006eb0 <DMA_CalcBaseAndBitshift+0x148>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb8 <DMA_CalcBaseAndBitshift+0x150>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <DMA_CalcBaseAndBitshift+0xa8>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006ebc <DMA_CalcBaseAndBitshift+0x154>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d101      	bne.n	8006e14 <DMA_CalcBaseAndBitshift+0xac>
 8006e10:	2301      	movs	r3, #1
 8006e12:	e000      	b.n	8006e16 <DMA_CalcBaseAndBitshift+0xae>
 8006e14:	2300      	movs	r3, #0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d024      	beq.n	8006e64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	3b10      	subs	r3, #16
 8006e22:	4a27      	ldr	r2, [pc, #156]	@ (8006ec0 <DMA_CalcBaseAndBitshift+0x158>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	091b      	lsrs	r3, r3, #4
 8006e2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	4a24      	ldr	r2, [pc, #144]	@ (8006ec4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006e34:	5cd3      	ldrb	r3, [r2, r3]
 8006e36:	461a      	mov	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b03      	cmp	r3, #3
 8006e40:	d908      	bls.n	8006e54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	461a      	mov	r2, r3
 8006e48:	4b1f      	ldr	r3, [pc, #124]	@ (8006ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	1d1a      	adds	r2, r3, #4
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e52:	e00d      	b.n	8006e70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <DMA_CalcBaseAndBitshift+0x160>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e62:	e005      	b.n	8006e70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	40020010 	.word	0x40020010
 8006e84:	40020028 	.word	0x40020028
 8006e88:	40020040 	.word	0x40020040
 8006e8c:	40020058 	.word	0x40020058
 8006e90:	40020070 	.word	0x40020070
 8006e94:	40020088 	.word	0x40020088
 8006e98:	400200a0 	.word	0x400200a0
 8006e9c:	400200b8 	.word	0x400200b8
 8006ea0:	40020410 	.word	0x40020410
 8006ea4:	40020428 	.word	0x40020428
 8006ea8:	40020440 	.word	0x40020440
 8006eac:	40020458 	.word	0x40020458
 8006eb0:	40020470 	.word	0x40020470
 8006eb4:	40020488 	.word	0x40020488
 8006eb8:	400204a0 	.word	0x400204a0
 8006ebc:	400204b8 	.word	0x400204b8
 8006ec0:	aaaaaaab 	.word	0xaaaaaaab
 8006ec4:	08019378 	.word	0x08019378
 8006ec8:	fffffc00 	.word	0xfffffc00

08006ecc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d120      	bne.n	8006f22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d858      	bhi.n	8006f9a <DMA_CheckFifoParam+0xce>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <DMA_CheckFifoParam+0x24>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f13 	.word	0x08006f13
 8006ef8:	08006f01 	.word	0x08006f01
 8006efc:	08006f9b 	.word	0x08006f9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d048      	beq.n	8006f9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f10:	e045      	b.n	8006f9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f1a:	d142      	bne.n	8006fa2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f20:	e03f      	b.n	8006fa2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f2a:	d123      	bne.n	8006f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d838      	bhi.n	8006fa6 <DMA_CheckFifoParam+0xda>
 8006f34:	a201      	add	r2, pc, #4	@ (adr r2, 8006f3c <DMA_CheckFifoParam+0x70>)
 8006f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f3a:	bf00      	nop
 8006f3c:	08006f4d 	.word	0x08006f4d
 8006f40:	08006f53 	.word	0x08006f53
 8006f44:	08006f4d 	.word	0x08006f4d
 8006f48:	08006f65 	.word	0x08006f65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
        break;
 8006f50:	e030      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d025      	beq.n	8006faa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f62:	e022      	b.n	8006faa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006f6c:	d11f      	bne.n	8006fae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f72:	e01c      	b.n	8006fae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f78:	2b02      	cmp	r3, #2
 8006f7a:	d902      	bls.n	8006f82 <DMA_CheckFifoParam+0xb6>
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d003      	beq.n	8006f88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006f80:	e018      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	73fb      	strb	r3, [r7, #15]
        break;
 8006f86:	e015      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00e      	beq.n	8006fb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
    break;
 8006f98:	e00b      	b.n	8006fb2 <DMA_CheckFifoParam+0xe6>
        break;
 8006f9a:	bf00      	nop
 8006f9c:	e00a      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006f9e:	bf00      	nop
 8006fa0:	e008      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fa2:	bf00      	nop
 8006fa4:	e006      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fa6:	bf00      	nop
 8006fa8:	e004      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <DMA_CheckFifoParam+0xe8>
    break;
 8006fb2:	bf00      	nop
    }
  }

  return status;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop

08006fc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a38      	ldr	r2, [pc, #224]	@ (80070b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a36      	ldr	r2, [pc, #216]	@ (80070bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a35      	ldr	r2, [pc, #212]	@ (80070c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a33      	ldr	r2, [pc, #204]	@ (80070c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a32      	ldr	r2, [pc, #200]	@ (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a30      	ldr	r2, [pc, #192]	@ (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a2f      	ldr	r2, [pc, #188]	@ (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a2d      	ldr	r2, [pc, #180]	@ (80070d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d101      	bne.n	8007026 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007022:	2301      	movs	r3, #1
 8007024:	e000      	b.n	8007028 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007026:	2300      	movs	r3, #0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d01a      	beq.n	8007062 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	3b08      	subs	r3, #8
 8007034:	4a28      	ldr	r2, [pc, #160]	@ (80070d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	091b      	lsrs	r3, r3, #4
 800703c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4b26      	ldr	r3, [pc, #152]	@ (80070dc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007042:	4413      	add	r3, r2
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	461a      	mov	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a24      	ldr	r2, [pc, #144]	@ (80070e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007050:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f003 031f 	and.w	r3, r3, #31
 8007058:	2201      	movs	r2, #1
 800705a:	409a      	lsls	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007060:	e024      	b.n	80070ac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	3b10      	subs	r3, #16
 800706a:	4a1e      	ldr	r2, [pc, #120]	@ (80070e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800706c:	fba2 2303 	umull	r2, r3, r2, r3
 8007070:	091b      	lsrs	r3, r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d806      	bhi.n	800708a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	4a1b      	ldr	r2, [pc, #108]	@ (80070ec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d902      	bls.n	800708a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	3308      	adds	r3, #8
 8007088:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	461a      	mov	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a16      	ldr	r2, [pc, #88]	@ (80070f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800709c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	2201      	movs	r2, #1
 80070a6:	409a      	lsls	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070ac:	bf00      	nop
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	58025408 	.word	0x58025408
 80070bc:	5802541c 	.word	0x5802541c
 80070c0:	58025430 	.word	0x58025430
 80070c4:	58025444 	.word	0x58025444
 80070c8:	58025458 	.word	0x58025458
 80070cc:	5802546c 	.word	0x5802546c
 80070d0:	58025480 	.word	0x58025480
 80070d4:	58025494 	.word	0x58025494
 80070d8:	cccccccd 	.word	0xcccccccd
 80070dc:	16009600 	.word	0x16009600
 80070e0:	58025880 	.word	0x58025880
 80070e4:	aaaaaaab 	.word	0xaaaaaaab
 80070e8:	400204b8 	.word	0x400204b8
 80070ec:	4002040f 	.word	0x4002040f
 80070f0:	10008200 	.word	0x10008200
 80070f4:	40020880 	.word	0x40020880

080070f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	b2db      	uxtb	r3, r3
 8007106:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d04a      	beq.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b08      	cmp	r3, #8
 8007112:	d847      	bhi.n	80071a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a25      	ldr	r2, [pc, #148]	@ (80071b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d022      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a24      	ldr	r2, [pc, #144]	@ (80071b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d01d      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a22      	ldr	r2, [pc, #136]	@ (80071b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a21      	ldr	r2, [pc, #132]	@ (80071bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d013      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1f      	ldr	r2, [pc, #124]	@ (80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a1e      	ldr	r2, [pc, #120]	@ (80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a1c      	ldr	r2, [pc, #112]	@ (80071c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1b      	ldr	r2, [pc, #108]	@ (80071cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d101      	bne.n	8007168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007164:	2301      	movs	r3, #1
 8007166:	e000      	b.n	800716a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007168:	2300      	movs	r3, #0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	4b17      	ldr	r3, [pc, #92]	@ (80071d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	461a      	mov	r2, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a15      	ldr	r2, [pc, #84]	@ (80071d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007180:	671a      	str	r2, [r3, #112]	@ 0x70
 8007182:	e009      	b.n	8007198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	4b14      	ldr	r3, [pc, #80]	@ (80071d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007188:	4413      	add	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	461a      	mov	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a11      	ldr	r2, [pc, #68]	@ (80071dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007196:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3b01      	subs	r3, #1
 800719c:	2201      	movs	r2, #1
 800719e:	409a      	lsls	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	58025408 	.word	0x58025408
 80071b4:	5802541c 	.word	0x5802541c
 80071b8:	58025430 	.word	0x58025430
 80071bc:	58025444 	.word	0x58025444
 80071c0:	58025458 	.word	0x58025458
 80071c4:	5802546c 	.word	0x5802546c
 80071c8:	58025480 	.word	0x58025480
 80071cc:	58025494 	.word	0x58025494
 80071d0:	1600963f 	.word	0x1600963f
 80071d4:	58025940 	.word	0x58025940
 80071d8:	1000823f 	.word	0x1000823f
 80071dc:	40020940 	.word	0x40020940

080071e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b089      	sub	sp, #36	@ 0x24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80071ee:	4b89      	ldr	r3, [pc, #548]	@ (8007414 <HAL_GPIO_Init+0x234>)
 80071f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071f2:	e194      	b.n	800751e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	2101      	movs	r1, #1
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007200:	4013      	ands	r3, r2
 8007202:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	f000 8186 	beq.w	8007518 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 0303 	and.w	r3, r3, #3
 8007214:	2b01      	cmp	r3, #1
 8007216:	d005      	beq.n	8007224 <HAL_GPIO_Init+0x44>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 0303 	and.w	r3, r3, #3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d130      	bne.n	8007286 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	005b      	lsls	r3, r3, #1
 800722e:	2203      	movs	r2, #3
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	4013      	ands	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68da      	ldr	r2, [r3, #12]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	69ba      	ldr	r2, [r7, #24]
 800724a:	4313      	orrs	r3, r2
 800724c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800725a:	2201      	movs	r2, #1
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	43db      	mvns	r3, r3
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	4013      	ands	r3, r2
 8007268:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	091b      	lsrs	r3, r3, #4
 8007270:	f003 0201 	and.w	r2, r3, #1
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	4313      	orrs	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b03      	cmp	r3, #3
 8007290:	d017      	beq.n	80072c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	2203      	movs	r2, #3
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43db      	mvns	r3, r3
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	4013      	ands	r3, r2
 80072a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	fa02 f303 	lsl.w	r3, r2, r3
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d123      	bne.n	8007316 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	08da      	lsrs	r2, r3, #3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3208      	adds	r2, #8
 80072d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f003 0307 	and.w	r3, r3, #7
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	220f      	movs	r2, #15
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	43db      	mvns	r3, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4013      	ands	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	691a      	ldr	r2, [r3, #16]
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	f003 0307 	and.w	r3, r3, #7
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	08da      	lsrs	r2, r3, #3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3208      	adds	r2, #8
 8007310:	69b9      	ldr	r1, [r7, #24]
 8007312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	005b      	lsls	r3, r3, #1
 8007320:	2203      	movs	r2, #3
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	43db      	mvns	r3, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	4013      	ands	r3, r2
 800732c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f003 0203 	and.w	r2, r3, #3
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	4313      	orrs	r3, r2
 8007342:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 80e0 	beq.w	8007518 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007358:	4b2f      	ldr	r3, [pc, #188]	@ (8007418 <HAL_GPIO_Init+0x238>)
 800735a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800735e:	4a2e      	ldr	r2, [pc, #184]	@ (8007418 <HAL_GPIO_Init+0x238>)
 8007360:	f043 0302 	orr.w	r3, r3, #2
 8007364:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007368:	4b2b      	ldr	r3, [pc, #172]	@ (8007418 <HAL_GPIO_Init+0x238>)
 800736a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007376:	4a29      	ldr	r2, [pc, #164]	@ (800741c <HAL_GPIO_Init+0x23c>)
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	089b      	lsrs	r3, r3, #2
 800737c:	3302      	adds	r3, #2
 800737e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0303 	and.w	r3, r3, #3
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	220f      	movs	r2, #15
 800738e:	fa02 f303 	lsl.w	r3, r2, r3
 8007392:	43db      	mvns	r3, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	4013      	ands	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a20      	ldr	r2, [pc, #128]	@ (8007420 <HAL_GPIO_Init+0x240>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d052      	beq.n	8007448 <HAL_GPIO_Init+0x268>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007424 <HAL_GPIO_Init+0x244>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d031      	beq.n	800740e <HAL_GPIO_Init+0x22e>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007428 <HAL_GPIO_Init+0x248>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02b      	beq.n	800740a <HAL_GPIO_Init+0x22a>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	@ (800742c <HAL_GPIO_Init+0x24c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d025      	beq.n	8007406 <HAL_GPIO_Init+0x226>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a1c      	ldr	r2, [pc, #112]	@ (8007430 <HAL_GPIO_Init+0x250>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01f      	beq.n	8007402 <HAL_GPIO_Init+0x222>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007434 <HAL_GPIO_Init+0x254>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d019      	beq.n	80073fe <HAL_GPIO_Init+0x21e>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007438 <HAL_GPIO_Init+0x258>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <HAL_GPIO_Init+0x21a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a19      	ldr	r2, [pc, #100]	@ (800743c <HAL_GPIO_Init+0x25c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00d      	beq.n	80073f6 <HAL_GPIO_Init+0x216>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a18      	ldr	r2, [pc, #96]	@ (8007440 <HAL_GPIO_Init+0x260>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <HAL_GPIO_Init+0x212>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a17      	ldr	r2, [pc, #92]	@ (8007444 <HAL_GPIO_Init+0x264>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d101      	bne.n	80073ee <HAL_GPIO_Init+0x20e>
 80073ea:	2309      	movs	r3, #9
 80073ec:	e02d      	b.n	800744a <HAL_GPIO_Init+0x26a>
 80073ee:	230a      	movs	r3, #10
 80073f0:	e02b      	b.n	800744a <HAL_GPIO_Init+0x26a>
 80073f2:	2308      	movs	r3, #8
 80073f4:	e029      	b.n	800744a <HAL_GPIO_Init+0x26a>
 80073f6:	2307      	movs	r3, #7
 80073f8:	e027      	b.n	800744a <HAL_GPIO_Init+0x26a>
 80073fa:	2306      	movs	r3, #6
 80073fc:	e025      	b.n	800744a <HAL_GPIO_Init+0x26a>
 80073fe:	2305      	movs	r3, #5
 8007400:	e023      	b.n	800744a <HAL_GPIO_Init+0x26a>
 8007402:	2304      	movs	r3, #4
 8007404:	e021      	b.n	800744a <HAL_GPIO_Init+0x26a>
 8007406:	2303      	movs	r3, #3
 8007408:	e01f      	b.n	800744a <HAL_GPIO_Init+0x26a>
 800740a:	2302      	movs	r3, #2
 800740c:	e01d      	b.n	800744a <HAL_GPIO_Init+0x26a>
 800740e:	2301      	movs	r3, #1
 8007410:	e01b      	b.n	800744a <HAL_GPIO_Init+0x26a>
 8007412:	bf00      	nop
 8007414:	58000080 	.word	0x58000080
 8007418:	58024400 	.word	0x58024400
 800741c:	58000400 	.word	0x58000400
 8007420:	58020000 	.word	0x58020000
 8007424:	58020400 	.word	0x58020400
 8007428:	58020800 	.word	0x58020800
 800742c:	58020c00 	.word	0x58020c00
 8007430:	58021000 	.word	0x58021000
 8007434:	58021400 	.word	0x58021400
 8007438:	58021800 	.word	0x58021800
 800743c:	58021c00 	.word	0x58021c00
 8007440:	58022000 	.word	0x58022000
 8007444:	58022400 	.word	0x58022400
 8007448:	2300      	movs	r3, #0
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	f002 0203 	and.w	r2, r2, #3
 8007450:	0092      	lsls	r2, r2, #2
 8007452:	4093      	lsls	r3, r2
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	4313      	orrs	r3, r2
 8007458:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800745a:	4938      	ldr	r1, [pc, #224]	@ (800753c <HAL_GPIO_Init+0x35c>)
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	089b      	lsrs	r3, r3, #2
 8007460:	3302      	adds	r3, #2
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	43db      	mvns	r3, r3
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	4013      	ands	r3, r2
 8007478:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d003      	beq.n	800748e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800748e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	43db      	mvns	r3, r3
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4013      	ands	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80074bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	43db      	mvns	r3, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	43db      	mvns	r3, r3
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	4013      	ands	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	4313      	orrs	r3, r2
 8007510:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	3301      	adds	r3, #1
 800751c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	f47f ae63 	bne.w	80071f4 <HAL_GPIO_Init+0x14>
  }
}
 800752e:	bf00      	nop
 8007530:	bf00      	nop
 8007532:	3724      	adds	r7, #36	@ 0x24
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	58000400 	.word	0x58000400

08007540 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	691a      	ldr	r2, [r3, #16]
 8007550:	887b      	ldrh	r3, [r7, #2]
 8007552:	4013      	ands	r3, r2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007558:	2301      	movs	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e001      	b.n	8007562 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800755e:	2300      	movs	r3, #0
 8007560:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	460b      	mov	r3, r1
 800757a:	807b      	strh	r3, [r7, #2]
 800757c:	4613      	mov	r3, r2
 800757e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007580:	787b      	ldrb	r3, [r7, #1]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007586:	887a      	ldrh	r2, [r7, #2]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800758c:	e003      	b.n	8007596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800758e:	887b      	ldrh	r3, [r7, #2]
 8007590:	041a      	lsls	r2, r3, #16
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	619a      	str	r2, [r3, #24]
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
	...

080075a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e08b      	b.n	80076ce <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa fb38 	bl	8001c40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	@ 0x24
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80075f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007604:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	e006      	b.n	800762c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800762a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d108      	bne.n	8007646 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007642:	605a      	str	r2, [r3, #4]
 8007644:	e007      	b.n	8007656 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007654:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	4b1d      	ldr	r3, [pc, #116]	@ (80076d8 <HAL_I2C_Init+0x134>)
 8007662:	430b      	orrs	r3, r1
 8007664:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007674:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691a      	ldr	r2, [r3, #16]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
 800767e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	69d9      	ldr	r1, [r3, #28]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1a      	ldr	r2, [r3, #32]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	02008000 	.word	0x02008000

080076dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b088      	sub	sp, #32
 80076e0:	af02      	add	r7, sp, #8
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	461a      	mov	r2, r3
 80076e8:	460b      	mov	r3, r1
 80076ea:	817b      	strh	r3, [r7, #10]
 80076ec:	4613      	mov	r3, r2
 80076ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	f040 80fd 	bne.w	80078f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007704:	2b01      	cmp	r3, #1
 8007706:	d101      	bne.n	800770c <HAL_I2C_Master_Transmit+0x30>
 8007708:	2302      	movs	r3, #2
 800770a:	e0f6      	b.n	80078fa <HAL_I2C_Master_Transmit+0x21e>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007714:	f7fb fa98 	bl	8002c48 <HAL_GetTick>
 8007718:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	2319      	movs	r3, #25
 8007720:	2201      	movs	r2, #1
 8007722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f002 f89e 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e0e1      	b.n	80078fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2221      	movs	r2, #33	@ 0x21
 800773a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2210      	movs	r2, #16
 8007742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	893a      	ldrh	r2, [r7, #8]
 8007756:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007762:	b29b      	uxth	r3, r3
 8007764:	2bff      	cmp	r3, #255	@ 0xff
 8007766:	d906      	bls.n	8007776 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	22ff      	movs	r2, #255	@ 0xff
 800776c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800776e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	e007      	b.n	8007786 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777a:	b29a      	uxth	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007784:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d024      	beq.n	80077d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	3b01      	subs	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	3301      	adds	r3, #1
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	8979      	ldrh	r1, [r7, #10]
 80077ca:	4b4e      	ldr	r3, [pc, #312]	@ (8007904 <HAL_I2C_Master_Transmit+0x228>)
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f002 fa0d 	bl	8009bf0 <I2C_TransferConfig>
 80077d6:	e066      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	8979      	ldrh	r1, [r7, #10]
 80077e0:	4b48      	ldr	r3, [pc, #288]	@ (8007904 <HAL_I2C_Master_Transmit+0x228>)
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f002 fa02 	bl	8009bf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80077ec:	e05b      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	6a39      	ldr	r1, [r7, #32]
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f002 f891 	bl	800991a <I2C_WaitOnTXISFlagUntilTimeout>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e07b      	b.n	80078fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007806:	781a      	ldrb	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b00      	cmp	r3, #0
 800783a:	d034      	beq.n	80078a6 <HAL_I2C_Master_Transmit+0x1ca>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d130      	bne.n	80078a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	2200      	movs	r2, #0
 800784c:	2180      	movs	r1, #128	@ 0x80
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f002 f80a 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e04d      	b.n	80078fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007862:	b29b      	uxth	r3, r3
 8007864:	2bff      	cmp	r3, #255	@ 0xff
 8007866:	d90e      	bls.n	8007886 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	22ff      	movs	r2, #255	@ 0xff
 800786c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007872:	b2da      	uxtb	r2, r3
 8007874:	8979      	ldrh	r1, [r7, #10]
 8007876:	2300      	movs	r3, #0
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f002 f9b6 	bl	8009bf0 <I2C_TransferConfig>
 8007884:	e00f      	b.n	80078a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788a:	b29a      	uxth	r2, r3
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007894:	b2da      	uxtb	r2, r3
 8007896:	8979      	ldrh	r1, [r7, #10]
 8007898:	2300      	movs	r3, #0
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f002 f9a5 	bl	8009bf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d19e      	bne.n	80077ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	6a39      	ldr	r1, [r7, #32]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f002 f877 	bl	80099a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d001      	beq.n	80078c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e01a      	b.n	80078fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2220      	movs	r2, #32
 80078ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6859      	ldr	r1, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4b0c      	ldr	r3, [pc, #48]	@ (8007908 <HAL_I2C_Master_Transmit+0x22c>)
 80078d8:	400b      	ands	r3, r1
 80078da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	80002000 	.word	0x80002000
 8007908:	fe00e800 	.word	0xfe00e800

0800790c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b08a      	sub	sp, #40	@ 0x28
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	607a      	str	r2, [r7, #4]
 8007916:	461a      	mov	r2, r3
 8007918:	460b      	mov	r3, r1
 800791a:	817b      	strh	r3, [r7, #10]
 800791c:	4613      	mov	r3, r2
 800791e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b20      	cmp	r3, #32
 800792e:	f040 80ef 	bne.w	8007b10 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800793c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007940:	d101      	bne.n	8007946 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8007942:	2302      	movs	r3, #2
 8007944:	e0e5      	b.n	8007b12 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800794c:	2b01      	cmp	r3, #1
 800794e:	d101      	bne.n	8007954 <HAL_I2C_Master_Transmit_DMA+0x48>
 8007950:	2302      	movs	r3, #2
 8007952:	e0de      	b.n	8007b12 <HAL_I2C_Master_Transmit_DMA+0x206>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2221      	movs	r2, #33	@ 0x21
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2210      	movs	r2, #16
 8007968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	893a      	ldrh	r2, [r7, #8]
 800797c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a66      	ldr	r2, [pc, #408]	@ (8007b1c <HAL_I2C_Master_Transmit_DMA+0x210>)
 8007982:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4a66      	ldr	r2, [pc, #408]	@ (8007b20 <HAL_I2C_Master_Transmit_DMA+0x214>)
 8007988:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800798e:	b29b      	uxth	r3, r3
 8007990:	2bff      	cmp	r3, #255	@ 0xff
 8007992:	d906      	bls.n	80079a2 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	22ff      	movs	r2, #255	@ 0xff
 8007998:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800799a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e007      	b.n	80079b2 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80079ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80079b0:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d01a      	beq.n	80079f0 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079be:	781a      	ldrb	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ca:	1c5a      	adds	r2, r3, #1
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d4:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079e8:	3b01      	subs	r3, #1
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d074      	beq.n	8007ae2 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d022      	beq.n	8007a46 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a04:	4a47      	ldr	r2, [pc, #284]	@ (8007b24 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8007a06:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0c:	4a46      	ldr	r2, [pc, #280]	@ (8007b28 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8007a0e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	2200      	movs	r2, #0
 8007a16:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007a30:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8007a36:	f7fd f8d9 	bl	8004bec <HAL_DMA_Start_IT>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d13a      	bne.n	8007aba <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8007a44:	e013      	b.n	8007a6e <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2220      	movs	r2, #32
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e051      	b.n	8007b12 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	3301      	adds	r3, #1
 8007a76:	b2da      	uxtb	r2, r3
 8007a78:	8979      	ldrh	r1, [r7, #10]
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8007b2c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f002 f8b5 	bl	8009bf0 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007aa0:	2110      	movs	r1, #16
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f002 f8d6 	bl	8009c54 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e028      	b.n	8007b0c <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ace:	f043 0210 	orr.w	r2, r3, #16
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e017      	b.n	8007b12 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a12      	ldr	r2, [pc, #72]	@ (8007b30 <HAL_I2C_Master_Transmit_DMA+0x224>)
 8007ae6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	8979      	ldrh	r1, [r7, #10]
 8007aee:	4b0f      	ldr	r3, [pc, #60]	@ (8007b2c <HAL_I2C_Master_Transmit_DMA+0x220>)
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f002 f87a 	bl	8009bf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b04:	2101      	movs	r1, #1
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f002 f8a4 	bl	8009c54 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3720      	adds	r7, #32
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	ffff0000 	.word	0xffff0000
 8007b20:	0800816b 	.word	0x0800816b
 8007b24:	08009523 	.word	0x08009523
 8007b28:	080095b9 	.word	0x080095b9
 8007b2c:	80002000 	.word	0x80002000
 8007b30:	08007cfb 	.word	0x08007cfb

08007b34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
  }
}
 8007b60:	bf00      	nop
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d010      	beq.n	8007bae <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	09db      	lsrs	r3, r3, #7
 8007b90:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00a      	beq.n	8007bae <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b9c:	f043 0201 	orr.w	r2, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	0a9b      	lsrs	r3, r3, #10
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d010      	beq.n	8007bdc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	09db      	lsrs	r3, r3, #7
 8007bbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bca:	f043 0208 	orr.w	r2, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007bda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	0a5b      	lsrs	r3, r3, #9
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d010      	beq.n	8007c0a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	09db      	lsrs	r3, r3, #7
 8007bec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00a      	beq.n	8007c0a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf8:	f043 0202 	orr.w	r2, r3, #2
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c08:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 030b 	and.w	r3, r3, #11
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8007c1a:	68f9      	ldr	r1, [r7, #12]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fb45 	bl	80092ac <I2C_ITError>
  }
}
 8007c22:	bf00      	nop
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b083      	sub	sp, #12
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007c6e:	bf00      	nop
 8007c70:	370c      	adds	r7, #12
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
 8007c86:	4613      	mov	r3, r2
 8007c88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b083      	sub	sp, #12
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b088      	sub	sp, #32
 8007cfe:	af02      	add	r7, sp, #8
 8007d00:	60f8      	str	r0, [r7, #12]
 8007d02:	60b9      	str	r1, [r7, #8]
 8007d04:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d101      	bne.n	8007d18 <I2C_Master_ISR_IT+0x1e>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e120      	b.n	8007f5a <I2C_Master_ISR_IT+0x260>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	091b      	lsrs	r3, r3, #4
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d013      	beq.n	8007d54 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	091b      	lsrs	r3, r3, #4
 8007d30:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00d      	beq.n	8007d54 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2210      	movs	r2, #16
 8007d3e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d44:	f043 0204 	orr.w	r2, r3, #4
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f001 fbc4 	bl	80094da <I2C_Flush_TXDR>
 8007d52:	e0ed      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d023      	beq.n	8007da8 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	089b      	lsrs	r3, r3, #2
 8007d64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d01d      	beq.n	8007da8 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0304 	bic.w	r3, r3, #4
 8007d72:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7e:	b2d2      	uxtb	r2, r2
 8007d80:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007da6:	e0c3      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	099b      	lsrs	r3, r3, #6
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d12a      	bne.n	8007e0a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d024      	beq.n	8007e0a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	085b      	lsrs	r3, r3, #1
 8007dc4:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d01e      	beq.n	8007e0a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f000 80ac 	beq.w	8007f30 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	3b01      	subs	r3, #1
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8007e08:	e092      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	09db      	lsrs	r3, r3, #7
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d05d      	beq.n	8007ed2 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	099b      	lsrs	r3, r3, #6
 8007e1a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d057      	beq.n	8007ed2 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d040      	beq.n	8007eae <I2C_Master_ISR_IT+0x1b4>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d13c      	bne.n	8007eae <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e40:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	2bff      	cmp	r3, #255	@ 0xff
 8007e4a:	d90e      	bls.n	8007e6a <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	22ff      	movs	r2, #255	@ 0xff
 8007e50:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	8a79      	ldrh	r1, [r7, #18]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	f001 fec4 	bl	8009bf0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e68:	e032      	b.n	8007ed0 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007e7c:	d00b      	beq.n	8007e96 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e82:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007e88:	8a79      	ldrh	r1, [r7, #18]
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	9000      	str	r0, [sp, #0]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 feae 	bl	8009bf0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e94:	e01c      	b.n	8007ed0 <I2C_Master_ISR_IT+0x1d6>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	8a79      	ldrh	r1, [r7, #18]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f001 fea2 	bl	8009bf0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eac:	e010      	b.n	8007ed0 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007ebc:	d003      	beq.n	8007ec6 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fdde 	bl	8008a80 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ec4:	e034      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ec6:	2140      	movs	r1, #64	@ 0x40
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f001 f9ef 	bl	80092ac <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007ece:	e02f      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
 8007ed0:	e02e      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	099b      	lsrs	r3, r3, #6
 8007ed6:	f003 0301 	and.w	r3, r3, #1
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d028      	beq.n	8007f30 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	099b      	lsrs	r3, r3, #6
 8007ee2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d022      	beq.n	8007f30 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d119      	bne.n	8007f28 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007f02:	d015      	beq.n	8007f30 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007f0c:	d108      	bne.n	8007f20 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f1c:	605a      	str	r2, [r3, #4]
 8007f1e:	e007      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 fdad 	bl	8008a80 <I2C_ITMasterSeqCplt>
 8007f26:	e003      	b.n	8007f30 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007f28:	2140      	movs	r1, #64	@ 0x40
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f001 f9be 	bl	80092ac <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	095b      	lsrs	r3, r3, #5
 8007f40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007f48:	6979      	ldr	r1, [r7, #20]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fe34 	bl	8008bb8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b086      	sub	sp, #24
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d101      	bne.n	8007f86 <I2C_Slave_ISR_IT+0x24>
 8007f82:	2302      	movs	r3, #2
 8007f84:	e0ed      	b.n	8008162 <I2C_Slave_ISR_IT+0x200>
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00a      	beq.n	8007fb0 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d004      	beq.n	8007fb0 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007fa6:	6939      	ldr	r1, [r7, #16]
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fecf 	bl	8008d4c <I2C_ITSlaveCplt>
 8007fae:	e0d3      	b.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	091b      	lsrs	r3, r3, #4
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d04d      	beq.n	8008058 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	091b      	lsrs	r3, r3, #4
 8007fc0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d047      	beq.n	8008058 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d128      	bne.n	8008024 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b28      	cmp	r3, #40	@ 0x28
 8007fdc:	d108      	bne.n	8007ff0 <I2C_Slave_ISR_IT+0x8e>
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fe4:	d104      	bne.n	8007ff0 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007fe6:	6939      	ldr	r1, [r7, #16]
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f001 f909 	bl	8009200 <I2C_ITListenCplt>
 8007fee:	e032      	b.n	8008056 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b29      	cmp	r3, #41	@ 0x29
 8007ffa:	d10e      	bne.n	800801a <I2C_Slave_ISR_IT+0xb8>
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008002:	d00a      	beq.n	800801a <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2210      	movs	r2, #16
 800800a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f001 fa64 	bl	80094da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 fd71 	bl	8008afa <I2C_ITSlaveSeqCplt>
 8008018:	e01d      	b.n	8008056 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2210      	movs	r2, #16
 8008020:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8008022:	e096      	b.n	8008152 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2210      	movs	r2, #16
 800802a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008030:	f043 0204 	orr.w	r2, r3, #4
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <I2C_Slave_ISR_IT+0xe6>
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008044:	f040 8085 	bne.w	8008152 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800804c:	4619      	mov	r1, r3
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f001 f92c 	bl	80092ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008054:	e07d      	b.n	8008152 <I2C_Slave_ISR_IT+0x1f0>
 8008056:	e07c      	b.n	8008152 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	089b      	lsrs	r3, r3, #2
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d030      	beq.n	80080c6 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	089b      	lsrs	r3, r3, #2
 8008068:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800806c:	2b00      	cmp	r3, #0
 800806e:	d02a      	beq.n	80080c6 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d018      	beq.n	80080ac <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808c:	1c5a      	adds	r2, r3, #1
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008096:	3b01      	subs	r3, #1
 8008098:	b29a      	uxth	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d14f      	bne.n	8008156 <I2C_Slave_ISR_IT+0x1f4>
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080bc:	d04b      	beq.n	8008156 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f000 fd1b 	bl	8008afa <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80080c4:	e047      	b.n	8008156 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	08db      	lsrs	r3, r3, #3
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	08db      	lsrs	r3, r3, #3
 80080d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80080de:	6939      	ldr	r1, [r7, #16]
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fc49 	bl	8008978 <I2C_ITAddrCplt>
 80080e6:	e037      	b.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d031      	beq.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d02b      	beq.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d018      	beq.n	800813c <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811a:	1c5a      	adds	r2, r3, #1
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008124:	b29b      	uxth	r3, r3
 8008126:	3b01      	subs	r3, #1
 8008128:	b29a      	uxth	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008132:	3b01      	subs	r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	851a      	strh	r2, [r3, #40]	@ 0x28
 800813a:	e00d      	b.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008142:	d002      	beq.n	800814a <I2C_Slave_ISR_IT+0x1e8>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fcd5 	bl	8008afa <I2C_ITSlaveSeqCplt>
 8008150:	e002      	b.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8008156:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b088      	sub	sp, #32
 800816e:	af02      	add	r7, sp, #8
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <I2C_Master_ISR_DMA+0x1a>
 8008180:	2302      	movs	r3, #2
 8008182:	e0e1      	b.n	8008348 <I2C_Master_ISR_DMA+0x1de>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	d017      	beq.n	80081c8 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	091b      	lsrs	r3, r3, #4
 800819c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d011      	beq.n	80081c8 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2210      	movs	r2, #16
 80081aa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b0:	f043 0204 	orr.w	r2, r3, #4
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80081b8:	2120      	movs	r1, #32
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f001 fd4a 	bl	8009c54 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f001 f98a 	bl	80094da <I2C_Flush_TXDR>
 80081c6:	e0ba      	b.n	800833e <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	09db      	lsrs	r3, r3, #7
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d072      	beq.n	80082ba <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	099b      	lsrs	r3, r3, #6
 80081d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d06c      	beq.n	80082ba <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081ee:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d04e      	beq.n	8008298 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	b29b      	uxth	r3, r3
 8008202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008206:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800820c:	b29b      	uxth	r3, r3
 800820e:	2bff      	cmp	r3, #255	@ 0xff
 8008210:	d906      	bls.n	8008220 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	22ff      	movs	r2, #255	@ 0xff
 8008216:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8008218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	e010      	b.n	8008242 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008224:	b29a      	uxth	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8008232:	d003      	beq.n	800823c <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e002      	b.n	8008242 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800823c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008240:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008246:	b2da      	uxtb	r2, r3
 8008248:	8a79      	ldrh	r1, [r7, #18]
 800824a:	2300      	movs	r3, #0
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f001 fccd 	bl	8009bf0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	b29a      	uxth	r2, r3
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b22      	cmp	r3, #34	@ 0x22
 8008272:	d108      	bne.n	8008286 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008282:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008284:	e05b      	b.n	800833e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008294:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008296:	e052      	b.n	800833e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082a6:	d003      	beq.n	80082b0 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fbe9 	bl	8008a80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80082ae:	e046      	b.n	800833e <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80082b0:	2140      	movs	r1, #64	@ 0x40
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 fffa 	bl	80092ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80082b8:	e041      	b.n	800833e <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	099b      	lsrs	r3, r3, #6
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d029      	beq.n	800831a <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	099b      	lsrs	r3, r3, #6
 80082ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d023      	beq.n	800831a <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d119      	bne.n	8008310 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80082ea:	d027      	beq.n	800833c <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80082f4:	d108      	bne.n	8008308 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008304:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008306:	e019      	b.n	800833c <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fbb9 	bl	8008a80 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800830e:	e015      	b.n	800833c <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008310:	2140      	movs	r1, #64	@ 0x40
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 ffca 	bl	80092ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008318:	e010      	b.n	800833c <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	095b      	lsrs	r3, r3, #5
 800832a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fc3f 	bl	8008bb8 <I2C_ITMasterCplt>
 800833a:	e000      	b.n	800833e <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800833c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b088      	sub	sp, #32
 8008354:	af02      	add	r7, sp, #8
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800835c:	4b92      	ldr	r3, [pc, #584]	@ (80085a8 <I2C_Mem_ISR_DMA+0x258>)
 800835e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008366:	2b01      	cmp	r3, #1
 8008368:	d101      	bne.n	800836e <I2C_Mem_ISR_DMA+0x1e>
 800836a:	2302      	movs	r3, #2
 800836c:	e118      	b.n	80085a0 <I2C_Mem_ISR_DMA+0x250>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	091b      	lsrs	r3, r3, #4
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d017      	beq.n	80083b2 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800838a:	2b00      	cmp	r3, #0
 800838c:	d011      	beq.n	80083b2 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2210      	movs	r2, #16
 8008394:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800839a:	f043 0204 	orr.w	r2, r3, #4
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80083a2:	2120      	movs	r1, #32
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f001 fc55 	bl	8009c54 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f001 f895 	bl	80094da <I2C_Flush_TXDR>
 80083b0:	e0f1      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	f003 0301 	and.w	r3, r3, #1
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00f      	beq.n	80083de <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d009      	beq.n	80083de <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80083d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50
 80083dc:	e0db      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	09db      	lsrs	r3, r3, #7
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d060      	beq.n	80084ac <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	099b      	lsrs	r3, r3, #6
 80083ee:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d05a      	beq.n	80084ac <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80083f6:	2101      	movs	r1, #1
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f001 fcaf 	bl	8009d5c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80083fe:	2110      	movs	r1, #16
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fc27 	bl	8009c54 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800840a:	b29b      	uxth	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d048      	beq.n	80084a2 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008414:	b29b      	uxth	r3, r3
 8008416:	2bff      	cmp	r3, #255	@ 0xff
 8008418:	d910      	bls.n	800843c <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	22ff      	movs	r2, #255	@ 0xff
 800841e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008424:	b299      	uxth	r1, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800842a:	b2da      	uxtb	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f001 fbdb 	bl	8009bf0 <I2C_TransferConfig>
 800843a:	e011      	b.n	8008460 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008440:	b29a      	uxth	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844a:	b299      	uxth	r1, r3
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008450:	b2da      	uxtb	r2, r3
 8008452:	2300      	movs	r3, #0
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f001 fbc8 	bl	8009bf0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008464:	b29a      	uxth	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	b29a      	uxth	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b22      	cmp	r3, #34	@ 0x22
 800847c:	d108      	bne.n	8008490 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800848c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800848e:	e082      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800849e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80084a0:	e079      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084a2:	2140      	movs	r1, #64	@ 0x40
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 ff01 	bl	80092ac <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80084aa:	e074      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	099b      	lsrs	r3, r3, #6
 80084b0:	f003 0301 	and.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d05e      	beq.n	8008576 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	099b      	lsrs	r3, r3, #6
 80084bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d058      	beq.n	8008576 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80084c4:	2101      	movs	r1, #1
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f001 fc48 	bl	8009d5c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80084cc:	2110      	movs	r1, #16
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f001 fbc0 	bl	8009c54 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b22      	cmp	r3, #34	@ 0x22
 80084de:	d101      	bne.n	80084e4 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 80084e0:	4b32      	ldr	r3, [pc, #200]	@ (80085ac <I2C_Mem_ISR_DMA+0x25c>)
 80084e2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2bff      	cmp	r3, #255	@ 0xff
 80084ec:	d910      	bls.n	8008510 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	22ff      	movs	r2, #255	@ 0xff
 80084f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f8:	b299      	uxth	r1, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084fe:	b2da      	uxtb	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	9300      	str	r3, [sp, #0]
 8008504:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f001 fb71 	bl	8009bf0 <I2C_TransferConfig>
 800850e:	e011      	b.n	8008534 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851e:	b299      	uxth	r1, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008524:	b2da      	uxtb	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f001 fb5e 	bl	8009bf0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	b29a      	uxth	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b22      	cmp	r3, #34	@ 0x22
 8008550:	d108      	bne.n	8008564 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008560:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008562:	e018      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008572:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008574:	e00f      	b.n	8008596 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	095b      	lsrs	r3, r3, #5
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d009      	beq.n	8008596 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	095b      	lsrs	r3, r3, #5
 8008586:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 fb11 	bl	8008bb8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3718      	adds	r7, #24
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	80002000 	.word	0x80002000
 80085ac:	80002400 	.word	0x80002400

080085b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <I2C_Slave_ISR_DMA+0x24>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e1cc      	b.n	800896e <I2C_Slave_ISR_DMA+0x3be>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	095b      	lsrs	r3, r3, #5
 80085ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fba8 	bl	8008d4c <I2C_ITSlaveCplt>
 80085fc:	e1b2      	b.n	8008964 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	091b      	lsrs	r3, r3, #4
 8008602:	f003 0301 	and.w	r3, r3, #1
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 819c 	beq.w	8008944 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	091b      	lsrs	r3, r3, #4
 8008610:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8195 	beq.w	8008944 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	0b9b      	lsrs	r3, r3, #14
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	0bdb      	lsrs	r3, r3, #15
 800862a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 8181 	beq.w	8008936 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008638:	2b00      	cmp	r3, #0
 800863a:	d07c      	beq.n	8008736 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	0bdb      	lsrs	r3, r3, #15
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d076      	beq.n	8008736 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a75      	ldr	r2, [pc, #468]	@ (8008824 <I2C_Slave_ISR_DMA+0x274>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d059      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a73      	ldr	r2, [pc, #460]	@ (8008828 <I2C_Slave_ISR_DMA+0x278>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d053      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a71      	ldr	r2, [pc, #452]	@ (800882c <I2C_Slave_ISR_DMA+0x27c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d04d      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a6f      	ldr	r2, [pc, #444]	@ (8008830 <I2C_Slave_ISR_DMA+0x280>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d047      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a6d      	ldr	r2, [pc, #436]	@ (8008834 <I2C_Slave_ISR_DMA+0x284>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d041      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a6b      	ldr	r2, [pc, #428]	@ (8008838 <I2C_Slave_ISR_DMA+0x288>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d03b      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a69      	ldr	r2, [pc, #420]	@ (800883c <I2C_Slave_ISR_DMA+0x28c>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d035      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a67      	ldr	r2, [pc, #412]	@ (8008840 <I2C_Slave_ISR_DMA+0x290>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d02f      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a65      	ldr	r2, [pc, #404]	@ (8008844 <I2C_Slave_ISR_DMA+0x294>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d029      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a63      	ldr	r2, [pc, #396]	@ (8008848 <I2C_Slave_ISR_DMA+0x298>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d023      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a61      	ldr	r2, [pc, #388]	@ (800884c <I2C_Slave_ISR_DMA+0x29c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d01d      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a5f      	ldr	r2, [pc, #380]	@ (8008850 <I2C_Slave_ISR_DMA+0x2a0>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d017      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a5d      	ldr	r2, [pc, #372]	@ (8008854 <I2C_Slave_ISR_DMA+0x2a4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d011      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a5b      	ldr	r2, [pc, #364]	@ (8008858 <I2C_Slave_ISR_DMA+0x2a8>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00b      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a59      	ldr	r2, [pc, #356]	@ (800885c <I2C_Slave_ISR_DMA+0x2ac>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d005      	beq.n	8008708 <I2C_Slave_ISR_DMA+0x158>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a57      	ldr	r2, [pc, #348]	@ (8008860 <I2C_Slave_ISR_DMA+0x2b0>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d109      	bne.n	800871c <I2C_Slave_ISR_DMA+0x16c>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf0c      	ite	eq
 8008714:	2301      	moveq	r3, #1
 8008716:	2300      	movne	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	e008      	b.n	800872e <I2C_Slave_ISR_DMA+0x17e>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	bf0c      	ite	eq
 8008728:	2301      	moveq	r3, #1
 800872a:	2300      	movne	r3, #0
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 8008732:	2301      	movs	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 809f 	beq.w	800887e <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	0b9b      	lsrs	r3, r3, #14
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8098 	beq.w	800887e <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a33      	ldr	r2, [pc, #204]	@ (8008824 <I2C_Slave_ISR_DMA+0x274>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d059      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a31      	ldr	r2, [pc, #196]	@ (8008828 <I2C_Slave_ISR_DMA+0x278>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d053      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a2f      	ldr	r2, [pc, #188]	@ (800882c <I2C_Slave_ISR_DMA+0x27c>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d04d      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a2d      	ldr	r2, [pc, #180]	@ (8008830 <I2C_Slave_ISR_DMA+0x280>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d047      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a2b      	ldr	r2, [pc, #172]	@ (8008834 <I2C_Slave_ISR_DMA+0x284>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d041      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a29      	ldr	r2, [pc, #164]	@ (8008838 <I2C_Slave_ISR_DMA+0x288>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d03b      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a27      	ldr	r2, [pc, #156]	@ (800883c <I2C_Slave_ISR_DMA+0x28c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d035      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a25      	ldr	r2, [pc, #148]	@ (8008840 <I2C_Slave_ISR_DMA+0x290>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d02f      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a23      	ldr	r2, [pc, #140]	@ (8008844 <I2C_Slave_ISR_DMA+0x294>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d029      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a21      	ldr	r2, [pc, #132]	@ (8008848 <I2C_Slave_ISR_DMA+0x298>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d023      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1f      	ldr	r2, [pc, #124]	@ (800884c <I2C_Slave_ISR_DMA+0x29c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d01d      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008850 <I2C_Slave_ISR_DMA+0x2a0>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d017      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008854 <I2C_Slave_ISR_DMA+0x2a4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d011      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a19      	ldr	r2, [pc, #100]	@ (8008858 <I2C_Slave_ISR_DMA+0x2a8>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00b      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a17      	ldr	r2, [pc, #92]	@ (800885c <I2C_Slave_ISR_DMA+0x2ac>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d005      	beq.n	800880e <I2C_Slave_ISR_DMA+0x25e>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a15      	ldr	r2, [pc, #84]	@ (8008860 <I2C_Slave_ISR_DMA+0x2b0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d12a      	bne.n	8008864 <I2C_Slave_ISR_DMA+0x2b4>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	bf0c      	ite	eq
 800881a:	2301      	moveq	r3, #1
 800881c:	2300      	movne	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	e029      	b.n	8008876 <I2C_Slave_ISR_DMA+0x2c6>
 8008822:	bf00      	nop
 8008824:	40020010 	.word	0x40020010
 8008828:	40020028 	.word	0x40020028
 800882c:	40020040 	.word	0x40020040
 8008830:	40020058 	.word	0x40020058
 8008834:	40020070 	.word	0x40020070
 8008838:	40020088 	.word	0x40020088
 800883c:	400200a0 	.word	0x400200a0
 8008840:	400200b8 	.word	0x400200b8
 8008844:	40020410 	.word	0x40020410
 8008848:	40020428 	.word	0x40020428
 800884c:	40020440 	.word	0x40020440
 8008850:	40020458 	.word	0x40020458
 8008854:	40020470 	.word	0x40020470
 8008858:	40020488 	.word	0x40020488
 800885c:	400204a0 	.word	0x400204a0
 8008860:	400204b8 	.word	0x400204b8
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	bf0c      	ite	eq
 8008870:	2301      	moveq	r3, #1
 8008872:	2300      	movne	r3, #0
 8008874:	b2db      	uxtb	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800887a:	2301      	movs	r3, #1
 800887c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d128      	bne.n	80088d6 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b28      	cmp	r3, #40	@ 0x28
 800888e:	d108      	bne.n	80088a2 <I2C_Slave_ISR_DMA+0x2f2>
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008896:	d104      	bne.n	80088a2 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008898:	68b9      	ldr	r1, [r7, #8]
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fcb0 	bl	8009200 <I2C_ITListenCplt>
 80088a0:	e048      	b.n	8008934 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b29      	cmp	r3, #41	@ 0x29
 80088ac:	d10e      	bne.n	80088cc <I2C_Slave_ISR_DMA+0x31c>
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088b4:	d00a      	beq.n	80088cc <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2210      	movs	r2, #16
 80088bc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f000 fe0b 	bl	80094da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 f918 	bl	8008afa <I2C_ITSlaveSeqCplt>
 80088ca:	e033      	b.n	8008934 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2210      	movs	r2, #16
 80088d2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80088d4:	e034      	b.n	8008940 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2210      	movs	r2, #16
 80088dc:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088e2:	f043 0204 	orr.w	r2, r3, #4
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088f0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <I2C_Slave_ISR_DMA+0x350>
 80088f8:	69bb      	ldr	r3, [r7, #24]
 80088fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088fe:	d11f      	bne.n	8008940 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	2b21      	cmp	r3, #33	@ 0x21
 8008904:	d002      	beq.n	800890c <I2C_Slave_ISR_DMA+0x35c>
 8008906:	7dfb      	ldrb	r3, [r7, #23]
 8008908:	2b29      	cmp	r3, #41	@ 0x29
 800890a:	d103      	bne.n	8008914 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2221      	movs	r2, #33	@ 0x21
 8008910:	631a      	str	r2, [r3, #48]	@ 0x30
 8008912:	e008      	b.n	8008926 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008914:	7dfb      	ldrb	r3, [r7, #23]
 8008916:	2b22      	cmp	r3, #34	@ 0x22
 8008918:	d002      	beq.n	8008920 <I2C_Slave_ISR_DMA+0x370>
 800891a:	7dfb      	ldrb	r3, [r7, #23]
 800891c:	2b2a      	cmp	r3, #42	@ 0x2a
 800891e:	d102      	bne.n	8008926 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2222      	movs	r2, #34	@ 0x22
 8008924:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892a:	4619      	mov	r1, r3
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fcbd 	bl	80092ac <I2C_ITError>
      if (treatdmanack == 1U)
 8008932:	e005      	b.n	8008940 <I2C_Slave_ISR_DMA+0x390>
 8008934:	e004      	b.n	8008940 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2210      	movs	r2, #16
 800893c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800893e:	e011      	b.n	8008964 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 8008940:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008942:	e00f      	b.n	8008964 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	08db      	lsrs	r3, r3, #3
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d009      	beq.n	8008964 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f80a 	bl	8008978 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3720      	adds	r7, #32
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop

08008978 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800898e:	2b28      	cmp	r3, #40	@ 0x28
 8008990:	d16a      	bne.n	8008a68 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	0c1b      	lsrs	r3, r3, #16
 800899a:	b2db      	uxtb	r3, r3
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	0c1b      	lsrs	r3, r3, #16
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80089b0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089be:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80089cc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	d138      	bne.n	8008a48 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80089d6:	897b      	ldrh	r3, [r7, #10]
 80089d8:	09db      	lsrs	r3, r3, #7
 80089da:	b29a      	uxth	r2, r3
 80089dc:	89bb      	ldrh	r3, [r7, #12]
 80089de:	4053      	eors	r3, r2
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f003 0306 	and.w	r3, r3, #6
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d11c      	bne.n	8008a24 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80089ea:	897b      	ldrh	r3, [r7, #10]
 80089ec:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d13b      	bne.n	8008a78 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2208      	movs	r2, #8
 8008a0c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a16:	89ba      	ldrh	r2, [r7, #12]
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff f92c 	bl	8007c7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008a22:	e029      	b.n	8008a78 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008a24:	893b      	ldrh	r3, [r7, #8]
 8008a26:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f001 f995 	bl	8009d5c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a3a:	89ba      	ldrh	r2, [r7, #12]
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f91a 	bl	8007c7a <HAL_I2C_AddrCallback>
}
 8008a46:	e017      	b.n	8008a78 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008a48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 f985 	bl	8009d5c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008a5a:	89ba      	ldrh	r2, [r7, #12]
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f7ff f90a 	bl	8007c7a <HAL_I2C_AddrCallback>
}
 8008a66:	e007      	b.n	8008a78 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8008a78:	bf00      	nop
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b21      	cmp	r3, #33	@ 0x21
 8008a9a:	d115      	bne.n	8008ac8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2211      	movs	r2, #17
 8008aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f001 f952 	bl	8009d5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff f8b2 	bl	8007c2a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ac6:	e014      	b.n	8008af2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2220      	movs	r2, #32
 8008acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2212      	movs	r2, #18
 8008ad4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008adc:	2102      	movs	r1, #2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f001 f93c 	bl	8009d5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7ff f8a6 	bl	8007c3e <HAL_I2C_MasterRxCpltCallback>
}
 8008af2:	bf00      	nop
 8008af4:	3708      	adds	r7, #8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b084      	sub	sp, #16
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	0b9b      	lsrs	r3, r3, #14
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d008      	beq.n	8008b30 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b2c:	601a      	str	r2, [r3, #0]
 8008b2e:	e00d      	b.n	8008b4c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0bdb      	lsrs	r3, r3, #15
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008b4a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b29      	cmp	r3, #41	@ 0x29
 8008b56:	d112      	bne.n	8008b7e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2228      	movs	r2, #40	@ 0x28
 8008b5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2221      	movs	r2, #33	@ 0x21
 8008b64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008b66:	2101      	movs	r1, #1
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 f8f7 	bl	8009d5c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff f86b 	bl	8007c52 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b7c:	e017      	b.n	8008bae <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b88:	d111      	bne.n	8008bae <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2228      	movs	r2, #40	@ 0x28
 8008b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2222      	movs	r2, #34	@ 0x22
 8008b96:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008b98:	2102      	movs	r1, #2
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 f8de 	bl	8009d5c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff f85c 	bl	8007c66 <HAL_I2C_SlaveRxCpltCallback>
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b21      	cmp	r3, #33	@ 0x21
 8008bd8:	d107      	bne.n	8008bea <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008bda:	2101      	movs	r1, #1
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f001 f8bd 	bl	8009d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2211      	movs	r2, #17
 8008be6:	631a      	str	r2, [r3, #48]	@ 0x30
 8008be8:	e00c      	b.n	8008c04 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bf0:	b2db      	uxtb	r3, r3
 8008bf2:	2b22      	cmp	r3, #34	@ 0x22
 8008bf4:	d106      	bne.n	8008c04 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008bf6:	2102      	movs	r1, #2
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f001 f8af 	bl	8009d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2212      	movs	r2, #18
 8008c02:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6859      	ldr	r1, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8008d44 <I2C_ITMasterCplt+0x18c>)
 8008c10:	400b      	ands	r3, r1
 8008c12:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8008d48 <I2C_ITMasterCplt+0x190>)
 8008c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	091b      	lsrs	r3, r3, #4
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d009      	beq.n	8008c40 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2210      	movs	r2, #16
 8008c32:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c38:	f043 0204 	orr.w	r2, r3, #4
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b60      	cmp	r3, #96	@ 0x60
 8008c4a:	d10b      	bne.n	8008c64 <I2C_ITMasterCplt+0xac>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	089b      	lsrs	r3, r3, #2
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008c62:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc38 	bl	80094da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b60      	cmp	r3, #96	@ 0x60
 8008c7a:	d002      	beq.n	8008c82 <I2C_ITMasterCplt+0xca>
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d006      	beq.n	8008c90 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fb0f 	bl	80092ac <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c8e:	e054      	b.n	8008d3a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b21      	cmp	r3, #33	@ 0x21
 8008c9a:	d124      	bne.n	8008ce6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b40      	cmp	r3, #64	@ 0x40
 8008cb4:	d10b      	bne.n	8008cce <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7fe ffef 	bl	8007caa <HAL_I2C_MemTxCpltCallback>
}
 8008ccc:	e035      	b.n	8008d3a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fe ffa3 	bl	8007c2a <HAL_I2C_MasterTxCpltCallback>
}
 8008ce4:	e029      	b.n	8008d3a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b22      	cmp	r3, #34	@ 0x22
 8008cf0:	d123      	bne.n	8008d3a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b40      	cmp	r3, #64	@ 0x40
 8008d0a:	d10b      	bne.n	8008d24 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7fe ffce 	bl	8007cbe <HAL_I2C_MemRxCpltCallback>
}
 8008d22:	e00a      	b.n	8008d3a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7fe ff82 	bl	8007c3e <HAL_I2C_MasterRxCpltCallback>
}
 8008d3a:	bf00      	nop
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	fe00e800 	.word	0xfe00e800
 8008d48:	ffff0000 	.word	0xffff0000

08008d4c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d66:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d6e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2220      	movs	r2, #32
 8008d76:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	2b21      	cmp	r3, #33	@ 0x21
 8008d7c:	d002      	beq.n	8008d84 <I2C_ITSlaveCplt+0x38>
 8008d7e:	7afb      	ldrb	r3, [r7, #11]
 8008d80:	2b29      	cmp	r3, #41	@ 0x29
 8008d82:	d108      	bne.n	8008d96 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008d84:	f248 0101 	movw	r1, #32769	@ 0x8001
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 ffe7 	bl	8009d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2221      	movs	r2, #33	@ 0x21
 8008d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d94:	e019      	b.n	8008dca <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	2b22      	cmp	r3, #34	@ 0x22
 8008d9a:	d002      	beq.n	8008da2 <I2C_ITSlaveCplt+0x56>
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
 8008d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008da0:	d108      	bne.n	8008db4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008da2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 ffd8 	bl	8009d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2222      	movs	r2, #34	@ 0x22
 8008db0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008db2:	e00a      	b.n	8008dca <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008db4:	7afb      	ldrb	r3, [r7, #11]
 8008db6:	2b28      	cmp	r3, #40	@ 0x28
 8008db8:	d107      	bne.n	8008dca <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008dba:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 ffcc 	bl	8009d5c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008dd8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6859      	ldr	r1, [r3, #4]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	4b80      	ldr	r3, [pc, #512]	@ (8008fe8 <I2C_ITSlaveCplt+0x29c>)
 8008de6:	400b      	ands	r3, r1
 8008de8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fb75 	bl	80094da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	0b9b      	lsrs	r3, r3, #14
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d07a      	beq.n	8008ef2 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e0a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 8112 	beq.w	800903a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a73      	ldr	r2, [pc, #460]	@ (8008fec <I2C_ITSlaveCplt+0x2a0>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d059      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a71      	ldr	r2, [pc, #452]	@ (8008ff0 <I2C_ITSlaveCplt+0x2a4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d053      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a6f      	ldr	r2, [pc, #444]	@ (8008ff4 <I2C_ITSlaveCplt+0x2a8>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d04d      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a6d      	ldr	r2, [pc, #436]	@ (8008ff8 <I2C_ITSlaveCplt+0x2ac>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d047      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8008ffc <I2C_ITSlaveCplt+0x2b0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d041      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a69      	ldr	r2, [pc, #420]	@ (8009000 <I2C_ITSlaveCplt+0x2b4>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d03b      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a67      	ldr	r2, [pc, #412]	@ (8009004 <I2C_ITSlaveCplt+0x2b8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d035      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a65      	ldr	r2, [pc, #404]	@ (8009008 <I2C_ITSlaveCplt+0x2bc>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d02f      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a63      	ldr	r2, [pc, #396]	@ (800900c <I2C_ITSlaveCplt+0x2c0>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d029      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a61      	ldr	r2, [pc, #388]	@ (8009010 <I2C_ITSlaveCplt+0x2c4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d023      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a5f      	ldr	r2, [pc, #380]	@ (8009014 <I2C_ITSlaveCplt+0x2c8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d01d      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8009018 <I2C_ITSlaveCplt+0x2cc>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d017      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a5b      	ldr	r2, [pc, #364]	@ (800901c <I2C_ITSlaveCplt+0x2d0>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d011      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a59      	ldr	r2, [pc, #356]	@ (8009020 <I2C_ITSlaveCplt+0x2d4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d00b      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a57      	ldr	r2, [pc, #348]	@ (8009024 <I2C_ITSlaveCplt+0x2d8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d005      	beq.n	8008ed6 <I2C_ITSlaveCplt+0x18a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a55      	ldr	r2, [pc, #340]	@ (8009028 <I2C_ITSlaveCplt+0x2dc>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d105      	bne.n	8008ee2 <I2C_ITSlaveCplt+0x196>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	e004      	b.n	8008eec <I2C_ITSlaveCplt+0x1a0>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8008ef0:	e0a3      	b.n	800903a <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	0bdb      	lsrs	r3, r3, #15
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 809d 	beq.w	800903a <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008f0e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8090 	beq.w	800903a <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a32      	ldr	r2, [pc, #200]	@ (8008fec <I2C_ITSlaveCplt+0x2a0>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d059      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a30      	ldr	r2, [pc, #192]	@ (8008ff0 <I2C_ITSlaveCplt+0x2a4>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d053      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a2e      	ldr	r2, [pc, #184]	@ (8008ff4 <I2C_ITSlaveCplt+0x2a8>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d04d      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a2c      	ldr	r2, [pc, #176]	@ (8008ff8 <I2C_ITSlaveCplt+0x2ac>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d047      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a2a      	ldr	r2, [pc, #168]	@ (8008ffc <I2C_ITSlaveCplt+0x2b0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d041      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a28      	ldr	r2, [pc, #160]	@ (8009000 <I2C_ITSlaveCplt+0x2b4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d03b      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a26      	ldr	r2, [pc, #152]	@ (8009004 <I2C_ITSlaveCplt+0x2b8>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d035      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a24      	ldr	r2, [pc, #144]	@ (8009008 <I2C_ITSlaveCplt+0x2bc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d02f      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a22      	ldr	r2, [pc, #136]	@ (800900c <I2C_ITSlaveCplt+0x2c0>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d029      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a20      	ldr	r2, [pc, #128]	@ (8009010 <I2C_ITSlaveCplt+0x2c4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d023      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a1e      	ldr	r2, [pc, #120]	@ (8009014 <I2C_ITSlaveCplt+0x2c8>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d01d      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8009018 <I2C_ITSlaveCplt+0x2cc>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d017      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800901c <I2C_ITSlaveCplt+0x2d0>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d011      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a18      	ldr	r2, [pc, #96]	@ (8009020 <I2C_ITSlaveCplt+0x2d4>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00b      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a16      	ldr	r2, [pc, #88]	@ (8009024 <I2C_ITSlaveCplt+0x2d8>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d005      	beq.n	8008fda <I2C_ITSlaveCplt+0x28e>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a14      	ldr	r2, [pc, #80]	@ (8009028 <I2C_ITSlaveCplt+0x2dc>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d128      	bne.n	800902c <I2C_ITSlaveCplt+0x2e0>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	e027      	b.n	8009036 <I2C_ITSlaveCplt+0x2ea>
 8008fe6:	bf00      	nop
 8008fe8:	fe00e800 	.word	0xfe00e800
 8008fec:	40020010 	.word	0x40020010
 8008ff0:	40020028 	.word	0x40020028
 8008ff4:	40020040 	.word	0x40020040
 8008ff8:	40020058 	.word	0x40020058
 8008ffc:	40020070 	.word	0x40020070
 8009000:	40020088 	.word	0x40020088
 8009004:	400200a0 	.word	0x400200a0
 8009008:	400200b8 	.word	0x400200b8
 800900c:	40020410 	.word	0x40020410
 8009010:	40020428 	.word	0x40020428
 8009014:	40020440 	.word	0x40020440
 8009018:	40020458 	.word	0x40020458
 800901c:	40020470 	.word	0x40020470
 8009020:	40020488 	.word	0x40020488
 8009024:	400204a0 	.word	0x400204a0
 8009028:	400204b8 	.word	0x400204b8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	b29b      	uxth	r3, r3
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	089b      	lsrs	r3, r3, #2
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	2b00      	cmp	r3, #0
 8009044:	d020      	beq.n	8009088 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f023 0304 	bic.w	r3, r3, #4
 800904c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00c      	beq.n	8009088 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800907e:	b29b      	uxth	r3, r3
 8009080:	3b01      	subs	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b00      	cmp	r3, #0
 8009090:	d005      	beq.n	800909e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009096:	f043 0204 	orr.w	r2, r3, #4
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	091b      	lsrs	r3, r3, #4
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d04a      	beq.n	8009140 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	091b      	lsrs	r3, r3, #4
 80090ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d044      	beq.n	8009140 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d128      	bne.n	8009112 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b28      	cmp	r3, #40	@ 0x28
 80090ca:	d108      	bne.n	80090de <I2C_ITSlaveCplt+0x392>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80090d2:	d104      	bne.n	80090de <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80090d4:	6979      	ldr	r1, [r7, #20]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f892 	bl	8009200 <I2C_ITListenCplt>
 80090dc:	e030      	b.n	8009140 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b29      	cmp	r3, #41	@ 0x29
 80090e8:	d10e      	bne.n	8009108 <I2C_ITSlaveCplt+0x3bc>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80090f0:	d00a      	beq.n	8009108 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2210      	movs	r2, #16
 80090f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f9ed 	bl	80094da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff fcfa 	bl	8008afa <I2C_ITSlaveSeqCplt>
 8009106:	e01b      	b.n	8009140 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2210      	movs	r2, #16
 800910e:	61da      	str	r2, [r3, #28]
 8009110:	e016      	b.n	8009140 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2210      	movs	r2, #16
 8009118:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800911e:	f043 0204 	orr.w	r2, r3, #4
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <I2C_ITSlaveCplt+0x3e8>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009132:	d105      	bne.n	8009140 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8b6 	bl	80092ac <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009152:	2b00      	cmp	r3, #0
 8009154:	d010      	beq.n	8009178 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f8a5 	bl	80092ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b28      	cmp	r3, #40	@ 0x28
 800916c:	d141      	bne.n	80091f2 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800916e:	6979      	ldr	r1, [r7, #20]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f845 	bl	8009200 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009176:	e03c      	b.n	80091f2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800917c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009180:	d014      	beq.n	80091ac <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fcb9 	bl	8008afa <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a1c      	ldr	r2, [pc, #112]	@ (80091fc <I2C_ITSlaveCplt+0x4b0>)
 800918c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f7fe fd76 	bl	8007c96 <HAL_I2C_ListenCpltCallback>
}
 80091aa:	e022      	b.n	80091f2 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	2b22      	cmp	r3, #34	@ 0x22
 80091b6:	d10e      	bne.n	80091d6 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fe fd49 	bl	8007c66 <HAL_I2C_SlaveRxCpltCallback>
}
 80091d4:	e00d      	b.n	80091f2 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7fe fd30 	bl	8007c52 <HAL_I2C_SlaveTxCpltCallback>
}
 80091f2:	bf00      	nop
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	ffff0000 	.word	0xffff0000

08009200 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a26      	ldr	r2, [pc, #152]	@ (80092a8 <I2C_ITListenCplt+0xa8>)
 800920e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	089b      	lsrs	r3, r3, #2
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b00      	cmp	r3, #0
 8009236:	d022      	beq.n	800927e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009254:	2b00      	cmp	r3, #0
 8009256:	d012      	beq.n	800927e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800925c:	3b01      	subs	r3, #1
 800925e:	b29a      	uxth	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009268:	b29b      	uxth	r3, r3
 800926a:	3b01      	subs	r3, #1
 800926c:	b29a      	uxth	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009276:	f043 0204 	orr.w	r2, r3, #4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800927e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fd6a 	bl	8009d5c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2210      	movs	r2, #16
 800928e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7fe fcfc 	bl	8007c96 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	ffff0000 	.word	0xffff0000

080092ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092bc:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a6d      	ldr	r2, [pc, #436]	@ (8009480 <I2C_ITError+0x1d4>)
 80092ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b28      	cmp	r3, #40	@ 0x28
 80092e2:	d005      	beq.n	80092f0 <I2C_ITError+0x44>
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	2b29      	cmp	r3, #41	@ 0x29
 80092e8:	d002      	beq.n	80092f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ee:	d10b      	bne.n	8009308 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80092f0:	2103      	movs	r1, #3
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fd32 	bl	8009d5c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2228      	movs	r2, #40	@ 0x28
 80092fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a60      	ldr	r2, [pc, #384]	@ (8009484 <I2C_ITError+0x1d8>)
 8009304:	635a      	str	r2, [r3, #52]	@ 0x34
 8009306:	e030      	b.n	800936a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009308:	f248 0103 	movw	r1, #32771	@ 0x8003
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fd25 	bl	8009d5c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f8e1 	bl	80094da <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800931e:	b2db      	uxtb	r3, r3
 8009320:	2b60      	cmp	r3, #96	@ 0x60
 8009322:	d01f      	beq.n	8009364 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	f003 0320 	and.w	r3, r3, #32
 8009336:	2b20      	cmp	r3, #32
 8009338:	d114      	bne.n	8009364 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	699b      	ldr	r3, [r3, #24]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b10      	cmp	r3, #16
 8009346:	d109      	bne.n	800935c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2210      	movs	r2, #16
 800934e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009354:	f043 0204 	orr.w	r2, r3, #4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2220      	movs	r2, #32
 8009362:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009374:	2b00      	cmp	r3, #0
 8009376:	d039      	beq.n	80093ec <I2C_ITError+0x140>
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b11      	cmp	r3, #17
 800937c:	d002      	beq.n	8009384 <I2C_ITError+0xd8>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b21      	cmp	r3, #33	@ 0x21
 8009382:	d133      	bne.n	80093ec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800938e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009392:	d107      	bne.n	80093a4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80093a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fd fb17 	bl	80069dc <HAL_DMA_GetState>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d017      	beq.n	80093e4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b8:	4a33      	ldr	r2, [pc, #204]	@ (8009488 <I2C_ITError+0x1dc>)
 80093ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fc f997 	bl	80056fc <HAL_DMA_Abort_IT>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d04d      	beq.n	8009470 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80093de:	4610      	mov	r0, r2
 80093e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093e2:	e045      	b.n	8009470 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f851 	bl	800948c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093ea:	e041      	b.n	8009470 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d039      	beq.n	8009468 <I2C_ITError+0x1bc>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	2b12      	cmp	r3, #18
 80093f8:	d002      	beq.n	8009400 <I2C_ITError+0x154>
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	2b22      	cmp	r3, #34	@ 0x22
 80093fe:	d133      	bne.n	8009468 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800940a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800940e:	d107      	bne.n	8009420 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800941e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009424:	4618      	mov	r0, r3
 8009426:	f7fd fad9 	bl	80069dc <HAL_DMA_GetState>
 800942a:	4603      	mov	r3, r0
 800942c:	2b01      	cmp	r3, #1
 800942e:	d017      	beq.n	8009460 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009434:	4a14      	ldr	r2, [pc, #80]	@ (8009488 <I2C_ITError+0x1dc>)
 8009436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009444:	4618      	mov	r0, r3
 8009446:	f7fc f959 	bl	80056fc <HAL_DMA_Abort_IT>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d011      	beq.n	8009474 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800945a:	4610      	mov	r0, r2
 800945c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800945e:	e009      	b.n	8009474 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f813 	bl	800948c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009466:	e005      	b.n	8009474 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f80f 	bl	800948c <I2C_TreatErrorCallback>
  }
}
 800946e:	e002      	b.n	8009476 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009470:	bf00      	nop
 8009472:	e000      	b.n	8009476 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009474:	bf00      	nop
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	ffff0000 	.word	0xffff0000
 8009484:	08007f63 	.word	0x08007f63
 8009488:	0800982d 	.word	0x0800982d

0800948c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b60      	cmp	r3, #96	@ 0x60
 800949e:	d10e      	bne.n	80094be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7fe fc15 	bl	8007ce6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80094bc:	e009      	b.n	80094d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7fe fc00 	bl	8007cd2 <HAL_I2C_ErrorCallback>
}
 80094d2:	bf00      	nop
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f003 0302 	and.w	r3, r3, #2
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d103      	bne.n	80094f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2200      	movs	r2, #0
 80094f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b01      	cmp	r3, #1
 8009504:	d007      	beq.n	8009516 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	699a      	ldr	r2, [r3, #24]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f042 0201 	orr.w	r2, r2, #1
 8009514:	619a      	str	r2, [r3, #24]
  }
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr

08009522 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b084      	sub	sp, #16
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800953e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d104      	bne.n	8009554 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800954a:	2120      	movs	r1, #32
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fb81 	bl	8009c54 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8009552:	e02d      	b.n	80095b0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009566:	b29b      	uxth	r3, r3
 8009568:	2bff      	cmp	r3, #255	@ 0xff
 800956a:	d903      	bls.n	8009574 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	22ff      	movs	r2, #255	@ 0xff
 8009570:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009572:	e004      	b.n	800957e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009586:	4619      	mov	r1, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3328      	adds	r3, #40	@ 0x28
 800958e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8009594:	f7fb fb2a 	bl	8004bec <HAL_DMA_Start_IT>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d004      	beq.n	80095a8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800959e:	2110      	movs	r1, #16
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff fe83 	bl	80092ac <I2C_ITError>
}
 80095a6:	e003      	b.n	80095b0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80095a8:	2140      	movs	r1, #64	@ 0x40
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 fb52 	bl	8009c54 <I2C_Enable_IRQ>
}
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80095c0:	2300      	movs	r3, #0
 80095c2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d076      	beq.n	80096c0 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a71      	ldr	r2, [pc, #452]	@ (80097a0 <I2C_DMAError+0x1e8>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d059      	beq.n	8009692 <I2C_DMAError+0xda>
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a6f      	ldr	r2, [pc, #444]	@ (80097a4 <I2C_DMAError+0x1ec>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d053      	beq.n	8009692 <I2C_DMAError+0xda>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a6d      	ldr	r2, [pc, #436]	@ (80097a8 <I2C_DMAError+0x1f0>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d04d      	beq.n	8009692 <I2C_DMAError+0xda>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a6b      	ldr	r2, [pc, #428]	@ (80097ac <I2C_DMAError+0x1f4>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d047      	beq.n	8009692 <I2C_DMAError+0xda>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a69      	ldr	r2, [pc, #420]	@ (80097b0 <I2C_DMAError+0x1f8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d041      	beq.n	8009692 <I2C_DMAError+0xda>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a67      	ldr	r2, [pc, #412]	@ (80097b4 <I2C_DMAError+0x1fc>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d03b      	beq.n	8009692 <I2C_DMAError+0xda>
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a65      	ldr	r2, [pc, #404]	@ (80097b8 <I2C_DMAError+0x200>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d035      	beq.n	8009692 <I2C_DMAError+0xda>
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a63      	ldr	r2, [pc, #396]	@ (80097bc <I2C_DMAError+0x204>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02f      	beq.n	8009692 <I2C_DMAError+0xda>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a61      	ldr	r2, [pc, #388]	@ (80097c0 <I2C_DMAError+0x208>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d029      	beq.n	8009692 <I2C_DMAError+0xda>
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a5f      	ldr	r2, [pc, #380]	@ (80097c4 <I2C_DMAError+0x20c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d023      	beq.n	8009692 <I2C_DMAError+0xda>
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a5d      	ldr	r2, [pc, #372]	@ (80097c8 <I2C_DMAError+0x210>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01d      	beq.n	8009692 <I2C_DMAError+0xda>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a5b      	ldr	r2, [pc, #364]	@ (80097cc <I2C_DMAError+0x214>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d017      	beq.n	8009692 <I2C_DMAError+0xda>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a59      	ldr	r2, [pc, #356]	@ (80097d0 <I2C_DMAError+0x218>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d011      	beq.n	8009692 <I2C_DMAError+0xda>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a57      	ldr	r2, [pc, #348]	@ (80097d4 <I2C_DMAError+0x21c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d00b      	beq.n	8009692 <I2C_DMAError+0xda>
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a55      	ldr	r2, [pc, #340]	@ (80097d8 <I2C_DMAError+0x220>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d005      	beq.n	8009692 <I2C_DMAError+0xda>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a53      	ldr	r2, [pc, #332]	@ (80097dc <I2C_DMAError+0x224>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d109      	bne.n	80096a6 <I2C_DMAError+0xee>
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	bf0c      	ite	eq
 800969e:	2301      	moveq	r3, #1
 80096a0:	2300      	movne	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	e008      	b.n	80096b8 <I2C_DMAError+0x100>
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 80096bc:	2301      	movs	r3, #1
 80096be:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f000 8098 	beq.w	80097fa <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a33      	ldr	r2, [pc, #204]	@ (80097a0 <I2C_DMAError+0x1e8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d059      	beq.n	800978a <I2C_DMAError+0x1d2>
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a31      	ldr	r2, [pc, #196]	@ (80097a4 <I2C_DMAError+0x1ec>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d053      	beq.n	800978a <I2C_DMAError+0x1d2>
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a2f      	ldr	r2, [pc, #188]	@ (80097a8 <I2C_DMAError+0x1f0>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d04d      	beq.n	800978a <I2C_DMAError+0x1d2>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a2d      	ldr	r2, [pc, #180]	@ (80097ac <I2C_DMAError+0x1f4>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d047      	beq.n	800978a <I2C_DMAError+0x1d2>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a2b      	ldr	r2, [pc, #172]	@ (80097b0 <I2C_DMAError+0x1f8>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d041      	beq.n	800978a <I2C_DMAError+0x1d2>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a29      	ldr	r2, [pc, #164]	@ (80097b4 <I2C_DMAError+0x1fc>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d03b      	beq.n	800978a <I2C_DMAError+0x1d2>
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a27      	ldr	r2, [pc, #156]	@ (80097b8 <I2C_DMAError+0x200>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d035      	beq.n	800978a <I2C_DMAError+0x1d2>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a25      	ldr	r2, [pc, #148]	@ (80097bc <I2C_DMAError+0x204>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d02f      	beq.n	800978a <I2C_DMAError+0x1d2>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a23      	ldr	r2, [pc, #140]	@ (80097c0 <I2C_DMAError+0x208>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d029      	beq.n	800978a <I2C_DMAError+0x1d2>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a21      	ldr	r2, [pc, #132]	@ (80097c4 <I2C_DMAError+0x20c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d023      	beq.n	800978a <I2C_DMAError+0x1d2>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1f      	ldr	r2, [pc, #124]	@ (80097c8 <I2C_DMAError+0x210>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01d      	beq.n	800978a <I2C_DMAError+0x1d2>
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a1d      	ldr	r2, [pc, #116]	@ (80097cc <I2C_DMAError+0x214>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d017      	beq.n	800978a <I2C_DMAError+0x1d2>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a1b      	ldr	r2, [pc, #108]	@ (80097d0 <I2C_DMAError+0x218>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d011      	beq.n	800978a <I2C_DMAError+0x1d2>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a19      	ldr	r2, [pc, #100]	@ (80097d4 <I2C_DMAError+0x21c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d00b      	beq.n	800978a <I2C_DMAError+0x1d2>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a17      	ldr	r2, [pc, #92]	@ (80097d8 <I2C_DMAError+0x220>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d005      	beq.n	800978a <I2C_DMAError+0x1d2>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a15      	ldr	r2, [pc, #84]	@ (80097dc <I2C_DMAError+0x224>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d12a      	bne.n	80097e0 <I2C_DMAError+0x228>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	bf0c      	ite	eq
 8009796:	2301      	moveq	r3, #1
 8009798:	2300      	movne	r3, #0
 800979a:	b2db      	uxtb	r3, r3
 800979c:	e029      	b.n	80097f2 <I2C_DMAError+0x23a>
 800979e:	bf00      	nop
 80097a0:	40020010 	.word	0x40020010
 80097a4:	40020028 	.word	0x40020028
 80097a8:	40020040 	.word	0x40020040
 80097ac:	40020058 	.word	0x40020058
 80097b0:	40020070 	.word	0x40020070
 80097b4:	40020088 	.word	0x40020088
 80097b8:	400200a0 	.word	0x400200a0
 80097bc:	400200b8 	.word	0x400200b8
 80097c0:	40020410 	.word	0x40020410
 80097c4:	40020428 	.word	0x40020428
 80097c8:	40020440 	.word	0x40020440
 80097cc:	40020458 	.word	0x40020458
 80097d0:	40020470 	.word	0x40020470
 80097d4:	40020488 	.word	0x40020488
 80097d8:	400204a0 	.word	0x400204a0
 80097dc:	400204b8 	.word	0x400204b8
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	bf0c      	ite	eq
 80097ec:	2301      	moveq	r3, #1
 80097ee:	2300      	movne	r3, #0
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d001      	beq.n	80097fa <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 80097f6:	2301      	movs	r3, #1
 80097f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7fd f8fc 	bl	80069f8 <HAL_DMA_GetError>
 8009800:	4603      	mov	r3, r0
 8009802:	2b02      	cmp	r3, #2
 8009804:	d00e      	beq.n	8009824 <I2C_DMAError+0x26c>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00b      	beq.n	8009824 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	685a      	ldr	r2, [r3, #4]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800981a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800981c:	2110      	movs	r1, #16
 800981e:	68b8      	ldr	r0, [r7, #8]
 8009820:	f7ff fd44 	bl	80092ac <I2C_ITError>
  }
}
 8009824:	bf00      	nop
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009838:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983e:	2b00      	cmp	r3, #0
 8009840:	d003      	beq.n	800984a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009846:	2200      	movs	r2, #0
 8009848:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009856:	2200      	movs	r2, #0
 8009858:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff fe16 	bl	800948c <I2C_TreatErrorCallback>
}
 8009860:	bf00      	nop
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	4613      	mov	r3, r2
 8009876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009878:	e03b      	b.n	80098f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800987a:	69ba      	ldr	r2, [r7, #24]
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 f8d6 	bl	8009a30 <I2C_IsErrorOccurred>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e041      	b.n	8009912 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009894:	d02d      	beq.n	80098f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009896:	f7f9 f9d7 	bl	8002c48 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d302      	bcc.n	80098ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d122      	bne.n	80098f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	699a      	ldr	r2, [r3, #24]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	4013      	ands	r3, r2
 80098b6:	68ba      	ldr	r2, [r7, #8]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	bf0c      	ite	eq
 80098bc:	2301      	moveq	r3, #1
 80098be:	2300      	movne	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d113      	bne.n	80098f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ce:	f043 0220 	orr.w	r2, r3, #32
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2220      	movs	r2, #32
 80098da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e00f      	b.n	8009912 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	699a      	ldr	r2, [r3, #24]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4013      	ands	r3, r2
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	429a      	cmp	r2, r3
 8009900:	bf0c      	ite	eq
 8009902:	2301      	moveq	r3, #1
 8009904:	2300      	movne	r3, #0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	461a      	mov	r2, r3
 800990a:	79fb      	ldrb	r3, [r7, #7]
 800990c:	429a      	cmp	r2, r3
 800990e:	d0b4      	beq.n	800987a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b084      	sub	sp, #16
 800991e:	af00      	add	r7, sp, #0
 8009920:	60f8      	str	r0, [r7, #12]
 8009922:	60b9      	str	r1, [r7, #8]
 8009924:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009926:	e033      	b.n	8009990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	68b9      	ldr	r1, [r7, #8]
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 f87f 	bl	8009a30 <I2C_IsErrorOccurred>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e031      	b.n	80099a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009942:	d025      	beq.n	8009990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009944:	f7f9 f980 	bl	8002c48 <HAL_GetTick>
 8009948:	4602      	mov	r2, r0
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	429a      	cmp	r2, r3
 8009952:	d302      	bcc.n	800995a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11a      	bne.n	8009990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	f003 0302 	and.w	r3, r3, #2
 8009964:	2b02      	cmp	r3, #2
 8009966:	d013      	beq.n	8009990 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800996c:	f043 0220 	orr.w	r2, r3, #32
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	e007      	b.n	80099a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f003 0302 	and.w	r3, r3, #2
 800999a:	2b02      	cmp	r3, #2
 800999c:	d1c4      	bne.n	8009928 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099b4:	e02f      	b.n	8009a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f000 f838 	bl	8009a30 <I2C_IsErrorOccurred>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e02d      	b.n	8009a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ca:	f7f9 f93d 	bl	8002c48 <HAL_GetTick>
 80099ce:	4602      	mov	r2, r0
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	1ad3      	subs	r3, r2, r3
 80099d4:	68ba      	ldr	r2, [r7, #8]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d302      	bcc.n	80099e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d11a      	bne.n	8009a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	f003 0320 	and.w	r3, r3, #32
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	d013      	beq.n	8009a16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099f2:	f043 0220 	orr.w	r2, r3, #32
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e007      	b.n	8009a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	699b      	ldr	r3, [r3, #24]
 8009a1c:	f003 0320 	and.w	r3, r3, #32
 8009a20:	2b20      	cmp	r3, #32
 8009a22:	d1c8      	bne.n	80099b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	@ 0x28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d068      	beq.n	8009b2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2210      	movs	r2, #16
 8009a62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a64:	e049      	b.n	8009afa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6c:	d045      	beq.n	8009afa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a6e:	f7f9 f8eb 	bl	8002c48 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d302      	bcc.n	8009a84 <I2C_IsErrorOccurred+0x54>
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d13a      	bne.n	8009afa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa6:	d121      	bne.n	8009aec <I2C_IsErrorOccurred+0xbc>
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aae:	d01d      	beq.n	8009aec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009ab0:	7cfb      	ldrb	r3, [r7, #19]
 8009ab2:	2b20      	cmp	r3, #32
 8009ab4:	d01a      	beq.n	8009aec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ac4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ac6:	f7f9 f8bf 	bl	8002c48 <HAL_GetTick>
 8009aca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009acc:	e00e      	b.n	8009aec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009ace:	f7f9 f8bb 	bl	8002c48 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b19      	cmp	r3, #25
 8009ada:	d907      	bls.n	8009aec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	f043 0320 	orr.w	r3, r3, #32
 8009ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009aea:	e006      	b.n	8009afa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	f003 0320 	and.w	r3, r3, #32
 8009af6:	2b20      	cmp	r3, #32
 8009af8:	d1e9      	bne.n	8009ace <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	f003 0320 	and.w	r3, r3, #32
 8009b04:	2b20      	cmp	r3, #32
 8009b06:	d003      	beq.n	8009b10 <I2C_IsErrorOccurred+0xe0>
 8009b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d0aa      	beq.n	8009a66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	f043 0304 	orr.w	r3, r3, #4
 8009b26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00b      	beq.n	8009b58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00b      	beq.n	8009b7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b62:	6a3b      	ldr	r3, [r7, #32]
 8009b64:	f043 0308 	orr.w	r3, r3, #8
 8009b68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00b      	beq.n	8009b9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b84:	6a3b      	ldr	r3, [r7, #32]
 8009b86:	f043 0302 	orr.w	r3, r3, #2
 8009b8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d01c      	beq.n	8009bde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff fc98 	bl	80094da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6859      	ldr	r1, [r3, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8009bec <I2C_IsErrorOccurred+0x1bc>)
 8009bb6:	400b      	ands	r3, r1
 8009bb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bbe:	6a3b      	ldr	r3, [r7, #32]
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009bde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3728      	adds	r7, #40	@ 0x28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	fe00e800 	.word	0xfe00e800

08009bf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	607b      	str	r3, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	817b      	strh	r3, [r7, #10]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c02:	897b      	ldrh	r3, [r7, #10]
 8009c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c08:	7a7b      	ldrb	r3, [r7, #9]
 8009c0a:	041b      	lsls	r3, r3, #16
 8009c0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c10:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c16:	6a3b      	ldr	r3, [r7, #32]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c1e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685a      	ldr	r2, [r3, #4]
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	0d5b      	lsrs	r3, r3, #21
 8009c2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009c2e:	4b08      	ldr	r3, [pc, #32]	@ (8009c50 <I2C_TransferConfig+0x60>)
 8009c30:	430b      	orrs	r3, r1
 8009c32:	43db      	mvns	r3, r3
 8009c34:	ea02 0103 	and.w	r1, r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	03ff63ff 	.word	0x03ff63ff

08009c54 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c68:	4a39      	ldr	r2, [pc, #228]	@ (8009d50 <I2C_Enable_IRQ+0xfc>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d032      	beq.n	8009cd4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8009c72:	4a38      	ldr	r2, [pc, #224]	@ (8009d54 <I2C_Enable_IRQ+0x100>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d02d      	beq.n	8009cd4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8009c7c:	4a36      	ldr	r2, [pc, #216]	@ (8009d58 <I2C_Enable_IRQ+0x104>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d028      	beq.n	8009cd4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009c82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da03      	bge.n	8009c92 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009c90:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c92:	887b      	ldrh	r3, [r7, #2]
 8009c94:	f003 0301 	and.w	r3, r3, #1
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009ca2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009ca4:	887b      	ldrh	r3, [r7, #2]
 8009ca6:	f003 0302 	and.w	r3, r3, #2
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d003      	beq.n	8009cb6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009cb4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cb6:	887b      	ldrh	r3, [r7, #2]
 8009cb8:	2b10      	cmp	r3, #16
 8009cba:	d103      	bne.n	8009cc4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009cc2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cc4:	887b      	ldrh	r3, [r7, #2]
 8009cc6:	2b20      	cmp	r3, #32
 8009cc8:	d133      	bne.n	8009d32 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f043 0320 	orr.w	r3, r3, #32
 8009cd0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009cd2:	e02e      	b.n	8009d32 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	da03      	bge.n	8009ce4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009ce2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009ce4:	887b      	ldrh	r3, [r7, #2]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d003      	beq.n	8009cf6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8009cf4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009cf6:	887b      	ldrh	r3, [r7, #2]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8009d06:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009d08:	887b      	ldrh	r3, [r7, #2]
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	d103      	bne.n	8009d16 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009d14:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009d16:	887b      	ldrh	r3, [r7, #2]
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d103      	bne.n	8009d24 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d22:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009d24:	887b      	ldrh	r3, [r7, #2]
 8009d26:	2b40      	cmp	r3, #64	@ 0x40
 8009d28:	d103      	bne.n	8009d32 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d30:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6819      	ldr	r1, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	430a      	orrs	r2, r1
 8009d40:	601a      	str	r2, [r3, #0]
}
 8009d42:	bf00      	nop
 8009d44:	3714      	adds	r7, #20
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	0800816b 	.word	0x0800816b
 8009d54:	080085b1 	.word	0x080085b1
 8009d58:	08008351 	.word	0x08008351

08009d5c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009d6c:	887b      	ldrh	r3, [r7, #2]
 8009d6e:	f003 0301 	and.w	r3, r3, #1
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00f      	beq.n	8009d96 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8009d7c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009d8a:	2b28      	cmp	r3, #40	@ 0x28
 8009d8c:	d003      	beq.n	8009d96 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009d94:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009d96:	887b      	ldrh	r3, [r7, #2]
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00f      	beq.n	8009dc0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8009da6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8009db4:	2b28      	cmp	r3, #40	@ 0x28
 8009db6:	d003      	beq.n	8009dc0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8009dbe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009dc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	da03      	bge.n	8009dd0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8009dce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009dd0:	887b      	ldrh	r3, [r7, #2]
 8009dd2:	2b10      	cmp	r3, #16
 8009dd4:	d103      	bne.n	8009dde <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8009ddc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009dde:	887b      	ldrh	r3, [r7, #2]
 8009de0:	2b20      	cmp	r3, #32
 8009de2:	d103      	bne.n	8009dec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f043 0320 	orr.w	r3, r3, #32
 8009dea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009dec:	887b      	ldrh	r3, [r7, #2]
 8009dee:	2b40      	cmp	r3, #64	@ 0x40
 8009df0:	d103      	bne.n	8009dfa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6819      	ldr	r1, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	43da      	mvns	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	400a      	ands	r2, r1
 8009e0a:	601a      	str	r2, [r3, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b20      	cmp	r3, #32
 8009e2c:	d138      	bne.n	8009ea0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e032      	b.n	8009ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2224      	movs	r2, #36	@ 0x24
 8009e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f022 0201 	bic.w	r2, r2, #1
 8009e5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6819      	ldr	r1, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	430a      	orrs	r2, r1
 8009e7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f042 0201 	orr.w	r2, r2, #1
 8009e8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2220      	movs	r2, #32
 8009e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e000      	b.n	8009ea2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ea0:	2302      	movs	r3, #2
  }
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009eae:	b480      	push	{r7}
 8009eb0:	b085      	sub	sp, #20
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b20      	cmp	r3, #32
 8009ec2:	d139      	bne.n	8009f38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d101      	bne.n	8009ed2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009ece:	2302      	movs	r3, #2
 8009ed0:	e033      	b.n	8009f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2224      	movs	r2, #36	@ 0x24
 8009ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0201 	bic.w	r2, r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	021b      	lsls	r3, r3, #8
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0201 	orr.w	r2, r2, #1
 8009f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2220      	movs	r2, #32
 8009f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	e000      	b.n	8009f3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f38:	2302      	movs	r3, #2
  }
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
	...

08009f48 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e070      	b.n	800a03c <HAL_JPEG_Init+0xf4>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d106      	bne.n	8009f74 <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f7f7 ff6c 	bl	8001e4c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0201 	orr.w	r2, r2, #1
 8009f8a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009faa:	631a      	str	r2, [r3, #48]	@ 0x30


  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fca:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009fda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a19      	ldr	r2, [pc, #100]	@ (800a044 <HAL_JPEG_Init+0xfc>)
 8009fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a18      	ldr	r2, [pc, #96]	@ (800a048 <HAL_JPEG_Init+0x100>)
 8009fe6:	641a      	str	r2, [r3, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	645a      	str	r2, [r3, #68]	@ 0x44
  hjpeg->QuantTable3 = NULL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	649a      	str	r2, [r3, #72]	@ 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fccd 	bl	800a994 <JPEG_Set_HuffEnc_Mem>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <HAL_JPEG_Init+0xc2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	651a      	str	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e018      	b.n	800a03c <HAL_JPEG_Init+0xf4>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	685a      	ldr	r2, [r3, #4]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a018:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	651a      	str	r2, [r3, #80]	@ 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return HAL_OK;
 800a03a:	2300      	movs	r3, #0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	08019560 	.word	0x08019560
 800a048:	080195a0 	.word	0x080195a0

0800a04c <HAL_JPEG_GetInfo>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t yblockNb;
  uint32_t cBblockNb;
  uint32_t cRblockNb;

  /* Check the JPEG handle allocation */
  if ((hjpeg == NULL) || (pInfo == NULL))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <HAL_JPEG_GetInfo+0x16>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d101      	bne.n	800a066 <HAL_JPEG_GetInfo+0x1a>
  {
    return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e083      	b.n	800a16e <HAL_JPEG_GetInfo+0x122>
  }

  /*Read the conf parameters */
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f003 0303 	and.w	r3, r3, #3
 800a070:	2b02      	cmp	r3, #2
 800a072:	d103      	bne.n	800a07c <HAL_JPEG_GetInfo+0x30>
  {
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	2210      	movs	r2, #16
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	e017      	b.n	800a0ac <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d103      	bne.n	800a092 <HAL_JPEG_GetInfo+0x46>
  {
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	e00c      	b.n	800a0ac <HAL_JPEG_GetInfo+0x60>
  }
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d103      	bne.n	800a0a8 <HAL_JPEG_GetInfo+0x5c>
  {
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2230      	movs	r2, #48	@ 0x30
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	e001      	b.n	800a0ac <HAL_JPEG_GetInfo+0x60>
  }
  else
  {
    return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e060      	b.n	800a16e <HAL_JPEG_GetInfo+0x122>
  }

  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	0c1b      	lsrs	r3, r3, #16
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	609a      	str	r2, [r3, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	0c1b      	lsrs	r3, r3, #16
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	60da      	str	r2, [r3, #12]

  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d003      	beq.n	800a0d8 <HAL_JPEG_GetInfo+0x8c>
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b30      	cmp	r3, #48	@ 0x30
 800a0d6:	d140      	bne.n	800a15a <HAL_JPEG_GetInfo+0x10e>
  {
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	091b      	lsrs	r3, r3, #4
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	617b      	str	r3, [r7, #20]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	091b      	lsrs	r3, r3, #4
 800a0ee:	f003 030f 	and.w	r3, r3, #15
 800a0f2:	613b      	str	r3, [r7, #16]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	091b      	lsrs	r3, r3, #4
 800a0fc:	f003 030f 	and.w	r3, r3, #15
 800a100:	60fb      	str	r3, [r7, #12]

    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b01      	cmp	r3, #1
 800a106:	d109      	bne.n	800a11c <HAL_JPEG_GetInfo+0xd0>
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <HAL_JPEG_GetInfo+0xd0>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d103      	bne.n	800a11c <HAL_JPEG_GetInfo+0xd0>
    {
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2202      	movs	r2, #2
 800a118:	605a      	str	r2, [r3, #4]
 800a11a:	e01d      	b.n	800a158 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d109      	bne.n	800a136 <HAL_JPEG_GetInfo+0xea>
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d106      	bne.n	800a136 <HAL_JPEG_GetInfo+0xea>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d103      	bne.n	800a136 <HAL_JPEG_GetInfo+0xea>
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	2200      	movs	r2, #0
 800a132:	605a      	str	r2, [r3, #4]
 800a134:	e010      	b.n	800a158 <HAL_JPEG_GetInfo+0x10c>
    }
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d109      	bne.n	800a150 <HAL_JPEG_GetInfo+0x104>
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d106      	bne.n	800a150 <HAL_JPEG_GetInfo+0x104>
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d103      	bne.n	800a150 <HAL_JPEG_GetInfo+0x104>
    {
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	2201      	movs	r2, #1
 800a14c:	605a      	str	r2, [r3, #4]
 800a14e:	e003      	b.n	800a158 <HAL_JPEG_GetInfo+0x10c>
    }
    else /*Default is 4:4:4*/
    {
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800a156:	e003      	b.n	800a160 <HAL_JPEG_GetInfo+0x114>
 800a158:	e002      	b.n	800a160 <HAL_JPEG_GetInfo+0x114>
    }
  }
  else
  {
    pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2200      	movs	r2, #0
 800a15e:	605a      	str	r2, [r3, #4]
  }

  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f001 fd09 	bl	800bb78 <JPEG_GetQuality>
 800a166:	4602      	mov	r2, r0
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b084      	sub	sp, #16
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	607a      	str	r2, [r7, #4]
 800a182:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d005      	beq.n	800a196 <HAL_JPEG_Decode_DMA+0x20>
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <HAL_JPEG_Decode_DMA+0x20>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d101      	bne.n	800a19a <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e04c      	b.n	800a234 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_JPEG_Decode_DMA+0x32>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e045      	b.n	800a234 <HAL_JPEG_Decode_DMA+0xbe>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d134      	bne.n	800a226 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2204      	movs	r2, #4
 800a1c0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c8:	f023 020f 	bic.w	r2, r3, #15
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	655a      	str	r2, [r3, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d4:	f043 020e 	orr.w	r2, r3, #14
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hjpeg->OutDataLength = OutDataLength;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	69ba      	ldr	r2, [r7, #24]
 800a1f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 fe49 	bl	800ae98 <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f001 f96a 	bl	800b4e0 <JPEG_DMA_StartProcess>
 800a20c:	4603      	mov	r3, r0
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00f      	beq.n	800a232 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2206      	movs	r2, #6
 800a216:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      return HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e006      	b.n	800a234 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    return HAL_BUSY;
 800a22e:	2302      	movs	r3, #2
 800a230:	e000      	b.n	800a234 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a24e:	f003 030c 	and.w	r3, r3, #12
 800a252:	2b0c      	cmp	r3, #12
 800a254:	d116      	bne.n	800a284 <HAL_JPEG_Pause+0x48>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	f003 0301 	and.w	r3, r3, #1
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <HAL_JPEG_Pause+0x30>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a264:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d033      	beq.n	800a2de <HAL_JPEG_Pause+0xa2>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a27a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	655a      	str	r2, [r3, #84]	@ 0x54
 800a282:	e02c      	b.n	800a2de <HAL_JPEG_Pause+0xa2>
    }

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a288:	f003 030c 	and.w	r3, r3, #12
 800a28c:	2b08      	cmp	r3, #8
 800a28e:	d126      	bne.n	800a2de <HAL_JPEG_Pause+0xa2>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <HAL_JPEG_Pause+0x72>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a29e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f043 0306 	orr.w	r3, r3, #6
 800a2ac:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	f003 0302 	and.w	r3, r3, #2
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d009      	beq.n	800a2cc <HAL_JPEG_Pause+0x90>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	655a      	str	r2, [r3, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 800a2ca:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	43da      	mvns	r2, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	400a      	ands	r2, r1
 800a2dc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3714      	adds	r7, #20
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_JPEG_InfoReadyCallback>:
  * @param  pInfo pointer to a JPEG_ConfTypeDef structure that contains
  *         The JPEG decoded header information
  * @retval None
  */
__weak void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  UNUSED(pInfo);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_HeaderParsingCpltCallback could be implemented in the user file
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_JPEG_GetDataCallback>:
  *         the configuration information for JPEG module
  * @param  NbDecodedData Number of consummed data in the previous chunk in bytes
  * @retval None
  */
__weak void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  UNUSED(NbDecodedData);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_GetDataCallback could be implemented in the user file
   */
}
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_JPEG_IRQHandler>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
void HAL_JPEG_IRQHandler(JPEG_HandleTypeDef *hjpeg)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  switch (hjpeg->State)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	3b03      	subs	r3, #3
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d813      	bhi.n	800a36a <HAL_JPEG_IRQHandler+0x3e>
  {
    case HAL_JPEG_STATE_BUSY_ENCODING:
    case HAL_JPEG_STATE_BUSY_DECODING:
      /* continue JPEG data encoding/Decoding*/
      /* JPEG data processing : In/Out FIFO transfer*/
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a346:	f003 030c 	and.w	r3, r3, #12
 800a34a:	2b08      	cmp	r3, #8
 800a34c:	d103      	bne.n	800a356 <HAL_JPEG_IRQHandler+0x2a>
      {
        (void) JPEG_Process(hjpeg);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fe16 	bl	800af80 <JPEG_Process>
      }
      else
      {
        /* Nothing to do */
      }
      break;
 800a354:	e00b      	b.n	800a36e <HAL_JPEG_IRQHandler+0x42>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a35a:	f003 030c 	and.w	r3, r3, #12
 800a35e:	2b0c      	cmp	r3, #12
 800a360:	d105      	bne.n	800a36e <HAL_JPEG_IRQHandler+0x42>
        JPEG_DMA_ContinueProcess(hjpeg);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f001 f956 	bl	800b614 <JPEG_DMA_ContinueProcess>
      break;
 800a368:	e001      	b.n	800a36e <HAL_JPEG_IRQHandler+0x42>

    default:
      break;
 800a36a:	bf00      	nop
 800a36c:	e000      	b.n	800a370 <HAL_JPEG_IRQHandler+0x44>
      break;
 800a36e:	bf00      	nop
  }
}
 800a370:	bf00      	nop
 800a372:	3708      	adds	r7, #8
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800a378:	b480      	push	{r7}
 800a37a:	b08b      	sub	sp, #44	@ 0x2c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800a38a:	2300      	movs	r3, #0
 800a38c:	61fb      	str	r3, [r7, #28]
 800a38e:	e020      	b.n	800a3d2 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((p + i) > 256UL)
 800a39a:	6a3a      	ldr	r2, [r7, #32]
 800a39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a39e:	4413      	add	r3, r2
 800a3a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3a4:	d90f      	bls.n	800a3c6 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e055      	b.n	800a456 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	b2da      	uxtb	r2, r3
 800a3ae:	68b9      	ldr	r1, [r7, #8]
 800a3b0:	6a3b      	ldr	r3, [r7, #32]
 800a3b2:	440b      	add	r3, r1
 800a3b4:	3201      	adds	r2, #1
 800a3b6:	b2d2      	uxtb	r2, r2
 800a3b8:	701a      	strb	r2, [r3, #0]
      p++;
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	623b      	str	r3, [r7, #32]
      i--;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (i != 0UL)
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1ee      	bne.n	800a3aa <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	61fb      	str	r3, [r7, #28]
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	2b0f      	cmp	r3, #15
 800a3d6:	d9db      	bls.n	800a390 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	4413      	add	r3, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	6a3a      	ldr	r2, [r7, #32]
 800a3e6:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	617b      	str	r3, [r7, #20]
  p = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 800a3f6:	e027      	b.n	800a448 <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	4413      	add	r3, r2
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	601a      	str	r2, [r3, #0]
      p++;
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	3301      	adds	r3, #1
 800a408:	623b      	str	r3, [r7, #32]
      code++;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	3301      	adds	r3, #1
 800a40e:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	4413      	add	r3, r2
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	461a      	mov	r2, r3
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d0eb      	beq.n	800a3f8 <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2b1f      	cmp	r3, #31
 800a424:	d901      	bls.n	800a42a <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	e015      	b.n	800a456 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800a42a:	2201      	movs	r2, #1
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	fa02 f303 	lsl.w	r3, r2, r3
 800a432:	69ba      	ldr	r2, [r7, #24]
 800a434:	429a      	cmp	r2, r3
 800a436:	d301      	bcc.n	800a43c <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800a438:	2301      	movs	r3, #1
 800a43a:	e00c      	b.n	800a456 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	005b      	lsls	r3, r3, #1
 800a440:	61bb      	str	r3, [r7, #24]
    si++;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	3301      	adds	r3, #1
 800a446:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	4413      	add	r3, r2
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1dd      	bne.n	800a410 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	372c      	adds	r7, #44	@ 0x2c
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr

0800a462 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 800a462:	b580      	push	{r7, lr}
 800a464:	f5ad 6da5 	sub.w	sp, sp, #1320	@ 0x528
 800a468:	af00      	add	r7, sp, #0
 800a46a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a46e:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a472:	6018      	str	r0, [r3, #0]
 800a474:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a478:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a47c:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a47e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a482:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	f107 0308 	add.w	r3, r7, #8
 800a48c:	f107 020c 	add.w	r2, r7, #12
 800a490:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800a494:	f7ff ff70 	bl	800a378 <JPEG_Bits_To_SizeCodes>
 800a498:	4603      	mov	r3, r0
 800a49a:	f887 351f 	strb.w	r3, [r7, #1311]	@ 0x51f
  if (error != HAL_OK)
 800a49e:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a4a6:	f897 351f 	ldrb.w	r3, [r7, #1311]	@ 0x51f
 800a4aa:	e075      	b.n	800a598 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524

  while (k < lastK)
 800a4b2:	e067      	b.n	800a584 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 800a4b4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a4b8:	f2a3 5324 	subw	r3, r3, #1316	@ 0x524
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a4c2:	4413      	add	r3, r2
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (l == 0UL)
 800a4cc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 800a4d4:	23a0      	movs	r3, #160	@ 0xa0
 800a4d6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a4da:	e021      	b.n	800a520 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800a4dc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4e0:	2bf0      	cmp	r3, #240	@ 0xf0
 800a4e2:	d103      	bne.n	800a4ec <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 800a4e4:	23a1      	movs	r3, #161	@ 0xa1
 800a4e6:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a4ea:	e019      	b.n	800a520 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800a4ec:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4f0:	091b      	lsrs	r3, r3, #4
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	f8c7 3518 	str.w	r3, [r7, #1304]	@ 0x518
      lsb = (l & 0x0FUL);
 800a4fa:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a4fe:	f003 030f 	and.w	r3, r3, #15
 800a502:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
      l = (msb * 10UL) + lsb - 1UL;
 800a506:	f8d7 2518 	ldr.w	r2, [r7, #1304]	@ 0x518
 800a50a:	4613      	mov	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	005b      	lsls	r3, r3, #1
 800a512:	461a      	mov	r2, r3
 800a514:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a518:	4413      	add	r3, r2
 800a51a:	3b01      	subs	r3, #1
 800a51c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 800a520:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a524:	2ba1      	cmp	r3, #161	@ 0xa1
 800a526:	d901      	bls.n	800a52c <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a528:	2301      	movs	r3, #1
 800a52a:	e035      	b.n	800a598 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a52c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a530:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a534:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a538:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a53c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a540:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a544:	6819      	ldr	r1, [r3, #0]
 800a546:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a54a:	3328      	adds	r3, #40	@ 0x28
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	440b      	add	r3, r1
 800a550:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a552:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a556:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800a55a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a55e:	4413      	add	r3, r2
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	3b01      	subs	r3, #1
 800a564:	b2d9      	uxtb	r1, r3
 800a566:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a56a:	f5a3 63a5 	sub.w	r3, r3, #1320	@ 0x528
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 800a574:	4413      	add	r3, r2
 800a576:	460a      	mov	r2, r1
 800a578:	701a      	strb	r2, [r3, #0]
      k++;
 800a57a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 800a57e:	3301      	adds	r3, #1
 800a580:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
  while (k < lastK)
 800a584:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 800a588:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f8d7 2524 	ldr.w	r2, [r7, #1316]	@ 0x524
 800a592:	429a      	cmp	r2, r3
 800a594:	d38e      	bcc.n	800a4b4 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	f5ad 6da4 	sub.w	sp, sp, #1312	@ 0x520
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a5ae:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a5b2:	6018      	str	r0, [r3, #0]
 800a5b4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a5b8:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a5bc:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800a5be:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a5c2:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a5c6:	6818      	ldr	r0, [r3, #0]
 800a5c8:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 800a5cc:	f107 0208 	add.w	r2, r7, #8
 800a5d0:	f207 410c 	addw	r1, r7, #1036	@ 0x40c
 800a5d4:	f7ff fed0 	bl	800a378 <JPEG_Bits_To_SizeCodes>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 351b 	strb.w	r3, [r7, #1307]	@ 0x51b
  if (error != HAL_OK)
 800a5de:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 800a5e6:	f897 351b 	ldrb.w	r3, [r7, #1307]	@ 0x51b
 800a5ea:	e048      	b.n	800a67e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c

  while (k < lastK)
 800a5f2:	e03d      	b.n	800a670 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 800a5f4:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a5f8:	f2a3 531c 	subw	r3, r3, #1308	@ 0x51c
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a602:	4413      	add	r3, r2
 800a604:	3310      	adds	r3, #16
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800a60c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a610:	2b0b      	cmp	r3, #11
 800a612:	d901      	bls.n	800a618 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800a614:	2301      	movs	r3, #1
 800a616:	e032      	b.n	800a67e <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800a618:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a61c:	f5a3 63a3 	sub.w	r3, r3, #1304	@ 0x518
 800a620:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a624:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a628:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a62c:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a630:	6819      	ldr	r1, [r3, #0]
 800a632:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a636:	3302      	adds	r3, #2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	440b      	add	r3, r1
 800a63c:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 800a63e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a642:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800a646:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a64a:	4413      	add	r3, r2
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	3b01      	subs	r3, #1
 800a650:	b2d9      	uxtb	r1, r3
 800a652:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a656:	f5a3 63a4 	sub.w	r3, r3, #1312	@ 0x520
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f8d7 3514 	ldr.w	r3, [r7, #1300]	@ 0x514
 800a660:	4413      	add	r3, r2
 800a662:	460a      	mov	r2, r1
 800a664:	701a      	strb	r2, [r3, #0]
      k++;
 800a666:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 800a66a:	3301      	adds	r3, #1
 800a66c:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
  while (k < lastK)
 800a670:	f8d7 3510 	ldr.w	r3, [r7, #1296]	@ 0x510
 800a674:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 800a678:	429a      	cmp	r2, r3
 800a67a:	d3bb      	bcc.n	800a5f4 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	f507 67a4 	add.w	r7, r7, #1312	@ 0x520
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b09a      	sub	sp, #104	@ 0x68
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d106      	bne.n	800a6b0 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
 800a6aa:	3318      	adds	r3, #24
 800a6ac:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6ae:	e00f      	b.n	800a6d0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d106      	bne.n	800a6cc <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800a6c6:	3318      	adds	r3, #24
 800a6c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a6ca:	e001      	b.n	800a6d0 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e059      	b.n	800a784 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d055      	beq.n	800a782 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800a6d6:	f107 0314 	add.w	r3, r7, #20
 800a6da:	4619      	mov	r1, r3
 800a6dc:	68b8      	ldr	r0, [r7, #8]
 800a6de:	f7ff ff60 	bl	800a5a2 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (error != HAL_OK)
 800a6e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 800a6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6f4:	e046      	b.n	800a784 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 800a6f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a6f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a6fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6fc:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a700:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a702:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a704:	3304      	adds	r3, #4
 800a706:	65bb      	str	r3, [r7, #88]	@ 0x58
    *addressDef = 0x0FFF0FFF;
 800a708:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a70a:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a70e:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 800a710:	230c      	movs	r3, #12
 800a712:	667b      	str	r3, [r7, #100]	@ 0x64
    while (i > 1UL)
 800a714:	e032      	b.n	800a77c <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 800a716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a718:	3b01      	subs	r3, #1
 800a71a:	667b      	str	r3, [r7, #100]	@ 0x64
      address --;
 800a71c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a71e:	3b04      	subs	r3, #4
 800a720:	663b      	str	r3, [r7, #96]	@ 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a722:	f107 0214 	add.w	r2, r7, #20
 800a726:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a728:	4413      	add	r3, r2
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	021b      	lsls	r3, r3, #8
 800a72e:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a732:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a734:	3302      	adds	r3, #2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	3368      	adds	r3, #104	@ 0x68
 800a73a:	443b      	add	r3, r7
 800a73c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a740:	b2db      	uxtb	r3, r3
 800a742:	4313      	orrs	r3, r2
 800a744:	657b      	str	r3, [r7, #84]	@ 0x54
                                                                                   0xFFUL);
      i--;
 800a746:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a748:	3b01      	subs	r3, #1
 800a74a:	667b      	str	r3, [r7, #100]	@ 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800a74c:	f107 0214 	add.w	r2, r7, #20
 800a750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a752:	4413      	add	r3, r2
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	021b      	lsls	r3, r3, #8
 800a758:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a75c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a75e:	3302      	adds	r3, #2
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	3368      	adds	r3, #104	@ 0x68
 800a764:	443b      	add	r3, r7
 800a766:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	4313      	orrs	r3, r2
 800a76e:	653b      	str	r3, [r7, #80]	@ 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a772:	041a      	lsls	r2, r3, #16
 800a774:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a776:	431a      	orrs	r2, r3
 800a778:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a77a:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a77c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d8c9      	bhi.n	800a716 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3768      	adds	r7, #104	@ 0x68
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	f5ad 7d56 	sub.w	sp, sp, #856	@ 0x358
 800a792:	af00      	add	r7, sp, #0
 800a794:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a798:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a79c:	6018      	str	r0, [r3, #0]
 800a79e:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7a2:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a7a6:	6019      	str	r1, [r3, #0]
 800a7a8:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7ac:	f5a3 7355 	sub.w	r3, r3, #852	@ 0x354
 800a7b0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800a7b2:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7b6:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7c2:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a7c6:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d10c      	bne.n	800a7ea <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a7d0:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7d4:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7e0:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a7e4:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a7e8:	e01d      	b.n	800a826 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800a7ea:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a7ee:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a7fa:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800a7fe:	f5a2 7255 	sub.w	r2, r2, #852	@ 0x354
 800a802:	6812      	ldr	r2, [r2, #0]
 800a804:	429a      	cmp	r2, r3
 800a806:	d10c      	bne.n	800a822 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800a808:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a80c:	f5a3 7353 	sub.w	r3, r3, #844	@ 0x34c
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
 800a818:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800a81c:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800a820:	e001      	b.n	800a826 <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e0a8      	b.n	800a978 <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800a826:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a82a:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 80a0 	beq.w	800a976 <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800a836:	f107 0214 	add.w	r2, r7, #20
 800a83a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a83e:	f5a3 7354 	sub.w	r3, r3, #848	@ 0x350
 800a842:	4611      	mov	r1, r2
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f7ff fe0c 	bl	800a462 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800a84a:	4603      	mov	r3, r0
 800a84c:	f887 334b 	strb.w	r3, [r7, #843]	@ 0x34b
    if (error != HAL_OK)
 800a850:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800a858:	f897 334b 	ldrb.w	r3, [r7, #843]	@ 0x34b
 800a85c:	e08c      	b.n	800a978 <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 800a85e:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a862:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a866:	2300      	movs	r3, #0
 800a868:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a86c:	e00e      	b.n	800a88c <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 800a86e:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a872:	f06f 22f0 	mvn.w	r2, #4026593280	@ 0xf000f000
 800a876:	601a      	str	r2, [r3, #0]
      addressDef++;
 800a878:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a87c:	3304      	adds	r3, #4
 800a87e:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    for (i = 0; i < 3UL; i++)
 800a882:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a886:	3301      	adds	r3, #1
 800a888:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800a88c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a890:	2b02      	cmp	r3, #2
 800a892:	d9ec      	bls.n	800a86e <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 800a894:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a898:	4a3a      	ldr	r2, [pc, #232]	@ (800a984 <JPEG_Set_HuffAC_Mem+0x1f8>)
 800a89a:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a89c:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD30FD2;
 800a8a6:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8aa:	4a37      	ldr	r2, [pc, #220]	@ (800a988 <JPEG_Set_HuffAC_Mem+0x1fc>)
 800a8ac:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a8ae:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD50FD4;
 800a8b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8bc:	4a33      	ldr	r2, [pc, #204]	@ (800a98c <JPEG_Set_HuffAC_Mem+0x200>)
 800a8be:	601a      	str	r2, [r3, #0]
    addressDef++;
 800a8c0:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
    *addressDef = 0x0FD70FD6;
 800a8ca:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 800a8ce:	4a30      	ldr	r2, [pc, #192]	@ (800a990 <JPEG_Set_HuffAC_Mem+0x204>)
 800a8d0:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 800a8d2:	23a2      	movs	r3, #162	@ 0xa2
 800a8d4:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
    while (i > 1UL)
 800a8d8:	e049      	b.n	800a96e <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 800a8da:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      address--;
 800a8e4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a8e8:	3b04      	subs	r3, #4
 800a8ea:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a8ee:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a8f2:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a8f6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a8fa:	4413      	add	r3, r2
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	021b      	lsls	r3, r3, #8
 800a900:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a904:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a908:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a90c:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a910:	3328      	adds	r3, #40	@ 0x28
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	4313      	orrs	r3, r2
 800a91c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
                                                                                   0xFFUL);
      i--;
 800a920:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a924:	3b01      	subs	r3, #1
 800a926:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800a92a:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a92e:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800a932:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a936:	4413      	add	r3, r2
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	021b      	lsls	r3, r3, #8
 800a93c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800a940:	f507 7356 	add.w	r3, r7, #856	@ 0x358
 800a944:	f5a3 7151 	sub.w	r1, r3, #836	@ 0x344
 800a948:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a94c:	3328      	adds	r3, #40	@ 0x28
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	440b      	add	r3, r1
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	b2db      	uxtb	r3, r3
 800a956:	4313      	orrs	r3, r2
 800a958:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800a95c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800a960:	041a      	lsls	r2, r3, #16
 800a962:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800a966:	431a      	orrs	r2, r3
 800a968:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 800a96c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800a96e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800a972:	2b01      	cmp	r3, #1
 800a974:	d8b1      	bhi.n	800a8da <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}
 800a982:	bf00      	nop
 800a984:	0fd10fd0 	.word	0x0fd10fd0
 800a988:	0fd30fd2 	.word	0x0fd30fd2
 800a98c:	0fd50fd4 	.word	0x0fd50fd4
 800a990:	0fd70fd6 	.word	0x0fd70fd6

0800a994 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f84d 	bl	800aa3c <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	491f      	ldr	r1, [pc, #124]	@ (800aa2c <JPEG_Set_HuffEnc_Mem+0x98>)
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff feec 	bl	800a78c <JPEG_Set_HuffAC_Mem>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	e030      	b.n	800aa24 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f503 63cc 	add.w	r3, r3, #1632	@ 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4918      	ldr	r1, [pc, #96]	@ (800aa30 <JPEG_Set_HuffEnc_Mem+0x9c>)
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff fedc 	bl	800a78c <JPEG_Set_HuffAC_Mem>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	e020      	b.n	800aa24 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f503 63f8 	add.w	r3, r3, #1984	@ 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4911      	ldr	r1, [pc, #68]	@ (800aa34 <JPEG_Set_HuffEnc_Mem+0xa0>)
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f7ff fe4a 	bl	800a688 <JPEG_Set_HuffDC_Mem>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
 800aa00:	e010      	b.n	800aa24 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	490a      	ldr	r1, [pc, #40]	@ (800aa38 <JPEG_Set_HuffEnc_Mem+0xa4>)
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7ff fe3a 	bl	800a688 <JPEG_Set_HuffDC_Mem>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
 800aa20:	e000      	b.n	800aa24 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	080193b8 	.word	0x080193b8
 800aa30:	0801946c 	.word	0x0801946c
 800aa34:	08019380 	.word	0x08019380
 800aa38:	0801939c 	.word	0x0801939c

0800aa3c <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b08b      	sub	sp, #44	@ 0x2c
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 800aa44:	4b80      	ldr	r3, [pc, #512]	@ (800ac48 <JPEG_Set_Huff_DHTMem+0x20c>)
 800aa46:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800aa48:	4b80      	ldr	r3, [pc, #512]	@ (800ac4c <JPEG_Set_Huff_DHTMem+0x210>)
 800aa4a:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 800aa4c:	4b80      	ldr	r3, [pc, #512]	@ (800ac50 <JPEG_Set_Huff_DHTMem+0x214>)
 800aa4e:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 800aa50:	4b80      	ldr	r3, [pc, #512]	@ (800ac54 <JPEG_Set_Huff_DHTMem+0x218>)
 800aa52:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	623b      	str	r3, [r7, #32]
  index = 16;
 800aa60:	2310      	movs	r3, #16
 800aa62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aa64:	e01d      	b.n	800aaa2 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	5cd3      	ldrb	r3, [r2, r3]
 800aa6e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	3b02      	subs	r3, #2
 800aa74:	6979      	ldr	r1, [r7, #20]
 800aa76:	5ccb      	ldrb	r3, [r1, r3]
 800aa78:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aa7a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	3b03      	subs	r3, #3
 800aa80:	6979      	ldr	r1, [r7, #20]
 800aa82:	5ccb      	ldrb	r3, [r1, r3]
 800aa84:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800aa86:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800aa88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa8a:	3a04      	subs	r2, #4
 800aa8c:	6979      	ldr	r1, [r7, #20]
 800aa8e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800aa90:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800aa92:	6a3b      	ldr	r3, [r7, #32]
 800aa94:	601a      	str	r2, [r3, #0]
    address--;
 800aa96:	6a3b      	ldr	r3, [r7, #32]
 800aa98:	3b04      	subs	r3, #4
 800aa9a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9e:	3b04      	subs	r3, #4
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d8de      	bhi.n	800aa66 <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aab0:	3318      	adds	r3, #24
 800aab2:	623b      	str	r3, [r7, #32]
  index = 12;
 800aab4:	230c      	movs	r3, #12
 800aab6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aab8:	e021      	b.n	800aafe <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabc:	3b01      	subs	r3, #1
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4413      	add	r3, r2
 800aac2:	7c1b      	ldrb	r3, [r3, #16]
 800aac4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800aac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac8:	3b02      	subs	r3, #2
 800aaca:	6979      	ldr	r1, [r7, #20]
 800aacc:	440b      	add	r3, r1
 800aace:	7c1b      	ldrb	r3, [r3, #16]
 800aad0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aad2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800aad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aad6:	3b03      	subs	r3, #3
 800aad8:	6979      	ldr	r1, [r7, #20]
 800aada:	440b      	add	r3, r1
 800aadc:	7c1b      	ldrb	r3, [r3, #16]
 800aade:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800aae0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 800aae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aae4:	3a04      	subs	r2, #4
 800aae6:	6979      	ldr	r1, [r7, #20]
 800aae8:	440a      	add	r2, r1
 800aaea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800aaec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	601a      	str	r2, [r3, #0]
    address--;
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	3b04      	subs	r3, #4
 800aaf6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800aaf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafa:	3b04      	subs	r3, #4
 800aafc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800aafe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d8da      	bhi.n	800aaba <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ab0c:	3328      	adds	r3, #40	@ 0x28
 800ab0e:	623b      	str	r3, [r7, #32]
  index = 16;
 800ab10:	2310      	movs	r3, #16
 800ab12:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab14:	e01d      	b.n	800ab52 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	69fa      	ldr	r2, [r7, #28]
 800ab1c:	5cd3      	ldrb	r3, [r2, r3]
 800ab1e:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab22:	3b02      	subs	r3, #2
 800ab24:	69f9      	ldr	r1, [r7, #28]
 800ab26:	5ccb      	ldrb	r3, [r1, r3]
 800ab28:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab2a:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ab2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2e:	3b03      	subs	r3, #3
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	5ccb      	ldrb	r3, [r1, r3]
 800ab34:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800ab36:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800ab38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab3a:	3a04      	subs	r2, #4
 800ab3c:	69f9      	ldr	r1, [r7, #28]
 800ab3e:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800ab40:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	601a      	str	r2, [r3, #0]
    address--;
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	3b04      	subs	r3, #4
 800ab4a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	3b04      	subs	r3, #4
 800ab50:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	2b03      	cmp	r3, #3
 800ab56:	d8de      	bhi.n	800ab16 <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ab60:	33cc      	adds	r3, #204	@ 0xcc
 800ab62:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	4b3b      	ldr	r3, [pc, #236]	@ (800ac58 <JPEG_Set_Huff_DHTMem+0x21c>)
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800ab74:	021a      	lsls	r2, r3, #8
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	f892 20b0 	ldrb.w	r2, [r2, #176]	@ 0xb0
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ab84:	6a3b      	ldr	r3, [r7, #32]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	3b04      	subs	r3, #4
 800ab8e:	623b      	str	r3, [r7, #32]
  index = 160;
 800ab90:	23a0      	movs	r3, #160	@ 0xa0
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ab94:	e021      	b.n	800abda <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	69fa      	ldr	r2, [r7, #28]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	7c1b      	ldrb	r3, [r3, #16]
 800aba0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	3b02      	subs	r3, #2
 800aba6:	69f9      	ldr	r1, [r7, #28]
 800aba8:	440b      	add	r3, r1
 800abaa:	7c1b      	ldrb	r3, [r3, #16]
 800abac:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800abae:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	3b03      	subs	r3, #3
 800abb4:	69f9      	ldr	r1, [r7, #28]
 800abb6:	440b      	add	r3, r1
 800abb8:	7c1b      	ldrb	r3, [r3, #16]
 800abba:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800abbc:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 800abbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abc0:	3a04      	subs	r2, #4
 800abc2:	69f9      	ldr	r1, [r7, #28]
 800abc4:	440a      	add	r2, r1
 800abc6:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 800abc8:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	601a      	str	r2, [r3, #0]
    address--;
 800abce:	6a3b      	ldr	r3, [r7, #32]
 800abd0:	3b04      	subs	r3, #4
 800abd2:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd6:	3b04      	subs	r3, #4
 800abd8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d8da      	bhi.n	800ab96 <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800abe8:	33cc      	adds	r3, #204	@ 0xcc
 800abea:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800abec:	6a3b      	ldr	r3, [r7, #32]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	785b      	ldrb	r3, [r3, #1]
 800abf8:	061a      	lsls	r2, r3, #24
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	431a      	orrs	r2, r3
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	041b      	lsls	r3, r3, #16
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ac16:	33dc      	adds	r3, #220	@ 0xdc
 800ac18:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800ac1a:	6a3b      	ldr	r3, [r7, #32]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ac58 <JPEG_Set_Huff_DHTMem+0x21c>)
 800ac20:	4013      	ands	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	7bdb      	ldrb	r3, [r3, #15]
 800ac28:	021a      	lsls	r2, r3, #8
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4313      	orrs	r3, r2
 800ac2e:	693a      	ldr	r2, [r7, #16]
 800ac30:	7b92      	ldrb	r2, [r2, #14]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	3b04      	subs	r3, #4
 800ac40:	623b      	str	r3, [r7, #32]
  index = 12;
 800ac42:	230c      	movs	r3, #12
 800ac44:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ac46:	e027      	b.n	800ac98 <JPEG_Set_Huff_DHTMem+0x25c>
 800ac48:	080193b8 	.word	0x080193b8
 800ac4c:	0801946c 	.word	0x0801946c
 800ac50:	08019380 	.word	0x08019380
 800ac54:	0801939c 	.word	0x0801939c
 800ac58:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5e:	3301      	adds	r3, #1
 800ac60:	693a      	ldr	r2, [r7, #16]
 800ac62:	5cd3      	ldrb	r3, [r2, r3]
 800ac64:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800ac66:	6939      	ldr	r1, [r7, #16]
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	440b      	add	r3, r1
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac70:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	3b01      	subs	r3, #1
 800ac76:	6939      	ldr	r1, [r7, #16]
 800ac78:	5ccb      	ldrb	r3, [r1, r3]
 800ac7a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800ac7c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 800ac7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac80:	3a02      	subs	r2, #2
 800ac82:	6939      	ldr	r1, [r7, #16]
 800ac84:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ac86:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	601a      	str	r2, [r3, #0]
    address--;
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	3b04      	subs	r3, #4
 800ac90:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ac92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac94:	3b04      	subs	r3, #4
 800ac96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d8de      	bhi.n	800ac5c <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800aca6:	33dc      	adds	r3, #220	@ 0xdc
 800aca8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	b29b      	uxth	r3, r3
 800acb0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	7c5b      	ldrb	r3, [r3, #17]
 800acb6:	061a      	lsls	r2, r3, #24
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	431a      	orrs	r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	7c1b      	ldrb	r3, [r3, #16]
 800acc0:	041b      	lsls	r3, r3, #16
 800acc2:	4313      	orrs	r3, r2
 800acc4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800acc6:	6a3b      	ldr	r3, [r7, #32]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800acd4:	33e8      	adds	r3, #232	@ 0xe8
 800acd6:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	4b6d      	ldr	r3, [pc, #436]	@ (800ae94 <JPEG_Set_Huff_DHTMem+0x458>)
 800acde:	4013      	ands	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	7edb      	ldrb	r3, [r3, #27]
 800ace6:	021a      	lsls	r2, r3, #8
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	4313      	orrs	r3, r2
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	7e92      	ldrb	r2, [r2, #26]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  *address = value;
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800acfa:	6a3b      	ldr	r3, [r7, #32]
 800acfc:	3b04      	subs	r3, #4
 800acfe:	623b      	str	r3, [r7, #32]
  index = 8;
 800ad00:	2308      	movs	r3, #8
 800ad02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ad04:	e021      	b.n	800ad4a <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	3301      	adds	r3, #1
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	7c1b      	ldrb	r3, [r3, #16]
 800ad10:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800ad12:	6939      	ldr	r1, [r7, #16]
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	440b      	add	r3, r1
 800ad18:	3310      	adds	r3, #16
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ad1e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ad20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad22:	3b01      	subs	r3, #1
 800ad24:	6939      	ldr	r1, [r7, #16]
 800ad26:	440b      	add	r3, r1
 800ad28:	7c1b      	ldrb	r3, [r3, #16]
 800ad2a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 800ad2c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 800ad2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad30:	3a02      	subs	r2, #2
 800ad32:	6939      	ldr	r1, [r7, #16]
 800ad34:	440a      	add	r2, r1
 800ad36:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ad38:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	601a      	str	r2, [r3, #0]
    address--;
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	3b04      	subs	r3, #4
 800ad42:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ad44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad46:	3b04      	subs	r3, #4
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ad4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d8da      	bhi.n	800ad06 <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ad58:	33e8      	adds	r3, #232	@ 0xe8
 800ad5a:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	785b      	ldrb	r3, [r3, #1]
 800ad68:	061a      	lsls	r2, r3, #24
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	041b      	lsls	r3, r3, #16
 800ad74:	4313      	orrs	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ad86:	33f8      	adds	r3, #248	@ 0xf8
 800ad88:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	4b41      	ldr	r3, [pc, #260]	@ (800ae94 <JPEG_Set_Huff_DHTMem+0x458>)
 800ad90:	4013      	ands	r3, r2
 800ad92:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	7bdb      	ldrb	r3, [r3, #15]
 800ad98:	021a      	lsls	r2, r3, #8
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	7b92      	ldrb	r2, [r2, #14]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]
  *address = value;
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	3b04      	subs	r3, #4
 800adb0:	623b      	str	r3, [r7, #32]
  index = 12;
 800adb2:	230c      	movs	r3, #12
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800adb6:	e01d      	b.n	800adf4 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800adb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adba:	3301      	adds	r3, #1
 800adbc:	69ba      	ldr	r2, [r7, #24]
 800adbe:	5cd3      	ldrb	r3, [r2, r3]
 800adc0:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800adc2:	69b9      	ldr	r1, [r7, #24]
 800adc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc6:	440b      	add	r3, r1
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800adcc:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	3b01      	subs	r3, #1
 800add2:	69b9      	ldr	r1, [r7, #24]
 800add4:	5ccb      	ldrb	r3, [r1, r3]
 800add6:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800add8:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800adda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800addc:	3a02      	subs	r2, #2
 800adde:	69b9      	ldr	r1, [r7, #24]
 800ade0:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800ade2:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	601a      	str	r2, [r3, #0]
    address--;
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	3b04      	subs	r3, #4
 800adec:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800adee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf0:	3b04      	subs	r3, #4
 800adf2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	2b03      	cmp	r3, #3
 800adf8:	d8de      	bhi.n	800adb8 <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ae02:	33f8      	adds	r3, #248	@ 0xf8
 800ae04:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	7c5b      	ldrb	r3, [r3, #17]
 800ae12:	061a      	lsls	r2, r3, #24
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	431a      	orrs	r2, r3
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	7c1b      	ldrb	r3, [r3, #16]
 800ae1c:	041b      	lsls	r3, r3, #16
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 800ae30:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800ae34:	623b      	str	r3, [r7, #32]
  index = 160;
 800ae36:	23a0      	movs	r3, #160	@ 0xa0
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ae3a:	e021      	b.n	800ae80 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	3301      	adds	r3, #1
 800ae40:	69ba      	ldr	r2, [r7, #24]
 800ae42:	4413      	add	r3, r2
 800ae44:	7c1b      	ldrb	r3, [r3, #16]
 800ae46:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ae48:	69b9      	ldr	r1, [r7, #24]
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	440b      	add	r3, r1
 800ae4e:	3310      	adds	r3, #16
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ae54:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ae56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae58:	3b01      	subs	r3, #1
 800ae5a:	69b9      	ldr	r1, [r7, #24]
 800ae5c:	440b      	add	r3, r1
 800ae5e:	7c1b      	ldrb	r3, [r3, #16]
 800ae60:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800ae62:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800ae64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae66:	3a02      	subs	r2, #2
 800ae68:	69b9      	ldr	r1, [r7, #24]
 800ae6a:	440a      	add	r2, r1
 800ae6c:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800ae6e:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800ae70:	6a3b      	ldr	r3, [r7, #32]
 800ae72:	601a      	str	r2, [r3, #0]
    address--;
 800ae74:	6a3b      	ldr	r3, [r7, #32]
 800ae76:	3b04      	subs	r3, #4
 800ae78:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7c:	3b04      	subs	r3, #4
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (index > 3UL)
 800ae80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d8da      	bhi.n	800ae3c <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	372c      	adds	r7, #44	@ 0x2c
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	ffff0000 	.word	0xffff0000

0800ae98 <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	655a      	str	r2, [r3, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb0:	f003 0303 	and.w	r3, r3, #3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d108      	bne.n	800aeca <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f042 0208 	orr.w	r2, r2, #8
 800aec6:	605a      	str	r2, [r3, #4]
 800aec8:	e007      	b.n	800aeda <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	685a      	ldr	r2, [r3, #4]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f022 0208 	bic.w	r2, r2, #8
 800aed8:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f022 0201 	bic.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800aef8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800af08:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af18:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af28:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f042 0201 	orr.w	r2, r2, #1
 800af38:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af3e:	f003 030c 	and.w	r3, r3, #12
 800af42:	2b08      	cmp	r3, #8
 800af44:	d108      	bne.n	800af58 <JPEG_Init_Process+0xc0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
 800af54:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800af56:	e00d      	b.n	800af74 <JPEG_Init_Process+0xdc>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af5c:	f003 030c 	and.w	r3, r3, #12
 800af60:	2b0c      	cmp	r3, #12
 800af62:	d107      	bne.n	800af74 <JPEG_Init_Process+0xdc>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800af72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <JPEG_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if the process has ends else JPEG_PROCESS_ONGOING
  */
static uint32_t JPEG_Process(JPEG_HandleTypeDef *hjpeg)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;

  /*End of header processing flag */
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af8c:	f003 0303 	and.w	r3, r3, #3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d125      	bne.n	800afe0 <JPEG_Process+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01e      	beq.n	800afe0 <JPEG_Process+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3304      	adds	r3, #4
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff f84f 	bl	800a04c <HAL_JPEG_GetInfo>
      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	3304      	adds	r3, #4
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff f996 	bl	800a2ec <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800afce:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afde:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*Input FIFO status handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d116      	bne.n	800b01a <JPEG_Process+0x9a>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aff2:	f003 0302 	and.w	r3, r3, #2
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d004      	beq.n	800b004 <JPEG_Process+0x84>
    {
      /*Input FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be written in */
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800affa:	2108      	movs	r1, #8
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f988 	bl	800b312 <JPEG_ReadInputData>
 800b002:	e00a      	b.n	800b01a <JPEG_Process+0x9a>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <JPEG_Process+0x9a>
    {
      /*Input FIFO Not Full flag */
      /*32-bit value can be written in */
      JPEG_ReadInputData(hjpeg, 1);
 800b012:	2101      	movs	r1, #1
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f97c 	bl	800b312 <JPEG_ReadInputData>
    }
  }


  /*Output FIFO flag handling*/
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b01e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b022:	2b00      	cmp	r3, #0
 800b024:	d116      	bne.n	800b054 <JPEG_Process+0xd4>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b02c:	f003 0308 	and.w	r3, r3, #8
 800b030:	2b00      	cmp	r3, #0
 800b032:	d004      	beq.n	800b03e <JPEG_Process+0xbe>
    {
      /*Output FIFO threshold flag */
      /*JPEG_FIFO_TH_SIZE words can be read out */
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800b034:	2108      	movs	r1, #8
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f864 	bl	800b104 <JPEG_StoreOutputData>
 800b03c:	e00a      	b.n	800b054 <JPEG_Process+0xd4>
    }
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <JPEG_Process+0xd4>
    {
      /*Output FIFO Not Empty flag */
      /*32-bit value can be read out */
      JPEG_StoreOutputData(hjpeg, 1);
 800b04c:	2101      	movs	r1, #1
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f858 	bl	800b104 <JPEG_StoreOutputData>
      /* Nothing to do */
    }
  }

  /*End of Conversion handling :i.e EOC flag is high and OFTF low and OFNEF low*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b05a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b05e:	2b20      	cmp	r3, #32
 800b060:	d14b      	bne.n	800b0fa <JPEG_Process+0x17a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f022 0201 	bic.w	r2, r2, #1
 800b070:	601a      	str	r2, [r3, #0]

    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b076:	f003 030c 	and.w	r3, r3, #12
 800b07a:	2b08      	cmp	r3, #8
 800b07c:	d107      	bne.n	800b08e <JPEG_Process+0x10e>
    {
      /* Disable All Interrupts */
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b08c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b09c:	639a      	str	r2, [r3, #56]	@ 0x38

    /*Call End of conversion callback */
    if (hjpeg->JpegOutCount > 0UL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00a      	beq.n	800b0bc <JPEG_Process+0x13c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	69d9      	ldr	r1, [r3, #28]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7f6 fa77 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Reset Context Operation*/
    tmpContext = hjpeg->Context;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c0:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0c6:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f003 0303 	and.w	r3, r3, #3
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d103      	bne.n	800b0f0 <JPEG_Process+0x170>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7f6 fa2d 	bl	8001548 <HAL_JPEG_DecodeCpltCallback>
 800b0ee:	e002      	b.n	800b0f6 <JPEG_Process+0x176>
    else /* JPEG_CONTEXT_ENCODE */
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->EncodeCpltCallback(hjpeg);
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff f906 	bl	800a302 <HAL_JPEG_EncodeCpltCallback>
#endif
    }

    return JPEG_PROCESS_DONE;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <JPEG_Process+0x17c>
  }


  return JPEG_PROCESS_ONGOING;
 800b0fa:	2300      	movs	r3, #0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <JPEG_StoreOutputData>:
  *         the configuration information for JPEG module
  * @param  nbOutputWords Number of output words (of 32 bits) ready from the JPEG peripheral
  * @retval None
  */
static void JPEG_StoreOutputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbOutputWords)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  uint32_t nb_words;
  uint32_t nb_bytes;
  uint32_t dataword;

  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	440b      	add	r3, r1
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d34b      	bcc.n	800b1b8 <JPEG_StoreOutputData+0xb4>
  {
    for (index = 0; index < nbOutputWords; index++)
 800b120:	2300      	movs	r3, #0
 800b122:	617b      	str	r3, [r7, #20]
 800b124:	e031      	b.n	800b18a <JPEG_StoreOutputData+0x86>
    {
      /*Transfer 32 bits from the JPEG output FIFO*/
      dataword = hjpeg->Instance->DOR;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b12c:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	69da      	ldr	r2, [r3, #28]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b136:	4413      	add	r3, r2
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	0a19      	lsrs	r1, r3, #8
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b14a:	3301      	adds	r3, #1
 800b14c:	4413      	add	r3, r2
 800b14e:	b2ca      	uxtb	r2, r1
 800b150:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	0c19      	lsrs	r1, r3, #16
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69da      	ldr	r2, [r3, #28]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15e:	3302      	adds	r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	b2ca      	uxtb	r2, r1
 800b164:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	0e19      	lsrs	r1, r3, #24
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69da      	ldr	r2, [r3, #28]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b172:	3303      	adds	r3, #3
 800b174:	4413      	add	r3, r2
 800b176:	b2ca      	uxtb	r2, r1
 800b178:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17e:	1d1a      	adds	r2, r3, #4
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	3301      	adds	r3, #1
 800b188:	617b      	str	r3, [r7, #20]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d3c9      	bcc.n	800b126 <JPEG_StoreOutputData+0x22>
    }
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b19a:	429a      	cmp	r2, r3
 800b19c:	f040 80b5 	bne.w	800b30a <JPEG_StoreOutputData+0x206>
    {
      /*Output Buffer is full, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69d9      	ldr	r1, [r3, #28]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f7f6 f9fa 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/
      hjpeg->JpegOutCount = 0;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  else
  {
    /* Nothing to do */
  }
}
 800b1b6:	e0a8      	b.n	800b30a <JPEG_StoreOutputData+0x206>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	f240 80a2 	bls.w	800b30a <JPEG_StoreOutputData+0x206>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	089b      	lsrs	r3, r3, #2
 800b1d2:	613b      	str	r3, [r7, #16]
    for (index = 0; index < nb_words; index++)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	617b      	str	r3, [r7, #20]
 800b1d8:	e031      	b.n	800b23e <JPEG_StoreOutputData+0x13a>
      dataword = hjpeg->Instance->DOR;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1e0:	60bb      	str	r3, [r7, #8]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	69da      	ldr	r2, [r3, #28]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ea:	4413      	add	r3, r2
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	b2d2      	uxtb	r2, r2
 800b1f0:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	0a19      	lsrs	r1, r3, #8
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69da      	ldr	r2, [r3, #28]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1fe:	3301      	adds	r3, #1
 800b200:	4413      	add	r3, r2
 800b202:	b2ca      	uxtb	r2, r1
 800b204:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	0c19      	lsrs	r1, r3, #16
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	69da      	ldr	r2, [r3, #28]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b212:	3302      	adds	r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	b2ca      	uxtb	r2, r1
 800b218:	701a      	strb	r2, [r3, #0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	0e19      	lsrs	r1, r3, #24
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	69da      	ldr	r2, [r3, #28]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b226:	3303      	adds	r3, #3
 800b228:	4413      	add	r3, r2
 800b22a:	b2ca      	uxtb	r2, r1
 800b22c:	701a      	strb	r2, [r3, #0]
      hjpeg->JpegOutCount += 4UL;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b232:	1d1a      	adds	r2, r3, #4
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	625a      	str	r2, [r3, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	3301      	adds	r3, #1
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	429a      	cmp	r2, r3
 800b244:	d3c9      	bcc.n	800b1da <JPEG_StoreOutputData+0xd6>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b24e:	429a      	cmp	r2, r3
 800b250:	d10b      	bne.n	800b26a <JPEG_StoreOutputData+0x166>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	69d9      	ldr	r1, [r3, #28]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25a:	461a      	mov	r2, r3
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f7f6 f9a1 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b268:	e04f      	b.n	800b30a <JPEG_StoreOutputData+0x206>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	60fb      	str	r3, [r7, #12]
      dataword = hjpeg->Instance->DOR;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b27c:	60bb      	str	r3, [r7, #8]
      for (index = 0; index < nb_bytes; index++)
 800b27e:	2300      	movs	r3, #0
 800b280:	617b      	str	r3, [r7, #20]
 800b282:	e015      	b.n	800b2b0 <JPEG_StoreOutputData+0x1ac>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f003 0303 	and.w	r3, r3, #3
 800b28a:	00db      	lsls	r3, r3, #3
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	fa22 f103 	lsr.w	r1, r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	69da      	ldr	r2, [r3, #28]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29a:	4413      	add	r3, r2
 800b29c:	b2ca      	uxtb	r2, r1
 800b29e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	617b      	str	r3, [r7, #20]
 800b2b0:	697a      	ldr	r2, [r7, #20]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d3e5      	bcc.n	800b284 <JPEG_StoreOutputData+0x180>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	69d9      	ldr	r1, [r3, #28]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7f6 f96e 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	625a      	str	r2, [r3, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f1c3 0304 	rsb	r3, r3, #4
 800b2d4:	60fb      	str	r3, [r7, #12]
      for (index = nb_bytes; index < 4UL; index++)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	617b      	str	r3, [r7, #20]
 800b2da:	e013      	b.n	800b304 <JPEG_StoreOutputData+0x200>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	00db      	lsls	r3, r3, #3
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	fa22 f103 	lsr.w	r1, r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	69da      	ldr	r2, [r3, #28]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ee:	4413      	add	r3, r2
 800b2f0:	b2ca      	uxtb	r2, r1
 800b2f2:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount++;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f8:	1c5a      	adds	r2, r3, #1
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	625a      	str	r2, [r3, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	3301      	adds	r3, #1
 800b302:	617b      	str	r3, [r7, #20]
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2b03      	cmp	r3, #3
 800b308:	d9e8      	bls.n	800b2dc <JPEG_StoreOutputData+0x1d8>
}
 800b30a:	bf00      	nop
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <JPEG_ReadInputData>:
  *         the configuration information for JPEG module
  * @param  nbRequestWords Number of input words (of 32 bits) that the JPE peripheral request
  * @retval None
  */
static void JPEG_ReadInputData(JPEG_HandleTypeDef *hjpeg, uint32_t nbRequestWords)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b088      	sub	sp, #32
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
  uint32_t nb_bytes = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	61fb      	str	r3, [r7, #28]
  uint32_t nb_words;
  uint32_t index;
  uint32_t dataword;
  uint32_t input_count;

  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <JPEG_ReadInputData+0x1c>
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d104      	bne.n	800b338 <JPEG_ReadInputData+0x26>
  {
    /* No more Input data : nothing to do*/
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800b32e:	2101      	movs	r1, #1
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f7fe ff83 	bl	800a23c <HAL_JPEG_Pause>
 800b336:	e028      	b.n	800b38a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6a1b      	ldr	r3, [r3, #32]
 800b340:	429a      	cmp	r2, r3
 800b342:	d906      	bls.n	800b352 <JPEG_ReadInputData+0x40>
  {
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6a1b      	ldr	r3, [r3, #32]
 800b34c:	1ad3      	subs	r3, r2, r3
 800b34e:	61fb      	str	r3, [r7, #28]
 800b350:	e01b      	b.n	800b38a <JPEG_ReadInputData+0x78>
  }
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a1b      	ldr	r3, [r3, #32]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d115      	bne.n	800b38a <JPEG_ReadInputData+0x78>
  {
    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	4619      	mov	r1, r3
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fe ffd6 	bl	800a316 <HAL_JPEG_GetDataCallback>
#endif /*USE_HAL_JPEG_REGISTER_CALLBACKS*/

    if (hjpeg->InDataLength > 4UL)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d905      	bls.n	800b37e <JPEG_ReadInputData+0x6c>
    {
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b376:	f023 0203 	bic.w	r2, r3, #3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	629a      	str	r2, [r3, #40]	@ 0x28
    }
    hjpeg->JpegInCount = 0;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	621a      	str	r2, [r3, #32]
    nb_bytes = hjpeg->InDataLength;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b388:	61fb      	str	r3, [r7, #28]
  }
  else
  {
    /* Nothing to do */
  }
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b38e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b392:	2b00      	cmp	r3, #0
 800b394:	f040 809f 	bne.w	800b4d6 <JPEG_ReadInputData+0x1c4>
 800b398:	69fb      	ldr	r3, [r7, #28]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f000 809b 	beq.w	800b4d6 <JPEG_ReadInputData+0x1c4>
  {
    nb_words = nb_bytes / 4UL;
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	089b      	lsrs	r3, r3, #2
 800b3a4:	613b      	str	r3, [r7, #16]
    if (nb_words >= nbRequestWords)
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d335      	bcc.n	800b41a <JPEG_ReadInputData+0x108>
    {
      for (index = 0; index < nbRequestWords; index++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	61bb      	str	r3, [r7, #24]
 800b3b2:	e02d      	b.n	800b410 <JPEG_ReadInputData+0xfe>
      {
        input_count = hjpeg->JpegInCount;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	60fb      	str	r3, [r7, #12]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	699a      	ldr	r2, [r3, #24]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	4619      	mov	r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	699a      	ldr	r2, [r3, #24]
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	4413      	add	r3, r2
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	021b      	lsls	r3, r3, #8
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3d4:	ea41 0203 	orr.w	r2, r1, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6999      	ldr	r1, [r3, #24]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3302      	adds	r3, #2
 800b3e0:	440b      	add	r3, r1
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	041b      	lsls	r3, r3, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b3e6:	ea42 0103 	orr.w	r1, r2, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	699a      	ldr	r2, [r3, #24]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	3303      	adds	r3, #3
 800b3f2:	4413      	add	r3, r2
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	061a      	lsls	r2, r3, #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b3fc:	430a      	orrs	r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b3fe:	641a      	str	r2, [r3, #64]	@ 0x40

        hjpeg->JpegInCount += 4UL;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	1d1a      	adds	r2, r3, #4
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	621a      	str	r2, [r3, #32]
      for (index = 0; index < nbRequestWords; index++)
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	3301      	adds	r3, #1
 800b40e:	61bb      	str	r3, [r7, #24]
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	429a      	cmp	r2, r3
 800b416:	d3cd      	bcc.n	800b3b4 <JPEG_ReadInputData+0xa2>
        }
        hjpeg->Instance->DIR = dataword;
      }
    }
  }
}
 800b418:	e05d      	b.n	800b4d6 <JPEG_ReadInputData+0x1c4>
      if (nb_words > 0UL)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d035      	beq.n	800b48c <JPEG_ReadInputData+0x17a>
        for (index = 0; index < nb_words; index++)
 800b420:	2300      	movs	r3, #0
 800b422:	61bb      	str	r3, [r7, #24]
 800b424:	e02d      	b.n	800b482 <JPEG_ReadInputData+0x170>
          input_count = hjpeg->JpegInCount;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	60fb      	str	r3, [r7, #12]
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	699a      	ldr	r2, [r3, #24]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	4619      	mov	r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	699a      	ldr	r2, [r3, #24]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3301      	adds	r3, #1
 800b440:	4413      	add	r3, r2
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	021b      	lsls	r3, r3, #8
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b446:	ea41 0203 	orr.w	r2, r1, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6999      	ldr	r1, [r3, #24]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3302      	adds	r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	041b      	lsls	r3, r3, #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800b458:	ea42 0103 	orr.w	r1, r2, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	699a      	ldr	r2, [r3, #24]
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3303      	adds	r3, #3
 800b464:	4413      	add	r3, r2
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	061a      	lsls	r2, r3, #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800b46e:	430a      	orrs	r2, r1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800b470:	641a      	str	r2, [r3, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a1b      	ldr	r3, [r3, #32]
 800b476:	1d1a      	adds	r2, r3, #4
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_words; index++)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	3301      	adds	r3, #1
 800b480:	61bb      	str	r3, [r7, #24]
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	429a      	cmp	r2, r3
 800b488:	d3cd      	bcc.n	800b426 <JPEG_ReadInputData+0x114>
}
 800b48a:	e024      	b.n	800b4d6 <JPEG_ReadInputData+0x1c4>
        dataword = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < nb_bytes; index++)
 800b490:	2300      	movs	r3, #0
 800b492:	61bb      	str	r3, [r7, #24]
 800b494:	e017      	b.n	800b4c6 <JPEG_ReadInputData+0x1b4>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	4413      	add	r3, r2
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	00db      	lsls	r3, r3, #3
 800b4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]
          hjpeg->JpegInCount++;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	621a      	str	r2, [r3, #32]
        for (index = 0; index < nb_bytes; index++)
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	61bb      	str	r3, [r7, #24]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d3e3      	bcc.n	800b496 <JPEG_ReadInputData+0x184>
        hjpeg->Instance->DIR = dataword;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800b4d6:	bf00      	nop
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b4e0:	b590      	push	{r4, r7, lr}
 800b4e2:	b087      	sub	sp, #28
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	6078      	str	r0, [r7, #4]
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ee:	60fb      	str	r3, [r7, #12]
  /*if the MDMA Out is triggred with JPEG Out FIFO Threshold flag
      then MDMA out buffer size is 32 bytes
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4f6:	60bb      	str	r3, [r7, #8]

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4fc:	68fa      	ldr	r2, [r7, #12]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d804      	bhi.n	800b50c <JPEG_DMA_StartProcess+0x2c>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d901      	bls.n	800b510 <JPEG_DMA_StartProcess+0x30>
  {
    return HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	e074      	b.n	800b5fa <JPEG_DMA_StartProcess+0x11a>
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b514:	4a3b      	ldr	r2, [pc, #236]	@ (800b604 <JPEG_DMA_StartProcess+0x124>)
 800b516:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b51c:	4a3a      	ldr	r2, [pc, #232]	@ (800b608 <JPEG_DMA_StartProcess+0x128>)
 800b51e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b524:	4a39      	ldr	r2, [pc, #228]	@ (800b60c <JPEG_DMA_StartProcess+0x12c>)
 800b526:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b52c:	4a36      	ldr	r2, [pc, #216]	@ (800b608 <JPEG_DMA_StartProcess+0x128>)
 800b52e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b534:	4a36      	ldr	r2, [pc, #216]	@ (800b610 <JPEG_DMA_StartProcess+0x130>)
 800b536:	659a      	str	r2, [r3, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <JPEG_DMA_StartProcess+0x64>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d107      	bne.n	800b554 <JPEG_DMA_StartProcess+0x74>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b548:	f043 0204 	orr.w	r2, r3, #4
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	e052      	b.n	800b5fa <JPEG_DMA_StartProcess+0x11a>
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b55c:	68f9      	ldr	r1, [r7, #12]
 800b55e:	fbb3 f1f1 	udiv	r1, r3, r1
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	fb00 f101 	mul.w	r1, r0, r1
 800b568:	1a5b      	subs	r3, r3, r1
 800b56a:	1ad2      	subs	r2, r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	629a      	str	r2, [r3, #40]	@ 0x28

  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b578:	68b9      	ldr	r1, [r7, #8]
 800b57a:	fbb3 f1f1 	udiv	r1, r3, r1
 800b57e:	68b8      	ldr	r0, [r7, #8]
 800b580:	fb00 f101 	mul.w	r1, r0, r1
 800b584:	1a5b      	subs	r3, r3, r1
 800b586:	1ad2      	subs	r2, r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	62da      	str	r2, [r3, #44]	@ 0x2c


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3344      	adds	r3, #68	@ 0x44
 800b596:	4619      	mov	r1, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	461c      	mov	r4, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	9200      	str	r2, [sp, #0]
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	f000 fbe2 	bl	800bd70 <HAL_MDMA_Start_IT>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <JPEG_DMA_StartProcess+0xe2>
                        hjpeg->OutDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5b6:	f043 0204 	orr.w	r2, r3, #4
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e01b      	b.n	800b5fa <JPEG_DMA_StartProcess+0x11a>
  }
  /* Start DMA FIFO In transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3340      	adds	r3, #64	@ 0x40
 800b5d2:	461c      	mov	r4, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d8:	2201      	movs	r2, #1
 800b5da:	9200      	str	r2, [sp, #0]
 800b5dc:	4622      	mov	r2, r4
 800b5de:	f000 fbc7 	bl	800bd70 <HAL_MDMA_Start_IT>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d007      	beq.n	800b5f8 <JPEG_DMA_StartProcess+0x118>
                        hjpeg->InDataLength, 1) != HAL_OK)
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5ec:	f043 0204 	orr.w	r2, r3, #4
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	651a      	str	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e000      	b.n	800b5fa <JPEG_DMA_StartProcess+0x11a>
  }

  return HAL_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd90      	pop	{r4, r7, pc}
 800b602:	bf00      	nop
 800b604:	0800b913 	.word	0x0800b913
 800b608:	0800bb01 	.word	0x0800bb01
 800b60c:	0800ba3f 	.word	0x0800ba3f
 800b610:	0800bb51 	.word	0x0800bb51

0800b614 <JPEG_DMA_ContinueProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static void JPEG_DMA_ContinueProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  /*End of header processing flag rises*/
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b620:	f003 0303 	and.w	r3, r3, #3
 800b624:	2b02      	cmp	r3, #2
 800b626:	d125      	bne.n	800b674 <JPEG_DMA_ContinueProcess+0x60>
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b62e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d01e      	beq.n	800b674 <JPEG_DMA_ContinueProcess+0x60>
    {
      /*Call Header parsing complete callback */
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	3304      	adds	r3, #4
 800b63a:	4619      	mov	r1, r3
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7fe fd05 	bl	800a04c <HAL_JPEG_GetInfo>

      /* Reset the ImageQuality */
      hjpeg->Conf.ImageQuality = 0;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	615a      	str	r2, [r3, #20]

      /*Call Info Ready callback */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->InfoReadyCallback(hjpeg, &hjpeg->Conf);
#else
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3304      	adds	r3, #4
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fe fe4c 	bl	800a2ec <HAL_JPEG_InfoReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b662:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Clear header processing done flag */
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b672:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /*End of Conversion handling*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b67a:	f003 0320 	and.w	r3, r3, #32
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d039      	beq.n	800b6f6 <JPEG_DMA_ContinueProcess+0xe2>
  {

    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b686:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	655a      	str	r2, [r3, #84]	@ 0x54

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f022 0201 	bic.w	r2, r2, #1
 800b69c:	601a      	str	r2, [r3, #0]

    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b6ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear all flags */
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b6bc:	639a      	str	r2, [r3, #56]	@ 0x38

    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d104      	bne.n	800b6d6 <JPEG_DMA_ContinueProcess+0xc2>
    {
      /* Stop the MDMA In Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 fbce 	bl	800be72 <HAL_MDMA_Abort_IT>
    }

    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	2b02      	cmp	r3, #2
 800b6e2:	d105      	bne.n	800b6f0 <JPEG_DMA_ContinueProcess+0xdc>
    {
      /* Stop the MDMA out Xfer*/
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f000 fbc2 	bl	800be72 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
    }
  }


}
 800b6ee:	e002      	b.n	800b6f6 <JPEG_DMA_ContinueProcess+0xe2>
      JPEG_DMA_EndProcess(hjpeg);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f804 	bl	800b6fe <JPEG_DMA_EndProcess>
}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b716:	1ad2      	subs	r2, r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	625a      	str	r2, [r3, #36]	@ 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b724:	429a      	cmp	r2, r3
 800b726:	d10a      	bne.n	800b73e <JPEG_DMA_EndProcess+0x40>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	69d9      	ldr	r1, [r3, #28]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b730:	461a      	mov	r2, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f7f5 ff36 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b744:	f003 0310 	and.w	r3, r3, #16
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d134      	bne.n	800b7b6 <JPEG_DMA_EndProcess+0xb8>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <JPEG_DMA_EndProcess+0x6c>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	69d9      	ldr	r1, [r3, #28]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b75c:	461a      	mov	r2, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7f5 ff20 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0201 	bic.w	r2, r2, #1
 800b778:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b77e:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b784:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2200      	movs	r2, #0
 800b790:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f003 0303 	and.w	r3, r3, #3
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d103      	bne.n	800b7ae <JPEG_DMA_EndProcess+0xb0>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7f5 fece 	bl	8001548 <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 800b7ac:	e00c      	b.n	800b7c8 <JPEG_DMA_EndProcess+0xca>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7fe fda7 	bl	800a302 <HAL_JPEG_EncodeCpltCallback>
}
 800b7b4:	e008      	b.n	800b7c8 <JPEG_DMA_EndProcess+0xca>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d102      	bne.n	800b7c8 <JPEG_DMA_EndProcess+0xca>
    JPEG_DMA_PollResidualData(hjpeg);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f804 	bl	800b7d0 <JPEG_DMA_PollResidualData>
}
 800b7c8:	bf00      	nop
 800b7ca:	3710      	adds	r7, #16
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b7d8:	2310      	movs	r3, #16
 800b7da:	617b      	str	r3, [r7, #20]
 800b7dc:	e04f      	b.n	800b87e <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d146      	bne.n	800b878 <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7f0:	f003 0310 	and.w	r3, r3, #16
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d03f      	beq.n	800b878 <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7fe:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	69da      	ldr	r2, [r3, #28]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b808:	4413      	add	r3, r2
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	b2d2      	uxtb	r2, r2
 800b80e:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	0a19      	lsrs	r1, r3, #8
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	69da      	ldr	r2, [r3, #28]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b81c:	3301      	adds	r3, #1
 800b81e:	4413      	add	r3, r2
 800b820:	b2ca      	uxtb	r2, r1
 800b822:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	0c19      	lsrs	r1, r3, #16
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	69da      	ldr	r2, [r3, #28]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b830:	3302      	adds	r3, #2
 800b832:	4413      	add	r3, r2
 800b834:	b2ca      	uxtb	r2, r1
 800b836:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	0e19      	lsrs	r1, r3, #24
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	69da      	ldr	r2, [r3, #28]
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b844:	3303      	adds	r3, #3
 800b846:	4413      	add	r3, r2
 800b848:	b2ca      	uxtb	r2, r1
 800b84a:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b850:	1d1a      	adds	r2, r3, #4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	625a      	str	r2, [r3, #36]	@ 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85e:	429a      	cmp	r2, r3
 800b860:	d10a      	bne.n	800b878 <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	69d9      	ldr	r1, [r3, #28]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86a:	461a      	mov	r2, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f7f5 fe99 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2200      	movs	r2, #0
 800b876:	625a      	str	r2, [r3, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	3b01      	subs	r3, #1
 800b87c:	617b      	str	r3, [r7, #20]
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1ac      	bne.n	800b7de <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b888:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b890:	f003 0310 	and.w	r3, r3, #16
 800b894:	2b00      	cmp	r3, #0
 800b896:	d004      	beq.n	800b8a2 <JPEG_DMA_PollResidualData+0xd2>
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d133      	bne.n	800b90a <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	681a      	ldr	r2, [r3, #0]
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f022 0201 	bic.w	r2, r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	69d9      	ldr	r1, [r3, #28]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7f5 fe6d 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    tmpContext = hjpeg->Context;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8d4:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8da:	f403 4282 	and.w	r2, r3, #16640	@ 0x4100
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f003 0303 	and.w	r3, r3, #3
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	d103      	bne.n	800b904 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f7f5 fe23 	bl	8001548 <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 800b902:	e002      	b.n	800b90a <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7fe fcfc 	bl	800a302 <HAL_JPEG_EncodeCpltCallback>
}
 800b90a:	bf00      	nop
 800b90c:	3718      	adds	r7, #24
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}

0800b912 <JPEG_MDMAInCpltCallback>:
  * @brief  MDMA input transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAInCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800b912:	b590      	push	{r4, r7, lr}
 800b914:	b087      	sub	sp, #28
 800b916:	af02      	add	r7, sp, #8
 800b918:	6078      	str	r0, [r7, #4]
  uint32_t inXfrSize;

  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b91e:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the MDMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800b92e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Check if context method is DMA and we are not in ending DMA stage */
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b934:	f248 030c 	movw	r3, #32780	@ 0x800c
 800b938:	4013      	ands	r3, r2
 800b93a:	2b0c      	cmp	r3, #12
 800b93c:	d17c      	bne.n	800ba38 <JPEG_MDMAInCpltCallback+0x126>
    /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
      else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
      */
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b944:	60bb      	str	r3, [r7, #8]

    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800b954:	1ad2      	subs	r2, r2, r3
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	4619      	mov	r1, r3
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f7fe fcd8 	bl	800a316 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */


    if (hjpeg->InDataLength >= inXfrSize)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d81f      	bhi.n	800b9b0 <JPEG_MDMAInCpltCallback+0x9e>
    {
      if (inXfrSize == 0UL)
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10d      	bne.n	800b992 <JPEG_MDMAInCpltCallback+0x80>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b97a:	f043 0204 	orr.w	r2, r3, #4
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2206      	movs	r2, #6
 800b986:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f7f5 fdec 	bl	8001568 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800b990:	e052      	b.n	800ba38 <JPEG_MDMAInCpltCallback+0x126>
      }
      /*JPEG Input MDMA transfer data number must be multiple of MDMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b99a:	68b9      	ldr	r1, [r7, #8]
 800b99c:	fbb3 f1f1 	udiv	r1, r3, r1
 800b9a0:	68b8      	ldr	r0, [r7, #8]
 800b9a2:	fb00 f101 	mul.w	r1, r0, r1
 800b9a6:	1a5b      	subs	r3, r3, r1
 800b9a8:	1ad2      	subs	r2, r2, r3
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	629a      	str	r2, [r3, #40]	@ 0x28
 800b9ae:	e010      	b.n	800b9d2 <JPEG_MDMAInCpltCallback+0xc0>

    }
    else if (hjpeg->InDataLength > 0UL)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00c      	beq.n	800b9d2 <JPEG_MDMAInCpltCallback+0xc0>
    {
      /* Transfer the remaining Data, must be multiple of source data size (byte) and destination data size (word) */
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9bc:	f003 0303 	and.w	r3, r3, #3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d006      	beq.n	800b9d2 <JPEG_MDMAInCpltCallback+0xc0>
      {
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9c8:	089b      	lsrs	r3, r3, #2
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	009a      	lsls	r2, r3, #2
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	629a      	str	r2, [r3, #40]	@ 0x28
    else
    {
      /* Nothing to do */
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d124      	bne.n	800ba28 <JPEG_MDMAInCpltCallback+0x116>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d020      	beq.n	800ba28 <JPEG_MDMAInCpltCallback+0x116>
    {
      /* Start MDMA FIFO In transfer */
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	699b      	ldr	r3, [r3, #24]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3340      	adds	r3, #64	@ 0x40
 800b9f6:	461c      	mov	r4, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	9200      	str	r2, [sp, #0]
 800ba00:	4622      	mov	r2, r4
 800ba02:	f000 f9b5 	bl	800bd70 <HAL_MDMA_Start_IT>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00d      	beq.n	800ba28 <JPEG_MDMAInCpltCallback+0x116>
                            hjpeg->InDataLength, 1) != HAL_OK)
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba10:	f043 0204 	orr.w	r2, r3, #4
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	651a      	str	r2, [r3, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2206      	movs	r2, #6
 800ba1c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f7f5 fda1 	bl	8001568 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800ba26:	e007      	b.n	800ba38 <JPEG_MDMAInCpltCallback+0x126>
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ba36:	631a      	str	r2, [r3, #48]	@ 0x30
  }
}
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd90      	pop	{r4, r7, pc}

0800ba3e <JPEG_MDMAOutCpltCallback>:
  * @brief  MDMA output transfer complete callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800ba3e:	b590      	push	{r4, r7, lr}
 800ba40:	b087      	sub	sp, #28
 800ba42:	af02      	add	r7, sp, #8
 800ba44:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba4a:	60fb      	str	r3, [r7, #12]


  /* Disable The JPEG IT so the MDMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800ba5a:	631a      	str	r2, [r3, #48]	@ 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba60:	f248 030c 	movw	r3, #32780	@ 0x800c
 800ba64:	4013      	ands	r3, r2
 800ba66:	2b0c      	cmp	r3, #12
 800ba68:	d147      	bne.n	800bafa <JPEG_MDMAOutCpltCallback+0xbc>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba70:	f003 0320 	and.w	r3, r3, #32
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d138      	bne.n	800baea <JPEG_MDMAOutCpltCallback+0xac>
    {
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f3c3 0310 	ubfx	r3, r3, #0, #17
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	69d9      	ldr	r1, [r3, #28]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba94:	461a      	mov	r2, r3
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7f5 fd84 	bl	80015a4 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d120      	bne.n	800baea <JPEG_MDMAOutCpltCallback+0xac>
      {
        /* Start MDMA FIFO Out transfer */
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3344      	adds	r3, #68	@ 0x44
 800bab2:	4619      	mov	r1, r3
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	461c      	mov	r4, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babe:	2201      	movs	r2, #1
 800bac0:	9200      	str	r2, [sp, #0]
 800bac2:	4622      	mov	r2, r4
 800bac4:	f000 f954 	bl	800bd70 <HAL_MDMA_Start_IT>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00d      	beq.n	800baea <JPEG_MDMAOutCpltCallback+0xac>
                              hjpeg->OutDataLength, 1) != HAL_OK)
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bad2:	f043 0204 	orr.w	r2, r3, #4
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	651a      	str	r2, [r3, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2206      	movs	r2, #6
 800bade:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7f5 fd40 	bl	8001568 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 800bae8:	e007      	b.n	800bafa <JPEG_MDMAOutCpltCallback+0xbc>
        }
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800baf8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

}
 800bafa:	3714      	adds	r7, #20
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd90      	pop	{r4, r7, pc}

0800bb00 <JPEG_MDMAErrorCallback>:
  * @brief  MDMA Transfer error callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb0c:	60fb      	str	r3, [r7, #12]

  /*Stop Encoding/Decoding*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f022 0201 	bic.w	r2, r2, #1
 800bb1c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800bb2c:	631a      	str	r2, [r3, #48]	@ 0x30

  hjpeg->State = HAL_JPEG_STATE_READY;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2201      	movs	r2, #1
 800bb32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb3a:	f043 0204 	orr.w	r2, r3, #4
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
  hjpeg->ErrorCallback(hjpeg);
#else
  HAL_JPEG_ErrorCallback(hjpeg);
 800bb42:	68f8      	ldr	r0, [r7, #12]
 800bb44:	f7f5 fd10 	bl	8001568 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <JPEG_MDMAOutAbortCallback>:
  * @brief  MDMA output Abort callback
  * @param  hmdma pointer to a MDMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_MDMAOutAbortCallback(MDMA_HandleTypeDef *hmdma)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb5c:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <JPEG_MDMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f7ff fdc7 	bl	800b6fe <JPEG_DMA_EndProcess>
  }
}
 800bb70:	bf00      	nop
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <JPEG_GetQuality>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b08b      	sub	sp, #44	@ 0x2c
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  uint32_t quality = 0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3350      	adds	r3, #80	@ 0x50
 800bb8a:	61bb      	str	r3, [r7, #24]

  i = 0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	623b      	str	r3, [r7, #32]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800bb90:	e042      	b.n	800bc18 <JPEG_GetQuality+0xa0>
  {
    quantRow = *tableAddress;
 800bb92:	69bb      	ldr	r3, [r7, #24]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	617b      	str	r3, [r7, #20]
    for (j = 0; j < 4UL; j++)
 800bb98:	2300      	movs	r3, #0
 800bb9a:	61fb      	str	r3, [r7, #28]
 800bb9c:	e033      	b.n	800bc06 <JPEG_GetQuality+0x8e>
    {
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	fa22 f303 	lsr.w	r3, r2, r3
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	613b      	str	r3, [r7, #16]
      if (quantVal == 1UL)
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d103      	bne.n	800bbba <JPEG_GetQuality+0x42>
      {
        /* if Quantization value = 1 then quality is 100%*/
        quality += 100UL;
 800bbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb4:	3364      	adds	r3, #100	@ 0x64
 800bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbb8:	e022      	b.n	800bc00 <JPEG_GetQuality+0x88>
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	2264      	movs	r2, #100	@ 0x64
 800bbbe:	fb02 f303 	mul.w	r3, r2, r3
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bbc6:	6a38      	ldr	r0, [r7, #32]
 800bbc8:	69f9      	ldr	r1, [r7, #28]
 800bbca:	4401      	add	r1, r0
 800bbcc:	4818      	ldr	r0, [pc, #96]	@ (800bc30 <JPEG_GetQuality+0xb8>)
 800bbce:	5c41      	ldrb	r1, [r0, r1]
 800bbd0:	440a      	add	r2, r1
 800bbd2:	7812      	ldrb	r2, [r2, #0]
 800bbd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbd8:	60fb      	str	r3, [r7, #12]

        if (scale <= 100UL)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b64      	cmp	r3, #100	@ 0x64
 800bbde:	d807      	bhi.n	800bbf0 <JPEG_GetQuality+0x78>
        {
          quality += (200UL - scale) / 2UL;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f1c3 03c8 	rsb	r3, r3, #200	@ 0xc8
 800bbe6:	085b      	lsrs	r3, r3, #1
 800bbe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbea:	4413      	add	r3, r2
 800bbec:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbee:	e007      	b.n	800bc00 <JPEG_GetQuality+0x88>
        }
        else
        {
          quality += 5000UL / scale;
 800bbf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbfc:	4413      	add	r3, r2
 800bbfe:	627b      	str	r3, [r7, #36]	@ 0x24
    for (j = 0; j < 4UL; j++)
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	3301      	adds	r3, #1
 800bc04:	61fb      	str	r3, [r7, #28]
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d9c8      	bls.n	800bb9e <JPEG_GetQuality+0x26>
        }
      }
    }

    i += 4UL;
 800bc0c:	6a3b      	ldr	r3, [r7, #32]
 800bc0e:	3304      	adds	r3, #4
 800bc10:	623b      	str	r3, [r7, #32]
    tableAddress ++;
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	3304      	adds	r3, #4
 800bc16:	61bb      	str	r3, [r7, #24]
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	2b3c      	cmp	r3, #60	@ 0x3c
 800bc1c:	d9b9      	bls.n	800bb92 <JPEG_GetQuality+0x1a>
  }

  return (quality / 64UL);
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	099b      	lsrs	r3, r3, #6
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	372c      	adds	r7, #44	@ 0x2c
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	08019520 	.word	0x08019520

0800bc34 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bc3c:	f7f7 f804 	bl	8002c48 <HAL_GetTick>
 800bc40:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e03b      	b.n	800bcc4 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2202      	movs	r2, #2
 800bc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68da      	ldr	r2, [r3, #12]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f022 0201 	bic.w	r2, r2, #1
 800bc6a:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bc6c:	e00f      	b.n	800bc8e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800bc6e:	f7f6 ffeb 	bl	8002c48 <HAL_GetTick>
 800bc72:	4602      	mov	r2, r0
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	2b05      	cmp	r3, #5
 800bc7a:	d908      	bls.n	800bc8e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2240      	movs	r2, #64	@ 0x40
 800bc80:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2203      	movs	r2, #3
 800bc86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e01a      	b.n	800bcc4 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e8      	bne.n	800bc6e <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fad3 	bl	800c248 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d101      	bne.n	800bce6 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 800bce2:	2301      	movs	r3, #1
 800bce4:	e03e      	b.n	800bd64 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d101      	bne.n	800bcf4 <HAL_MDMA_ConfigPostRequestMask+0x28>
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	e037      	b.n	800bd64 <HAL_MDMA_ConfigPostRequestMask+0x98>
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d126      	bne.n	800bd56 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d11c      	bne.n	800bd50 <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	635a      	str	r2, [r3, #52]	@ 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d108      	bne.n	800bd3e <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	691a      	ldr	r2, [r3, #16]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800bd3a:	611a      	str	r2, [r3, #16]
 800bd3c:	e00d      	b.n	800bd5a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	691a      	ldr	r2, [r3, #16]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bd4c:	611a      	str	r2, [r3, #16]
 800bd4e:	e004      	b.n	800bd5a <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
 800bd54:	e001      	b.n	800bd5a <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	371c      	adds	r7, #28
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b086      	sub	sp, #24
 800bd74:	af02      	add	r7, sp, #8
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d101      	bne.n	800bd88 <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e070      	b.n	800be6a <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d101      	bne.n	800bd96 <HAL_MDMA_Start_IT+0x26>
 800bd92:	2302      	movs	r3, #2
 800bd94:	e069      	b.n	800be6a <HAL_MDMA_Start_IT+0xfa>
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d158      	bne.n	800be5c <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	2202      	movs	r2, #2
 800bdae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68da      	ldr	r2, [r3, #12]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0201 	bic.w	r2, r2, #1
 800bdc6:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	68b9      	ldr	r1, [r7, #8]
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 f9c8 	bl	800c168 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f042 0206 	orr.w	r2, r2, #6
 800bde6:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d007      	beq.n	800be00 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68da      	ldr	r2, [r3, #12]
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f042 0210 	orr.w	r2, r2, #16
 800bdfe:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be04:	2b00      	cmp	r3, #0
 800be06:	d007      	beq.n	800be18 <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f042 0208 	orr.w	r2, r2, #8
 800be16:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d007      	beq.n	800be30 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68da      	ldr	r2, [r3, #12]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f042 0220 	orr.w	r2, r2, #32
 800be2e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68da      	ldr	r2, [r3, #12]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f042 0201 	orr.w	r2, r2, #1
 800be3e:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be48:	d10e      	bne.n	800be68 <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	68da      	ldr	r2, [r3, #12]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800be58:	60da      	str	r2, [r3, #12]
 800be5a:	e005      	b.n	800be68 <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 800be64:	2302      	movs	r3, #2
 800be66:	e000      	b.n	800be6a <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}

0800be72 <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800be72:	b480      	push	{r7}
 800be74:	b083      	sub	sp, #12
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	e017      	b.n	800beb4 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be8a:	b2db      	uxtb	r3, r3
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d004      	beq.n	800be9a <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2280      	movs	r2, #128	@ 0x80
 800be94:	669a      	str	r2, [r3, #104]	@ 0x68

    return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	e00c      	b.n	800beb4 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2204      	movs	r2, #4
 800be9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68da      	ldr	r2, [r3, #12]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f022 0201 	bic.w	r2, r2, #1
 800beb0:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b086      	sub	sp, #24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800becc:	4b91      	ldr	r3, [pc, #580]	@ (800c114 <HAL_MDMA_IRQHandler+0x254>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4a91      	ldr	r2, [pc, #580]	@ (800c118 <HAL_MDMA_IRQHandler+0x258>)
 800bed2:	fba2 2303 	umull	r2, r3, r2, r3
 800bed6:	0a9b      	lsrs	r3, r3, #10
 800bed8:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	461a      	mov	r2, r3
 800bee0:	4b8e      	ldr	r3, [pc, #568]	@ (800c11c <HAL_MDMA_IRQHandler+0x25c>)
 800bee2:	4413      	add	r3, r2
 800bee4:	099b      	lsrs	r3, r3, #6
 800bee6:	f003 031f 	and.w	r3, r3, #31
 800beea:	2201      	movs	r2, #1
 800beec:	fa02 f303 	lsl.w	r3, r2, r3
 800bef0:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800bef2:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	4013      	ands	r3, r2
 800befc:	2b00      	cmp	r3, #0
 800befe:	f000 812d 	beq.w	800c15c <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d054      	beq.n	800bfba <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f003 0302 	and.w	r3, r3, #2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d04d      	beq.n	800bfba <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f022 0202 	bic.w	r2, r2, #2
 800bf2c:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	689b      	ldr	r3, [r3, #8]
 800bf34:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d106      	bne.n	800bf4e <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf44:	f043 0201 	orr.w	r2, r3, #1
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	669a      	str	r2, [r3, #104]	@ 0x68
 800bf4c:	e005      	b.n	800bf5a <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf52:	f043 0202 	orr.w	r2, r3, #2
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d005      	beq.n	800bf70 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf68:	f043 0204 	orr.w	r2, r3, #4
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d005      	beq.n	800bf86 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf7e:	f043 0208 	orr.w	r2, r3, #8
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf94:	f043 0210 	orr.w	r2, r3, #16
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d005      	beq.n	800bfb2 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bfaa:	f043 0220 	orr.w	r2, r3, #32
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f003 0310 	and.w	r3, r3, #16
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d012      	beq.n	800bfee <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68db      	ldr	r3, [r3, #12]
 800bfce:	f003 0320 	and.w	r3, r3, #32
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00b      	beq.n	800bfee <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	2210      	movs	r2, #16
 800bfdc:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f003 0308 	and.w	r3, r3, #8
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d012      	beq.n	800c022 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	f003 0310 	and.w	r3, r3, #16
 800c006:	2b00      	cmp	r3, #0
 800c008:	d00b      	beq.n	800c022 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2208      	movs	r2, #8
 800c010:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c016:	2b00      	cmp	r3, #0
 800c018:	d003      	beq.n	800c022 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 0304 	and.w	r3, r3, #4
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d012      	beq.n	800c056 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	f003 0308 	and.w	r3, r3, #8
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00b      	beq.n	800c056 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2204      	movs	r2, #4
 800c044:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0302 	and.w	r3, r3, #2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d039      	beq.n	800c0d8 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f003 0304 	and.w	r3, r3, #4
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d032      	beq.n	800c0d8 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68da      	ldr	r2, [r3, #12]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800c080:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c088:	b2db      	uxtb	r3, r3
 800c08a:	2b04      	cmp	r3, #4
 800c08c:	d110      	bne.n	800c0b0 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d05c      	beq.n	800c160 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	4798      	blx	r3
        }
        return;
 800c0ae:	e057      	b.n	800c160 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	2202      	movs	r2, #2
 800c0b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d003      	beq.n	800c0d8 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d040      	beq.n	800c162 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2204      	movs	r2, #4
 800c0e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	68da      	ldr	r2, [r3, #12]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 0201 	bic.w	r2, r2, #1
 800c0f6:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	60bb      	str	r3, [r7, #8]
 800c0fe:	697a      	ldr	r2, [r7, #20]
 800c100:	429a      	cmp	r2, r3
 800c102:	d30d      	bcc.n	800c120 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1f2      	bne.n	800c0f8 <HAL_MDMA_IRQHandler+0x238>
 800c112:	e006      	b.n	800c122 <HAL_MDMA_IRQHandler+0x262>
 800c114:	2400022c 	.word	0x2400022c
 800c118:	1b4e81b5 	.word	0x1b4e81b5
 800c11c:	adffffc0 	.word	0xadffffc0
        break;
 800c120:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	f003 0301 	and.w	r3, r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	d004      	beq.n	800c142 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2203      	movs	r2, #3
 800c13c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c140:	e003      	b.n	800c14a <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2201      	movs	r2, #1
 800c146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d007      	beq.n	800c162 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	4798      	blx	r3
 800c15a:	e002      	b.n	800c162 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800c15c:	bf00      	nop
 800c15e:	e000      	b.n	800c162 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800c160:	bf00      	nop
    }
  }
}
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	695a      	ldr	r2, [r3, #20]
 800c17c:	4b31      	ldr	r3, [pc, #196]	@ (800c244 <MDMA_SetConfig+0xdc>)
 800c17e:	4013      	ands	r3, r2
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	f3c2 0110 	ubfx	r1, r2, #0, #17
 800c186:	68fa      	ldr	r2, [r7, #12]
 800c188:	6812      	ldr	r2, [r2, #0]
 800c18a:	430b      	orrs	r3, r1
 800c18c:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	051a      	lsls	r2, r3, #20
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	430a      	orrs	r2, r1
 800c1a4:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	221f      	movs	r2, #31
 800c1ac:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c1c4:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c1cc:	d002      	beq.n	800c1d4 <MDMA_SetConfig+0x6c>
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d108      	bne.n	800c1e6 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c1e2:	629a      	str	r2, [r3, #40]	@ 0x28
 800c1e4:	e007      	b.n	800c1f6 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c1f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800c1fc:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c204:	d002      	beq.n	800c20c <MDMA_SetConfig+0xa4>
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d108      	bne.n	800c21e <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c21a:	629a      	str	r2, [r3, #40]	@ 0x28
 800c21c:	e007      	b.n	800c22e <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c22c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c238:	bf00      	nop
 800c23a:	371c      	adds	r7, #28
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	fffe0000 	.word	0xfffe0000

0800c248 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	68d9      	ldr	r1, [r3, #12]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	691a      	ldr	r2, [r3, #16]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	430a      	orrs	r2, r1
 800c25e:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	695a      	ldr	r2, [r3, #20]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c26e:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6a1b      	ldr	r3, [r3, #32]
 800c274:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800c27a:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c280:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800c286:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c28c:	3b01      	subs	r3, #1
 800c28e:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800c290:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800c29c:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800c29e:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	685b      	ldr	r3, [r3, #4]
 800c2a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2a8:	d107      	bne.n	800c2ba <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	691a      	ldr	r2, [r3, #16]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800c2b8:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da11      	bge.n	800c2ee <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	695a      	ldr	r2, [r3, #20]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800c2d8:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2de:	425b      	negs	r3, r3
 800c2e0:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	b292      	uxth	r2, r2
 800c2ea:	621a      	str	r2, [r3, #32]
 800c2ec:	e006      	b.n	800c2fc <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	b292      	uxth	r2, r2
 800c2fa:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c300:	2b00      	cmp	r3, #0
 800c302:	da15      	bge.n	800c330 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	695a      	ldr	r2, [r3, #20]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800c312:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c318:	425b      	negs	r3, r3
 800c31a:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	6a19      	ldr	r1, [r3, #32]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	041a      	lsls	r2, r3, #16
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	430a      	orrs	r2, r1
 800c32c:	621a      	str	r2, [r3, #32]
 800c32e:	e009      	b.n	800c344 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	6a19      	ldr	r1, [r3, #32]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c33a:	041a      	lsls	r2, r3, #16
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c34c:	d006      	beq.n	800c35c <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	629a      	str	r2, [r3, #40]	@ 0x28
 800c35a:	e003      	b.n	800c364 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2200      	movs	r2, #0
 800c362:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2200      	movs	r2, #0
 800c36a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800c36c:	bf00      	nop
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af02      	add	r7, sp, #8
 800c37e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e0fe      	b.n	800c588 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d106      	bne.n	800c3a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f00b fe26 	bl	8017ff0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2203      	movs	r2, #3
 800c3a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f008 f86e 	bl	8014492 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6818      	ldr	r0, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7c1a      	ldrb	r2, [r3, #16]
 800c3be:	f88d 2000 	strb.w	r2, [sp]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c3c6:	f007 ff3f 	bl	8014248 <USB_CoreInit>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2202      	movs	r2, #2
 800c3d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e0d5      	b.n	800c588 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2100      	movs	r1, #0
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f008 f866 	bl	80144b4 <USB_SetCurrentMode>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d005      	beq.n	800c3fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2202      	movs	r2, #2
 800c3f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e0c6      	b.n	800c588 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
 800c3fe:	e04a      	b.n	800c496 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c400:	7bfa      	ldrb	r2, [r7, #15]
 800c402:	6879      	ldr	r1, [r7, #4]
 800c404:	4613      	mov	r3, r2
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	440b      	add	r3, r1
 800c40e:	3315      	adds	r3, #21
 800c410:	2201      	movs	r2, #1
 800c412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c414:	7bfa      	ldrb	r2, [r7, #15]
 800c416:	6879      	ldr	r1, [r7, #4]
 800c418:	4613      	mov	r3, r2
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	440b      	add	r3, r1
 800c422:	3314      	adds	r3, #20
 800c424:	7bfa      	ldrb	r2, [r7, #15]
 800c426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c428:	7bfa      	ldrb	r2, [r7, #15]
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
 800c42c:	b298      	uxth	r0, r3
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	4613      	mov	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	4413      	add	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	440b      	add	r3, r1
 800c43a:	332e      	adds	r3, #46	@ 0x2e
 800c43c:	4602      	mov	r2, r0
 800c43e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c440:	7bfa      	ldrb	r2, [r7, #15]
 800c442:	6879      	ldr	r1, [r7, #4]
 800c444:	4613      	mov	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4413      	add	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	440b      	add	r3, r1
 800c44e:	3318      	adds	r3, #24
 800c450:	2200      	movs	r2, #0
 800c452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c454:	7bfa      	ldrb	r2, [r7, #15]
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	331c      	adds	r3, #28
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c468:	7bfa      	ldrb	r2, [r7, #15]
 800c46a:	6879      	ldr	r1, [r7, #4]
 800c46c:	4613      	mov	r3, r2
 800c46e:	00db      	lsls	r3, r3, #3
 800c470:	4413      	add	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	440b      	add	r3, r1
 800c476:	3320      	adds	r3, #32
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c47c:	7bfa      	ldrb	r2, [r7, #15]
 800c47e:	6879      	ldr	r1, [r7, #4]
 800c480:	4613      	mov	r3, r2
 800c482:	00db      	lsls	r3, r3, #3
 800c484:	4413      	add	r3, r2
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	440b      	add	r3, r1
 800c48a:	3324      	adds	r3, #36	@ 0x24
 800c48c:	2200      	movs	r2, #0
 800c48e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c490:	7bfb      	ldrb	r3, [r7, #15]
 800c492:	3301      	adds	r3, #1
 800c494:	73fb      	strb	r3, [r7, #15]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	791b      	ldrb	r3, [r3, #4]
 800c49a:	7bfa      	ldrb	r2, [r7, #15]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d3af      	bcc.n	800c400 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
 800c4a4:	e044      	b.n	800c530 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c4a6:	7bfa      	ldrb	r2, [r7, #15]
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c4bc:	7bfa      	ldrb	r2, [r7, #15]
 800c4be:	6879      	ldr	r1, [r7, #4]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	4413      	add	r3, r2
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	440b      	add	r3, r1
 800c4ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c4ce:	7bfa      	ldrb	r2, [r7, #15]
 800c4d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c4d2:	7bfa      	ldrb	r2, [r7, #15]
 800c4d4:	6879      	ldr	r1, [r7, #4]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	4413      	add	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	440b      	add	r3, r1
 800c4e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c4e8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	4413      	add	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	440b      	add	r3, r1
 800c4f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c4fe:	7bfa      	ldrb	r2, [r7, #15]
 800c500:	6879      	ldr	r1, [r7, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	00db      	lsls	r3, r3, #3
 800c506:	4413      	add	r3, r2
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	440b      	add	r3, r1
 800c50c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c510:	2200      	movs	r2, #0
 800c512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c514:	7bfa      	ldrb	r2, [r7, #15]
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	4613      	mov	r3, r2
 800c51a:	00db      	lsls	r3, r3, #3
 800c51c:	4413      	add	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	440b      	add	r3, r1
 800c522:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c526:	2200      	movs	r2, #0
 800c528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
 800c52c:	3301      	adds	r3, #1
 800c52e:	73fb      	strb	r3, [r7, #15]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	791b      	ldrb	r3, [r3, #4]
 800c534:	7bfa      	ldrb	r2, [r7, #15]
 800c536:	429a      	cmp	r2, r3
 800c538:	d3b5      	bcc.n	800c4a6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7c1a      	ldrb	r2, [r3, #16]
 800c542:	f88d 2000 	strb.w	r2, [sp]
 800c546:	3304      	adds	r3, #4
 800c548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c54a:	f007 ffff 	bl	801454c <USB_DevInit>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d005      	beq.n	800c560 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2202      	movs	r2, #2
 800c558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e013      	b.n	800c588 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2200      	movs	r2, #0
 800c564:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2201      	movs	r2, #1
 800c56a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7b1b      	ldrb	r3, [r3, #12]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d102      	bne.n	800c57c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f001 f96e 	bl	800d858 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4618      	mov	r0, r3
 800c582:	f009 f842 	bl	801560a <USB_DevDisconnect>

  return HAL_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_PCD_Start+0x1c>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e022      	b.n	800c5f2 <HAL_PCD_Start+0x62>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d009      	beq.n	800c5d4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d105      	bne.n	800c5d4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f007 ff49 	bl	8014470 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f008 fff0 	bl	80155c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c5fa:	b590      	push	{r4, r7, lr}
 800c5fc:	b08d      	sub	sp, #52	@ 0x34
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c608:	6a3b      	ldr	r3, [r7, #32]
 800c60a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4618      	mov	r0, r3
 800c612:	f009 f8ae 	bl	8015772 <USB_GetMode>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f040 84b9 	bne.w	800cf90 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4618      	mov	r0, r3
 800c624:	f009 f812 	bl	801564c <USB_ReadInterrupts>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 84af 	beq.w	800cf8e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	0a1b      	lsrs	r3, r3, #8
 800c63a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f008 ffff 	bl	801564c <USB_ReadInterrupts>
 800c64e:	4603      	mov	r3, r0
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b02      	cmp	r3, #2
 800c656:	d107      	bne.n	800c668 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	695a      	ldr	r2, [r3, #20]
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	f002 0202 	and.w	r2, r2, #2
 800c666:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f008 ffed 	bl	801564c <USB_ReadInterrupts>
 800c672:	4603      	mov	r3, r0
 800c674:	f003 0310 	and.w	r3, r3, #16
 800c678:	2b10      	cmp	r3, #16
 800c67a:	d161      	bne.n	800c740 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	699a      	ldr	r2, [r3, #24]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f022 0210 	bic.w	r2, r2, #16
 800c68a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	6a1b      	ldr	r3, [r3, #32]
 800c690:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	f003 020f 	and.w	r2, r3, #15
 800c698:	4613      	mov	r3, r2
 800c69a:	00db      	lsls	r3, r3, #3
 800c69c:	4413      	add	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c6b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c6b6:	d124      	bne.n	800c702 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c6be:	4013      	ands	r3, r2
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d035      	beq.n	800c730 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	091b      	lsrs	r3, r3, #4
 800c6cc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c6ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	6a38      	ldr	r0, [r7, #32]
 800c6d8:	f008 fe24 	bl	8015324 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	68da      	ldr	r2, [r3, #12]
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	091b      	lsrs	r3, r3, #4
 800c6e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6e8:	441a      	add	r2, r3
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	695a      	ldr	r2, [r3, #20]
 800c6f2:	69bb      	ldr	r3, [r7, #24]
 800c6f4:	091b      	lsrs	r3, r3, #4
 800c6f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c6fa:	441a      	add	r2, r3
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	615a      	str	r2, [r3, #20]
 800c700:	e016      	b.n	800c730 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c708:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c70c:	d110      	bne.n	800c730 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c714:	2208      	movs	r2, #8
 800c716:	4619      	mov	r1, r3
 800c718:	6a38      	ldr	r0, [r7, #32]
 800c71a:	f008 fe03 	bl	8015324 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	695a      	ldr	r2, [r3, #20]
 800c722:	69bb      	ldr	r3, [r7, #24]
 800c724:	091b      	lsrs	r3, r3, #4
 800c726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c72a:	441a      	add	r2, r3
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	699a      	ldr	r2, [r3, #24]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f042 0210 	orr.w	r2, r2, #16
 800c73e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4618      	mov	r0, r3
 800c746:	f008 ff81 	bl	801564c <USB_ReadInterrupts>
 800c74a:	4603      	mov	r3, r0
 800c74c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c750:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c754:	f040 80a7 	bne.w	800c8a6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c758:	2300      	movs	r3, #0
 800c75a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4618      	mov	r0, r3
 800c762:	f008 ff86 	bl	8015672 <USB_ReadDevAllOutEpInterrupt>
 800c766:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c768:	e099      	b.n	800c89e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b00      	cmp	r3, #0
 800c772:	f000 808e 	beq.w	800c892 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c77c:	b2d2      	uxtb	r2, r2
 800c77e:	4611      	mov	r1, r2
 800c780:	4618      	mov	r0, r3
 800c782:	f008 ffaa 	bl	80156da <USB_ReadDevOutEPInterrupt>
 800c786:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00c      	beq.n	800c7ac <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	015a      	lsls	r2, r3, #5
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	4413      	add	r3, r2
 800c79a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c79e:	461a      	mov	r2, r3
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c7a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fed0 	bl	800d54c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f003 0308 	and.w	r3, r3, #8
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d00c      	beq.n	800c7d0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	2308      	movs	r3, #8
 800c7c6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c7c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 ffa6 	bl	800d71c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f003 0310 	and.w	r3, r3, #16
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d008      	beq.n	800c7ec <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7dc:	015a      	lsls	r2, r3, #5
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	2310      	movs	r3, #16
 800c7ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d030      	beq.n	800c858 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c7f6:	6a3b      	ldr	r3, [r7, #32]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7fe:	2b80      	cmp	r3, #128	@ 0x80
 800c800:	d109      	bne.n	800c816 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	69fa      	ldr	r2, [r7, #28]
 800c80c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c814:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c818:	4613      	mov	r3, r2
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	4413      	add	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	4413      	add	r3, r2
 800c828:	3304      	adds	r3, #4
 800c82a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	78db      	ldrb	r3, [r3, #3]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d108      	bne.n	800c846 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	2200      	movs	r2, #0
 800c838:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	4619      	mov	r1, r3
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f00b fcfb 	bl	801823c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c852:	461a      	mov	r2, r3
 800c854:	2302      	movs	r3, #2
 800c856:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	f003 0320 	and.w	r3, r3, #32
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d008      	beq.n	800c874 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c864:	015a      	lsls	r2, r3, #5
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	4413      	add	r3, r2
 800c86a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c86e:	461a      	mov	r2, r3
 800c870:	2320      	movs	r3, #32
 800c872:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d009      	beq.n	800c892 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c880:	015a      	lsls	r2, r3, #5
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	4413      	add	r3, r2
 800c886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c88a:	461a      	mov	r2, r3
 800c88c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c890:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c894:	3301      	adds	r3, #1
 800c896:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c89a:	085b      	lsrs	r3, r3, #1
 800c89c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	f47f af62 	bne.w	800c76a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f008 fece 	bl	801564c <USB_ReadInterrupts>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c8ba:	f040 80db 	bne.w	800ca74 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f008 feef 	bl	80156a6 <USB_ReadDevAllInEpInterrupt>
 800c8c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c8ce:	e0cd      	b.n	800ca6c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f000 80c2 	beq.w	800ca60 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e2:	b2d2      	uxtb	r2, r2
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f008 ff15 	bl	8015716 <USB_ReadDevInEPInterrupt>
 800c8ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d057      	beq.n	800c9a8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fa:	f003 030f 	and.w	r3, r3, #15
 800c8fe:	2201      	movs	r2, #1
 800c900:	fa02 f303 	lsl.w	r3, r2, r3
 800c904:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c90c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	43db      	mvns	r3, r3
 800c912:	69f9      	ldr	r1, [r7, #28]
 800c914:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c918:	4013      	ands	r3, r2
 800c91a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c928:	461a      	mov	r2, r3
 800c92a:	2301      	movs	r3, #1
 800c92c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	799b      	ldrb	r3, [r3, #6]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d132      	bne.n	800c99c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c936:	6879      	ldr	r1, [r7, #4]
 800c938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c93a:	4613      	mov	r3, r2
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	440b      	add	r3, r1
 800c944:	3320      	adds	r3, #32
 800c946:	6819      	ldr	r1, [r3, #0]
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c94c:	4613      	mov	r3, r2
 800c94e:	00db      	lsls	r3, r3, #3
 800c950:	4413      	add	r3, r2
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4403      	add	r3, r0
 800c956:	331c      	adds	r3, #28
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	4419      	add	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c960:	4613      	mov	r3, r2
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	4413      	add	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4403      	add	r3, r0
 800c96a:	3320      	adds	r3, #32
 800c96c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c970:	2b00      	cmp	r3, #0
 800c972:	d113      	bne.n	800c99c <HAL_PCD_IRQHandler+0x3a2>
 800c974:	6879      	ldr	r1, [r7, #4]
 800c976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c978:	4613      	mov	r3, r2
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	4413      	add	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	440b      	add	r3, r1
 800c982:	3324      	adds	r3, #36	@ 0x24
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d108      	bne.n	800c99c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c994:	461a      	mov	r2, r3
 800c996:	2101      	movs	r1, #1
 800c998:	f008 ff1e 	bl	80157d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c99c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f00b fbc5 	bl	8018132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	f003 0308 	and.w	r3, r3, #8
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d008      	beq.n	800c9c4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9b4:	015a      	lsls	r2, r3, #5
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9be:	461a      	mov	r2, r3
 800c9c0:	2308      	movs	r3, #8
 800c9c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	f003 0310 	and.w	r3, r3, #16
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d008      	beq.n	800c9e0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d0:	015a      	lsls	r2, r3, #5
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9da:	461a      	mov	r2, r3
 800c9dc:	2310      	movs	r3, #16
 800c9de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d008      	beq.n	800c9fc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	69fb      	ldr	r3, [r7, #28]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	2340      	movs	r3, #64	@ 0x40
 800c9fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	f003 0302 	and.w	r3, r3, #2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d023      	beq.n	800ca4e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800ca06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca08:	6a38      	ldr	r0, [r7, #32]
 800ca0a:	f007 fefd 	bl	8014808 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800ca0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca10:	4613      	mov	r3, r2
 800ca12:	00db      	lsls	r3, r3, #3
 800ca14:	4413      	add	r3, r2
 800ca16:	009b      	lsls	r3, r3, #2
 800ca18:	3310      	adds	r3, #16
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	3304      	adds	r3, #4
 800ca20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	78db      	ldrb	r3, [r3, #3]
 800ca26:	2b01      	cmp	r3, #1
 800ca28:	d108      	bne.n	800ca3c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800ca30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f00b fc12 	bl	8018260 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3e:	015a      	lsls	r2, r3, #5
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	4413      	add	r3, r2
 800ca44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ca48:	461a      	mov	r2, r3
 800ca4a:	2302      	movs	r3, #2
 800ca4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d003      	beq.n	800ca60 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800ca58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 fcea 	bl	800d434 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800ca60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca62:	3301      	adds	r3, #1
 800ca64:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800ca66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca68:	085b      	lsrs	r3, r3, #1
 800ca6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f47f af2e 	bne.w	800c8d0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f008 fde7 	bl	801564c <USB_ReadInterrupts>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca88:	d122      	bne.n	800cad0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ca8a:	69fb      	ldr	r3, [r7, #28]
 800ca8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	69fa      	ldr	r2, [r7, #28]
 800ca94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca98:	f023 0301 	bic.w	r3, r3, #1
 800ca9c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d108      	bne.n	800caba <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cab0:	2100      	movs	r1, #0
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fef4 	bl	800d8a0 <HAL_PCDEx_LPM_Callback>
 800cab8:	e002      	b.n	800cac0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f00b fbb0 	bl	8018220 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	695a      	ldr	r2, [r3, #20]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800cace:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4618      	mov	r0, r3
 800cad6:	f008 fdb9 	bl	801564c <USB_ReadInterrupts>
 800cada:	4603      	mov	r3, r0
 800cadc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cae4:	d112      	bne.n	800cb0c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d102      	bne.n	800cafc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f00b fb6c 	bl	80181d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	695a      	ldr	r2, [r3, #20]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800cb0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4618      	mov	r0, r3
 800cb12:	f008 fd9b 	bl	801564c <USB_ReadInterrupts>
 800cb16:	4603      	mov	r3, r0
 800cb18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cb1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb20:	d121      	bne.n	800cb66 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	695a      	ldr	r2, [r3, #20]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800cb30:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d111      	bne.n	800cb60 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb4a:	089b      	lsrs	r3, r3, #2
 800cb4c:	f003 020f 	and.w	r2, r3, #15
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cb56:	2101      	movs	r1, #1
 800cb58:	6878      	ldr	r0, [r7, #4]
 800cb5a:	f000 fea1 	bl	800d8a0 <HAL_PCDEx_LPM_Callback>
 800cb5e:	e002      	b.n	800cb66 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f00b fb37 	bl	80181d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f008 fd6e 	bl	801564c <USB_ReadInterrupts>
 800cb70:	4603      	mov	r3, r0
 800cb72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cb76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb7a:	f040 80b7 	bne.w	800ccec <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	69fa      	ldr	r2, [r7, #28]
 800cb88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cb8c:	f023 0301 	bic.w	r3, r3, #1
 800cb90:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	2110      	movs	r1, #16
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f007 fe35 	bl	8014808 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb9e:	2300      	movs	r3, #0
 800cba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cba2:	e046      	b.n	800cc32 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800cba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba6:	015a      	lsls	r2, r3, #5
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	4413      	add	r3, r2
 800cbac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cbb6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbba:	015a      	lsls	r2, r3, #5
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	4413      	add	r3, r2
 800cbc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbc8:	0151      	lsls	r1, r2, #5
 800cbca:	69fa      	ldr	r2, [r7, #28]
 800cbcc:	440a      	add	r2, r1
 800cbce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800cbd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cbd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	69fb      	ldr	r3, [r7, #28]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800cbea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbee:	015a      	lsls	r2, r3, #5
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cbfc:	0151      	lsls	r1, r2, #5
 800cbfe:	69fa      	ldr	r2, [r7, #28]
 800cc00:	440a      	add	r2, r1
 800cc02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800cc0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800cc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc0e:	015a      	lsls	r2, r3, #5
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	4413      	add	r3, r2
 800cc14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc1c:	0151      	lsls	r1, r2, #5
 800cc1e:	69fa      	ldr	r2, [r7, #28]
 800cc20:	440a      	add	r2, r1
 800cc22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800cc26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800cc2a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc2e:	3301      	adds	r3, #1
 800cc30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	791b      	ldrb	r3, [r3, #4]
 800cc36:	461a      	mov	r2, r3
 800cc38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	d3b2      	bcc.n	800cba4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc44:	69db      	ldr	r3, [r3, #28]
 800cc46:	69fa      	ldr	r2, [r7, #28]
 800cc48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc4c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800cc50:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	7bdb      	ldrb	r3, [r3, #15]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d016      	beq.n	800cc88 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc64:	69fa      	ldr	r2, [r7, #28]
 800cc66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc6a:	f043 030b 	orr.w	r3, r3, #11
 800cc6e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc7a:	69fa      	ldr	r2, [r7, #28]
 800cc7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cc80:	f043 030b 	orr.w	r3, r3, #11
 800cc84:	6453      	str	r3, [r2, #68]	@ 0x44
 800cc86:	e015      	b.n	800ccb4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc8e:	695a      	ldr	r2, [r3, #20]
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cc96:	4619      	mov	r1, r3
 800cc98:	f242 032b 	movw	r3, #8235	@ 0x202b
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800cca0:	69fb      	ldr	r3, [r7, #28]
 800cca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	69fa      	ldr	r2, [r7, #28]
 800ccaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccae:	f043 030b 	orr.w	r3, r3, #11
 800ccb2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ccb4:	69fb      	ldr	r3, [r7, #28]
 800ccb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	69fa      	ldr	r2, [r7, #28]
 800ccbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ccc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ccc6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6818      	ldr	r0, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f008 fd7e 	bl	80157d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	695a      	ldr	r2, [r3, #20]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800ccea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f008 fcab 	bl	801564c <USB_ReadInterrupts>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ccfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd00:	d123      	bne.n	800cd4a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f008 fd42 	bl	8015790 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f007 fdf2 	bl	80148fa <USB_GetDevSpeed>
 800cd16:	4603      	mov	r3, r0
 800cd18:	461a      	mov	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681c      	ldr	r4, [r3, #0]
 800cd22:	f001 fd9d 	bl	800e860 <HAL_RCC_GetHCLKFreq>
 800cd26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f007 fafc 	bl	801432c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f00b fa24 	bl	8018182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	695a      	ldr	r2, [r3, #20]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800cd48:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f008 fc7c 	bl	801564c <USB_ReadInterrupts>
 800cd54:	4603      	mov	r3, r0
 800cd56:	f003 0308 	and.w	r3, r3, #8
 800cd5a:	2b08      	cmp	r3, #8
 800cd5c:	d10a      	bne.n	800cd74 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f00b fa01 	bl	8018166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	695a      	ldr	r2, [r3, #20]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f002 0208 	and.w	r2, r2, #8
 800cd72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f008 fc67 	bl	801564c <USB_ReadInterrupts>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd84:	2b80      	cmp	r3, #128	@ 0x80
 800cd86:	d123      	bne.n	800cdd0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800cd88:	6a3b      	ldr	r3, [r7, #32]
 800cd8a:	699b      	ldr	r3, [r3, #24]
 800cd8c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd90:	6a3b      	ldr	r3, [r7, #32]
 800cd92:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cd94:	2301      	movs	r3, #1
 800cd96:	627b      	str	r3, [r7, #36]	@ 0x24
 800cd98:	e014      	b.n	800cdc4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800cd9a:	6879      	ldr	r1, [r7, #4]
 800cd9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd9e:	4613      	mov	r3, r2
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	440b      	add	r3, r1
 800cda8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d105      	bne.n	800cdbe <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb4:	b2db      	uxtb	r3, r3
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fb0a 	bl	800d3d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	791b      	ldrb	r3, [r3, #4]
 800cdc8:	461a      	mov	r2, r3
 800cdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d3e4      	bcc.n	800cd9a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f008 fc39 	bl	801564c <USB_ReadInterrupts>
 800cdda:	4603      	mov	r3, r0
 800cddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cde0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cde4:	d13c      	bne.n	800ce60 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cde6:	2301      	movs	r3, #1
 800cde8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdea:	e02b      	b.n	800ce44 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	015a      	lsls	r2, r3, #5
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cdfc:	6879      	ldr	r1, [r7, #4]
 800cdfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce00:	4613      	mov	r3, r2
 800ce02:	00db      	lsls	r3, r3, #3
 800ce04:	4413      	add	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	440b      	add	r3, r1
 800ce0a:	3318      	adds	r3, #24
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d115      	bne.n	800ce3e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ce12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	da12      	bge.n	800ce3e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	4413      	add	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	440b      	add	r3, r1
 800ce26:	3317      	adds	r3, #23
 800ce28:	2201      	movs	r2, #1
 800ce2a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2e:	b2db      	uxtb	r3, r3
 800ce30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	4619      	mov	r1, r3
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f000 faca 	bl	800d3d2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce40:	3301      	adds	r3, #1
 800ce42:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	791b      	ldrb	r3, [r3, #4]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d3cd      	bcc.n	800cdec <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	695a      	ldr	r2, [r3, #20]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800ce5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4618      	mov	r0, r3
 800ce66:	f008 fbf1 	bl	801564c <USB_ReadInterrupts>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce74:	d156      	bne.n	800cf24 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ce76:	2301      	movs	r3, #1
 800ce78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce7a:	e045      	b.n	800cf08 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ce8c:	6879      	ldr	r1, [r7, #4]
 800ce8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce90:	4613      	mov	r3, r2
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	440b      	add	r3, r1
 800ce9a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d12e      	bne.n	800cf02 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800cea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	da2b      	bge.n	800cf02 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	0c1a      	lsrs	r2, r3, #16
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800ceb4:	4053      	eors	r3, r2
 800ceb6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d121      	bne.n	800cf02 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800cebe:	6879      	ldr	r1, [r7, #4]
 800cec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cec2:	4613      	mov	r3, r2
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	4413      	add	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	440b      	add	r3, r1
 800cecc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ced0:	2201      	movs	r2, #1
 800ced2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ced4:	6a3b      	ldr	r3, [r7, #32]
 800ced6:	699b      	ldr	r3, [r3, #24]
 800ced8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800cee0:	6a3b      	ldr	r3, [r7, #32]
 800cee2:	695b      	ldr	r3, [r3, #20]
 800cee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10a      	bne.n	800cf02 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	69fa      	ldr	r2, [r7, #28]
 800cef6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cefa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cefe:	6053      	str	r3, [r2, #4]
            break;
 800cf00:	e008      	b.n	800cf14 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf04:	3301      	adds	r3, #1
 800cf06:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	791b      	ldrb	r3, [r3, #4]
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d3b3      	bcc.n	800ce7c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	695a      	ldr	r2, [r3, #20]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800cf22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f008 fb8f 	bl	801564c <USB_ReadInterrupts>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf38:	d10a      	bne.n	800cf50 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f00b f9a2 	bl	8018284 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	695a      	ldr	r2, [r3, #20]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800cf4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f008 fb79 	bl	801564c <USB_ReadInterrupts>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	f003 0304 	and.w	r3, r3, #4
 800cf60:	2b04      	cmp	r3, #4
 800cf62:	d115      	bne.n	800cf90 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	f003 0304 	and.w	r3, r3, #4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d002      	beq.n	800cf7c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f00b f992 	bl	80182a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	6859      	ldr	r1, [r3, #4]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	69ba      	ldr	r2, [r7, #24]
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	605a      	str	r2, [r3, #4]
 800cf8c:	e000      	b.n	800cf90 <HAL_PCD_IRQHandler+0x996>
      return;
 800cf8e:	bf00      	nop
    }
  }
}
 800cf90:	3734      	adds	r7, #52	@ 0x34
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd90      	pop	{r4, r7, pc}

0800cf96 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d101      	bne.n	800cfb0 <HAL_PCD_SetAddress+0x1a>
 800cfac:	2302      	movs	r3, #2
 800cfae:	e012      	b.n	800cfd6 <HAL_PCD_SetAddress+0x40>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	78fa      	ldrb	r2, [r7, #3]
 800cfbc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	78fa      	ldrb	r2, [r7, #3]
 800cfc4:	4611      	mov	r1, r2
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f008 fad8 	bl	801557c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}

0800cfde <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b084      	sub	sp, #16
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	4608      	mov	r0, r1
 800cfe8:	4611      	mov	r1, r2
 800cfea:	461a      	mov	r2, r3
 800cfec:	4603      	mov	r3, r0
 800cfee:	70fb      	strb	r3, [r7, #3]
 800cff0:	460b      	mov	r3, r1
 800cff2:	803b      	strh	r3, [r7, #0]
 800cff4:	4613      	mov	r3, r2
 800cff6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800cff8:	2300      	movs	r3, #0
 800cffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d000:	2b00      	cmp	r3, #0
 800d002:	da0f      	bge.n	800d024 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d004:	78fb      	ldrb	r3, [r7, #3]
 800d006:	f003 020f 	and.w	r2, r3, #15
 800d00a:	4613      	mov	r3, r2
 800d00c:	00db      	lsls	r3, r3, #3
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	3310      	adds	r3, #16
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	4413      	add	r3, r2
 800d018:	3304      	adds	r3, #4
 800d01a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2201      	movs	r2, #1
 800d020:	705a      	strb	r2, [r3, #1]
 800d022:	e00f      	b.n	800d044 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	f003 020f 	and.w	r2, r3, #15
 800d02a:	4613      	mov	r3, r2
 800d02c:	00db      	lsls	r3, r3, #3
 800d02e:	4413      	add	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	4413      	add	r3, r2
 800d03a:	3304      	adds	r3, #4
 800d03c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d044:	78fb      	ldrb	r3, [r7, #3]
 800d046:	f003 030f 	and.w	r3, r3, #15
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800d050:	883b      	ldrh	r3, [r7, #0]
 800d052:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	78ba      	ldrb	r2, [r7, #2]
 800d05e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	785b      	ldrb	r3, [r3, #1]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d004      	beq.n	800d072 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	461a      	mov	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d072:	78bb      	ldrb	r3, [r7, #2]
 800d074:	2b02      	cmp	r3, #2
 800d076:	d102      	bne.n	800d07e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2200      	movs	r2, #0
 800d07c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d084:	2b01      	cmp	r3, #1
 800d086:	d101      	bne.n	800d08c <HAL_PCD_EP_Open+0xae>
 800d088:	2302      	movs	r3, #2
 800d08a:	e00e      	b.n	800d0aa <HAL_PCD_EP_Open+0xcc>
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2201      	movs	r2, #1
 800d090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68f9      	ldr	r1, [r7, #12]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f007 fc52 	bl	8014944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800d0a8:	7afb      	ldrb	r3, [r7, #11]
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3710      	adds	r7, #16
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b084      	sub	sp, #16
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	460b      	mov	r3, r1
 800d0bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d0be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da0f      	bge.n	800d0e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0c6:	78fb      	ldrb	r3, [r7, #3]
 800d0c8:	f003 020f 	and.w	r2, r3, #15
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	3310      	adds	r3, #16
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	4413      	add	r3, r2
 800d0da:	3304      	adds	r3, #4
 800d0dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	705a      	strb	r2, [r3, #1]
 800d0e4:	e00f      	b.n	800d106 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0e6:	78fb      	ldrb	r3, [r7, #3]
 800d0e8:	f003 020f 	and.w	r2, r3, #15
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	4413      	add	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2200      	movs	r2, #0
 800d104:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d106:	78fb      	ldrb	r3, [r7, #3]
 800d108:	f003 030f 	and.w	r3, r3, #15
 800d10c:	b2da      	uxtb	r2, r3
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d101      	bne.n	800d120 <HAL_PCD_EP_Close+0x6e>
 800d11c:	2302      	movs	r3, #2
 800d11e:	e00e      	b.n	800d13e <HAL_PCD_EP_Close+0x8c>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2201      	movs	r2, #1
 800d124:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	68f9      	ldr	r1, [r7, #12]
 800d12e:	4618      	mov	r0, r3
 800d130:	f007 fc90 	bl	8014a54 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b086      	sub	sp, #24
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	60f8      	str	r0, [r7, #12]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
 800d152:	460b      	mov	r3, r1
 800d154:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d156:	7afb      	ldrb	r3, [r7, #11]
 800d158:	f003 020f 	and.w	r2, r3, #15
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	4413      	add	r3, r2
 800d16c:	3304      	adds	r3, #4
 800d16e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	687a      	ldr	r2, [r7, #4]
 800d174:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	683a      	ldr	r2, [r7, #0]
 800d17a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	2200      	movs	r2, #0
 800d180:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	2200      	movs	r2, #0
 800d186:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d188:	7afb      	ldrb	r3, [r7, #11]
 800d18a:	f003 030f 	and.w	r3, r3, #15
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	799b      	ldrb	r3, [r3, #6]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d102      	bne.n	800d1a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d19c:	687a      	ldr	r2, [r7, #4]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6818      	ldr	r0, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	799b      	ldrb	r3, [r3, #6]
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	6979      	ldr	r1, [r7, #20]
 800d1ae:	f007 fd2d 	bl	8014c0c <USB_EPStartXfer>

  return HAL_OK;
 800d1b2:	2300      	movs	r3, #0
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}

0800d1bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b083      	sub	sp, #12
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	460b      	mov	r3, r1
 800d1c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d1c8:	78fb      	ldrb	r3, [r7, #3]
 800d1ca:	f003 020f 	and.w	r2, r3, #15
 800d1ce:	6879      	ldr	r1, [r7, #4]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	00db      	lsls	r3, r3, #3
 800d1d4:	4413      	add	r3, r2
 800d1d6:	009b      	lsls	r3, r3, #2
 800d1d8:	440b      	add	r3, r1
 800d1da:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800d1de:	681b      	ldr	r3, [r3, #0]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	370c      	adds	r7, #12
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ea:	4770      	bx	lr

0800d1ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	607a      	str	r2, [r7, #4]
 800d1f6:	603b      	str	r3, [r7, #0]
 800d1f8:	460b      	mov	r3, r1
 800d1fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1fc:	7afb      	ldrb	r3, [r7, #11]
 800d1fe:	f003 020f 	and.w	r2, r3, #15
 800d202:	4613      	mov	r3, r2
 800d204:	00db      	lsls	r3, r3, #3
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	3310      	adds	r3, #16
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4413      	add	r3, r2
 800d210:	3304      	adds	r3, #4
 800d212:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2200      	movs	r2, #0
 800d224:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2201      	movs	r2, #1
 800d22a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d22c:	7afb      	ldrb	r3, [r7, #11]
 800d22e:	f003 030f 	and.w	r3, r3, #15
 800d232:	b2da      	uxtb	r2, r3
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	799b      	ldrb	r3, [r3, #6]
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d102      	bne.n	800d246 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	6818      	ldr	r0, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	799b      	ldrb	r3, [r3, #6]
 800d24e:	461a      	mov	r2, r3
 800d250:	6979      	ldr	r1, [r7, #20]
 800d252:	f007 fcdb 	bl	8014c0c <USB_EPStartXfer>

  return HAL_OK;
 800d256:	2300      	movs	r3, #0
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3718      	adds	r7, #24
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	460b      	mov	r3, r1
 800d26a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d26c:	78fb      	ldrb	r3, [r7, #3]
 800d26e:	f003 030f 	and.w	r3, r3, #15
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	7912      	ldrb	r2, [r2, #4]
 800d276:	4293      	cmp	r3, r2
 800d278:	d901      	bls.n	800d27e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800d27a:	2301      	movs	r3, #1
 800d27c:	e04f      	b.n	800d31e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d27e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d282:	2b00      	cmp	r3, #0
 800d284:	da0f      	bge.n	800d2a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d286:	78fb      	ldrb	r3, [r7, #3]
 800d288:	f003 020f 	and.w	r2, r3, #15
 800d28c:	4613      	mov	r3, r2
 800d28e:	00db      	lsls	r3, r3, #3
 800d290:	4413      	add	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	3310      	adds	r3, #16
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	4413      	add	r3, r2
 800d29a:	3304      	adds	r3, #4
 800d29c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	705a      	strb	r2, [r3, #1]
 800d2a4:	e00d      	b.n	800d2c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d2a6:	78fa      	ldrb	r2, [r7, #3]
 800d2a8:	4613      	mov	r3, r2
 800d2aa:	00db      	lsls	r3, r3, #3
 800d2ac:	4413      	add	r3, r2
 800d2ae:	009b      	lsls	r3, r3, #2
 800d2b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	3304      	adds	r3, #4
 800d2ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2c8:	78fb      	ldrb	r3, [r7, #3]
 800d2ca:	f003 030f 	and.w	r3, r3, #15
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d101      	bne.n	800d2e2 <HAL_PCD_EP_SetStall+0x82>
 800d2de:	2302      	movs	r3, #2
 800d2e0:	e01d      	b.n	800d31e <HAL_PCD_EP_SetStall+0xbe>
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	68f9      	ldr	r1, [r7, #12]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f008 f86f 	bl	80153d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d2f6:	78fb      	ldrb	r3, [r7, #3]
 800d2f8:	f003 030f 	and.w	r3, r3, #15
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d109      	bne.n	800d314 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6818      	ldr	r0, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	7999      	ldrb	r1, [r3, #6]
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d30e:	461a      	mov	r2, r3
 800d310:	f008 fa62 	bl	80157d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2200      	movs	r2, #0
 800d318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d31c:	2300      	movs	r3, #0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3710      	adds	r7, #16
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b084      	sub	sp, #16
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
 800d32e:	460b      	mov	r3, r1
 800d330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d332:	78fb      	ldrb	r3, [r7, #3]
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	7912      	ldrb	r2, [r2, #4]
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d901      	bls.n	800d344 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	e042      	b.n	800d3ca <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	da0f      	bge.n	800d36c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d34c:	78fb      	ldrb	r3, [r7, #3]
 800d34e:	f003 020f 	and.w	r2, r3, #15
 800d352:	4613      	mov	r3, r2
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	3310      	adds	r3, #16
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	4413      	add	r3, r2
 800d360:	3304      	adds	r3, #4
 800d362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2201      	movs	r2, #1
 800d368:	705a      	strb	r2, [r3, #1]
 800d36a:	e00f      	b.n	800d38c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d36c:	78fb      	ldrb	r3, [r7, #3]
 800d36e:	f003 020f 	and.w	r2, r3, #15
 800d372:	4613      	mov	r3, r2
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	4413      	add	r3, r2
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	4413      	add	r3, r2
 800d382:	3304      	adds	r3, #4
 800d384:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d392:	78fb      	ldrb	r3, [r7, #3]
 800d394:	f003 030f 	and.w	r3, r3, #15
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d101      	bne.n	800d3ac <HAL_PCD_EP_ClrStall+0x86>
 800d3a8:	2302      	movs	r3, #2
 800d3aa:	e00e      	b.n	800d3ca <HAL_PCD_EP_ClrStall+0xa4>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	68f9      	ldr	r1, [r7, #12]
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f008 f878 	bl	80154b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	460b      	mov	r3, r1
 800d3dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d3de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	da0c      	bge.n	800d400 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3e6:	78fb      	ldrb	r3, [r7, #3]
 800d3e8:	f003 020f 	and.w	r2, r3, #15
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	4413      	add	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	3310      	adds	r3, #16
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	60fb      	str	r3, [r7, #12]
 800d3fe:	e00c      	b.n	800d41a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d400:	78fb      	ldrb	r3, [r7, #3]
 800d402:	f003 020f 	and.w	r2, r3, #15
 800d406:	4613      	mov	r3, r2
 800d408:	00db      	lsls	r3, r3, #3
 800d40a:	4413      	add	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4413      	add	r3, r2
 800d416:	3304      	adds	r3, #4
 800d418:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	68f9      	ldr	r1, [r7, #12]
 800d420:	4618      	mov	r0, r3
 800d422:	f007 fe97 	bl	8015154 <USB_EPStopXfer>
 800d426:	4603      	mov	r3, r0
 800d428:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d42a:	7afb      	ldrb	r3, [r7, #11]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	@ 0x28
 800d438:	af02      	add	r7, sp, #8
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d448:	683a      	ldr	r2, [r7, #0]
 800d44a:	4613      	mov	r3, r2
 800d44c:	00db      	lsls	r3, r3, #3
 800d44e:	4413      	add	r3, r2
 800d450:	009b      	lsls	r3, r3, #2
 800d452:	3310      	adds	r3, #16
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	4413      	add	r3, r2
 800d458:	3304      	adds	r3, #4
 800d45a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	695a      	ldr	r2, [r3, #20]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	429a      	cmp	r2, r3
 800d466:	d901      	bls.n	800d46c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e06b      	b.n	800d544 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	691a      	ldr	r2, [r3, #16]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	695b      	ldr	r3, [r3, #20]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	689b      	ldr	r3, [r3, #8]
 800d47c:	69fa      	ldr	r2, [r7, #28]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d902      	bls.n	800d488 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	3303      	adds	r3, #3
 800d48c:	089b      	lsrs	r3, r3, #2
 800d48e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d490:	e02a      	b.n	800d4e8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	691a      	ldr	r2, [r3, #16]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	695b      	ldr	r3, [r3, #20]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d902      	bls.n	800d4ae <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	3303      	adds	r3, #3
 800d4b2:	089b      	lsrs	r3, r3, #2
 800d4b4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	68d9      	ldr	r1, [r3, #12]
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	b2da      	uxtb	r2, r3
 800d4be:	69fb      	ldr	r3, [r7, #28]
 800d4c0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	6978      	ldr	r0, [r7, #20]
 800d4cc:	f007 feec 	bl	80152a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	441a      	add	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	695a      	ldr	r2, [r3, #20]
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	441a      	add	r2, r3
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	015a      	lsls	r2, r3, #5
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d4f8:	69ba      	ldr	r2, [r7, #24]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d809      	bhi.n	800d512 <PCD_WriteEmptyTxFifo+0xde>
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	695a      	ldr	r2, [r3, #20]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d506:	429a      	cmp	r2, r3
 800d508:	d203      	bcs.n	800d512 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1bf      	bne.n	800d492 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	691a      	ldr	r2, [r3, #16]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d811      	bhi.n	800d542 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	f003 030f 	and.w	r3, r3, #15
 800d524:	2201      	movs	r2, #1
 800d526:	fa02 f303 	lsl.w	r3, r2, r3
 800d52a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	43db      	mvns	r3, r3
 800d538:	6939      	ldr	r1, [r7, #16]
 800d53a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d53e:	4013      	ands	r3, r2
 800d540:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3720      	adds	r7, #32
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b088      	sub	sp, #32
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d55c:	69fb      	ldr	r3, [r7, #28]
 800d55e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d560:	69fb      	ldr	r3, [r7, #28]
 800d562:	333c      	adds	r3, #60	@ 0x3c
 800d564:	3304      	adds	r3, #4
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	015a      	lsls	r2, r3, #5
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	4413      	add	r3, r2
 800d572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	799b      	ldrb	r3, [r3, #6]
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d17b      	bne.n	800d67a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	f003 0308 	and.w	r3, r3, #8
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d015      	beq.n	800d5b8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	4a61      	ldr	r2, [pc, #388]	@ (800d714 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d590:	4293      	cmp	r3, r2
 800d592:	f240 80b9 	bls.w	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f000 80b3 	beq.w	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	015a      	lsls	r2, r3, #5
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d5b4:	6093      	str	r3, [r2, #8]
 800d5b6:	e0a7      	b.n	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d5b8:	693b      	ldr	r3, [r7, #16]
 800d5ba:	f003 0320 	and.w	r3, r3, #32
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d009      	beq.n	800d5d6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	69bb      	ldr	r3, [r7, #24]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	2320      	movs	r3, #32
 800d5d2:	6093      	str	r3, [r2, #8]
 800d5d4:	e098      	b.n	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f040 8093 	bne.w	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	4a4b      	ldr	r2, [pc, #300]	@ (800d714 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d5e6:	4293      	cmp	r3, r2
 800d5e8:	d90f      	bls.n	800d60a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00a      	beq.n	800d60a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	015a      	lsls	r2, r3, #5
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d600:	461a      	mov	r2, r3
 800d602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d606:	6093      	str	r3, [r2, #8]
 800d608:	e07e      	b.n	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	4613      	mov	r3, r2
 800d60e:	00db      	lsls	r3, r3, #3
 800d610:	4413      	add	r3, r2
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	4413      	add	r3, r2
 800d61c:	3304      	adds	r3, #4
 800d61e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6a1a      	ldr	r2, [r3, #32]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	0159      	lsls	r1, r3, #5
 800d628:	69bb      	ldr	r3, [r7, #24]
 800d62a:	440b      	add	r3, r1
 800d62c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d636:	1ad2      	subs	r2, r2, r3
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d114      	bne.n	800d66c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d109      	bne.n	800d65e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6818      	ldr	r0, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d654:	461a      	mov	r2, r3
 800d656:	2101      	movs	r1, #1
 800d658:	f008 f8be 	bl	80157d8 <USB_EP0_OutStart>
 800d65c:	e006      	b.n	800d66c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68da      	ldr	r2, [r3, #12]
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	441a      	add	r2, r3
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f00a fd42 	bl	80180fc <HAL_PCD_DataOutStageCallback>
 800d678:	e046      	b.n	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	4a26      	ldr	r2, [pc, #152]	@ (800d718 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d124      	bne.n	800d6cc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d00a      	beq.n	800d6a2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	015a      	lsls	r2, r3, #5
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	4413      	add	r3, r2
 800d694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d698:	461a      	mov	r2, r3
 800d69a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d69e:	6093      	str	r3, [r2, #8]
 800d6a0:	e032      	b.n	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	f003 0320 	and.w	r3, r3, #32
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d008      	beq.n	800d6be <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	015a      	lsls	r2, r3, #5
 800d6b0:	69bb      	ldr	r3, [r7, #24]
 800d6b2:	4413      	add	r3, r2
 800d6b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	2320      	movs	r3, #32
 800d6bc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f00a fd19 	bl	80180fc <HAL_PCD_DataOutStageCallback>
 800d6ca:	e01d      	b.n	800d708 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d114      	bne.n	800d6fc <PCD_EP_OutXfrComplete_int+0x1b0>
 800d6d2:	6879      	ldr	r1, [r7, #4]
 800d6d4:	683a      	ldr	r2, [r7, #0]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	00db      	lsls	r3, r3, #3
 800d6da:	4413      	add	r3, r2
 800d6dc:	009b      	lsls	r3, r3, #2
 800d6de:	440b      	add	r3, r1
 800d6e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d108      	bne.n	800d6fc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d6f4:	461a      	mov	r2, r3
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	f008 f86e 	bl	80157d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f00a fcfa 	bl	80180fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3720      	adds	r7, #32
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	4f54300a 	.word	0x4f54300a
 800d718:	4f54310a 	.word	0x4f54310a

0800d71c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b086      	sub	sp, #24
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	333c      	adds	r3, #60	@ 0x3c
 800d734:	3304      	adds	r3, #4
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	015a      	lsls	r2, r3, #5
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	4413      	add	r3, r2
 800d742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	4a15      	ldr	r2, [pc, #84]	@ (800d7a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d90e      	bls.n	800d770 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d009      	beq.n	800d770 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	015a      	lsls	r2, r3, #5
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	4413      	add	r3, r2
 800d764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d768:	461a      	mov	r2, r3
 800d76a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d76e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f00a fcb1 	bl	80180d8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	4a0a      	ldr	r2, [pc, #40]	@ (800d7a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d90c      	bls.n	800d798 <PCD_EP_OutSetupPacket_int+0x7c>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	799b      	ldrb	r3, [r3, #6]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d108      	bne.n	800d798 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6818      	ldr	r0, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d790:	461a      	mov	r2, r3
 800d792:	2101      	movs	r1, #1
 800d794:	f008 f820 	bl	80157d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	4f54300a 	.word	0x4f54300a

0800d7a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b085      	sub	sp, #20
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	70fb      	strb	r3, [r7, #3]
 800d7b4:	4613      	mov	r3, r2
 800d7b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d7c0:	78fb      	ldrb	r3, [r7, #3]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d107      	bne.n	800d7d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d7c6:	883b      	ldrh	r3, [r7, #0]
 800d7c8:	0419      	lsls	r1, r3, #16
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	430a      	orrs	r2, r1
 800d7d2:	629a      	str	r2, [r3, #40]	@ 0x28
 800d7d4:	e028      	b.n	800d828 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7dc:	0c1b      	lsrs	r3, r3, #16
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	73fb      	strb	r3, [r7, #15]
 800d7e8:	e00d      	b.n	800d806 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681a      	ldr	r2, [r3, #0]
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	3340      	adds	r3, #64	@ 0x40
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	0c1b      	lsrs	r3, r3, #16
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d800:	7bfb      	ldrb	r3, [r7, #15]
 800d802:	3301      	adds	r3, #1
 800d804:	73fb      	strb	r3, [r7, #15]
 800d806:	7bfa      	ldrb	r2, [r7, #15]
 800d808:	78fb      	ldrb	r3, [r7, #3]
 800d80a:	3b01      	subs	r3, #1
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d3ec      	bcc.n	800d7ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d810:	883b      	ldrh	r3, [r7, #0]
 800d812:	0418      	lsls	r0, r3, #16
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6819      	ldr	r1, [r3, #0]
 800d818:	78fb      	ldrb	r3, [r7, #3]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	4302      	orrs	r2, r0
 800d820:	3340      	adds	r3, #64	@ 0x40
 800d822:	009b      	lsls	r3, r3, #2
 800d824:	440b      	add	r3, r1
 800d826:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d836:	b480      	push	{r7}
 800d838:	b083      	sub	sp, #12
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	460b      	mov	r3, r1
 800d840:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	887a      	ldrh	r2, [r7, #2]
 800d848:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2201      	movs	r2, #1
 800d86a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d886:	4b05      	ldr	r3, [pc, #20]	@ (800d89c <HAL_PCDEx_ActivateLPM+0x44>)
 800d888:	4313      	orrs	r3, r2
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr
 800d89c:	10000003 	.word	0x10000003

0800d8a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d8ac:	bf00      	nop
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d8c0:	4b19      	ldr	r3, [pc, #100]	@ (800d928 <HAL_PWREx_ConfigSupply+0x70>)
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	f003 0304 	and.w	r3, r3, #4
 800d8c8:	2b04      	cmp	r3, #4
 800d8ca:	d00a      	beq.n	800d8e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d8cc:	4b16      	ldr	r3, [pc, #88]	@ (800d928 <HAL_PWREx_ConfigSupply+0x70>)
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	f003 0307 	and.w	r3, r3, #7
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d001      	beq.n	800d8de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e01f      	b.n	800d91e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	e01d      	b.n	800d91e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d8e2:	4b11      	ldr	r3, [pc, #68]	@ (800d928 <HAL_PWREx_ConfigSupply+0x70>)
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	f023 0207 	bic.w	r2, r3, #7
 800d8ea:	490f      	ldr	r1, [pc, #60]	@ (800d928 <HAL_PWREx_ConfigSupply+0x70>)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d8f2:	f7f5 f9a9 	bl	8002c48 <HAL_GetTick>
 800d8f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d8f8:	e009      	b.n	800d90e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d8fa:	f7f5 f9a5 	bl	8002c48 <HAL_GetTick>
 800d8fe:	4602      	mov	r2, r0
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d908:	d901      	bls.n	800d90e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	e007      	b.n	800d91e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d90e:	4b06      	ldr	r3, [pc, #24]	@ (800d928 <HAL_PWREx_ConfigSupply+0x70>)
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d91a:	d1ee      	bne.n	800d8fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	58024800 	.word	0x58024800

0800d92c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800d92c:	b480      	push	{r7}
 800d92e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800d930:	4b05      	ldr	r3, [pc, #20]	@ (800d948 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d932:	68db      	ldr	r3, [r3, #12]
 800d934:	4a04      	ldr	r2, [pc, #16]	@ (800d948 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800d936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d93a:	60d3      	str	r3, [r2, #12]
}
 800d93c:	bf00      	nop
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	58024800 	.word	0x58024800

0800d94c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08c      	sub	sp, #48	@ 0x30
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d102      	bne.n	800d960 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800d95a:	2301      	movs	r3, #1
 800d95c:	f000 bc48 	b.w	800e1f0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f000 8088 	beq.w	800da7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d96e:	4b99      	ldr	r3, [pc, #612]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d970:	691b      	ldr	r3, [r3, #16]
 800d972:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d978:	4b96      	ldr	r3, [pc, #600]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d97c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d980:	2b10      	cmp	r3, #16
 800d982:	d007      	beq.n	800d994 <HAL_RCC_OscConfig+0x48>
 800d984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d986:	2b18      	cmp	r3, #24
 800d988:	d111      	bne.n	800d9ae <HAL_RCC_OscConfig+0x62>
 800d98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98c:	f003 0303 	and.w	r3, r3, #3
 800d990:	2b02      	cmp	r3, #2
 800d992:	d10c      	bne.n	800d9ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d994:	4b8f      	ldr	r3, [pc, #572]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d06d      	beq.n	800da7c <HAL_RCC_OscConfig+0x130>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d169      	bne.n	800da7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	f000 bc21 	b.w	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9b6:	d106      	bne.n	800d9c6 <HAL_RCC_OscConfig+0x7a>
 800d9b8:	4b86      	ldr	r3, [pc, #536]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	4a85      	ldr	r2, [pc, #532]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d9c2:	6013      	str	r3, [r2, #0]
 800d9c4:	e02e      	b.n	800da24 <HAL_RCC_OscConfig+0xd8>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10c      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x9c>
 800d9ce:	4b81      	ldr	r3, [pc, #516]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a80      	ldr	r2, [pc, #512]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d9d8:	6013      	str	r3, [r2, #0]
 800d9da:	4b7e      	ldr	r3, [pc, #504]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a7d      	ldr	r2, [pc, #500]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d9e4:	6013      	str	r3, [r2, #0]
 800d9e6:	e01d      	b.n	800da24 <HAL_RCC_OscConfig+0xd8>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	685b      	ldr	r3, [r3, #4]
 800d9ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d9f0:	d10c      	bne.n	800da0c <HAL_RCC_OscConfig+0xc0>
 800d9f2:	4b78      	ldr	r3, [pc, #480]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a77      	ldr	r2, [pc, #476]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800d9f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	4b75      	ldr	r3, [pc, #468]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a74      	ldr	r2, [pc, #464]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800da08:	6013      	str	r3, [r2, #0]
 800da0a:	e00b      	b.n	800da24 <HAL_RCC_OscConfig+0xd8>
 800da0c:	4b71      	ldr	r3, [pc, #452]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a70      	ldr	r2, [pc, #448]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800da16:	6013      	str	r3, [r2, #0]
 800da18:	4b6e      	ldr	r3, [pc, #440]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a6d      	ldr	r2, [pc, #436]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800da22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d013      	beq.n	800da54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da2c:	f7f5 f90c 	bl	8002c48 <HAL_GetTick>
 800da30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da32:	e008      	b.n	800da46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da34:	f7f5 f908 	bl	8002c48 <HAL_GetTick>
 800da38:	4602      	mov	r2, r0
 800da3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	2b64      	cmp	r3, #100	@ 0x64
 800da40:	d901      	bls.n	800da46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800da42:	2303      	movs	r3, #3
 800da44:	e3d4      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da46:	4b63      	ldr	r3, [pc, #396]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d0f0      	beq.n	800da34 <HAL_RCC_OscConfig+0xe8>
 800da52:	e014      	b.n	800da7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da54:	f7f5 f8f8 	bl	8002c48 <HAL_GetTick>
 800da58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da5a:	e008      	b.n	800da6e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800da5c:	f7f5 f8f4 	bl	8002c48 <HAL_GetTick>
 800da60:	4602      	mov	r2, r0
 800da62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	2b64      	cmp	r3, #100	@ 0x64
 800da68:	d901      	bls.n	800da6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e3c0      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800da6e:	4b59      	ldr	r3, [pc, #356]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1f0      	bne.n	800da5c <HAL_RCC_OscConfig+0x110>
 800da7a:	e000      	b.n	800da7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800da7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f003 0302 	and.w	r3, r3, #2
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 80ca 	beq.w	800dc20 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da8c:	4b51      	ldr	r3, [pc, #324]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da94:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800da96:	4b4f      	ldr	r3, [pc, #316]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800da98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da9a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d007      	beq.n	800dab2 <HAL_RCC_OscConfig+0x166>
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	2b18      	cmp	r3, #24
 800daa6:	d156      	bne.n	800db56 <HAL_RCC_OscConfig+0x20a>
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	f003 0303 	and.w	r3, r3, #3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d151      	bne.n	800db56 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dab2:	4b48      	ldr	r3, [pc, #288]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0304 	and.w	r3, r3, #4
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d005      	beq.n	800daca <HAL_RCC_OscConfig+0x17e>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	68db      	ldr	r3, [r3, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d101      	bne.n	800daca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800dac6:	2301      	movs	r3, #1
 800dac8:	e392      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800daca:	4b42      	ldr	r3, [pc, #264]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f023 0219 	bic.w	r2, r3, #25
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	493f      	ldr	r1, [pc, #252]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dad8:	4313      	orrs	r3, r2
 800dada:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dadc:	f7f5 f8b4 	bl	8002c48 <HAL_GetTick>
 800dae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dae2:	e008      	b.n	800daf6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dae4:	f7f5 f8b0 	bl	8002c48 <HAL_GetTick>
 800dae8:	4602      	mov	r2, r0
 800daea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daec:	1ad3      	subs	r3, r2, r3
 800daee:	2b02      	cmp	r3, #2
 800daf0:	d901      	bls.n	800daf6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800daf2:	2303      	movs	r3, #3
 800daf4:	e37c      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800daf6:	4b37      	ldr	r3, [pc, #220]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f003 0304 	and.w	r3, r3, #4
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0f0      	beq.n	800dae4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db02:	f7f5 f8d1 	bl	8002ca8 <HAL_GetREVID>
 800db06:	4603      	mov	r3, r0
 800db08:	f241 0203 	movw	r2, #4099	@ 0x1003
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d817      	bhi.n	800db40 <HAL_RCC_OscConfig+0x1f4>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	2b40      	cmp	r3, #64	@ 0x40
 800db16:	d108      	bne.n	800db2a <HAL_RCC_OscConfig+0x1de>
 800db18:	4b2e      	ldr	r3, [pc, #184]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800db20:	4a2c      	ldr	r2, [pc, #176]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db26:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db28:	e07a      	b.n	800dc20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db2a:	4b2a      	ldr	r3, [pc, #168]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	031b      	lsls	r3, r3, #12
 800db38:	4926      	ldr	r1, [pc, #152]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db3a:	4313      	orrs	r3, r2
 800db3c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db3e:	e06f      	b.n	800dc20 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db40:	4b24      	ldr	r3, [pc, #144]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	691b      	ldr	r3, [r3, #16]
 800db4c:	061b      	lsls	r3, r3, #24
 800db4e:	4921      	ldr	r1, [pc, #132]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db50:	4313      	orrs	r3, r2
 800db52:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800db54:	e064      	b.n	800dc20 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d047      	beq.n	800dbee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800db5e:	4b1d      	ldr	r3, [pc, #116]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f023 0219 	bic.w	r2, r3, #25
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	68db      	ldr	r3, [r3, #12]
 800db6a:	491a      	ldr	r1, [pc, #104]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db6c:	4313      	orrs	r3, r2
 800db6e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db70:	f7f5 f86a 	bl	8002c48 <HAL_GetTick>
 800db74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db76:	e008      	b.n	800db8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db78:	f7f5 f866 	bl	8002c48 <HAL_GetTick>
 800db7c:	4602      	mov	r2, r0
 800db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	2b02      	cmp	r3, #2
 800db84:	d901      	bls.n	800db8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800db86:	2303      	movs	r3, #3
 800db88:	e332      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db8a:	4b12      	ldr	r3, [pc, #72]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f003 0304 	and.w	r3, r3, #4
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0f0      	beq.n	800db78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db96:	f7f5 f887 	bl	8002ca8 <HAL_GetREVID>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d819      	bhi.n	800dbd8 <HAL_RCC_OscConfig+0x28c>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	2b40      	cmp	r3, #64	@ 0x40
 800dbaa:	d108      	bne.n	800dbbe <HAL_RCC_OscConfig+0x272>
 800dbac:	4b09      	ldr	r3, [pc, #36]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800dbb4:	4a07      	ldr	r2, [pc, #28]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dbb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dbba:	6053      	str	r3, [r2, #4]
 800dbbc:	e030      	b.n	800dc20 <HAL_RCC_OscConfig+0x2d4>
 800dbbe:	4b05      	ldr	r3, [pc, #20]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	031b      	lsls	r3, r3, #12
 800dbcc:	4901      	ldr	r1, [pc, #4]	@ (800dbd4 <HAL_RCC_OscConfig+0x288>)
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	604b      	str	r3, [r1, #4]
 800dbd2:	e025      	b.n	800dc20 <HAL_RCC_OscConfig+0x2d4>
 800dbd4:	58024400 	.word	0x58024400
 800dbd8:	4b9a      	ldr	r3, [pc, #616]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	061b      	lsls	r3, r3, #24
 800dbe6:	4997      	ldr	r1, [pc, #604]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	604b      	str	r3, [r1, #4]
 800dbec:	e018      	b.n	800dc20 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800dbee:	4b95      	ldr	r3, [pc, #596]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	4a94      	ldr	r2, [pc, #592]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dbf4:	f023 0301 	bic.w	r3, r3, #1
 800dbf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbfa:	f7f5 f825 	bl	8002c48 <HAL_GetTick>
 800dbfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dc00:	e008      	b.n	800dc14 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dc02:	f7f5 f821 	bl	8002c48 <HAL_GetTick>
 800dc06:	4602      	mov	r2, r0
 800dc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	d901      	bls.n	800dc14 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800dc10:	2303      	movs	r3, #3
 800dc12:	e2ed      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800dc14:	4b8b      	ldr	r3, [pc, #556]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 0304 	and.w	r3, r3, #4
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1f0      	bne.n	800dc02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 0310 	and.w	r3, r3, #16
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	f000 80a9 	beq.w	800dd80 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dc2e:	4b85      	ldr	r3, [pc, #532]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc30:	691b      	ldr	r3, [r3, #16]
 800dc32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc36:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800dc38:	4b82      	ldr	r3, [pc, #520]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	2b08      	cmp	r3, #8
 800dc42:	d007      	beq.n	800dc54 <HAL_RCC_OscConfig+0x308>
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	2b18      	cmp	r3, #24
 800dc48:	d13a      	bne.n	800dcc0 <HAL_RCC_OscConfig+0x374>
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	f003 0303 	and.w	r3, r3, #3
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d135      	bne.n	800dcc0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc54:	4b7b      	ldr	r3, [pc, #492]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d005      	beq.n	800dc6c <HAL_RCC_OscConfig+0x320>
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	69db      	ldr	r3, [r3, #28]
 800dc64:	2b80      	cmp	r3, #128	@ 0x80
 800dc66:	d001      	beq.n	800dc6c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	e2c1      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc6c:	f7f5 f81c 	bl	8002ca8 <HAL_GetREVID>
 800dc70:	4603      	mov	r3, r0
 800dc72:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d817      	bhi.n	800dcaa <HAL_RCC_OscConfig+0x35e>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6a1b      	ldr	r3, [r3, #32]
 800dc7e:	2b20      	cmp	r3, #32
 800dc80:	d108      	bne.n	800dc94 <HAL_RCC_OscConfig+0x348>
 800dc82:	4b70      	ldr	r3, [pc, #448]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800dc8a:	4a6e      	ldr	r2, [pc, #440]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc90:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dc92:	e075      	b.n	800dd80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dc94:	4b6b      	ldr	r3, [pc, #428]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6a1b      	ldr	r3, [r3, #32]
 800dca0:	069b      	lsls	r3, r3, #26
 800dca2:	4968      	ldr	r1, [pc, #416]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dca4:	4313      	orrs	r3, r2
 800dca6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dca8:	e06a      	b.n	800dd80 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dcaa:	4b66      	ldr	r3, [pc, #408]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dcac:	68db      	ldr	r3, [r3, #12]
 800dcae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	061b      	lsls	r3, r3, #24
 800dcb8:	4962      	ldr	r1, [pc, #392]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800dcbe:	e05f      	b.n	800dd80 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d042      	beq.n	800dd4e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800dcc8:	4b5e      	ldr	r3, [pc, #376]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	4a5d      	ldr	r2, [pc, #372]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dcce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dcd4:	f7f4 ffb8 	bl	8002c48 <HAL_GetTick>
 800dcd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dcda:	e008      	b.n	800dcee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dcdc:	f7f4 ffb4 	bl	8002c48 <HAL_GetTick>
 800dce0:	4602      	mov	r2, r0
 800dce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d901      	bls.n	800dcee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800dcea:	2303      	movs	r3, #3
 800dcec:	e280      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800dcee:	4b55      	ldr	r3, [pc, #340]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d0f0      	beq.n	800dcdc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800dcfa:	f7f4 ffd5 	bl	8002ca8 <HAL_GetREVID>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	f241 0203 	movw	r2, #4099	@ 0x1003
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d817      	bhi.n	800dd38 <HAL_RCC_OscConfig+0x3ec>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6a1b      	ldr	r3, [r3, #32]
 800dd0c:	2b20      	cmp	r3, #32
 800dd0e:	d108      	bne.n	800dd22 <HAL_RCC_OscConfig+0x3d6>
 800dd10:	4b4c      	ldr	r3, [pc, #304]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd12:	685b      	ldr	r3, [r3, #4]
 800dd14:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800dd18:	4a4a      	ldr	r2, [pc, #296]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dd1e:	6053      	str	r3, [r2, #4]
 800dd20:	e02e      	b.n	800dd80 <HAL_RCC_OscConfig+0x434>
 800dd22:	4b48      	ldr	r3, [pc, #288]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	069b      	lsls	r3, r3, #26
 800dd30:	4944      	ldr	r1, [pc, #272]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd32:	4313      	orrs	r3, r2
 800dd34:	604b      	str	r3, [r1, #4]
 800dd36:	e023      	b.n	800dd80 <HAL_RCC_OscConfig+0x434>
 800dd38:	4b42      	ldr	r3, [pc, #264]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd3a:	68db      	ldr	r3, [r3, #12]
 800dd3c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	061b      	lsls	r3, r3, #24
 800dd46:	493f      	ldr	r1, [pc, #252]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd48:	4313      	orrs	r3, r2
 800dd4a:	60cb      	str	r3, [r1, #12]
 800dd4c:	e018      	b.n	800dd80 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800dd4e:	4b3d      	ldr	r3, [pc, #244]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	4a3c      	ldr	r2, [pc, #240]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd5a:	f7f4 ff75 	bl	8002c48 <HAL_GetTick>
 800dd5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dd60:	e008      	b.n	800dd74 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800dd62:	f7f4 ff71 	bl	8002c48 <HAL_GetTick>
 800dd66:	4602      	mov	r2, r0
 800dd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6a:	1ad3      	subs	r3, r2, r3
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d901      	bls.n	800dd74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800dd70:	2303      	movs	r3, #3
 800dd72:	e23d      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800dd74:	4b33      	ldr	r3, [pc, #204]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1f0      	bne.n	800dd62 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f003 0308 	and.w	r3, r3, #8
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d036      	beq.n	800ddfa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d019      	beq.n	800ddc8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800dd94:	4b2b      	ldr	r3, [pc, #172]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd98:	4a2a      	ldr	r2, [pc, #168]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800dd9a:	f043 0301 	orr.w	r3, r3, #1
 800dd9e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dda0:	f7f4 ff52 	bl	8002c48 <HAL_GetTick>
 800dda4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800dda6:	e008      	b.n	800ddba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dda8:	f7f4 ff4e 	bl	8002c48 <HAL_GetTick>
 800ddac:	4602      	mov	r2, r0
 800ddae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	2b02      	cmp	r3, #2
 800ddb4:	d901      	bls.n	800ddba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800ddb6:	2303      	movs	r3, #3
 800ddb8:	e21a      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ddba:	4b22      	ldr	r3, [pc, #136]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800ddbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddbe:	f003 0302 	and.w	r3, r3, #2
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d0f0      	beq.n	800dda8 <HAL_RCC_OscConfig+0x45c>
 800ddc6:	e018      	b.n	800ddfa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ddc8:	4b1e      	ldr	r3, [pc, #120]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800ddca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddcc:	4a1d      	ldr	r2, [pc, #116]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800ddce:	f023 0301 	bic.w	r3, r3, #1
 800ddd2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddd4:	f7f4 ff38 	bl	8002c48 <HAL_GetTick>
 800ddd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ddda:	e008      	b.n	800ddee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800dddc:	f7f4 ff34 	bl	8002c48 <HAL_GetTick>
 800dde0:	4602      	mov	r2, r0
 800dde2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde4:	1ad3      	subs	r3, r2, r3
 800dde6:	2b02      	cmp	r3, #2
 800dde8:	d901      	bls.n	800ddee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800ddea:	2303      	movs	r3, #3
 800ddec:	e200      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ddee:	4b15      	ldr	r3, [pc, #84]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800ddf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ddf2:	f003 0302 	and.w	r3, r3, #2
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1f0      	bne.n	800dddc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 0320 	and.w	r3, r3, #32
 800de02:	2b00      	cmp	r3, #0
 800de04:	d039      	beq.n	800de7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	699b      	ldr	r3, [r3, #24]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d01c      	beq.n	800de48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800de0e:	4b0d      	ldr	r3, [pc, #52]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a0c      	ldr	r2, [pc, #48]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800de14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800de18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800de1a:	f7f4 ff15 	bl	8002c48 <HAL_GetTick>
 800de1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800de20:	e008      	b.n	800de34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de22:	f7f4 ff11 	bl	8002c48 <HAL_GetTick>
 800de26:	4602      	mov	r2, r0
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d901      	bls.n	800de34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800de30:	2303      	movs	r3, #3
 800de32:	e1dd      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800de34:	4b03      	ldr	r3, [pc, #12]	@ (800de44 <HAL_RCC_OscConfig+0x4f8>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d0f0      	beq.n	800de22 <HAL_RCC_OscConfig+0x4d6>
 800de40:	e01b      	b.n	800de7a <HAL_RCC_OscConfig+0x52e>
 800de42:	bf00      	nop
 800de44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800de48:	4b9b      	ldr	r3, [pc, #620]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4a9a      	ldr	r2, [pc, #616]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800de4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800de54:	f7f4 fef8 	bl	8002c48 <HAL_GetTick>
 800de58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800de5a:	e008      	b.n	800de6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de5c:	f7f4 fef4 	bl	8002c48 <HAL_GetTick>
 800de60:	4602      	mov	r2, r0
 800de62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	2b02      	cmp	r3, #2
 800de68:	d901      	bls.n	800de6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e1c0      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800de6e:	4b92      	ldr	r3, [pc, #584]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800de76:	2b00      	cmp	r3, #0
 800de78:	d1f0      	bne.n	800de5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f003 0304 	and.w	r3, r3, #4
 800de82:	2b00      	cmp	r3, #0
 800de84:	f000 8081 	beq.w	800df8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800de88:	4b8c      	ldr	r3, [pc, #560]	@ (800e0bc <HAL_RCC_OscConfig+0x770>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	4a8b      	ldr	r2, [pc, #556]	@ (800e0bc <HAL_RCC_OscConfig+0x770>)
 800de8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de94:	f7f4 fed8 	bl	8002c48 <HAL_GetTick>
 800de98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de9a:	e008      	b.n	800deae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de9c:	f7f4 fed4 	bl	8002c48 <HAL_GetTick>
 800dea0:	4602      	mov	r2, r0
 800dea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea4:	1ad3      	subs	r3, r2, r3
 800dea6:	2b64      	cmp	r3, #100	@ 0x64
 800dea8:	d901      	bls.n	800deae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800deaa:	2303      	movs	r3, #3
 800deac:	e1a0      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800deae:	4b83      	ldr	r3, [pc, #524]	@ (800e0bc <HAL_RCC_OscConfig+0x770>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0f0      	beq.n	800de9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	689b      	ldr	r3, [r3, #8]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d106      	bne.n	800ded0 <HAL_RCC_OscConfig+0x584>
 800dec2:	4b7d      	ldr	r3, [pc, #500]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dec6:	4a7c      	ldr	r2, [pc, #496]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dec8:	f043 0301 	orr.w	r3, r3, #1
 800decc:	6713      	str	r3, [r2, #112]	@ 0x70
 800dece:	e02d      	b.n	800df2c <HAL_RCC_OscConfig+0x5e0>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	689b      	ldr	r3, [r3, #8]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d10c      	bne.n	800def2 <HAL_RCC_OscConfig+0x5a6>
 800ded8:	4b77      	ldr	r3, [pc, #476]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800deda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dedc:	4a76      	ldr	r2, [pc, #472]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dede:	f023 0301 	bic.w	r3, r3, #1
 800dee2:	6713      	str	r3, [r2, #112]	@ 0x70
 800dee4:	4b74      	ldr	r3, [pc, #464]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dee8:	4a73      	ldr	r2, [pc, #460]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800deea:	f023 0304 	bic.w	r3, r3, #4
 800deee:	6713      	str	r3, [r2, #112]	@ 0x70
 800def0:	e01c      	b.n	800df2c <HAL_RCC_OscConfig+0x5e0>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	689b      	ldr	r3, [r3, #8]
 800def6:	2b05      	cmp	r3, #5
 800def8:	d10c      	bne.n	800df14 <HAL_RCC_OscConfig+0x5c8>
 800defa:	4b6f      	ldr	r3, [pc, #444]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800defc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800defe:	4a6e      	ldr	r2, [pc, #440]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df00:	f043 0304 	orr.w	r3, r3, #4
 800df04:	6713      	str	r3, [r2, #112]	@ 0x70
 800df06:	4b6c      	ldr	r3, [pc, #432]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df0a:	4a6b      	ldr	r2, [pc, #428]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df0c:	f043 0301 	orr.w	r3, r3, #1
 800df10:	6713      	str	r3, [r2, #112]	@ 0x70
 800df12:	e00b      	b.n	800df2c <HAL_RCC_OscConfig+0x5e0>
 800df14:	4b68      	ldr	r3, [pc, #416]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df18:	4a67      	ldr	r2, [pc, #412]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df1a:	f023 0301 	bic.w	r3, r3, #1
 800df1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800df20:	4b65      	ldr	r3, [pc, #404]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df24:	4a64      	ldr	r2, [pc, #400]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df26:	f023 0304 	bic.w	r3, r3, #4
 800df2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d015      	beq.n	800df60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df34:	f7f4 fe88 	bl	8002c48 <HAL_GetTick>
 800df38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df3a:	e00a      	b.n	800df52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df3c:	f7f4 fe84 	bl	8002c48 <HAL_GetTick>
 800df40:	4602      	mov	r2, r0
 800df42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d901      	bls.n	800df52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800df4e:	2303      	movs	r3, #3
 800df50:	e14e      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df52:	4b59      	ldr	r3, [pc, #356]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df56:	f003 0302 	and.w	r3, r3, #2
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d0ee      	beq.n	800df3c <HAL_RCC_OscConfig+0x5f0>
 800df5e:	e014      	b.n	800df8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df60:	f7f4 fe72 	bl	8002c48 <HAL_GetTick>
 800df64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800df66:	e00a      	b.n	800df7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df68:	f7f4 fe6e 	bl	8002c48 <HAL_GetTick>
 800df6c:	4602      	mov	r2, r0
 800df6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df70:	1ad3      	subs	r3, r2, r3
 800df72:	f241 3288 	movw	r2, #5000	@ 0x1388
 800df76:	4293      	cmp	r3, r2
 800df78:	d901      	bls.n	800df7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e138      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800df7e:	4b4e      	ldr	r3, [pc, #312]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df82:	f003 0302 	and.w	r3, r3, #2
 800df86:	2b00      	cmp	r3, #0
 800df88:	d1ee      	bne.n	800df68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df8e:	2b00      	cmp	r3, #0
 800df90:	f000 812d 	beq.w	800e1ee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800df94:	4b48      	ldr	r3, [pc, #288]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df9c:	2b18      	cmp	r3, #24
 800df9e:	f000 80bd 	beq.w	800e11c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	f040 809e 	bne.w	800e0e8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dfac:	4b42      	ldr	r3, [pc, #264]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a41      	ldr	r2, [pc, #260]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dfb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dfb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfb8:	f7f4 fe46 	bl	8002c48 <HAL_GetTick>
 800dfbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dfbe:	e008      	b.n	800dfd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfc0:	f7f4 fe42 	bl	8002c48 <HAL_GetTick>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	2b02      	cmp	r3, #2
 800dfcc:	d901      	bls.n	800dfd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	e10e      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dfd2:	4b39      	ldr	r3, [pc, #228]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1f0      	bne.n	800dfc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800dfde:	4b36      	ldr	r3, [pc, #216]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dfe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dfe2:	4b37      	ldr	r3, [pc, #220]	@ (800e0c0 <HAL_RCC_OscConfig+0x774>)
 800dfe4:	4013      	ands	r3, r2
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dfee:	0112      	lsls	r2, r2, #4
 800dff0:	430a      	orrs	r2, r1
 800dff2:	4931      	ldr	r1, [pc, #196]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800dff4:	4313      	orrs	r3, r2
 800dff6:	628b      	str	r3, [r1, #40]	@ 0x28
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dffc:	3b01      	subs	r3, #1
 800dffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e006:	3b01      	subs	r3, #1
 800e008:	025b      	lsls	r3, r3, #9
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	431a      	orrs	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e012:	3b01      	subs	r3, #1
 800e014:	041b      	lsls	r3, r3, #16
 800e016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e020:	3b01      	subs	r3, #1
 800e022:	061b      	lsls	r3, r3, #24
 800e024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e028:	4923      	ldr	r1, [pc, #140]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e02a:	4313      	orrs	r3, r2
 800e02c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800e02e:	4b22      	ldr	r3, [pc, #136]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e032:	4a21      	ldr	r2, [pc, #132]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e034:	f023 0301 	bic.w	r3, r3, #1
 800e038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e03a:	4b1f      	ldr	r3, [pc, #124]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e03c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e03e:	4b21      	ldr	r3, [pc, #132]	@ (800e0c4 <HAL_RCC_OscConfig+0x778>)
 800e040:	4013      	ands	r3, r2
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e046:	00d2      	lsls	r2, r2, #3
 800e048:	491b      	ldr	r1, [pc, #108]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e04a:	4313      	orrs	r3, r2
 800e04c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800e04e:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e052:	f023 020c 	bic.w	r2, r3, #12
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e05a:	4917      	ldr	r1, [pc, #92]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e05c:	4313      	orrs	r3, r2
 800e05e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800e060:	4b15      	ldr	r3, [pc, #84]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e064:	f023 0202 	bic.w	r2, r3, #2
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e06c:	4912      	ldr	r1, [pc, #72]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800e072:	4b11      	ldr	r3, [pc, #68]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e076:	4a10      	ldr	r2, [pc, #64]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e07c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e07e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e082:	4a0d      	ldr	r2, [pc, #52]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800e08a:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e08e:	4a0a      	ldr	r2, [pc, #40]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800e096:	4b08      	ldr	r3, [pc, #32]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09a:	4a07      	ldr	r2, [pc, #28]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e09c:	f043 0301 	orr.w	r3, r3, #1
 800e0a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e0a2:	4b05      	ldr	r3, [pc, #20]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4a04      	ldr	r2, [pc, #16]	@ (800e0b8 <HAL_RCC_OscConfig+0x76c>)
 800e0a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e0ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0ae:	f7f4 fdcb 	bl	8002c48 <HAL_GetTick>
 800e0b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e0b4:	e011      	b.n	800e0da <HAL_RCC_OscConfig+0x78e>
 800e0b6:	bf00      	nop
 800e0b8:	58024400 	.word	0x58024400
 800e0bc:	58024800 	.word	0x58024800
 800e0c0:	fffffc0c 	.word	0xfffffc0c
 800e0c4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0c8:	f7f4 fdbe 	bl	8002c48 <HAL_GetTick>
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d901      	bls.n	800e0da <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e08a      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e0da:	4b47      	ldr	r3, [pc, #284]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d0f0      	beq.n	800e0c8 <HAL_RCC_OscConfig+0x77c>
 800e0e6:	e082      	b.n	800e1ee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0e8:	4b43      	ldr	r3, [pc, #268]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4a42      	ldr	r2, [pc, #264]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e0ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e0f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0f4:	f7f4 fda8 	bl	8002c48 <HAL_GetTick>
 800e0f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e0fa:	e008      	b.n	800e10e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0fc:	f7f4 fda4 	bl	8002c48 <HAL_GetTick>
 800e100:	4602      	mov	r2, r0
 800e102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e104:	1ad3      	subs	r3, r2, r3
 800e106:	2b02      	cmp	r3, #2
 800e108:	d901      	bls.n	800e10e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800e10a:	2303      	movs	r3, #3
 800e10c:	e070      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800e10e:	4b3a      	ldr	r3, [pc, #232]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1f0      	bne.n	800e0fc <HAL_RCC_OscConfig+0x7b0>
 800e11a:	e068      	b.n	800e1ee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800e11c:	4b36      	ldr	r3, [pc, #216]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e120:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800e122:	4b35      	ldr	r3, [pc, #212]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e126:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d031      	beq.n	800e194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	f003 0203 	and.w	r2, r3, #3
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d12a      	bne.n	800e194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	091b      	lsrs	r3, r3, #4
 800e142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d122      	bne.n	800e194 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e158:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d11a      	bne.n	800e194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	0a5b      	lsrs	r3, r3, #9
 800e162:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e16a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d111      	bne.n	800e194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	0c1b      	lsrs	r3, r3, #16
 800e174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e17c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800e17e:	429a      	cmp	r2, r3
 800e180:	d108      	bne.n	800e194 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	0e1b      	lsrs	r3, r3, #24
 800e186:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e18e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800e190:	429a      	cmp	r2, r3
 800e192:	d001      	beq.n	800e198 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	e02b      	b.n	800e1f0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800e198:	4b17      	ldr	r3, [pc, #92]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e19a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e19c:	08db      	lsrs	r3, r3, #3
 800e19e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1a2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e1a8:	693a      	ldr	r2, [r7, #16]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d01f      	beq.n	800e1ee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800e1ae:	4b12      	ldr	r3, [pc, #72]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1b2:	4a11      	ldr	r2, [pc, #68]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e1b4:	f023 0301 	bic.w	r3, r3, #1
 800e1b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e1ba:	f7f4 fd45 	bl	8002c48 <HAL_GetTick>
 800e1be:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800e1c0:	bf00      	nop
 800e1c2:	f7f4 fd41 	bl	8002c48 <HAL_GetTick>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d0f9      	beq.n	800e1c2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800e1ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e1d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e1d2:	4b0a      	ldr	r3, [pc, #40]	@ (800e1fc <HAL_RCC_OscConfig+0x8b0>)
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800e1da:	00d2      	lsls	r2, r2, #3
 800e1dc:	4906      	ldr	r1, [pc, #24]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800e1e2:	4b05      	ldr	r3, [pc, #20]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1e6:	4a04      	ldr	r2, [pc, #16]	@ (800e1f8 <HAL_RCC_OscConfig+0x8ac>)
 800e1e8:	f043 0301 	orr.w	r3, r3, #1
 800e1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3730      	adds	r7, #48	@ 0x30
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	58024400 	.word	0x58024400
 800e1fc:	ffff0007 	.word	0xffff0007

0800e200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d101      	bne.n	800e214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e210:	2301      	movs	r3, #1
 800e212:	e19c      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e214:	4b8a      	ldr	r3, [pc, #552]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 030f 	and.w	r3, r3, #15
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d910      	bls.n	800e244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e222:	4b87      	ldr	r3, [pc, #540]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f023 020f 	bic.w	r2, r3, #15
 800e22a:	4985      	ldr	r1, [pc, #532]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	4313      	orrs	r3, r2
 800e230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e232:	4b83      	ldr	r3, [pc, #524]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f003 030f 	and.w	r3, r3, #15
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d001      	beq.n	800e244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800e240:	2301      	movs	r3, #1
 800e242:	e184      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f003 0304 	and.w	r3, r3, #4
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d010      	beq.n	800e272 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	691a      	ldr	r2, [r3, #16]
 800e254:	4b7b      	ldr	r3, [pc, #492]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d908      	bls.n	800e272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e260:	4b78      	ldr	r3, [pc, #480]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	691b      	ldr	r3, [r3, #16]
 800e26c:	4975      	ldr	r1, [pc, #468]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e26e:	4313      	orrs	r3, r2
 800e270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 0308 	and.w	r3, r3, #8
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d010      	beq.n	800e2a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	695a      	ldr	r2, [r3, #20]
 800e282:	4b70      	ldr	r3, [pc, #448]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e284:	69db      	ldr	r3, [r3, #28]
 800e286:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d908      	bls.n	800e2a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e28e:	4b6d      	ldr	r3, [pc, #436]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e290:	69db      	ldr	r3, [r3, #28]
 800e292:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	695b      	ldr	r3, [r3, #20]
 800e29a:	496a      	ldr	r1, [pc, #424]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e29c:	4313      	orrs	r3, r2
 800e29e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f003 0310 	and.w	r3, r3, #16
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d010      	beq.n	800e2ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	699a      	ldr	r2, [r3, #24]
 800e2b0:	4b64      	ldr	r3, [pc, #400]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e2b2:	69db      	ldr	r3, [r3, #28]
 800e2b4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d908      	bls.n	800e2ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e2bc:	4b61      	ldr	r3, [pc, #388]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e2be:	69db      	ldr	r3, [r3, #28]
 800e2c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	495e      	ldr	r1, [pc, #376]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f003 0320 	and.w	r3, r3, #32
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d010      	beq.n	800e2fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	69da      	ldr	r2, [r3, #28]
 800e2de:	4b59      	ldr	r3, [pc, #356]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e2e0:	6a1b      	ldr	r3, [r3, #32]
 800e2e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d908      	bls.n	800e2fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e2ea:	4b56      	ldr	r3, [pc, #344]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e2ec:	6a1b      	ldr	r3, [r3, #32]
 800e2ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	69db      	ldr	r3, [r3, #28]
 800e2f6:	4953      	ldr	r1, [pc, #332]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f003 0302 	and.w	r3, r3, #2
 800e304:	2b00      	cmp	r3, #0
 800e306:	d010      	beq.n	800e32a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68da      	ldr	r2, [r3, #12]
 800e30c:	4b4d      	ldr	r3, [pc, #308]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e30e:	699b      	ldr	r3, [r3, #24]
 800e310:	f003 030f 	and.w	r3, r3, #15
 800e314:	429a      	cmp	r2, r3
 800e316:	d908      	bls.n	800e32a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e318:	4b4a      	ldr	r3, [pc, #296]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e31a:	699b      	ldr	r3, [r3, #24]
 800e31c:	f023 020f 	bic.w	r2, r3, #15
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	4947      	ldr	r1, [pc, #284]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e326:	4313      	orrs	r3, r2
 800e328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b00      	cmp	r3, #0
 800e334:	d055      	beq.n	800e3e2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800e336:	4b43      	ldr	r3, [pc, #268]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e338:	699b      	ldr	r3, [r3, #24]
 800e33a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	4940      	ldr	r1, [pc, #256]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e344:	4313      	orrs	r3, r2
 800e346:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d107      	bne.n	800e360 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e350:	4b3c      	ldr	r3, [pc, #240]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d121      	bne.n	800e3a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e35c:	2301      	movs	r3, #1
 800e35e:	e0f6      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	2b03      	cmp	r3, #3
 800e366:	d107      	bne.n	800e378 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800e368:	4b36      	ldr	r3, [pc, #216]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d115      	bne.n	800e3a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	e0ea      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d107      	bne.n	800e390 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e380:	4b30      	ldr	r3, [pc, #192]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d109      	bne.n	800e3a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e38c:	2301      	movs	r3, #1
 800e38e:	e0de      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e390:	4b2c      	ldr	r3, [pc, #176]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f003 0304 	and.w	r3, r3, #4
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d101      	bne.n	800e3a0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800e39c:	2301      	movs	r3, #1
 800e39e:	e0d6      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e3a0:	4b28      	ldr	r3, [pc, #160]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	f023 0207 	bic.w	r2, r3, #7
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	4925      	ldr	r1, [pc, #148]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e3b2:	f7f4 fc49 	bl	8002c48 <HAL_GetTick>
 800e3b6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e3b8:	e00a      	b.n	800e3d0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e3ba:	f7f4 fc45 	bl	8002c48 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d901      	bls.n	800e3d0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	e0be      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	00db      	lsls	r3, r3, #3
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d1eb      	bne.n	800e3ba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d010      	beq.n	800e410 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68da      	ldr	r2, [r3, #12]
 800e3f2:	4b14      	ldr	r3, [pc, #80]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	f003 030f 	and.w	r3, r3, #15
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d208      	bcs.n	800e410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e3fe:	4b11      	ldr	r3, [pc, #68]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	f023 020f 	bic.w	r2, r3, #15
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	490e      	ldr	r1, [pc, #56]	@ (800e444 <HAL_RCC_ClockConfig+0x244>)
 800e40c:	4313      	orrs	r3, r2
 800e40e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e410:	4b0b      	ldr	r3, [pc, #44]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f003 030f 	and.w	r3, r3, #15
 800e418:	683a      	ldr	r2, [r7, #0]
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d214      	bcs.n	800e448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e41e:	4b08      	ldr	r3, [pc, #32]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f023 020f 	bic.w	r2, r3, #15
 800e426:	4906      	ldr	r1, [pc, #24]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	4313      	orrs	r3, r2
 800e42c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e42e:	4b04      	ldr	r3, [pc, #16]	@ (800e440 <HAL_RCC_ClockConfig+0x240>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f003 030f 	and.w	r3, r3, #15
 800e436:	683a      	ldr	r2, [r7, #0]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d005      	beq.n	800e448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e086      	b.n	800e54e <HAL_RCC_ClockConfig+0x34e>
 800e440:	52002000 	.word	0x52002000
 800e444:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d010      	beq.n	800e476 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	691a      	ldr	r2, [r3, #16]
 800e458:	4b3f      	ldr	r3, [pc, #252]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e45a:	699b      	ldr	r3, [r3, #24]
 800e45c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e460:	429a      	cmp	r2, r3
 800e462:	d208      	bcs.n	800e476 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800e464:	4b3c      	ldr	r3, [pc, #240]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e466:	699b      	ldr	r3, [r3, #24]
 800e468:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	691b      	ldr	r3, [r3, #16]
 800e470:	4939      	ldr	r1, [pc, #228]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e472:	4313      	orrs	r3, r2
 800e474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f003 0308 	and.w	r3, r3, #8
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d010      	beq.n	800e4a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	695a      	ldr	r2, [r3, #20]
 800e486:	4b34      	ldr	r3, [pc, #208]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e488:	69db      	ldr	r3, [r3, #28]
 800e48a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e48e:	429a      	cmp	r2, r3
 800e490:	d208      	bcs.n	800e4a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800e492:	4b31      	ldr	r3, [pc, #196]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e494:	69db      	ldr	r3, [r3, #28]
 800e496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	492e      	ldr	r1, [pc, #184]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	f003 0310 	and.w	r3, r3, #16
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d010      	beq.n	800e4d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	699a      	ldr	r2, [r3, #24]
 800e4b4:	4b28      	ldr	r3, [pc, #160]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4b6:	69db      	ldr	r3, [r3, #28]
 800e4b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d208      	bcs.n	800e4d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800e4c0:	4b25      	ldr	r3, [pc, #148]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4c2:	69db      	ldr	r3, [r3, #28]
 800e4c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	699b      	ldr	r3, [r3, #24]
 800e4cc:	4922      	ldr	r1, [pc, #136]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f003 0320 	and.w	r3, r3, #32
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d010      	beq.n	800e500 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69da      	ldr	r2, [r3, #28]
 800e4e2:	4b1d      	ldr	r3, [pc, #116]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d208      	bcs.n	800e500 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800e4ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4f0:	6a1b      	ldr	r3, [r3, #32]
 800e4f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	69db      	ldr	r3, [r3, #28]
 800e4fa:	4917      	ldr	r1, [pc, #92]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e500:	f000 f834 	bl	800e56c <HAL_RCC_GetSysClockFreq>
 800e504:	4602      	mov	r2, r0
 800e506:	4b14      	ldr	r3, [pc, #80]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e508:	699b      	ldr	r3, [r3, #24]
 800e50a:	0a1b      	lsrs	r3, r3, #8
 800e50c:	f003 030f 	and.w	r3, r3, #15
 800e510:	4912      	ldr	r1, [pc, #72]	@ (800e55c <HAL_RCC_ClockConfig+0x35c>)
 800e512:	5ccb      	ldrb	r3, [r1, r3]
 800e514:	f003 031f 	and.w	r3, r3, #31
 800e518:	fa22 f303 	lsr.w	r3, r2, r3
 800e51c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e51e:	4b0e      	ldr	r3, [pc, #56]	@ (800e558 <HAL_RCC_ClockConfig+0x358>)
 800e520:	699b      	ldr	r3, [r3, #24]
 800e522:	f003 030f 	and.w	r3, r3, #15
 800e526:	4a0d      	ldr	r2, [pc, #52]	@ (800e55c <HAL_RCC_ClockConfig+0x35c>)
 800e528:	5cd3      	ldrb	r3, [r2, r3]
 800e52a:	f003 031f 	and.w	r3, r3, #31
 800e52e:	693a      	ldr	r2, [r7, #16]
 800e530:	fa22 f303 	lsr.w	r3, r2, r3
 800e534:	4a0a      	ldr	r2, [pc, #40]	@ (800e560 <HAL_RCC_ClockConfig+0x360>)
 800e536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e538:	4a0a      	ldr	r2, [pc, #40]	@ (800e564 <HAL_RCC_ClockConfig+0x364>)
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800e53e:	4b0a      	ldr	r3, [pc, #40]	@ (800e568 <HAL_RCC_ClockConfig+0x368>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4618      	mov	r0, r3
 800e544:	f7f4 fb36 	bl	8002bb4 <HAL_InitTick>
 800e548:	4603      	mov	r3, r0
 800e54a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3718      	adds	r7, #24
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	58024400 	.word	0x58024400
 800e55c:	080190b0 	.word	0x080190b0
 800e560:	24000230 	.word	0x24000230
 800e564:	2400022c 	.word	0x2400022c
 800e568:	24000234 	.word	0x24000234

0800e56c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e56c:	b480      	push	{r7}
 800e56e:	b089      	sub	sp, #36	@ 0x24
 800e570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e572:	4bb3      	ldr	r3, [pc, #716]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e57a:	2b18      	cmp	r3, #24
 800e57c:	f200 8155 	bhi.w	800e82a <HAL_RCC_GetSysClockFreq+0x2be>
 800e580:	a201      	add	r2, pc, #4	@ (adr r2, 800e588 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e586:	bf00      	nop
 800e588:	0800e5ed 	.word	0x0800e5ed
 800e58c:	0800e82b 	.word	0x0800e82b
 800e590:	0800e82b 	.word	0x0800e82b
 800e594:	0800e82b 	.word	0x0800e82b
 800e598:	0800e82b 	.word	0x0800e82b
 800e59c:	0800e82b 	.word	0x0800e82b
 800e5a0:	0800e82b 	.word	0x0800e82b
 800e5a4:	0800e82b 	.word	0x0800e82b
 800e5a8:	0800e613 	.word	0x0800e613
 800e5ac:	0800e82b 	.word	0x0800e82b
 800e5b0:	0800e82b 	.word	0x0800e82b
 800e5b4:	0800e82b 	.word	0x0800e82b
 800e5b8:	0800e82b 	.word	0x0800e82b
 800e5bc:	0800e82b 	.word	0x0800e82b
 800e5c0:	0800e82b 	.word	0x0800e82b
 800e5c4:	0800e82b 	.word	0x0800e82b
 800e5c8:	0800e619 	.word	0x0800e619
 800e5cc:	0800e82b 	.word	0x0800e82b
 800e5d0:	0800e82b 	.word	0x0800e82b
 800e5d4:	0800e82b 	.word	0x0800e82b
 800e5d8:	0800e82b 	.word	0x0800e82b
 800e5dc:	0800e82b 	.word	0x0800e82b
 800e5e0:	0800e82b 	.word	0x0800e82b
 800e5e4:	0800e82b 	.word	0x0800e82b
 800e5e8:	0800e61f 	.word	0x0800e61f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5ec:	4b94      	ldr	r3, [pc, #592]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 0320 	and.w	r3, r3, #32
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5f8:	4b91      	ldr	r3, [pc, #580]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	08db      	lsrs	r3, r3, #3
 800e5fe:	f003 0303 	and.w	r3, r3, #3
 800e602:	4a90      	ldr	r2, [pc, #576]	@ (800e844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e604:	fa22 f303 	lsr.w	r3, r2, r3
 800e608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800e60a:	e111      	b.n	800e830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e60c:	4b8d      	ldr	r3, [pc, #564]	@ (800e844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e60e:	61bb      	str	r3, [r7, #24]
      break;
 800e610:	e10e      	b.n	800e830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800e612:	4b8d      	ldr	r3, [pc, #564]	@ (800e848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e614:	61bb      	str	r3, [r7, #24]
      break;
 800e616:	e10b      	b.n	800e830 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800e618:	4b8c      	ldr	r3, [pc, #560]	@ (800e84c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e61a:	61bb      	str	r3, [r7, #24]
      break;
 800e61c:	e108      	b.n	800e830 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e61e:	4b88      	ldr	r3, [pc, #544]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e622:	f003 0303 	and.w	r3, r3, #3
 800e626:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800e628:	4b85      	ldr	r3, [pc, #532]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e62a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e62c:	091b      	lsrs	r3, r3, #4
 800e62e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e632:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e634:	4b82      	ldr	r3, [pc, #520]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e638:	f003 0301 	and.w	r3, r3, #1
 800e63c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e63e:	4b80      	ldr	r3, [pc, #512]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e642:	08db      	lsrs	r3, r3, #3
 800e644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e648:	68fa      	ldr	r2, [r7, #12]
 800e64a:	fb02 f303 	mul.w	r3, r2, r3
 800e64e:	ee07 3a90 	vmov	s15, r3
 800e652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e656:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	f000 80e1 	beq.w	800e824 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	2b02      	cmp	r3, #2
 800e666:	f000 8083 	beq.w	800e770 <HAL_RCC_GetSysClockFreq+0x204>
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	2b02      	cmp	r3, #2
 800e66e:	f200 80a1 	bhi.w	800e7b4 <HAL_RCC_GetSysClockFreq+0x248>
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d003      	beq.n	800e680 <HAL_RCC_GetSysClockFreq+0x114>
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	d056      	beq.n	800e72c <HAL_RCC_GetSysClockFreq+0x1c0>
 800e67e:	e099      	b.n	800e7b4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e680:	4b6f      	ldr	r3, [pc, #444]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f003 0320 	and.w	r3, r3, #32
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d02d      	beq.n	800e6e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e68c:	4b6c      	ldr	r3, [pc, #432]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	08db      	lsrs	r3, r3, #3
 800e692:	f003 0303 	and.w	r3, r3, #3
 800e696:	4a6b      	ldr	r2, [pc, #428]	@ (800e844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e698:	fa22 f303 	lsr.w	r3, r2, r3
 800e69c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	ee07 3a90 	vmov	s15, r3
 800e6a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	ee07 3a90 	vmov	s15, r3
 800e6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6b6:	4b62      	ldr	r3, [pc, #392]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6be:	ee07 3a90 	vmov	s15, r3
 800e6c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e6ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800e850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e6ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800e6e6:	e087      	b.n	800e7f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	ee07 3a90 	vmov	s15, r3
 800e6ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800e854 <HAL_RCC_GetSysClockFreq+0x2e8>
 800e6f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6fa:	4b51      	ldr	r3, [pc, #324]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e6fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e702:	ee07 3a90 	vmov	s15, r3
 800e706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e70a:	ed97 6a02 	vldr	s12, [r7, #8]
 800e70e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800e850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e71a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e71e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e72a:	e065      	b.n	800e7f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	ee07 3a90 	vmov	s15, r3
 800e732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e736:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800e858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e73a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e73e:	4b40      	ldr	r3, [pc, #256]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e746:	ee07 3a90 	vmov	s15, r3
 800e74a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e74e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e752:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e75a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e75e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e76a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e76e:	e043      	b.n	800e7f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	ee07 3a90 	vmov	s15, r3
 800e776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e77a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800e85c <HAL_RCC_GetSysClockFreq+0x2f0>
 800e77e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e782:	4b2f      	ldr	r3, [pc, #188]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e78a:	ee07 3a90 	vmov	s15, r3
 800e78e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e792:	ed97 6a02 	vldr	s12, [r7, #8]
 800e796:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800e850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e79a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e79e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e7b2:	e021      	b.n	800e7f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	ee07 3a90 	vmov	s15, r3
 800e7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e7c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7c6:	4b1e      	ldr	r3, [pc, #120]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ce:	ee07 3a90 	vmov	s15, r3
 800e7d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800e7da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800e850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e7de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e7ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800e7f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800e7f8:	4b11      	ldr	r3, [pc, #68]	@ (800e840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7fc:	0a5b      	lsrs	r3, r3, #9
 800e7fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e802:	3301      	adds	r3, #1
 800e804:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	ee07 3a90 	vmov	s15, r3
 800e80c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e810:	edd7 6a07 	vldr	s13, [r7, #28]
 800e814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e81c:	ee17 3a90 	vmov	r3, s15
 800e820:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800e822:	e005      	b.n	800e830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800e824:	2300      	movs	r3, #0
 800e826:	61bb      	str	r3, [r7, #24]
      break;
 800e828:	e002      	b.n	800e830 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800e82a:	4b07      	ldr	r3, [pc, #28]	@ (800e848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e82c:	61bb      	str	r3, [r7, #24]
      break;
 800e82e:	bf00      	nop
  }

  return sysclockfreq;
 800e830:	69bb      	ldr	r3, [r7, #24]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3724      	adds	r7, #36	@ 0x24
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop
 800e840:	58024400 	.word	0x58024400
 800e844:	03d09000 	.word	0x03d09000
 800e848:	003d0900 	.word	0x003d0900
 800e84c:	017d7840 	.word	0x017d7840
 800e850:	46000000 	.word	0x46000000
 800e854:	4c742400 	.word	0x4c742400
 800e858:	4a742400 	.word	0x4a742400
 800e85c:	4bbebc20 	.word	0x4bbebc20

0800e860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e866:	f7ff fe81 	bl	800e56c <HAL_RCC_GetSysClockFreq>
 800e86a:	4602      	mov	r2, r0
 800e86c:	4b10      	ldr	r3, [pc, #64]	@ (800e8b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	0a1b      	lsrs	r3, r3, #8
 800e872:	f003 030f 	and.w	r3, r3, #15
 800e876:	490f      	ldr	r1, [pc, #60]	@ (800e8b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e878:	5ccb      	ldrb	r3, [r1, r3]
 800e87a:	f003 031f 	and.w	r3, r3, #31
 800e87e:	fa22 f303 	lsr.w	r3, r2, r3
 800e882:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e884:	4b0a      	ldr	r3, [pc, #40]	@ (800e8b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800e886:	699b      	ldr	r3, [r3, #24]
 800e888:	f003 030f 	and.w	r3, r3, #15
 800e88c:	4a09      	ldr	r2, [pc, #36]	@ (800e8b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800e88e:	5cd3      	ldrb	r3, [r2, r3]
 800e890:	f003 031f 	and.w	r3, r3, #31
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	fa22 f303 	lsr.w	r3, r2, r3
 800e89a:	4a07      	ldr	r2, [pc, #28]	@ (800e8b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e89c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e89e:	4a07      	ldr	r2, [pc, #28]	@ (800e8bc <HAL_RCC_GetHCLKFreq+0x5c>)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e8a4:	4b04      	ldr	r3, [pc, #16]	@ (800e8b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3708      	adds	r7, #8
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}
 800e8b0:	58024400 	.word	0x58024400
 800e8b4:	080190b0 	.word	0x080190b0
 800e8b8:	24000230 	.word	0x24000230
 800e8bc:	2400022c 	.word	0x2400022c

0800e8c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e8c4:	f7ff ffcc 	bl	800e860 <HAL_RCC_GetHCLKFreq>
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	4b06      	ldr	r3, [pc, #24]	@ (800e8e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e8cc:	69db      	ldr	r3, [r3, #28]
 800e8ce:	091b      	lsrs	r3, r3, #4
 800e8d0:	f003 0307 	and.w	r3, r3, #7
 800e8d4:	4904      	ldr	r1, [pc, #16]	@ (800e8e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e8d6:	5ccb      	ldrb	r3, [r1, r3]
 800e8d8:	f003 031f 	and.w	r3, r3, #31
 800e8dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	58024400 	.word	0x58024400
 800e8e8:	080190b0 	.word	0x080190b0

0800e8ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e8f0:	f7ff ffb6 	bl	800e860 <HAL_RCC_GetHCLKFreq>
 800e8f4:	4602      	mov	r2, r0
 800e8f6:	4b06      	ldr	r3, [pc, #24]	@ (800e910 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e8f8:	69db      	ldr	r3, [r3, #28]
 800e8fa:	0a1b      	lsrs	r3, r3, #8
 800e8fc:	f003 0307 	and.w	r3, r3, #7
 800e900:	4904      	ldr	r1, [pc, #16]	@ (800e914 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e902:	5ccb      	ldrb	r3, [r1, r3]
 800e904:	f003 031f 	and.w	r3, r3, #31
 800e908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	58024400 	.word	0x58024400
 800e914:	080190b0 	.word	0x080190b0

0800e918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e91c:	b0ca      	sub	sp, #296	@ 0x128
 800e91e:	af00      	add	r7, sp, #0
 800e920:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e924:	2300      	movs	r3, #0
 800e926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e92a:	2300      	movs	r3, #0
 800e92c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800e93c:	2500      	movs	r5, #0
 800e93e:	ea54 0305 	orrs.w	r3, r4, r5
 800e942:	d049      	beq.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800e944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e94a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e94e:	d02f      	beq.n	800e9b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800e950:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e954:	d828      	bhi.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e95a:	d01a      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800e95c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e960:	d822      	bhi.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800e966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e96a:	d007      	beq.n	800e97c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e96c:	e01c      	b.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e96e:	4bb8      	ldr	r3, [pc, #736]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e972:	4ab7      	ldr	r2, [pc, #732]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e978:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e97a:	e01a      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e97c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e980:	3308      	adds	r3, #8
 800e982:	2102      	movs	r1, #2
 800e984:	4618      	mov	r0, r3
 800e986:	f002 fb61 	bl	801104c <RCCEx_PLL2_Config>
 800e98a:	4603      	mov	r3, r0
 800e98c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e990:	e00f      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e996:	3328      	adds	r3, #40	@ 0x28
 800e998:	2102      	movs	r1, #2
 800e99a:	4618      	mov	r0, r3
 800e99c:	f002 fc08 	bl	80111b0 <RCCEx_PLL3_Config>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800e9a6:	e004      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800e9ae:	e000      	b.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800e9b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d10a      	bne.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e9ba:	4ba5      	ldr	r3, [pc, #660]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e9be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800e9c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e9c8:	4aa1      	ldr	r2, [pc, #644]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800e9ca:	430b      	orrs	r3, r1
 800e9cc:	6513      	str	r3, [r2, #80]	@ 0x50
 800e9ce:	e003      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e9d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800e9e4:	f04f 0900 	mov.w	r9, #0
 800e9e8:	ea58 0309 	orrs.w	r3, r8, r9
 800e9ec:	d047      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800e9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e9f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9f4:	2b04      	cmp	r3, #4
 800e9f6:	d82a      	bhi.n	800ea4e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e9f8:	a201      	add	r2, pc, #4	@ (adr r2, 800ea00 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800e9fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9fe:	bf00      	nop
 800ea00:	0800ea15 	.word	0x0800ea15
 800ea04:	0800ea23 	.word	0x0800ea23
 800ea08:	0800ea39 	.word	0x0800ea39
 800ea0c:	0800ea57 	.word	0x0800ea57
 800ea10:	0800ea57 	.word	0x0800ea57
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ea14:	4b8e      	ldr	r3, [pc, #568]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea18:	4a8d      	ldr	r2, [pc, #564]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ea1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea20:	e01a      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea26:	3308      	adds	r3, #8
 800ea28:	2100      	movs	r1, #0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f002 fb0e 	bl	801104c <RCCEx_PLL2_Config>
 800ea30:	4603      	mov	r3, r0
 800ea32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea36:	e00f      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea3c:	3328      	adds	r3, #40	@ 0x28
 800ea3e:	2100      	movs	r1, #0
 800ea40:	4618      	mov	r0, r3
 800ea42:	f002 fbb5 	bl	80111b0 <RCCEx_PLL3_Config>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ea4c:	e004      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea4e:	2301      	movs	r3, #1
 800ea50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ea54:	e000      	b.n	800ea58 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ea56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10a      	bne.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ea60:	4b7b      	ldr	r3, [pc, #492]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea64:	f023 0107 	bic.w	r1, r3, #7
 800ea68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea6e:	4a78      	ldr	r2, [pc, #480]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ea70:	430b      	orrs	r3, r1
 800ea72:	6513      	str	r3, [r2, #80]	@ 0x50
 800ea74:	e003      	b.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ea7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ea7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800ea8a:	f04f 0b00 	mov.w	fp, #0
 800ea8e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ea92:	d04c      	beq.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ea94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ea98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ea9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea9e:	d030      	beq.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800eaa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eaa4:	d829      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eaa6:	2bc0      	cmp	r3, #192	@ 0xc0
 800eaa8:	d02d      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800eaaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800eaac:	d825      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eaae:	2b80      	cmp	r3, #128	@ 0x80
 800eab0:	d018      	beq.n	800eae4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800eab2:	2b80      	cmp	r3, #128	@ 0x80
 800eab4:	d821      	bhi.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800eaba:	2b40      	cmp	r3, #64	@ 0x40
 800eabc:	d007      	beq.n	800eace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800eabe:	e01c      	b.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eac0:	4b63      	ldr	r3, [pc, #396]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eac4:	4a62      	ldr	r2, [pc, #392]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eac6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eaca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eacc:	e01c      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ead2:	3308      	adds	r3, #8
 800ead4:	2100      	movs	r1, #0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f002 fab8 	bl	801104c <RCCEx_PLL2_Config>
 800eadc:	4603      	mov	r3, r0
 800eade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eae2:	e011      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eae8:	3328      	adds	r3, #40	@ 0x28
 800eaea:	2100      	movs	r1, #0
 800eaec:	4618      	mov	r0, r3
 800eaee:	f002 fb5f 	bl	80111b0 <RCCEx_PLL3_Config>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800eaf8:	e006      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eb00:	e002      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800eb06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d10a      	bne.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800eb10:	4b4f      	ldr	r3, [pc, #316]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb14:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800eb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb1e:	4a4c      	ldr	r2, [pc, #304]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb20:	430b      	orrs	r3, r1
 800eb22:	6513      	str	r3, [r2, #80]	@ 0x50
 800eb24:	e003      	b.n	800eb2e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eb2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800eb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb36:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800eb3a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800eb3e:	2300      	movs	r3, #0
 800eb40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800eb44:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4313      	orrs	r3, r2
 800eb4c:	d053      	beq.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800eb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800eb56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb5a:	d035      	beq.n	800ebc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800eb5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eb60:	d82e      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb66:	d031      	beq.n	800ebcc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800eb68:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800eb6c:	d828      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb72:	d01a      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800eb74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eb78:	d822      	bhi.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d003      	beq.n	800eb86 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800eb7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800eb82:	d007      	beq.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800eb84:	e01c      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb86:	4b32      	ldr	r3, [pc, #200]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb8a:	4a31      	ldr	r2, [pc, #196]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800eb8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800eb90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800eb92:	e01c      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb98:	3308      	adds	r3, #8
 800eb9a:	2100      	movs	r1, #0
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f002 fa55 	bl	801104c <RCCEx_PLL2_Config>
 800eba2:	4603      	mov	r3, r0
 800eba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800eba8:	e011      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebae:	3328      	adds	r3, #40	@ 0x28
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f002 fafc 	bl	80111b0 <RCCEx_PLL3_Config>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ebbe:	e006      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ebc6:	e002      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ebc8:	bf00      	nop
 800ebca:	e000      	b.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ebcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10b      	bne.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ebd6:	4b1e      	ldr	r3, [pc, #120]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebda:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800ebde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebe2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800ebe6:	4a1a      	ldr	r2, [pc, #104]	@ (800ec50 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ebe8:	430b      	orrs	r3, r1
 800ebea:	6593      	str	r3, [r2, #88]	@ 0x58
 800ebec:	e003      	b.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ebf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ebf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebfe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ec02:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800ec06:	2300      	movs	r3, #0
 800ec08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800ec0c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800ec10:	460b      	mov	r3, r1
 800ec12:	4313      	orrs	r3, r2
 800ec14:	d056      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ec16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ec1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec22:	d038      	beq.n	800ec96 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ec24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ec28:	d831      	bhi.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec2a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec2e:	d034      	beq.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ec30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ec34:	d82b      	bhi.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec36:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec3a:	d01d      	beq.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ec3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ec40:	d825      	bhi.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d006      	beq.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ec46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec4a:	d00a      	beq.n	800ec62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ec4c:	e01f      	b.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ec4e:	bf00      	nop
 800ec50:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec54:	4ba2      	ldr	r3, [pc, #648]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec58:	4aa1      	ldr	r2, [pc, #644]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ec5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ec5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec60:	e01c      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ec62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec66:	3308      	adds	r3, #8
 800ec68:	2100      	movs	r1, #0
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f002 f9ee 	bl	801104c <RCCEx_PLL2_Config>
 800ec70:	4603      	mov	r3, r0
 800ec72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ec76:	e011      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ec78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ec7c:	3328      	adds	r3, #40	@ 0x28
 800ec7e:	2100      	movs	r1, #0
 800ec80:	4618      	mov	r0, r3
 800ec82:	f002 fa95 	bl	80111b0 <RCCEx_PLL3_Config>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ec8c:	e006      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ec94:	e002      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ec96:	bf00      	nop
 800ec98:	e000      	b.n	800ec9c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ec9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10b      	bne.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800eca4:	4b8e      	ldr	r3, [pc, #568]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eca8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800ecac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ecb4:	4a8a      	ldr	r2, [pc, #552]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ecb6:	430b      	orrs	r3, r1
 800ecb8:	6593      	str	r3, [r2, #88]	@ 0x58
 800ecba:	e003      	b.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ecc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ecc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800ecd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ecda:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800ecde:	460b      	mov	r3, r1
 800ece0:	4313      	orrs	r3, r2
 800ece2:	d03a      	beq.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ece4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ece8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecea:	2b30      	cmp	r3, #48	@ 0x30
 800ecec:	d01f      	beq.n	800ed2e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ecee:	2b30      	cmp	r3, #48	@ 0x30
 800ecf0:	d819      	bhi.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ecf2:	2b20      	cmp	r3, #32
 800ecf4:	d00c      	beq.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ecf6:	2b20      	cmp	r3, #32
 800ecf8:	d815      	bhi.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d019      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ecfe:	2b10      	cmp	r3, #16
 800ed00:	d111      	bne.n	800ed26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed02:	4b77      	ldr	r3, [pc, #476]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed06:	4a76      	ldr	r2, [pc, #472]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ed0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ed0e:	e011      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ed10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed14:	3308      	adds	r3, #8
 800ed16:	2102      	movs	r1, #2
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f002 f997 	bl	801104c <RCCEx_PLL2_Config>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ed24:	e006      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ed26:	2301      	movs	r3, #1
 800ed28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ed2c:	e002      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed2e:	bf00      	nop
 800ed30:	e000      	b.n	800ed34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800ed32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ed34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d10a      	bne.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ed3c:	4b68      	ldr	r3, [pc, #416]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed40:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ed44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed4a:	4a65      	ldr	r2, [pc, #404]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ed4c:	430b      	orrs	r3, r1
 800ed4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ed50:	e003      	b.n	800ed5a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ed56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ed5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed62:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ed66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ed70:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ed74:	460b      	mov	r3, r1
 800ed76:	4313      	orrs	r3, r2
 800ed78:	d051      	beq.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ed7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ed7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed84:	d035      	beq.n	800edf2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ed86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ed8a:	d82e      	bhi.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed90:	d031      	beq.n	800edf6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ed92:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ed96:	d828      	bhi.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ed98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ed9c:	d01a      	beq.n	800edd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ed9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eda2:	d822      	bhi.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d003      	beq.n	800edb0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800eda8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800edac:	d007      	beq.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800edae:	e01c      	b.n	800edea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800edb0:	4b4b      	ldr	r3, [pc, #300]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb4:	4a4a      	ldr	r2, [pc, #296]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800edb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800edba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edbc:	e01c      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edc2:	3308      	adds	r3, #8
 800edc4:	2100      	movs	r1, #0
 800edc6:	4618      	mov	r0, r3
 800edc8:	f002 f940 	bl	801104c <RCCEx_PLL2_Config>
 800edcc:	4603      	mov	r3, r0
 800edce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800edd2:	e011      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800edd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800edd8:	3328      	adds	r3, #40	@ 0x28
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f002 f9e7 	bl	80111b0 <RCCEx_PLL3_Config>
 800ede2:	4603      	mov	r3, r0
 800ede4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ede8:	e006      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800edea:	2301      	movs	r3, #1
 800edec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800edf0:	e002      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800edf2:	bf00      	nop
 800edf4:	e000      	b.n	800edf8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800edf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800edf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d10a      	bne.n	800ee16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ee00:	4b37      	ldr	r3, [pc, #220]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ee08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee0e:	4a34      	ldr	r2, [pc, #208]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ee10:	430b      	orrs	r3, r1
 800ee12:	6513      	str	r3, [r2, #80]	@ 0x50
 800ee14:	e003      	b.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ee1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ee1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ee2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ee34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800ee38:	460b      	mov	r3, r1
 800ee3a:	4313      	orrs	r3, r2
 800ee3c:	d056      	beq.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ee3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee48:	d033      	beq.n	800eeb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ee4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee4e:	d82c      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ee54:	d02f      	beq.n	800eeb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ee56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ee5a:	d826      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee60:	d02b      	beq.n	800eeba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ee62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ee66:	d820      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee6c:	d012      	beq.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800ee6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee72:	d81a      	bhi.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d022      	beq.n	800eebe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ee78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee7c:	d115      	bne.n	800eeaa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee82:	3308      	adds	r3, #8
 800ee84:	2101      	movs	r1, #1
 800ee86:	4618      	mov	r0, r3
 800ee88:	f002 f8e0 	bl	801104c <RCCEx_PLL2_Config>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ee92:	e015      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ee94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ee98:	3328      	adds	r3, #40	@ 0x28
 800ee9a:	2101      	movs	r1, #1
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f002 f987 	bl	80111b0 <RCCEx_PLL3_Config>
 800eea2:	4603      	mov	r3, r0
 800eea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800eea8:	e00a      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eeaa:	2301      	movs	r3, #1
 800eeac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800eeb0:	e006      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeb2:	bf00      	nop
 800eeb4:	e004      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeb6:	bf00      	nop
 800eeb8:	e002      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eeba:	bf00      	nop
 800eebc:	e000      	b.n	800eec0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800eebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10d      	bne.n	800eee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800eec8:	4b05      	ldr	r3, [pc, #20]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eeca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eecc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800eed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eed4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eed6:	4a02      	ldr	r2, [pc, #8]	@ (800eee0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800eed8:	430b      	orrs	r3, r1
 800eeda:	6513      	str	r3, [r2, #80]	@ 0x50
 800eedc:	e006      	b.n	800eeec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800eede:	bf00      	nop
 800eee0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800eee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800eeec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800eef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800eefc:	2300      	movs	r3, #0
 800eefe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ef02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ef06:	460b      	mov	r3, r1
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	d055      	beq.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ef0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ef14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef18:	d033      	beq.n	800ef82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800ef1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ef1e:	d82c      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef24:	d02f      	beq.n	800ef86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800ef26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef2a:	d826      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ef30:	d02b      	beq.n	800ef8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800ef32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ef36:	d820      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef3c:	d012      	beq.n	800ef64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800ef3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ef42:	d81a      	bhi.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d022      	beq.n	800ef8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800ef48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ef4c:	d115      	bne.n	800ef7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ef4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef52:	3308      	adds	r3, #8
 800ef54:	2101      	movs	r1, #1
 800ef56:	4618      	mov	r0, r3
 800ef58:	f002 f878 	bl	801104c <RCCEx_PLL2_Config>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef62:	e015      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ef64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ef68:	3328      	adds	r3, #40	@ 0x28
 800ef6a:	2101      	movs	r1, #1
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f002 f91f 	bl	80111b0 <RCCEx_PLL3_Config>
 800ef72:	4603      	mov	r3, r0
 800ef74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ef78:	e00a      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800ef80:	e006      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef82:	bf00      	nop
 800ef84:	e004      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef86:	bf00      	nop
 800ef88:	e002      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef8a:	bf00      	nop
 800ef8c:	e000      	b.n	800ef90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800ef8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ef90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10b      	bne.n	800efb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ef98:	4ba3      	ldr	r3, [pc, #652]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ef9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ef9c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800efa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800efa8:	4a9f      	ldr	r2, [pc, #636]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800efaa:	430b      	orrs	r3, r1
 800efac:	6593      	str	r3, [r2, #88]	@ 0x58
 800efae:	e003      	b.n	800efb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800efb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800efb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800efb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800efc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800efc8:	2300      	movs	r3, #0
 800efca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800efd2:	460b      	mov	r3, r1
 800efd4:	4313      	orrs	r3, r2
 800efd6:	d037      	beq.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800efd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800efdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800efde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efe2:	d00e      	beq.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800efe4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800efe8:	d816      	bhi.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d018      	beq.n	800f020 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800efee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eff2:	d111      	bne.n	800f018 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eff4:	4b8c      	ldr	r3, [pc, #560]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800eff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff8:	4a8b      	ldr	r2, [pc, #556]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800effa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800effe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f000:	e00f      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f006:	3308      	adds	r3, #8
 800f008:	2101      	movs	r1, #1
 800f00a:	4618      	mov	r0, r3
 800f00c:	f002 f81e 	bl	801104c <RCCEx_PLL2_Config>
 800f010:	4603      	mov	r3, r0
 800f012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800f016:	e004      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f018:	2301      	movs	r3, #1
 800f01a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f01e:	e000      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800f020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f026:	2b00      	cmp	r3, #0
 800f028:	d10a      	bne.n	800f040 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800f02a:	4b7f      	ldr	r3, [pc, #508]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f02c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f02e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800f032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f038:	4a7b      	ldr	r2, [pc, #492]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f03a:	430b      	orrs	r3, r1
 800f03c:	6513      	str	r3, [r2, #80]	@ 0x50
 800f03e:	e003      	b.n	800f048 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800f048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800f054:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f058:	2300      	movs	r3, #0
 800f05a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f05e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800f062:	460b      	mov	r3, r1
 800f064:	4313      	orrs	r3, r2
 800f066:	d039      	beq.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800f068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f06c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f06e:	2b03      	cmp	r3, #3
 800f070:	d81c      	bhi.n	800f0ac <HAL_RCCEx_PeriphCLKConfig+0x794>
 800f072:	a201      	add	r2, pc, #4	@ (adr r2, 800f078 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800f074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f078:	0800f0b5 	.word	0x0800f0b5
 800f07c:	0800f089 	.word	0x0800f089
 800f080:	0800f097 	.word	0x0800f097
 800f084:	0800f0b5 	.word	0x0800f0b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f088:	4b67      	ldr	r3, [pc, #412]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f08c:	4a66      	ldr	r2, [pc, #408]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f08e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f092:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f094:	e00f      	b.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f09a:	3308      	adds	r3, #8
 800f09c:	2102      	movs	r1, #2
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f001 ffd4 	bl	801104c <RCCEx_PLL2_Config>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800f0aa:	e004      	b.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f0b2:	e000      	b.n	800f0b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800f0b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10a      	bne.n	800f0d4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800f0be:	4b5a      	ldr	r3, [pc, #360]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f0c2:	f023 0103 	bic.w	r1, r3, #3
 800f0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f0cc:	4a56      	ldr	r2, [pc, #344]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f0ce:	430b      	orrs	r3, r1
 800f0d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f0d2:	e003      	b.n	800f0dc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f0d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800f0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f0f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4313      	orrs	r3, r2
 800f0fa:	f000 809f 	beq.w	800f23c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f0fe:	4b4b      	ldr	r3, [pc, #300]	@ (800f22c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a4a      	ldr	r2, [pc, #296]	@ (800f22c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f108:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f10a:	f7f3 fd9d 	bl	8002c48 <HAL_GetTick>
 800f10e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f112:	e00b      	b.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f114:	f7f3 fd98 	bl	8002c48 <HAL_GetTick>
 800f118:	4602      	mov	r2, r0
 800f11a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f11e:	1ad3      	subs	r3, r2, r3
 800f120:	2b64      	cmp	r3, #100	@ 0x64
 800f122:	d903      	bls.n	800f12c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800f124:	2303      	movs	r3, #3
 800f126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f12a:	e005      	b.n	800f138 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f12c:	4b3f      	ldr	r3, [pc, #252]	@ (800f22c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f134:	2b00      	cmp	r3, #0
 800f136:	d0ed      	beq.n	800f114 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800f138:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d179      	bne.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800f140:	4b39      	ldr	r3, [pc, #228]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f142:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f148:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f14c:	4053      	eors	r3, r2
 800f14e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f152:	2b00      	cmp	r3, #0
 800f154:	d015      	beq.n	800f182 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800f156:	4b34      	ldr	r3, [pc, #208]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f15a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f15e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800f162:	4b31      	ldr	r3, [pc, #196]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f166:	4a30      	ldr	r2, [pc, #192]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f16c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800f16e:	4b2e      	ldr	r3, [pc, #184]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f172:	4a2d      	ldr	r2, [pc, #180]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f178:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800f17a:	4a2b      	ldr	r2, [pc, #172]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f17c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800f180:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800f182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f186:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f18a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f18e:	d118      	bne.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f190:	f7f3 fd5a 	bl	8002c48 <HAL_GetTick>
 800f194:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f198:	e00d      	b.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f19a:	f7f3 fd55 	bl	8002c48 <HAL_GetTick>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800f1a4:	1ad2      	subs	r2, r2, r3
 800f1a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d903      	bls.n	800f1b6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800f1ae:	2303      	movs	r3, #3
 800f1b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800f1b4:	e005      	b.n	800f1c2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f1b6:	4b1c      	ldr	r3, [pc, #112]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1ba:	f003 0302 	and.w	r3, r3, #2
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0eb      	beq.n	800f19a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800f1c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d129      	bne.n	800f21e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f1d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f1da:	d10e      	bne.n	800f1fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800f1dc:	4b12      	ldr	r3, [pc, #72]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1de:	691b      	ldr	r3, [r3, #16]
 800f1e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800f1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f1e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f1ec:	091a      	lsrs	r2, r3, #4
 800f1ee:	4b10      	ldr	r3, [pc, #64]	@ (800f230 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	4a0d      	ldr	r2, [pc, #52]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1f4:	430b      	orrs	r3, r1
 800f1f6:	6113      	str	r3, [r2, #16]
 800f1f8:	e005      	b.n	800f206 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800f1fa:	4b0b      	ldr	r3, [pc, #44]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f1fc:	691b      	ldr	r3, [r3, #16]
 800f1fe:	4a0a      	ldr	r2, [pc, #40]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f200:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f204:	6113      	str	r3, [r2, #16]
 800f206:	4b08      	ldr	r3, [pc, #32]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f208:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f20e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f216:	4a04      	ldr	r2, [pc, #16]	@ (800f228 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800f218:	430b      	orrs	r3, r1
 800f21a:	6713      	str	r3, [r2, #112]	@ 0x70
 800f21c:	e00e      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800f21e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800f226:	e009      	b.n	800f23c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800f228:	58024400 	.word	0x58024400
 800f22c:	58024800 	.word	0x58024800
 800f230:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800f23c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f244:	f002 0301 	and.w	r3, r2, #1
 800f248:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f24c:	2300      	movs	r3, #0
 800f24e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f256:	460b      	mov	r3, r1
 800f258:	4313      	orrs	r3, r2
 800f25a:	f000 8089 	beq.w	800f370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800f25e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f264:	2b28      	cmp	r3, #40	@ 0x28
 800f266:	d86b      	bhi.n	800f340 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800f268:	a201      	add	r2, pc, #4	@ (adr r2, 800f270 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800f26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26e:	bf00      	nop
 800f270:	0800f349 	.word	0x0800f349
 800f274:	0800f341 	.word	0x0800f341
 800f278:	0800f341 	.word	0x0800f341
 800f27c:	0800f341 	.word	0x0800f341
 800f280:	0800f341 	.word	0x0800f341
 800f284:	0800f341 	.word	0x0800f341
 800f288:	0800f341 	.word	0x0800f341
 800f28c:	0800f341 	.word	0x0800f341
 800f290:	0800f315 	.word	0x0800f315
 800f294:	0800f341 	.word	0x0800f341
 800f298:	0800f341 	.word	0x0800f341
 800f29c:	0800f341 	.word	0x0800f341
 800f2a0:	0800f341 	.word	0x0800f341
 800f2a4:	0800f341 	.word	0x0800f341
 800f2a8:	0800f341 	.word	0x0800f341
 800f2ac:	0800f341 	.word	0x0800f341
 800f2b0:	0800f32b 	.word	0x0800f32b
 800f2b4:	0800f341 	.word	0x0800f341
 800f2b8:	0800f341 	.word	0x0800f341
 800f2bc:	0800f341 	.word	0x0800f341
 800f2c0:	0800f341 	.word	0x0800f341
 800f2c4:	0800f341 	.word	0x0800f341
 800f2c8:	0800f341 	.word	0x0800f341
 800f2cc:	0800f341 	.word	0x0800f341
 800f2d0:	0800f349 	.word	0x0800f349
 800f2d4:	0800f341 	.word	0x0800f341
 800f2d8:	0800f341 	.word	0x0800f341
 800f2dc:	0800f341 	.word	0x0800f341
 800f2e0:	0800f341 	.word	0x0800f341
 800f2e4:	0800f341 	.word	0x0800f341
 800f2e8:	0800f341 	.word	0x0800f341
 800f2ec:	0800f341 	.word	0x0800f341
 800f2f0:	0800f349 	.word	0x0800f349
 800f2f4:	0800f341 	.word	0x0800f341
 800f2f8:	0800f341 	.word	0x0800f341
 800f2fc:	0800f341 	.word	0x0800f341
 800f300:	0800f341 	.word	0x0800f341
 800f304:	0800f341 	.word	0x0800f341
 800f308:	0800f341 	.word	0x0800f341
 800f30c:	0800f341 	.word	0x0800f341
 800f310:	0800f349 	.word	0x0800f349
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f318:	3308      	adds	r3, #8
 800f31a:	2101      	movs	r1, #1
 800f31c:	4618      	mov	r0, r3
 800f31e:	f001 fe95 	bl	801104c <RCCEx_PLL2_Config>
 800f322:	4603      	mov	r3, r0
 800f324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f328:	e00f      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f32e:	3328      	adds	r3, #40	@ 0x28
 800f330:	2101      	movs	r1, #1
 800f332:	4618      	mov	r0, r3
 800f334:	f001 ff3c 	bl	80111b0 <RCCEx_PLL3_Config>
 800f338:	4603      	mov	r3, r0
 800f33a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800f33e:	e004      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f346:	e000      	b.n	800f34a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800f348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f34a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d10a      	bne.n	800f368 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800f352:	4bbf      	ldr	r3, [pc, #764]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f356:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800f35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f35e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f360:	4abb      	ldr	r2, [pc, #748]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f362:	430b      	orrs	r3, r1
 800f364:	6553      	str	r3, [r2, #84]	@ 0x54
 800f366:	e003      	b.n	800f370 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f36c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800f370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f378:	f002 0302 	and.w	r3, r2, #2
 800f37c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f380:	2300      	movs	r3, #0
 800f382:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f386:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800f38a:	460b      	mov	r3, r1
 800f38c:	4313      	orrs	r3, r2
 800f38e:	d041      	beq.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800f390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f396:	2b05      	cmp	r3, #5
 800f398:	d824      	bhi.n	800f3e4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800f39a:	a201      	add	r2, pc, #4	@ (adr r2, 800f3a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f3ed 	.word	0x0800f3ed
 800f3a4:	0800f3b9 	.word	0x0800f3b9
 800f3a8:	0800f3cf 	.word	0x0800f3cf
 800f3ac:	0800f3ed 	.word	0x0800f3ed
 800f3b0:	0800f3ed 	.word	0x0800f3ed
 800f3b4:	0800f3ed 	.word	0x0800f3ed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f3b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3bc:	3308      	adds	r3, #8
 800f3be:	2101      	movs	r1, #1
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f001 fe43 	bl	801104c <RCCEx_PLL2_Config>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3cc:	e00f      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f3ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f3d2:	3328      	adds	r3, #40	@ 0x28
 800f3d4:	2101      	movs	r1, #1
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f001 feea 	bl	80111b0 <RCCEx_PLL3_Config>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800f3e2:	e004      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f3ea:	e000      	b.n	800f3ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800f3ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f3ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d10a      	bne.n	800f40c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800f3f6:	4b96      	ldr	r3, [pc, #600]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f3f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f3fa:	f023 0107 	bic.w	r1, r3, #7
 800f3fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f404:	4a92      	ldr	r2, [pc, #584]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f406:	430b      	orrs	r3, r1
 800f408:	6553      	str	r3, [r2, #84]	@ 0x54
 800f40a:	e003      	b.n	800f414 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f40c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41c:	f002 0304 	and.w	r3, r2, #4
 800f420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f424:	2300      	movs	r3, #0
 800f426:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f42a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800f42e:	460b      	mov	r3, r1
 800f430:	4313      	orrs	r3, r2
 800f432:	d044      	beq.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800f434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f43c:	2b05      	cmp	r3, #5
 800f43e:	d825      	bhi.n	800f48c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800f440:	a201      	add	r2, pc, #4	@ (adr r2, 800f448 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800f442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f446:	bf00      	nop
 800f448:	0800f495 	.word	0x0800f495
 800f44c:	0800f461 	.word	0x0800f461
 800f450:	0800f477 	.word	0x0800f477
 800f454:	0800f495 	.word	0x0800f495
 800f458:	0800f495 	.word	0x0800f495
 800f45c:	0800f495 	.word	0x0800f495
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800f460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f464:	3308      	adds	r3, #8
 800f466:	2101      	movs	r1, #1
 800f468:	4618      	mov	r0, r3
 800f46a:	f001 fdef 	bl	801104c <RCCEx_PLL2_Config>
 800f46e:	4603      	mov	r3, r0
 800f470:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f474:	e00f      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f47a:	3328      	adds	r3, #40	@ 0x28
 800f47c:	2101      	movs	r1, #1
 800f47e:	4618      	mov	r0, r3
 800f480:	f001 fe96 	bl	80111b0 <RCCEx_PLL3_Config>
 800f484:	4603      	mov	r3, r0
 800f486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800f48a:	e004      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f48c:	2301      	movs	r3, #1
 800f48e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f492:	e000      	b.n	800f496 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800f494:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d10b      	bne.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f49e:	4b6c      	ldr	r3, [pc, #432]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4a2:	f023 0107 	bic.w	r1, r3, #7
 800f4a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f4ae:	4a68      	ldr	r2, [pc, #416]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f4b0:	430b      	orrs	r3, r1
 800f4b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800f4b4:	e003      	b.n	800f4be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f4b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f4ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800f4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c6:	f002 0320 	and.w	r3, r2, #32
 800f4ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f4d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	d055      	beq.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800f4de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f4e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4ea:	d033      	beq.n	800f554 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800f4ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f4f0:	d82c      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4f6:	d02f      	beq.n	800f558 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800f4f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4fc:	d826      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f4fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f502:	d02b      	beq.n	800f55c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800f504:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800f508:	d820      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f50a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f50e:	d012      	beq.n	800f536 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f510:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800f514:	d81a      	bhi.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800f516:	2b00      	cmp	r3, #0
 800f518:	d022      	beq.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800f51a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f51e:	d115      	bne.n	800f54c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f524:	3308      	adds	r3, #8
 800f526:	2100      	movs	r1, #0
 800f528:	4618      	mov	r0, r3
 800f52a:	f001 fd8f 	bl	801104c <RCCEx_PLL2_Config>
 800f52e:	4603      	mov	r3, r0
 800f530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f534:	e015      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f53a:	3328      	adds	r3, #40	@ 0x28
 800f53c:	2102      	movs	r1, #2
 800f53e:	4618      	mov	r0, r3
 800f540:	f001 fe36 	bl	80111b0 <RCCEx_PLL3_Config>
 800f544:	4603      	mov	r3, r0
 800f546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800f54a:	e00a      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f54c:	2301      	movs	r3, #1
 800f54e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f552:	e006      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f554:	bf00      	nop
 800f556:	e004      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f558:	bf00      	nop
 800f55a:	e002      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f55c:	bf00      	nop
 800f55e:	e000      	b.n	800f562 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800f560:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f566:	2b00      	cmp	r3, #0
 800f568:	d10b      	bne.n	800f582 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800f56a:	4b39      	ldr	r3, [pc, #228]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f56e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800f572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f57a:	4a35      	ldr	r2, [pc, #212]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f57c:	430b      	orrs	r3, r1
 800f57e:	6553      	str	r3, [r2, #84]	@ 0x54
 800f580:	e003      	b.n	800f58a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800f58a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f592:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800f596:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f59a:	2300      	movs	r3, #0
 800f59c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f5a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800f5a4:	460b      	mov	r3, r1
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	d058      	beq.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800f5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f5b6:	d033      	beq.n	800f620 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f5b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800f5bc:	d82c      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5c2:	d02f      	beq.n	800f624 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800f5c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5c8:	d826      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5ce:	d02b      	beq.n	800f628 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800f5d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5d4:	d820      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5da:	d012      	beq.n	800f602 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800f5dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f5e0:	d81a      	bhi.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d022      	beq.n	800f62c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800f5e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f5ea:	d115      	bne.n	800f618 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f5ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f5f0:	3308      	adds	r3, #8
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f001 fd29 	bl	801104c <RCCEx_PLL2_Config>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f600:	e015      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f606:	3328      	adds	r3, #40	@ 0x28
 800f608:	2102      	movs	r1, #2
 800f60a:	4618      	mov	r0, r3
 800f60c:	f001 fdd0 	bl	80111b0 <RCCEx_PLL3_Config>
 800f610:	4603      	mov	r3, r0
 800f612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800f616:	e00a      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f61e:	e006      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f620:	bf00      	nop
 800f622:	e004      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f624:	bf00      	nop
 800f626:	e002      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f628:	bf00      	nop
 800f62a:	e000      	b.n	800f62e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800f62c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f62e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f632:	2b00      	cmp	r3, #0
 800f634:	d10e      	bne.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800f636:	4b06      	ldr	r3, [pc, #24]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f63a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800f63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f642:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f646:	4a02      	ldr	r2, [pc, #8]	@ (800f650 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800f648:	430b      	orrs	r3, r1
 800f64a:	6593      	str	r3, [r2, #88]	@ 0x58
 800f64c:	e006      	b.n	800f65c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800f64e:	bf00      	nop
 800f650:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f658:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800f65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800f668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f66c:	2300      	movs	r3, #0
 800f66e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f672:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800f676:	460b      	mov	r3, r1
 800f678:	4313      	orrs	r3, r2
 800f67a:	d055      	beq.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800f67c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f684:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f688:	d033      	beq.n	800f6f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800f68a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800f68e:	d82c      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f694:	d02f      	beq.n	800f6f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800f696:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f69a:	d826      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f69c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f6a0:	d02b      	beq.n	800f6fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800f6a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800f6a6:	d820      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f6ac:	d012      	beq.n	800f6d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800f6ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f6b2:	d81a      	bhi.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d022      	beq.n	800f6fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800f6b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f6bc:	d115      	bne.n	800f6ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f6be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6c2:	3308      	adds	r3, #8
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f001 fcc0 	bl	801104c <RCCEx_PLL2_Config>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6d2:	e015      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f6d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f6d8:	3328      	adds	r3, #40	@ 0x28
 800f6da:	2102      	movs	r1, #2
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f001 fd67 	bl	80111b0 <RCCEx_PLL3_Config>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800f6e8:	e00a      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f6f0:	e006      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6f2:	bf00      	nop
 800f6f4:	e004      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6f6:	bf00      	nop
 800f6f8:	e002      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6fa:	bf00      	nop
 800f6fc:	e000      	b.n	800f700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800f6fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10b      	bne.n	800f720 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800f708:	4ba1      	ldr	r3, [pc, #644]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f70a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f70c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800f710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f714:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f718:	4a9d      	ldr	r2, [pc, #628]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f71a:	430b      	orrs	r3, r1
 800f71c:	6593      	str	r3, [r2, #88]	@ 0x58
 800f71e:	e003      	b.n	800f728 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800f728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	f002 0308 	and.w	r3, r2, #8
 800f734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f738:	2300      	movs	r3, #0
 800f73a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f73e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800f742:	460b      	mov	r3, r1
 800f744:	4313      	orrs	r3, r2
 800f746:	d01e      	beq.n	800f786 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800f748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f754:	d10c      	bne.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f75a:	3328      	adds	r3, #40	@ 0x28
 800f75c:	2102      	movs	r1, #2
 800f75e:	4618      	mov	r0, r3
 800f760:	f001 fd26 	bl	80111b0 <RCCEx_PLL3_Config>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	d002      	beq.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800f770:	4b87      	ldr	r3, [pc, #540]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f774:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f77c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f780:	4a83      	ldr	r2, [pc, #524]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f782:	430b      	orrs	r3, r1
 800f784:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800f786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f78e:	f002 0310 	and.w	r3, r2, #16
 800f792:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f796:	2300      	movs	r3, #0
 800f798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f79c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800f7a0:	460b      	mov	r3, r1
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	d01e      	beq.n	800f7e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800f7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f7b2:	d10c      	bne.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f7b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7b8:	3328      	adds	r3, #40	@ 0x28
 800f7ba:	2102      	movs	r1, #2
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f001 fcf7 	bl	80111b0 <RCCEx_PLL3_Config>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d002      	beq.n	800f7ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800f7ce:	4b70      	ldr	r3, [pc, #448]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f7d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800f7d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f7de:	4a6c      	ldr	r2, [pc, #432]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800f7e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800f7f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f7fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800f7fe:	460b      	mov	r3, r1
 800f800:	4313      	orrs	r3, r2
 800f802:	d03e      	beq.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800f804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f80c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f810:	d022      	beq.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800f812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800f816:	d81b      	bhi.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d003      	beq.n	800f824 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800f81c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f820:	d00b      	beq.n	800f83a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800f822:	e015      	b.n	800f850 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800f824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f828:	3308      	adds	r3, #8
 800f82a:	2100      	movs	r1, #0
 800f82c:	4618      	mov	r0, r3
 800f82e:	f001 fc0d 	bl	801104c <RCCEx_PLL2_Config>
 800f832:	4603      	mov	r3, r0
 800f834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f838:	e00f      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800f83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f83e:	3328      	adds	r3, #40	@ 0x28
 800f840:	2102      	movs	r1, #2
 800f842:	4618      	mov	r0, r3
 800f844:	f001 fcb4 	bl	80111b0 <RCCEx_PLL3_Config>
 800f848:	4603      	mov	r3, r0
 800f84a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800f84e:	e004      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f850:	2301      	movs	r3, #1
 800f852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f856:	e000      	b.n	800f85a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800f858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f85a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d10b      	bne.n	800f87a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f862:	4b4b      	ldr	r3, [pc, #300]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f866:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800f86a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f86e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f872:	4a47      	ldr	r2, [pc, #284]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f874:	430b      	orrs	r3, r1
 800f876:	6593      	str	r3, [r2, #88]	@ 0x58
 800f878:	e003      	b.n	800f882 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f87a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f87e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800f88e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f890:	2300      	movs	r3, #0
 800f892:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f894:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800f898:	460b      	mov	r3, r1
 800f89a:	4313      	orrs	r3, r2
 800f89c:	d03b      	beq.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800f89e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f8a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f8aa:	d01f      	beq.n	800f8ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800f8ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800f8b0:	d818      	bhi.n	800f8e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800f8b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8b6:	d003      	beq.n	800f8c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800f8b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f8bc:	d007      	beq.n	800f8ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800f8be:	e011      	b.n	800f8e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f8c0:	4b33      	ldr	r3, [pc, #204]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c4:	4a32      	ldr	r2, [pc, #200]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f8ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8cc:	e00f      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800f8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f8d2:	3328      	adds	r3, #40	@ 0x28
 800f8d4:	2101      	movs	r1, #1
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f001 fc6a 	bl	80111b0 <RCCEx_PLL3_Config>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800f8e2:	e004      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f8ea:	e000      	b.n	800f8ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800f8ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f8ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d10b      	bne.n	800f90e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f8f6:	4b26      	ldr	r3, [pc, #152]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800f8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f906:	4a22      	ldr	r2, [pc, #136]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f908:	430b      	orrs	r3, r1
 800f90a:	6553      	str	r3, [r2, #84]	@ 0x54
 800f90c:	e003      	b.n	800f916 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f90e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800f922:	673b      	str	r3, [r7, #112]	@ 0x70
 800f924:	2300      	movs	r3, #0
 800f926:	677b      	str	r3, [r7, #116]	@ 0x74
 800f928:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800f92c:	460b      	mov	r3, r1
 800f92e:	4313      	orrs	r3, r2
 800f930:	d034      	beq.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800f932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d003      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800f93c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f940:	d007      	beq.n	800f952 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800f942:	e011      	b.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f944:	4b12      	ldr	r3, [pc, #72]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f948:	4a11      	ldr	r2, [pc, #68]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f94a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f94e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f950:	e00e      	b.n	800f970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800f952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f956:	3308      	adds	r3, #8
 800f958:	2102      	movs	r1, #2
 800f95a:	4618      	mov	r0, r3
 800f95c:	f001 fb76 	bl	801104c <RCCEx_PLL2_Config>
 800f960:	4603      	mov	r3, r0
 800f962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800f966:	e003      	b.n	800f970 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800f968:	2301      	movs	r3, #1
 800f96a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800f96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f970:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f974:	2b00      	cmp	r3, #0
 800f976:	d10d      	bne.n	800f994 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f978:	4b05      	ldr	r3, [pc, #20]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f97a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f97c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f986:	4a02      	ldr	r2, [pc, #8]	@ (800f990 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800f988:	430b      	orrs	r3, r1
 800f98a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800f98c:	e006      	b.n	800f99c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800f98e:	bf00      	nop
 800f990:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f994:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800f998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800f9a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f9ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	d00c      	beq.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800f9b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9bc:	3328      	adds	r3, #40	@ 0x28
 800f9be:	2102      	movs	r1, #2
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f001 fbf5 	bl	80111b0 <RCCEx_PLL3_Config>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800f9de:	663b      	str	r3, [r7, #96]	@ 0x60
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800f9e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	4313      	orrs	r3, r2
 800f9ec:	d038      	beq.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800f9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800f9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f9fa:	d018      	beq.n	800fa2e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800f9fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fa00:	d811      	bhi.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fa02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa06:	d014      	beq.n	800fa32 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800fa08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fa0c:	d80b      	bhi.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d011      	beq.n	800fa36 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800fa12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fa16:	d106      	bne.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa18:	4bc3      	ldr	r3, [pc, #780]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa1c:	4ac2      	ldr	r2, [pc, #776]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fa22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800fa24:	e008      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800fa2c:	e004      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa2e:	bf00      	nop
 800fa30:	e002      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa32:	bf00      	nop
 800fa34:	e000      	b.n	800fa38 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800fa36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800fa38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d10b      	bne.n	800fa58 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fa40:	4bb9      	ldr	r3, [pc, #740]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800fa48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa50:	4ab5      	ldr	r2, [pc, #724]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa52:	430b      	orrs	r3, r1
 800fa54:	6553      	str	r3, [r2, #84]	@ 0x54
 800fa56:	e003      	b.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fa5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800fa60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa68:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800fa6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa6e:	2300      	movs	r3, #0
 800fa70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fa72:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800fa76:	460b      	mov	r3, r1
 800fa78:	4313      	orrs	r3, r2
 800fa7a:	d009      	beq.n	800fa90 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800fa7c:	4baa      	ldr	r3, [pc, #680]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa80:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800fa84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa8a:	4aa7      	ldr	r2, [pc, #668]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fa8c:	430b      	orrs	r3, r1
 800fa8e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800fa90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa98:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800fa9c:	653b      	str	r3, [r7, #80]	@ 0x50
 800fa9e:	2300      	movs	r3, #0
 800faa0:	657b      	str	r3, [r7, #84]	@ 0x54
 800faa2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800faa6:	460b      	mov	r3, r1
 800faa8:	4313      	orrs	r3, r2
 800faaa:	d00a      	beq.n	800fac2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800faac:	4b9e      	ldr	r3, [pc, #632]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faae:	691b      	ldr	r3, [r3, #16]
 800fab0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800fab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fab8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fabc:	4a9a      	ldr	r2, [pc, #616]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fabe:	430b      	orrs	r3, r1
 800fac0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800fac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800face:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fad0:	2300      	movs	r3, #0
 800fad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fad4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800fad8:	460b      	mov	r3, r1
 800fada:	4313      	orrs	r3, r2
 800fadc:	d009      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800fade:	4b92      	ldr	r3, [pc, #584]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fae0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fae2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800fae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800faec:	4a8e      	ldr	r2, [pc, #568]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800faee:	430b      	orrs	r3, r1
 800faf0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800faf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800faf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800fafe:	643b      	str	r3, [r7, #64]	@ 0x40
 800fb00:	2300      	movs	r3, #0
 800fb02:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb04:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800fb08:	460b      	mov	r3, r1
 800fb0a:	4313      	orrs	r3, r2
 800fb0c:	d00e      	beq.n	800fb2c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800fb0e:	4b86      	ldr	r3, [pc, #536]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb10:	691b      	ldr	r3, [r3, #16]
 800fb12:	4a85      	ldr	r2, [pc, #532]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb18:	6113      	str	r3, [r2, #16]
 800fb1a:	4b83      	ldr	r3, [pc, #524]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb1c:	6919      	ldr	r1, [r3, #16]
 800fb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb22:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fb26:	4a80      	ldr	r2, [pc, #512]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb28:	430b      	orrs	r3, r1
 800fb2a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800fb2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb34:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800fb38:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fb3e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800fb42:	460b      	mov	r3, r1
 800fb44:	4313      	orrs	r3, r2
 800fb46:	d009      	beq.n	800fb5c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800fb48:	4b77      	ldr	r3, [pc, #476]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fb4c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800fb50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb56:	4a74      	ldr	r2, [pc, #464]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb58:	430b      	orrs	r3, r1
 800fb5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800fb5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb64:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800fb68:	633b      	str	r3, [r7, #48]	@ 0x30
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800fb72:	460b      	mov	r3, r1
 800fb74:	4313      	orrs	r3, r2
 800fb76:	d00a      	beq.n	800fb8e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800fb78:	4b6b      	ldr	r3, [pc, #428]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb7c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800fb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fb88:	4a67      	ldr	r2, [pc, #412]	@ (800fd28 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800fb8a:	430b      	orrs	r3, r1
 800fb8c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800fb8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	2100      	movs	r1, #0
 800fb98:	62b9      	str	r1, [r7, #40]	@ 0x28
 800fb9a:	f003 0301 	and.w	r3, r3, #1
 800fb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fba0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800fba4:	460b      	mov	r3, r1
 800fba6:	4313      	orrs	r3, r2
 800fba8:	d011      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800fbaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbae:	3308      	adds	r3, #8
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f001 fa4a 	bl	801104c <RCCEx_PLL2_Config>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fbbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d003      	beq.n	800fbce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fbca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800fbce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	6239      	str	r1, [r7, #32]
 800fbda:	f003 0302 	and.w	r3, r3, #2
 800fbde:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbe0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	d011      	beq.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800fbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fbee:	3308      	adds	r3, #8
 800fbf0:	2101      	movs	r1, #1
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f001 fa2a 	bl	801104c <RCCEx_PLL2_Config>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fbfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d003      	beq.n	800fc0e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800fc0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	2100      	movs	r1, #0
 800fc18:	61b9      	str	r1, [r7, #24]
 800fc1a:	f003 0304 	and.w	r3, r3, #4
 800fc1e:	61fb      	str	r3, [r7, #28]
 800fc20:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800fc24:	460b      	mov	r3, r1
 800fc26:	4313      	orrs	r3, r2
 800fc28:	d011      	beq.n	800fc4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800fc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc2e:	3308      	adds	r3, #8
 800fc30:	2102      	movs	r1, #2
 800fc32:	4618      	mov	r0, r3
 800fc34:	f001 fa0a 	bl	801104c <RCCEx_PLL2_Config>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fc3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d003      	beq.n	800fc4e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800fc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	2100      	movs	r1, #0
 800fc58:	6139      	str	r1, [r7, #16]
 800fc5a:	f003 0308 	and.w	r3, r3, #8
 800fc5e:	617b      	str	r3, [r7, #20]
 800fc60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fc64:	460b      	mov	r3, r1
 800fc66:	4313      	orrs	r3, r2
 800fc68:	d011      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800fc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc6e:	3328      	adds	r3, #40	@ 0x28
 800fc70:	2100      	movs	r1, #0
 800fc72:	4618      	mov	r0, r3
 800fc74:	f001 fa9c 	bl	80111b0 <RCCEx_PLL3_Config>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800fc7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d003      	beq.n	800fc8e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fc8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800fc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc96:	2100      	movs	r1, #0
 800fc98:	60b9      	str	r1, [r7, #8]
 800fc9a:	f003 0310 	and.w	r3, r3, #16
 800fc9e:	60fb      	str	r3, [r7, #12]
 800fca0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800fca4:	460b      	mov	r3, r1
 800fca6:	4313      	orrs	r3, r2
 800fca8:	d011      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800fcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcae:	3328      	adds	r3, #40	@ 0x28
 800fcb0:	2101      	movs	r1, #1
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f001 fa7c 	bl	80111b0 <RCCEx_PLL3_Config>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fcbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d003      	beq.n	800fcce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fcca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800fcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	6039      	str	r1, [r7, #0]
 800fcda:	f003 0320 	and.w	r3, r3, #32
 800fcde:	607b      	str	r3, [r7, #4]
 800fce0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800fce4:	460b      	mov	r3, r1
 800fce6:	4313      	orrs	r3, r2
 800fce8:	d011      	beq.n	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800fcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800fcee:	3328      	adds	r3, #40	@ 0x28
 800fcf0:	2102      	movs	r1, #2
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f001 fa5c 	bl	80111b0 <RCCEx_PLL3_Config>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800fcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800fd0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800fd0e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d101      	bne.n	800fd1a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800fd16:	2300      	movs	r3, #0
 800fd18:	e000      	b.n	800fd1c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800fd22:	46bd      	mov	sp, r7
 800fd24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fd28:	58024400 	.word	0x58024400

0800fd2c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b090      	sub	sp, #64	@ 0x40
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800fd36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd3a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800fd3e:	430b      	orrs	r3, r1
 800fd40:	f040 8094 	bne.w	800fe6c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800fd44:	4b9e      	ldr	r3, [pc, #632]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd48:	f003 0307 	and.w	r3, r3, #7
 800fd4c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd50:	2b04      	cmp	r3, #4
 800fd52:	f200 8087 	bhi.w	800fe64 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800fd56:	a201      	add	r2, pc, #4	@ (adr r2, 800fd5c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800fd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd5c:	0800fd71 	.word	0x0800fd71
 800fd60:	0800fd99 	.word	0x0800fd99
 800fd64:	0800fdc1 	.word	0x0800fdc1
 800fd68:	0800fe5d 	.word	0x0800fe5d
 800fd6c:	0800fde9 	.word	0x0800fde9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fd70:	4b93      	ldr	r3, [pc, #588]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fd7c:	d108      	bne.n	800fd90 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fd7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd82:	4618      	mov	r0, r3
 800fd84:	f001 f810 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fd8c:	f000 bd45 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fd90:	2300      	movs	r3, #0
 800fd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd94:	f000 bd41 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fd98:	4b89      	ldr	r3, [pc, #548]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fda0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fda4:	d108      	bne.n	800fdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fda6:	f107 0318 	add.w	r3, r7, #24
 800fdaa:	4618      	mov	r0, r3
 800fdac:	f000 fd54 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800fdb0:	69bb      	ldr	r3, [r7, #24]
 800fdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fdb4:	f000 bd31 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fdbc:	f000 bd2d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800fdc0:	4b7f      	ldr	r3, [pc, #508]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fdc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fdcc:	d108      	bne.n	800fde0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fdce:	f107 030c 	add.w	r3, r7, #12
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f000 fe94 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fddc:	f000 bd1d 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fde0:	2300      	movs	r3, #0
 800fde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fde4:	f000 bd19 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800fde8:	4b75      	ldr	r3, [pc, #468]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fdf0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800fdf2:	4b73      	ldr	r3, [pc, #460]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f003 0304 	and.w	r3, r3, #4
 800fdfa:	2b04      	cmp	r3, #4
 800fdfc:	d10c      	bne.n	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800fdfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d109      	bne.n	800fe18 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe04:	4b6e      	ldr	r3, [pc, #440]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	08db      	lsrs	r3, r3, #3
 800fe0a:	f003 0303 	and.w	r3, r3, #3
 800fe0e:	4a6d      	ldr	r2, [pc, #436]	@ (800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800fe10:	fa22 f303 	lsr.w	r3, r2, r3
 800fe14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe16:	e01f      	b.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800fe18:	4b69      	ldr	r3, [pc, #420]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fe20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe24:	d106      	bne.n	800fe34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800fe26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe2c:	d102      	bne.n	800fe34 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800fe2e:	4b66      	ldr	r3, [pc, #408]	@ (800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800fe30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe32:	e011      	b.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800fe34:	4b62      	ldr	r3, [pc, #392]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fe3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800fe40:	d106      	bne.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800fe42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fe48:	d102      	bne.n	800fe50 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800fe4a:	4b60      	ldr	r3, [pc, #384]	@ (800ffcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800fe4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800fe4e:	e003      	b.n	800fe58 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800fe50:	2300      	movs	r3, #0
 800fe52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800fe54:	f000 bce1 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800fe58:	f000 bcdf 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800fe5c:	4b5c      	ldr	r3, [pc, #368]	@ (800ffd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800fe5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe60:	f000 bcdb 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fe64:	2300      	movs	r3, #0
 800fe66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fe68:	f000 bcd7 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800fe6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe70:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800fe74:	430b      	orrs	r3, r1
 800fe76:	f040 80ad 	bne.w	800ffd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800fe7a:	4b51      	ldr	r3, [pc, #324]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fe7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe7e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800fe82:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800fe84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe8a:	d056      	beq.n	800ff3a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800fe8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe92:	f200 8090 	bhi.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fe96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe98:	2bc0      	cmp	r3, #192	@ 0xc0
 800fe9a:	f000 8088 	beq.w	800ffae <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800fe9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea0:	2bc0      	cmp	r3, #192	@ 0xc0
 800fea2:	f200 8088 	bhi.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800fea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fea8:	2b80      	cmp	r3, #128	@ 0x80
 800feaa:	d032      	beq.n	800ff12 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800feac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feae:	2b80      	cmp	r3, #128	@ 0x80
 800feb0:	f200 8081 	bhi.w	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800feb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d003      	beq.n	800fec2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800feba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800febc:	2b40      	cmp	r3, #64	@ 0x40
 800febe:	d014      	beq.n	800feea <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800fec0:	e079      	b.n	800ffb6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fec2:	4b3f      	ldr	r3, [pc, #252]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800feca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800fece:	d108      	bne.n	800fee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fed4:	4618      	mov	r0, r3
 800fed6:	f000 ff67 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800feda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fedc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fede:	f000 bc9c 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fee2:	2300      	movs	r3, #0
 800fee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fee6:	f000 bc98 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800feea:	4b35      	ldr	r3, [pc, #212]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800fef6:	d108      	bne.n	800ff0a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fef8:	f107 0318 	add.w	r3, r7, #24
 800fefc:	4618      	mov	r0, r3
 800fefe:	f000 fcab 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff06:	f000 bc88 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff0e:	f000 bc84 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ff12:	4b2b      	ldr	r3, [pc, #172]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ff1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff1e:	d108      	bne.n	800ff32 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff20:	f107 030c 	add.w	r3, r7, #12
 800ff24:	4618      	mov	r0, r3
 800ff26:	f000 fdeb 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ff2e:	f000 bc74 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ff32:	2300      	movs	r3, #0
 800ff34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff36:	f000 bc70 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ff3a:	4b21      	ldr	r3, [pc, #132]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ff42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ff44:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f003 0304 	and.w	r3, r3, #4
 800ff4c:	2b04      	cmp	r3, #4
 800ff4e:	d10c      	bne.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ff50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d109      	bne.n	800ff6a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ff56:	4b1a      	ldr	r3, [pc, #104]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	08db      	lsrs	r3, r3, #3
 800ff5c:	f003 0303 	and.w	r3, r3, #3
 800ff60:	4a18      	ldr	r2, [pc, #96]	@ (800ffc4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ff62:	fa22 f303 	lsr.w	r3, r2, r3
 800ff66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff68:	e01f      	b.n	800ffaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ff6a:	4b15      	ldr	r3, [pc, #84]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff76:	d106      	bne.n	800ff86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ff78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff7e:	d102      	bne.n	800ff86 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ff80:	4b11      	ldr	r3, [pc, #68]	@ (800ffc8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ff82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff84:	e011      	b.n	800ffaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ff86:	4b0e      	ldr	r3, [pc, #56]	@ (800ffc0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ff8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ff92:	d106      	bne.n	800ffa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ff94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ff9a:	d102      	bne.n	800ffa2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ff9c:	4b0b      	ldr	r3, [pc, #44]	@ (800ffcc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ff9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffa0:	e003      	b.n	800ffaa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ffa6:	f000 bc38 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffaa:	f000 bc36 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ffae:	4b08      	ldr	r3, [pc, #32]	@ (800ffd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ffb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffb2:	f000 bc32 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffba:	f000 bc2e 	b.w	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ffbe:	bf00      	nop
 800ffc0:	58024400 	.word	0x58024400
 800ffc4:	03d09000 	.word	0x03d09000
 800ffc8:	003d0900 	.word	0x003d0900
 800ffcc:	017d7840 	.word	0x017d7840
 800ffd0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ffd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffd8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ffdc:	430b      	orrs	r3, r1
 800ffde:	f040 809c 	bne.w	801011a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ffe2:	4b9e      	ldr	r3, [pc, #632]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ffe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ffe6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ffea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ffec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fff2:	d054      	beq.n	801009e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800fff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fff6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fffa:	f200 808b 	bhi.w	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800fffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010000:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010004:	f000 8083 	beq.w	801010e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8010008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801000a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801000e:	f200 8081 	bhi.w	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010018:	d02f      	beq.n	801007a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801001a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801001c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010020:	d878      	bhi.n	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8010022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010024:	2b00      	cmp	r3, #0
 8010026:	d004      	beq.n	8010032 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8010028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801002a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801002e:	d012      	beq.n	8010056 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8010030:	e070      	b.n	8010114 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010032:	4b8a      	ldr	r3, [pc, #552]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801003a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801003e:	d107      	bne.n	8010050 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010044:	4618      	mov	r0, r3
 8010046:	f000 feaf 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801004a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801004c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801004e:	e3e4      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010050:	2300      	movs	r3, #0
 8010052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010054:	e3e1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010056:	4b81      	ldr	r3, [pc, #516]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801005e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010062:	d107      	bne.n	8010074 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010064:	f107 0318 	add.w	r3, r7, #24
 8010068:	4618      	mov	r0, r3
 801006a:	f000 fbf5 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010072:	e3d2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010078:	e3cf      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801007a:	4b78      	ldr	r3, [pc, #480]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010082:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010086:	d107      	bne.n	8010098 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010088:	f107 030c 	add.w	r3, r7, #12
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fd37 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010096:	e3c0      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010098:	2300      	movs	r3, #0
 801009a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801009c:	e3bd      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801009e:	4b6f      	ldr	r3, [pc, #444]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80100a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80100a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80100a8:	4b6c      	ldr	r3, [pc, #432]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	2b04      	cmp	r3, #4
 80100b2:	d10c      	bne.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80100b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d109      	bne.n	80100ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80100ba:	4b68      	ldr	r3, [pc, #416]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	08db      	lsrs	r3, r3, #3
 80100c0:	f003 0303 	and.w	r3, r3, #3
 80100c4:	4a66      	ldr	r2, [pc, #408]	@ (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80100c6:	fa22 f303 	lsr.w	r3, r2, r3
 80100ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100cc:	e01e      	b.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80100ce:	4b63      	ldr	r3, [pc, #396]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80100d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80100da:	d106      	bne.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80100dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80100e2:	d102      	bne.n	80100ea <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80100e4:	4b5f      	ldr	r3, [pc, #380]	@ (8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80100e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80100e8:	e010      	b.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80100ea:	4b5c      	ldr	r3, [pc, #368]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80100f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80100f6:	d106      	bne.n	8010106 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80100f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80100fe:	d102      	bne.n	8010106 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010100:	4b59      	ldr	r3, [pc, #356]	@ (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8010102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010104:	e002      	b.n	801010c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8010106:	2300      	movs	r3, #0
 8010108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801010a:	e386      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801010c:	e385      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801010e:	4b57      	ldr	r3, [pc, #348]	@ (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010112:	e382      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8010114:	2300      	movs	r3, #0
 8010116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010118:	e37f      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801011a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801011e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8010122:	430b      	orrs	r3, r1
 8010124:	f040 80a7 	bne.w	8010276 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8010128:	4b4c      	ldr	r3, [pc, #304]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801012a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801012c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8010130:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8010132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010138:	d055      	beq.n	80101e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801013a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801013c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010140:	f200 8096 	bhi.w	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010146:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801014a:	f000 8084 	beq.w	8010256 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801014e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010150:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010154:	f200 808c 	bhi.w	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8010158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801015a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801015e:	d030      	beq.n	80101c2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8010160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010166:	f200 8083 	bhi.w	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801016a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801016c:	2b00      	cmp	r3, #0
 801016e:	d004      	beq.n	801017a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010176:	d012      	beq.n	801019e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8010178:	e07a      	b.n	8010270 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801017a:	4b38      	ldr	r3, [pc, #224]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8010182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010186:	d107      	bne.n	8010198 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801018c:	4618      	mov	r0, r3
 801018e:	f000 fe0b 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010194:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010196:	e340      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010198:	2300      	movs	r3, #0
 801019a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801019c:	e33d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801019e:	4b2f      	ldr	r3, [pc, #188]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80101a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80101aa:	d107      	bne.n	80101bc <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101ac:	f107 0318 	add.w	r3, r7, #24
 80101b0:	4618      	mov	r0, r3
 80101b2:	f000 fb51 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101ba:	e32e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101bc:	2300      	movs	r3, #0
 80101be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101c0:	e32b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80101c2:	4b26      	ldr	r3, [pc, #152]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80101ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80101ce:	d107      	bne.n	80101e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101d0:	f107 030c 	add.w	r3, r7, #12
 80101d4:	4618      	mov	r0, r3
 80101d6:	f000 fc93 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80101de:	e31c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80101e0:	2300      	movs	r3, #0
 80101e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101e4:	e319      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80101e6:	4b1d      	ldr	r3, [pc, #116]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80101ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80101ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80101f0:	4b1a      	ldr	r3, [pc, #104]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f003 0304 	and.w	r3, r3, #4
 80101f8:	2b04      	cmp	r3, #4
 80101fa:	d10c      	bne.n	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80101fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d109      	bne.n	8010216 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010202:	4b16      	ldr	r3, [pc, #88]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	08db      	lsrs	r3, r3, #3
 8010208:	f003 0303 	and.w	r3, r3, #3
 801020c:	4a14      	ldr	r2, [pc, #80]	@ (8010260 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801020e:	fa22 f303 	lsr.w	r3, r2, r3
 8010212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010214:	e01e      	b.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010216:	4b11      	ldr	r3, [pc, #68]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801021e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010222:	d106      	bne.n	8010232 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8010224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801022a:	d102      	bne.n	8010232 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801022c:	4b0d      	ldr	r3, [pc, #52]	@ (8010264 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010230:	e010      	b.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010232:	4b0a      	ldr	r3, [pc, #40]	@ (801025c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801023a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801023e:	d106      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8010240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010246:	d102      	bne.n	801024e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8010248:	4b07      	ldr	r3, [pc, #28]	@ (8010268 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801024a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801024c:	e002      	b.n	8010254 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801024e:	2300      	movs	r3, #0
 8010250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8010252:	e2e2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010254:	e2e1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8010256:	4b05      	ldr	r3, [pc, #20]	@ (801026c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8010258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801025a:	e2de      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801025c:	58024400 	.word	0x58024400
 8010260:	03d09000 	.word	0x03d09000
 8010264:	003d0900 	.word	0x003d0900
 8010268:	017d7840 	.word	0x017d7840
 801026c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8010270:	2300      	movs	r3, #0
 8010272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010274:	e2d1      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8010276:	e9d7 2300 	ldrd	r2, r3, [r7]
 801027a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801027e:	430b      	orrs	r3, r1
 8010280:	f040 809c 	bne.w	80103bc <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8010284:	4b93      	ldr	r3, [pc, #588]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010288:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801028c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801028e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010290:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010294:	d054      	beq.n	8010340 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8010296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010298:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801029c:	f200 808b 	bhi.w	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80102a6:	f000 8083 	beq.w	80103b0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80102aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80102b0:	f200 8081 	bhi.w	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102ba:	d02f      	beq.n	801031c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80102bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80102c2:	d878      	bhi.n	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80102c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d004      	beq.n	80102d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80102ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80102d0:	d012      	beq.n	80102f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80102d2:	e070      	b.n	80103b6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80102d4:	4b7f      	ldr	r3, [pc, #508]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80102dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80102e0:	d107      	bne.n	80102f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80102e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80102e6:	4618      	mov	r0, r3
 80102e8:	f000 fd5e 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80102ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80102f0:	e293      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102f6:	e290      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80102f8:	4b76      	ldr	r3, [pc, #472]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010304:	d107      	bne.n	8010316 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010306:	f107 0318 	add.w	r3, r7, #24
 801030a:	4618      	mov	r0, r3
 801030c:	f000 faa4 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010314:	e281      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801031a:	e27e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801031c:	4b6d      	ldr	r3, [pc, #436]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010328:	d107      	bne.n	801033a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801032a:	f107 030c 	add.w	r3, r7, #12
 801032e:	4618      	mov	r0, r3
 8010330:	f000 fbe6 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010338:	e26f      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801033a:	2300      	movs	r3, #0
 801033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801033e:	e26c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010340:	4b64      	ldr	r3, [pc, #400]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010344:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010348:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801034a:	4b62      	ldr	r3, [pc, #392]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f003 0304 	and.w	r3, r3, #4
 8010352:	2b04      	cmp	r3, #4
 8010354:	d10c      	bne.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010358:	2b00      	cmp	r3, #0
 801035a:	d109      	bne.n	8010370 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801035c:	4b5d      	ldr	r3, [pc, #372]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	08db      	lsrs	r3, r3, #3
 8010362:	f003 0303 	and.w	r3, r3, #3
 8010366:	4a5c      	ldr	r2, [pc, #368]	@ (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8010368:	fa22 f303 	lsr.w	r3, r2, r3
 801036c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801036e:	e01e      	b.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010370:	4b58      	ldr	r3, [pc, #352]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801037c:	d106      	bne.n	801038c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801037e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010384:	d102      	bne.n	801038c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8010386:	4b55      	ldr	r3, [pc, #340]	@ (80104dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8010388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801038a:	e010      	b.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801038c:	4b51      	ldr	r3, [pc, #324]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010398:	d106      	bne.n	80103a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801039a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801039c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103a0:	d102      	bne.n	80103a8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80103a2:	4b4f      	ldr	r3, [pc, #316]	@ (80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80103a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103a6:	e002      	b.n	80103ae <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80103a8:	2300      	movs	r3, #0
 80103aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80103ac:	e235      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80103ae:	e234      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80103b0:	4b4c      	ldr	r3, [pc, #304]	@ (80104e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80103b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103b4:	e231      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80103b6:	2300      	movs	r3, #0
 80103b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103ba:	e22e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80103bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103c0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80103c4:	430b      	orrs	r3, r1
 80103c6:	f040 808f 	bne.w	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80103ca:	4b42      	ldr	r3, [pc, #264]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80103cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80103ce:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80103d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80103d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80103da:	d06b      	beq.n	80104b4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80103dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80103e2:	d874      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80103ea:	d056      	beq.n	801049a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80103ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80103f2:	d86c      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80103f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80103fa:	d03b      	beq.n	8010474 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80103fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010402:	d864      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801040a:	d021      	beq.n	8010450 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801040c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801040e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010412:	d85c      	bhi.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8010414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010416:	2b00      	cmp	r3, #0
 8010418:	d004      	beq.n	8010424 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801041a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801041c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010420:	d004      	beq.n	801042c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8010422:	e054      	b.n	80104ce <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8010424:	f7fe fa4c 	bl	800e8c0 <HAL_RCC_GetPCLK1Freq>
 8010428:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801042a:	e1f6      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801042c:	4b29      	ldr	r3, [pc, #164]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010434:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010438:	d107      	bne.n	801044a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801043a:	f107 0318 	add.w	r3, r7, #24
 801043e:	4618      	mov	r0, r3
 8010440:	f000 fa0a 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010444:	69fb      	ldr	r3, [r7, #28]
 8010446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010448:	e1e7      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801044a:	2300      	movs	r3, #0
 801044c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801044e:	e1e4      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010450:	4b20      	ldr	r3, [pc, #128]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010458:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801045c:	d107      	bne.n	801046e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801045e:	f107 030c 	add.w	r3, r7, #12
 8010462:	4618      	mov	r0, r3
 8010464:	f000 fb4c 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801046c:	e1d5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801046e:	2300      	movs	r3, #0
 8010470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010472:	e1d2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010474:	4b17      	ldr	r3, [pc, #92]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f003 0304 	and.w	r3, r3, #4
 801047c:	2b04      	cmp	r3, #4
 801047e:	d109      	bne.n	8010494 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010480:	4b14      	ldr	r3, [pc, #80]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	08db      	lsrs	r3, r3, #3
 8010486:	f003 0303 	and.w	r3, r3, #3
 801048a:	4a13      	ldr	r2, [pc, #76]	@ (80104d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801048c:	fa22 f303 	lsr.w	r3, r2, r3
 8010490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010492:	e1c2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010494:	2300      	movs	r3, #0
 8010496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010498:	e1bf      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801049a:	4b0e      	ldr	r3, [pc, #56]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80104a6:	d102      	bne.n	80104ae <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80104a8:	4b0c      	ldr	r3, [pc, #48]	@ (80104dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80104aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104ac:	e1b5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104ae:	2300      	movs	r3, #0
 80104b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104b2:	e1b2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104b4:	4b07      	ldr	r3, [pc, #28]	@ (80104d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80104bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80104c0:	d102      	bne.n	80104c8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80104c2:	4b07      	ldr	r3, [pc, #28]	@ (80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80104c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80104c6:	e1a8      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104cc:	e1a5      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80104ce:	2300      	movs	r3, #0
 80104d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80104d2:	e1a2      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80104d4:	58024400 	.word	0x58024400
 80104d8:	03d09000 	.word	0x03d09000
 80104dc:	003d0900 	.word	0x003d0900
 80104e0:	017d7840 	.word	0x017d7840
 80104e4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80104e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104ec:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80104f0:	430b      	orrs	r3, r1
 80104f2:	d173      	bne.n	80105dc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80104f4:	4b9c      	ldr	r3, [pc, #624]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80104f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80104f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80104fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80104fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010504:	d02f      	beq.n	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801050c:	d863      	bhi.n	80105d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801050e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010510:	2b00      	cmp	r3, #0
 8010512:	d004      	beq.n	801051e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8010514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801051a:	d012      	beq.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801051c:	e05b      	b.n	80105d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801051e:	4b92      	ldr	r3, [pc, #584]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010526:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801052a:	d107      	bne.n	801053c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801052c:	f107 0318 	add.w	r3, r7, #24
 8010530:	4618      	mov	r0, r3
 8010532:	f000 f991 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010536:	69bb      	ldr	r3, [r7, #24]
 8010538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801053a:	e16e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801053c:	2300      	movs	r3, #0
 801053e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010540:	e16b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010542:	4b89      	ldr	r3, [pc, #548]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801054a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801054e:	d107      	bne.n	8010560 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010550:	f107 030c 	add.w	r3, r7, #12
 8010554:	4618      	mov	r0, r3
 8010556:	f000 fad3 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801055e:	e15c      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010560:	2300      	movs	r3, #0
 8010562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010564:	e159      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8010566:	4b80      	ldr	r3, [pc, #512]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801056a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801056e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010570:	4b7d      	ldr	r3, [pc, #500]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f003 0304 	and.w	r3, r3, #4
 8010578:	2b04      	cmp	r3, #4
 801057a:	d10c      	bne.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801057c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801057e:	2b00      	cmp	r3, #0
 8010580:	d109      	bne.n	8010596 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010582:	4b79      	ldr	r3, [pc, #484]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	08db      	lsrs	r3, r3, #3
 8010588:	f003 0303 	and.w	r3, r3, #3
 801058c:	4a77      	ldr	r2, [pc, #476]	@ (801076c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801058e:	fa22 f303 	lsr.w	r3, r2, r3
 8010592:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010594:	e01e      	b.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010596:	4b74      	ldr	r3, [pc, #464]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801059e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105a2:	d106      	bne.n	80105b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80105a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105aa:	d102      	bne.n	80105b2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80105ac:	4b70      	ldr	r3, [pc, #448]	@ (8010770 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80105ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105b0:	e010      	b.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80105b2:	4b6d      	ldr	r3, [pc, #436]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80105ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80105be:	d106      	bne.n	80105ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80105c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80105c6:	d102      	bne.n	80105ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80105c8:	4b6a      	ldr	r3, [pc, #424]	@ (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80105ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105cc:	e002      	b.n	80105d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80105ce:	2300      	movs	r3, #0
 80105d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80105d2:	e122      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80105d4:	e121      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80105da:	e11e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80105dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80105e0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80105e4:	430b      	orrs	r3, r1
 80105e6:	d133      	bne.n	8010650 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80105e8:	4b5f      	ldr	r3, [pc, #380]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80105ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80105ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80105f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80105f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d004      	beq.n	8010602 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80105f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105fe:	d012      	beq.n	8010626 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8010600:	e023      	b.n	801064a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010602:	4b59      	ldr	r3, [pc, #356]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801060a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801060e:	d107      	bne.n	8010620 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010614:	4618      	mov	r0, r3
 8010616:	f000 fbc7 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801061e:	e0fc      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010620:	2300      	movs	r3, #0
 8010622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010624:	e0f9      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010626:	4b50      	ldr	r3, [pc, #320]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801062e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8010632:	d107      	bne.n	8010644 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010634:	f107 0318 	add.w	r3, r7, #24
 8010638:	4618      	mov	r0, r3
 801063a:	f000 f90d 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801063e:	6a3b      	ldr	r3, [r7, #32]
 8010640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010642:	e0ea      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010644:	2300      	movs	r3, #0
 8010646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010648:	e0e7      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801064e:	e0e4      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010654:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8010658:	430b      	orrs	r3, r1
 801065a:	f040 808d 	bne.w	8010778 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801065e:	4b42      	ldr	r3, [pc, #264]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010662:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8010666:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8010668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801066e:	d06b      	beq.n	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010676:	d874      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801067e:	d056      	beq.n	801072e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8010680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010686:	d86c      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801068a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801068e:	d03b      	beq.n	8010708 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8010690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010692:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010696:	d864      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8010698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801069a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801069e:	d021      	beq.n	80106e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80106a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106a6:	d85c      	bhi.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80106a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d004      	beq.n	80106b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80106ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80106b4:	d004      	beq.n	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80106b6:	e054      	b.n	8010762 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80106b8:	f000 f8b8 	bl	801082c <HAL_RCCEx_GetD3PCLK1Freq>
 80106bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80106be:	e0ac      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80106c0:	4b29      	ldr	r3, [pc, #164]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80106c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80106cc:	d107      	bne.n	80106de <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80106ce:	f107 0318 	add.w	r3, r7, #24
 80106d2:	4618      	mov	r0, r3
 80106d4:	f000 f8c0 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80106d8:	69fb      	ldr	r3, [r7, #28]
 80106da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80106dc:	e09d      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80106e2:	e09a      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80106e4:	4b20      	ldr	r3, [pc, #128]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80106f0:	d107      	bne.n	8010702 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106f2:	f107 030c 	add.w	r3, r7, #12
 80106f6:	4618      	mov	r0, r3
 80106f8:	f000 fa02 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010700:	e08b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010702:	2300      	movs	r3, #0
 8010704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010706:	e088      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010708:	4b17      	ldr	r3, [pc, #92]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f003 0304 	and.w	r3, r3, #4
 8010710:	2b04      	cmp	r3, #4
 8010712:	d109      	bne.n	8010728 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010714:	4b14      	ldr	r3, [pc, #80]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	08db      	lsrs	r3, r3, #3
 801071a:	f003 0303 	and.w	r3, r3, #3
 801071e:	4a13      	ldr	r2, [pc, #76]	@ (801076c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8010720:	fa22 f303 	lsr.w	r3, r2, r3
 8010724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010726:	e078      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010728:	2300      	movs	r3, #0
 801072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801072c:	e075      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801072e:	4b0e      	ldr	r3, [pc, #56]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801073a:	d102      	bne.n	8010742 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801073c:	4b0c      	ldr	r3, [pc, #48]	@ (8010770 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010740:	e06b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010746:	e068      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010748:	4b07      	ldr	r3, [pc, #28]	@ (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010754:	d102      	bne.n	801075c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8010756:	4b07      	ldr	r3, [pc, #28]	@ (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8010758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801075a:	e05e      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801075c:	2300      	movs	r3, #0
 801075e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010760:	e05b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8010762:	2300      	movs	r3, #0
 8010764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010766:	e058      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8010768:	58024400 	.word	0x58024400
 801076c:	03d09000 	.word	0x03d09000
 8010770:	003d0900 	.word	0x003d0900
 8010774:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010778:	e9d7 2300 	ldrd	r2, r3, [r7]
 801077c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8010780:	430b      	orrs	r3, r1
 8010782:	d148      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8010784:	4b27      	ldr	r3, [pc, #156]	@ (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8010786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010788:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801078c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801078e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010790:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010794:	d02a      	beq.n	80107ec <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8010796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010798:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801079c:	d838      	bhi.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801079e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d004      	beq.n	80107ae <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80107a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80107aa:	d00d      	beq.n	80107c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80107ac:	e030      	b.n	8010810 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80107ae:	4b1d      	ldr	r3, [pc, #116]	@ (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80107b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80107ba:	d102      	bne.n	80107c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80107bc:	4b1a      	ldr	r3, [pc, #104]	@ (8010828 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80107be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107c0:	e02b      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107c2:	2300      	movs	r3, #0
 80107c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107c6:	e028      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80107c8:	4b16      	ldr	r3, [pc, #88]	@ (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80107d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80107d4:	d107      	bne.n	80107e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80107d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107da:	4618      	mov	r0, r3
 80107dc:	f000 fae4 	bl	8010da8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80107e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80107e4:	e019      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80107e6:	2300      	movs	r3, #0
 80107e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80107ea:	e016      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80107ec:	4b0d      	ldr	r3, [pc, #52]	@ (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80107f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80107f8:	d107      	bne.n	801080a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107fa:	f107 0318 	add.w	r3, r7, #24
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 f82a 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8010808:	e007      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801080e:	e004      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010814:	e001      	b.n	801081a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801081a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801081c:	4618      	mov	r0, r3
 801081e:	3740      	adds	r7, #64	@ 0x40
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}
 8010824:	58024400 	.word	0x58024400
 8010828:	017d7840 	.word	0x017d7840

0801082c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010830:	f7fe f816 	bl	800e860 <HAL_RCC_GetHCLKFreq>
 8010834:	4602      	mov	r2, r0
 8010836:	4b06      	ldr	r3, [pc, #24]	@ (8010850 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	091b      	lsrs	r3, r3, #4
 801083c:	f003 0307 	and.w	r3, r3, #7
 8010840:	4904      	ldr	r1, [pc, #16]	@ (8010854 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010842:	5ccb      	ldrb	r3, [r1, r3]
 8010844:	f003 031f 	and.w	r3, r3, #31
 8010848:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801084c:	4618      	mov	r0, r3
 801084e:	bd80      	pop	{r7, pc}
 8010850:	58024400 	.word	0x58024400
 8010854:	080190b0 	.word	0x080190b0

08010858 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8010858:	b480      	push	{r7}
 801085a:	b089      	sub	sp, #36	@ 0x24
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010860:	4ba1      	ldr	r3, [pc, #644]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010864:	f003 0303 	and.w	r3, r3, #3
 8010868:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801086a:	4b9f      	ldr	r3, [pc, #636]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801086c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801086e:	0b1b      	lsrs	r3, r3, #12
 8010870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010874:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010876:	4b9c      	ldr	r3, [pc, #624]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801087a:	091b      	lsrs	r3, r3, #4
 801087c:	f003 0301 	and.w	r3, r3, #1
 8010880:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8010882:	4b99      	ldr	r3, [pc, #612]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010886:	08db      	lsrs	r3, r3, #3
 8010888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801088c:	693a      	ldr	r2, [r7, #16]
 801088e:	fb02 f303 	mul.w	r3, r2, r3
 8010892:	ee07 3a90 	vmov	s15, r3
 8010896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801089a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f000 8111 	beq.w	8010ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80108a6:	69bb      	ldr	r3, [r7, #24]
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	f000 8083 	beq.w	80109b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b02      	cmp	r3, #2
 80108b2:	f200 80a1 	bhi.w	80109f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80108b6:	69bb      	ldr	r3, [r7, #24]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d003      	beq.n	80108c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d056      	beq.n	8010970 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80108c2:	e099      	b.n	80109f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108c4:	4b88      	ldr	r3, [pc, #544]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f003 0320 	and.w	r3, r3, #32
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d02d      	beq.n	801092c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108d0:	4b85      	ldr	r3, [pc, #532]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	08db      	lsrs	r3, r3, #3
 80108d6:	f003 0303 	and.w	r3, r3, #3
 80108da:	4a84      	ldr	r2, [pc, #528]	@ (8010aec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80108dc:	fa22 f303 	lsr.w	r3, r2, r3
 80108e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	ee07 3a90 	vmov	s15, r3
 80108e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	ee07 3a90 	vmov	s15, r3
 80108f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108fa:	4b7b      	ldr	r3, [pc, #492]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80108fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010902:	ee07 3a90 	vmov	s15, r3
 8010906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801090a:	ed97 6a03 	vldr	s12, [r7, #12]
 801090e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801091a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801091e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010926:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801092a:	e087      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	ee07 3a90 	vmov	s15, r3
 8010932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010936:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010af4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801093a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801093e:	4b6a      	ldr	r3, [pc, #424]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010946:	ee07 3a90 	vmov	s15, r3
 801094a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801094e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010952:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801095a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801095e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010966:	ee67 7a27 	vmul.f32	s15, s14, s15
 801096a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801096e:	e065      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	ee07 3a90 	vmov	s15, r3
 8010976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801097a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801097e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010982:	4b59      	ldr	r3, [pc, #356]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801098a:	ee07 3a90 	vmov	s15, r3
 801098e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010992:	ed97 6a03 	vldr	s12, [r7, #12]
 8010996:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801099a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801099e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109b2:	e043      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	ee07 3a90 	vmov	s15, r3
 80109ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010afc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80109c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109c6:	4b48      	ldr	r3, [pc, #288]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80109c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109ce:	ee07 3a90 	vmov	s15, r3
 80109d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80109da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80109de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80109ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80109f6:	e021      	b.n	8010a3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	ee07 3a90 	vmov	s15, r3
 80109fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010af8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010a0a:	4b37      	ldr	r3, [pc, #220]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a12:	ee07 3a90 	vmov	s15, r3
 8010a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010a1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010af0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010a3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8010a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a40:	0a5b      	lsrs	r3, r3, #9
 8010a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a46:	ee07 3a90 	vmov	s15, r3
 8010a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a62:	ee17 2a90 	vmov	r2, s15
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8010a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a6e:	0c1b      	lsrs	r3, r3, #16
 8010a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a74:	ee07 3a90 	vmov	s15, r3
 8010a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a90:	ee17 2a90 	vmov	r2, s15
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8010a98:	4b13      	ldr	r3, [pc, #76]	@ (8010ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010a9c:	0e1b      	lsrs	r3, r3, #24
 8010a9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aa2:	ee07 3a90 	vmov	s15, r3
 8010aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010aaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010abe:	ee17 2a90 	vmov	r2, s15
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010ac6:	e008      	b.n	8010ada <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	609a      	str	r2, [r3, #8]
}
 8010ada:	bf00      	nop
 8010adc:	3724      	adds	r7, #36	@ 0x24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr
 8010ae6:	bf00      	nop
 8010ae8:	58024400 	.word	0x58024400
 8010aec:	03d09000 	.word	0x03d09000
 8010af0:	46000000 	.word	0x46000000
 8010af4:	4c742400 	.word	0x4c742400
 8010af8:	4a742400 	.word	0x4a742400
 8010afc:	4bbebc20 	.word	0x4bbebc20

08010b00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b089      	sub	sp, #36	@ 0x24
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b08:	4ba1      	ldr	r3, [pc, #644]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b0c:	f003 0303 	and.w	r3, r3, #3
 8010b10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8010b12:	4b9f      	ldr	r3, [pc, #636]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b16:	0d1b      	lsrs	r3, r3, #20
 8010b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010b1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b22:	0a1b      	lsrs	r3, r3, #8
 8010b24:	f003 0301 	and.w	r3, r3, #1
 8010b28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8010b2a:	4b99      	ldr	r3, [pc, #612]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b2e:	08db      	lsrs	r3, r3, #3
 8010b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b34:	693a      	ldr	r2, [r7, #16]
 8010b36:	fb02 f303 	mul.w	r3, r2, r3
 8010b3a:	ee07 3a90 	vmov	s15, r3
 8010b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 8111 	beq.w	8010d70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	f000 8083 	beq.w	8010c5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	2b02      	cmp	r3, #2
 8010b5a:	f200 80a1 	bhi.w	8010ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d003      	beq.n	8010b6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d056      	beq.n	8010c18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010b6a:	e099      	b.n	8010ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b6c:	4b88      	ldr	r3, [pc, #544]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f003 0320 	and.w	r3, r3, #32
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d02d      	beq.n	8010bd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b78:	4b85      	ldr	r3, [pc, #532]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	08db      	lsrs	r3, r3, #3
 8010b7e:	f003 0303 	and.w	r3, r3, #3
 8010b82:	4a84      	ldr	r2, [pc, #528]	@ (8010d94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010b84:	fa22 f303 	lsr.w	r3, r2, r3
 8010b88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	ee07 3a90 	vmov	s15, r3
 8010b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	ee07 3a90 	vmov	s15, r3
 8010b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010baa:	ee07 3a90 	vmov	s15, r3
 8010bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010bd2:	e087      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	ee07 3a90 	vmov	s15, r3
 8010bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8010d9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010be6:	4b6a      	ldr	r3, [pc, #424]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bee:	ee07 3a90 	vmov	s15, r3
 8010bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010bf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010bfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c16:	e065      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	ee07 3a90 	vmov	s15, r3
 8010c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8010da0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c2a:	4b59      	ldr	r3, [pc, #356]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c32:	ee07 3a90 	vmov	s15, r3
 8010c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c5a:	e043      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8010da4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c6e:	4b48      	ldr	r3, [pc, #288]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c76:	ee07 3a90 	vmov	s15, r3
 8010c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010c9e:	e021      	b.n	8010ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010caa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010da0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cb2:	4b37      	ldr	r3, [pc, #220]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cba:	ee07 3a90 	vmov	s15, r3
 8010cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8010d98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ce2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8010ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ce8:	0a5b      	lsrs	r3, r3, #9
 8010cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010cee:	ee07 3a90 	vmov	s15, r3
 8010cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cf6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010cfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010cfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d0a:	ee17 2a90 	vmov	r2, s15
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8010d12:	4b1f      	ldr	r3, [pc, #124]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d16:	0c1b      	lsrs	r3, r3, #16
 8010d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d1c:	ee07 3a90 	vmov	s15, r3
 8010d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d38:	ee17 2a90 	vmov	r2, s15
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8010d40:	4b13      	ldr	r3, [pc, #76]	@ (8010d90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d44:	0e1b      	lsrs	r3, r3, #24
 8010d46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d4a:	ee07 3a90 	vmov	s15, r3
 8010d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010d56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d66:	ee17 2a90 	vmov	r2, s15
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8010d6e:	e008      	b.n	8010d82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	609a      	str	r2, [r3, #8]
}
 8010d82:	bf00      	nop
 8010d84:	3724      	adds	r7, #36	@ 0x24
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	58024400 	.word	0x58024400
 8010d94:	03d09000 	.word	0x03d09000
 8010d98:	46000000 	.word	0x46000000
 8010d9c:	4c742400 	.word	0x4c742400
 8010da0:	4a742400 	.word	0x4a742400
 8010da4:	4bbebc20 	.word	0x4bbebc20

08010da8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8010da8:	b480      	push	{r7}
 8010daa:	b089      	sub	sp, #36	@ 0x24
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010db0:	4ba0      	ldr	r3, [pc, #640]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010db4:	f003 0303 	and.w	r3, r3, #3
 8010db8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8010dba:	4b9e      	ldr	r3, [pc, #632]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dbe:	091b      	lsrs	r3, r3, #4
 8010dc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010dc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010dc6:	4b9b      	ldr	r3, [pc, #620]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dca:	f003 0301 	and.w	r3, r3, #1
 8010dce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010dd0:	4b98      	ldr	r3, [pc, #608]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dd4:	08db      	lsrs	r3, r3, #3
 8010dd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010dda:	693a      	ldr	r2, [r7, #16]
 8010ddc:	fb02 f303 	mul.w	r3, r2, r3
 8010de0:	ee07 3a90 	vmov	s15, r3
 8010de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010de8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f000 8111 	beq.w	8011016 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010df4:	69bb      	ldr	r3, [r7, #24]
 8010df6:	2b02      	cmp	r3, #2
 8010df8:	f000 8083 	beq.w	8010f02 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010dfc:	69bb      	ldr	r3, [r7, #24]
 8010dfe:	2b02      	cmp	r3, #2
 8010e00:	f200 80a1 	bhi.w	8010f46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d003      	beq.n	8010e12 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	2b01      	cmp	r3, #1
 8010e0e:	d056      	beq.n	8010ebe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010e10:	e099      	b.n	8010f46 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e12:	4b88      	ldr	r3, [pc, #544]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f003 0320 	and.w	r3, r3, #32
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d02d      	beq.n	8010e7a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010e1e:	4b85      	ldr	r3, [pc, #532]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	08db      	lsrs	r3, r3, #3
 8010e24:	f003 0303 	and.w	r3, r3, #3
 8010e28:	4a83      	ldr	r2, [pc, #524]	@ (8011038 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8010e2e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	ee07 3a90 	vmov	s15, r3
 8010e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	ee07 3a90 	vmov	s15, r3
 8010e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e48:	4b7a      	ldr	r3, [pc, #488]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e50:	ee07 3a90 	vmov	s15, r3
 8010e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e58:	ed97 6a03 	vldr	s12, [r7, #12]
 8010e5c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010e60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010e64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010e68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010e6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010e70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010e78:	e087      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	ee07 3a90 	vmov	s15, r3
 8010e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e84:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8011040 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010e88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010e8c:	4b69      	ldr	r3, [pc, #420]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e94:	ee07 3a90 	vmov	s15, r3
 8010e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010e9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ea0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010eac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010eb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010eb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010ebc:	e065      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	ee07 3a90 	vmov	s15, r3
 8010ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ec8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8011044 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010ecc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ed0:	4b58      	ldr	r3, [pc, #352]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ed8:	ee07 3a90 	vmov	s15, r3
 8010edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ee0:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ee4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010ee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ef0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010ef4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010efc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f00:	e043      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	ee07 3a90 	vmov	s15, r3
 8010f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f0c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8011048 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010f10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f14:	4b47      	ldr	r3, [pc, #284]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f1c:	ee07 3a90 	vmov	s15, r3
 8010f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f24:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f28:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f44:	e021      	b.n	8010f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	ee07 3a90 	vmov	s15, r3
 8010f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f50:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8011040 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f58:	4b36      	ldr	r3, [pc, #216]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f60:	ee07 3a90 	vmov	s15, r3
 8010f64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f68:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f6c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801103c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010f70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010f88:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f8e:	0a5b      	lsrs	r3, r3, #9
 8010f90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f94:	ee07 3a90 	vmov	s15, r3
 8010f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fb0:	ee17 2a90 	vmov	r2, s15
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fbc:	0c1b      	lsrs	r3, r3, #16
 8010fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010fc2:	ee07 3a90 	vmov	s15, r3
 8010fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010fde:	ee17 2a90 	vmov	r2, s15
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010fe6:	4b13      	ldr	r3, [pc, #76]	@ (8011034 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fea:	0e1b      	lsrs	r3, r3, #24
 8010fec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010ff0:	ee07 3a90 	vmov	s15, r3
 8010ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011000:	edd7 6a07 	vldr	s13, [r7, #28]
 8011004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801100c:	ee17 2a90 	vmov	r2, s15
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011014:	e008      	b.n	8011028 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	609a      	str	r2, [r3, #8]
}
 8011028:	bf00      	nop
 801102a:	3724      	adds	r7, #36	@ 0x24
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr
 8011034:	58024400 	.word	0x58024400
 8011038:	03d09000 	.word	0x03d09000
 801103c:	46000000 	.word	0x46000000
 8011040:	4c742400 	.word	0x4c742400
 8011044:	4a742400 	.word	0x4a742400
 8011048:	4bbebc20 	.word	0x4bbebc20

0801104c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011056:	2300      	movs	r3, #0
 8011058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801105a:	4b53      	ldr	r3, [pc, #332]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801105c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	2b03      	cmp	r3, #3
 8011064:	d101      	bne.n	801106a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011066:	2301      	movs	r3, #1
 8011068:	e099      	b.n	801119e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801106a:	4b4f      	ldr	r3, [pc, #316]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a4e      	ldr	r2, [pc, #312]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011070:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011076:	f7f1 fde7 	bl	8002c48 <HAL_GetTick>
 801107a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801107c:	e008      	b.n	8011090 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801107e:	f7f1 fde3 	bl	8002c48 <HAL_GetTick>
 8011082:	4602      	mov	r2, r0
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	1ad3      	subs	r3, r2, r3
 8011088:	2b02      	cmp	r3, #2
 801108a:	d901      	bls.n	8011090 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801108c:	2303      	movs	r3, #3
 801108e:	e086      	b.n	801119e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8011090:	4b45      	ldr	r3, [pc, #276]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1f0      	bne.n	801107e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801109c:	4b42      	ldr	r3, [pc, #264]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801109e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	031b      	lsls	r3, r3, #12
 80110aa:	493f      	ldr	r1, [pc, #252]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110ac:	4313      	orrs	r3, r2
 80110ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	3b01      	subs	r3, #1
 80110b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	689b      	ldr	r3, [r3, #8]
 80110be:	3b01      	subs	r3, #1
 80110c0:	025b      	lsls	r3, r3, #9
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	431a      	orrs	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	3b01      	subs	r3, #1
 80110cc:	041b      	lsls	r3, r3, #16
 80110ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80110d2:	431a      	orrs	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	691b      	ldr	r3, [r3, #16]
 80110d8:	3b01      	subs	r3, #1
 80110da:	061b      	lsls	r3, r3, #24
 80110dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80110e0:	4931      	ldr	r1, [pc, #196]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110e2:	4313      	orrs	r3, r2
 80110e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80110e6:	4b30      	ldr	r3, [pc, #192]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	695b      	ldr	r3, [r3, #20]
 80110f2:	492d      	ldr	r1, [pc, #180]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110f4:	4313      	orrs	r3, r2
 80110f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80110f8:	4b2b      	ldr	r3, [pc, #172]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 80110fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110fc:	f023 0220 	bic.w	r2, r3, #32
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	699b      	ldr	r3, [r3, #24]
 8011104:	4928      	ldr	r1, [pc, #160]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011106:	4313      	orrs	r3, r2
 8011108:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801110a:	4b27      	ldr	r3, [pc, #156]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801110c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801110e:	4a26      	ldr	r2, [pc, #152]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011110:	f023 0310 	bic.w	r3, r3, #16
 8011114:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011116:	4b24      	ldr	r3, [pc, #144]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011118:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801111a:	4b24      	ldr	r3, [pc, #144]	@ (80111ac <RCCEx_PLL2_Config+0x160>)
 801111c:	4013      	ands	r3, r2
 801111e:	687a      	ldr	r2, [r7, #4]
 8011120:	69d2      	ldr	r2, [r2, #28]
 8011122:	00d2      	lsls	r2, r2, #3
 8011124:	4920      	ldr	r1, [pc, #128]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011126:	4313      	orrs	r3, r2
 8011128:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801112a:	4b1f      	ldr	r3, [pc, #124]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801112c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801112e:	4a1e      	ldr	r2, [pc, #120]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011130:	f043 0310 	orr.w	r3, r3, #16
 8011134:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d106      	bne.n	801114a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801113c:	4b1a      	ldr	r3, [pc, #104]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801113e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011140:	4a19      	ldr	r2, [pc, #100]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011146:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8011148:	e00f      	b.n	801116a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d106      	bne.n	801115e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011150:	4b15      	ldr	r3, [pc, #84]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011154:	4a14      	ldr	r2, [pc, #80]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801115a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801115c:	e005      	b.n	801116a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801115e:	4b12      	ldr	r3, [pc, #72]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011162:	4a11      	ldr	r2, [pc, #68]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011164:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011168:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801116a:	4b0f      	ldr	r3, [pc, #60]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	4a0e      	ldr	r2, [pc, #56]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011170:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8011174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011176:	f7f1 fd67 	bl	8002c48 <HAL_GetTick>
 801117a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801117c:	e008      	b.n	8011190 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801117e:	f7f1 fd63 	bl	8002c48 <HAL_GetTick>
 8011182:	4602      	mov	r2, r0
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	1ad3      	subs	r3, r2, r3
 8011188:	2b02      	cmp	r3, #2
 801118a:	d901      	bls.n	8011190 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801118c:	2303      	movs	r3, #3
 801118e:	e006      	b.n	801119e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8011190:	4b05      	ldr	r3, [pc, #20]	@ (80111a8 <RCCEx_PLL2_Config+0x15c>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011198:	2b00      	cmp	r3, #0
 801119a:	d0f0      	beq.n	801117e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801119c:	7bfb      	ldrb	r3, [r7, #15]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	58024400 	.word	0x58024400
 80111ac:	ffff0007 	.word	0xffff0007

080111b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80111be:	4b53      	ldr	r3, [pc, #332]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80111c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80111c2:	f003 0303 	and.w	r3, r3, #3
 80111c6:	2b03      	cmp	r3, #3
 80111c8:	d101      	bne.n	80111ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80111ca:	2301      	movs	r3, #1
 80111cc:	e099      	b.n	8011302 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80111ce:	4b4f      	ldr	r3, [pc, #316]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	4a4e      	ldr	r2, [pc, #312]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80111d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80111d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80111da:	f7f1 fd35 	bl	8002c48 <HAL_GetTick>
 80111de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80111e0:	e008      	b.n	80111f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80111e2:	f7f1 fd31 	bl	8002c48 <HAL_GetTick>
 80111e6:	4602      	mov	r2, r0
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	2b02      	cmp	r3, #2
 80111ee:	d901      	bls.n	80111f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80111f0:	2303      	movs	r3, #3
 80111f2:	e086      	b.n	8011302 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80111f4:	4b45      	ldr	r3, [pc, #276]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1f0      	bne.n	80111e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011200:	4b42      	ldr	r3, [pc, #264]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011204:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	051b      	lsls	r3, r3, #20
 801120e:	493f      	ldr	r1, [pc, #252]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011210:	4313      	orrs	r3, r2
 8011212:	628b      	str	r3, [r1, #40]	@ 0x28
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	685b      	ldr	r3, [r3, #4]
 8011218:	3b01      	subs	r3, #1
 801121a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	689b      	ldr	r3, [r3, #8]
 8011222:	3b01      	subs	r3, #1
 8011224:	025b      	lsls	r3, r3, #9
 8011226:	b29b      	uxth	r3, r3
 8011228:	431a      	orrs	r2, r3
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	3b01      	subs	r3, #1
 8011230:	041b      	lsls	r3, r3, #16
 8011232:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011236:	431a      	orrs	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	3b01      	subs	r3, #1
 801123e:	061b      	lsls	r3, r3, #24
 8011240:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011244:	4931      	ldr	r1, [pc, #196]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011246:	4313      	orrs	r3, r2
 8011248:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801124a:	4b30      	ldr	r3, [pc, #192]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 801124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801124e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	492d      	ldr	r1, [pc, #180]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011258:	4313      	orrs	r3, r2
 801125a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801125c:	4b2b      	ldr	r3, [pc, #172]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 801125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011260:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	699b      	ldr	r3, [r3, #24]
 8011268:	4928      	ldr	r1, [pc, #160]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 801126a:	4313      	orrs	r3, r2
 801126c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801126e:	4b27      	ldr	r3, [pc, #156]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011272:	4a26      	ldr	r2, [pc, #152]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011278:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801127a:	4b24      	ldr	r3, [pc, #144]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 801127c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801127e:	4b24      	ldr	r3, [pc, #144]	@ (8011310 <RCCEx_PLL3_Config+0x160>)
 8011280:	4013      	ands	r3, r2
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	69d2      	ldr	r2, [r2, #28]
 8011286:	00d2      	lsls	r2, r2, #3
 8011288:	4920      	ldr	r1, [pc, #128]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 801128a:	4313      	orrs	r3, r2
 801128c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801128e:	4b1f      	ldr	r3, [pc, #124]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011292:	4a1e      	ldr	r2, [pc, #120]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 8011294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011298:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d106      	bne.n	80112ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80112a0:	4b1a      	ldr	r3, [pc, #104]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112a4:	4a19      	ldr	r2, [pc, #100]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80112aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80112ac:	e00f      	b.n	80112ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	2b01      	cmp	r3, #1
 80112b2:	d106      	bne.n	80112c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80112b4:	4b15      	ldr	r3, [pc, #84]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112b8:	4a14      	ldr	r2, [pc, #80]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80112be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80112c0:	e005      	b.n	80112ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80112c2:	4b12      	ldr	r3, [pc, #72]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112c6:	4a11      	ldr	r2, [pc, #68]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80112cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80112ce:	4b0f      	ldr	r3, [pc, #60]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4a0e      	ldr	r2, [pc, #56]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80112d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112da:	f7f1 fcb5 	bl	8002c48 <HAL_GetTick>
 80112de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80112e0:	e008      	b.n	80112f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80112e2:	f7f1 fcb1 	bl	8002c48 <HAL_GetTick>
 80112e6:	4602      	mov	r2, r0
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	2b02      	cmp	r3, #2
 80112ee:	d901      	bls.n	80112f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80112f0:	2303      	movs	r3, #3
 80112f2:	e006      	b.n	8011302 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80112f4:	4b05      	ldr	r3, [pc, #20]	@ (801130c <RCCEx_PLL3_Config+0x15c>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d0f0      	beq.n	80112e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011300:	7bfb      	ldrb	r3, [r7, #15]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3710      	adds	r7, #16
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	58024400 	.word	0x58024400
 8011310:	ffff0007 	.word	0xffff0007

08011314 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d101      	bne.n	8011326 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011322:	2301      	movs	r3, #1
 8011324:	e10f      	b.n	8011546 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a87      	ldr	r2, [pc, #540]	@ (8011550 <HAL_SPI_Init+0x23c>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d00f      	beq.n	8011356 <HAL_SPI_Init+0x42>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a86      	ldr	r2, [pc, #536]	@ (8011554 <HAL_SPI_Init+0x240>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d00a      	beq.n	8011356 <HAL_SPI_Init+0x42>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4a84      	ldr	r2, [pc, #528]	@ (8011558 <HAL_SPI_Init+0x244>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d005      	beq.n	8011356 <HAL_SPI_Init+0x42>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	2b0f      	cmp	r3, #15
 8011350:	d901      	bls.n	8011356 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011352:	2301      	movs	r3, #1
 8011354:	e0f7      	b.n	8011546 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 ff6c 	bl	8012234 <SPI_GetPacketSize>
 801135c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	4a7b      	ldr	r2, [pc, #492]	@ (8011550 <HAL_SPI_Init+0x23c>)
 8011364:	4293      	cmp	r3, r2
 8011366:	d00c      	beq.n	8011382 <HAL_SPI_Init+0x6e>
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	4a79      	ldr	r2, [pc, #484]	@ (8011554 <HAL_SPI_Init+0x240>)
 801136e:	4293      	cmp	r3, r2
 8011370:	d007      	beq.n	8011382 <HAL_SPI_Init+0x6e>
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	4a78      	ldr	r2, [pc, #480]	@ (8011558 <HAL_SPI_Init+0x244>)
 8011378:	4293      	cmp	r3, r2
 801137a:	d002      	beq.n	8011382 <HAL_SPI_Init+0x6e>
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2b08      	cmp	r3, #8
 8011380:	d811      	bhi.n	80113a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8011386:	4a72      	ldr	r2, [pc, #456]	@ (8011550 <HAL_SPI_Init+0x23c>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d009      	beq.n	80113a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	4a70      	ldr	r2, [pc, #448]	@ (8011554 <HAL_SPI_Init+0x240>)
 8011392:	4293      	cmp	r3, r2
 8011394:	d004      	beq.n	80113a0 <HAL_SPI_Init+0x8c>
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4a6f      	ldr	r2, [pc, #444]	@ (8011558 <HAL_SPI_Init+0x244>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d104      	bne.n	80113aa <HAL_SPI_Init+0x96>
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2b10      	cmp	r3, #16
 80113a4:	d901      	bls.n	80113aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80113a6:	2301      	movs	r3, #1
 80113a8:	e0cd      	b.n	8011546 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d106      	bne.n	80113c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2200      	movs	r2, #0
 80113ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7f0 fe02 	bl	8001fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2202      	movs	r2, #2
 80113c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	f022 0201 	bic.w	r2, r2, #1
 80113da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80113e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	699b      	ldr	r3, [r3, #24]
 80113ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80113f0:	d119      	bne.n	8011426 <HAL_SPI_Init+0x112>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80113fa:	d103      	bne.n	8011404 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011400:	2b00      	cmp	r3, #0
 8011402:	d008      	beq.n	8011416 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011408:	2b00      	cmp	r3, #0
 801140a:	d10c      	bne.n	8011426 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011410:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011414:	d107      	bne.n	8011426 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	681a      	ldr	r2, [r3, #0]
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8011424:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00f      	beq.n	8011452 <HAL_SPI_Init+0x13e>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	2b06      	cmp	r3, #6
 8011438:	d90b      	bls.n	8011452 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	430a      	orrs	r2, r1
 801144e:	601a      	str	r2, [r3, #0]
 8011450:	e007      	b.n	8011462 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8011460:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	69da      	ldr	r2, [r3, #28]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801146a:	431a      	orrs	r2, r3
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	431a      	orrs	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011474:	ea42 0103 	orr.w	r1, r2, r3
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	68da      	ldr	r2, [r3, #12]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	430a      	orrs	r2, r1
 8011482:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801148c:	431a      	orrs	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011492:	431a      	orrs	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	699b      	ldr	r3, [r3, #24]
 8011498:	431a      	orrs	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	691b      	ldr	r3, [r3, #16]
 801149e:	431a      	orrs	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	695b      	ldr	r3, [r3, #20]
 80114a4:	431a      	orrs	r2, r3
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	6a1b      	ldr	r3, [r3, #32]
 80114aa:	431a      	orrs	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	431a      	orrs	r2, r3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80114b6:	431a      	orrs	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	431a      	orrs	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114c2:	ea42 0103 	orr.w	r1, r2, r3
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	430a      	orrs	r2, r1
 80114d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d113      	bne.n	8011502 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	689b      	ldr	r3, [r3, #8]
 80114e0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80114ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	689b      	ldr	r3, [r3, #8]
 80114f4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011500:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f022 0201 	bic.w	r2, r2, #1
 8011510:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00a      	beq.n	8011534 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	68db      	ldr	r3, [r3, #12]
 8011524:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	430a      	orrs	r2, r1
 8011532:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2200      	movs	r2, #0
 8011538:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2201      	movs	r2, #1
 8011540:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8011544:	2300      	movs	r3, #0
}
 8011546:	4618      	mov	r0, r3
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	40013000 	.word	0x40013000
 8011554:	40003800 	.word	0x40003800
 8011558:	40003c00 	.word	0x40003c00

0801155c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b088      	sub	sp, #32
 8011560:	af02      	add	r7, sp, #8
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	603b      	str	r3, [r7, #0]
 8011568:	4613      	mov	r3, r2
 801156a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	3320      	adds	r3, #32
 8011572:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011574:	f7f1 fb68 	bl	8002c48 <HAL_GetTick>
 8011578:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011580:	b2db      	uxtb	r3, r3
 8011582:	2b01      	cmp	r3, #1
 8011584:	d001      	beq.n	801158a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8011586:	2302      	movs	r3, #2
 8011588:	e1d1      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 801158a:	68bb      	ldr	r3, [r7, #8]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d002      	beq.n	8011596 <HAL_SPI_Transmit+0x3a>
 8011590:	88fb      	ldrh	r3, [r7, #6]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d101      	bne.n	801159a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8011596:	2301      	movs	r3, #1
 8011598:	e1c9      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d101      	bne.n	80115a8 <HAL_SPI_Transmit+0x4c>
 80115a4:	2302      	movs	r3, #2
 80115a6:	e1c2      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	2201      	movs	r2, #1
 80115ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	2203      	movs	r2, #3
 80115b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	2200      	movs	r2, #0
 80115bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	68ba      	ldr	r2, [r7, #8]
 80115c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	88fa      	ldrh	r2, [r7, #6]
 80115ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	88fa      	ldrh	r2, [r7, #6]
 80115d2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2200      	movs	r2, #0
 80115da:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	2200      	movs	r2, #0
 80115e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2200      	movs	r2, #0
 80115e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2200      	movs	r2, #0
 80115f0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	2200      	movs	r2, #0
 80115f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	689b      	ldr	r3, [r3, #8]
 80115fc:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8011600:	d108      	bne.n	8011614 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011610:	601a      	str	r2, [r3, #0]
 8011612:	e009      	b.n	8011628 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	68db      	ldr	r3, [r3, #12]
 801161a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011626:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	685a      	ldr	r2, [r3, #4]
 801162e:	4b96      	ldr	r3, [pc, #600]	@ (8011888 <HAL_SPI_Transmit+0x32c>)
 8011630:	4013      	ands	r3, r2
 8011632:	88f9      	ldrh	r1, [r7, #6]
 8011634:	68fa      	ldr	r2, [r7, #12]
 8011636:	6812      	ldr	r2, [r2, #0]
 8011638:	430b      	orrs	r3, r1
 801163a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	681a      	ldr	r2, [r3, #0]
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	f042 0201 	orr.w	r2, r2, #1
 801164a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011654:	d107      	bne.n	8011666 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011664:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	2b0f      	cmp	r3, #15
 801166c:	d947      	bls.n	80116fe <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801166e:	e03f      	b.n	80116f0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	695b      	ldr	r3, [r3, #20]
 8011676:	f003 0302 	and.w	r3, r3, #2
 801167a:	2b02      	cmp	r3, #2
 801167c:	d114      	bne.n	80116a8 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	6812      	ldr	r2, [r2, #0]
 8011688:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801168e:	1d1a      	adds	r2, r3, #4
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801169a:	b29b      	uxth	r3, r3
 801169c:	3b01      	subs	r3, #1
 801169e:	b29a      	uxth	r2, r3
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80116a6:	e023      	b.n	80116f0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80116a8:	f7f1 face 	bl	8002c48 <HAL_GetTick>
 80116ac:	4602      	mov	r2, r0
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	1ad3      	subs	r3, r2, r3
 80116b2:	683a      	ldr	r2, [r7, #0]
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d803      	bhi.n	80116c0 <HAL_SPI_Transmit+0x164>
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116be:	d102      	bne.n	80116c6 <HAL_SPI_Transmit+0x16a>
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d114      	bne.n	80116f0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	f000 fce6 	bl	8012098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80116d2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2201      	movs	r2, #1
 80116e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2200      	movs	r2, #0
 80116e8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80116ec:	2303      	movs	r3, #3
 80116ee:	e11e      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d1b9      	bne.n	8011670 <HAL_SPI_Transmit+0x114>
 80116fc:	e0f1      	b.n	80118e2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	2b07      	cmp	r3, #7
 8011704:	f240 80e6 	bls.w	80118d4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011708:	e05d      	b.n	80117c6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	695b      	ldr	r3, [r3, #20]
 8011710:	f003 0302 	and.w	r3, r3, #2
 8011714:	2b02      	cmp	r3, #2
 8011716:	d132      	bne.n	801177e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801171e:	b29b      	uxth	r3, r3
 8011720:	2b01      	cmp	r3, #1
 8011722:	d918      	bls.n	8011756 <HAL_SPI_Transmit+0x1fa>
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011728:	2b00      	cmp	r3, #0
 801172a:	d014      	beq.n	8011756 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	6812      	ldr	r2, [r2, #0]
 8011736:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801173c:	1d1a      	adds	r2, r3, #4
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011748:	b29b      	uxth	r3, r3
 801174a:	3b02      	subs	r3, #2
 801174c:	b29a      	uxth	r2, r3
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011754:	e037      	b.n	80117c6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801175a:	881a      	ldrh	r2, [r3, #0]
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011764:	1c9a      	adds	r2, r3, #2
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011770:	b29b      	uxth	r3, r3
 8011772:	3b01      	subs	r3, #1
 8011774:	b29a      	uxth	r2, r3
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801177c:	e023      	b.n	80117c6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801177e:	f7f1 fa63 	bl	8002c48 <HAL_GetTick>
 8011782:	4602      	mov	r2, r0
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	1ad3      	subs	r3, r2, r3
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	429a      	cmp	r2, r3
 801178c:	d803      	bhi.n	8011796 <HAL_SPI_Transmit+0x23a>
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011794:	d102      	bne.n	801179c <HAL_SPI_Transmit+0x240>
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d114      	bne.n	80117c6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801179c:	68f8      	ldr	r0, [r7, #12]
 801179e:	f000 fc7b 	bl	8012098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80117a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	2201      	movs	r2, #1
 80117b6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2200      	movs	r2, #0
 80117be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80117c2:	2303      	movs	r3, #3
 80117c4:	e0b3      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d19b      	bne.n	801170a <HAL_SPI_Transmit+0x1ae>
 80117d2:	e086      	b.n	80118e2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	695b      	ldr	r3, [r3, #20]
 80117da:	f003 0302 	and.w	r3, r3, #2
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d154      	bne.n	801188c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	2b03      	cmp	r3, #3
 80117ec:	d918      	bls.n	8011820 <HAL_SPI_Transmit+0x2c4>
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80117f2:	2b40      	cmp	r3, #64	@ 0x40
 80117f4:	d914      	bls.n	8011820 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	6812      	ldr	r2, [r2, #0]
 8011800:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011806:	1d1a      	adds	r2, r3, #4
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011812:	b29b      	uxth	r3, r3
 8011814:	3b04      	subs	r3, #4
 8011816:	b29a      	uxth	r2, r3
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801181e:	e059      	b.n	80118d4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011826:	b29b      	uxth	r3, r3
 8011828:	2b01      	cmp	r3, #1
 801182a:	d917      	bls.n	801185c <HAL_SPI_Transmit+0x300>
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011830:	2b00      	cmp	r3, #0
 8011832:	d013      	beq.n	801185c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011838:	881a      	ldrh	r2, [r3, #0]
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011842:	1c9a      	adds	r2, r3, #2
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801184e:	b29b      	uxth	r3, r3
 8011850:	3b02      	subs	r3, #2
 8011852:	b29a      	uxth	r2, r3
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 801185a:	e03b      	b.n	80118d4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3320      	adds	r3, #32
 8011866:	7812      	ldrb	r2, [r2, #0]
 8011868:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801186e:	1c5a      	adds	r2, r3, #1
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801187a:	b29b      	uxth	r3, r3
 801187c:	3b01      	subs	r3, #1
 801187e:	b29a      	uxth	r2, r3
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011886:	e025      	b.n	80118d4 <HAL_SPI_Transmit+0x378>
 8011888:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801188c:	f7f1 f9dc 	bl	8002c48 <HAL_GetTick>
 8011890:	4602      	mov	r2, r0
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	1ad3      	subs	r3, r2, r3
 8011896:	683a      	ldr	r2, [r7, #0]
 8011898:	429a      	cmp	r2, r3
 801189a:	d803      	bhi.n	80118a4 <HAL_SPI_Transmit+0x348>
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118a2:	d102      	bne.n	80118aa <HAL_SPI_Transmit+0x34e>
 80118a4:	683b      	ldr	r3, [r7, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d114      	bne.n	80118d4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80118aa:	68f8      	ldr	r0, [r7, #12]
 80118ac:	f000 fbf4 	bl	8012098 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2201      	movs	r2, #1
 80118c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 80118d0:	2303      	movs	r3, #3
 80118d2:	e02c      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80118da:	b29b      	uxth	r3, r3
 80118dc:	2b00      	cmp	r3, #0
 80118de:	f47f af79 	bne.w	80117d4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	9300      	str	r3, [sp, #0]
 80118e6:	683b      	ldr	r3, [r7, #0]
 80118e8:	2200      	movs	r2, #0
 80118ea:	2108      	movs	r1, #8
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	f000 fc73 	bl	80121d8 <SPI_WaitOnFlagUntilTimeout>
 80118f2:	4603      	mov	r3, r0
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d007      	beq.n	8011908 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80118fe:	f043 0220 	orr.w	r2, r3, #32
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f000 fbc5 	bl	8012098 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2201      	movs	r2, #1
 8011912:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2200      	movs	r2, #0
 801191a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011924:	2b00      	cmp	r3, #0
 8011926:	d001      	beq.n	801192c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	e000      	b.n	801192e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 801192c:	2300      	movs	r3, #0
  }
}
 801192e:	4618      	mov	r0, r3
 8011930:	3718      	adds	r7, #24
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop

08011938 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	60f8      	str	r0, [r7, #12]
 8011940:	60b9      	str	r1, [r7, #8]
 8011942:	4613      	mov	r3, r2
 8011944:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801194c:	b2db      	uxtb	r3, r3
 801194e:	2b01      	cmp	r3, #1
 8011950:	d001      	beq.n	8011956 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8011952:	2302      	movs	r3, #2
 8011954:	e126      	b.n	8011ba4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d002      	beq.n	8011962 <HAL_SPI_Transmit_DMA+0x2a>
 801195c:	88fb      	ldrh	r3, [r7, #6]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d101      	bne.n	8011966 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8011962:	2301      	movs	r3, #1
 8011964:	e11e      	b.n	8011ba4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801196c:	2b01      	cmp	r3, #1
 801196e:	d101      	bne.n	8011974 <HAL_SPI_Transmit_DMA+0x3c>
 8011970:	2302      	movs	r3, #2
 8011972:	e117      	b.n	8011ba4 <HAL_SPI_Transmit_DMA+0x26c>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	2201      	movs	r2, #1
 8011978:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2203      	movs	r2, #3
 8011980:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2200      	movs	r2, #0
 8011988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	68ba      	ldr	r2, [r7, #8]
 8011990:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	88fa      	ldrh	r2, [r7, #6]
 8011996:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	88fa      	ldrh	r2, [r7, #6]
 801199e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2200      	movs	r2, #0
 80119a6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2200      	movs	r2, #0
 80119ac:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2200      	movs	r2, #0
 80119b2:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2200      	movs	r2, #0
 80119c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	689b      	ldr	r3, [r3, #8]
 80119c8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80119cc:	d108      	bne.n	80119e0 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80119dc:	601a      	str	r2, [r3, #0]
 80119de:	e009      	b.n	80119f4 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	68db      	ldr	r3, [r3, #12]
 80119e6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80119f2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	2b0f      	cmp	r3, #15
 80119fa:	d905      	bls.n	8011a08 <HAL_SPI_Transmit_DMA+0xd0>
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a00:	699b      	ldr	r3, [r3, #24]
 8011a02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a06:	d10f      	bne.n	8011a28 <HAL_SPI_Transmit_DMA+0xf0>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8011a0c:	2b07      	cmp	r3, #7
 8011a0e:	d911      	bls.n	8011a34 <HAL_SPI_Transmit_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a14:	699b      	ldr	r3, [r3, #24]
 8011a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a1a:	d00b      	beq.n	8011a34 <HAL_SPI_Transmit_DMA+0xfc>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a20:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8011a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a26:	d005      	beq.n	8011a34 <HAL_SPI_Transmit_DMA+0xfc>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return HAL_ERROR;
 8011a30:	2301      	movs	r3, #1
 8011a32:	e0b7      	b.n	8011ba4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	2b07      	cmp	r3, #7
 8011a3a:	d820      	bhi.n	8011a7e <HAL_SPI_Transmit_DMA+0x146>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a40:	699b      	ldr	r3, [r3, #24]
 8011a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8011a46:	d109      	bne.n	8011a5c <HAL_SPI_Transmit_DMA+0x124>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	3301      	adds	r3, #1
 8011a52:	105b      	asrs	r3, r3, #1
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a60:	699b      	ldr	r3, [r3, #24]
 8011a62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a66:	d11e      	bne.n	8011aa6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	3303      	adds	r3, #3
 8011a72:	109b      	asrs	r3, r3, #2
 8011a74:	b29a      	uxth	r2, r3
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8011a7c:	e013      	b.n	8011aa6 <HAL_SPI_Transmit_DMA+0x16e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	2b0f      	cmp	r3, #15
 8011a84:	d80f      	bhi.n	8011aa6 <HAL_SPI_Transmit_DMA+0x16e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011a8a:	699b      	ldr	r3, [r3, #24]
 8011a8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011a90:	d109      	bne.n	8011aa6 <HAL_SPI_Transmit_DMA+0x16e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	105b      	asrs	r3, r3, #1
 8011a9e:	b29a      	uxth	r2, r3
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011aaa:	4a40      	ldr	r2, [pc, #256]	@ (8011bac <HAL_SPI_Transmit_DMA+0x274>)
 8011aac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8011bb0 <HAL_SPI_Transmit_DMA+0x278>)
 8011ab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011aba:	4a3e      	ldr	r2, [pc, #248]	@ (8011bb4 <HAL_SPI_Transmit_DMA+0x27c>)
 8011abc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	689a      	ldr	r2, [r3, #8]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011ad4:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011ade:	4619      	mov	r1, r3
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	3320      	adds	r3, #32
 8011ae6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8011aee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8011af0:	f7f3 f87c 	bl	8004bec <HAL_DMA_Start_IT>
 8011af4:	4603      	mov	r3, r0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d011      	beq.n	8011b1e <HAL_SPI_Transmit_DMA+0x1e6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011b00:	f043 0210 	orr.w	r2, r3, #16
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    return HAL_ERROR;
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	e042      	b.n	8011ba4 <HAL_SPI_Transmit_DMA+0x26c>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b22:	69db      	ldr	r3, [r3, #28]
 8011b24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b28:	d108      	bne.n	8011b3c <HAL_SPI_Transmit_DMA+0x204>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	6859      	ldr	r1, [r3, #4]
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	4b20      	ldr	r3, [pc, #128]	@ (8011bb8 <HAL_SPI_Transmit_DMA+0x280>)
 8011b36:	400b      	ands	r3, r1
 8011b38:	6053      	str	r3, [r2, #4]
 8011b3a:	e009      	b.n	8011b50 <HAL_SPI_Transmit_DMA+0x218>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	685a      	ldr	r2, [r3, #4]
 8011b42:	4b1d      	ldr	r3, [pc, #116]	@ (8011bb8 <HAL_SPI_Transmit_DMA+0x280>)
 8011b44:	4013      	ands	r3, r2
 8011b46:	88f9      	ldrh	r1, [r7, #6]
 8011b48:	68fa      	ldr	r2, [r7, #12]
 8011b4a:	6812      	ldr	r2, [r2, #0]
 8011b4c:	430b      	orrs	r3, r1
 8011b4e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	689a      	ldr	r2, [r3, #8]
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011b5e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	691a      	ldr	r2, [r3, #16]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8011b6e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	681a      	ldr	r2, [r3, #0]
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f042 0201 	orr.w	r2, r2, #1
 8011b7e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8011b88:	d107      	bne.n	8011b9a <HAL_SPI_Transmit_DMA+0x262>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011b98:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8011ba2:	2300      	movs	r3, #0
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3710      	adds	r7, #16
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	08012003 	.word	0x08012003
 8011bb0:	08011fbd 	.word	0x08011fbd
 8011bb4:	0801201f 	.word	0x0801201f
 8011bb8:	ffff0000 	.word	0xffff0000

08011bbc <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b08a      	sub	sp, #40	@ 0x28
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	691b      	ldr	r3, [r3, #16]
 8011bca:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	695b      	ldr	r3, [r3, #20]
 8011bd2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8011bd4:	6a3a      	ldr	r2, [r7, #32]
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	4013      	ands	r3, r2
 8011bda:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8011be4:	2300      	movs	r3, #0
 8011be6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011bee:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	3330      	adds	r3, #48	@ 0x30
 8011bf6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d010      	beq.n	8011c24 <HAL_SPI_IRQHandler+0x68>
 8011c02:	6a3b      	ldr	r3, [r7, #32]
 8011c04:	f003 0308 	and.w	r3, r3, #8
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d00b      	beq.n	8011c24 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	699a      	ldr	r2, [r3, #24]
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011c1a:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 f9c3 	bl	8011fa8 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8011c22:	e192      	b.n	8011f4a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d113      	bne.n	8011c56 <HAL_SPI_IRQHandler+0x9a>
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	f003 0320 	and.w	r3, r3, #32
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d10e      	bne.n	8011c56 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8011c38:	69bb      	ldr	r3, [r7, #24]
 8011c3a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d009      	beq.n	8011c56 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	4798      	blx	r3
    hspi->RxISR(hspi);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c4e:	6878      	ldr	r0, [r7, #4]
 8011c50:	4798      	blx	r3
    handled = 1UL;
 8011c52:	2301      	movs	r3, #1
 8011c54:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d10f      	bne.n	8011c80 <HAL_SPI_IRQHandler+0xc4>
 8011c60:	69bb      	ldr	r3, [r7, #24]
 8011c62:	f003 0301 	and.w	r3, r3, #1
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d00a      	beq.n	8011c80 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d105      	bne.n	8011c80 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c78:	6878      	ldr	r0, [r7, #4]
 8011c7a:	4798      	blx	r3
    handled = 1UL;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	f003 0320 	and.w	r3, r3, #32
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d10f      	bne.n	8011caa <HAL_SPI_IRQHandler+0xee>
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	f003 0302 	and.w	r3, r3, #2
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d00a      	beq.n	8011caa <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8011c94:	69bb      	ldr	r3, [r7, #24]
 8011c96:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d105      	bne.n	8011caa <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	4798      	blx	r3
    handled = 1UL;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8011caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	f040 8147 	bne.w	8011f40 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	f003 0308 	and.w	r3, r3, #8
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	f000 808b 	beq.w	8011dd4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	699a      	ldr	r2, [r3, #24]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f042 0208 	orr.w	r2, r2, #8
 8011ccc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	699a      	ldr	r2, [r3, #24]
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	f042 0210 	orr.w	r2, r2, #16
 8011cdc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	699a      	ldr	r2, [r3, #24]
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8011cec:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	691a      	ldr	r2, [r3, #16]
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	f022 0208 	bic.w	r2, r2, #8
 8011cfc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d13d      	bne.n	8011d88 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8011d0c:	e036      	b.n	8011d7c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	2b0f      	cmp	r3, #15
 8011d14:	d90b      	bls.n	8011d2e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8011d20:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d26:	1d1a      	adds	r2, r3, #4
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	665a      	str	r2, [r3, #100]	@ 0x64
 8011d2c:	e01d      	b.n	8011d6a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	2b07      	cmp	r3, #7
 8011d34:	d90b      	bls.n	8011d4e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d3a:	68fa      	ldr	r2, [r7, #12]
 8011d3c:	8812      	ldrh	r2, [r2, #0]
 8011d3e:	b292      	uxth	r2, r2
 8011d40:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d46:	1c9a      	adds	r2, r3, #2
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	665a      	str	r2, [r3, #100]	@ 0x64
 8011d4c:	e00d      	b.n	8011d6a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d5a:	7812      	ldrb	r2, [r2, #0]
 8011d5c:	b2d2      	uxtb	r2, r2
 8011d5e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011d64:	1c5a      	adds	r2, r3, #1
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	3b01      	subs	r3, #1
 8011d74:	b29a      	uxth	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d1c2      	bne.n	8011d0e <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f000 f985 	bl	8012098 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d003      	beq.n	8011da8 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 f8f7 	bl	8011f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011da6:	e0d0      	b.n	8011f4a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8011da8:	7cfb      	ldrb	r3, [r7, #19]
 8011daa:	2b05      	cmp	r3, #5
 8011dac:	d103      	bne.n	8011db6 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f8dc 	bl	8011f6c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8011db4:	e0c6      	b.n	8011f44 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8011db6:	7cfb      	ldrb	r3, [r7, #19]
 8011db8:	2b04      	cmp	r3, #4
 8011dba:	d103      	bne.n	8011dc4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f000 f8cb 	bl	8011f58 <HAL_SPI_RxCpltCallback>
    return;
 8011dc2:	e0bf      	b.n	8011f44 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8011dc4:	7cfb      	ldrb	r3, [r7, #19]
 8011dc6:	2b03      	cmp	r3, #3
 8011dc8:	f040 80bc 	bne.w	8011f44 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f7ef fbfb 	bl	80015c8 <HAL_SPI_TxCpltCallback>
    return;
 8011dd2:	e0b7      	b.n	8011f44 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	f000 80b5 	beq.w	8011f4a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00f      	beq.n	8011e0a <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011df0:	f043 0204 	orr.w	r2, r3, #4
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	699a      	ldr	r2, [r3, #24]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011e08:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8011e0a:	69bb      	ldr	r3, [r7, #24]
 8011e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d00f      	beq.n	8011e34 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e1a:	f043 0201 	orr.w	r2, r3, #1
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	699a      	ldr	r2, [r3, #24]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011e32:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00f      	beq.n	8011e5e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e44:	f043 0208 	orr.w	r2, r3, #8
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	699a      	ldr	r2, [r3, #24]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8011e5c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8011e5e:	69bb      	ldr	r3, [r7, #24]
 8011e60:	f003 0320 	and.w	r3, r3, #32
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d00f      	beq.n	8011e88 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	699a      	ldr	r2, [r3, #24]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f042 0220 	orr.w	r2, r2, #32
 8011e86:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d05a      	beq.n	8011f48 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	f022 0201 	bic.w	r2, r2, #1
 8011ea0:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	6919      	ldr	r1, [r3, #16]
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	4b28      	ldr	r3, [pc, #160]	@ (8011f50 <HAL_SPI_IRQHandler+0x394>)
 8011eae:	400b      	ands	r3, r1
 8011eb0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8011eb8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8011ebc:	d138      	bne.n	8011f30 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	689a      	ldr	r2, [r3, #8]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8011ecc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d013      	beq.n	8011efe <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eda:	4a1e      	ldr	r2, [pc, #120]	@ (8011f54 <HAL_SPI_IRQHandler+0x398>)
 8011edc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7f3 fc0a 	bl	80056fc <HAL_DMA_Abort_IT>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d007      	beq.n	8011efe <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ef4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d020      	beq.n	8011f48 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f0a:	4a12      	ldr	r2, [pc, #72]	@ (8011f54 <HAL_SPI_IRQHandler+0x398>)
 8011f0c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7f3 fbf2 	bl	80056fc <HAL_DMA_Abort_IT>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d014      	beq.n	8011f48 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011f24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8011f2e:	e00b      	b.n	8011f48 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	2201      	movs	r2, #1
 8011f34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 f82b 	bl	8011f94 <HAL_SPI_ErrorCallback>
    return;
 8011f3e:	e003      	b.n	8011f48 <HAL_SPI_IRQHandler+0x38c>
    return;
 8011f40:	bf00      	nop
 8011f42:	e002      	b.n	8011f4a <HAL_SPI_IRQHandler+0x38e>
    return;
 8011f44:	bf00      	nop
 8011f46:	e000      	b.n	8011f4a <HAL_SPI_IRQHandler+0x38e>
    return;
 8011f48:	bf00      	nop
  }
}
 8011f4a:	3728      	adds	r7, #40	@ 0x28
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	fffffc94 	.word	0xfffffc94
 8011f54:	08012065 	.word	0x08012065

08011f58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b083      	sub	sp, #12
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8011f60:	bf00      	nop
 8011f62:	370c      	adds	r7, #12
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8011f74:	bf00      	nop
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011f88:	bf00      	nop
 8011f8a:	370c      	adds	r7, #12
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f92:	4770      	bx	lr

08011f94 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011f94:	b480      	push	{r7}
 8011f96:	b083      	sub	sp, #12
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011f9c:	bf00      	nop
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr

08011fa8 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8011fb0:	bf00      	nop
 8011fb2:	370c      	adds	r7, #12
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fba:	4770      	bx	lr

08011fbc <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011fc8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011fd0:	b2db      	uxtb	r3, r3
 8011fd2:	2b07      	cmp	r3, #7
 8011fd4:	d011      	beq.n	8011ffa <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011fda:	69db      	ldr	r3, [r3, #28]
 8011fdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011fe0:	d103      	bne.n	8011fea <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8011fe2:	68f8      	ldr	r0, [r7, #12]
 8011fe4:	f7ef faf0 	bl	80015c8 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8011fe8:	e007      	b.n	8011ffa <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	691a      	ldr	r2, [r3, #16]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f042 0208 	orr.w	r2, r2, #8
 8011ff8:	611a      	str	r2, [r3, #16]
}
 8011ffa:	bf00      	nop
 8011ffc:	3710      	adds	r7, #16
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b084      	sub	sp, #16
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801200e:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	f7ff ffb5 	bl	8011f80 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012016:	bf00      	nop
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b084      	sub	sp, #16
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801202a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7f4 fce3 	bl	80069f8 <HAL_DMA_GetError>
 8012032:	4603      	mov	r3, r0
 8012034:	2b02      	cmp	r3, #2
 8012036:	d011      	beq.n	801205c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f000 f82d 	bl	8012098 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012044:	f043 0210 	orr.w	r2, r3, #16
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2201      	movs	r2, #1
 8012052:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f7ff ff9c 	bl	8011f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 801205c:	bf00      	nop
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012070:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2200      	movs	r2, #0
 8012076:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2200      	movs	r2, #0
 801207e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2201      	movs	r2, #1
 8012086:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801208a:	68f8      	ldr	r0, [r7, #12]
 801208c:	f7ff ff82 	bl	8011f94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012090:	bf00      	nop
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}

08012098 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8012098:	b480      	push	{r7}
 801209a:	b085      	sub	sp, #20
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	695b      	ldr	r3, [r3, #20]
 80120a6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	699a      	ldr	r2, [r3, #24]
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f042 0208 	orr.w	r2, r2, #8
 80120b6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	699a      	ldr	r2, [r3, #24]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f042 0210 	orr.w	r2, r2, #16
 80120c6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	681a      	ldr	r2, [r3, #0]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f022 0201 	bic.w	r2, r2, #1
 80120d6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	6919      	ldr	r1, [r3, #16]
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	681a      	ldr	r2, [r3, #0]
 80120e2:	4b3c      	ldr	r3, [pc, #240]	@ (80121d4 <SPI_CloseTransfer+0x13c>)
 80120e4:	400b      	ands	r3, r1
 80120e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	689a      	ldr	r2, [r3, #8]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80120f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b04      	cmp	r3, #4
 8012102:	d014      	beq.n	801212e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	f003 0320 	and.w	r3, r3, #32
 801210a:	2b00      	cmp	r3, #0
 801210c:	d00f      	beq.n	801212e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012114:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	699a      	ldr	r2, [r3, #24]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f042 0220 	orr.w	r2, r2, #32
 801212c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8012134:	b2db      	uxtb	r3, r3
 8012136:	2b03      	cmp	r3, #3
 8012138:	d014      	beq.n	8012164 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012140:	2b00      	cmp	r3, #0
 8012142:	d00f      	beq.n	8012164 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801214a:	f043 0204 	orr.w	r2, r3, #4
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	699a      	ldr	r2, [r3, #24]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012162:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801216a:	2b00      	cmp	r3, #0
 801216c:	d00f      	beq.n	801218e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012174:	f043 0201 	orr.w	r2, r3, #1
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	699a      	ldr	r2, [r3, #24]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801218c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012194:	2b00      	cmp	r3, #0
 8012196:	d00f      	beq.n	80121b8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801219e:	f043 0208 	orr.w	r2, r3, #8
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	699a      	ldr	r2, [r3, #24]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80121b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	2200      	movs	r2, #0
 80121bc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2200      	movs	r2, #0
 80121c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80121c8:	bf00      	nop
 80121ca:	3714      	adds	r7, #20
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr
 80121d4:	fffffc90 	.word	0xfffffc90

080121d8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	60f8      	str	r0, [r7, #12]
 80121e0:	60b9      	str	r1, [r7, #8]
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	4613      	mov	r3, r2
 80121e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80121e8:	e010      	b.n	801220c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80121ea:	f7f0 fd2d 	bl	8002c48 <HAL_GetTick>
 80121ee:	4602      	mov	r2, r0
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	1ad3      	subs	r3, r2, r3
 80121f4:	683a      	ldr	r2, [r7, #0]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d803      	bhi.n	8012202 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012200:	d102      	bne.n	8012208 <SPI_WaitOnFlagUntilTimeout+0x30>
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012208:	2303      	movs	r3, #3
 801220a:	e00f      	b.n	801222c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	695a      	ldr	r2, [r3, #20]
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	4013      	ands	r3, r2
 8012216:	68ba      	ldr	r2, [r7, #8]
 8012218:	429a      	cmp	r2, r3
 801221a:	bf0c      	ite	eq
 801221c:	2301      	moveq	r3, #1
 801221e:	2300      	movne	r3, #0
 8012220:	b2db      	uxtb	r3, r3
 8012222:	461a      	mov	r2, r3
 8012224:	79fb      	ldrb	r3, [r7, #7]
 8012226:	429a      	cmp	r2, r3
 8012228:	d0df      	beq.n	80121ea <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801222a:	2300      	movs	r3, #0
}
 801222c:	4618      	mov	r0, r3
 801222e:	3710      	adds	r7, #16
 8012230:	46bd      	mov	sp, r7
 8012232:	bd80      	pop	{r7, pc}

08012234 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8012234:	b480      	push	{r7}
 8012236:	b085      	sub	sp, #20
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012240:	095b      	lsrs	r3, r3, #5
 8012242:	3301      	adds	r3, #1
 8012244:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	3301      	adds	r3, #1
 801224c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	3307      	adds	r3, #7
 8012252:	08db      	lsrs	r3, r3, #3
 8012254:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	fb02 f303 	mul.w	r3, r2, r3
}
 801225e:	4618      	mov	r0, r3
 8012260:	3714      	adds	r7, #20
 8012262:	46bd      	mov	sp, r7
 8012264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012268:	4770      	bx	lr

0801226a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801226a:	b580      	push	{r7, lr}
 801226c:	b082      	sub	sp, #8
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d101      	bne.n	801227c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012278:	2301      	movs	r3, #1
 801227a:	e042      	b.n	8012302 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012282:	2b00      	cmp	r3, #0
 8012284:	d106      	bne.n	8012294 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2200      	movs	r2, #0
 801228a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f7ef ff2e 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2224      	movs	r2, #36	@ 0x24
 8012298:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	f022 0201 	bic.w	r2, r2, #1
 80122aa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d002      	beq.n	80122ba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f001 fa6b 	bl	8013790 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f000 fd00 	bl	8012cc0 <UART_SetConfig>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	d101      	bne.n	80122ca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80122c6:	2301      	movs	r3, #1
 80122c8:	e01b      	b.n	8012302 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	685a      	ldr	r2, [r3, #4]
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80122d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	689a      	ldr	r2, [r3, #8]
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80122e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f042 0201 	orr.w	r2, r2, #1
 80122f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f001 faea 	bl	80138d4 <UART_CheckIdleState>
 8012300:	4603      	mov	r3, r0
}
 8012302:	4618      	mov	r0, r3
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b08a      	sub	sp, #40	@ 0x28
 801230e:	af02      	add	r7, sp, #8
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	603b      	str	r3, [r7, #0]
 8012316:	4613      	mov	r3, r2
 8012318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012320:	2b20      	cmp	r3, #32
 8012322:	d17b      	bne.n	801241c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <HAL_UART_Transmit+0x26>
 801232a:	88fb      	ldrh	r3, [r7, #6]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d101      	bne.n	8012334 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012330:	2301      	movs	r3, #1
 8012332:	e074      	b.n	801241e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2221      	movs	r2, #33	@ 0x21
 8012340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012344:	f7f0 fc80 	bl	8002c48 <HAL_GetTick>
 8012348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	88fa      	ldrh	r2, [r7, #6]
 801234e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	88fa      	ldrh	r2, [r7, #6]
 8012356:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	689b      	ldr	r3, [r3, #8]
 801235e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012362:	d108      	bne.n	8012376 <HAL_UART_Transmit+0x6c>
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	691b      	ldr	r3, [r3, #16]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d104      	bne.n	8012376 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 801236c:	2300      	movs	r3, #0
 801236e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	61bb      	str	r3, [r7, #24]
 8012374:	e003      	b.n	801237e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801237a:	2300      	movs	r3, #0
 801237c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801237e:	e030      	b.n	80123e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	9300      	str	r3, [sp, #0]
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	2200      	movs	r2, #0
 8012388:	2180      	movs	r1, #128	@ 0x80
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f001 fb4c 	bl	8013a28 <UART_WaitOnFlagUntilTimeout>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d005      	beq.n	80123a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2220      	movs	r2, #32
 801239a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 801239e:	2303      	movs	r3, #3
 80123a0:	e03d      	b.n	801241e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d10b      	bne.n	80123c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	881b      	ldrh	r3, [r3, #0]
 80123ac:	461a      	mov	r2, r3
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80123b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	3302      	adds	r3, #2
 80123bc:	61bb      	str	r3, [r7, #24]
 80123be:	e007      	b.n	80123d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	781a      	ldrb	r2, [r3, #0]
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	3301      	adds	r3, #1
 80123ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	3b01      	subs	r3, #1
 80123da:	b29a      	uxth	r2, r3
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d1c8      	bne.n	8012380 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	9300      	str	r3, [sp, #0]
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2200      	movs	r2, #0
 80123f6:	2140      	movs	r1, #64	@ 0x40
 80123f8:	68f8      	ldr	r0, [r7, #12]
 80123fa:	f001 fb15 	bl	8013a28 <UART_WaitOnFlagUntilTimeout>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d005      	beq.n	8012410 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	2220      	movs	r2, #32
 8012408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801240c:	2303      	movs	r3, #3
 801240e:	e006      	b.n	801241e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2220      	movs	r2, #32
 8012414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8012418:	2300      	movs	r3, #0
 801241a:	e000      	b.n	801241e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801241c:	2302      	movs	r3, #2
  }
}
 801241e:	4618      	mov	r0, r3
 8012420:	3720      	adds	r7, #32
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
	...

08012428 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b08a      	sub	sp, #40	@ 0x28
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	4613      	mov	r3, r2
 8012434:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801243c:	2b20      	cmp	r3, #32
 801243e:	d137      	bne.n	80124b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d002      	beq.n	801244c <HAL_UART_Receive_DMA+0x24>
 8012446:	88fb      	ldrh	r3, [r7, #6]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d101      	bne.n	8012450 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801244c:	2301      	movs	r3, #1
 801244e:	e030      	b.n	80124b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2200      	movs	r2, #0
 8012454:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	4a18      	ldr	r2, [pc, #96]	@ (80124bc <HAL_UART_Receive_DMA+0x94>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d01f      	beq.n	80124a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801246a:	2b00      	cmp	r3, #0
 801246c:	d018      	beq.n	80124a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	e853 3f00 	ldrex	r3, [r3]
 801247a:	613b      	str	r3, [r7, #16]
   return(result);
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8012482:	627b      	str	r3, [r7, #36]	@ 0x24
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	461a      	mov	r2, r3
 801248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801248c:	623b      	str	r3, [r7, #32]
 801248e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012490:	69f9      	ldr	r1, [r7, #28]
 8012492:	6a3a      	ldr	r2, [r7, #32]
 8012494:	e841 2300 	strex	r3, r2, [r1]
 8012498:	61bb      	str	r3, [r7, #24]
   return(result);
 801249a:	69bb      	ldr	r3, [r7, #24]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d1e6      	bne.n	801246e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80124a0:	88fb      	ldrh	r3, [r7, #6]
 80124a2:	461a      	mov	r2, r3
 80124a4:	68b9      	ldr	r1, [r7, #8]
 80124a6:	68f8      	ldr	r0, [r7, #12]
 80124a8:	f001 fb2c 	bl	8013b04 <UART_Start_Receive_DMA>
 80124ac:	4603      	mov	r3, r0
 80124ae:	e000      	b.n	80124b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80124b0:	2302      	movs	r3, #2
  }
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3728      	adds	r7, #40	@ 0x28
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	58000c00 	.word	0x58000c00

080124c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b0ba      	sub	sp, #232	@ 0xe8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	69db      	ldr	r3, [r3, #28]
 80124ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	689b      	ldr	r3, [r3, #8]
 80124e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80124e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80124ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80124ee:	4013      	ands	r3, r2
 80124f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80124f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d11b      	bne.n	8012534 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80124fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012500:	f003 0320 	and.w	r3, r3, #32
 8012504:	2b00      	cmp	r3, #0
 8012506:	d015      	beq.n	8012534 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801250c:	f003 0320 	and.w	r3, r3, #32
 8012510:	2b00      	cmp	r3, #0
 8012512:	d105      	bne.n	8012520 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801251c:	2b00      	cmp	r3, #0
 801251e:	d009      	beq.n	8012534 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012524:	2b00      	cmp	r3, #0
 8012526:	f000 8393 	beq.w	8012c50 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	4798      	blx	r3
      }
      return;
 8012532:	e38d      	b.n	8012c50 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012538:	2b00      	cmp	r3, #0
 801253a:	f000 8123 	beq.w	8012784 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801253e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012542:	4b8d      	ldr	r3, [pc, #564]	@ (8012778 <HAL_UART_IRQHandler+0x2b8>)
 8012544:	4013      	ands	r3, r2
 8012546:	2b00      	cmp	r3, #0
 8012548:	d106      	bne.n	8012558 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801254a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801254e:	4b8b      	ldr	r3, [pc, #556]	@ (801277c <HAL_UART_IRQHandler+0x2bc>)
 8012550:	4013      	ands	r3, r2
 8012552:	2b00      	cmp	r3, #0
 8012554:	f000 8116 	beq.w	8012784 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801255c:	f003 0301 	and.w	r3, r3, #1
 8012560:	2b00      	cmp	r3, #0
 8012562:	d011      	beq.n	8012588 <HAL_UART_IRQHandler+0xc8>
 8012564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801256c:	2b00      	cmp	r3, #0
 801256e:	d00b      	beq.n	8012588 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	2201      	movs	r2, #1
 8012576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801257e:	f043 0201 	orr.w	r2, r3, #1
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801258c:	f003 0302 	and.w	r3, r3, #2
 8012590:	2b00      	cmp	r3, #0
 8012592:	d011      	beq.n	80125b8 <HAL_UART_IRQHandler+0xf8>
 8012594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012598:	f003 0301 	and.w	r3, r3, #1
 801259c:	2b00      	cmp	r3, #0
 801259e:	d00b      	beq.n	80125b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	2202      	movs	r2, #2
 80125a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80125ae:	f043 0204 	orr.w	r2, r3, #4
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125bc:	f003 0304 	and.w	r3, r3, #4
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d011      	beq.n	80125e8 <HAL_UART_IRQHandler+0x128>
 80125c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80125c8:	f003 0301 	and.w	r3, r3, #1
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d00b      	beq.n	80125e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	2204      	movs	r2, #4
 80125d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80125de:	f043 0202 	orr.w	r2, r3, #2
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80125e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80125ec:	f003 0308 	and.w	r3, r3, #8
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d017      	beq.n	8012624 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80125f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80125f8:	f003 0320 	and.w	r3, r3, #32
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d105      	bne.n	801260c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012600:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012604:	4b5c      	ldr	r3, [pc, #368]	@ (8012778 <HAL_UART_IRQHandler+0x2b8>)
 8012606:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00b      	beq.n	8012624 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	2208      	movs	r2, #8
 8012612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801261a:	f043 0208 	orr.w	r2, r3, #8
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801262c:	2b00      	cmp	r3, #0
 801262e:	d012      	beq.n	8012656 <HAL_UART_IRQHandler+0x196>
 8012630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012634:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00c      	beq.n	8012656 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801264c:	f043 0220 	orr.w	r2, r3, #32
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801265c:	2b00      	cmp	r3, #0
 801265e:	f000 82f9 	beq.w	8012c54 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012666:	f003 0320 	and.w	r3, r3, #32
 801266a:	2b00      	cmp	r3, #0
 801266c:	d013      	beq.n	8012696 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801266e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012672:	f003 0320 	and.w	r3, r3, #32
 8012676:	2b00      	cmp	r3, #0
 8012678:	d105      	bne.n	8012686 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801267a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801267e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012682:	2b00      	cmp	r3, #0
 8012684:	d007      	beq.n	8012696 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801268a:	2b00      	cmp	r3, #0
 801268c:	d003      	beq.n	8012696 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012692:	6878      	ldr	r0, [r7, #4]
 8012694:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801269c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126aa:	2b40      	cmp	r3, #64	@ 0x40
 80126ac:	d005      	beq.n	80126ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80126ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80126b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d054      	beq.n	8012764 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f001 fb0a 	bl	8013cd4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	689b      	ldr	r3, [r3, #8]
 80126c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126ca:	2b40      	cmp	r3, #64	@ 0x40
 80126cc:	d146      	bne.n	801275c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	3308      	adds	r3, #8
 80126d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80126dc:	e853 3f00 	ldrex	r3, [r3]
 80126e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80126e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80126e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80126ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	3308      	adds	r3, #8
 80126f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80126fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80126fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012702:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8012706:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801270a:	e841 2300 	strex	r3, r2, [r1]
 801270e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8012712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d1d9      	bne.n	80126ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012720:	2b00      	cmp	r3, #0
 8012722:	d017      	beq.n	8012754 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801272a:	4a15      	ldr	r2, [pc, #84]	@ (8012780 <HAL_UART_IRQHandler+0x2c0>)
 801272c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012734:	4618      	mov	r0, r3
 8012736:	f7f2 ffe1 	bl	80056fc <HAL_DMA_Abort_IT>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d019      	beq.n	8012774 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012748:	687a      	ldr	r2, [r7, #4]
 801274a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801274e:	4610      	mov	r0, r2
 8012750:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012752:	e00f      	b.n	8012774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 fa9d 	bl	8012c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801275a:	e00b      	b.n	8012774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fa99 	bl	8012c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012762:	e007      	b.n	8012774 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 fa95 	bl	8012c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	2200      	movs	r2, #0
 801276e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8012772:	e26f      	b.n	8012c54 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012774:	bf00      	nop
    return;
 8012776:	e26d      	b.n	8012c54 <HAL_UART_IRQHandler+0x794>
 8012778:	10000001 	.word	0x10000001
 801277c:	04000120 	.word	0x04000120
 8012780:	08013f87 	.word	0x08013f87

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012788:	2b01      	cmp	r3, #1
 801278a:	f040 8203 	bne.w	8012b94 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801278e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012792:	f003 0310 	and.w	r3, r3, #16
 8012796:	2b00      	cmp	r3, #0
 8012798:	f000 81fc 	beq.w	8012b94 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801279c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80127a0:	f003 0310 	and.w	r3, r3, #16
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	f000 81f5 	beq.w	8012b94 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2210      	movs	r2, #16
 80127b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	689b      	ldr	r3, [r3, #8]
 80127b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80127bc:	2b40      	cmp	r3, #64	@ 0x40
 80127be:	f040 816d 	bne.w	8012a9c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	4aa4      	ldr	r2, [pc, #656]	@ (8012a5c <HAL_UART_IRQHandler+0x59c>)
 80127cc:	4293      	cmp	r3, r2
 80127ce:	d068      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4aa1      	ldr	r2, [pc, #644]	@ (8012a60 <HAL_UART_IRQHandler+0x5a0>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d061      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	4a9f      	ldr	r2, [pc, #636]	@ (8012a64 <HAL_UART_IRQHandler+0x5a4>)
 80127e8:	4293      	cmp	r3, r2
 80127ea:	d05a      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4a9c      	ldr	r2, [pc, #624]	@ (8012a68 <HAL_UART_IRQHandler+0x5a8>)
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d053      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	4a9a      	ldr	r2, [pc, #616]	@ (8012a6c <HAL_UART_IRQHandler+0x5ac>)
 8012804:	4293      	cmp	r3, r2
 8012806:	d04c      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4a97      	ldr	r2, [pc, #604]	@ (8012a70 <HAL_UART_IRQHandler+0x5b0>)
 8012812:	4293      	cmp	r3, r2
 8012814:	d045      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4a95      	ldr	r2, [pc, #596]	@ (8012a74 <HAL_UART_IRQHandler+0x5b4>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d03e      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a92      	ldr	r2, [pc, #584]	@ (8012a78 <HAL_UART_IRQHandler+0x5b8>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d037      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a90      	ldr	r2, [pc, #576]	@ (8012a7c <HAL_UART_IRQHandler+0x5bc>)
 801283c:	4293      	cmp	r3, r2
 801283e:	d030      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	4a8d      	ldr	r2, [pc, #564]	@ (8012a80 <HAL_UART_IRQHandler+0x5c0>)
 801284a:	4293      	cmp	r3, r2
 801284c:	d029      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	4a8b      	ldr	r2, [pc, #556]	@ (8012a84 <HAL_UART_IRQHandler+0x5c4>)
 8012858:	4293      	cmp	r3, r2
 801285a:	d022      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4a88      	ldr	r2, [pc, #544]	@ (8012a88 <HAL_UART_IRQHandler+0x5c8>)
 8012866:	4293      	cmp	r3, r2
 8012868:	d01b      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	4a86      	ldr	r2, [pc, #536]	@ (8012a8c <HAL_UART_IRQHandler+0x5cc>)
 8012874:	4293      	cmp	r3, r2
 8012876:	d014      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a83      	ldr	r2, [pc, #524]	@ (8012a90 <HAL_UART_IRQHandler+0x5d0>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d00d      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	4a81      	ldr	r2, [pc, #516]	@ (8012a94 <HAL_UART_IRQHandler+0x5d4>)
 8012890:	4293      	cmp	r3, r2
 8012892:	d006      	beq.n	80128a2 <HAL_UART_IRQHandler+0x3e2>
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4a7e      	ldr	r2, [pc, #504]	@ (8012a98 <HAL_UART_IRQHandler+0x5d8>)
 801289e:	4293      	cmp	r3, r2
 80128a0:	d106      	bne.n	80128b0 <HAL_UART_IRQHandler+0x3f0>
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	e005      	b.n	80128bc <HAL_UART_IRQHandler+0x3fc>
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80128c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	f000 80ad 	beq.w	8012a24 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80128d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80128d4:	429a      	cmp	r2, r3
 80128d6:	f080 80a5 	bcs.w	8012a24 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80128e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80128ea:	69db      	ldr	r3, [r3, #28]
 80128ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80128f0:	f000 8087 	beq.w	8012a02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012900:	e853 3f00 	ldrex	r3, [r3]
 8012904:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8012908:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801290c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8012910:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	461a      	mov	r2, r3
 801291a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801291e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012922:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012926:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801292a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801292e:	e841 2300 	strex	r3, r2, [r1]
 8012932:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8012936:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801293a:	2b00      	cmp	r3, #0
 801293c:	d1da      	bne.n	80128f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	3308      	adds	r3, #8
 8012944:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012948:	e853 3f00 	ldrex	r3, [r3]
 801294c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801294e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012950:	f023 0301 	bic.w	r3, r3, #1
 8012954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	3308      	adds	r3, #8
 801295e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012962:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012966:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012968:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801296a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801296e:	e841 2300 	strex	r3, r2, [r1]
 8012972:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8012974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012976:	2b00      	cmp	r3, #0
 8012978:	d1e1      	bne.n	801293e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	3308      	adds	r3, #8
 8012980:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012984:	e853 3f00 	ldrex	r3, [r3]
 8012988:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801298a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801298c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3308      	adds	r3, #8
 801299a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801299e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80129a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80129a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80129a6:	e841 2300 	strex	r3, r2, [r1]
 80129aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80129ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d1e3      	bne.n	801297a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2220      	movs	r2, #32
 80129b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2200      	movs	r2, #0
 80129be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129c8:	e853 3f00 	ldrex	r3, [r3]
 80129cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80129ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129d0:	f023 0310 	bic.w	r3, r3, #16
 80129d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	461a      	mov	r2, r3
 80129de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80129e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80129e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80129e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80129ea:	e841 2300 	strex	r3, r2, [r1]
 80129ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80129f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d1e4      	bne.n	80129c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7f2 fb5f 	bl	80050c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2202      	movs	r2, #2
 8012a06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	1ad3      	subs	r3, r2, r3
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	4619      	mov	r1, r3
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f000 f943 	bl	8012ca8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8012a22:	e119      	b.n	8012c58 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012a2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	f040 8112 	bne.w	8012c58 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012a3a:	69db      	ldr	r3, [r3, #28]
 8012a3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012a40:	f040 810a 	bne.w	8012c58 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2202      	movs	r2, #2
 8012a48:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8012a50:	4619      	mov	r1, r3
 8012a52:	6878      	ldr	r0, [r7, #4]
 8012a54:	f000 f928 	bl	8012ca8 <HAL_UARTEx_RxEventCallback>
      return;
 8012a58:	e0fe      	b.n	8012c58 <HAL_UART_IRQHandler+0x798>
 8012a5a:	bf00      	nop
 8012a5c:	40020010 	.word	0x40020010
 8012a60:	40020028 	.word	0x40020028
 8012a64:	40020040 	.word	0x40020040
 8012a68:	40020058 	.word	0x40020058
 8012a6c:	40020070 	.word	0x40020070
 8012a70:	40020088 	.word	0x40020088
 8012a74:	400200a0 	.word	0x400200a0
 8012a78:	400200b8 	.word	0x400200b8
 8012a7c:	40020410 	.word	0x40020410
 8012a80:	40020428 	.word	0x40020428
 8012a84:	40020440 	.word	0x40020440
 8012a88:	40020458 	.word	0x40020458
 8012a8c:	40020470 	.word	0x40020470
 8012a90:	40020488 	.word	0x40020488
 8012a94:	400204a0 	.word	0x400204a0
 8012a98:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	f000 80cf 	beq.w	8012c5c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8012abe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f000 80ca 	beq.w	8012c5c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ad0:	e853 3f00 	ldrex	r3, [r3]
 8012ad4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8012ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ad8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8012adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	461a      	mov	r2, r3
 8012ae6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8012aec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012af0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012af2:	e841 2300 	strex	r3, r2, [r1]
 8012af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d1e4      	bne.n	8012ac8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	3308      	adds	r3, #8
 8012b04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b08:	e853 3f00 	ldrex	r3, [r3]
 8012b0c:	623b      	str	r3, [r7, #32]
   return(result);
 8012b0e:	6a3a      	ldr	r2, [r7, #32]
 8012b10:	4b55      	ldr	r3, [pc, #340]	@ (8012c68 <HAL_UART_IRQHandler+0x7a8>)
 8012b12:	4013      	ands	r3, r2
 8012b14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012b22:	633a      	str	r2, [r7, #48]	@ 0x30
 8012b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b2a:	e841 2300 	strex	r3, r2, [r1]
 8012b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1e3      	bne.n	8012afe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2220      	movs	r2, #32
 8012b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	2200      	movs	r2, #0
 8012b42:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	e853 3f00 	ldrex	r3, [r3]
 8012b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f023 0310 	bic.w	r3, r3, #16
 8012b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8012b6c:	61fb      	str	r3, [r7, #28]
 8012b6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b70:	69b9      	ldr	r1, [r7, #24]
 8012b72:	69fa      	ldr	r2, [r7, #28]
 8012b74:	e841 2300 	strex	r3, r2, [r1]
 8012b78:	617b      	str	r3, [r7, #20]
   return(result);
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d1e4      	bne.n	8012b4a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2202      	movs	r2, #2
 8012b84:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f000 f88b 	bl	8012ca8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b92:	e063      	b.n	8012c5c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00e      	beq.n	8012bbe <HAL_UART_IRQHandler+0x6fe>
 8012ba0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012ba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d008      	beq.n	8012bbe <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8012bb4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012bb6:	6878      	ldr	r0, [r7, #4]
 8012bb8:	f001 fa22 	bl	8014000 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012bbc:	e051      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d014      	beq.n	8012bf4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012bca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d105      	bne.n	8012be2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8012bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d008      	beq.n	8012bf4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d03a      	beq.n	8012c60 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	4798      	blx	r3
    }
    return;
 8012bf2:	e035      	b.n	8012c60 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d009      	beq.n	8012c14 <HAL_UART_IRQHandler+0x754>
 8012c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d003      	beq.n	8012c14 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f001 f9cc 	bl	8013faa <UART_EndTransmit_IT>
    return;
 8012c12:	e026      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d009      	beq.n	8012c34 <HAL_UART_IRQHandler+0x774>
 8012c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d003      	beq.n	8012c34 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c2c:	6878      	ldr	r0, [r7, #4]
 8012c2e:	f001 f9fb 	bl	8014028 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c32:	e016      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012c38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d010      	beq.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
 8012c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	da0c      	bge.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f001 f9e3 	bl	8014014 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c4e:	e008      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012c50:	bf00      	nop
 8012c52:	e006      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012c54:	bf00      	nop
 8012c56:	e004      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012c58:	bf00      	nop
 8012c5a:	e002      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
      return;
 8012c5c:	bf00      	nop
 8012c5e:	e000      	b.n	8012c62 <HAL_UART_IRQHandler+0x7a2>
    return;
 8012c60:	bf00      	nop
  }
}
 8012c62:	37e8      	adds	r7, #232	@ 0xe8
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	effffffe 	.word	0xeffffffe

08012c6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012c74:	bf00      	nop
 8012c76:	370c      	adds	r7, #12
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b083      	sub	sp, #12
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012c88:	bf00      	nop
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr

08012c94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012c9c:	bf00      	nop
 8012c9e:	370c      	adds	r7, #12
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca6:	4770      	bx	lr

08012ca8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012cb4:	bf00      	nop
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr

08012cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012cc4:	b092      	sub	sp, #72	@ 0x48
 8012cc6:	af00      	add	r7, sp, #0
 8012cc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012cd0:	697b      	ldr	r3, [r7, #20]
 8012cd2:	689a      	ldr	r2, [r3, #8]
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	691b      	ldr	r3, [r3, #16]
 8012cd8:	431a      	orrs	r2, r3
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	695b      	ldr	r3, [r3, #20]
 8012cde:	431a      	orrs	r2, r3
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	69db      	ldr	r3, [r3, #28]
 8012ce4:	4313      	orrs	r3, r2
 8012ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	4bbe      	ldr	r3, [pc, #760]	@ (8012fe8 <UART_SetConfig+0x328>)
 8012cf0:	4013      	ands	r3, r2
 8012cf2:	697a      	ldr	r2, [r7, #20]
 8012cf4:	6812      	ldr	r2, [r2, #0]
 8012cf6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012cf8:	430b      	orrs	r3, r1
 8012cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	68da      	ldr	r2, [r3, #12]
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	430a      	orrs	r2, r1
 8012d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	699b      	ldr	r3, [r3, #24]
 8012d16:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012d18:	697b      	ldr	r3, [r7, #20]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4ab3      	ldr	r2, [pc, #716]	@ (8012fec <UART_SetConfig+0x32c>)
 8012d1e:	4293      	cmp	r3, r2
 8012d20:	d004      	beq.n	8012d2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	6a1b      	ldr	r3, [r3, #32]
 8012d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d28:	4313      	orrs	r3, r2
 8012d2a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	689a      	ldr	r2, [r3, #8]
 8012d32:	4baf      	ldr	r3, [pc, #700]	@ (8012ff0 <UART_SetConfig+0x330>)
 8012d34:	4013      	ands	r3, r2
 8012d36:	697a      	ldr	r2, [r7, #20]
 8012d38:	6812      	ldr	r2, [r2, #0]
 8012d3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012d3c:	430b      	orrs	r3, r1
 8012d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d46:	f023 010f 	bic.w	r1, r3, #15
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	430a      	orrs	r2, r1
 8012d54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d56:	697b      	ldr	r3, [r7, #20]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4aa6      	ldr	r2, [pc, #664]	@ (8012ff4 <UART_SetConfig+0x334>)
 8012d5c:	4293      	cmp	r3, r2
 8012d5e:	d177      	bne.n	8012e50 <UART_SetConfig+0x190>
 8012d60:	4ba5      	ldr	r3, [pc, #660]	@ (8012ff8 <UART_SetConfig+0x338>)
 8012d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8012d68:	2b28      	cmp	r3, #40	@ 0x28
 8012d6a:	d86d      	bhi.n	8012e48 <UART_SetConfig+0x188>
 8012d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8012d74 <UART_SetConfig+0xb4>)
 8012d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d72:	bf00      	nop
 8012d74:	08012e19 	.word	0x08012e19
 8012d78:	08012e49 	.word	0x08012e49
 8012d7c:	08012e49 	.word	0x08012e49
 8012d80:	08012e49 	.word	0x08012e49
 8012d84:	08012e49 	.word	0x08012e49
 8012d88:	08012e49 	.word	0x08012e49
 8012d8c:	08012e49 	.word	0x08012e49
 8012d90:	08012e49 	.word	0x08012e49
 8012d94:	08012e21 	.word	0x08012e21
 8012d98:	08012e49 	.word	0x08012e49
 8012d9c:	08012e49 	.word	0x08012e49
 8012da0:	08012e49 	.word	0x08012e49
 8012da4:	08012e49 	.word	0x08012e49
 8012da8:	08012e49 	.word	0x08012e49
 8012dac:	08012e49 	.word	0x08012e49
 8012db0:	08012e49 	.word	0x08012e49
 8012db4:	08012e29 	.word	0x08012e29
 8012db8:	08012e49 	.word	0x08012e49
 8012dbc:	08012e49 	.word	0x08012e49
 8012dc0:	08012e49 	.word	0x08012e49
 8012dc4:	08012e49 	.word	0x08012e49
 8012dc8:	08012e49 	.word	0x08012e49
 8012dcc:	08012e49 	.word	0x08012e49
 8012dd0:	08012e49 	.word	0x08012e49
 8012dd4:	08012e31 	.word	0x08012e31
 8012dd8:	08012e49 	.word	0x08012e49
 8012ddc:	08012e49 	.word	0x08012e49
 8012de0:	08012e49 	.word	0x08012e49
 8012de4:	08012e49 	.word	0x08012e49
 8012de8:	08012e49 	.word	0x08012e49
 8012dec:	08012e49 	.word	0x08012e49
 8012df0:	08012e49 	.word	0x08012e49
 8012df4:	08012e39 	.word	0x08012e39
 8012df8:	08012e49 	.word	0x08012e49
 8012dfc:	08012e49 	.word	0x08012e49
 8012e00:	08012e49 	.word	0x08012e49
 8012e04:	08012e49 	.word	0x08012e49
 8012e08:	08012e49 	.word	0x08012e49
 8012e0c:	08012e49 	.word	0x08012e49
 8012e10:	08012e49 	.word	0x08012e49
 8012e14:	08012e41 	.word	0x08012e41
 8012e18:	2301      	movs	r3, #1
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e1e:	e222      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e20:	2304      	movs	r3, #4
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e26:	e21e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e28:	2308      	movs	r3, #8
 8012e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e2e:	e21a      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e30:	2310      	movs	r3, #16
 8012e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e36:	e216      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e38:	2320      	movs	r3, #32
 8012e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e3e:	e212      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e40:	2340      	movs	r3, #64	@ 0x40
 8012e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e46:	e20e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e48:	2380      	movs	r3, #128	@ 0x80
 8012e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e4e:	e20a      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4a69      	ldr	r2, [pc, #420]	@ (8012ffc <UART_SetConfig+0x33c>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d130      	bne.n	8012ebc <UART_SetConfig+0x1fc>
 8012e5a:	4b67      	ldr	r3, [pc, #412]	@ (8012ff8 <UART_SetConfig+0x338>)
 8012e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012e5e:	f003 0307 	and.w	r3, r3, #7
 8012e62:	2b05      	cmp	r3, #5
 8012e64:	d826      	bhi.n	8012eb4 <UART_SetConfig+0x1f4>
 8012e66:	a201      	add	r2, pc, #4	@ (adr r2, 8012e6c <UART_SetConfig+0x1ac>)
 8012e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e6c:	08012e85 	.word	0x08012e85
 8012e70:	08012e8d 	.word	0x08012e8d
 8012e74:	08012e95 	.word	0x08012e95
 8012e78:	08012e9d 	.word	0x08012e9d
 8012e7c:	08012ea5 	.word	0x08012ea5
 8012e80:	08012ead 	.word	0x08012ead
 8012e84:	2300      	movs	r3, #0
 8012e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e8a:	e1ec      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e8c:	2304      	movs	r3, #4
 8012e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e92:	e1e8      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e94:	2308      	movs	r3, #8
 8012e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012e9a:	e1e4      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012e9c:	2310      	movs	r3, #16
 8012e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ea2:	e1e0      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012ea4:	2320      	movs	r3, #32
 8012ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eaa:	e1dc      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012eac:	2340      	movs	r3, #64	@ 0x40
 8012eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eb2:	e1d8      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012eb4:	2380      	movs	r3, #128	@ 0x80
 8012eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012eba:	e1d4      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	4a4f      	ldr	r2, [pc, #316]	@ (8013000 <UART_SetConfig+0x340>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d130      	bne.n	8012f28 <UART_SetConfig+0x268>
 8012ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8012ff8 <UART_SetConfig+0x338>)
 8012ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012eca:	f003 0307 	and.w	r3, r3, #7
 8012ece:	2b05      	cmp	r3, #5
 8012ed0:	d826      	bhi.n	8012f20 <UART_SetConfig+0x260>
 8012ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8012ed8 <UART_SetConfig+0x218>)
 8012ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed8:	08012ef1 	.word	0x08012ef1
 8012edc:	08012ef9 	.word	0x08012ef9
 8012ee0:	08012f01 	.word	0x08012f01
 8012ee4:	08012f09 	.word	0x08012f09
 8012ee8:	08012f11 	.word	0x08012f11
 8012eec:	08012f19 	.word	0x08012f19
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012ef6:	e1b6      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012ef8:	2304      	movs	r3, #4
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012efe:	e1b2      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f00:	2308      	movs	r3, #8
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f06:	e1ae      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f08:	2310      	movs	r3, #16
 8012f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f0e:	e1aa      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f10:	2320      	movs	r3, #32
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f16:	e1a6      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f18:	2340      	movs	r3, #64	@ 0x40
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f1e:	e1a2      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f20:	2380      	movs	r3, #128	@ 0x80
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f26:	e19e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	4a35      	ldr	r2, [pc, #212]	@ (8013004 <UART_SetConfig+0x344>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d130      	bne.n	8012f94 <UART_SetConfig+0x2d4>
 8012f32:	4b31      	ldr	r3, [pc, #196]	@ (8012ff8 <UART_SetConfig+0x338>)
 8012f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f36:	f003 0307 	and.w	r3, r3, #7
 8012f3a:	2b05      	cmp	r3, #5
 8012f3c:	d826      	bhi.n	8012f8c <UART_SetConfig+0x2cc>
 8012f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f44 <UART_SetConfig+0x284>)
 8012f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f44:	08012f5d 	.word	0x08012f5d
 8012f48:	08012f65 	.word	0x08012f65
 8012f4c:	08012f6d 	.word	0x08012f6d
 8012f50:	08012f75 	.word	0x08012f75
 8012f54:	08012f7d 	.word	0x08012f7d
 8012f58:	08012f85 	.word	0x08012f85
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f62:	e180      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f64:	2304      	movs	r3, #4
 8012f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f6a:	e17c      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f6c:	2308      	movs	r3, #8
 8012f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f72:	e178      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f74:	2310      	movs	r3, #16
 8012f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f7a:	e174      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f7c:	2320      	movs	r3, #32
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f82:	e170      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f84:	2340      	movs	r3, #64	@ 0x40
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f8a:	e16c      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f8c:	2380      	movs	r3, #128	@ 0x80
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012f92:	e168      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4a1b      	ldr	r2, [pc, #108]	@ (8013008 <UART_SetConfig+0x348>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d142      	bne.n	8013024 <UART_SetConfig+0x364>
 8012f9e:	4b16      	ldr	r3, [pc, #88]	@ (8012ff8 <UART_SetConfig+0x338>)
 8012fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fa2:	f003 0307 	and.w	r3, r3, #7
 8012fa6:	2b05      	cmp	r3, #5
 8012fa8:	d838      	bhi.n	801301c <UART_SetConfig+0x35c>
 8012faa:	a201      	add	r2, pc, #4	@ (adr r2, 8012fb0 <UART_SetConfig+0x2f0>)
 8012fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fb0:	08012fc9 	.word	0x08012fc9
 8012fb4:	08012fd1 	.word	0x08012fd1
 8012fb8:	08012fd9 	.word	0x08012fd9
 8012fbc:	08012fe1 	.word	0x08012fe1
 8012fc0:	0801300d 	.word	0x0801300d
 8012fc4:	08013015 	.word	0x08013015
 8012fc8:	2300      	movs	r3, #0
 8012fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fce:	e14a      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012fd0:	2304      	movs	r3, #4
 8012fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fd6:	e146      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012fd8:	2308      	movs	r3, #8
 8012fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fde:	e142      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012fe0:	2310      	movs	r3, #16
 8012fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8012fe6:	e13e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8012fe8:	cfff69f3 	.word	0xcfff69f3
 8012fec:	58000c00 	.word	0x58000c00
 8012ff0:	11fff4ff 	.word	0x11fff4ff
 8012ff4:	40011000 	.word	0x40011000
 8012ff8:	58024400 	.word	0x58024400
 8012ffc:	40004400 	.word	0x40004400
 8013000:	40004800 	.word	0x40004800
 8013004:	40004c00 	.word	0x40004c00
 8013008:	40005000 	.word	0x40005000
 801300c:	2320      	movs	r3, #32
 801300e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013012:	e128      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013014:	2340      	movs	r3, #64	@ 0x40
 8013016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801301a:	e124      	b.n	8013266 <UART_SetConfig+0x5a6>
 801301c:	2380      	movs	r3, #128	@ 0x80
 801301e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013022:	e120      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4acb      	ldr	r2, [pc, #812]	@ (8013358 <UART_SetConfig+0x698>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d176      	bne.n	801311c <UART_SetConfig+0x45c>
 801302e:	4bcb      	ldr	r3, [pc, #812]	@ (801335c <UART_SetConfig+0x69c>)
 8013030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013032:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8013036:	2b28      	cmp	r3, #40	@ 0x28
 8013038:	d86c      	bhi.n	8013114 <UART_SetConfig+0x454>
 801303a:	a201      	add	r2, pc, #4	@ (adr r2, 8013040 <UART_SetConfig+0x380>)
 801303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013040:	080130e5 	.word	0x080130e5
 8013044:	08013115 	.word	0x08013115
 8013048:	08013115 	.word	0x08013115
 801304c:	08013115 	.word	0x08013115
 8013050:	08013115 	.word	0x08013115
 8013054:	08013115 	.word	0x08013115
 8013058:	08013115 	.word	0x08013115
 801305c:	08013115 	.word	0x08013115
 8013060:	080130ed 	.word	0x080130ed
 8013064:	08013115 	.word	0x08013115
 8013068:	08013115 	.word	0x08013115
 801306c:	08013115 	.word	0x08013115
 8013070:	08013115 	.word	0x08013115
 8013074:	08013115 	.word	0x08013115
 8013078:	08013115 	.word	0x08013115
 801307c:	08013115 	.word	0x08013115
 8013080:	080130f5 	.word	0x080130f5
 8013084:	08013115 	.word	0x08013115
 8013088:	08013115 	.word	0x08013115
 801308c:	08013115 	.word	0x08013115
 8013090:	08013115 	.word	0x08013115
 8013094:	08013115 	.word	0x08013115
 8013098:	08013115 	.word	0x08013115
 801309c:	08013115 	.word	0x08013115
 80130a0:	080130fd 	.word	0x080130fd
 80130a4:	08013115 	.word	0x08013115
 80130a8:	08013115 	.word	0x08013115
 80130ac:	08013115 	.word	0x08013115
 80130b0:	08013115 	.word	0x08013115
 80130b4:	08013115 	.word	0x08013115
 80130b8:	08013115 	.word	0x08013115
 80130bc:	08013115 	.word	0x08013115
 80130c0:	08013105 	.word	0x08013105
 80130c4:	08013115 	.word	0x08013115
 80130c8:	08013115 	.word	0x08013115
 80130cc:	08013115 	.word	0x08013115
 80130d0:	08013115 	.word	0x08013115
 80130d4:	08013115 	.word	0x08013115
 80130d8:	08013115 	.word	0x08013115
 80130dc:	08013115 	.word	0x08013115
 80130e0:	0801310d 	.word	0x0801310d
 80130e4:	2301      	movs	r3, #1
 80130e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130ea:	e0bc      	b.n	8013266 <UART_SetConfig+0x5a6>
 80130ec:	2304      	movs	r3, #4
 80130ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130f2:	e0b8      	b.n	8013266 <UART_SetConfig+0x5a6>
 80130f4:	2308      	movs	r3, #8
 80130f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80130fa:	e0b4      	b.n	8013266 <UART_SetConfig+0x5a6>
 80130fc:	2310      	movs	r3, #16
 80130fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013102:	e0b0      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013104:	2320      	movs	r3, #32
 8013106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801310a:	e0ac      	b.n	8013266 <UART_SetConfig+0x5a6>
 801310c:	2340      	movs	r3, #64	@ 0x40
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013112:	e0a8      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013114:	2380      	movs	r3, #128	@ 0x80
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801311a:	e0a4      	b.n	8013266 <UART_SetConfig+0x5a6>
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a8f      	ldr	r2, [pc, #572]	@ (8013360 <UART_SetConfig+0x6a0>)
 8013122:	4293      	cmp	r3, r2
 8013124:	d130      	bne.n	8013188 <UART_SetConfig+0x4c8>
 8013126:	4b8d      	ldr	r3, [pc, #564]	@ (801335c <UART_SetConfig+0x69c>)
 8013128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801312a:	f003 0307 	and.w	r3, r3, #7
 801312e:	2b05      	cmp	r3, #5
 8013130:	d826      	bhi.n	8013180 <UART_SetConfig+0x4c0>
 8013132:	a201      	add	r2, pc, #4	@ (adr r2, 8013138 <UART_SetConfig+0x478>)
 8013134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013138:	08013151 	.word	0x08013151
 801313c:	08013159 	.word	0x08013159
 8013140:	08013161 	.word	0x08013161
 8013144:	08013169 	.word	0x08013169
 8013148:	08013171 	.word	0x08013171
 801314c:	08013179 	.word	0x08013179
 8013150:	2300      	movs	r3, #0
 8013152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013156:	e086      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013158:	2304      	movs	r3, #4
 801315a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801315e:	e082      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013160:	2308      	movs	r3, #8
 8013162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013166:	e07e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013168:	2310      	movs	r3, #16
 801316a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801316e:	e07a      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013170:	2320      	movs	r3, #32
 8013172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013176:	e076      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013178:	2340      	movs	r3, #64	@ 0x40
 801317a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801317e:	e072      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013180:	2380      	movs	r3, #128	@ 0x80
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013186:	e06e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a75      	ldr	r2, [pc, #468]	@ (8013364 <UART_SetConfig+0x6a4>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d130      	bne.n	80131f4 <UART_SetConfig+0x534>
 8013192:	4b72      	ldr	r3, [pc, #456]	@ (801335c <UART_SetConfig+0x69c>)
 8013194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013196:	f003 0307 	and.w	r3, r3, #7
 801319a:	2b05      	cmp	r3, #5
 801319c:	d826      	bhi.n	80131ec <UART_SetConfig+0x52c>
 801319e:	a201      	add	r2, pc, #4	@ (adr r2, 80131a4 <UART_SetConfig+0x4e4>)
 80131a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a4:	080131bd 	.word	0x080131bd
 80131a8:	080131c5 	.word	0x080131c5
 80131ac:	080131cd 	.word	0x080131cd
 80131b0:	080131d5 	.word	0x080131d5
 80131b4:	080131dd 	.word	0x080131dd
 80131b8:	080131e5 	.word	0x080131e5
 80131bc:	2300      	movs	r3, #0
 80131be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131c2:	e050      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131c4:	2304      	movs	r3, #4
 80131c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ca:	e04c      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131cc:	2308      	movs	r3, #8
 80131ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131d2:	e048      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131d4:	2310      	movs	r3, #16
 80131d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131da:	e044      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131dc:	2320      	movs	r3, #32
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131e2:	e040      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131e4:	2340      	movs	r3, #64	@ 0x40
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131ea:	e03c      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131ec:	2380      	movs	r3, #128	@ 0x80
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80131f2:	e038      	b.n	8013266 <UART_SetConfig+0x5a6>
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	4a5b      	ldr	r2, [pc, #364]	@ (8013368 <UART_SetConfig+0x6a8>)
 80131fa:	4293      	cmp	r3, r2
 80131fc:	d130      	bne.n	8013260 <UART_SetConfig+0x5a0>
 80131fe:	4b57      	ldr	r3, [pc, #348]	@ (801335c <UART_SetConfig+0x69c>)
 8013200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013202:	f003 0307 	and.w	r3, r3, #7
 8013206:	2b05      	cmp	r3, #5
 8013208:	d826      	bhi.n	8013258 <UART_SetConfig+0x598>
 801320a:	a201      	add	r2, pc, #4	@ (adr r2, 8013210 <UART_SetConfig+0x550>)
 801320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013210:	08013229 	.word	0x08013229
 8013214:	08013231 	.word	0x08013231
 8013218:	08013239 	.word	0x08013239
 801321c:	08013241 	.word	0x08013241
 8013220:	08013249 	.word	0x08013249
 8013224:	08013251 	.word	0x08013251
 8013228:	2302      	movs	r3, #2
 801322a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801322e:	e01a      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013230:	2304      	movs	r3, #4
 8013232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013236:	e016      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013238:	2308      	movs	r3, #8
 801323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801323e:	e012      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013240:	2310      	movs	r3, #16
 8013242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013246:	e00e      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013248:	2320      	movs	r3, #32
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801324e:	e00a      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013250:	2340      	movs	r3, #64	@ 0x40
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8013256:	e006      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013258:	2380      	movs	r3, #128	@ 0x80
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801325e:	e002      	b.n	8013266 <UART_SetConfig+0x5a6>
 8013260:	2380      	movs	r3, #128	@ 0x80
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4a3f      	ldr	r2, [pc, #252]	@ (8013368 <UART_SetConfig+0x6a8>)
 801326c:	4293      	cmp	r3, r2
 801326e:	f040 80f8 	bne.w	8013462 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013272:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013276:	2b20      	cmp	r3, #32
 8013278:	dc46      	bgt.n	8013308 <UART_SetConfig+0x648>
 801327a:	2b02      	cmp	r3, #2
 801327c:	f2c0 8082 	blt.w	8013384 <UART_SetConfig+0x6c4>
 8013280:	3b02      	subs	r3, #2
 8013282:	2b1e      	cmp	r3, #30
 8013284:	d87e      	bhi.n	8013384 <UART_SetConfig+0x6c4>
 8013286:	a201      	add	r2, pc, #4	@ (adr r2, 801328c <UART_SetConfig+0x5cc>)
 8013288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801328c:	0801330f 	.word	0x0801330f
 8013290:	08013385 	.word	0x08013385
 8013294:	08013317 	.word	0x08013317
 8013298:	08013385 	.word	0x08013385
 801329c:	08013385 	.word	0x08013385
 80132a0:	08013385 	.word	0x08013385
 80132a4:	08013327 	.word	0x08013327
 80132a8:	08013385 	.word	0x08013385
 80132ac:	08013385 	.word	0x08013385
 80132b0:	08013385 	.word	0x08013385
 80132b4:	08013385 	.word	0x08013385
 80132b8:	08013385 	.word	0x08013385
 80132bc:	08013385 	.word	0x08013385
 80132c0:	08013385 	.word	0x08013385
 80132c4:	08013337 	.word	0x08013337
 80132c8:	08013385 	.word	0x08013385
 80132cc:	08013385 	.word	0x08013385
 80132d0:	08013385 	.word	0x08013385
 80132d4:	08013385 	.word	0x08013385
 80132d8:	08013385 	.word	0x08013385
 80132dc:	08013385 	.word	0x08013385
 80132e0:	08013385 	.word	0x08013385
 80132e4:	08013385 	.word	0x08013385
 80132e8:	08013385 	.word	0x08013385
 80132ec:	08013385 	.word	0x08013385
 80132f0:	08013385 	.word	0x08013385
 80132f4:	08013385 	.word	0x08013385
 80132f8:	08013385 	.word	0x08013385
 80132fc:	08013385 	.word	0x08013385
 8013300:	08013385 	.word	0x08013385
 8013304:	08013377 	.word	0x08013377
 8013308:	2b40      	cmp	r3, #64	@ 0x40
 801330a:	d037      	beq.n	801337c <UART_SetConfig+0x6bc>
 801330c:	e03a      	b.n	8013384 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801330e:	f7fd fa8d 	bl	801082c <HAL_RCCEx_GetD3PCLK1Freq>
 8013312:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013314:	e03c      	b.n	8013390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013316:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801331a:	4618      	mov	r0, r3
 801331c:	f7fd fa9c 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013324:	e034      	b.n	8013390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013326:	f107 0318 	add.w	r3, r7, #24
 801332a:	4618      	mov	r0, r3
 801332c:	f7fd fbe8 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013330:	69fb      	ldr	r3, [r7, #28]
 8013332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013334:	e02c      	b.n	8013390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013336:	4b09      	ldr	r3, [pc, #36]	@ (801335c <UART_SetConfig+0x69c>)
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	f003 0320 	and.w	r3, r3, #32
 801333e:	2b00      	cmp	r3, #0
 8013340:	d016      	beq.n	8013370 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013342:	4b06      	ldr	r3, [pc, #24]	@ (801335c <UART_SetConfig+0x69c>)
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	08db      	lsrs	r3, r3, #3
 8013348:	f003 0303 	and.w	r3, r3, #3
 801334c:	4a07      	ldr	r2, [pc, #28]	@ (801336c <UART_SetConfig+0x6ac>)
 801334e:	fa22 f303 	lsr.w	r3, r2, r3
 8013352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013354:	e01c      	b.n	8013390 <UART_SetConfig+0x6d0>
 8013356:	bf00      	nop
 8013358:	40011400 	.word	0x40011400
 801335c:	58024400 	.word	0x58024400
 8013360:	40007800 	.word	0x40007800
 8013364:	40007c00 	.word	0x40007c00
 8013368:	58000c00 	.word	0x58000c00
 801336c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013370:	4b9d      	ldr	r3, [pc, #628]	@ (80135e8 <UART_SetConfig+0x928>)
 8013372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013374:	e00c      	b.n	8013390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013376:	4b9d      	ldr	r3, [pc, #628]	@ (80135ec <UART_SetConfig+0x92c>)
 8013378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801337a:	e009      	b.n	8013390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801337c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8013380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013382:	e005      	b.n	8013390 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013384:	2300      	movs	r3, #0
 8013386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013388:	2301      	movs	r3, #1
 801338a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801338e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013392:	2b00      	cmp	r3, #0
 8013394:	f000 81de 	beq.w	8013754 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801339c:	4a94      	ldr	r2, [pc, #592]	@ (80135f0 <UART_SetConfig+0x930>)
 801339e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133a2:	461a      	mov	r2, r3
 80133a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80133aa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	685a      	ldr	r2, [r3, #4]
 80133b0:	4613      	mov	r3, r2
 80133b2:	005b      	lsls	r3, r3, #1
 80133b4:	4413      	add	r3, r2
 80133b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133b8:	429a      	cmp	r2, r3
 80133ba:	d305      	bcc.n	80133c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80133c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d903      	bls.n	80133d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80133c8:	2301      	movs	r3, #1
 80133ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80133ce:	e1c1      	b.n	8013754 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80133d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133d2:	2200      	movs	r2, #0
 80133d4:	60bb      	str	r3, [r7, #8]
 80133d6:	60fa      	str	r2, [r7, #12]
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133dc:	4a84      	ldr	r2, [pc, #528]	@ (80135f0 <UART_SetConfig+0x930>)
 80133de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80133e2:	b29b      	uxth	r3, r3
 80133e4:	2200      	movs	r2, #0
 80133e6:	603b      	str	r3, [r7, #0]
 80133e8:	607a      	str	r2, [r7, #4]
 80133ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80133f2:	f7ec ffcd 	bl	8000390 <__aeabi_uldivmod>
 80133f6:	4602      	mov	r2, r0
 80133f8:	460b      	mov	r3, r1
 80133fa:	4610      	mov	r0, r2
 80133fc:	4619      	mov	r1, r3
 80133fe:	f04f 0200 	mov.w	r2, #0
 8013402:	f04f 0300 	mov.w	r3, #0
 8013406:	020b      	lsls	r3, r1, #8
 8013408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801340c:	0202      	lsls	r2, r0, #8
 801340e:	6979      	ldr	r1, [r7, #20]
 8013410:	6849      	ldr	r1, [r1, #4]
 8013412:	0849      	lsrs	r1, r1, #1
 8013414:	2000      	movs	r0, #0
 8013416:	460c      	mov	r4, r1
 8013418:	4605      	mov	r5, r0
 801341a:	eb12 0804 	adds.w	r8, r2, r4
 801341e:	eb43 0905 	adc.w	r9, r3, r5
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	2200      	movs	r2, #0
 8013428:	469a      	mov	sl, r3
 801342a:	4693      	mov	fp, r2
 801342c:	4652      	mov	r2, sl
 801342e:	465b      	mov	r3, fp
 8013430:	4640      	mov	r0, r8
 8013432:	4649      	mov	r1, r9
 8013434:	f7ec ffac 	bl	8000390 <__aeabi_uldivmod>
 8013438:	4602      	mov	r2, r0
 801343a:	460b      	mov	r3, r1
 801343c:	4613      	mov	r3, r2
 801343e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013446:	d308      	bcc.n	801345a <UART_SetConfig+0x79a>
 8013448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801344a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801344e:	d204      	bcs.n	801345a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013456:	60da      	str	r2, [r3, #12]
 8013458:	e17c      	b.n	8013754 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801345a:	2301      	movs	r3, #1
 801345c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8013460:	e178      	b.n	8013754 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	69db      	ldr	r3, [r3, #28]
 8013466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801346a:	f040 80c5 	bne.w	80135f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801346e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013472:	2b20      	cmp	r3, #32
 8013474:	dc48      	bgt.n	8013508 <UART_SetConfig+0x848>
 8013476:	2b00      	cmp	r3, #0
 8013478:	db7b      	blt.n	8013572 <UART_SetConfig+0x8b2>
 801347a:	2b20      	cmp	r3, #32
 801347c:	d879      	bhi.n	8013572 <UART_SetConfig+0x8b2>
 801347e:	a201      	add	r2, pc, #4	@ (adr r2, 8013484 <UART_SetConfig+0x7c4>)
 8013480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013484:	0801350f 	.word	0x0801350f
 8013488:	08013517 	.word	0x08013517
 801348c:	08013573 	.word	0x08013573
 8013490:	08013573 	.word	0x08013573
 8013494:	0801351f 	.word	0x0801351f
 8013498:	08013573 	.word	0x08013573
 801349c:	08013573 	.word	0x08013573
 80134a0:	08013573 	.word	0x08013573
 80134a4:	0801352f 	.word	0x0801352f
 80134a8:	08013573 	.word	0x08013573
 80134ac:	08013573 	.word	0x08013573
 80134b0:	08013573 	.word	0x08013573
 80134b4:	08013573 	.word	0x08013573
 80134b8:	08013573 	.word	0x08013573
 80134bc:	08013573 	.word	0x08013573
 80134c0:	08013573 	.word	0x08013573
 80134c4:	0801353f 	.word	0x0801353f
 80134c8:	08013573 	.word	0x08013573
 80134cc:	08013573 	.word	0x08013573
 80134d0:	08013573 	.word	0x08013573
 80134d4:	08013573 	.word	0x08013573
 80134d8:	08013573 	.word	0x08013573
 80134dc:	08013573 	.word	0x08013573
 80134e0:	08013573 	.word	0x08013573
 80134e4:	08013573 	.word	0x08013573
 80134e8:	08013573 	.word	0x08013573
 80134ec:	08013573 	.word	0x08013573
 80134f0:	08013573 	.word	0x08013573
 80134f4:	08013573 	.word	0x08013573
 80134f8:	08013573 	.word	0x08013573
 80134fc:	08013573 	.word	0x08013573
 8013500:	08013573 	.word	0x08013573
 8013504:	08013565 	.word	0x08013565
 8013508:	2b40      	cmp	r3, #64	@ 0x40
 801350a:	d02e      	beq.n	801356a <UART_SetConfig+0x8aa>
 801350c:	e031      	b.n	8013572 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801350e:	f7fb f9d7 	bl	800e8c0 <HAL_RCC_GetPCLK1Freq>
 8013512:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013514:	e033      	b.n	801357e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013516:	f7fb f9e9 	bl	800e8ec <HAL_RCC_GetPCLK2Freq>
 801351a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801351c:	e02f      	b.n	801357e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801351e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013522:	4618      	mov	r0, r3
 8013524:	f7fd f998 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801352a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801352c:	e027      	b.n	801357e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801352e:	f107 0318 	add.w	r3, r7, #24
 8013532:	4618      	mov	r0, r3
 8013534:	f7fd fae4 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013538:	69fb      	ldr	r3, [r7, #28]
 801353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801353c:	e01f      	b.n	801357e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801353e:	4b2d      	ldr	r3, [pc, #180]	@ (80135f4 <UART_SetConfig+0x934>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	f003 0320 	and.w	r3, r3, #32
 8013546:	2b00      	cmp	r3, #0
 8013548:	d009      	beq.n	801355e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801354a:	4b2a      	ldr	r3, [pc, #168]	@ (80135f4 <UART_SetConfig+0x934>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	08db      	lsrs	r3, r3, #3
 8013550:	f003 0303 	and.w	r3, r3, #3
 8013554:	4a24      	ldr	r2, [pc, #144]	@ (80135e8 <UART_SetConfig+0x928>)
 8013556:	fa22 f303 	lsr.w	r3, r2, r3
 801355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801355c:	e00f      	b.n	801357e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801355e:	4b22      	ldr	r3, [pc, #136]	@ (80135e8 <UART_SetConfig+0x928>)
 8013560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013562:	e00c      	b.n	801357e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013564:	4b21      	ldr	r3, [pc, #132]	@ (80135ec <UART_SetConfig+0x92c>)
 8013566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013568:	e009      	b.n	801357e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801356a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801356e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013570:	e005      	b.n	801357e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013572:	2300      	movs	r3, #0
 8013574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013576:	2301      	movs	r3, #1
 8013578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801357c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801357e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013580:	2b00      	cmp	r3, #0
 8013582:	f000 80e7 	beq.w	8013754 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801358a:	4a19      	ldr	r2, [pc, #100]	@ (80135f0 <UART_SetConfig+0x930>)
 801358c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013590:	461a      	mov	r2, r3
 8013592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013594:	fbb3 f3f2 	udiv	r3, r3, r2
 8013598:	005a      	lsls	r2, r3, #1
 801359a:	697b      	ldr	r3, [r7, #20]
 801359c:	685b      	ldr	r3, [r3, #4]
 801359e:	085b      	lsrs	r3, r3, #1
 80135a0:	441a      	add	r2, r3
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80135aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80135ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ae:	2b0f      	cmp	r3, #15
 80135b0:	d916      	bls.n	80135e0 <UART_SetConfig+0x920>
 80135b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80135b8:	d212      	bcs.n	80135e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80135ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135bc:	b29b      	uxth	r3, r3
 80135be:	f023 030f 	bic.w	r3, r3, #15
 80135c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80135c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c6:	085b      	lsrs	r3, r3, #1
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	f003 0307 	and.w	r3, r3, #7
 80135ce:	b29a      	uxth	r2, r3
 80135d0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80135d2:	4313      	orrs	r3, r2
 80135d4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80135dc:	60da      	str	r2, [r3, #12]
 80135de:	e0b9      	b.n	8013754 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80135e0:	2301      	movs	r3, #1
 80135e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80135e6:	e0b5      	b.n	8013754 <UART_SetConfig+0xa94>
 80135e8:	03d09000 	.word	0x03d09000
 80135ec:	003d0900 	.word	0x003d0900
 80135f0:	080195e0 	.word	0x080195e0
 80135f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80135f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80135fc:	2b20      	cmp	r3, #32
 80135fe:	dc49      	bgt.n	8013694 <UART_SetConfig+0x9d4>
 8013600:	2b00      	cmp	r3, #0
 8013602:	db7c      	blt.n	80136fe <UART_SetConfig+0xa3e>
 8013604:	2b20      	cmp	r3, #32
 8013606:	d87a      	bhi.n	80136fe <UART_SetConfig+0xa3e>
 8013608:	a201      	add	r2, pc, #4	@ (adr r2, 8013610 <UART_SetConfig+0x950>)
 801360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801360e:	bf00      	nop
 8013610:	0801369b 	.word	0x0801369b
 8013614:	080136a3 	.word	0x080136a3
 8013618:	080136ff 	.word	0x080136ff
 801361c:	080136ff 	.word	0x080136ff
 8013620:	080136ab 	.word	0x080136ab
 8013624:	080136ff 	.word	0x080136ff
 8013628:	080136ff 	.word	0x080136ff
 801362c:	080136ff 	.word	0x080136ff
 8013630:	080136bb 	.word	0x080136bb
 8013634:	080136ff 	.word	0x080136ff
 8013638:	080136ff 	.word	0x080136ff
 801363c:	080136ff 	.word	0x080136ff
 8013640:	080136ff 	.word	0x080136ff
 8013644:	080136ff 	.word	0x080136ff
 8013648:	080136ff 	.word	0x080136ff
 801364c:	080136ff 	.word	0x080136ff
 8013650:	080136cb 	.word	0x080136cb
 8013654:	080136ff 	.word	0x080136ff
 8013658:	080136ff 	.word	0x080136ff
 801365c:	080136ff 	.word	0x080136ff
 8013660:	080136ff 	.word	0x080136ff
 8013664:	080136ff 	.word	0x080136ff
 8013668:	080136ff 	.word	0x080136ff
 801366c:	080136ff 	.word	0x080136ff
 8013670:	080136ff 	.word	0x080136ff
 8013674:	080136ff 	.word	0x080136ff
 8013678:	080136ff 	.word	0x080136ff
 801367c:	080136ff 	.word	0x080136ff
 8013680:	080136ff 	.word	0x080136ff
 8013684:	080136ff 	.word	0x080136ff
 8013688:	080136ff 	.word	0x080136ff
 801368c:	080136ff 	.word	0x080136ff
 8013690:	080136f1 	.word	0x080136f1
 8013694:	2b40      	cmp	r3, #64	@ 0x40
 8013696:	d02e      	beq.n	80136f6 <UART_SetConfig+0xa36>
 8013698:	e031      	b.n	80136fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801369a:	f7fb f911 	bl	800e8c0 <HAL_RCC_GetPCLK1Freq>
 801369e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80136a0:	e033      	b.n	801370a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80136a2:	f7fb f923 	bl	800e8ec <HAL_RCC_GetPCLK2Freq>
 80136a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80136a8:	e02f      	b.n	801370a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80136ae:	4618      	mov	r0, r3
 80136b0:	f7fd f8d2 	bl	8010858 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80136b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136b8:	e027      	b.n	801370a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136ba:	f107 0318 	add.w	r3, r7, #24
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fd fa1e 	bl	8010b00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136c8:	e01f      	b.n	801370a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136ca:	4b2d      	ldr	r3, [pc, #180]	@ (8013780 <UART_SetConfig+0xac0>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	f003 0320 	and.w	r3, r3, #32
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d009      	beq.n	80136ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80136d6:	4b2a      	ldr	r3, [pc, #168]	@ (8013780 <UART_SetConfig+0xac0>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	08db      	lsrs	r3, r3, #3
 80136dc:	f003 0303 	and.w	r3, r3, #3
 80136e0:	4a28      	ldr	r2, [pc, #160]	@ (8013784 <UART_SetConfig+0xac4>)
 80136e2:	fa22 f303 	lsr.w	r3, r2, r3
 80136e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80136e8:	e00f      	b.n	801370a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80136ea:	4b26      	ldr	r3, [pc, #152]	@ (8013784 <UART_SetConfig+0xac4>)
 80136ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136ee:	e00c      	b.n	801370a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136f0:	4b25      	ldr	r3, [pc, #148]	@ (8013788 <UART_SetConfig+0xac8>)
 80136f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136f4:	e009      	b.n	801370a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80136fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80136fc:	e005      	b.n	801370a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80136fe:	2300      	movs	r3, #0
 8013700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8013702:	2301      	movs	r3, #1
 8013704:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8013708:	bf00      	nop
    }

    if (pclk != 0U)
 801370a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801370c:	2b00      	cmp	r3, #0
 801370e:	d021      	beq.n	8013754 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013714:	4a1d      	ldr	r2, [pc, #116]	@ (801378c <UART_SetConfig+0xacc>)
 8013716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801371a:	461a      	mov	r2, r3
 801371c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801371e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	085b      	lsrs	r3, r3, #1
 8013728:	441a      	add	r2, r3
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013732:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013736:	2b0f      	cmp	r3, #15
 8013738:	d909      	bls.n	801374e <UART_SetConfig+0xa8e>
 801373a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801373c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013740:	d205      	bcs.n	801374e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013744:	b29a      	uxth	r2, r3
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	60da      	str	r2, [r3, #12]
 801374c:	e002      	b.n	8013754 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801374e:	2301      	movs	r3, #1
 8013750:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	2201      	movs	r2, #1
 8013758:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	2201      	movs	r2, #1
 8013760:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	2200      	movs	r2, #0
 8013768:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	2200      	movs	r2, #0
 801376e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8013770:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8013774:	4618      	mov	r0, r3
 8013776:	3748      	adds	r7, #72	@ 0x48
 8013778:	46bd      	mov	sp, r7
 801377a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801377e:	bf00      	nop
 8013780:	58024400 	.word	0x58024400
 8013784:	03d09000 	.word	0x03d09000
 8013788:	003d0900 	.word	0x003d0900
 801378c:	080195e0 	.word	0x080195e0

08013790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801379c:	f003 0308 	and.w	r3, r3, #8
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d00a      	beq.n	80137ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	430a      	orrs	r2, r1
 80137b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137be:	f003 0301 	and.w	r3, r3, #1
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d00a      	beq.n	80137dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	430a      	orrs	r2, r1
 80137da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137e0:	f003 0302 	and.w	r3, r3, #2
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d00a      	beq.n	80137fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	430a      	orrs	r2, r1
 80137fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013802:	f003 0304 	and.w	r3, r3, #4
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00a      	beq.n	8013820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	430a      	orrs	r2, r1
 801381e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013824:	f003 0310 	and.w	r3, r3, #16
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00a      	beq.n	8013842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	689b      	ldr	r3, [r3, #8]
 8013832:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	430a      	orrs	r2, r1
 8013840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013846:	f003 0320 	and.w	r3, r3, #32
 801384a:	2b00      	cmp	r3, #0
 801384c:	d00a      	beq.n	8013864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	689b      	ldr	r3, [r3, #8]
 8013854:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	430a      	orrs	r2, r1
 8013862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801386c:	2b00      	cmp	r3, #0
 801386e:	d01a      	beq.n	80138a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	430a      	orrs	r2, r1
 8013884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801388a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801388e:	d10a      	bne.n	80138a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	430a      	orrs	r2, r1
 80138a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80138aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d00a      	beq.n	80138c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	685b      	ldr	r3, [r3, #4]
 80138b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	430a      	orrs	r2, r1
 80138c6:	605a      	str	r2, [r3, #4]
  }
}
 80138c8:	bf00      	nop
 80138ca:	370c      	adds	r7, #12
 80138cc:	46bd      	mov	sp, r7
 80138ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d2:	4770      	bx	lr

080138d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b098      	sub	sp, #96	@ 0x60
 80138d8:	af02      	add	r7, sp, #8
 80138da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	2200      	movs	r2, #0
 80138e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80138e4:	f7ef f9b0 	bl	8002c48 <HAL_GetTick>
 80138e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f003 0308 	and.w	r3, r3, #8
 80138f4:	2b08      	cmp	r3, #8
 80138f6:	d12f      	bne.n	8013958 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80138f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80138fc:	9300      	str	r3, [sp, #0]
 80138fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013900:	2200      	movs	r2, #0
 8013902:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f000 f88e 	bl	8013a28 <UART_WaitOnFlagUntilTimeout>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d022      	beq.n	8013958 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391a:	e853 3f00 	ldrex	r3, [r3]
 801391e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013926:	653b      	str	r3, [r7, #80]	@ 0x50
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	461a      	mov	r2, r3
 801392e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013930:	647b      	str	r3, [r7, #68]	@ 0x44
 8013932:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013934:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013938:	e841 2300 	strex	r3, r2, [r1]
 801393c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1e6      	bne.n	8013912 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2220      	movs	r2, #32
 8013948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2200      	movs	r2, #0
 8013950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013954:	2303      	movs	r3, #3
 8013956:	e063      	b.n	8013a20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f003 0304 	and.w	r3, r3, #4
 8013962:	2b04      	cmp	r3, #4
 8013964:	d149      	bne.n	80139fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013966:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801396a:	9300      	str	r3, [sp, #0]
 801396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801396e:	2200      	movs	r2, #0
 8013970:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 f857 	bl	8013a28 <UART_WaitOnFlagUntilTimeout>
 801397a:	4603      	mov	r3, r0
 801397c:	2b00      	cmp	r3, #0
 801397e:	d03c      	beq.n	80139fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013988:	e853 3f00 	ldrex	r3, [r3]
 801398c:	623b      	str	r3, [r7, #32]
   return(result);
 801398e:	6a3b      	ldr	r3, [r7, #32]
 8013990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	461a      	mov	r2, r3
 801399c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801399e:	633b      	str	r3, [r7, #48]	@ 0x30
 80139a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80139a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139a6:	e841 2300 	strex	r3, r2, [r1]
 80139aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80139ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1e6      	bne.n	8013980 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	3308      	adds	r3, #8
 80139b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	e853 3f00 	ldrex	r3, [r3]
 80139c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	f023 0301 	bic.w	r3, r3, #1
 80139c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	3308      	adds	r3, #8
 80139d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139d2:	61fa      	str	r2, [r7, #28]
 80139d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139d6:	69b9      	ldr	r1, [r7, #24]
 80139d8:	69fa      	ldr	r2, [r7, #28]
 80139da:	e841 2300 	strex	r3, r2, [r1]
 80139de:	617b      	str	r3, [r7, #20]
   return(result);
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d1e5      	bne.n	80139b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2220      	movs	r2, #32
 80139ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139f6:	2303      	movs	r3, #3
 80139f8:	e012      	b.n	8013a20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2220      	movs	r2, #32
 80139fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2220      	movs	r2, #32
 8013a06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2200      	movs	r2, #0
 8013a14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8013a1e:	2300      	movs	r3, #0
}
 8013a20:	4618      	mov	r0, r3
 8013a22:	3758      	adds	r7, #88	@ 0x58
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}

08013a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	603b      	str	r3, [r7, #0]
 8013a34:	4613      	mov	r3, r2
 8013a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a38:	e04f      	b.n	8013ada <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a40:	d04b      	beq.n	8013ada <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013a42:	f7ef f901 	bl	8002c48 <HAL_GetTick>
 8013a46:	4602      	mov	r2, r0
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	1ad3      	subs	r3, r2, r3
 8013a4c:	69ba      	ldr	r2, [r7, #24]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d302      	bcc.n	8013a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8013a52:	69bb      	ldr	r3, [r7, #24]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d101      	bne.n	8013a5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013a58:	2303      	movs	r3, #3
 8013a5a:	e04e      	b.n	8013afa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f003 0304 	and.w	r3, r3, #4
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d037      	beq.n	8013ada <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	2b80      	cmp	r3, #128	@ 0x80
 8013a6e:	d034      	beq.n	8013ada <UART_WaitOnFlagUntilTimeout+0xb2>
 8013a70:	68bb      	ldr	r3, [r7, #8]
 8013a72:	2b40      	cmp	r3, #64	@ 0x40
 8013a74:	d031      	beq.n	8013ada <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	69db      	ldr	r3, [r3, #28]
 8013a7c:	f003 0308 	and.w	r3, r3, #8
 8013a80:	2b08      	cmp	r3, #8
 8013a82:	d110      	bne.n	8013aa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2208      	movs	r2, #8
 8013a8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f000 f921 	bl	8013cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	2208      	movs	r2, #8
 8013a96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	e029      	b.n	8013afa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	69db      	ldr	r3, [r3, #28]
 8013aac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013ab0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013ab4:	d111      	bne.n	8013ada <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013abe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f000 f907 	bl	8013cd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2220      	movs	r2, #32
 8013aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8013ad6:	2303      	movs	r3, #3
 8013ad8:	e00f      	b.n	8013afa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	69da      	ldr	r2, [r3, #28]
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	4013      	ands	r3, r2
 8013ae4:	68ba      	ldr	r2, [r7, #8]
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	bf0c      	ite	eq
 8013aea:	2301      	moveq	r3, #1
 8013aec:	2300      	movne	r3, #0
 8013aee:	b2db      	uxtb	r3, r3
 8013af0:	461a      	mov	r2, r3
 8013af2:	79fb      	ldrb	r3, [r7, #7]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d0a0      	beq.n	8013a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013af8:	2300      	movs	r3, #0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}
	...

08013b04 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b096      	sub	sp, #88	@ 0x58
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	68ba      	ldr	r2, [r7, #8]
 8013b16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	88fa      	ldrh	r2, [r7, #6]
 8013b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2200      	movs	r2, #0
 8013b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2222      	movs	r2, #34	@ 0x22
 8013b2c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d02d      	beq.n	8013b96 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b40:	4a40      	ldr	r2, [pc, #256]	@ (8013c44 <UART_Start_Receive_DMA+0x140>)
 8013b42:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b4a:	4a3f      	ldr	r2, [pc, #252]	@ (8013c48 <UART_Start_Receive_DMA+0x144>)
 8013b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b54:	4a3d      	ldr	r2, [pc, #244]	@ (8013c4c <UART_Start_Receive_DMA+0x148>)
 8013b56:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b5e:	2200      	movs	r2, #0
 8013b60:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	3324      	adds	r3, #36	@ 0x24
 8013b6e:	4619      	mov	r1, r3
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b74:	461a      	mov	r2, r3
 8013b76:	88fb      	ldrh	r3, [r7, #6]
 8013b78:	f7f1 f838 	bl	8004bec <HAL_DMA_Start_IT>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d009      	beq.n	8013b96 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2210      	movs	r2, #16
 8013b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2220      	movs	r2, #32
 8013b8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8013b92:	2301      	movs	r3, #1
 8013b94:	e051      	b.n	8013c3a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	691b      	ldr	r3, [r3, #16]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d018      	beq.n	8013bd0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ba6:	e853 3f00 	ldrex	r3, [r3]
 8013baa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013bb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	461a      	mov	r2, r3
 8013bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013bbe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013bc4:	e841 2300 	strex	r3, r2, [r1]
 8013bc8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8013bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d1e6      	bne.n	8013b9e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	3308      	adds	r3, #8
 8013bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bda:	e853 3f00 	ldrex	r3, [r3]
 8013bde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013be2:	f043 0301 	orr.w	r3, r3, #1
 8013be6:	653b      	str	r3, [r7, #80]	@ 0x50
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	3308      	adds	r3, #8
 8013bee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bf0:	637a      	str	r2, [r7, #52]	@ 0x34
 8013bf2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013bf6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013bf8:	e841 2300 	strex	r3, r2, [r1]
 8013bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8013bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d1e5      	bne.n	8013bd0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	3308      	adds	r3, #8
 8013c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	e853 3f00 	ldrex	r3, [r3]
 8013c12:	613b      	str	r3, [r7, #16]
   return(result);
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	3308      	adds	r3, #8
 8013c22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013c24:	623a      	str	r2, [r7, #32]
 8013c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c28:	69f9      	ldr	r1, [r7, #28]
 8013c2a:	6a3a      	ldr	r2, [r7, #32]
 8013c2c:	e841 2300 	strex	r3, r2, [r1]
 8013c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8013c32:	69bb      	ldr	r3, [r7, #24]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d1e5      	bne.n	8013c04 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013c38:	2300      	movs	r3, #0
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3758      	adds	r7, #88	@ 0x58
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	08013da1 	.word	0x08013da1
 8013c48:	08013ec9 	.word	0x08013ec9
 8013c4c:	08013f07 	.word	0x08013f07

08013c50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013c50:	b480      	push	{r7}
 8013c52:	b08f      	sub	sp, #60	@ 0x3c
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c5e:	6a3b      	ldr	r3, [r7, #32]
 8013c60:	e853 3f00 	ldrex	r3, [r3]
 8013c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c66:	69fb      	ldr	r3, [r7, #28]
 8013c68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8013c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	461a      	mov	r2, r3
 8013c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013c78:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013c7e:	e841 2300 	strex	r3, r2, [r1]
 8013c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1e6      	bne.n	8013c58 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	3308      	adds	r3, #8
 8013c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	e853 3f00 	ldrex	r3, [r3]
 8013c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8013ca0:	633b      	str	r3, [r7, #48]	@ 0x30
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	3308      	adds	r3, #8
 8013ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013caa:	61ba      	str	r2, [r7, #24]
 8013cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cae:	6979      	ldr	r1, [r7, #20]
 8013cb0:	69ba      	ldr	r2, [r7, #24]
 8013cb2:	e841 2300 	strex	r3, r2, [r1]
 8013cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8013cb8:	693b      	ldr	r3, [r7, #16]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d1e5      	bne.n	8013c8a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2220      	movs	r2, #32
 8013cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8013cc6:	bf00      	nop
 8013cc8:	373c      	adds	r7, #60	@ 0x3c
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr
	...

08013cd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013cd4:	b480      	push	{r7}
 8013cd6:	b095      	sub	sp, #84	@ 0x54
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ce4:	e853 3f00 	ldrex	r3, [r3]
 8013ce8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8013cfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013d02:	e841 2300 	strex	r3, r2, [r1]
 8013d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d1e6      	bne.n	8013cdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	3308      	adds	r3, #8
 8013d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d16:	6a3b      	ldr	r3, [r7, #32]
 8013d18:	e853 3f00 	ldrex	r3, [r3]
 8013d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013d1e:	69fa      	ldr	r2, [r7, #28]
 8013d20:	4b1e      	ldr	r3, [pc, #120]	@ (8013d9c <UART_EndRxTransfer+0xc8>)
 8013d22:	4013      	ands	r3, r2
 8013d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	3308      	adds	r3, #8
 8013d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d36:	e841 2300 	strex	r3, r2, [r1]
 8013d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d1e5      	bne.n	8013d0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d46:	2b01      	cmp	r3, #1
 8013d48:	d118      	bne.n	8013d7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	e853 3f00 	ldrex	r3, [r3]
 8013d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	f023 0310 	bic.w	r3, r3, #16
 8013d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	461a      	mov	r2, r3
 8013d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d68:	61bb      	str	r3, [r7, #24]
 8013d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d6c:	6979      	ldr	r1, [r7, #20]
 8013d6e:	69ba      	ldr	r2, [r7, #24]
 8013d70:	e841 2300 	strex	r3, r2, [r1]
 8013d74:	613b      	str	r3, [r7, #16]
   return(result);
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d1e6      	bne.n	8013d4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2220      	movs	r2, #32
 8013d80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2200      	movs	r2, #0
 8013d88:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8013d90:	bf00      	nop
 8013d92:	3754      	adds	r7, #84	@ 0x54
 8013d94:	46bd      	mov	sp, r7
 8013d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9a:	4770      	bx	lr
 8013d9c:	effffffe 	.word	0xeffffffe

08013da0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b09c      	sub	sp, #112	@ 0x70
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dac:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	69db      	ldr	r3, [r3, #28]
 8013db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013db6:	d071      	beq.n	8013e9c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013db8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dc8:	e853 3f00 	ldrex	r3, [r3]
 8013dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013dd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013dde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013de0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013de2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013de4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013de6:	e841 2300 	strex	r3, r2, [r1]
 8013dea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d1e6      	bne.n	8013dc0 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	3308      	adds	r3, #8
 8013df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dfc:	e853 3f00 	ldrex	r3, [r3]
 8013e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e04:	f023 0301 	bic.w	r3, r3, #1
 8013e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8013e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	3308      	adds	r3, #8
 8013e10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013e12:	647a      	str	r2, [r7, #68]	@ 0x44
 8013e14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013e18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013e1a:	e841 2300 	strex	r3, r2, [r1]
 8013e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d1e5      	bne.n	8013df2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	3308      	adds	r3, #8
 8013e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e30:	e853 3f00 	ldrex	r3, [r3]
 8013e34:	623b      	str	r3, [r7, #32]
   return(result);
 8013e36:	6a3b      	ldr	r3, [r7, #32]
 8013e38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8013e3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	3308      	adds	r3, #8
 8013e44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013e46:	633a      	str	r2, [r7, #48]	@ 0x30
 8013e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013e4e:	e841 2300 	strex	r3, r2, [r1]
 8013e52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d1e5      	bne.n	8013e26 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e5c:	2220      	movs	r2, #32
 8013e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013e66:	2b01      	cmp	r3, #1
 8013e68:	d118      	bne.n	8013e9c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	e853 3f00 	ldrex	r3, [r3]
 8013e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f023 0310 	bic.w	r3, r3, #16
 8013e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013e80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	461a      	mov	r2, r3
 8013e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e88:	61fb      	str	r3, [r7, #28]
 8013e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e8c:	69b9      	ldr	r1, [r7, #24]
 8013e8e:	69fa      	ldr	r2, [r7, #28]
 8013e90:	e841 2300 	strex	r3, r2, [r1]
 8013e94:	617b      	str	r3, [r7, #20]
   return(result);
 8013e96:	697b      	ldr	r3, [r7, #20]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d1e6      	bne.n	8013e6a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ea6:	2b01      	cmp	r3, #1
 8013ea8:	d107      	bne.n	8013eba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013eb4:	f7fe fef8 	bl	8012ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013eb8:	e002      	b.n	8013ec0 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013eba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8013ebc:	f7ed fb1e 	bl	80014fc <HAL_UART_RxCpltCallback>
}
 8013ec0:	bf00      	nop
 8013ec2:	3770      	adds	r7, #112	@ 0x70
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b084      	sub	sp, #16
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ed4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2201      	movs	r2, #1
 8013eda:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d109      	bne.n	8013ef8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8013eea:	085b      	lsrs	r3, r3, #1
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	4619      	mov	r1, r3
 8013ef0:	68f8      	ldr	r0, [r7, #12]
 8013ef2:	f7fe fed9 	bl	8012ca8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013ef6:	e002      	b.n	8013efe <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f7fe fec1 	bl	8012c80 <HAL_UART_RxHalfCpltCallback>
}
 8013efe:	bf00      	nop
 8013f00:	3710      	adds	r7, #16
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bd80      	pop	{r7, pc}

08013f06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013f06:	b580      	push	{r7, lr}
 8013f08:	b086      	sub	sp, #24
 8013f0a:	af00      	add	r7, sp, #0
 8013f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013f1a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013f22:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	689b      	ldr	r3, [r3, #8]
 8013f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013f2e:	2b80      	cmp	r3, #128	@ 0x80
 8013f30:	d109      	bne.n	8013f46 <UART_DMAError+0x40>
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	2b21      	cmp	r3, #33	@ 0x21
 8013f36:	d106      	bne.n	8013f46 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8013f40:	6978      	ldr	r0, [r7, #20]
 8013f42:	f7ff fe85 	bl	8013c50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	689b      	ldr	r3, [r3, #8]
 8013f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013f50:	2b40      	cmp	r3, #64	@ 0x40
 8013f52:	d109      	bne.n	8013f68 <UART_DMAError+0x62>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b22      	cmp	r3, #34	@ 0x22
 8013f58:	d106      	bne.n	8013f68 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8013f62:	6978      	ldr	r0, [r7, #20]
 8013f64:	f7ff feb6 	bl	8013cd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013f68:	697b      	ldr	r3, [r7, #20]
 8013f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013f6e:	f043 0210 	orr.w	r2, r3, #16
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013f78:	6978      	ldr	r0, [r7, #20]
 8013f7a:	f7fe fe8b 	bl	8012c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013f7e:	bf00      	nop
 8013f80:	3718      	adds	r7, #24
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}

08013f86 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013f86:	b580      	push	{r7, lr}
 8013f88:	b084      	sub	sp, #16
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	2200      	movs	r2, #0
 8013f98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013f9c:	68f8      	ldr	r0, [r7, #12]
 8013f9e:	f7fe fe79 	bl	8012c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013fa2:	bf00      	nop
 8013fa4:	3710      	adds	r7, #16
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b088      	sub	sp, #32
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	e853 3f00 	ldrex	r3, [r3]
 8013fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013fc6:	61fb      	str	r3, [r7, #28]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	461a      	mov	r2, r3
 8013fce:	69fb      	ldr	r3, [r7, #28]
 8013fd0:	61bb      	str	r3, [r7, #24]
 8013fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fd4:	6979      	ldr	r1, [r7, #20]
 8013fd6:	69ba      	ldr	r2, [r7, #24]
 8013fd8:	e841 2300 	strex	r3, r2, [r1]
 8013fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d1e6      	bne.n	8013fb2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2220      	movs	r2, #32
 8013fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f7fe fe3a 	bl	8012c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013ff8:	bf00      	nop
 8013ffa:	3720      	adds	r7, #32
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014000:	b480      	push	{r7}
 8014002:	b083      	sub	sp, #12
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014008:	bf00      	nop
 801400a:	370c      	adds	r7, #12
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr

08014014 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801401c:	bf00      	nop
 801401e:	370c      	adds	r7, #12
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014030:	bf00      	nop
 8014032:	370c      	adds	r7, #12
 8014034:	46bd      	mov	sp, r7
 8014036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403a:	4770      	bx	lr

0801403c <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801404a:	2b01      	cmp	r3, #1
 801404c:	d101      	bne.n	8014052 <HAL_UARTEx_EnableFifoMode+0x16>
 801404e:	2302      	movs	r3, #2
 8014050:	e02b      	b.n	80140aa <HAL_UARTEx_EnableFifoMode+0x6e>
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	2201      	movs	r2, #1
 8014056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2224      	movs	r2, #36	@ 0x24
 801405e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f022 0201 	bic.w	r2, r2, #1
 8014078:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014080:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8014088:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	68fa      	ldr	r2, [r7, #12]
 8014090:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014092:	6878      	ldr	r0, [r7, #4]
 8014094:	f000 f88a 	bl	80141ac <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2220      	movs	r2, #32
 801409c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2200      	movs	r2, #0
 80140a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80140a8:	2300      	movs	r3, #0
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3710      	adds	r7, #16
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}

080140b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80140b2:	b580      	push	{r7, lr}
 80140b4:	b084      	sub	sp, #16
 80140b6:	af00      	add	r7, sp, #0
 80140b8:	6078      	str	r0, [r7, #4]
 80140ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d101      	bne.n	80140ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80140c6:	2302      	movs	r3, #2
 80140c8:	e02d      	b.n	8014126 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	2201      	movs	r2, #1
 80140ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	2224      	movs	r2, #36	@ 0x24
 80140d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	f022 0201 	bic.w	r2, r2, #1
 80140f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	689b      	ldr	r3, [r3, #8]
 80140f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	683a      	ldr	r2, [r7, #0]
 8014102:	430a      	orrs	r2, r1
 8014104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 f850 	bl	80141ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	68fa      	ldr	r2, [r7, #12]
 8014112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2220      	movs	r2, #32
 8014118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2200      	movs	r2, #0
 8014120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8014124:	2300      	movs	r3, #0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3710      	adds	r7, #16
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}

0801412e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801412e:	b580      	push	{r7, lr}
 8014130:	b084      	sub	sp, #16
 8014132:	af00      	add	r7, sp, #0
 8014134:	6078      	str	r0, [r7, #4]
 8014136:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801413e:	2b01      	cmp	r3, #1
 8014140:	d101      	bne.n	8014146 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014142:	2302      	movs	r3, #2
 8014144:	e02d      	b.n	80141a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2201      	movs	r2, #1
 801414a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	2224      	movs	r2, #36	@ 0x24
 8014152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	681a      	ldr	r2, [r3, #0]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	f022 0201 	bic.w	r2, r2, #1
 801416c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	689b      	ldr	r3, [r3, #8]
 8014174:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	430a      	orrs	r2, r1
 8014180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f000 f812 	bl	80141ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	68fa      	ldr	r2, [r7, #12]
 801418e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2220      	movs	r2, #32
 8014194:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2200      	movs	r2, #0
 801419c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80141a0:	2300      	movs	r3, #0
}
 80141a2:	4618      	mov	r0, r3
 80141a4:	3710      	adds	r7, #16
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
	...

080141ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80141ac:	b480      	push	{r7}
 80141ae:	b085      	sub	sp, #20
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d108      	bne.n	80141ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2201      	movs	r2, #1
 80141c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2201      	movs	r2, #1
 80141c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80141cc:	e031      	b.n	8014232 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80141ce:	2310      	movs	r3, #16
 80141d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80141d2:	2310      	movs	r3, #16
 80141d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	0e5b      	lsrs	r3, r3, #25
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	f003 0307 	and.w	r3, r3, #7
 80141e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	689b      	ldr	r3, [r3, #8]
 80141ec:	0f5b      	lsrs	r3, r3, #29
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	f003 0307 	and.w	r3, r3, #7
 80141f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80141f6:	7bbb      	ldrb	r3, [r7, #14]
 80141f8:	7b3a      	ldrb	r2, [r7, #12]
 80141fa:	4911      	ldr	r1, [pc, #68]	@ (8014240 <UARTEx_SetNbDataToProcess+0x94>)
 80141fc:	5c8a      	ldrb	r2, [r1, r2]
 80141fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014202:	7b3a      	ldrb	r2, [r7, #12]
 8014204:	490f      	ldr	r1, [pc, #60]	@ (8014244 <UARTEx_SetNbDataToProcess+0x98>)
 8014206:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014208:	fb93 f3f2 	sdiv	r3, r3, r2
 801420c:	b29a      	uxth	r2, r3
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014214:	7bfb      	ldrb	r3, [r7, #15]
 8014216:	7b7a      	ldrb	r2, [r7, #13]
 8014218:	4909      	ldr	r1, [pc, #36]	@ (8014240 <UARTEx_SetNbDataToProcess+0x94>)
 801421a:	5c8a      	ldrb	r2, [r1, r2]
 801421c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014220:	7b7a      	ldrb	r2, [r7, #13]
 8014222:	4908      	ldr	r1, [pc, #32]	@ (8014244 <UARTEx_SetNbDataToProcess+0x98>)
 8014224:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014226:	fb93 f3f2 	sdiv	r3, r3, r2
 801422a:	b29a      	uxth	r2, r3
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8014232:	bf00      	nop
 8014234:	3714      	adds	r7, #20
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr
 801423e:	bf00      	nop
 8014240:	080195f8 	.word	0x080195f8
 8014244:	08019600 	.word	0x08019600

08014248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014248:	b084      	sub	sp, #16
 801424a:	b580      	push	{r7, lr}
 801424c:	b084      	sub	sp, #16
 801424e:	af00      	add	r7, sp, #0
 8014250:	6078      	str	r0, [r7, #4]
 8014252:	f107 001c 	add.w	r0, r7, #28
 8014256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801425a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801425e:	2b01      	cmp	r3, #1
 8014260:	d121      	bne.n	80142a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014266:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	68da      	ldr	r2, [r3, #12]
 8014272:	4b2c      	ldr	r3, [pc, #176]	@ (8014324 <USB_CoreInit+0xdc>)
 8014274:	4013      	ands	r3, r2
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	68db      	ldr	r3, [r3, #12]
 801427e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8014286:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801428a:	2b01      	cmp	r3, #1
 801428c:	d105      	bne.n	801429a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	68db      	ldr	r3, [r3, #12]
 8014292:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	f001 fafa 	bl	8015894 <USB_CoreReset>
 80142a0:	4603      	mov	r3, r0
 80142a2:	73fb      	strb	r3, [r7, #15]
 80142a4:	e01b      	b.n	80142de <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	68db      	ldr	r3, [r3, #12]
 80142aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80142b2:	6878      	ldr	r0, [r7, #4]
 80142b4:	f001 faee 	bl	8015894 <USB_CoreReset>
 80142b8:	4603      	mov	r3, r0
 80142ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80142bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d106      	bne.n	80142d2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80142d0:	e005      	b.n	80142de <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80142d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80142de:	7fbb      	ldrb	r3, [r7, #30]
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d116      	bne.n	8014312 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80142f2:	4b0d      	ldr	r3, [pc, #52]	@ (8014328 <USB_CoreInit+0xe0>)
 80142f4:	4313      	orrs	r3, r2
 80142f6:	687a      	ldr	r2, [r7, #4]
 80142f8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	689b      	ldr	r3, [r3, #8]
 80142fe:	f043 0206 	orr.w	r2, r3, #6
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	689b      	ldr	r3, [r3, #8]
 801430a:	f043 0220 	orr.w	r2, r3, #32
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8014312:	7bfb      	ldrb	r3, [r7, #15]
}
 8014314:	4618      	mov	r0, r3
 8014316:	3710      	adds	r7, #16
 8014318:	46bd      	mov	sp, r7
 801431a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801431e:	b004      	add	sp, #16
 8014320:	4770      	bx	lr
 8014322:	bf00      	nop
 8014324:	ffbdffbf 	.word	0xffbdffbf
 8014328:	03ee0000 	.word	0x03ee0000

0801432c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801432c:	b480      	push	{r7}
 801432e:	b087      	sub	sp, #28
 8014330:	af00      	add	r7, sp, #0
 8014332:	60f8      	str	r0, [r7, #12]
 8014334:	60b9      	str	r1, [r7, #8]
 8014336:	4613      	mov	r3, r2
 8014338:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801433a:	79fb      	ldrb	r3, [r7, #7]
 801433c:	2b02      	cmp	r3, #2
 801433e:	d165      	bne.n	801440c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	4a41      	ldr	r2, [pc, #260]	@ (8014448 <USB_SetTurnaroundTime+0x11c>)
 8014344:	4293      	cmp	r3, r2
 8014346:	d906      	bls.n	8014356 <USB_SetTurnaroundTime+0x2a>
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	4a40      	ldr	r2, [pc, #256]	@ (801444c <USB_SetTurnaroundTime+0x120>)
 801434c:	4293      	cmp	r3, r2
 801434e:	d202      	bcs.n	8014356 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014350:	230f      	movs	r3, #15
 8014352:	617b      	str	r3, [r7, #20]
 8014354:	e062      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	4a3c      	ldr	r2, [pc, #240]	@ (801444c <USB_SetTurnaroundTime+0x120>)
 801435a:	4293      	cmp	r3, r2
 801435c:	d306      	bcc.n	801436c <USB_SetTurnaroundTime+0x40>
 801435e:	68bb      	ldr	r3, [r7, #8]
 8014360:	4a3b      	ldr	r2, [pc, #236]	@ (8014450 <USB_SetTurnaroundTime+0x124>)
 8014362:	4293      	cmp	r3, r2
 8014364:	d202      	bcs.n	801436c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014366:	230e      	movs	r3, #14
 8014368:	617b      	str	r3, [r7, #20]
 801436a:	e057      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801436c:	68bb      	ldr	r3, [r7, #8]
 801436e:	4a38      	ldr	r2, [pc, #224]	@ (8014450 <USB_SetTurnaroundTime+0x124>)
 8014370:	4293      	cmp	r3, r2
 8014372:	d306      	bcc.n	8014382 <USB_SetTurnaroundTime+0x56>
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	4a37      	ldr	r2, [pc, #220]	@ (8014454 <USB_SetTurnaroundTime+0x128>)
 8014378:	4293      	cmp	r3, r2
 801437a:	d202      	bcs.n	8014382 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801437c:	230d      	movs	r3, #13
 801437e:	617b      	str	r3, [r7, #20]
 8014380:	e04c      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	4a33      	ldr	r2, [pc, #204]	@ (8014454 <USB_SetTurnaroundTime+0x128>)
 8014386:	4293      	cmp	r3, r2
 8014388:	d306      	bcc.n	8014398 <USB_SetTurnaroundTime+0x6c>
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	4a32      	ldr	r2, [pc, #200]	@ (8014458 <USB_SetTurnaroundTime+0x12c>)
 801438e:	4293      	cmp	r3, r2
 8014390:	d802      	bhi.n	8014398 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014392:	230c      	movs	r3, #12
 8014394:	617b      	str	r3, [r7, #20]
 8014396:	e041      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	4a2f      	ldr	r2, [pc, #188]	@ (8014458 <USB_SetTurnaroundTime+0x12c>)
 801439c:	4293      	cmp	r3, r2
 801439e:	d906      	bls.n	80143ae <USB_SetTurnaroundTime+0x82>
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	4a2e      	ldr	r2, [pc, #184]	@ (801445c <USB_SetTurnaroundTime+0x130>)
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d802      	bhi.n	80143ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80143a8:	230b      	movs	r3, #11
 80143aa:	617b      	str	r3, [r7, #20]
 80143ac:	e036      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	4a2a      	ldr	r2, [pc, #168]	@ (801445c <USB_SetTurnaroundTime+0x130>)
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d906      	bls.n	80143c4 <USB_SetTurnaroundTime+0x98>
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	4a29      	ldr	r2, [pc, #164]	@ (8014460 <USB_SetTurnaroundTime+0x134>)
 80143ba:	4293      	cmp	r3, r2
 80143bc:	d802      	bhi.n	80143c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80143be:	230a      	movs	r3, #10
 80143c0:	617b      	str	r3, [r7, #20]
 80143c2:	e02b      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	4a26      	ldr	r2, [pc, #152]	@ (8014460 <USB_SetTurnaroundTime+0x134>)
 80143c8:	4293      	cmp	r3, r2
 80143ca:	d906      	bls.n	80143da <USB_SetTurnaroundTime+0xae>
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	4a25      	ldr	r2, [pc, #148]	@ (8014464 <USB_SetTurnaroundTime+0x138>)
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d202      	bcs.n	80143da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80143d4:	2309      	movs	r3, #9
 80143d6:	617b      	str	r3, [r7, #20]
 80143d8:	e020      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	4a21      	ldr	r2, [pc, #132]	@ (8014464 <USB_SetTurnaroundTime+0x138>)
 80143de:	4293      	cmp	r3, r2
 80143e0:	d306      	bcc.n	80143f0 <USB_SetTurnaroundTime+0xc4>
 80143e2:	68bb      	ldr	r3, [r7, #8]
 80143e4:	4a20      	ldr	r2, [pc, #128]	@ (8014468 <USB_SetTurnaroundTime+0x13c>)
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d802      	bhi.n	80143f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80143ea:	2308      	movs	r3, #8
 80143ec:	617b      	str	r3, [r7, #20]
 80143ee:	e015      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	4a1d      	ldr	r2, [pc, #116]	@ (8014468 <USB_SetTurnaroundTime+0x13c>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d906      	bls.n	8014406 <USB_SetTurnaroundTime+0xda>
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	4a1c      	ldr	r2, [pc, #112]	@ (801446c <USB_SetTurnaroundTime+0x140>)
 80143fc:	4293      	cmp	r3, r2
 80143fe:	d202      	bcs.n	8014406 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014400:	2307      	movs	r3, #7
 8014402:	617b      	str	r3, [r7, #20]
 8014404:	e00a      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014406:	2306      	movs	r3, #6
 8014408:	617b      	str	r3, [r7, #20]
 801440a:	e007      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801440c:	79fb      	ldrb	r3, [r7, #7]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d102      	bne.n	8014418 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8014412:	2309      	movs	r3, #9
 8014414:	617b      	str	r3, [r7, #20]
 8014416:	e001      	b.n	801441c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014418:	2309      	movs	r3, #9
 801441a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	68da      	ldr	r2, [r3, #12]
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	029b      	lsls	r3, r3, #10
 8014430:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8014434:	431a      	orrs	r2, r3
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801443a:	2300      	movs	r3, #0
}
 801443c:	4618      	mov	r0, r3
 801443e:	371c      	adds	r7, #28
 8014440:	46bd      	mov	sp, r7
 8014442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014446:	4770      	bx	lr
 8014448:	00d8acbf 	.word	0x00d8acbf
 801444c:	00e4e1c0 	.word	0x00e4e1c0
 8014450:	00f42400 	.word	0x00f42400
 8014454:	01067380 	.word	0x01067380
 8014458:	011a499f 	.word	0x011a499f
 801445c:	01312cff 	.word	0x01312cff
 8014460:	014ca43f 	.word	0x014ca43f
 8014464:	016e3600 	.word	0x016e3600
 8014468:	01a6ab1f 	.word	0x01a6ab1f
 801446c:	01e84800 	.word	0x01e84800

08014470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	689b      	ldr	r3, [r3, #8]
 801447c:	f043 0201 	orr.w	r2, r3, #1
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	370c      	adds	r7, #12
 801448a:	46bd      	mov	sp, r7
 801448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014490:	4770      	bx	lr

08014492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014492:	b480      	push	{r7}
 8014494:	b083      	sub	sp, #12
 8014496:	af00      	add	r7, sp, #0
 8014498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	689b      	ldr	r3, [r3, #8]
 801449e:	f023 0201 	bic.w	r2, r3, #1
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80144a6:	2300      	movs	r3, #0
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	370c      	adds	r7, #12
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b084      	sub	sp, #16
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
 80144bc:	460b      	mov	r3, r1
 80144be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80144c0:	2300      	movs	r3, #0
 80144c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80144d0:	78fb      	ldrb	r3, [r7, #3]
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d115      	bne.n	8014502 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	68db      	ldr	r3, [r3, #12]
 80144da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80144e2:	200a      	movs	r0, #10
 80144e4:	f7ee fbbc 	bl	8002c60 <HAL_Delay>
      ms += 10U;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	330a      	adds	r3, #10
 80144ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f001 f93f 	bl	8015772 <USB_GetMode>
 80144f4:	4603      	mov	r3, r0
 80144f6:	2b01      	cmp	r3, #1
 80144f8:	d01e      	beq.n	8014538 <USB_SetCurrentMode+0x84>
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80144fe:	d9f0      	bls.n	80144e2 <USB_SetCurrentMode+0x2e>
 8014500:	e01a      	b.n	8014538 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014502:	78fb      	ldrb	r3, [r7, #3]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d115      	bne.n	8014534 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	68db      	ldr	r3, [r3, #12]
 801450c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8014514:	200a      	movs	r0, #10
 8014516:	f7ee fba3 	bl	8002c60 <HAL_Delay>
      ms += 10U;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	330a      	adds	r3, #10
 801451e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f001 f926 	bl	8015772 <USB_GetMode>
 8014526:	4603      	mov	r3, r0
 8014528:	2b00      	cmp	r3, #0
 801452a:	d005      	beq.n	8014538 <USB_SetCurrentMode+0x84>
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2bc7      	cmp	r3, #199	@ 0xc7
 8014530:	d9f0      	bls.n	8014514 <USB_SetCurrentMode+0x60>
 8014532:	e001      	b.n	8014538 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014534:	2301      	movs	r3, #1
 8014536:	e005      	b.n	8014544 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	2bc8      	cmp	r3, #200	@ 0xc8
 801453c:	d101      	bne.n	8014542 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801453e:	2301      	movs	r3, #1
 8014540:	e000      	b.n	8014544 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014542:	2300      	movs	r3, #0
}
 8014544:	4618      	mov	r0, r3
 8014546:	3710      	adds	r7, #16
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801454c:	b084      	sub	sp, #16
 801454e:	b580      	push	{r7, lr}
 8014550:	b086      	sub	sp, #24
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
 8014556:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801455a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801455e:	2300      	movs	r3, #0
 8014560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014566:	2300      	movs	r3, #0
 8014568:	613b      	str	r3, [r7, #16]
 801456a:	e009      	b.n	8014580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801456c:	687a      	ldr	r2, [r7, #4]
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	3340      	adds	r3, #64	@ 0x40
 8014572:	009b      	lsls	r3, r3, #2
 8014574:	4413      	add	r3, r2
 8014576:	2200      	movs	r2, #0
 8014578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801457a:	693b      	ldr	r3, [r7, #16]
 801457c:	3301      	adds	r3, #1
 801457e:	613b      	str	r3, [r7, #16]
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	2b0e      	cmp	r3, #14
 8014584:	d9f2      	bls.n	801456c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801458a:	2b00      	cmp	r3, #0
 801458c:	d11c      	bne.n	80145c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014594:	685b      	ldr	r3, [r3, #4]
 8014596:	68fa      	ldr	r2, [r7, #12]
 8014598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801459c:	f043 0302 	orr.w	r3, r3, #2
 80145a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	601a      	str	r2, [r3, #0]
 80145c6:	e005      	b.n	80145d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80145da:	461a      	mov	r2, r3
 80145dc:	2300      	movs	r3, #0
 80145de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80145e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	d10d      	bne.n	8014604 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80145e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d104      	bne.n	80145fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80145f0:	2100      	movs	r1, #0
 80145f2:	6878      	ldr	r0, [r7, #4]
 80145f4:	f000 f968 	bl	80148c8 <USB_SetDevSpeed>
 80145f8:	e008      	b.n	801460c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80145fa:	2101      	movs	r1, #1
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 f963 	bl	80148c8 <USB_SetDevSpeed>
 8014602:	e003      	b.n	801460c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014604:	2103      	movs	r1, #3
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f000 f95e 	bl	80148c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801460c:	2110      	movs	r1, #16
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f000 f8fa 	bl	8014808 <USB_FlushTxFifo>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d001      	beq.n	801461e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 801461a:	2301      	movs	r3, #1
 801461c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f000 f924 	bl	801486c <USB_FlushRxFifo>
 8014624:	4603      	mov	r3, r0
 8014626:	2b00      	cmp	r3, #0
 8014628:	d001      	beq.n	801462e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 801462a:	2301      	movs	r3, #1
 801462c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014634:	461a      	mov	r2, r3
 8014636:	2300      	movs	r3, #0
 8014638:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014640:	461a      	mov	r2, r3
 8014642:	2300      	movs	r3, #0
 8014644:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801464c:	461a      	mov	r2, r3
 801464e:	2300      	movs	r3, #0
 8014650:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014652:	2300      	movs	r3, #0
 8014654:	613b      	str	r3, [r7, #16]
 8014656:	e043      	b.n	80146e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	015a      	lsls	r2, r3, #5
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	4413      	add	r3, r2
 8014660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801466a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801466e:	d118      	bne.n	80146a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d10a      	bne.n	801468c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	015a      	lsls	r2, r3, #5
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	4413      	add	r3, r2
 801467e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014682:	461a      	mov	r2, r3
 8014684:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014688:	6013      	str	r3, [r2, #0]
 801468a:	e013      	b.n	80146b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801468c:	693b      	ldr	r3, [r7, #16]
 801468e:	015a      	lsls	r2, r3, #5
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	4413      	add	r3, r2
 8014694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014698:	461a      	mov	r2, r3
 801469a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801469e:	6013      	str	r3, [r2, #0]
 80146a0:	e008      	b.n	80146b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80146a2:	693b      	ldr	r3, [r7, #16]
 80146a4:	015a      	lsls	r2, r3, #5
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	4413      	add	r3, r2
 80146aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146ae:	461a      	mov	r2, r3
 80146b0:	2300      	movs	r3, #0
 80146b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80146b4:	693b      	ldr	r3, [r7, #16]
 80146b6:	015a      	lsls	r2, r3, #5
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	4413      	add	r3, r2
 80146bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146c0:	461a      	mov	r2, r3
 80146c2:	2300      	movs	r3, #0
 80146c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	015a      	lsls	r2, r3, #5
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	4413      	add	r3, r2
 80146ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80146d2:	461a      	mov	r2, r3
 80146d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80146d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80146da:	693b      	ldr	r3, [r7, #16]
 80146dc:	3301      	adds	r3, #1
 80146de:	613b      	str	r3, [r7, #16]
 80146e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80146e4:	461a      	mov	r2, r3
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	4293      	cmp	r3, r2
 80146ea:	d3b5      	bcc.n	8014658 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80146ec:	2300      	movs	r3, #0
 80146ee:	613b      	str	r3, [r7, #16]
 80146f0:	e043      	b.n	801477a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	015a      	lsls	r2, r3, #5
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	4413      	add	r3, r2
 80146fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014708:	d118      	bne.n	801473c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 801470a:	693b      	ldr	r3, [r7, #16]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d10a      	bne.n	8014726 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	015a      	lsls	r2, r3, #5
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	4413      	add	r3, r2
 8014718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801471c:	461a      	mov	r2, r3
 801471e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8014722:	6013      	str	r3, [r2, #0]
 8014724:	e013      	b.n	801474e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014726:	693b      	ldr	r3, [r7, #16]
 8014728:	015a      	lsls	r2, r3, #5
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	4413      	add	r3, r2
 801472e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014732:	461a      	mov	r2, r3
 8014734:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8014738:	6013      	str	r3, [r2, #0]
 801473a:	e008      	b.n	801474e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	015a      	lsls	r2, r3, #5
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	4413      	add	r3, r2
 8014744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014748:	461a      	mov	r2, r3
 801474a:	2300      	movs	r3, #0
 801474c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801474e:	693b      	ldr	r3, [r7, #16]
 8014750:	015a      	lsls	r2, r3, #5
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	4413      	add	r3, r2
 8014756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801475a:	461a      	mov	r2, r3
 801475c:	2300      	movs	r3, #0
 801475e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	015a      	lsls	r2, r3, #5
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	4413      	add	r3, r2
 8014768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801476c:	461a      	mov	r2, r3
 801476e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8014772:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	3301      	adds	r3, #1
 8014778:	613b      	str	r3, [r7, #16]
 801477a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801477e:	461a      	mov	r2, r3
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	4293      	cmp	r3, r2
 8014784:	d3b5      	bcc.n	80146f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014786:	68fb      	ldr	r3, [r7, #12]
 8014788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801478c:	691b      	ldr	r3, [r3, #16]
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8014794:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014798:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80147a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80147a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d105      	bne.n	80147bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	699b      	ldr	r3, [r3, #24]
 80147b4:	f043 0210 	orr.w	r2, r3, #16
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	699a      	ldr	r2, [r3, #24]
 80147c0:	4b0f      	ldr	r3, [pc, #60]	@ (8014800 <USB_DevInit+0x2b4>)
 80147c2:	4313      	orrs	r3, r2
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80147c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d005      	beq.n	80147dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	699b      	ldr	r3, [r3, #24]
 80147d4:	f043 0208 	orr.w	r2, r3, #8
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80147dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d105      	bne.n	80147f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	699a      	ldr	r2, [r3, #24]
 80147e8:	4b06      	ldr	r3, [pc, #24]	@ (8014804 <USB_DevInit+0x2b8>)
 80147ea:	4313      	orrs	r3, r2
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80147f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	3718      	adds	r7, #24
 80147f6:	46bd      	mov	sp, r7
 80147f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80147fc:	b004      	add	sp, #16
 80147fe:	4770      	bx	lr
 8014800:	803c3800 	.word	0x803c3800
 8014804:	40000004 	.word	0x40000004

08014808 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8014808:	b480      	push	{r7}
 801480a:	b085      	sub	sp, #20
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014812:	2300      	movs	r3, #0
 8014814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	3301      	adds	r3, #1
 801481a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014822:	d901      	bls.n	8014828 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8014824:	2303      	movs	r3, #3
 8014826:	e01b      	b.n	8014860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	691b      	ldr	r3, [r3, #16]
 801482c:	2b00      	cmp	r3, #0
 801482e:	daf2      	bge.n	8014816 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8014830:	2300      	movs	r3, #0
 8014832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	019b      	lsls	r3, r3, #6
 8014838:	f043 0220 	orr.w	r2, r3, #32
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	3301      	adds	r3, #1
 8014844:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801484c:	d901      	bls.n	8014852 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801484e:	2303      	movs	r3, #3
 8014850:	e006      	b.n	8014860 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	691b      	ldr	r3, [r3, #16]
 8014856:	f003 0320 	and.w	r3, r3, #32
 801485a:	2b20      	cmp	r3, #32
 801485c:	d0f0      	beq.n	8014840 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801485e:	2300      	movs	r3, #0
}
 8014860:	4618      	mov	r0, r3
 8014862:	3714      	adds	r7, #20
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014874:	2300      	movs	r3, #0
 8014876:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	3301      	adds	r3, #1
 801487c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8014884:	d901      	bls.n	801488a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8014886:	2303      	movs	r3, #3
 8014888:	e018      	b.n	80148bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	691b      	ldr	r3, [r3, #16]
 801488e:	2b00      	cmp	r3, #0
 8014890:	daf2      	bge.n	8014878 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8014892:	2300      	movs	r3, #0
 8014894:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2210      	movs	r2, #16
 801489a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3301      	adds	r3, #1
 80148a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80148a8:	d901      	bls.n	80148ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80148aa:	2303      	movs	r3, #3
 80148ac:	e006      	b.n	80148bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	691b      	ldr	r3, [r3, #16]
 80148b2:	f003 0310 	and.w	r3, r3, #16
 80148b6:	2b10      	cmp	r3, #16
 80148b8:	d0f0      	beq.n	801489c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80148ba:	2300      	movs	r3, #0
}
 80148bc:	4618      	mov	r0, r3
 80148be:	3714      	adds	r7, #20
 80148c0:	46bd      	mov	sp, r7
 80148c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148c6:	4770      	bx	lr

080148c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80148c8:	b480      	push	{r7}
 80148ca:	b085      	sub	sp, #20
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
 80148d0:	460b      	mov	r3, r1
 80148d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80148de:	681a      	ldr	r2, [r3, #0]
 80148e0:	78fb      	ldrb	r3, [r7, #3]
 80148e2:	68f9      	ldr	r1, [r7, #12]
 80148e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80148e8:	4313      	orrs	r3, r2
 80148ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80148ec:	2300      	movs	r3, #0
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3714      	adds	r7, #20
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr

080148fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80148fa:	b480      	push	{r7}
 80148fc:	b087      	sub	sp, #28
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8014906:	693b      	ldr	r3, [r7, #16]
 8014908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801490c:	689b      	ldr	r3, [r3, #8]
 801490e:	f003 0306 	and.w	r3, r3, #6
 8014912:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d102      	bne.n	8014920 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801491a:	2300      	movs	r3, #0
 801491c:	75fb      	strb	r3, [r7, #23]
 801491e:	e00a      	b.n	8014936 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	2b02      	cmp	r3, #2
 8014924:	d002      	beq.n	801492c <USB_GetDevSpeed+0x32>
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	2b06      	cmp	r3, #6
 801492a:	d102      	bne.n	8014932 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801492c:	2302      	movs	r3, #2
 801492e:	75fb      	strb	r3, [r7, #23]
 8014930:	e001      	b.n	8014936 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8014932:	230f      	movs	r3, #15
 8014934:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8014936:	7dfb      	ldrb	r3, [r7, #23]
}
 8014938:	4618      	mov	r0, r3
 801493a:	371c      	adds	r7, #28
 801493c:	46bd      	mov	sp, r7
 801493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014942:	4770      	bx	lr

08014944 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014944:	b480      	push	{r7}
 8014946:	b085      	sub	sp, #20
 8014948:	af00      	add	r7, sp, #0
 801494a:	6078      	str	r0, [r7, #4]
 801494c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	785b      	ldrb	r3, [r3, #1]
 801495c:	2b01      	cmp	r3, #1
 801495e:	d139      	bne.n	80149d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014966:	69da      	ldr	r2, [r3, #28]
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	f003 030f 	and.w	r3, r3, #15
 8014970:	2101      	movs	r1, #1
 8014972:	fa01 f303 	lsl.w	r3, r1, r3
 8014976:	b29b      	uxth	r3, r3
 8014978:	68f9      	ldr	r1, [r7, #12]
 801497a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801497e:	4313      	orrs	r3, r2
 8014980:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8014982:	68bb      	ldr	r3, [r7, #8]
 8014984:	015a      	lsls	r2, r3, #5
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	4413      	add	r3, r2
 801498a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801498e:	681b      	ldr	r3, [r3, #0]
 8014990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014994:	2b00      	cmp	r3, #0
 8014996:	d153      	bne.n	8014a40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014998:	68bb      	ldr	r3, [r7, #8]
 801499a:	015a      	lsls	r2, r3, #5
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	4413      	add	r3, r2
 80149a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149a4:	681a      	ldr	r2, [r3, #0]
 80149a6:	683b      	ldr	r3, [r7, #0]
 80149a8:	689b      	ldr	r3, [r3, #8]
 80149aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	791b      	ldrb	r3, [r3, #4]
 80149b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80149b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	059b      	lsls	r3, r3, #22
 80149ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80149bc:	431a      	orrs	r2, r3
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	0159      	lsls	r1, r3, #5
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	440b      	add	r3, r1
 80149c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80149ca:	4619      	mov	r1, r3
 80149cc:	4b20      	ldr	r3, [pc, #128]	@ (8014a50 <USB_ActivateEndpoint+0x10c>)
 80149ce:	4313      	orrs	r3, r2
 80149d0:	600b      	str	r3, [r1, #0]
 80149d2:	e035      	b.n	8014a40 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80149da:	69da      	ldr	r2, [r3, #28]
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	f003 030f 	and.w	r3, r3, #15
 80149e4:	2101      	movs	r1, #1
 80149e6:	fa01 f303 	lsl.w	r3, r1, r3
 80149ea:	041b      	lsls	r3, r3, #16
 80149ec:	68f9      	ldr	r1, [r7, #12]
 80149ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80149f2:	4313      	orrs	r3, r2
 80149f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	015a      	lsls	r2, r3, #5
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	4413      	add	r3, r2
 80149fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d119      	bne.n	8014a40 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	015a      	lsls	r2, r3, #5
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	4413      	add	r3, r2
 8014a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a18:	681a      	ldr	r2, [r3, #0]
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	689b      	ldr	r3, [r3, #8]
 8014a1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	791b      	ldrb	r3, [r3, #4]
 8014a26:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8014a28:	430b      	orrs	r3, r1
 8014a2a:	431a      	orrs	r2, r3
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	0159      	lsls	r1, r3, #5
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	440b      	add	r3, r1
 8014a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014a38:	4619      	mov	r1, r3
 8014a3a:	4b05      	ldr	r3, [pc, #20]	@ (8014a50 <USB_ActivateEndpoint+0x10c>)
 8014a3c:	4313      	orrs	r3, r2
 8014a3e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8014a40:	2300      	movs	r3, #0
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3714      	adds	r7, #20
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr
 8014a4e:	bf00      	nop
 8014a50:	10008000 	.word	0x10008000

08014a54 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8014a54:	b480      	push	{r7}
 8014a56:	b085      	sub	sp, #20
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	781b      	ldrb	r3, [r3, #0]
 8014a66:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	785b      	ldrb	r3, [r3, #1]
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d161      	bne.n	8014b34 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014a70:	68bb      	ldr	r3, [r7, #8]
 8014a72:	015a      	lsls	r2, r3, #5
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	4413      	add	r3, r2
 8014a78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014a86:	d11f      	bne.n	8014ac8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	015a      	lsls	r2, r3, #5
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	4413      	add	r3, r2
 8014a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	0151      	lsls	r1, r2, #5
 8014a9a:	68fa      	ldr	r2, [r7, #12]
 8014a9c:	440a      	add	r2, r1
 8014a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014aa2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014aa6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	015a      	lsls	r2, r3, #5
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	4413      	add	r3, r2
 8014ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	68ba      	ldr	r2, [r7, #8]
 8014ab8:	0151      	lsls	r1, r2, #5
 8014aba:	68fa      	ldr	r2, [r7, #12]
 8014abc:	440a      	add	r2, r1
 8014abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ac2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ace:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014ad0:	683b      	ldr	r3, [r7, #0]
 8014ad2:	781b      	ldrb	r3, [r3, #0]
 8014ad4:	f003 030f 	and.w	r3, r3, #15
 8014ad8:	2101      	movs	r1, #1
 8014ada:	fa01 f303 	lsl.w	r3, r1, r3
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	43db      	mvns	r3, r3
 8014ae2:	68f9      	ldr	r1, [r7, #12]
 8014ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014ae8:	4013      	ands	r3, r2
 8014aea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014af2:	69da      	ldr	r2, [r3, #28]
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	f003 030f 	and.w	r3, r3, #15
 8014afc:	2101      	movs	r1, #1
 8014afe:	fa01 f303 	lsl.w	r3, r1, r3
 8014b02:	b29b      	uxth	r3, r3
 8014b04:	43db      	mvns	r3, r3
 8014b06:	68f9      	ldr	r1, [r7, #12]
 8014b08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014b0c:	4013      	ands	r3, r2
 8014b0e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8014b10:	68bb      	ldr	r3, [r7, #8]
 8014b12:	015a      	lsls	r2, r3, #5
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	4413      	add	r3, r2
 8014b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	68bb      	ldr	r3, [r7, #8]
 8014b20:	0159      	lsls	r1, r3, #5
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	440b      	add	r3, r1
 8014b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	4b35      	ldr	r3, [pc, #212]	@ (8014c04 <USB_DeactivateEndpoint+0x1b0>)
 8014b2e:	4013      	ands	r3, r2
 8014b30:	600b      	str	r3, [r1, #0]
 8014b32:	e060      	b.n	8014bf6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	015a      	lsls	r2, r3, #5
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8014b46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8014b4a:	d11f      	bne.n	8014b8c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	015a      	lsls	r2, r3, #5
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	4413      	add	r3, r2
 8014b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	68ba      	ldr	r2, [r7, #8]
 8014b5c:	0151      	lsls	r1, r2, #5
 8014b5e:	68fa      	ldr	r2, [r7, #12]
 8014b60:	440a      	add	r2, r1
 8014b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8014b6a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	015a      	lsls	r2, r3, #5
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	4413      	add	r3, r2
 8014b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	68ba      	ldr	r2, [r7, #8]
 8014b7c:	0151      	lsls	r1, r2, #5
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	440a      	add	r2, r1
 8014b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014b86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8014b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014b92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	f003 030f 	and.w	r3, r3, #15
 8014b9c:	2101      	movs	r1, #1
 8014b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8014ba2:	041b      	lsls	r3, r3, #16
 8014ba4:	43db      	mvns	r3, r3
 8014ba6:	68f9      	ldr	r1, [r7, #12]
 8014ba8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014bac:	4013      	ands	r3, r2
 8014bae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014bb6:	69da      	ldr	r2, [r3, #28]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	f003 030f 	and.w	r3, r3, #15
 8014bc0:	2101      	movs	r1, #1
 8014bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8014bc6:	041b      	lsls	r3, r3, #16
 8014bc8:	43db      	mvns	r3, r3
 8014bca:	68f9      	ldr	r1, [r7, #12]
 8014bcc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014bd0:	4013      	ands	r3, r2
 8014bd2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	015a      	lsls	r2, r3, #5
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	4413      	add	r3, r2
 8014bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014be0:	681a      	ldr	r2, [r3, #0]
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	0159      	lsls	r1, r3, #5
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	440b      	add	r3, r1
 8014bea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014bee:	4619      	mov	r1, r3
 8014bf0:	4b05      	ldr	r3, [pc, #20]	@ (8014c08 <USB_DeactivateEndpoint+0x1b4>)
 8014bf2:	4013      	ands	r3, r2
 8014bf4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014bf6:	2300      	movs	r3, #0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3714      	adds	r7, #20
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c02:	4770      	bx	lr
 8014c04:	ec337800 	.word	0xec337800
 8014c08:	eff37800 	.word	0xeff37800

08014c0c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b08a      	sub	sp, #40	@ 0x28
 8014c10:	af02      	add	r7, sp, #8
 8014c12:	60f8      	str	r0, [r7, #12]
 8014c14:	60b9      	str	r1, [r7, #8]
 8014c16:	4613      	mov	r3, r2
 8014c18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	781b      	ldrb	r3, [r3, #0]
 8014c22:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014c24:	68bb      	ldr	r3, [r7, #8]
 8014c26:	785b      	ldrb	r3, [r3, #1]
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	f040 8185 	bne.w	8014f38 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014c2e:	68bb      	ldr	r3, [r7, #8]
 8014c30:	691b      	ldr	r3, [r3, #16]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d132      	bne.n	8014c9c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014c36:	69bb      	ldr	r3, [r7, #24]
 8014c38:	015a      	lsls	r2, r3, #5
 8014c3a:	69fb      	ldr	r3, [r7, #28]
 8014c3c:	4413      	add	r3, r2
 8014c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c42:	691a      	ldr	r2, [r3, #16]
 8014c44:	69bb      	ldr	r3, [r7, #24]
 8014c46:	0159      	lsls	r1, r3, #5
 8014c48:	69fb      	ldr	r3, [r7, #28]
 8014c4a:	440b      	add	r3, r1
 8014c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c50:	4619      	mov	r1, r3
 8014c52:	4ba7      	ldr	r3, [pc, #668]	@ (8014ef0 <USB_EPStartXfer+0x2e4>)
 8014c54:	4013      	ands	r3, r2
 8014c56:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	015a      	lsls	r2, r3, #5
 8014c5c:	69fb      	ldr	r3, [r7, #28]
 8014c5e:	4413      	add	r3, r2
 8014c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c64:	691b      	ldr	r3, [r3, #16]
 8014c66:	69ba      	ldr	r2, [r7, #24]
 8014c68:	0151      	lsls	r1, r2, #5
 8014c6a:	69fa      	ldr	r2, [r7, #28]
 8014c6c:	440a      	add	r2, r1
 8014c6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014c72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014c76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c78:	69bb      	ldr	r3, [r7, #24]
 8014c7a:	015a      	lsls	r2, r3, #5
 8014c7c:	69fb      	ldr	r3, [r7, #28]
 8014c7e:	4413      	add	r3, r2
 8014c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c84:	691a      	ldr	r2, [r3, #16]
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	0159      	lsls	r1, r3, #5
 8014c8a:	69fb      	ldr	r3, [r7, #28]
 8014c8c:	440b      	add	r3, r1
 8014c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014c92:	4619      	mov	r1, r3
 8014c94:	4b97      	ldr	r3, [pc, #604]	@ (8014ef4 <USB_EPStartXfer+0x2e8>)
 8014c96:	4013      	ands	r3, r2
 8014c98:	610b      	str	r3, [r1, #16]
 8014c9a:	e097      	b.n	8014dcc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014c9c:	69bb      	ldr	r3, [r7, #24]
 8014c9e:	015a      	lsls	r2, r3, #5
 8014ca0:	69fb      	ldr	r3, [r7, #28]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014ca8:	691a      	ldr	r2, [r3, #16]
 8014caa:	69bb      	ldr	r3, [r7, #24]
 8014cac:	0159      	lsls	r1, r3, #5
 8014cae:	69fb      	ldr	r3, [r7, #28]
 8014cb0:	440b      	add	r3, r1
 8014cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	4b8e      	ldr	r3, [pc, #568]	@ (8014ef4 <USB_EPStartXfer+0x2e8>)
 8014cba:	4013      	ands	r3, r2
 8014cbc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	015a      	lsls	r2, r3, #5
 8014cc2:	69fb      	ldr	r3, [r7, #28]
 8014cc4:	4413      	add	r3, r2
 8014cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cca:	691a      	ldr	r2, [r3, #16]
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	0159      	lsls	r1, r3, #5
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	440b      	add	r3, r1
 8014cd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014cd8:	4619      	mov	r1, r3
 8014cda:	4b85      	ldr	r3, [pc, #532]	@ (8014ef0 <USB_EPStartXfer+0x2e4>)
 8014cdc:	4013      	ands	r3, r2
 8014cde:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8014ce0:	69bb      	ldr	r3, [r7, #24]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d11a      	bne.n	8014d1c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	691a      	ldr	r2, [r3, #16]
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	689b      	ldr	r3, [r3, #8]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d903      	bls.n	8014cfa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8014cf2:	68bb      	ldr	r3, [r7, #8]
 8014cf4:	689a      	ldr	r2, [r3, #8]
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014cfa:	69bb      	ldr	r3, [r7, #24]
 8014cfc:	015a      	lsls	r2, r3, #5
 8014cfe:	69fb      	ldr	r3, [r7, #28]
 8014d00:	4413      	add	r3, r2
 8014d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d06:	691b      	ldr	r3, [r3, #16]
 8014d08:	69ba      	ldr	r2, [r7, #24]
 8014d0a:	0151      	lsls	r1, r2, #5
 8014d0c:	69fa      	ldr	r2, [r7, #28]
 8014d0e:	440a      	add	r2, r1
 8014d10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014d18:	6113      	str	r3, [r2, #16]
 8014d1a:	e044      	b.n	8014da6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	691a      	ldr	r2, [r3, #16]
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	689b      	ldr	r3, [r3, #8]
 8014d24:	4413      	add	r3, r2
 8014d26:	1e5a      	subs	r2, r3, #1
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	689b      	ldr	r3, [r3, #8]
 8014d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d30:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	015a      	lsls	r2, r3, #5
 8014d36:	69fb      	ldr	r3, [r7, #28]
 8014d38:	4413      	add	r3, r2
 8014d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d3e:	691a      	ldr	r2, [r3, #16]
 8014d40:	8afb      	ldrh	r3, [r7, #22]
 8014d42:	04d9      	lsls	r1, r3, #19
 8014d44:	4b6c      	ldr	r3, [pc, #432]	@ (8014ef8 <USB_EPStartXfer+0x2ec>)
 8014d46:	400b      	ands	r3, r1
 8014d48:	69b9      	ldr	r1, [r7, #24]
 8014d4a:	0148      	lsls	r0, r1, #5
 8014d4c:	69f9      	ldr	r1, [r7, #28]
 8014d4e:	4401      	add	r1, r0
 8014d50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014d54:	4313      	orrs	r3, r2
 8014d56:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	791b      	ldrb	r3, [r3, #4]
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d122      	bne.n	8014da6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8014d60:	69bb      	ldr	r3, [r7, #24]
 8014d62:	015a      	lsls	r2, r3, #5
 8014d64:	69fb      	ldr	r3, [r7, #28]
 8014d66:	4413      	add	r3, r2
 8014d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d6c:	691b      	ldr	r3, [r3, #16]
 8014d6e:	69ba      	ldr	r2, [r7, #24]
 8014d70:	0151      	lsls	r1, r2, #5
 8014d72:	69fa      	ldr	r2, [r7, #28]
 8014d74:	440a      	add	r2, r1
 8014d76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014d7a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8014d7e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8014d80:	69bb      	ldr	r3, [r7, #24]
 8014d82:	015a      	lsls	r2, r3, #5
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	4413      	add	r3, r2
 8014d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014d8c:	691a      	ldr	r2, [r3, #16]
 8014d8e:	8afb      	ldrh	r3, [r7, #22]
 8014d90:	075b      	lsls	r3, r3, #29
 8014d92:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8014d96:	69b9      	ldr	r1, [r7, #24]
 8014d98:	0148      	lsls	r0, r1, #5
 8014d9a:	69f9      	ldr	r1, [r7, #28]
 8014d9c:	4401      	add	r1, r0
 8014d9e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014da2:	4313      	orrs	r3, r2
 8014da4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014da6:	69bb      	ldr	r3, [r7, #24]
 8014da8:	015a      	lsls	r2, r3, #5
 8014daa:	69fb      	ldr	r3, [r7, #28]
 8014dac:	4413      	add	r3, r2
 8014dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014db2:	691a      	ldr	r2, [r3, #16]
 8014db4:	68bb      	ldr	r3, [r7, #8]
 8014db6:	691b      	ldr	r3, [r3, #16]
 8014db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014dbc:	69b9      	ldr	r1, [r7, #24]
 8014dbe:	0148      	lsls	r0, r1, #5
 8014dc0:	69f9      	ldr	r1, [r7, #28]
 8014dc2:	4401      	add	r1, r0
 8014dc4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8014dc8:	4313      	orrs	r3, r2
 8014dca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014dcc:	79fb      	ldrb	r3, [r7, #7]
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d14b      	bne.n	8014e6a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	69db      	ldr	r3, [r3, #28]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d009      	beq.n	8014dee <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	015a      	lsls	r2, r3, #5
 8014dde:	69fb      	ldr	r3, [r7, #28]
 8014de0:	4413      	add	r3, r2
 8014de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014de6:	461a      	mov	r2, r3
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	69db      	ldr	r3, [r3, #28]
 8014dec:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	791b      	ldrb	r3, [r3, #4]
 8014df2:	2b01      	cmp	r3, #1
 8014df4:	d128      	bne.n	8014e48 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014df6:	69fb      	ldr	r3, [r7, #28]
 8014df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014dfc:	689b      	ldr	r3, [r3, #8]
 8014dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d110      	bne.n	8014e28 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014e06:	69bb      	ldr	r3, [r7, #24]
 8014e08:	015a      	lsls	r2, r3, #5
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	69ba      	ldr	r2, [r7, #24]
 8014e16:	0151      	lsls	r1, r2, #5
 8014e18:	69fa      	ldr	r2, [r7, #28]
 8014e1a:	440a      	add	r2, r1
 8014e1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014e24:	6013      	str	r3, [r2, #0]
 8014e26:	e00f      	b.n	8014e48 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014e28:	69bb      	ldr	r3, [r7, #24]
 8014e2a:	015a      	lsls	r2, r3, #5
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	4413      	add	r3, r2
 8014e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	69ba      	ldr	r2, [r7, #24]
 8014e38:	0151      	lsls	r1, r2, #5
 8014e3a:	69fa      	ldr	r2, [r7, #28]
 8014e3c:	440a      	add	r2, r1
 8014e3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014e46:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e48:	69bb      	ldr	r3, [r7, #24]
 8014e4a:	015a      	lsls	r2, r3, #5
 8014e4c:	69fb      	ldr	r3, [r7, #28]
 8014e4e:	4413      	add	r3, r2
 8014e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	69ba      	ldr	r2, [r7, #24]
 8014e58:	0151      	lsls	r1, r2, #5
 8014e5a:	69fa      	ldr	r2, [r7, #28]
 8014e5c:	440a      	add	r2, r1
 8014e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014e66:	6013      	str	r3, [r2, #0]
 8014e68:	e169      	b.n	801513e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	015a      	lsls	r2, r3, #5
 8014e6e:	69fb      	ldr	r3, [r7, #28]
 8014e70:	4413      	add	r3, r2
 8014e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014e76:	681b      	ldr	r3, [r3, #0]
 8014e78:	69ba      	ldr	r2, [r7, #24]
 8014e7a:	0151      	lsls	r1, r2, #5
 8014e7c:	69fa      	ldr	r2, [r7, #28]
 8014e7e:	440a      	add	r2, r1
 8014e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014e84:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8014e88:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	791b      	ldrb	r3, [r3, #4]
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d015      	beq.n	8014ebe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	691b      	ldr	r3, [r3, #16]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	f000 8151 	beq.w	801513e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	f003 030f 	and.w	r3, r3, #15
 8014eac:	2101      	movs	r1, #1
 8014eae:	fa01 f303 	lsl.w	r3, r1, r3
 8014eb2:	69f9      	ldr	r1, [r7, #28]
 8014eb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8014eb8:	4313      	orrs	r3, r2
 8014eba:	634b      	str	r3, [r1, #52]	@ 0x34
 8014ebc:	e13f      	b.n	801513e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8014ec4:	689b      	ldr	r3, [r3, #8]
 8014ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d116      	bne.n	8014efc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	015a      	lsls	r2, r3, #5
 8014ed2:	69fb      	ldr	r3, [r7, #28]
 8014ed4:	4413      	add	r3, r2
 8014ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	69ba      	ldr	r2, [r7, #24]
 8014ede:	0151      	lsls	r1, r2, #5
 8014ee0:	69fa      	ldr	r2, [r7, #28]
 8014ee2:	440a      	add	r2, r1
 8014ee4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8014eec:	6013      	str	r3, [r2, #0]
 8014eee:	e015      	b.n	8014f1c <USB_EPStartXfer+0x310>
 8014ef0:	e007ffff 	.word	0xe007ffff
 8014ef4:	fff80000 	.word	0xfff80000
 8014ef8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014efc:	69bb      	ldr	r3, [r7, #24]
 8014efe:	015a      	lsls	r2, r3, #5
 8014f00:	69fb      	ldr	r3, [r7, #28]
 8014f02:	4413      	add	r3, r2
 8014f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	69ba      	ldr	r2, [r7, #24]
 8014f0c:	0151      	lsls	r1, r2, #5
 8014f0e:	69fa      	ldr	r2, [r7, #28]
 8014f10:	440a      	add	r2, r1
 8014f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8014f16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014f1a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	68d9      	ldr	r1, [r3, #12]
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	781a      	ldrb	r2, [r3, #0]
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	691b      	ldr	r3, [r3, #16]
 8014f28:	b298      	uxth	r0, r3
 8014f2a:	79fb      	ldrb	r3, [r7, #7]
 8014f2c:	9300      	str	r3, [sp, #0]
 8014f2e:	4603      	mov	r3, r0
 8014f30:	68f8      	ldr	r0, [r7, #12]
 8014f32:	f000 f9b9 	bl	80152a8 <USB_WritePacket>
 8014f36:	e102      	b.n	801513e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014f38:	69bb      	ldr	r3, [r7, #24]
 8014f3a:	015a      	lsls	r2, r3, #5
 8014f3c:	69fb      	ldr	r3, [r7, #28]
 8014f3e:	4413      	add	r3, r2
 8014f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f44:	691a      	ldr	r2, [r3, #16]
 8014f46:	69bb      	ldr	r3, [r7, #24]
 8014f48:	0159      	lsls	r1, r3, #5
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	440b      	add	r3, r1
 8014f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f52:	4619      	mov	r1, r3
 8014f54:	4b7c      	ldr	r3, [pc, #496]	@ (8015148 <USB_EPStartXfer+0x53c>)
 8014f56:	4013      	ands	r3, r2
 8014f58:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	015a      	lsls	r2, r3, #5
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	4413      	add	r3, r2
 8014f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f66:	691a      	ldr	r2, [r3, #16]
 8014f68:	69bb      	ldr	r3, [r7, #24]
 8014f6a:	0159      	lsls	r1, r3, #5
 8014f6c:	69fb      	ldr	r3, [r7, #28]
 8014f6e:	440b      	add	r3, r1
 8014f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014f74:	4619      	mov	r1, r3
 8014f76:	4b75      	ldr	r3, [pc, #468]	@ (801514c <USB_EPStartXfer+0x540>)
 8014f78:	4013      	ands	r3, r2
 8014f7a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014f7c:	69bb      	ldr	r3, [r7, #24]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d12f      	bne.n	8014fe2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	691b      	ldr	r3, [r3, #16]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d003      	beq.n	8014f92 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	689a      	ldr	r2, [r3, #8]
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	689a      	ldr	r2, [r3, #8]
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8014f9a:	69bb      	ldr	r3, [r7, #24]
 8014f9c:	015a      	lsls	r2, r3, #5
 8014f9e:	69fb      	ldr	r3, [r7, #28]
 8014fa0:	4413      	add	r3, r2
 8014fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fa6:	691a      	ldr	r2, [r3, #16]
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	6a1b      	ldr	r3, [r3, #32]
 8014fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014fb0:	69b9      	ldr	r1, [r7, #24]
 8014fb2:	0148      	lsls	r0, r1, #5
 8014fb4:	69f9      	ldr	r1, [r7, #28]
 8014fb6:	4401      	add	r1, r0
 8014fb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8014fbc:	4313      	orrs	r3, r2
 8014fbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	015a      	lsls	r2, r3, #5
 8014fc4:	69fb      	ldr	r3, [r7, #28]
 8014fc6:	4413      	add	r3, r2
 8014fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014fcc:	691b      	ldr	r3, [r3, #16]
 8014fce:	69ba      	ldr	r2, [r7, #24]
 8014fd0:	0151      	lsls	r1, r2, #5
 8014fd2:	69fa      	ldr	r2, [r7, #28]
 8014fd4:	440a      	add	r2, r1
 8014fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8014fda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014fde:	6113      	str	r3, [r2, #16]
 8014fe0:	e05f      	b.n	80150a2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	691b      	ldr	r3, [r3, #16]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d123      	bne.n	8015032 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014fea:	69bb      	ldr	r3, [r7, #24]
 8014fec:	015a      	lsls	r2, r3, #5
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8014ff6:	691a      	ldr	r2, [r3, #16]
 8014ff8:	68bb      	ldr	r3, [r7, #8]
 8014ffa:	689b      	ldr	r3, [r3, #8]
 8014ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015000:	69b9      	ldr	r1, [r7, #24]
 8015002:	0148      	lsls	r0, r1, #5
 8015004:	69f9      	ldr	r1, [r7, #28]
 8015006:	4401      	add	r1, r0
 8015008:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801500c:	4313      	orrs	r3, r2
 801500e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015010:	69bb      	ldr	r3, [r7, #24]
 8015012:	015a      	lsls	r2, r3, #5
 8015014:	69fb      	ldr	r3, [r7, #28]
 8015016:	4413      	add	r3, r2
 8015018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801501c:	691b      	ldr	r3, [r3, #16]
 801501e:	69ba      	ldr	r2, [r7, #24]
 8015020:	0151      	lsls	r1, r2, #5
 8015022:	69fa      	ldr	r2, [r7, #28]
 8015024:	440a      	add	r2, r1
 8015026:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801502a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801502e:	6113      	str	r3, [r2, #16]
 8015030:	e037      	b.n	80150a2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	691a      	ldr	r2, [r3, #16]
 8015036:	68bb      	ldr	r3, [r7, #8]
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	4413      	add	r3, r2
 801503c:	1e5a      	subs	r2, r3, #1
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	689b      	ldr	r3, [r3, #8]
 8015042:	fbb2 f3f3 	udiv	r3, r2, r3
 8015046:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	689b      	ldr	r3, [r3, #8]
 801504c:	8afa      	ldrh	r2, [r7, #22]
 801504e:	fb03 f202 	mul.w	r2, r3, r2
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015056:	69bb      	ldr	r3, [r7, #24]
 8015058:	015a      	lsls	r2, r3, #5
 801505a:	69fb      	ldr	r3, [r7, #28]
 801505c:	4413      	add	r3, r2
 801505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015062:	691a      	ldr	r2, [r3, #16]
 8015064:	8afb      	ldrh	r3, [r7, #22]
 8015066:	04d9      	lsls	r1, r3, #19
 8015068:	4b39      	ldr	r3, [pc, #228]	@ (8015150 <USB_EPStartXfer+0x544>)
 801506a:	400b      	ands	r3, r1
 801506c:	69b9      	ldr	r1, [r7, #24]
 801506e:	0148      	lsls	r0, r1, #5
 8015070:	69f9      	ldr	r1, [r7, #28]
 8015072:	4401      	add	r1, r0
 8015074:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8015078:	4313      	orrs	r3, r2
 801507a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	015a      	lsls	r2, r3, #5
 8015080:	69fb      	ldr	r3, [r7, #28]
 8015082:	4413      	add	r3, r2
 8015084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015088:	691a      	ldr	r2, [r3, #16]
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	6a1b      	ldr	r3, [r3, #32]
 801508e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015092:	69b9      	ldr	r1, [r7, #24]
 8015094:	0148      	lsls	r0, r1, #5
 8015096:	69f9      	ldr	r1, [r7, #28]
 8015098:	4401      	add	r1, r0
 801509a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801509e:	4313      	orrs	r3, r2
 80150a0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80150a2:	79fb      	ldrb	r3, [r7, #7]
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d10d      	bne.n	80150c4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d009      	beq.n	80150c4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80150b0:	68bb      	ldr	r3, [r7, #8]
 80150b2:	68d9      	ldr	r1, [r3, #12]
 80150b4:	69bb      	ldr	r3, [r7, #24]
 80150b6:	015a      	lsls	r2, r3, #5
 80150b8:	69fb      	ldr	r3, [r7, #28]
 80150ba:	4413      	add	r3, r2
 80150bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150c0:	460a      	mov	r2, r1
 80150c2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	791b      	ldrb	r3, [r3, #4]
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d128      	bne.n	801511e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80150cc:	69fb      	ldr	r3, [r7, #28]
 80150ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80150d2:	689b      	ldr	r3, [r3, #8]
 80150d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d110      	bne.n	80150fe <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80150dc:	69bb      	ldr	r3, [r7, #24]
 80150de:	015a      	lsls	r2, r3, #5
 80150e0:	69fb      	ldr	r3, [r7, #28]
 80150e2:	4413      	add	r3, r2
 80150e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	69ba      	ldr	r2, [r7, #24]
 80150ec:	0151      	lsls	r1, r2, #5
 80150ee:	69fa      	ldr	r2, [r7, #28]
 80150f0:	440a      	add	r2, r1
 80150f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80150f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80150fa:	6013      	str	r3, [r2, #0]
 80150fc:	e00f      	b.n	801511e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80150fe:	69bb      	ldr	r3, [r7, #24]
 8015100:	015a      	lsls	r2, r3, #5
 8015102:	69fb      	ldr	r3, [r7, #28]
 8015104:	4413      	add	r3, r2
 8015106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	69ba      	ldr	r2, [r7, #24]
 801510e:	0151      	lsls	r1, r2, #5
 8015110:	69fa      	ldr	r2, [r7, #28]
 8015112:	440a      	add	r2, r1
 8015114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801511c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801511e:	69bb      	ldr	r3, [r7, #24]
 8015120:	015a      	lsls	r2, r3, #5
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	4413      	add	r3, r2
 8015126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	69ba      	ldr	r2, [r7, #24]
 801512e:	0151      	lsls	r1, r2, #5
 8015130:	69fa      	ldr	r2, [r7, #28]
 8015132:	440a      	add	r2, r1
 8015134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015138:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801513c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801513e:	2300      	movs	r3, #0
}
 8015140:	4618      	mov	r0, r3
 8015142:	3720      	adds	r7, #32
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}
 8015148:	fff80000 	.word	0xfff80000
 801514c:	e007ffff 	.word	0xe007ffff
 8015150:	1ff80000 	.word	0x1ff80000

08015154 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015154:	b480      	push	{r7}
 8015156:	b087      	sub	sp, #28
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801515e:	2300      	movs	r3, #0
 8015160:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015162:	2300      	movs	r3, #0
 8015164:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801516a:	683b      	ldr	r3, [r7, #0]
 801516c:	785b      	ldrb	r3, [r3, #1]
 801516e:	2b01      	cmp	r3, #1
 8015170:	d14a      	bne.n	8015208 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	015a      	lsls	r2, r3, #5
 8015178:	693b      	ldr	r3, [r7, #16]
 801517a:	4413      	add	r3, r2
 801517c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015186:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801518a:	f040 8086 	bne.w	801529a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	015a      	lsls	r2, r3, #5
 8015194:	693b      	ldr	r3, [r7, #16]
 8015196:	4413      	add	r3, r2
 8015198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	683a      	ldr	r2, [r7, #0]
 80151a0:	7812      	ldrb	r2, [r2, #0]
 80151a2:	0151      	lsls	r1, r2, #5
 80151a4:	693a      	ldr	r2, [r7, #16]
 80151a6:	440a      	add	r2, r1
 80151a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80151ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80151b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80151b2:	683b      	ldr	r3, [r7, #0]
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	015a      	lsls	r2, r3, #5
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	4413      	add	r3, r2
 80151bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	683a      	ldr	r2, [r7, #0]
 80151c4:	7812      	ldrb	r2, [r2, #0]
 80151c6:	0151      	lsls	r1, r2, #5
 80151c8:	693a      	ldr	r2, [r7, #16]
 80151ca:	440a      	add	r2, r1
 80151cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80151d0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80151d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	3301      	adds	r3, #1
 80151da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	f242 7210 	movw	r2, #10000	@ 0x2710
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d902      	bls.n	80151ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80151e6:	2301      	movs	r3, #1
 80151e8:	75fb      	strb	r3, [r7, #23]
          break;
 80151ea:	e056      	b.n	801529a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	781b      	ldrb	r3, [r3, #0]
 80151f0:	015a      	lsls	r2, r3, #5
 80151f2:	693b      	ldr	r3, [r7, #16]
 80151f4:	4413      	add	r3, r2
 80151f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015200:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015204:	d0e7      	beq.n	80151d6 <USB_EPStopXfer+0x82>
 8015206:	e048      	b.n	801529a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	015a      	lsls	r2, r3, #5
 801520e:	693b      	ldr	r3, [r7, #16]
 8015210:	4413      	add	r3, r2
 8015212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801521c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015220:	d13b      	bne.n	801529a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	015a      	lsls	r2, r3, #5
 8015228:	693b      	ldr	r3, [r7, #16]
 801522a:	4413      	add	r3, r2
 801522c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	683a      	ldr	r2, [r7, #0]
 8015234:	7812      	ldrb	r2, [r2, #0]
 8015236:	0151      	lsls	r1, r2, #5
 8015238:	693a      	ldr	r2, [r7, #16]
 801523a:	440a      	add	r2, r1
 801523c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015240:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015244:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	015a      	lsls	r2, r3, #5
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	4413      	add	r3, r2
 8015250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	683a      	ldr	r2, [r7, #0]
 8015258:	7812      	ldrb	r2, [r2, #0]
 801525a:	0151      	lsls	r1, r2, #5
 801525c:	693a      	ldr	r2, [r7, #16]
 801525e:	440a      	add	r2, r1
 8015260:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015264:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8015268:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	3301      	adds	r3, #1
 801526e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f242 7210 	movw	r2, #10000	@ 0x2710
 8015276:	4293      	cmp	r3, r2
 8015278:	d902      	bls.n	8015280 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801527a:	2301      	movs	r3, #1
 801527c:	75fb      	strb	r3, [r7, #23]
          break;
 801527e:	e00c      	b.n	801529a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	781b      	ldrb	r3, [r3, #0]
 8015284:	015a      	lsls	r2, r3, #5
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	4413      	add	r3, r2
 801528a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8015298:	d0e7      	beq.n	801526a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801529a:	7dfb      	ldrb	r3, [r7, #23]
}
 801529c:	4618      	mov	r0, r3
 801529e:	371c      	adds	r7, #28
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr

080152a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80152a8:	b480      	push	{r7}
 80152aa:	b089      	sub	sp, #36	@ 0x24
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	60f8      	str	r0, [r7, #12]
 80152b0:	60b9      	str	r1, [r7, #8]
 80152b2:	4611      	mov	r1, r2
 80152b4:	461a      	mov	r2, r3
 80152b6:	460b      	mov	r3, r1
 80152b8:	71fb      	strb	r3, [r7, #7]
 80152ba:	4613      	mov	r3, r2
 80152bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80152c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d123      	bne.n	8015316 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80152ce:	88bb      	ldrh	r3, [r7, #4]
 80152d0:	3303      	adds	r3, #3
 80152d2:	089b      	lsrs	r3, r3, #2
 80152d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80152d6:	2300      	movs	r3, #0
 80152d8:	61bb      	str	r3, [r7, #24]
 80152da:	e018      	b.n	801530e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80152dc:	79fb      	ldrb	r3, [r7, #7]
 80152de:	031a      	lsls	r2, r3, #12
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	4413      	add	r3, r2
 80152e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80152e8:	461a      	mov	r2, r3
 80152ea:	69fb      	ldr	r3, [r7, #28]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	3301      	adds	r3, #1
 80152f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80152f6:	69fb      	ldr	r3, [r7, #28]
 80152f8:	3301      	adds	r3, #1
 80152fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	3301      	adds	r3, #1
 8015300:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	3301      	adds	r3, #1
 8015306:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	3301      	adds	r3, #1
 801530c:	61bb      	str	r3, [r7, #24]
 801530e:	69ba      	ldr	r2, [r7, #24]
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	429a      	cmp	r2, r3
 8015314:	d3e2      	bcc.n	80152dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8015316:	2300      	movs	r3, #0
}
 8015318:	4618      	mov	r0, r3
 801531a:	3724      	adds	r7, #36	@ 0x24
 801531c:	46bd      	mov	sp, r7
 801531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015322:	4770      	bx	lr

08015324 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015324:	b480      	push	{r7}
 8015326:	b08b      	sub	sp, #44	@ 0x2c
 8015328:	af00      	add	r7, sp, #0
 801532a:	60f8      	str	r0, [r7, #12]
 801532c:	60b9      	str	r1, [r7, #8]
 801532e:	4613      	mov	r3, r2
 8015330:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801533a:	88fb      	ldrh	r3, [r7, #6]
 801533c:	089b      	lsrs	r3, r3, #2
 801533e:	b29b      	uxth	r3, r3
 8015340:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015342:	88fb      	ldrh	r3, [r7, #6]
 8015344:	f003 0303 	and.w	r3, r3, #3
 8015348:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801534a:	2300      	movs	r3, #0
 801534c:	623b      	str	r3, [r7, #32]
 801534e:	e014      	b.n	801537a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015350:	69bb      	ldr	r3, [r7, #24]
 8015352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015356:	681a      	ldr	r2, [r3, #0]
 8015358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801535a:	601a      	str	r2, [r3, #0]
    pDest++;
 801535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801535e:	3301      	adds	r3, #1
 8015360:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015364:	3301      	adds	r3, #1
 8015366:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8015368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536a:	3301      	adds	r3, #1
 801536c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015370:	3301      	adds	r3, #1
 8015372:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8015374:	6a3b      	ldr	r3, [r7, #32]
 8015376:	3301      	adds	r3, #1
 8015378:	623b      	str	r3, [r7, #32]
 801537a:	6a3a      	ldr	r2, [r7, #32]
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	429a      	cmp	r2, r3
 8015380:	d3e6      	bcc.n	8015350 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015382:	8bfb      	ldrh	r3, [r7, #30]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d01e      	beq.n	80153c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015388:	2300      	movs	r3, #0
 801538a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015392:	461a      	mov	r2, r3
 8015394:	f107 0310 	add.w	r3, r7, #16
 8015398:	6812      	ldr	r2, [r2, #0]
 801539a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801539c:	693a      	ldr	r2, [r7, #16]
 801539e:	6a3b      	ldr	r3, [r7, #32]
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	00db      	lsls	r3, r3, #3
 80153a4:	fa22 f303 	lsr.w	r3, r2, r3
 80153a8:	b2da      	uxtb	r2, r3
 80153aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ac:	701a      	strb	r2, [r3, #0]
      i++;
 80153ae:	6a3b      	ldr	r3, [r7, #32]
 80153b0:	3301      	adds	r3, #1
 80153b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80153b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153b6:	3301      	adds	r3, #1
 80153b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80153ba:	8bfb      	ldrh	r3, [r7, #30]
 80153bc:	3b01      	subs	r3, #1
 80153be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80153c0:	8bfb      	ldrh	r3, [r7, #30]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d1ea      	bne.n	801539c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80153c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	372c      	adds	r7, #44	@ 0x2c
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80153d4:	b480      	push	{r7}
 80153d6:	b085      	sub	sp, #20
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	781b      	ldrb	r3, [r3, #0]
 80153e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	785b      	ldrb	r3, [r3, #1]
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d12c      	bne.n	801544a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80153f0:	68bb      	ldr	r3, [r7, #8]
 80153f2:	015a      	lsls	r2, r3, #5
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	4413      	add	r3, r2
 80153f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	db12      	blt.n	8015428 <USB_EPSetStall+0x54>
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d00f      	beq.n	8015428 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	015a      	lsls	r2, r3, #5
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	4413      	add	r3, r2
 8015410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015414:	681b      	ldr	r3, [r3, #0]
 8015416:	68ba      	ldr	r2, [r7, #8]
 8015418:	0151      	lsls	r1, r2, #5
 801541a:	68fa      	ldr	r2, [r7, #12]
 801541c:	440a      	add	r2, r1
 801541e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015422:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015426:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	015a      	lsls	r2, r3, #5
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	4413      	add	r3, r2
 8015430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	68ba      	ldr	r2, [r7, #8]
 8015438:	0151      	lsls	r1, r2, #5
 801543a:	68fa      	ldr	r2, [r7, #12]
 801543c:	440a      	add	r2, r1
 801543e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015442:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8015446:	6013      	str	r3, [r2, #0]
 8015448:	e02b      	b.n	80154a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	015a      	lsls	r2, r3, #5
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	4413      	add	r3, r2
 8015452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2b00      	cmp	r3, #0
 801545a:	db12      	blt.n	8015482 <USB_EPSetStall+0xae>
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d00f      	beq.n	8015482 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	015a      	lsls	r2, r3, #5
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	4413      	add	r3, r2
 801546a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	68ba      	ldr	r2, [r7, #8]
 8015472:	0151      	lsls	r1, r2, #5
 8015474:	68fa      	ldr	r2, [r7, #12]
 8015476:	440a      	add	r2, r1
 8015478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801547c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8015480:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	015a      	lsls	r2, r3, #5
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	4413      	add	r3, r2
 801548a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	68ba      	ldr	r2, [r7, #8]
 8015492:	0151      	lsls	r1, r2, #5
 8015494:	68fa      	ldr	r2, [r7, #12]
 8015496:	440a      	add	r2, r1
 8015498:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801549c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80154a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80154a2:	2300      	movs	r3, #0
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	3714      	adds	r7, #20
 80154a8:	46bd      	mov	sp, r7
 80154aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ae:	4770      	bx	lr

080154b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80154b0:	b480      	push	{r7}
 80154b2:	b085      	sub	sp, #20
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	781b      	ldrb	r3, [r3, #0]
 80154c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	785b      	ldrb	r3, [r3, #1]
 80154c8:	2b01      	cmp	r3, #1
 80154ca:	d128      	bne.n	801551e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	015a      	lsls	r2, r3, #5
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	4413      	add	r3, r2
 80154d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	68ba      	ldr	r2, [r7, #8]
 80154dc:	0151      	lsls	r1, r2, #5
 80154de:	68fa      	ldr	r2, [r7, #12]
 80154e0:	440a      	add	r2, r1
 80154e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80154e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80154ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80154ec:	683b      	ldr	r3, [r7, #0]
 80154ee:	791b      	ldrb	r3, [r3, #4]
 80154f0:	2b03      	cmp	r3, #3
 80154f2:	d003      	beq.n	80154fc <USB_EPClearStall+0x4c>
 80154f4:	683b      	ldr	r3, [r7, #0]
 80154f6:	791b      	ldrb	r3, [r3, #4]
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d138      	bne.n	801556e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	015a      	lsls	r2, r3, #5
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	4413      	add	r3, r2
 8015504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	68ba      	ldr	r2, [r7, #8]
 801550c:	0151      	lsls	r1, r2, #5
 801550e:	68fa      	ldr	r2, [r7, #12]
 8015510:	440a      	add	r2, r1
 8015512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8015516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801551a:	6013      	str	r3, [r2, #0]
 801551c:	e027      	b.n	801556e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801551e:	68bb      	ldr	r3, [r7, #8]
 8015520:	015a      	lsls	r2, r3, #5
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	4413      	add	r3, r2
 8015526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	68ba      	ldr	r2, [r7, #8]
 801552e:	0151      	lsls	r1, r2, #5
 8015530:	68fa      	ldr	r2, [r7, #12]
 8015532:	440a      	add	r2, r1
 8015534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015538:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801553c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	791b      	ldrb	r3, [r3, #4]
 8015542:	2b03      	cmp	r3, #3
 8015544:	d003      	beq.n	801554e <USB_EPClearStall+0x9e>
 8015546:	683b      	ldr	r3, [r7, #0]
 8015548:	791b      	ldrb	r3, [r3, #4]
 801554a:	2b02      	cmp	r3, #2
 801554c:	d10f      	bne.n	801556e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	015a      	lsls	r2, r3, #5
 8015552:	68fb      	ldr	r3, [r7, #12]
 8015554:	4413      	add	r3, r2
 8015556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	0151      	lsls	r1, r2, #5
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	440a      	add	r2, r1
 8015564:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801556c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	3714      	adds	r7, #20
 8015574:	46bd      	mov	sp, r7
 8015576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557a:	4770      	bx	lr

0801557c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801557c:	b480      	push	{r7}
 801557e:	b085      	sub	sp, #20
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	460b      	mov	r3, r1
 8015586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	68fa      	ldr	r2, [r7, #12]
 8015596:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801559a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 801559e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155a6:	681a      	ldr	r2, [r3, #0]
 80155a8:	78fb      	ldrb	r3, [r7, #3]
 80155aa:	011b      	lsls	r3, r3, #4
 80155ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80155b0:	68f9      	ldr	r1, [r7, #12]
 80155b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80155b6:	4313      	orrs	r3, r2
 80155b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3714      	adds	r7, #20
 80155c0:	46bd      	mov	sp, r7
 80155c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c6:	4770      	bx	lr

080155c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b085      	sub	sp, #20
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	68fa      	ldr	r2, [r7, #12]
 80155de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80155e2:	f023 0303 	bic.w	r3, r3, #3
 80155e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	68fa      	ldr	r2, [r7, #12]
 80155f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80155f6:	f023 0302 	bic.w	r3, r3, #2
 80155fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80155fc:	2300      	movs	r3, #0
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3714      	adds	r7, #20
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr

0801560a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801560a:	b480      	push	{r7}
 801560c:	b085      	sub	sp, #20
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	68fa      	ldr	r2, [r7, #12]
 8015620:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8015624:	f023 0303 	bic.w	r3, r3, #3
 8015628:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	68fa      	ldr	r2, [r7, #12]
 8015634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8015638:	f043 0302 	orr.w	r3, r3, #2
 801563c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801563e:	2300      	movs	r3, #0
}
 8015640:	4618      	mov	r0, r3
 8015642:	3714      	adds	r7, #20
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801564c:	b480      	push	{r7}
 801564e:	b085      	sub	sp, #20
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	695b      	ldr	r3, [r3, #20]
 8015658:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	699b      	ldr	r3, [r3, #24]
 801565e:	68fa      	ldr	r2, [r7, #12]
 8015660:	4013      	ands	r3, r2
 8015662:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015664:	68fb      	ldr	r3, [r7, #12]
}
 8015666:	4618      	mov	r0, r3
 8015668:	3714      	adds	r7, #20
 801566a:	46bd      	mov	sp, r7
 801566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015670:	4770      	bx	lr

08015672 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8015672:	b480      	push	{r7}
 8015674:	b085      	sub	sp, #20
 8015676:	af00      	add	r7, sp, #0
 8015678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015684:	699b      	ldr	r3, [r3, #24]
 8015686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801568e:	69db      	ldr	r3, [r3, #28]
 8015690:	68ba      	ldr	r2, [r7, #8]
 8015692:	4013      	ands	r3, r2
 8015694:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	0c1b      	lsrs	r3, r3, #16
}
 801569a:	4618      	mov	r0, r3
 801569c:	3714      	adds	r7, #20
 801569e:	46bd      	mov	sp, r7
 80156a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a4:	4770      	bx	lr

080156a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80156a6:	b480      	push	{r7}
 80156a8:	b085      	sub	sp, #20
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80156b8:	699b      	ldr	r3, [r3, #24]
 80156ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80156c2:	69db      	ldr	r3, [r3, #28]
 80156c4:	68ba      	ldr	r2, [r7, #8]
 80156c6:	4013      	ands	r3, r2
 80156c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	b29b      	uxth	r3, r3
}
 80156ce:	4618      	mov	r0, r3
 80156d0:	3714      	adds	r7, #20
 80156d2:	46bd      	mov	sp, r7
 80156d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d8:	4770      	bx	lr

080156da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80156da:	b480      	push	{r7}
 80156dc:	b085      	sub	sp, #20
 80156de:	af00      	add	r7, sp, #0
 80156e0:	6078      	str	r0, [r7, #4]
 80156e2:	460b      	mov	r3, r1
 80156e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80156ea:	78fb      	ldrb	r3, [r7, #3]
 80156ec:	015a      	lsls	r2, r3, #5
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	4413      	add	r3, r2
 80156f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80156f6:	689b      	ldr	r3, [r3, #8]
 80156f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015700:	695b      	ldr	r3, [r3, #20]
 8015702:	68ba      	ldr	r2, [r7, #8]
 8015704:	4013      	ands	r3, r2
 8015706:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015708:	68bb      	ldr	r3, [r7, #8]
}
 801570a:	4618      	mov	r0, r3
 801570c:	3714      	adds	r7, #20
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr

08015716 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015716:	b480      	push	{r7}
 8015718:	b087      	sub	sp, #28
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
 801571e:	460b      	mov	r3, r1
 8015720:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801572c:	691b      	ldr	r3, [r3, #16]
 801572e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8015736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015738:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801573a:	78fb      	ldrb	r3, [r7, #3]
 801573c:	f003 030f 	and.w	r3, r3, #15
 8015740:	68fa      	ldr	r2, [r7, #12]
 8015742:	fa22 f303 	lsr.w	r3, r2, r3
 8015746:	01db      	lsls	r3, r3, #7
 8015748:	b2db      	uxtb	r3, r3
 801574a:	693a      	ldr	r2, [r7, #16]
 801574c:	4313      	orrs	r3, r2
 801574e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8015750:	78fb      	ldrb	r3, [r7, #3]
 8015752:	015a      	lsls	r2, r3, #5
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	4413      	add	r3, r2
 8015758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801575c:	689b      	ldr	r3, [r3, #8]
 801575e:	693a      	ldr	r2, [r7, #16]
 8015760:	4013      	ands	r3, r2
 8015762:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8015764:	68bb      	ldr	r3, [r7, #8]
}
 8015766:	4618      	mov	r0, r3
 8015768:	371c      	adds	r7, #28
 801576a:	46bd      	mov	sp, r7
 801576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015770:	4770      	bx	lr

08015772 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8015772:	b480      	push	{r7}
 8015774:	b083      	sub	sp, #12
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	695b      	ldr	r3, [r3, #20]
 801577e:	f003 0301 	and.w	r3, r3, #1
}
 8015782:	4618      	mov	r0, r3
 8015784:	370c      	adds	r7, #12
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr
	...

08015790 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8015790:	b480      	push	{r7}
 8015792:	b085      	sub	sp, #20
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80157aa:	4619      	mov	r1, r3
 80157ac:	4b09      	ldr	r3, [pc, #36]	@ (80157d4 <USB_ActivateSetup+0x44>)
 80157ae:	4013      	ands	r3, r2
 80157b0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80157c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80157c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80157c6:	2300      	movs	r3, #0
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3714      	adds	r7, #20
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr
 80157d4:	fffff800 	.word	0xfffff800

080157d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80157d8:	b480      	push	{r7}
 80157da:	b087      	sub	sp, #28
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	460b      	mov	r3, r1
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	333c      	adds	r3, #60	@ 0x3c
 80157ee:	3304      	adds	r3, #4
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	4a26      	ldr	r2, [pc, #152]	@ (8015890 <USB_EP0_OutStart+0xb8>)
 80157f8:	4293      	cmp	r3, r2
 80157fa:	d90a      	bls.n	8015812 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8015808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801580c:	d101      	bne.n	8015812 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801580e:	2300      	movs	r3, #0
 8015810:	e037      	b.n	8015882 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015818:	461a      	mov	r2, r3
 801581a:	2300      	movs	r3, #0
 801581c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015824:	691b      	ldr	r3, [r3, #16]
 8015826:	697a      	ldr	r2, [r7, #20]
 8015828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801582c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8015830:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015838:	691b      	ldr	r3, [r3, #16]
 801583a:	697a      	ldr	r2, [r7, #20]
 801583c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015840:	f043 0318 	orr.w	r3, r3, #24
 8015844:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8015846:	697b      	ldr	r3, [r7, #20]
 8015848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801584c:	691b      	ldr	r3, [r3, #16]
 801584e:	697a      	ldr	r2, [r7, #20]
 8015850:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8015854:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8015858:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801585a:	7afb      	ldrb	r3, [r7, #11]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d10f      	bne.n	8015880 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015866:	461a      	mov	r2, r3
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	697a      	ldr	r2, [r7, #20]
 8015876:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801587a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801587e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015880:	2300      	movs	r3, #0
}
 8015882:	4618      	mov	r0, r3
 8015884:	371c      	adds	r7, #28
 8015886:	46bd      	mov	sp, r7
 8015888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588c:	4770      	bx	lr
 801588e:	bf00      	nop
 8015890:	4f54300a 	.word	0x4f54300a

08015894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8015894:	b480      	push	{r7}
 8015896:	b085      	sub	sp, #20
 8015898:	af00      	add	r7, sp, #0
 801589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801589c:	2300      	movs	r3, #0
 801589e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	3301      	adds	r3, #1
 80158a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80158ac:	d901      	bls.n	80158b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80158ae:	2303      	movs	r3, #3
 80158b0:	e01b      	b.n	80158ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	691b      	ldr	r3, [r3, #16]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	daf2      	bge.n	80158a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80158ba:	2300      	movs	r3, #0
 80158bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	691b      	ldr	r3, [r3, #16]
 80158c2:	f043 0201 	orr.w	r2, r3, #1
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	3301      	adds	r3, #1
 80158ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80158d6:	d901      	bls.n	80158dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80158d8:	2303      	movs	r3, #3
 80158da:	e006      	b.n	80158ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	691b      	ldr	r3, [r3, #16]
 80158e0:	f003 0301 	and.w	r3, r3, #1
 80158e4:	2b01      	cmp	r3, #1
 80158e6:	d0f0      	beq.n	80158ca <USB_CoreReset+0x36>

  return HAL_OK;
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3714      	adds	r7, #20
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <XBEE_Init>:
#include "XBEE.h"

// FUNCTION IMPLEMENTEATIONS
// ------------------------------------------------------------------------------------

uint8_t XBEE_Init(XBEE_HandleTypeDef *hxbee) {
 80158f6:	b580      	push	{r7, lr}
 80158f8:	b082      	sub	sp, #8
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
	// Set up the variables
	hxbee->pkt_DMAHead   = 0;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2200      	movs	r2, #0
 8015902:	741a      	strb	r2, [r3, #16]
	hxbee->pktRx_state   = 0;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	2200      	movs	r2, #0
 8015908:	745a      	strb	r2, [r3, #17]
	hxbee->pktTx_state   = 0;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	2200      	movs	r2, #0
 801590e:	76da      	strb	r2, [r3, #27]
	hxbee->pktRx_idxPush = 0;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2200      	movs	r2, #0
 8015914:	765a      	strb	r2, [r3, #25]
	hxbee->pktRx_idxPop  = 0;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2200      	movs	r2, #0
 801591a:	769a      	strb	r2, [r3, #26]
	hxbee->pktTx_idxPush = 0;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2200      	movs	r2, #0
 8015920:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	hxbee->pktTx_idxPop  = 0;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	2200      	movs	r2, #0
 8015928:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	// Allocate mem
	hxbee->pkt_bufDMA  = malloc(PKT_RAWSIZE);
 801592c:	2044      	movs	r0, #68	@ 0x44
 801592e:	f002 fe97 	bl	8018660 <malloc>
 8015932:	4603      	mov	r3, r0
 8015934:	461a      	mov	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	609a      	str	r2, [r3, #8]
	hxbee->pkt_bufPart = malloc(PKT_RAWSIZE);
 801593a:	2044      	movs	r0, #68	@ 0x44
 801593c:	f002 fe90 	bl	8018660 <malloc>
 8015940:	4603      	mov	r3, r0
 8015942:	461a      	mov	r2, r3
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	60da      	str	r2, [r3, #12]
	hxbee->pktRx_mem   = malloc(hxbee->pktRx_max*PKT_RAWSIZE);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	7e1b      	ldrb	r3, [r3, #24]
 801594c:	461a      	mov	r2, r3
 801594e:	4613      	mov	r3, r2
 8015950:	011b      	lsls	r3, r3, #4
 8015952:	4413      	add	r3, r2
 8015954:	009b      	lsls	r3, r3, #2
 8015956:	4618      	mov	r0, r3
 8015958:	f002 fe82 	bl	8018660 <malloc>
 801595c:	4603      	mov	r3, r0
 801595e:	461a      	mov	r2, r3
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	615a      	str	r2, [r3, #20]
	hxbee->pktTx_mem   = malloc(hxbee->pktTx_max*PKT_RAWSIZE);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f893 3020 	ldrb.w	r3, [r3, #32]
 801596a:	461a      	mov	r2, r3
 801596c:	4613      	mov	r3, r2
 801596e:	011b      	lsls	r3, r3, #4
 8015970:	4413      	add	r3, r2
 8015972:	009b      	lsls	r3, r3, #2
 8015974:	4618      	mov	r0, r3
 8015976:	f002 fe73 	bl	8018660 <malloc>
 801597a:	4603      	mov	r3, r0
 801597c:	461a      	mov	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	61da      	str	r2, [r3, #28]

	// Begin the cyclic UART capture
	// Make sure the DMA is circular
	return HAL_UART_Receive_DMA(hxbee->uart_handle, hxbee->pkt_bufDMA, PKT_RAWSIZE);
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	6818      	ldr	r0, [r3, #0]
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	689b      	ldr	r3, [r3, #8]
 801598a:	2244      	movs	r2, #68	@ 0x44
 801598c:	4619      	mov	r1, r3
 801598e:	f7fc fd4b 	bl	8012428 <HAL_UART_Receive_DMA>
 8015992:	4603      	mov	r3, r0
}
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <XBEE_RXPacket>:

// Gets a packet if there's one buffered
// 0 - Success
// 1 - Nothing to Get
uint8_t XBEE_RXPacket(XBEE_HandleTypeDef *hxbee, uint8_t **pRxBuffer, uint16_t *pkt_num) {
 801599c:	b480      	push	{r7}
 801599e:	b087      	sub	sp, #28
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	60f8      	str	r0, [r7, #12]
 80159a4:	60b9      	str	r1, [r7, #8]
 80159a6:	607a      	str	r2, [r7, #4]
	// Check if there's an available packet
	if (hxbee->pktRx_idxPop == hxbee->pktRx_idxPush) return 1;
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	7e9a      	ldrb	r2, [r3, #26]
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	7e5b      	ldrb	r3, [r3, #25]
 80159b0:	429a      	cmp	r2, r3
 80159b2:	d101      	bne.n	80159b8 <XBEE_RXPacket+0x1c>
 80159b4:	2301      	movs	r3, #1
 80159b6:	e03c      	b.n	8015a32 <XBEE_RXPacket+0x96>

	// There's a packet up for grabs, get a pointer to the raw pkt incl. Header
	uint8_t *pRxInternal = hxbee->pktRx_mem + hxbee->pktRx_idxPop*PKT_RAWSIZE;
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	695a      	ldr	r2, [r3, #20]
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	7e9b      	ldrb	r3, [r3, #26]
 80159c0:	4619      	mov	r1, r3
 80159c2:	460b      	mov	r3, r1
 80159c4:	011b      	lsls	r3, r3, #4
 80159c6:	440b      	add	r3, r1
 80159c8:	009b      	lsls	r3, r3, #2
 80159ca:	4413      	add	r3, r2
 80159cc:	617b      	str	r3, [r7, #20]

	// Get the 16 bit packet number field
	*pkt_num = 0;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2200      	movs	r2, #0
 80159d2:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[1];
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	881b      	ldrh	r3, [r3, #0]
 80159d8:	697a      	ldr	r2, [r7, #20]
 80159da:	3201      	adds	r2, #1
 80159dc:	7812      	ldrb	r2, [r2, #0]
 80159de:	4413      	add	r3, r2
 80159e0:	b29a      	uxth	r2, r3
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	801a      	strh	r2, [r3, #0]
	*pkt_num *= 256;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	881b      	ldrh	r3, [r3, #0]
 80159ea:	021b      	lsls	r3, r3, #8
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	801a      	strh	r2, [r3, #0]
	*pkt_num += pRxInternal[2];
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	881b      	ldrh	r3, [r3, #0]
 80159f6:	697a      	ldr	r2, [r7, #20]
 80159f8:	3202      	adds	r2, #2
 80159fa:	7812      	ldrb	r2, [r2, #0]
 80159fc:	4413      	add	r3, r2
 80159fe:	b29a      	uxth	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	801a      	strh	r2, [r3, #0]

	*pRxBuffer = pRxInternal + 4;
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	1d1a      	adds	r2, r3, #4
 8015a08:	68bb      	ldr	r3, [r7, #8]
 8015a0a:	601a      	str	r2, [r3, #0]

	hxbee->pktRx_idxPop += 1;
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	7e9b      	ldrb	r3, [r3, #26]
 8015a10:	3301      	adds	r3, #1
 8015a12:	b2da      	uxtb	r2, r3
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	769a      	strb	r2, [r3, #26]
	hxbee->pktRx_idxPop %= hxbee->pktRx_max;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	7e9b      	ldrb	r3, [r3, #26]
 8015a1c:	68fa      	ldr	r2, [r7, #12]
 8015a1e:	7e12      	ldrb	r2, [r2, #24]
 8015a20:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a24:	fb01 f202 	mul.w	r2, r1, r2
 8015a28:	1a9b      	subs	r3, r3, r2
 8015a2a:	b2da      	uxtb	r2, r3
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	769a      	strb	r2, [r3, #26]

	return 0;
 8015a30:	2300      	movs	r3, #0
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	371c      	adds	r7, #28
 8015a36:	46bd      	mov	sp, r7
 8015a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3c:	4770      	bx	lr
	...

08015a40 <XBEE_RX_DMACallback>:
// Process incoming packets on DMA callback
// 0 - Success
// 1 - Buffer full
// 2 - Packet malformed
// 3 - Checksum mismatch
uint8_t XBEE_RX_DMACallback(XBEE_HandleTypeDef *hxbee) {
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b096      	sub	sp, #88	@ 0x58
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
	// Attempt to increment the packet buffer index
	// Note: We don't actually increment the index until the end of the function in case something goes wrong
	uint8_t pkt_idx = hxbee->pktRx_idxPush + 1;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	7e5b      	ldrb	r3, [r3, #25]
 8015a4c:	3301      	adds	r3, #1
 8015a4e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	pkt_idx %= hxbee->pktRx_max;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	7e1a      	ldrb	r2, [r3, #24]
 8015a56:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8015a5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a5e:	fb01 f202 	mul.w	r2, r1, r2
 8015a62:	1a9b      	subs	r3, r3, r2
 8015a64:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

	// No space left in the buffer, we have to drop this packet
	if (pkt_idx == hxbee->pktRx_idxPop) return 1;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	7e9b      	ldrb	r3, [r3, #26]
 8015a6c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015a70:	429a      	cmp	r2, r3
 8015a72:	d101      	bne.n	8015a78 <XBEE_RX_DMACallback+0x38>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e097      	b.n	8015ba8 <XBEE_RX_DMACallback+0x168>

	// Create a temporary buffer for the complete packet
	uint8_t pkt_cplt[PKT_RAWSIZE];

	// Store the last readHead, we need this for packet reconstruction if bytes got lost
	uint8_t old_head = hxbee->pkt_DMAHead;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	7c1b      	ldrb	r3, [r3, #16]
 8015a7c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Find the delimeter
	uint8_t found_delim = 0;
 8015a80:	2300      	movs	r3, #0
 8015a82:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015a86:	2300      	movs	r3, #0
 8015a88:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8015a8c:	e027      	b.n	8015ade <XBEE_RX_DMACallback+0x9e>
		uint8_t packet_ptr = (circular_ptr + hxbee->pkt_DMAHead) % PKT_RAWSIZE;
 8015a8e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015a92:	687a      	ldr	r2, [r7, #4]
 8015a94:	7c12      	ldrb	r2, [r2, #16]
 8015a96:	441a      	add	r2, r3
 8015a98:	4b45      	ldr	r3, [pc, #276]	@ (8015bb0 <XBEE_RX_DMACallback+0x170>)
 8015a9a:	fb83 1302 	smull	r1, r3, r3, r2
 8015a9e:	1159      	asrs	r1, r3, #5
 8015aa0:	17d3      	asrs	r3, r2, #31
 8015aa2:	1ac9      	subs	r1, r1, r3
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	011b      	lsls	r3, r3, #4
 8015aa8:	440b      	add	r3, r1
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	1ad1      	subs	r1, r2, r3
 8015aae:	460b      	mov	r3, r1
 8015ab0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
		if (hxbee->pkt_bufDMA[packet_ptr] == PKT_DELIMETER) {
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	689a      	ldr	r2, [r3, #8]
 8015ab8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8015abc:	4413      	add	r3, r2
 8015abe:	781b      	ldrb	r3, [r3, #0]
 8015ac0:	2baa      	cmp	r3, #170	@ 0xaa
 8015ac2:	d107      	bne.n	8015ad4 <XBEE_RX_DMACallback+0x94>
			found_delim = 1;					// Update flag
 8015ac4:	2301      	movs	r3, #1
 8015ac6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			hxbee->pkt_DMAHead = packet_ptr;	// Move the readHead
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8015ad0:	741a      	strb	r2, [r3, #16]
			break;
 8015ad2:	e008      	b.n	8015ae6 <XBEE_RX_DMACallback+0xa6>
	for (uint8_t circular_ptr = 0; circular_ptr < PKT_RAWSIZE; circular_ptr++) {
 8015ad4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015ad8:	3301      	adds	r3, #1
 8015ada:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
 8015ade:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8015ae2:	2b43      	cmp	r3, #67	@ 0x43
 8015ae4:	d9d3      	bls.n	8015a8e <XBEE_RX_DMACallback+0x4e>
		}
	}

	// Couldn't find the delimeter, this packet is FUBAR, discard the whole thing
	if (!found_delim) return 2;
 8015ae6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d101      	bne.n	8015af2 <XBEE_RX_DMACallback+0xb2>
 8015aee:	2302      	movs	r3, #2
 8015af0:	e05a      	b.n	8015ba8 <XBEE_RX_DMACallback+0x168>

	// Copy the partial packet contents into the completed packet buffer
	memcpy(pkt_cplt, hxbee->pkt_bufPart, PKT_RAWSIZE);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	68da      	ldr	r2, [r3, #12]
 8015af6:	f107 030c 	add.w	r3, r7, #12
 8015afa:	4611      	mov	r1, r2
 8015afc:	2244      	movs	r2, #68	@ 0x44
 8015afe:	4618      	mov	r0, r3
 8015b00:	f002 feca 	bl	8018898 <memcpy>

	// Copy the new packet contents into the partial packet buffer
	memcpy(hxbee->pkt_bufPart, hxbee->pkt_bufDMA + hxbee->pkt_DMAHead, PKT_RAWSIZE - hxbee->pkt_DMAHead);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	68d8      	ldr	r0, [r3, #12]
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	689b      	ldr	r3, [r3, #8]
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	7c12      	ldrb	r2, [r2, #16]
 8015b10:	1899      	adds	r1, r3, r2
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	7c1b      	ldrb	r3, [r3, #16]
 8015b16:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	f002 febc 	bl	8018898 <memcpy>

	// finish the old packet
	// Account for dropped byte underflow
	// TODO: We can actually correct this instead of just giving up
	if (old_head < hxbee->pkt_DMAHead) {
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	7c1b      	ldrb	r3, [r3, #16]
 8015b24:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8015b28:	429a      	cmp	r2, r3
 8015b2a:	d201      	bcs.n	8015b30 <XBEE_RX_DMACallback+0xf0>
		return 2;
 8015b2c:	2302      	movs	r3, #2
 8015b2e:	e03b      	b.n	8015ba8 <XBEE_RX_DMACallback+0x168>
	}

	uint16_t head_slip = old_head - hxbee->pkt_DMAHead;	// How many bytes were dropped
 8015b30:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	687a      	ldr	r2, [r7, #4]
 8015b38:	7c12      	ldrb	r2, [r2, #16]
 8015b3a:	1a9b      	subs	r3, r3, r2
 8015b3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
	memset(pkt_cplt + (PKT_RAWSIZE - old_head), 0x00, head_slip); 									 // Zero dropped bytes
 8015b40:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015b44:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015b48:	461a      	mov	r2, r3
 8015b4a:	f107 030c 	add.w	r3, r7, #12
 8015b4e:	4413      	add	r3, r2
 8015b50:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015b54:	2100      	movs	r1, #0
 8015b56:	4618      	mov	r0, r3
 8015b58:	f002 fe5a 	bl	8018810 <memset>
	memcpy(pkt_cplt + (PKT_RAWSIZE - old_head) + head_slip, hxbee->pkt_bufDMA, hxbee->pkt_DMAHead); // Fill in missing bytes
 8015b5c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8015b60:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8015b64:	1ad3      	subs	r3, r2, r3
 8015b66:	3344      	adds	r3, #68	@ 0x44
 8015b68:	f107 020c 	add.w	r2, r7, #12
 8015b6c:	18d0      	adds	r0, r2, r3
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	6899      	ldr	r1, [r3, #8]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	7c1b      	ldrb	r3, [r3, #16]
 8015b76:	461a      	mov	r2, r3
 8015b78:	f002 fe8e 	bl	8018898 <memcpy>
	// In the event of a single dropped byte, this is accurate, if more than one gets dropped this may become inaccurate

	// TODO: CHECKSUM

	// If everything went well, increment the index and move the data into the RX buffer
	hxbee->pktRx_idxPush = pkt_idx;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8015b82:	765a      	strb	r2, [r3, #25]
	memcpy(hxbee->pktRx_mem + hxbee->pktRx_idxPush*PKT_RAWSIZE, pkt_cplt, PKT_RAWSIZE);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	695a      	ldr	r2, [r3, #20]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	7e5b      	ldrb	r3, [r3, #25]
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	460b      	mov	r3, r1
 8015b90:	011b      	lsls	r3, r3, #4
 8015b92:	440b      	add	r3, r1
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	4413      	add	r3, r2
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f107 030c 	add.w	r3, r7, #12
 8015b9e:	2244      	movs	r2, #68	@ 0x44
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	f002 fe79 	bl	8018898 <memcpy>

	return 0;
 8015ba6:	2300      	movs	r3, #0
}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3758      	adds	r7, #88	@ 0x58
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	78787879 	.word	0x78787879

08015bb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015bb4:	b580      	push	{r7, lr}
 8015bb6:	b084      	sub	sp, #16
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	6078      	str	r0, [r7, #4]
 8015bbc:	460b      	mov	r3, r1
 8015bbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015bc0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8015bc4:	f002 fd08 	bl	80185d8 <USBD_static_malloc>
 8015bc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d109      	bne.n	8015be4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	32b0      	adds	r2, #176	@ 0xb0
 8015bda:	2100      	movs	r1, #0
 8015bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015be0:	2302      	movs	r3, #2
 8015be2:	e0d4      	b.n	8015d8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015be4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8015be8:	2100      	movs	r1, #0
 8015bea:	68f8      	ldr	r0, [r7, #12]
 8015bec:	f002 fe10 	bl	8018810 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	32b0      	adds	r2, #176	@ 0xb0
 8015bfa:	68f9      	ldr	r1, [r7, #12]
 8015bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	32b0      	adds	r2, #176	@ 0xb0
 8015c0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	7c1b      	ldrb	r3, [r3, #16]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d138      	bne.n	8015c8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8015d98 <USBD_CDC_Init+0x1e4>)
 8015c1e:	7819      	ldrb	r1, [r3, #0]
 8015c20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015c24:	2202      	movs	r2, #2
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f002 fbb3 	bl	8018392 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8015d98 <USBD_CDC_Init+0x1e4>)
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	f003 020f 	and.w	r2, r3, #15
 8015c34:	6879      	ldr	r1, [r7, #4]
 8015c36:	4613      	mov	r3, r2
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	4413      	add	r3, r2
 8015c3c:	009b      	lsls	r3, r3, #2
 8015c3e:	440b      	add	r3, r1
 8015c40:	3324      	adds	r3, #36	@ 0x24
 8015c42:	2201      	movs	r2, #1
 8015c44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015c46:	4b55      	ldr	r3, [pc, #340]	@ (8015d9c <USBD_CDC_Init+0x1e8>)
 8015c48:	7819      	ldrb	r1, [r3, #0]
 8015c4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015c4e:	2202      	movs	r2, #2
 8015c50:	6878      	ldr	r0, [r7, #4]
 8015c52:	f002 fb9e 	bl	8018392 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015c56:	4b51      	ldr	r3, [pc, #324]	@ (8015d9c <USBD_CDC_Init+0x1e8>)
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	f003 020f 	and.w	r2, r3, #15
 8015c5e:	6879      	ldr	r1, [r7, #4]
 8015c60:	4613      	mov	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	4413      	add	r3, r2
 8015c66:	009b      	lsls	r3, r3, #2
 8015c68:	440b      	add	r3, r1
 8015c6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015c6e:	2201      	movs	r2, #1
 8015c70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8015c72:	4b4b      	ldr	r3, [pc, #300]	@ (8015da0 <USBD_CDC_Init+0x1ec>)
 8015c74:	781b      	ldrb	r3, [r3, #0]
 8015c76:	f003 020f 	and.w	r2, r3, #15
 8015c7a:	6879      	ldr	r1, [r7, #4]
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	4413      	add	r3, r2
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	440b      	add	r3, r1
 8015c86:	3326      	adds	r3, #38	@ 0x26
 8015c88:	2210      	movs	r2, #16
 8015c8a:	801a      	strh	r2, [r3, #0]
 8015c8c:	e035      	b.n	8015cfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015c8e:	4b42      	ldr	r3, [pc, #264]	@ (8015d98 <USBD_CDC_Init+0x1e4>)
 8015c90:	7819      	ldrb	r1, [r3, #0]
 8015c92:	2340      	movs	r3, #64	@ 0x40
 8015c94:	2202      	movs	r2, #2
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f002 fb7b 	bl	8018392 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8015d98 <USBD_CDC_Init+0x1e4>)
 8015c9e:	781b      	ldrb	r3, [r3, #0]
 8015ca0:	f003 020f 	and.w	r2, r3, #15
 8015ca4:	6879      	ldr	r1, [r7, #4]
 8015ca6:	4613      	mov	r3, r2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	4413      	add	r3, r2
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	440b      	add	r3, r1
 8015cb0:	3324      	adds	r3, #36	@ 0x24
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8015cb6:	4b39      	ldr	r3, [pc, #228]	@ (8015d9c <USBD_CDC_Init+0x1e8>)
 8015cb8:	7819      	ldrb	r1, [r3, #0]
 8015cba:	2340      	movs	r3, #64	@ 0x40
 8015cbc:	2202      	movs	r2, #2
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f002 fb67 	bl	8018392 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015cc4:	4b35      	ldr	r3, [pc, #212]	@ (8015d9c <USBD_CDC_Init+0x1e8>)
 8015cc6:	781b      	ldrb	r3, [r3, #0]
 8015cc8:	f003 020f 	and.w	r2, r3, #15
 8015ccc:	6879      	ldr	r1, [r7, #4]
 8015cce:	4613      	mov	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	4413      	add	r3, r2
 8015cd4:	009b      	lsls	r3, r3, #2
 8015cd6:	440b      	add	r3, r1
 8015cd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015cdc:	2201      	movs	r2, #1
 8015cde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8015da0 <USBD_CDC_Init+0x1ec>)
 8015ce2:	781b      	ldrb	r3, [r3, #0]
 8015ce4:	f003 020f 	and.w	r2, r3, #15
 8015ce8:	6879      	ldr	r1, [r7, #4]
 8015cea:	4613      	mov	r3, r2
 8015cec:	009b      	lsls	r3, r3, #2
 8015cee:	4413      	add	r3, r2
 8015cf0:	009b      	lsls	r3, r3, #2
 8015cf2:	440b      	add	r3, r1
 8015cf4:	3326      	adds	r3, #38	@ 0x26
 8015cf6:	2210      	movs	r2, #16
 8015cf8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8015cfa:	4b29      	ldr	r3, [pc, #164]	@ (8015da0 <USBD_CDC_Init+0x1ec>)
 8015cfc:	7819      	ldrb	r1, [r3, #0]
 8015cfe:	2308      	movs	r3, #8
 8015d00:	2203      	movs	r2, #3
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f002 fb45 	bl	8018392 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8015d08:	4b25      	ldr	r3, [pc, #148]	@ (8015da0 <USBD_CDC_Init+0x1ec>)
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	f003 020f 	and.w	r2, r3, #15
 8015d10:	6879      	ldr	r1, [r7, #4]
 8015d12:	4613      	mov	r3, r2
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	4413      	add	r3, r2
 8015d18:	009b      	lsls	r3, r3, #2
 8015d1a:	440b      	add	r3, r1
 8015d1c:	3324      	adds	r3, #36	@ 0x24
 8015d1e:	2201      	movs	r2, #1
 8015d20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	2200      	movs	r2, #0
 8015d26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	33b0      	adds	r3, #176	@ 0xb0
 8015d34:	009b      	lsls	r3, r3, #2
 8015d36:	4413      	add	r3, r2
 8015d38:	685b      	ldr	r3, [r3, #4]
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	2200      	movs	r2, #0
 8015d42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8015d58:	2302      	movs	r3, #2
 8015d5a:	e018      	b.n	8015d8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	7c1b      	ldrb	r3, [r3, #16]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d10a      	bne.n	8015d7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d64:	4b0d      	ldr	r3, [pc, #52]	@ (8015d9c <USBD_CDC_Init+0x1e8>)
 8015d66:	7819      	ldrb	r1, [r3, #0]
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015d6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f002 fbfc 	bl	8018570 <USBD_LL_PrepareReceive>
 8015d78:	e008      	b.n	8015d8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d7a:	4b08      	ldr	r3, [pc, #32]	@ (8015d9c <USBD_CDC_Init+0x1e8>)
 8015d7c:	7819      	ldrb	r1, [r3, #0]
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8015d84:	2340      	movs	r3, #64	@ 0x40
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f002 fbf2 	bl	8018570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015d8c:	2300      	movs	r3, #0
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	240002c3 	.word	0x240002c3
 8015d9c:	240002c4 	.word	0x240002c4
 8015da0:	240002c5 	.word	0x240002c5

08015da4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
 8015dac:	460b      	mov	r3, r1
 8015dae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8015db0:	4b3a      	ldr	r3, [pc, #232]	@ (8015e9c <USBD_CDC_DeInit+0xf8>)
 8015db2:	781b      	ldrb	r3, [r3, #0]
 8015db4:	4619      	mov	r1, r3
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f002 fb11 	bl	80183de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015dbc:	4b37      	ldr	r3, [pc, #220]	@ (8015e9c <USBD_CDC_DeInit+0xf8>)
 8015dbe:	781b      	ldrb	r3, [r3, #0]
 8015dc0:	f003 020f 	and.w	r2, r3, #15
 8015dc4:	6879      	ldr	r1, [r7, #4]
 8015dc6:	4613      	mov	r3, r2
 8015dc8:	009b      	lsls	r3, r3, #2
 8015dca:	4413      	add	r3, r2
 8015dcc:	009b      	lsls	r3, r3, #2
 8015dce:	440b      	add	r3, r1
 8015dd0:	3324      	adds	r3, #36	@ 0x24
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8015dd6:	4b32      	ldr	r3, [pc, #200]	@ (8015ea0 <USBD_CDC_DeInit+0xfc>)
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	4619      	mov	r1, r3
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f002 fafe 	bl	80183de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015de2:	4b2f      	ldr	r3, [pc, #188]	@ (8015ea0 <USBD_CDC_DeInit+0xfc>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	f003 020f 	and.w	r2, r3, #15
 8015dea:	6879      	ldr	r1, [r7, #4]
 8015dec:	4613      	mov	r3, r2
 8015dee:	009b      	lsls	r3, r3, #2
 8015df0:	4413      	add	r3, r2
 8015df2:	009b      	lsls	r3, r3, #2
 8015df4:	440b      	add	r3, r1
 8015df6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015dfe:	4b29      	ldr	r3, [pc, #164]	@ (8015ea4 <USBD_CDC_DeInit+0x100>)
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	4619      	mov	r1, r3
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f002 faea 	bl	80183de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8015e0a:	4b26      	ldr	r3, [pc, #152]	@ (8015ea4 <USBD_CDC_DeInit+0x100>)
 8015e0c:	781b      	ldrb	r3, [r3, #0]
 8015e0e:	f003 020f 	and.w	r2, r3, #15
 8015e12:	6879      	ldr	r1, [r7, #4]
 8015e14:	4613      	mov	r3, r2
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	4413      	add	r3, r2
 8015e1a:	009b      	lsls	r3, r3, #2
 8015e1c:	440b      	add	r3, r1
 8015e1e:	3324      	adds	r3, #36	@ 0x24
 8015e20:	2200      	movs	r2, #0
 8015e22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015e24:	4b1f      	ldr	r3, [pc, #124]	@ (8015ea4 <USBD_CDC_DeInit+0x100>)
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	f003 020f 	and.w	r2, r3, #15
 8015e2c:	6879      	ldr	r1, [r7, #4]
 8015e2e:	4613      	mov	r3, r2
 8015e30:	009b      	lsls	r3, r3, #2
 8015e32:	4413      	add	r3, r2
 8015e34:	009b      	lsls	r3, r3, #2
 8015e36:	440b      	add	r3, r1
 8015e38:	3326      	adds	r3, #38	@ 0x26
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	32b0      	adds	r2, #176	@ 0xb0
 8015e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d01f      	beq.n	8015e90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	33b0      	adds	r3, #176	@ 0xb0
 8015e5a:	009b      	lsls	r3, r3, #2
 8015e5c:	4413      	add	r3, r2
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	685b      	ldr	r3, [r3, #4]
 8015e62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	32b0      	adds	r2, #176	@ 0xb0
 8015e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f002 fbbe 	bl	80185f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	32b0      	adds	r2, #176	@ 0xb0
 8015e82:	2100      	movs	r1, #0
 8015e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8015e90:	2300      	movs	r3, #0
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3708      	adds	r7, #8
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	240002c3 	.word	0x240002c3
 8015ea0:	240002c4 	.word	0x240002c4
 8015ea4:	240002c5 	.word	0x240002c5

08015ea8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b086      	sub	sp, #24
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
 8015eb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	32b0      	adds	r2, #176	@ 0xb0
 8015ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015ec2:	2300      	movs	r3, #0
 8015ec4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015ece:	693b      	ldr	r3, [r7, #16]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d101      	bne.n	8015ed8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015ed4:	2303      	movs	r3, #3
 8015ed6:	e0bf      	b.n	8016058 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d050      	beq.n	8015f86 <USBD_CDC_Setup+0xde>
 8015ee4:	2b20      	cmp	r3, #32
 8015ee6:	f040 80af 	bne.w	8016048 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	88db      	ldrh	r3, [r3, #6]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d03a      	beq.n	8015f68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015ef2:	683b      	ldr	r3, [r7, #0]
 8015ef4:	781b      	ldrb	r3, [r3, #0]
 8015ef6:	b25b      	sxtb	r3, r3
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	da1b      	bge.n	8015f34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f02:	687a      	ldr	r2, [r7, #4]
 8015f04:	33b0      	adds	r3, #176	@ 0xb0
 8015f06:	009b      	lsls	r3, r3, #2
 8015f08:	4413      	add	r3, r2
 8015f0a:	685b      	ldr	r3, [r3, #4]
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015f12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015f14:	683a      	ldr	r2, [r7, #0]
 8015f16:	88d2      	ldrh	r2, [r2, #6]
 8015f18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	88db      	ldrh	r3, [r3, #6]
 8015f1e:	2b07      	cmp	r3, #7
 8015f20:	bf28      	it	cs
 8015f22:	2307      	movcs	r3, #7
 8015f24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	89fa      	ldrh	r2, [r7, #14]
 8015f2a:	4619      	mov	r1, r3
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f001 fdbd 	bl	8017aac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015f32:	e090      	b.n	8016056 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	785a      	ldrb	r2, [r3, #1]
 8015f38:	693b      	ldr	r3, [r7, #16]
 8015f3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	88db      	ldrh	r3, [r3, #6]
 8015f42:	2b3f      	cmp	r3, #63	@ 0x3f
 8015f44:	d803      	bhi.n	8015f4e <USBD_CDC_Setup+0xa6>
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	88db      	ldrh	r3, [r3, #6]
 8015f4a:	b2da      	uxtb	r2, r3
 8015f4c:	e000      	b.n	8015f50 <USBD_CDC_Setup+0xa8>
 8015f4e:	2240      	movs	r2, #64	@ 0x40
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8015f56:	6939      	ldr	r1, [r7, #16]
 8015f58:	693b      	ldr	r3, [r7, #16]
 8015f5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8015f5e:	461a      	mov	r2, r3
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f001 fdcf 	bl	8017b04 <USBD_CtlPrepareRx>
      break;
 8015f66:	e076      	b.n	8016056 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8015f6e:	687a      	ldr	r2, [r7, #4]
 8015f70:	33b0      	adds	r3, #176	@ 0xb0
 8015f72:	009b      	lsls	r3, r3, #2
 8015f74:	4413      	add	r3, r2
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	689b      	ldr	r3, [r3, #8]
 8015f7a:	683a      	ldr	r2, [r7, #0]
 8015f7c:	7850      	ldrb	r0, [r2, #1]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	6839      	ldr	r1, [r7, #0]
 8015f82:	4798      	blx	r3
      break;
 8015f84:	e067      	b.n	8016056 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015f86:	683b      	ldr	r3, [r7, #0]
 8015f88:	785b      	ldrb	r3, [r3, #1]
 8015f8a:	2b0b      	cmp	r3, #11
 8015f8c:	d851      	bhi.n	8016032 <USBD_CDC_Setup+0x18a>
 8015f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8015f94 <USBD_CDC_Setup+0xec>)
 8015f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f94:	08015fc5 	.word	0x08015fc5
 8015f98:	08016041 	.word	0x08016041
 8015f9c:	08016033 	.word	0x08016033
 8015fa0:	08016033 	.word	0x08016033
 8015fa4:	08016033 	.word	0x08016033
 8015fa8:	08016033 	.word	0x08016033
 8015fac:	08016033 	.word	0x08016033
 8015fb0:	08016033 	.word	0x08016033
 8015fb4:	08016033 	.word	0x08016033
 8015fb8:	08016033 	.word	0x08016033
 8015fbc:	08015fef 	.word	0x08015fef
 8015fc0:	08016019 	.word	0x08016019
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	2b03      	cmp	r3, #3
 8015fce:	d107      	bne.n	8015fe0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015fd0:	f107 030a 	add.w	r3, r7, #10
 8015fd4:	2202      	movs	r2, #2
 8015fd6:	4619      	mov	r1, r3
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f001 fd67 	bl	8017aac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015fde:	e032      	b.n	8016046 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015fe0:	6839      	ldr	r1, [r7, #0]
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f001 fce5 	bl	80179b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8015fe8:	2303      	movs	r3, #3
 8015fea:	75fb      	strb	r3, [r7, #23]
          break;
 8015fec:	e02b      	b.n	8016046 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	2b03      	cmp	r3, #3
 8015ff8:	d107      	bne.n	801600a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015ffa:	f107 030d 	add.w	r3, r7, #13
 8015ffe:	2201      	movs	r2, #1
 8016000:	4619      	mov	r1, r3
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	f001 fd52 	bl	8017aac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016008:	e01d      	b.n	8016046 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801600a:	6839      	ldr	r1, [r7, #0]
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f001 fcd0 	bl	80179b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8016012:	2303      	movs	r3, #3
 8016014:	75fb      	strb	r3, [r7, #23]
          break;
 8016016:	e016      	b.n	8016046 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801601e:	b2db      	uxtb	r3, r3
 8016020:	2b03      	cmp	r3, #3
 8016022:	d00f      	beq.n	8016044 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8016024:	6839      	ldr	r1, [r7, #0]
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	f001 fcc3 	bl	80179b2 <USBD_CtlError>
            ret = USBD_FAIL;
 801602c:	2303      	movs	r3, #3
 801602e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016030:	e008      	b.n	8016044 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016032:	6839      	ldr	r1, [r7, #0]
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f001 fcbc 	bl	80179b2 <USBD_CtlError>
          ret = USBD_FAIL;
 801603a:	2303      	movs	r3, #3
 801603c:	75fb      	strb	r3, [r7, #23]
          break;
 801603e:	e002      	b.n	8016046 <USBD_CDC_Setup+0x19e>
          break;
 8016040:	bf00      	nop
 8016042:	e008      	b.n	8016056 <USBD_CDC_Setup+0x1ae>
          break;
 8016044:	bf00      	nop
      }
      break;
 8016046:	e006      	b.n	8016056 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8016048:	6839      	ldr	r1, [r7, #0]
 801604a:	6878      	ldr	r0, [r7, #4]
 801604c:	f001 fcb1 	bl	80179b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8016050:	2303      	movs	r3, #3
 8016052:	75fb      	strb	r3, [r7, #23]
      break;
 8016054:	bf00      	nop
  }

  return (uint8_t)ret;
 8016056:	7dfb      	ldrb	r3, [r7, #23]
}
 8016058:	4618      	mov	r0, r3
 801605a:	3718      	adds	r7, #24
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}

08016060 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	460b      	mov	r3, r1
 801606a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8016072:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	32b0      	adds	r2, #176	@ 0xb0
 801607e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d101      	bne.n	801608a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8016086:	2303      	movs	r3, #3
 8016088:	e065      	b.n	8016156 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	32b0      	adds	r2, #176	@ 0xb0
 8016094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016098:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801609a:	78fb      	ldrb	r3, [r7, #3]
 801609c:	f003 020f 	and.w	r2, r3, #15
 80160a0:	6879      	ldr	r1, [r7, #4]
 80160a2:	4613      	mov	r3, r2
 80160a4:	009b      	lsls	r3, r3, #2
 80160a6:	4413      	add	r3, r2
 80160a8:	009b      	lsls	r3, r3, #2
 80160aa:	440b      	add	r3, r1
 80160ac:	3318      	adds	r3, #24
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d02f      	beq.n	8016114 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80160b4:	78fb      	ldrb	r3, [r7, #3]
 80160b6:	f003 020f 	and.w	r2, r3, #15
 80160ba:	6879      	ldr	r1, [r7, #4]
 80160bc:	4613      	mov	r3, r2
 80160be:	009b      	lsls	r3, r3, #2
 80160c0:	4413      	add	r3, r2
 80160c2:	009b      	lsls	r3, r3, #2
 80160c4:	440b      	add	r3, r1
 80160c6:	3318      	adds	r3, #24
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	78fb      	ldrb	r3, [r7, #3]
 80160cc:	f003 010f 	and.w	r1, r3, #15
 80160d0:	68f8      	ldr	r0, [r7, #12]
 80160d2:	460b      	mov	r3, r1
 80160d4:	00db      	lsls	r3, r3, #3
 80160d6:	440b      	add	r3, r1
 80160d8:	009b      	lsls	r3, r3, #2
 80160da:	4403      	add	r3, r0
 80160dc:	331c      	adds	r3, #28
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80160e4:	fb01 f303 	mul.w	r3, r1, r3
 80160e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d112      	bne.n	8016114 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80160ee:	78fb      	ldrb	r3, [r7, #3]
 80160f0:	f003 020f 	and.w	r2, r3, #15
 80160f4:	6879      	ldr	r1, [r7, #4]
 80160f6:	4613      	mov	r3, r2
 80160f8:	009b      	lsls	r3, r3, #2
 80160fa:	4413      	add	r3, r2
 80160fc:	009b      	lsls	r3, r3, #2
 80160fe:	440b      	add	r3, r1
 8016100:	3318      	adds	r3, #24
 8016102:	2200      	movs	r2, #0
 8016104:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016106:	78f9      	ldrb	r1, [r7, #3]
 8016108:	2300      	movs	r3, #0
 801610a:	2200      	movs	r2, #0
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f002 fa0e 	bl	801852e <USBD_LL_Transmit>
 8016112:	e01f      	b.n	8016154 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8016114:	68bb      	ldr	r3, [r7, #8]
 8016116:	2200      	movs	r2, #0
 8016118:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016122:	687a      	ldr	r2, [r7, #4]
 8016124:	33b0      	adds	r3, #176	@ 0xb0
 8016126:	009b      	lsls	r3, r3, #2
 8016128:	4413      	add	r3, r2
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	691b      	ldr	r3, [r3, #16]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d010      	beq.n	8016154 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	33b0      	adds	r3, #176	@ 0xb0
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	4413      	add	r3, r2
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	691b      	ldr	r3, [r3, #16]
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8016150:	78fa      	ldrb	r2, [r7, #3]
 8016152:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3710      	adds	r7, #16
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}

0801615e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801615e:	b580      	push	{r7, lr}
 8016160:	b084      	sub	sp, #16
 8016162:	af00      	add	r7, sp, #0
 8016164:	6078      	str	r0, [r7, #4]
 8016166:	460b      	mov	r3, r1
 8016168:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	32b0      	adds	r2, #176	@ 0xb0
 8016174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016178:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	32b0      	adds	r2, #176	@ 0xb0
 8016184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d101      	bne.n	8016190 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801618c:	2303      	movs	r3, #3
 801618e:	e01a      	b.n	80161c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016190:	78fb      	ldrb	r3, [r7, #3]
 8016192:	4619      	mov	r1, r3
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f002 fa0c 	bl	80185b2 <USBD_LL_GetRxDataSize>
 801619a:	4602      	mov	r2, r0
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80161a8:	687a      	ldr	r2, [r7, #4]
 80161aa:	33b0      	adds	r3, #176	@ 0xb0
 80161ac:	009b      	lsls	r3, r3, #2
 80161ae:	4413      	add	r3, r2
 80161b0:	685b      	ldr	r3, [r3, #4]
 80161b2:	68db      	ldr	r3, [r3, #12]
 80161b4:	68fa      	ldr	r2, [r7, #12]
 80161b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80161ba:	68fa      	ldr	r2, [r7, #12]
 80161bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80161c0:	4611      	mov	r1, r2
 80161c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80161c4:	2300      	movs	r3, #0
}
 80161c6:	4618      	mov	r0, r3
 80161c8:	3710      	adds	r7, #16
 80161ca:	46bd      	mov	sp, r7
 80161cc:	bd80      	pop	{r7, pc}

080161ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b084      	sub	sp, #16
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	32b0      	adds	r2, #176	@ 0xb0
 80161e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d101      	bne.n	80161f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80161ec:	2303      	movs	r3, #3
 80161ee:	e024      	b.n	801623a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80161f6:	687a      	ldr	r2, [r7, #4]
 80161f8:	33b0      	adds	r3, #176	@ 0xb0
 80161fa:	009b      	lsls	r3, r3, #2
 80161fc:	4413      	add	r3, r2
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d019      	beq.n	8016238 <USBD_CDC_EP0_RxReady+0x6a>
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801620a:	2bff      	cmp	r3, #255	@ 0xff
 801620c:	d014      	beq.n	8016238 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8016214:	687a      	ldr	r2, [r7, #4]
 8016216:	33b0      	adds	r3, #176	@ 0xb0
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	4413      	add	r3, r2
 801621c:	685b      	ldr	r3, [r3, #4]
 801621e:	689b      	ldr	r3, [r3, #8]
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8016226:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8016228:	68fa      	ldr	r2, [r7, #12]
 801622a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801622e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	22ff      	movs	r2, #255	@ 0xff
 8016234:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8016238:	2300      	movs	r3, #0
}
 801623a:	4618      	mov	r0, r3
 801623c:	3710      	adds	r7, #16
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}
	...

08016244 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b086      	sub	sp, #24
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801624c:	2182      	movs	r1, #130	@ 0x82
 801624e:	4818      	ldr	r0, [pc, #96]	@ (80162b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016250:	f000 fd4f 	bl	8016cf2 <USBD_GetEpDesc>
 8016254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016256:	2101      	movs	r1, #1
 8016258:	4815      	ldr	r0, [pc, #84]	@ (80162b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801625a:	f000 fd4a 	bl	8016cf2 <USBD_GetEpDesc>
 801625e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016260:	2181      	movs	r1, #129	@ 0x81
 8016262:	4813      	ldr	r0, [pc, #76]	@ (80162b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8016264:	f000 fd45 	bl	8016cf2 <USBD_GetEpDesc>
 8016268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801626a:	697b      	ldr	r3, [r7, #20]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d002      	beq.n	8016276 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016270:	697b      	ldr	r3, [r7, #20]
 8016272:	2210      	movs	r2, #16
 8016274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d006      	beq.n	801628a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801627c:	693b      	ldr	r3, [r7, #16]
 801627e:	2200      	movs	r2, #0
 8016280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016284:	711a      	strb	r2, [r3, #4]
 8016286:	2200      	movs	r2, #0
 8016288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d006      	beq.n	801629e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	2200      	movs	r2, #0
 8016294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016298:	711a      	strb	r2, [r3, #4]
 801629a:	2200      	movs	r2, #0
 801629c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2243      	movs	r2, #67	@ 0x43
 80162a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80162a4:	4b02      	ldr	r3, [pc, #8]	@ (80162b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3718      	adds	r7, #24
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	24000280 	.word	0x24000280

080162b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b086      	sub	sp, #24
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80162bc:	2182      	movs	r1, #130	@ 0x82
 80162be:	4818      	ldr	r0, [pc, #96]	@ (8016320 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80162c0:	f000 fd17 	bl	8016cf2 <USBD_GetEpDesc>
 80162c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80162c6:	2101      	movs	r1, #1
 80162c8:	4815      	ldr	r0, [pc, #84]	@ (8016320 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80162ca:	f000 fd12 	bl	8016cf2 <USBD_GetEpDesc>
 80162ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80162d0:	2181      	movs	r1, #129	@ 0x81
 80162d2:	4813      	ldr	r0, [pc, #76]	@ (8016320 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80162d4:	f000 fd0d 	bl	8016cf2 <USBD_GetEpDesc>
 80162d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d002      	beq.n	80162e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	2210      	movs	r2, #16
 80162e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d006      	beq.n	80162fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80162ec:	693b      	ldr	r3, [r7, #16]
 80162ee:	2200      	movs	r2, #0
 80162f0:	711a      	strb	r2, [r3, #4]
 80162f2:	2200      	movs	r2, #0
 80162f4:	f042 0202 	orr.w	r2, r2, #2
 80162f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d006      	beq.n	801630e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	2200      	movs	r2, #0
 8016304:	711a      	strb	r2, [r3, #4]
 8016306:	2200      	movs	r2, #0
 8016308:	f042 0202 	orr.w	r2, r2, #2
 801630c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2243      	movs	r2, #67	@ 0x43
 8016312:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016314:	4b02      	ldr	r3, [pc, #8]	@ (8016320 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8016316:	4618      	mov	r0, r3
 8016318:	3718      	adds	r7, #24
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}
 801631e:	bf00      	nop
 8016320:	24000280 	.word	0x24000280

08016324 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b086      	sub	sp, #24
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801632c:	2182      	movs	r1, #130	@ 0x82
 801632e:	4818      	ldr	r0, [pc, #96]	@ (8016390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016330:	f000 fcdf 	bl	8016cf2 <USBD_GetEpDesc>
 8016334:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8016336:	2101      	movs	r1, #1
 8016338:	4815      	ldr	r0, [pc, #84]	@ (8016390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801633a:	f000 fcda 	bl	8016cf2 <USBD_GetEpDesc>
 801633e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8016340:	2181      	movs	r1, #129	@ 0x81
 8016342:	4813      	ldr	r0, [pc, #76]	@ (8016390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8016344:	f000 fcd5 	bl	8016cf2 <USBD_GetEpDesc>
 8016348:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d002      	beq.n	8016356 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	2210      	movs	r2, #16
 8016354:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8016356:	693b      	ldr	r3, [r7, #16]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d006      	beq.n	801636a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	2200      	movs	r2, #0
 8016360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016364:	711a      	strb	r2, [r3, #4]
 8016366:	2200      	movs	r2, #0
 8016368:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d006      	beq.n	801637e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2200      	movs	r2, #0
 8016374:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8016378:	711a      	strb	r2, [r3, #4]
 801637a:	2200      	movs	r2, #0
 801637c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2243      	movs	r2, #67	@ 0x43
 8016382:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8016384:	4b02      	ldr	r3, [pc, #8]	@ (8016390 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8016386:	4618      	mov	r0, r3
 8016388:	3718      	adds	r7, #24
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
 801638e:	bf00      	nop
 8016390:	24000280 	.word	0x24000280

08016394 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016394:	b480      	push	{r7}
 8016396:	b083      	sub	sp, #12
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	220a      	movs	r2, #10
 80163a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80163a2:	4b03      	ldr	r3, [pc, #12]	@ (80163b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	370c      	adds	r7, #12
 80163a8:	46bd      	mov	sp, r7
 80163aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ae:	4770      	bx	lr
 80163b0:	2400023c 	.word	0x2400023c

080163b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80163b4:	b480      	push	{r7}
 80163b6:	b083      	sub	sp, #12
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
 80163bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d101      	bne.n	80163c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80163c4:	2303      	movs	r3, #3
 80163c6:	e009      	b.n	80163dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	33b0      	adds	r3, #176	@ 0xb0
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	4413      	add	r3, r2
 80163d6:	683a      	ldr	r2, [r7, #0]
 80163d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80163da:	2300      	movs	r3, #0
}
 80163dc:	4618      	mov	r0, r3
 80163de:	370c      	adds	r7, #12
 80163e0:	46bd      	mov	sp, r7
 80163e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e6:	4770      	bx	lr

080163e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80163e8:	b480      	push	{r7}
 80163ea:	b087      	sub	sp, #28
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	60f8      	str	r0, [r7, #12]
 80163f0:	60b9      	str	r1, [r7, #8]
 80163f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	32b0      	adds	r2, #176	@ 0xb0
 80163fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016402:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	2b00      	cmp	r3, #0
 8016408:	d101      	bne.n	801640e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801640a:	2303      	movs	r3, #3
 801640c:	e008      	b.n	8016420 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801640e:	697b      	ldr	r3, [r7, #20]
 8016410:	68ba      	ldr	r2, [r7, #8]
 8016412:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8016416:	697b      	ldr	r3, [r7, #20]
 8016418:	687a      	ldr	r2, [r7, #4]
 801641a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801641e:	2300      	movs	r3, #0
}
 8016420:	4618      	mov	r0, r3
 8016422:	371c      	adds	r7, #28
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr

0801642c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801642c:	b480      	push	{r7}
 801642e:	b085      	sub	sp, #20
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	32b0      	adds	r2, #176	@ 0xb0
 8016440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016444:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d101      	bne.n	8016450 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801644c:	2303      	movs	r3, #3
 801644e:	e004      	b.n	801645a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	683a      	ldr	r2, [r7, #0]
 8016454:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8016458:	2300      	movs	r3, #0
}
 801645a:	4618      	mov	r0, r3
 801645c:	3714      	adds	r7, #20
 801645e:	46bd      	mov	sp, r7
 8016460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016464:	4770      	bx	lr
	...

08016468 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8016468:	b580      	push	{r7, lr}
 801646a:	b084      	sub	sp, #16
 801646c:	af00      	add	r7, sp, #0
 801646e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	32b0      	adds	r2, #176	@ 0xb0
 801647a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801647e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8016480:	2301      	movs	r3, #1
 8016482:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d101      	bne.n	801648e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801648a:	2303      	movs	r3, #3
 801648c:	e025      	b.n	80164da <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801648e:	68bb      	ldr	r3, [r7, #8]
 8016490:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8016494:	2b00      	cmp	r3, #0
 8016496:	d11f      	bne.n	80164d8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	2201      	movs	r2, #1
 801649c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80164a0:	4b10      	ldr	r3, [pc, #64]	@ (80164e4 <USBD_CDC_TransmitPacket+0x7c>)
 80164a2:	781b      	ldrb	r3, [r3, #0]
 80164a4:	f003 020f 	and.w	r2, r3, #15
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	4613      	mov	r3, r2
 80164b2:	009b      	lsls	r3, r3, #2
 80164b4:	4413      	add	r3, r2
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	4403      	add	r3, r0
 80164ba:	3318      	adds	r3, #24
 80164bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80164be:	4b09      	ldr	r3, [pc, #36]	@ (80164e4 <USBD_CDC_TransmitPacket+0x7c>)
 80164c0:	7819      	ldrb	r1, [r3, #0]
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80164c8:	68bb      	ldr	r3, [r7, #8]
 80164ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f002 f82d 	bl	801852e <USBD_LL_Transmit>

    ret = USBD_OK;
 80164d4:	2300      	movs	r3, #0
 80164d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80164d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3710      	adds	r7, #16
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}
 80164e2:	bf00      	nop
 80164e4:	240002c3 	.word	0x240002c3

080164e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b084      	sub	sp, #16
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	32b0      	adds	r2, #176	@ 0xb0
 80164fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80164fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	32b0      	adds	r2, #176	@ 0xb0
 801650a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d101      	bne.n	8016516 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8016512:	2303      	movs	r3, #3
 8016514:	e018      	b.n	8016548 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	7c1b      	ldrb	r3, [r3, #16]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d10a      	bne.n	8016534 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801651e:	4b0c      	ldr	r3, [pc, #48]	@ (8016550 <USBD_CDC_ReceivePacket+0x68>)
 8016520:	7819      	ldrb	r1, [r3, #0]
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8016528:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801652c:	6878      	ldr	r0, [r7, #4]
 801652e:	f002 f81f 	bl	8018570 <USBD_LL_PrepareReceive>
 8016532:	e008      	b.n	8016546 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8016534:	4b06      	ldr	r3, [pc, #24]	@ (8016550 <USBD_CDC_ReceivePacket+0x68>)
 8016536:	7819      	ldrb	r1, [r3, #0]
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801653e:	2340      	movs	r3, #64	@ 0x40
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f002 f815 	bl	8018570 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016546:	2300      	movs	r3, #0
}
 8016548:	4618      	mov	r0, r3
 801654a:	3710      	adds	r7, #16
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}
 8016550:	240002c4 	.word	0x240002c4

08016554 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b086      	sub	sp, #24
 8016558:	af00      	add	r7, sp, #0
 801655a:	60f8      	str	r0, [r7, #12]
 801655c:	60b9      	str	r1, [r7, #8]
 801655e:	4613      	mov	r3, r2
 8016560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d101      	bne.n	801656c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8016568:	2303      	movs	r3, #3
 801656a:	e01f      	b.n	80165ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	2200      	movs	r2, #0
 8016570:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	2200      	movs	r2, #0
 8016578:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	2200      	movs	r2, #0
 8016580:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d003      	beq.n	8016592 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	68ba      	ldr	r2, [r7, #8]
 801658e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016592:	68fb      	ldr	r3, [r7, #12]
 8016594:	2201      	movs	r2, #1
 8016596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	79fa      	ldrb	r2, [r7, #7]
 801659e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80165a0:	68f8      	ldr	r0, [r7, #12]
 80165a2:	f001 fe8b 	bl	80182bc <USBD_LL_Init>
 80165a6:	4603      	mov	r3, r0
 80165a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80165aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3718      	adds	r7, #24
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}

080165b4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b084      	sub	sp, #16
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
 80165bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80165be:	2300      	movs	r3, #0
 80165c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d101      	bne.n	80165cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80165c8:	2303      	movs	r3, #3
 80165ca:	e025      	b.n	8016618 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	683a      	ldr	r2, [r7, #0]
 80165d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	32ae      	adds	r2, #174	@ 0xae
 80165de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d00f      	beq.n	8016608 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	32ae      	adds	r2, #174	@ 0xae
 80165f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80165f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80165f8:	f107 020e 	add.w	r2, r7, #14
 80165fc:	4610      	mov	r0, r2
 80165fe:	4798      	blx	r3
 8016600:	4602      	mov	r2, r0
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801660e:	1c5a      	adds	r2, r3, #1
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8016616:	2300      	movs	r3, #0
}
 8016618:	4618      	mov	r0, r3
 801661a:	3710      	adds	r7, #16
 801661c:	46bd      	mov	sp, r7
 801661e:	bd80      	pop	{r7, pc}

08016620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b082      	sub	sp, #8
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016628:	6878      	ldr	r0, [r7, #4]
 801662a:	f001 fe97 	bl	801835c <USBD_LL_Start>
 801662e:	4603      	mov	r3, r0
}
 8016630:	4618      	mov	r0, r3
 8016632:	3708      	adds	r7, #8
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8016638:	b480      	push	{r7}
 801663a:	b083      	sub	sp, #12
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016640:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8016642:	4618      	mov	r0, r3
 8016644:	370c      	adds	r7, #12
 8016646:	46bd      	mov	sp, r7
 8016648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664c:	4770      	bx	lr

0801664e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801664e:	b580      	push	{r7, lr}
 8016650:	b084      	sub	sp, #16
 8016652:	af00      	add	r7, sp, #0
 8016654:	6078      	str	r0, [r7, #4]
 8016656:	460b      	mov	r3, r1
 8016658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801665a:	2300      	movs	r3, #0
 801665c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016664:	2b00      	cmp	r3, #0
 8016666:	d009      	beq.n	801667c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	78fa      	ldrb	r2, [r7, #3]
 8016672:	4611      	mov	r1, r2
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	4798      	blx	r3
 8016678:	4603      	mov	r3, r0
 801667a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801667c:	7bfb      	ldrb	r3, [r7, #15]
}
 801667e:	4618      	mov	r0, r3
 8016680:	3710      	adds	r7, #16
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}

08016686 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016686:	b580      	push	{r7, lr}
 8016688:	b084      	sub	sp, #16
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
 801668e:	460b      	mov	r3, r1
 8016690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8016692:	2300      	movs	r3, #0
 8016694:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801669c:	685b      	ldr	r3, [r3, #4]
 801669e:	78fa      	ldrb	r2, [r7, #3]
 80166a0:	4611      	mov	r1, r2
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	4798      	blx	r3
 80166a6:	4603      	mov	r3, r0
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d001      	beq.n	80166b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80166ac:	2303      	movs	r3, #3
 80166ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80166b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80166b2:	4618      	mov	r0, r3
 80166b4:	3710      	adds	r7, #16
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}

080166ba <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80166ba:	b580      	push	{r7, lr}
 80166bc:	b084      	sub	sp, #16
 80166be:	af00      	add	r7, sp, #0
 80166c0:	6078      	str	r0, [r7, #4]
 80166c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80166ca:	6839      	ldr	r1, [r7, #0]
 80166cc:	4618      	mov	r0, r3
 80166ce:	f001 f936 	bl	801793e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	2201      	movs	r2, #1
 80166d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80166e0:	461a      	mov	r2, r3
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80166ee:	f003 031f 	and.w	r3, r3, #31
 80166f2:	2b02      	cmp	r3, #2
 80166f4:	d01a      	beq.n	801672c <USBD_LL_SetupStage+0x72>
 80166f6:	2b02      	cmp	r3, #2
 80166f8:	d822      	bhi.n	8016740 <USBD_LL_SetupStage+0x86>
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d002      	beq.n	8016704 <USBD_LL_SetupStage+0x4a>
 80166fe:	2b01      	cmp	r3, #1
 8016700:	d00a      	beq.n	8016718 <USBD_LL_SetupStage+0x5e>
 8016702:	e01d      	b.n	8016740 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801670a:	4619      	mov	r1, r3
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 fb63 	bl	8016dd8 <USBD_StdDevReq>
 8016712:	4603      	mov	r3, r0
 8016714:	73fb      	strb	r3, [r7, #15]
      break;
 8016716:	e020      	b.n	801675a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801671e:	4619      	mov	r1, r3
 8016720:	6878      	ldr	r0, [r7, #4]
 8016722:	f000 fbcb 	bl	8016ebc <USBD_StdItfReq>
 8016726:	4603      	mov	r3, r0
 8016728:	73fb      	strb	r3, [r7, #15]
      break;
 801672a:	e016      	b.n	801675a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8016732:	4619      	mov	r1, r3
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f000 fc2d 	bl	8016f94 <USBD_StdEPReq>
 801673a:	4603      	mov	r3, r0
 801673c:	73fb      	strb	r3, [r7, #15]
      break;
 801673e:	e00c      	b.n	801675a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8016746:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801674a:	b2db      	uxtb	r3, r3
 801674c:	4619      	mov	r1, r3
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f001 fe64 	bl	801841c <USBD_LL_StallEP>
 8016754:	4603      	mov	r3, r0
 8016756:	73fb      	strb	r3, [r7, #15]
      break;
 8016758:	bf00      	nop
  }

  return ret;
 801675a:	7bfb      	ldrb	r3, [r7, #15]
}
 801675c:	4618      	mov	r0, r3
 801675e:	3710      	adds	r7, #16
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b086      	sub	sp, #24
 8016768:	af00      	add	r7, sp, #0
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	460b      	mov	r3, r1
 801676e:	607a      	str	r2, [r7, #4]
 8016770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8016772:	2300      	movs	r3, #0
 8016774:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8016776:	7afb      	ldrb	r3, [r7, #11]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d16e      	bne.n	801685a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8016782:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801678a:	2b03      	cmp	r3, #3
 801678c:	f040 8098 	bne.w	80168c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	689a      	ldr	r2, [r3, #8]
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	68db      	ldr	r3, [r3, #12]
 8016798:	429a      	cmp	r2, r3
 801679a:	d913      	bls.n	80167c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	689a      	ldr	r2, [r3, #8]
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	1ad2      	subs	r2, r2, r3
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	68da      	ldr	r2, [r3, #12]
 80167ae:	693b      	ldr	r3, [r7, #16]
 80167b0:	689b      	ldr	r3, [r3, #8]
 80167b2:	4293      	cmp	r3, r2
 80167b4:	bf28      	it	cs
 80167b6:	4613      	movcs	r3, r2
 80167b8:	461a      	mov	r2, r3
 80167ba:	6879      	ldr	r1, [r7, #4]
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f001 f9be 	bl	8017b3e <USBD_CtlContinueRx>
 80167c2:	e07d      	b.n	80168c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80167ca:	f003 031f 	and.w	r3, r3, #31
 80167ce:	2b02      	cmp	r3, #2
 80167d0:	d014      	beq.n	80167fc <USBD_LL_DataOutStage+0x98>
 80167d2:	2b02      	cmp	r3, #2
 80167d4:	d81d      	bhi.n	8016812 <USBD_LL_DataOutStage+0xae>
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d002      	beq.n	80167e0 <USBD_LL_DataOutStage+0x7c>
 80167da:	2b01      	cmp	r3, #1
 80167dc:	d003      	beq.n	80167e6 <USBD_LL_DataOutStage+0x82>
 80167de:	e018      	b.n	8016812 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80167e0:	2300      	movs	r3, #0
 80167e2:	75bb      	strb	r3, [r7, #22]
            break;
 80167e4:	e018      	b.n	8016818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	4619      	mov	r1, r3
 80167f0:	68f8      	ldr	r0, [r7, #12]
 80167f2:	f000 fa64 	bl	8016cbe <USBD_CoreFindIF>
 80167f6:	4603      	mov	r3, r0
 80167f8:	75bb      	strb	r3, [r7, #22]
            break;
 80167fa:	e00d      	b.n	8016818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8016802:	b2db      	uxtb	r3, r3
 8016804:	4619      	mov	r1, r3
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f000 fa66 	bl	8016cd8 <USBD_CoreFindEP>
 801680c:	4603      	mov	r3, r0
 801680e:	75bb      	strb	r3, [r7, #22]
            break;
 8016810:	e002      	b.n	8016818 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016812:	2300      	movs	r3, #0
 8016814:	75bb      	strb	r3, [r7, #22]
            break;
 8016816:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8016818:	7dbb      	ldrb	r3, [r7, #22]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d119      	bne.n	8016852 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016824:	b2db      	uxtb	r3, r3
 8016826:	2b03      	cmp	r3, #3
 8016828:	d113      	bne.n	8016852 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801682a:	7dba      	ldrb	r2, [r7, #22]
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	32ae      	adds	r2, #174	@ 0xae
 8016830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016834:	691b      	ldr	r3, [r3, #16]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d00b      	beq.n	8016852 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801683a:	7dba      	ldrb	r2, [r7, #22]
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016842:	7dba      	ldrb	r2, [r7, #22]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	32ae      	adds	r2, #174	@ 0xae
 8016848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801684c:	691b      	ldr	r3, [r3, #16]
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016852:	68f8      	ldr	r0, [r7, #12]
 8016854:	f001 f984 	bl	8017b60 <USBD_CtlSendStatus>
 8016858:	e032      	b.n	80168c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801685a:	7afb      	ldrb	r3, [r7, #11]
 801685c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016860:	b2db      	uxtb	r3, r3
 8016862:	4619      	mov	r1, r3
 8016864:	68f8      	ldr	r0, [r7, #12]
 8016866:	f000 fa37 	bl	8016cd8 <USBD_CoreFindEP>
 801686a:	4603      	mov	r3, r0
 801686c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801686e:	7dbb      	ldrb	r3, [r7, #22]
 8016870:	2bff      	cmp	r3, #255	@ 0xff
 8016872:	d025      	beq.n	80168c0 <USBD_LL_DataOutStage+0x15c>
 8016874:	7dbb      	ldrb	r3, [r7, #22]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d122      	bne.n	80168c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016880:	b2db      	uxtb	r3, r3
 8016882:	2b03      	cmp	r3, #3
 8016884:	d117      	bne.n	80168b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8016886:	7dba      	ldrb	r2, [r7, #22]
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	32ae      	adds	r2, #174	@ 0xae
 801688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016890:	699b      	ldr	r3, [r3, #24]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d00f      	beq.n	80168b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8016896:	7dba      	ldrb	r2, [r7, #22]
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801689e:	7dba      	ldrb	r2, [r7, #22]
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	32ae      	adds	r2, #174	@ 0xae
 80168a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168a8:	699b      	ldr	r3, [r3, #24]
 80168aa:	7afa      	ldrb	r2, [r7, #11]
 80168ac:	4611      	mov	r1, r2
 80168ae:	68f8      	ldr	r0, [r7, #12]
 80168b0:	4798      	blx	r3
 80168b2:	4603      	mov	r3, r0
 80168b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80168b6:	7dfb      	ldrb	r3, [r7, #23]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d001      	beq.n	80168c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80168bc:	7dfb      	ldrb	r3, [r7, #23]
 80168be:	e000      	b.n	80168c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3718      	adds	r7, #24
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}

080168ca <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80168ca:	b580      	push	{r7, lr}
 80168cc:	b086      	sub	sp, #24
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	60f8      	str	r0, [r7, #12]
 80168d2:	460b      	mov	r3, r1
 80168d4:	607a      	str	r2, [r7, #4]
 80168d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80168d8:	7afb      	ldrb	r3, [r7, #11]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d16f      	bne.n	80169be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	3314      	adds	r3, #20
 80168e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80168ea:	2b02      	cmp	r3, #2
 80168ec:	d15a      	bne.n	80169a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	689a      	ldr	r2, [r3, #8]
 80168f2:	693b      	ldr	r3, [r7, #16]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d914      	bls.n	8016924 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80168fa:	693b      	ldr	r3, [r7, #16]
 80168fc:	689a      	ldr	r2, [r3, #8]
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	68db      	ldr	r3, [r3, #12]
 8016902:	1ad2      	subs	r2, r2, r3
 8016904:	693b      	ldr	r3, [r7, #16]
 8016906:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	689b      	ldr	r3, [r3, #8]
 801690c:	461a      	mov	r2, r3
 801690e:	6879      	ldr	r1, [r7, #4]
 8016910:	68f8      	ldr	r0, [r7, #12]
 8016912:	f001 f8e6 	bl	8017ae2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016916:	2300      	movs	r3, #0
 8016918:	2200      	movs	r2, #0
 801691a:	2100      	movs	r1, #0
 801691c:	68f8      	ldr	r0, [r7, #12]
 801691e:	f001 fe27 	bl	8018570 <USBD_LL_PrepareReceive>
 8016922:	e03f      	b.n	80169a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016924:	693b      	ldr	r3, [r7, #16]
 8016926:	68da      	ldr	r2, [r3, #12]
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	689b      	ldr	r3, [r3, #8]
 801692c:	429a      	cmp	r2, r3
 801692e:	d11c      	bne.n	801696a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016930:	693b      	ldr	r3, [r7, #16]
 8016932:	685a      	ldr	r2, [r3, #4]
 8016934:	693b      	ldr	r3, [r7, #16]
 8016936:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016938:	429a      	cmp	r2, r3
 801693a:	d316      	bcc.n	801696a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	685a      	ldr	r2, [r3, #4]
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016946:	429a      	cmp	r2, r3
 8016948:	d20f      	bcs.n	801696a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801694a:	2200      	movs	r2, #0
 801694c:	2100      	movs	r1, #0
 801694e:	68f8      	ldr	r0, [r7, #12]
 8016950:	f001 f8c7 	bl	8017ae2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	2200      	movs	r2, #0
 8016958:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801695c:	2300      	movs	r3, #0
 801695e:	2200      	movs	r2, #0
 8016960:	2100      	movs	r1, #0
 8016962:	68f8      	ldr	r0, [r7, #12]
 8016964:	f001 fe04 	bl	8018570 <USBD_LL_PrepareReceive>
 8016968:	e01c      	b.n	80169a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016970:	b2db      	uxtb	r3, r3
 8016972:	2b03      	cmp	r3, #3
 8016974:	d10f      	bne.n	8016996 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d009      	beq.n	8016996 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	2200      	movs	r2, #0
 8016986:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016990:	68db      	ldr	r3, [r3, #12]
 8016992:	68f8      	ldr	r0, [r7, #12]
 8016994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016996:	2180      	movs	r1, #128	@ 0x80
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f001 fd3f 	bl	801841c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801699e:	68f8      	ldr	r0, [r7, #12]
 80169a0:	f001 f8f1 	bl	8017b86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d03a      	beq.n	8016a24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	f7ff fe42 	bl	8016638 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2200      	movs	r2, #0
 80169b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80169bc:	e032      	b.n	8016a24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80169be:	7afb      	ldrb	r3, [r7, #11]
 80169c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80169c4:	b2db      	uxtb	r3, r3
 80169c6:	4619      	mov	r1, r3
 80169c8:	68f8      	ldr	r0, [r7, #12]
 80169ca:	f000 f985 	bl	8016cd8 <USBD_CoreFindEP>
 80169ce:	4603      	mov	r3, r0
 80169d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80169d2:	7dfb      	ldrb	r3, [r7, #23]
 80169d4:	2bff      	cmp	r3, #255	@ 0xff
 80169d6:	d025      	beq.n	8016a24 <USBD_LL_DataInStage+0x15a>
 80169d8:	7dfb      	ldrb	r3, [r7, #23]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d122      	bne.n	8016a24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80169e4:	b2db      	uxtb	r3, r3
 80169e6:	2b03      	cmp	r3, #3
 80169e8:	d11c      	bne.n	8016a24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80169ea:	7dfa      	ldrb	r2, [r7, #23]
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	32ae      	adds	r2, #174	@ 0xae
 80169f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80169f4:	695b      	ldr	r3, [r3, #20]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d014      	beq.n	8016a24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80169fa:	7dfa      	ldrb	r2, [r7, #23]
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016a02:	7dfa      	ldrb	r2, [r7, #23]
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	32ae      	adds	r2, #174	@ 0xae
 8016a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a0c:	695b      	ldr	r3, [r3, #20]
 8016a0e:	7afa      	ldrb	r2, [r7, #11]
 8016a10:	4611      	mov	r1, r2
 8016a12:	68f8      	ldr	r0, [r7, #12]
 8016a14:	4798      	blx	r3
 8016a16:	4603      	mov	r3, r0
 8016a18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8016a1a:	7dbb      	ldrb	r3, [r7, #22]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d001      	beq.n	8016a24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016a20:	7dbb      	ldrb	r3, [r7, #22]
 8016a22:	e000      	b.n	8016a26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016a24:	2300      	movs	r3, #0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3718      	adds	r7, #24
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}

08016a2e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016a2e:	b580      	push	{r7, lr}
 8016a30:	b084      	sub	sp, #16
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8016a36:	2300      	movs	r3, #0
 8016a38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	2201      	movs	r2, #1
 8016a3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2200      	movs	r2, #0
 8016a46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2200      	movs	r2, #0
 8016a4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	2200      	movs	r2, #0
 8016a54:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d014      	beq.n	8016a94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a70:	685b      	ldr	r3, [r3, #4]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00e      	beq.n	8016a94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	6852      	ldr	r2, [r2, #4]
 8016a82:	b2d2      	uxtb	r2, r2
 8016a84:	4611      	mov	r1, r2
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	4798      	blx	r3
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d001      	beq.n	8016a94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8016a90:	2303      	movs	r3, #3
 8016a92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016a94:	2340      	movs	r3, #64	@ 0x40
 8016a96:	2200      	movs	r2, #0
 8016a98:	2100      	movs	r1, #0
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f001 fc79 	bl	8018392 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2240      	movs	r2, #64	@ 0x40
 8016aac:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016ab0:	2340      	movs	r3, #64	@ 0x40
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	2180      	movs	r1, #128	@ 0x80
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f001 fc6b 	bl	8018392 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2201      	movs	r2, #1
 8016ac0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2240      	movs	r2, #64	@ 0x40
 8016ac6:	621a      	str	r2, [r3, #32]

  return ret;
 8016ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3710      	adds	r7, #16
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}

08016ad2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016ad2:	b480      	push	{r7}
 8016ad4:	b083      	sub	sp, #12
 8016ad6:	af00      	add	r7, sp, #0
 8016ad8:	6078      	str	r0, [r7, #4]
 8016ada:	460b      	mov	r3, r1
 8016adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	78fa      	ldrb	r2, [r7, #3]
 8016ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016ae4:	2300      	movs	r3, #0
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	370c      	adds	r7, #12
 8016aea:	46bd      	mov	sp, r7
 8016aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af0:	4770      	bx	lr

08016af2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016af2:	b480      	push	{r7}
 8016af4:	b083      	sub	sp, #12
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b00:	b2db      	uxtb	r3, r3
 8016b02:	2b04      	cmp	r3, #4
 8016b04:	d006      	beq.n	8016b14 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b0c:	b2da      	uxtb	r2, r3
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	2204      	movs	r2, #4
 8016b18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8016b1c:	2300      	movs	r3, #0
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	370c      	adds	r7, #12
 8016b22:	46bd      	mov	sp, r7
 8016b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b28:	4770      	bx	lr

08016b2a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016b2a:	b480      	push	{r7}
 8016b2c:	b083      	sub	sp, #12
 8016b2e:	af00      	add	r7, sp, #0
 8016b30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b38:	b2db      	uxtb	r3, r3
 8016b3a:	2b04      	cmp	r3, #4
 8016b3c:	d106      	bne.n	8016b4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8016b44:	b2da      	uxtb	r2, r3
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8016b4c:	2300      	movs	r3, #0
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	370c      	adds	r7, #12
 8016b52:	46bd      	mov	sp, r7
 8016b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b58:	4770      	bx	lr

08016b5a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016b5a:	b580      	push	{r7, lr}
 8016b5c:	b082      	sub	sp, #8
 8016b5e:	af00      	add	r7, sp, #0
 8016b60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	2b03      	cmp	r3, #3
 8016b6c:	d110      	bne.n	8016b90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d00b      	beq.n	8016b90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b7e:	69db      	ldr	r3, [r3, #28]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d005      	beq.n	8016b90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016b8a:	69db      	ldr	r3, [r3, #28]
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8016b90:	2300      	movs	r3, #0
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b082      	sub	sp, #8
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
 8016ba2:	460b      	mov	r3, r1
 8016ba4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	32ae      	adds	r2, #174	@ 0xae
 8016bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d101      	bne.n	8016bbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8016bb8:	2303      	movs	r3, #3
 8016bba:	e01c      	b.n	8016bf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016bc2:	b2db      	uxtb	r3, r3
 8016bc4:	2b03      	cmp	r3, #3
 8016bc6:	d115      	bne.n	8016bf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	32ae      	adds	r2, #174	@ 0xae
 8016bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bd6:	6a1b      	ldr	r3, [r3, #32]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d00b      	beq.n	8016bf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	32ae      	adds	r2, #174	@ 0xae
 8016be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bea:	6a1b      	ldr	r3, [r3, #32]
 8016bec:	78fa      	ldrb	r2, [r7, #3]
 8016bee:	4611      	mov	r1, r2
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016bf4:	2300      	movs	r3, #0
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b082      	sub	sp, #8
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	460b      	mov	r3, r1
 8016c08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	32ae      	adds	r2, #174	@ 0xae
 8016c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d101      	bne.n	8016c20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016c1c:	2303      	movs	r3, #3
 8016c1e:	e01c      	b.n	8016c5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016c26:	b2db      	uxtb	r3, r3
 8016c28:	2b03      	cmp	r3, #3
 8016c2a:	d115      	bne.n	8016c58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	32ae      	adds	r2, #174	@ 0xae
 8016c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d00b      	beq.n	8016c58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	32ae      	adds	r2, #174	@ 0xae
 8016c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c50:	78fa      	ldrb	r2, [r7, #3]
 8016c52:	4611      	mov	r1, r2
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016c58:	2300      	movs	r3, #0
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016c62:	b480      	push	{r7}
 8016c64:	b083      	sub	sp, #12
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016c6a:	2300      	movs	r3, #0
}
 8016c6c:	4618      	mov	r0, r3
 8016c6e:	370c      	adds	r7, #12
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr

08016c78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8016c80:	2300      	movs	r3, #0
 8016c82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2201      	movs	r2, #1
 8016c88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d00e      	beq.n	8016cb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	6852      	ldr	r2, [r2, #4]
 8016ca2:	b2d2      	uxtb	r2, r2
 8016ca4:	4611      	mov	r1, r2
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	4798      	blx	r3
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d001      	beq.n	8016cb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8016cb0:	2303      	movs	r3, #3
 8016cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8016cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	3710      	adds	r7, #16
 8016cba:	46bd      	mov	sp, r7
 8016cbc:	bd80      	pop	{r7, pc}

08016cbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016cbe:	b480      	push	{r7}
 8016cc0:	b083      	sub	sp, #12
 8016cc2:	af00      	add	r7, sp, #0
 8016cc4:	6078      	str	r0, [r7, #4]
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016cca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	370c      	adds	r7, #12
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd6:	4770      	bx	lr

08016cd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b083      	sub	sp, #12
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
 8016ce0:	460b      	mov	r3, r1
 8016ce2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016ce4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	370c      	adds	r7, #12
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr

08016cf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b086      	sub	sp, #24
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
 8016cfa:	460b      	mov	r3, r1
 8016cfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8016d06:	2300      	movs	r3, #0
 8016d08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	885b      	ldrh	r3, [r3, #2]
 8016d0e:	b29b      	uxth	r3, r3
 8016d10:	68fa      	ldr	r2, [r7, #12]
 8016d12:	7812      	ldrb	r2, [r2, #0]
 8016d14:	4293      	cmp	r3, r2
 8016d16:	d91f      	bls.n	8016d58 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	781b      	ldrb	r3, [r3, #0]
 8016d1c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016d1e:	e013      	b.n	8016d48 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016d20:	f107 030a 	add.w	r3, r7, #10
 8016d24:	4619      	mov	r1, r3
 8016d26:	6978      	ldr	r0, [r7, #20]
 8016d28:	f000 f81b 	bl	8016d62 <USBD_GetNextDesc>
 8016d2c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	785b      	ldrb	r3, [r3, #1]
 8016d32:	2b05      	cmp	r3, #5
 8016d34:	d108      	bne.n	8016d48 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8016d36:	697b      	ldr	r3, [r7, #20]
 8016d38:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	789b      	ldrb	r3, [r3, #2]
 8016d3e:	78fa      	ldrb	r2, [r7, #3]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d008      	beq.n	8016d56 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8016d44:	2300      	movs	r3, #0
 8016d46:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	885b      	ldrh	r3, [r3, #2]
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	897b      	ldrh	r3, [r7, #10]
 8016d50:	429a      	cmp	r2, r3
 8016d52:	d8e5      	bhi.n	8016d20 <USBD_GetEpDesc+0x2e>
 8016d54:	e000      	b.n	8016d58 <USBD_GetEpDesc+0x66>
          break;
 8016d56:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8016d58:	693b      	ldr	r3, [r7, #16]
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3718      	adds	r7, #24
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8016d62:	b480      	push	{r7}
 8016d64:	b085      	sub	sp, #20
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	6078      	str	r0, [r7, #4]
 8016d6a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8016d70:	683b      	ldr	r3, [r7, #0]
 8016d72:	881b      	ldrh	r3, [r3, #0]
 8016d74:	68fa      	ldr	r2, [r7, #12]
 8016d76:	7812      	ldrb	r2, [r2, #0]
 8016d78:	4413      	add	r3, r2
 8016d7a:	b29a      	uxth	r2, r3
 8016d7c:	683b      	ldr	r3, [r7, #0]
 8016d7e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	461a      	mov	r2, r3
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	4413      	add	r3, r2
 8016d8a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8016d8c:	68fb      	ldr	r3, [r7, #12]
}
 8016d8e:	4618      	mov	r0, r3
 8016d90:	3714      	adds	r7, #20
 8016d92:	46bd      	mov	sp, r7
 8016d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d98:	4770      	bx	lr

08016d9a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016d9a:	b480      	push	{r7}
 8016d9c:	b087      	sub	sp, #28
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	781b      	ldrb	r3, [r3, #0]
 8016daa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	3301      	adds	r3, #1
 8016db0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016db8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8016dbc:	021b      	lsls	r3, r3, #8
 8016dbe:	b21a      	sxth	r2, r3
 8016dc0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016dc4:	4313      	orrs	r3, r2
 8016dc6:	b21b      	sxth	r3, r3
 8016dc8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016dca:	89fb      	ldrh	r3, [r7, #14]
}
 8016dcc:	4618      	mov	r0, r3
 8016dce:	371c      	adds	r7, #28
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd6:	4770      	bx	lr

08016dd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b084      	sub	sp, #16
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
 8016de0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016de2:	2300      	movs	r3, #0
 8016de4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016dee:	2b40      	cmp	r3, #64	@ 0x40
 8016df0:	d005      	beq.n	8016dfe <USBD_StdDevReq+0x26>
 8016df2:	2b40      	cmp	r3, #64	@ 0x40
 8016df4:	d857      	bhi.n	8016ea6 <USBD_StdDevReq+0xce>
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d00f      	beq.n	8016e1a <USBD_StdDevReq+0x42>
 8016dfa:	2b20      	cmp	r3, #32
 8016dfc:	d153      	bne.n	8016ea6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	32ae      	adds	r2, #174	@ 0xae
 8016e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e0c:	689b      	ldr	r3, [r3, #8]
 8016e0e:	6839      	ldr	r1, [r7, #0]
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	4798      	blx	r3
 8016e14:	4603      	mov	r3, r0
 8016e16:	73fb      	strb	r3, [r7, #15]
      break;
 8016e18:	e04a      	b.n	8016eb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	785b      	ldrb	r3, [r3, #1]
 8016e1e:	2b09      	cmp	r3, #9
 8016e20:	d83b      	bhi.n	8016e9a <USBD_StdDevReq+0xc2>
 8016e22:	a201      	add	r2, pc, #4	@ (adr r2, 8016e28 <USBD_StdDevReq+0x50>)
 8016e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e28:	08016e7d 	.word	0x08016e7d
 8016e2c:	08016e91 	.word	0x08016e91
 8016e30:	08016e9b 	.word	0x08016e9b
 8016e34:	08016e87 	.word	0x08016e87
 8016e38:	08016e9b 	.word	0x08016e9b
 8016e3c:	08016e5b 	.word	0x08016e5b
 8016e40:	08016e51 	.word	0x08016e51
 8016e44:	08016e9b 	.word	0x08016e9b
 8016e48:	08016e73 	.word	0x08016e73
 8016e4c:	08016e65 	.word	0x08016e65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016e50:	6839      	ldr	r1, [r7, #0]
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f000 fa3c 	bl	80172d0 <USBD_GetDescriptor>
          break;
 8016e58:	e024      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016e5a:	6839      	ldr	r1, [r7, #0]
 8016e5c:	6878      	ldr	r0, [r7, #4]
 8016e5e:	f000 fbcb 	bl	80175f8 <USBD_SetAddress>
          break;
 8016e62:	e01f      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016e64:	6839      	ldr	r1, [r7, #0]
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	f000 fc0a 	bl	8017680 <USBD_SetConfig>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	73fb      	strb	r3, [r7, #15]
          break;
 8016e70:	e018      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016e72:	6839      	ldr	r1, [r7, #0]
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f000 fcad 	bl	80177d4 <USBD_GetConfig>
          break;
 8016e7a:	e013      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016e7c:	6839      	ldr	r1, [r7, #0]
 8016e7e:	6878      	ldr	r0, [r7, #4]
 8016e80:	f000 fcde 	bl	8017840 <USBD_GetStatus>
          break;
 8016e84:	e00e      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016e86:	6839      	ldr	r1, [r7, #0]
 8016e88:	6878      	ldr	r0, [r7, #4]
 8016e8a:	f000 fd0d 	bl	80178a8 <USBD_SetFeature>
          break;
 8016e8e:	e009      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016e90:	6839      	ldr	r1, [r7, #0]
 8016e92:	6878      	ldr	r0, [r7, #4]
 8016e94:	f000 fd31 	bl	80178fa <USBD_ClrFeature>
          break;
 8016e98:	e004      	b.n	8016ea4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8016e9a:	6839      	ldr	r1, [r7, #0]
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f000 fd88 	bl	80179b2 <USBD_CtlError>
          break;
 8016ea2:	bf00      	nop
      }
      break;
 8016ea4:	e004      	b.n	8016eb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8016ea6:	6839      	ldr	r1, [r7, #0]
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f000 fd82 	bl	80179b2 <USBD_CtlError>
      break;
 8016eae:	bf00      	nop
  }

  return ret;
 8016eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	3710      	adds	r7, #16
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	bd80      	pop	{r7, pc}
 8016eba:	bf00      	nop

08016ebc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b084      	sub	sp, #16
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016ed2:	2b40      	cmp	r3, #64	@ 0x40
 8016ed4:	d005      	beq.n	8016ee2 <USBD_StdItfReq+0x26>
 8016ed6:	2b40      	cmp	r3, #64	@ 0x40
 8016ed8:	d852      	bhi.n	8016f80 <USBD_StdItfReq+0xc4>
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d001      	beq.n	8016ee2 <USBD_StdItfReq+0x26>
 8016ede:	2b20      	cmp	r3, #32
 8016ee0:	d14e      	bne.n	8016f80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	3b01      	subs	r3, #1
 8016eec:	2b02      	cmp	r3, #2
 8016eee:	d840      	bhi.n	8016f72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	889b      	ldrh	r3, [r3, #4]
 8016ef4:	b2db      	uxtb	r3, r3
 8016ef6:	2b01      	cmp	r3, #1
 8016ef8:	d836      	bhi.n	8016f68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	889b      	ldrh	r3, [r3, #4]
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	4619      	mov	r1, r3
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f7ff fedb 	bl	8016cbe <USBD_CoreFindIF>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016f0c:	7bbb      	ldrb	r3, [r7, #14]
 8016f0e:	2bff      	cmp	r3, #255	@ 0xff
 8016f10:	d01d      	beq.n	8016f4e <USBD_StdItfReq+0x92>
 8016f12:	7bbb      	ldrb	r3, [r7, #14]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d11a      	bne.n	8016f4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016f18:	7bba      	ldrb	r2, [r7, #14]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	32ae      	adds	r2, #174	@ 0xae
 8016f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f22:	689b      	ldr	r3, [r3, #8]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d00f      	beq.n	8016f48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016f28:	7bba      	ldrb	r2, [r7, #14]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016f30:	7bba      	ldrb	r2, [r7, #14]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	32ae      	adds	r2, #174	@ 0xae
 8016f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f3a:	689b      	ldr	r3, [r3, #8]
 8016f3c:	6839      	ldr	r1, [r7, #0]
 8016f3e:	6878      	ldr	r0, [r7, #4]
 8016f40:	4798      	blx	r3
 8016f42:	4603      	mov	r3, r0
 8016f44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016f46:	e004      	b.n	8016f52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016f48:	2303      	movs	r3, #3
 8016f4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016f4c:	e001      	b.n	8016f52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016f4e:	2303      	movs	r3, #3
 8016f50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016f52:	683b      	ldr	r3, [r7, #0]
 8016f54:	88db      	ldrh	r3, [r3, #6]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d110      	bne.n	8016f7c <USBD_StdItfReq+0xc0>
 8016f5a:	7bfb      	ldrb	r3, [r7, #15]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d10d      	bne.n	8016f7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 fdfd 	bl	8017b60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016f66:	e009      	b.n	8016f7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8016f68:	6839      	ldr	r1, [r7, #0]
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f000 fd21 	bl	80179b2 <USBD_CtlError>
          break;
 8016f70:	e004      	b.n	8016f7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016f72:	6839      	ldr	r1, [r7, #0]
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f000 fd1c 	bl	80179b2 <USBD_CtlError>
          break;
 8016f7a:	e000      	b.n	8016f7e <USBD_StdItfReq+0xc2>
          break;
 8016f7c:	bf00      	nop
      }
      break;
 8016f7e:	e004      	b.n	8016f8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016f80:	6839      	ldr	r1, [r7, #0]
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 fd15 	bl	80179b2 <USBD_CtlError>
      break;
 8016f88:	bf00      	nop
  }

  return ret;
 8016f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3710      	adds	r7, #16
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}

08016f94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b084      	sub	sp, #16
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	889b      	ldrh	r3, [r3, #4]
 8016fa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	781b      	ldrb	r3, [r3, #0]
 8016fac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8016fb0:	2b40      	cmp	r3, #64	@ 0x40
 8016fb2:	d007      	beq.n	8016fc4 <USBD_StdEPReq+0x30>
 8016fb4:	2b40      	cmp	r3, #64	@ 0x40
 8016fb6:	f200 817f 	bhi.w	80172b8 <USBD_StdEPReq+0x324>
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d02a      	beq.n	8017014 <USBD_StdEPReq+0x80>
 8016fbe:	2b20      	cmp	r3, #32
 8016fc0:	f040 817a 	bne.w	80172b8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016fc4:	7bbb      	ldrb	r3, [r7, #14]
 8016fc6:	4619      	mov	r1, r3
 8016fc8:	6878      	ldr	r0, [r7, #4]
 8016fca:	f7ff fe85 	bl	8016cd8 <USBD_CoreFindEP>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016fd2:	7b7b      	ldrb	r3, [r7, #13]
 8016fd4:	2bff      	cmp	r3, #255	@ 0xff
 8016fd6:	f000 8174 	beq.w	80172c2 <USBD_StdEPReq+0x32e>
 8016fda:	7b7b      	ldrb	r3, [r7, #13]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	f040 8170 	bne.w	80172c2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8016fe2:	7b7a      	ldrb	r2, [r7, #13]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016fea:	7b7a      	ldrb	r2, [r7, #13]
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	32ae      	adds	r2, #174	@ 0xae
 8016ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016ff4:	689b      	ldr	r3, [r3, #8]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	f000 8163 	beq.w	80172c2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016ffc:	7b7a      	ldrb	r2, [r7, #13]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	32ae      	adds	r2, #174	@ 0xae
 8017002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017006:	689b      	ldr	r3, [r3, #8]
 8017008:	6839      	ldr	r1, [r7, #0]
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	4798      	blx	r3
 801700e:	4603      	mov	r3, r0
 8017010:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8017012:	e156      	b.n	80172c2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	785b      	ldrb	r3, [r3, #1]
 8017018:	2b03      	cmp	r3, #3
 801701a:	d008      	beq.n	801702e <USBD_StdEPReq+0x9a>
 801701c:	2b03      	cmp	r3, #3
 801701e:	f300 8145 	bgt.w	80172ac <USBD_StdEPReq+0x318>
 8017022:	2b00      	cmp	r3, #0
 8017024:	f000 809b 	beq.w	801715e <USBD_StdEPReq+0x1ca>
 8017028:	2b01      	cmp	r3, #1
 801702a:	d03c      	beq.n	80170a6 <USBD_StdEPReq+0x112>
 801702c:	e13e      	b.n	80172ac <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b02      	cmp	r3, #2
 8017038:	d002      	beq.n	8017040 <USBD_StdEPReq+0xac>
 801703a:	2b03      	cmp	r3, #3
 801703c:	d016      	beq.n	801706c <USBD_StdEPReq+0xd8>
 801703e:	e02c      	b.n	801709a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017040:	7bbb      	ldrb	r3, [r7, #14]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d00d      	beq.n	8017062 <USBD_StdEPReq+0xce>
 8017046:	7bbb      	ldrb	r3, [r7, #14]
 8017048:	2b80      	cmp	r3, #128	@ 0x80
 801704a:	d00a      	beq.n	8017062 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801704c:	7bbb      	ldrb	r3, [r7, #14]
 801704e:	4619      	mov	r1, r3
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f001 f9e3 	bl	801841c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017056:	2180      	movs	r1, #128	@ 0x80
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f001 f9df 	bl	801841c <USBD_LL_StallEP>
 801705e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017060:	e020      	b.n	80170a4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8017062:	6839      	ldr	r1, [r7, #0]
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f000 fca4 	bl	80179b2 <USBD_CtlError>
              break;
 801706a:	e01b      	b.n	80170a4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801706c:	683b      	ldr	r3, [r7, #0]
 801706e:	885b      	ldrh	r3, [r3, #2]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d10e      	bne.n	8017092 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017074:	7bbb      	ldrb	r3, [r7, #14]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d00b      	beq.n	8017092 <USBD_StdEPReq+0xfe>
 801707a:	7bbb      	ldrb	r3, [r7, #14]
 801707c:	2b80      	cmp	r3, #128	@ 0x80
 801707e:	d008      	beq.n	8017092 <USBD_StdEPReq+0xfe>
 8017080:	683b      	ldr	r3, [r7, #0]
 8017082:	88db      	ldrh	r3, [r3, #6]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d104      	bne.n	8017092 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017088:	7bbb      	ldrb	r3, [r7, #14]
 801708a:	4619      	mov	r1, r3
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f001 f9c5 	bl	801841c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8017092:	6878      	ldr	r0, [r7, #4]
 8017094:	f000 fd64 	bl	8017b60 <USBD_CtlSendStatus>

              break;
 8017098:	e004      	b.n	80170a4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801709a:	6839      	ldr	r1, [r7, #0]
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f000 fc88 	bl	80179b2 <USBD_CtlError>
              break;
 80170a2:	bf00      	nop
          }
          break;
 80170a4:	e107      	b.n	80172b6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80170ac:	b2db      	uxtb	r3, r3
 80170ae:	2b02      	cmp	r3, #2
 80170b0:	d002      	beq.n	80170b8 <USBD_StdEPReq+0x124>
 80170b2:	2b03      	cmp	r3, #3
 80170b4:	d016      	beq.n	80170e4 <USBD_StdEPReq+0x150>
 80170b6:	e04b      	b.n	8017150 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80170b8:	7bbb      	ldrb	r3, [r7, #14]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d00d      	beq.n	80170da <USBD_StdEPReq+0x146>
 80170be:	7bbb      	ldrb	r3, [r7, #14]
 80170c0:	2b80      	cmp	r3, #128	@ 0x80
 80170c2:	d00a      	beq.n	80170da <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80170c4:	7bbb      	ldrb	r3, [r7, #14]
 80170c6:	4619      	mov	r1, r3
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f001 f9a7 	bl	801841c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80170ce:	2180      	movs	r1, #128	@ 0x80
 80170d0:	6878      	ldr	r0, [r7, #4]
 80170d2:	f001 f9a3 	bl	801841c <USBD_LL_StallEP>
 80170d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80170d8:	e040      	b.n	801715c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80170da:	6839      	ldr	r1, [r7, #0]
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f000 fc68 	bl	80179b2 <USBD_CtlError>
              break;
 80170e2:	e03b      	b.n	801715c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	885b      	ldrh	r3, [r3, #2]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d136      	bne.n	801715a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80170ec:	7bbb      	ldrb	r3, [r7, #14]
 80170ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d004      	beq.n	8017100 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80170f6:	7bbb      	ldrb	r3, [r7, #14]
 80170f8:	4619      	mov	r1, r3
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f001 f9ad 	bl	801845a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f000 fd2d 	bl	8017b60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8017106:	7bbb      	ldrb	r3, [r7, #14]
 8017108:	4619      	mov	r1, r3
 801710a:	6878      	ldr	r0, [r7, #4]
 801710c:	f7ff fde4 	bl	8016cd8 <USBD_CoreFindEP>
 8017110:	4603      	mov	r3, r0
 8017112:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8017114:	7b7b      	ldrb	r3, [r7, #13]
 8017116:	2bff      	cmp	r3, #255	@ 0xff
 8017118:	d01f      	beq.n	801715a <USBD_StdEPReq+0x1c6>
 801711a:	7b7b      	ldrb	r3, [r7, #13]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d11c      	bne.n	801715a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8017120:	7b7a      	ldrb	r2, [r7, #13]
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8017128:	7b7a      	ldrb	r2, [r7, #13]
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	32ae      	adds	r2, #174	@ 0xae
 801712e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017132:	689b      	ldr	r3, [r3, #8]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d010      	beq.n	801715a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8017138:	7b7a      	ldrb	r2, [r7, #13]
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	32ae      	adds	r2, #174	@ 0xae
 801713e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017142:	689b      	ldr	r3, [r3, #8]
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	4798      	blx	r3
 801714a:	4603      	mov	r3, r0
 801714c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801714e:	e004      	b.n	801715a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8017150:	6839      	ldr	r1, [r7, #0]
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f000 fc2d 	bl	80179b2 <USBD_CtlError>
              break;
 8017158:	e000      	b.n	801715c <USBD_StdEPReq+0x1c8>
              break;
 801715a:	bf00      	nop
          }
          break;
 801715c:	e0ab      	b.n	80172b6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017164:	b2db      	uxtb	r3, r3
 8017166:	2b02      	cmp	r3, #2
 8017168:	d002      	beq.n	8017170 <USBD_StdEPReq+0x1dc>
 801716a:	2b03      	cmp	r3, #3
 801716c:	d032      	beq.n	80171d4 <USBD_StdEPReq+0x240>
 801716e:	e097      	b.n	80172a0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017170:	7bbb      	ldrb	r3, [r7, #14]
 8017172:	2b00      	cmp	r3, #0
 8017174:	d007      	beq.n	8017186 <USBD_StdEPReq+0x1f2>
 8017176:	7bbb      	ldrb	r3, [r7, #14]
 8017178:	2b80      	cmp	r3, #128	@ 0x80
 801717a:	d004      	beq.n	8017186 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801717c:	6839      	ldr	r1, [r7, #0]
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f000 fc17 	bl	80179b2 <USBD_CtlError>
                break;
 8017184:	e091      	b.n	80172aa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017186:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801718a:	2b00      	cmp	r3, #0
 801718c:	da0b      	bge.n	80171a6 <USBD_StdEPReq+0x212>
 801718e:	7bbb      	ldrb	r3, [r7, #14]
 8017190:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017194:	4613      	mov	r3, r2
 8017196:	009b      	lsls	r3, r3, #2
 8017198:	4413      	add	r3, r2
 801719a:	009b      	lsls	r3, r3, #2
 801719c:	3310      	adds	r3, #16
 801719e:	687a      	ldr	r2, [r7, #4]
 80171a0:	4413      	add	r3, r2
 80171a2:	3304      	adds	r3, #4
 80171a4:	e00b      	b.n	80171be <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80171a6:	7bbb      	ldrb	r3, [r7, #14]
 80171a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80171ac:	4613      	mov	r3, r2
 80171ae:	009b      	lsls	r3, r3, #2
 80171b0:	4413      	add	r3, r2
 80171b2:	009b      	lsls	r3, r3, #2
 80171b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80171b8:	687a      	ldr	r2, [r7, #4]
 80171ba:	4413      	add	r3, r2
 80171bc:	3304      	adds	r3, #4
 80171be:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	2200      	movs	r2, #0
 80171c4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	2202      	movs	r2, #2
 80171ca:	4619      	mov	r1, r3
 80171cc:	6878      	ldr	r0, [r7, #4]
 80171ce:	f000 fc6d 	bl	8017aac <USBD_CtlSendData>
              break;
 80171d2:	e06a      	b.n	80172aa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80171d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	da11      	bge.n	8017200 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80171dc:	7bbb      	ldrb	r3, [r7, #14]
 80171de:	f003 020f 	and.w	r2, r3, #15
 80171e2:	6879      	ldr	r1, [r7, #4]
 80171e4:	4613      	mov	r3, r2
 80171e6:	009b      	lsls	r3, r3, #2
 80171e8:	4413      	add	r3, r2
 80171ea:	009b      	lsls	r3, r3, #2
 80171ec:	440b      	add	r3, r1
 80171ee:	3324      	adds	r3, #36	@ 0x24
 80171f0:	881b      	ldrh	r3, [r3, #0]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d117      	bne.n	8017226 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80171f6:	6839      	ldr	r1, [r7, #0]
 80171f8:	6878      	ldr	r0, [r7, #4]
 80171fa:	f000 fbda 	bl	80179b2 <USBD_CtlError>
                  break;
 80171fe:	e054      	b.n	80172aa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017200:	7bbb      	ldrb	r3, [r7, #14]
 8017202:	f003 020f 	and.w	r2, r3, #15
 8017206:	6879      	ldr	r1, [r7, #4]
 8017208:	4613      	mov	r3, r2
 801720a:	009b      	lsls	r3, r3, #2
 801720c:	4413      	add	r3, r2
 801720e:	009b      	lsls	r3, r3, #2
 8017210:	440b      	add	r3, r1
 8017212:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017216:	881b      	ldrh	r3, [r3, #0]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d104      	bne.n	8017226 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801721c:	6839      	ldr	r1, [r7, #0]
 801721e:	6878      	ldr	r0, [r7, #4]
 8017220:	f000 fbc7 	bl	80179b2 <USBD_CtlError>
                  break;
 8017224:	e041      	b.n	80172aa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017226:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801722a:	2b00      	cmp	r3, #0
 801722c:	da0b      	bge.n	8017246 <USBD_StdEPReq+0x2b2>
 801722e:	7bbb      	ldrb	r3, [r7, #14]
 8017230:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8017234:	4613      	mov	r3, r2
 8017236:	009b      	lsls	r3, r3, #2
 8017238:	4413      	add	r3, r2
 801723a:	009b      	lsls	r3, r3, #2
 801723c:	3310      	adds	r3, #16
 801723e:	687a      	ldr	r2, [r7, #4]
 8017240:	4413      	add	r3, r2
 8017242:	3304      	adds	r3, #4
 8017244:	e00b      	b.n	801725e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017246:	7bbb      	ldrb	r3, [r7, #14]
 8017248:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801724c:	4613      	mov	r3, r2
 801724e:	009b      	lsls	r3, r3, #2
 8017250:	4413      	add	r3, r2
 8017252:	009b      	lsls	r3, r3, #2
 8017254:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8017258:	687a      	ldr	r2, [r7, #4]
 801725a:	4413      	add	r3, r2
 801725c:	3304      	adds	r3, #4
 801725e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8017260:	7bbb      	ldrb	r3, [r7, #14]
 8017262:	2b00      	cmp	r3, #0
 8017264:	d002      	beq.n	801726c <USBD_StdEPReq+0x2d8>
 8017266:	7bbb      	ldrb	r3, [r7, #14]
 8017268:	2b80      	cmp	r3, #128	@ 0x80
 801726a:	d103      	bne.n	8017274 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	2200      	movs	r2, #0
 8017270:	601a      	str	r2, [r3, #0]
 8017272:	e00e      	b.n	8017292 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8017274:	7bbb      	ldrb	r3, [r7, #14]
 8017276:	4619      	mov	r1, r3
 8017278:	6878      	ldr	r0, [r7, #4]
 801727a:	f001 f90d 	bl	8018498 <USBD_LL_IsStallEP>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d003      	beq.n	801728c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	2201      	movs	r2, #1
 8017288:	601a      	str	r2, [r3, #0]
 801728a:	e002      	b.n	8017292 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	2200      	movs	r2, #0
 8017290:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	2202      	movs	r2, #2
 8017296:	4619      	mov	r1, r3
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f000 fc07 	bl	8017aac <USBD_CtlSendData>
              break;
 801729e:	e004      	b.n	80172aa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80172a0:	6839      	ldr	r1, [r7, #0]
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f000 fb85 	bl	80179b2 <USBD_CtlError>
              break;
 80172a8:	bf00      	nop
          }
          break;
 80172aa:	e004      	b.n	80172b6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80172ac:	6839      	ldr	r1, [r7, #0]
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f000 fb7f 	bl	80179b2 <USBD_CtlError>
          break;
 80172b4:	bf00      	nop
      }
      break;
 80172b6:	e005      	b.n	80172c4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80172b8:	6839      	ldr	r1, [r7, #0]
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f000 fb79 	bl	80179b2 <USBD_CtlError>
      break;
 80172c0:	e000      	b.n	80172c4 <USBD_StdEPReq+0x330>
      break;
 80172c2:	bf00      	nop
  }

  return ret;
 80172c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80172c6:	4618      	mov	r0, r3
 80172c8:	3710      	adds	r7, #16
 80172ca:	46bd      	mov	sp, r7
 80172cc:	bd80      	pop	{r7, pc}
	...

080172d0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b084      	sub	sp, #16
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
 80172d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80172da:	2300      	movs	r3, #0
 80172dc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80172de:	2300      	movs	r3, #0
 80172e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80172e2:	2300      	movs	r3, #0
 80172e4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	885b      	ldrh	r3, [r3, #2]
 80172ea:	0a1b      	lsrs	r3, r3, #8
 80172ec:	b29b      	uxth	r3, r3
 80172ee:	3b01      	subs	r3, #1
 80172f0:	2b0e      	cmp	r3, #14
 80172f2:	f200 8152 	bhi.w	801759a <USBD_GetDescriptor+0x2ca>
 80172f6:	a201      	add	r2, pc, #4	@ (adr r2, 80172fc <USBD_GetDescriptor+0x2c>)
 80172f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172fc:	0801736d 	.word	0x0801736d
 8017300:	08017385 	.word	0x08017385
 8017304:	080173c5 	.word	0x080173c5
 8017308:	0801759b 	.word	0x0801759b
 801730c:	0801759b 	.word	0x0801759b
 8017310:	0801753b 	.word	0x0801753b
 8017314:	08017567 	.word	0x08017567
 8017318:	0801759b 	.word	0x0801759b
 801731c:	0801759b 	.word	0x0801759b
 8017320:	0801759b 	.word	0x0801759b
 8017324:	0801759b 	.word	0x0801759b
 8017328:	0801759b 	.word	0x0801759b
 801732c:	0801759b 	.word	0x0801759b
 8017330:	0801759b 	.word	0x0801759b
 8017334:	08017339 	.word	0x08017339
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801733e:	69db      	ldr	r3, [r3, #28]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d00b      	beq.n	801735c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801734a:	69db      	ldr	r3, [r3, #28]
 801734c:	687a      	ldr	r2, [r7, #4]
 801734e:	7c12      	ldrb	r2, [r2, #16]
 8017350:	f107 0108 	add.w	r1, r7, #8
 8017354:	4610      	mov	r0, r2
 8017356:	4798      	blx	r3
 8017358:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801735a:	e126      	b.n	80175aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801735c:	6839      	ldr	r1, [r7, #0]
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f000 fb27 	bl	80179b2 <USBD_CtlError>
        err++;
 8017364:	7afb      	ldrb	r3, [r7, #11]
 8017366:	3301      	adds	r3, #1
 8017368:	72fb      	strb	r3, [r7, #11]
      break;
 801736a:	e11e      	b.n	80175aa <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	687a      	ldr	r2, [r7, #4]
 8017376:	7c12      	ldrb	r2, [r2, #16]
 8017378:	f107 0108 	add.w	r1, r7, #8
 801737c:	4610      	mov	r0, r2
 801737e:	4798      	blx	r3
 8017380:	60f8      	str	r0, [r7, #12]
      break;
 8017382:	e112      	b.n	80175aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	7c1b      	ldrb	r3, [r3, #16]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d10d      	bne.n	80173a8 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017394:	f107 0208 	add.w	r2, r7, #8
 8017398:	4610      	mov	r0, r2
 801739a:	4798      	blx	r3
 801739c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	3301      	adds	r3, #1
 80173a2:	2202      	movs	r2, #2
 80173a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80173a6:	e100      	b.n	80175aa <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80173ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173b0:	f107 0208 	add.w	r2, r7, #8
 80173b4:	4610      	mov	r0, r2
 80173b6:	4798      	blx	r3
 80173b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	3301      	adds	r3, #1
 80173be:	2202      	movs	r2, #2
 80173c0:	701a      	strb	r2, [r3, #0]
      break;
 80173c2:	e0f2      	b.n	80175aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	885b      	ldrh	r3, [r3, #2]
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	2b05      	cmp	r3, #5
 80173cc:	f200 80ac 	bhi.w	8017528 <USBD_GetDescriptor+0x258>
 80173d0:	a201      	add	r2, pc, #4	@ (adr r2, 80173d8 <USBD_GetDescriptor+0x108>)
 80173d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173d6:	bf00      	nop
 80173d8:	080173f1 	.word	0x080173f1
 80173dc:	08017425 	.word	0x08017425
 80173e0:	08017459 	.word	0x08017459
 80173e4:	0801748d 	.word	0x0801748d
 80173e8:	080174c1 	.word	0x080174c1
 80173ec:	080174f5 	.word	0x080174f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d00b      	beq.n	8017414 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017402:	685b      	ldr	r3, [r3, #4]
 8017404:	687a      	ldr	r2, [r7, #4]
 8017406:	7c12      	ldrb	r2, [r2, #16]
 8017408:	f107 0108 	add.w	r1, r7, #8
 801740c:	4610      	mov	r0, r2
 801740e:	4798      	blx	r3
 8017410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017412:	e091      	b.n	8017538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017414:	6839      	ldr	r1, [r7, #0]
 8017416:	6878      	ldr	r0, [r7, #4]
 8017418:	f000 facb 	bl	80179b2 <USBD_CtlError>
            err++;
 801741c:	7afb      	ldrb	r3, [r7, #11]
 801741e:	3301      	adds	r3, #1
 8017420:	72fb      	strb	r3, [r7, #11]
          break;
 8017422:	e089      	b.n	8017538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801742a:	689b      	ldr	r3, [r3, #8]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d00b      	beq.n	8017448 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017436:	689b      	ldr	r3, [r3, #8]
 8017438:	687a      	ldr	r2, [r7, #4]
 801743a:	7c12      	ldrb	r2, [r2, #16]
 801743c:	f107 0108 	add.w	r1, r7, #8
 8017440:	4610      	mov	r0, r2
 8017442:	4798      	blx	r3
 8017444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017446:	e077      	b.n	8017538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017448:	6839      	ldr	r1, [r7, #0]
 801744a:	6878      	ldr	r0, [r7, #4]
 801744c:	f000 fab1 	bl	80179b2 <USBD_CtlError>
            err++;
 8017450:	7afb      	ldrb	r3, [r7, #11]
 8017452:	3301      	adds	r3, #1
 8017454:	72fb      	strb	r3, [r7, #11]
          break;
 8017456:	e06f      	b.n	8017538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801745e:	68db      	ldr	r3, [r3, #12]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d00b      	beq.n	801747c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801746a:	68db      	ldr	r3, [r3, #12]
 801746c:	687a      	ldr	r2, [r7, #4]
 801746e:	7c12      	ldrb	r2, [r2, #16]
 8017470:	f107 0108 	add.w	r1, r7, #8
 8017474:	4610      	mov	r0, r2
 8017476:	4798      	blx	r3
 8017478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801747a:	e05d      	b.n	8017538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801747c:	6839      	ldr	r1, [r7, #0]
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f000 fa97 	bl	80179b2 <USBD_CtlError>
            err++;
 8017484:	7afb      	ldrb	r3, [r7, #11]
 8017486:	3301      	adds	r3, #1
 8017488:	72fb      	strb	r3, [r7, #11]
          break;
 801748a:	e055      	b.n	8017538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017492:	691b      	ldr	r3, [r3, #16]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d00b      	beq.n	80174b0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801749e:	691b      	ldr	r3, [r3, #16]
 80174a0:	687a      	ldr	r2, [r7, #4]
 80174a2:	7c12      	ldrb	r2, [r2, #16]
 80174a4:	f107 0108 	add.w	r1, r7, #8
 80174a8:	4610      	mov	r0, r2
 80174aa:	4798      	blx	r3
 80174ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174ae:	e043      	b.n	8017538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80174b0:	6839      	ldr	r1, [r7, #0]
 80174b2:	6878      	ldr	r0, [r7, #4]
 80174b4:	f000 fa7d 	bl	80179b2 <USBD_CtlError>
            err++;
 80174b8:	7afb      	ldrb	r3, [r7, #11]
 80174ba:	3301      	adds	r3, #1
 80174bc:	72fb      	strb	r3, [r7, #11]
          break;
 80174be:	e03b      	b.n	8017538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80174c6:	695b      	ldr	r3, [r3, #20]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d00b      	beq.n	80174e4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80174d2:	695b      	ldr	r3, [r3, #20]
 80174d4:	687a      	ldr	r2, [r7, #4]
 80174d6:	7c12      	ldrb	r2, [r2, #16]
 80174d8:	f107 0108 	add.w	r1, r7, #8
 80174dc:	4610      	mov	r0, r2
 80174de:	4798      	blx	r3
 80174e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174e2:	e029      	b.n	8017538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80174e4:	6839      	ldr	r1, [r7, #0]
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f000 fa63 	bl	80179b2 <USBD_CtlError>
            err++;
 80174ec:	7afb      	ldrb	r3, [r7, #11]
 80174ee:	3301      	adds	r3, #1
 80174f0:	72fb      	strb	r3, [r7, #11]
          break;
 80174f2:	e021      	b.n	8017538 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80174fa:	699b      	ldr	r3, [r3, #24]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d00b      	beq.n	8017518 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8017506:	699b      	ldr	r3, [r3, #24]
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	7c12      	ldrb	r2, [r2, #16]
 801750c:	f107 0108 	add.w	r1, r7, #8
 8017510:	4610      	mov	r0, r2
 8017512:	4798      	blx	r3
 8017514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017516:	e00f      	b.n	8017538 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017518:	6839      	ldr	r1, [r7, #0]
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	f000 fa49 	bl	80179b2 <USBD_CtlError>
            err++;
 8017520:	7afb      	ldrb	r3, [r7, #11]
 8017522:	3301      	adds	r3, #1
 8017524:	72fb      	strb	r3, [r7, #11]
          break;
 8017526:	e007      	b.n	8017538 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017528:	6839      	ldr	r1, [r7, #0]
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f000 fa41 	bl	80179b2 <USBD_CtlError>
          err++;
 8017530:	7afb      	ldrb	r3, [r7, #11]
 8017532:	3301      	adds	r3, #1
 8017534:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8017536:	bf00      	nop
      }
      break;
 8017538:	e037      	b.n	80175aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	7c1b      	ldrb	r3, [r3, #16]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d109      	bne.n	8017556 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801754a:	f107 0208 	add.w	r2, r7, #8
 801754e:	4610      	mov	r0, r2
 8017550:	4798      	blx	r3
 8017552:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017554:	e029      	b.n	80175aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017556:	6839      	ldr	r1, [r7, #0]
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f000 fa2a 	bl	80179b2 <USBD_CtlError>
        err++;
 801755e:	7afb      	ldrb	r3, [r7, #11]
 8017560:	3301      	adds	r3, #1
 8017562:	72fb      	strb	r3, [r7, #11]
      break;
 8017564:	e021      	b.n	80175aa <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	7c1b      	ldrb	r3, [r3, #16]
 801756a:	2b00      	cmp	r3, #0
 801756c:	d10d      	bne.n	801758a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8017574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017576:	f107 0208 	add.w	r2, r7, #8
 801757a:	4610      	mov	r0, r2
 801757c:	4798      	blx	r3
 801757e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	3301      	adds	r3, #1
 8017584:	2207      	movs	r2, #7
 8017586:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017588:	e00f      	b.n	80175aa <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801758a:	6839      	ldr	r1, [r7, #0]
 801758c:	6878      	ldr	r0, [r7, #4]
 801758e:	f000 fa10 	bl	80179b2 <USBD_CtlError>
        err++;
 8017592:	7afb      	ldrb	r3, [r7, #11]
 8017594:	3301      	adds	r3, #1
 8017596:	72fb      	strb	r3, [r7, #11]
      break;
 8017598:	e007      	b.n	80175aa <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801759a:	6839      	ldr	r1, [r7, #0]
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f000 fa08 	bl	80179b2 <USBD_CtlError>
      err++;
 80175a2:	7afb      	ldrb	r3, [r7, #11]
 80175a4:	3301      	adds	r3, #1
 80175a6:	72fb      	strb	r3, [r7, #11]
      break;
 80175a8:	bf00      	nop
  }

  if (err != 0U)
 80175aa:	7afb      	ldrb	r3, [r7, #11]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d11e      	bne.n	80175ee <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	88db      	ldrh	r3, [r3, #6]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d016      	beq.n	80175e6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80175b8:	893b      	ldrh	r3, [r7, #8]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d00e      	beq.n	80175dc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	88da      	ldrh	r2, [r3, #6]
 80175c2:	893b      	ldrh	r3, [r7, #8]
 80175c4:	4293      	cmp	r3, r2
 80175c6:	bf28      	it	cs
 80175c8:	4613      	movcs	r3, r2
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80175ce:	893b      	ldrh	r3, [r7, #8]
 80175d0:	461a      	mov	r2, r3
 80175d2:	68f9      	ldr	r1, [r7, #12]
 80175d4:	6878      	ldr	r0, [r7, #4]
 80175d6:	f000 fa69 	bl	8017aac <USBD_CtlSendData>
 80175da:	e009      	b.n	80175f0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80175dc:	6839      	ldr	r1, [r7, #0]
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f000 f9e7 	bl	80179b2 <USBD_CtlError>
 80175e4:	e004      	b.n	80175f0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 faba 	bl	8017b60 <USBD_CtlSendStatus>
 80175ec:	e000      	b.n	80175f0 <USBD_GetDescriptor+0x320>
    return;
 80175ee:	bf00      	nop
  }
}
 80175f0:	3710      	adds	r7, #16
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd80      	pop	{r7, pc}
 80175f6:	bf00      	nop

080175f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b084      	sub	sp, #16
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	889b      	ldrh	r3, [r3, #4]
 8017606:	2b00      	cmp	r3, #0
 8017608:	d131      	bne.n	801766e <USBD_SetAddress+0x76>
 801760a:	683b      	ldr	r3, [r7, #0]
 801760c:	88db      	ldrh	r3, [r3, #6]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d12d      	bne.n	801766e <USBD_SetAddress+0x76>
 8017612:	683b      	ldr	r3, [r7, #0]
 8017614:	885b      	ldrh	r3, [r3, #2]
 8017616:	2b7f      	cmp	r3, #127	@ 0x7f
 8017618:	d829      	bhi.n	801766e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801761a:	683b      	ldr	r3, [r7, #0]
 801761c:	885b      	ldrh	r3, [r3, #2]
 801761e:	b2db      	uxtb	r3, r3
 8017620:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017624:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801762c:	b2db      	uxtb	r3, r3
 801762e:	2b03      	cmp	r3, #3
 8017630:	d104      	bne.n	801763c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017632:	6839      	ldr	r1, [r7, #0]
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 f9bc 	bl	80179b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801763a:	e01d      	b.n	8017678 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	7bfa      	ldrb	r2, [r7, #15]
 8017640:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017644:	7bfb      	ldrb	r3, [r7, #15]
 8017646:	4619      	mov	r1, r3
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f000 ff51 	bl	80184f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f000 fa86 	bl	8017b60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017654:	7bfb      	ldrb	r3, [r7, #15]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d004      	beq.n	8017664 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	2202      	movs	r2, #2
 801765e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017662:	e009      	b.n	8017678 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2201      	movs	r2, #1
 8017668:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801766c:	e004      	b.n	8017678 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801766e:	6839      	ldr	r1, [r7, #0]
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f000 f99e 	bl	80179b2 <USBD_CtlError>
  }
}
 8017676:	bf00      	nop
 8017678:	bf00      	nop
 801767a:	3710      	adds	r7, #16
 801767c:	46bd      	mov	sp, r7
 801767e:	bd80      	pop	{r7, pc}

08017680 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b084      	sub	sp, #16
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801768a:	2300      	movs	r3, #0
 801768c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	885b      	ldrh	r3, [r3, #2]
 8017692:	b2da      	uxtb	r2, r3
 8017694:	4b4e      	ldr	r3, [pc, #312]	@ (80177d0 <USBD_SetConfig+0x150>)
 8017696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017698:	4b4d      	ldr	r3, [pc, #308]	@ (80177d0 <USBD_SetConfig+0x150>)
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	2b01      	cmp	r3, #1
 801769e:	d905      	bls.n	80176ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80176a0:	6839      	ldr	r1, [r7, #0]
 80176a2:	6878      	ldr	r0, [r7, #4]
 80176a4:	f000 f985 	bl	80179b2 <USBD_CtlError>
    return USBD_FAIL;
 80176a8:	2303      	movs	r3, #3
 80176aa:	e08c      	b.n	80177c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80176b2:	b2db      	uxtb	r3, r3
 80176b4:	2b02      	cmp	r3, #2
 80176b6:	d002      	beq.n	80176be <USBD_SetConfig+0x3e>
 80176b8:	2b03      	cmp	r3, #3
 80176ba:	d029      	beq.n	8017710 <USBD_SetConfig+0x90>
 80176bc:	e075      	b.n	80177aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80176be:	4b44      	ldr	r3, [pc, #272]	@ (80177d0 <USBD_SetConfig+0x150>)
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d020      	beq.n	8017708 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80176c6:	4b42      	ldr	r3, [pc, #264]	@ (80177d0 <USBD_SetConfig+0x150>)
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	461a      	mov	r2, r3
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80176d0:	4b3f      	ldr	r3, [pc, #252]	@ (80177d0 <USBD_SetConfig+0x150>)
 80176d2:	781b      	ldrb	r3, [r3, #0]
 80176d4:	4619      	mov	r1, r3
 80176d6:	6878      	ldr	r0, [r7, #4]
 80176d8:	f7fe ffb9 	bl	801664e <USBD_SetClassConfig>
 80176dc:	4603      	mov	r3, r0
 80176de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80176e0:	7bfb      	ldrb	r3, [r7, #15]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d008      	beq.n	80176f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80176e6:	6839      	ldr	r1, [r7, #0]
 80176e8:	6878      	ldr	r0, [r7, #4]
 80176ea:	f000 f962 	bl	80179b2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	2202      	movs	r2, #2
 80176f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80176f6:	e065      	b.n	80177c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	f000 fa31 	bl	8017b60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	2203      	movs	r2, #3
 8017702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017706:	e05d      	b.n	80177c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 fa29 	bl	8017b60 <USBD_CtlSendStatus>
      break;
 801770e:	e059      	b.n	80177c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017710:	4b2f      	ldr	r3, [pc, #188]	@ (80177d0 <USBD_SetConfig+0x150>)
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d112      	bne.n	801773e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	2202      	movs	r2, #2
 801771c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8017720:	4b2b      	ldr	r3, [pc, #172]	@ (80177d0 <USBD_SetConfig+0x150>)
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	461a      	mov	r2, r3
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801772a:	4b29      	ldr	r3, [pc, #164]	@ (80177d0 <USBD_SetConfig+0x150>)
 801772c:	781b      	ldrb	r3, [r3, #0]
 801772e:	4619      	mov	r1, r3
 8017730:	6878      	ldr	r0, [r7, #4]
 8017732:	f7fe ffa8 	bl	8016686 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f000 fa12 	bl	8017b60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801773c:	e042      	b.n	80177c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801773e:	4b24      	ldr	r3, [pc, #144]	@ (80177d0 <USBD_SetConfig+0x150>)
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	461a      	mov	r2, r3
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	685b      	ldr	r3, [r3, #4]
 8017748:	429a      	cmp	r2, r3
 801774a:	d02a      	beq.n	80177a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	685b      	ldr	r3, [r3, #4]
 8017750:	b2db      	uxtb	r3, r3
 8017752:	4619      	mov	r1, r3
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f7fe ff96 	bl	8016686 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801775a:	4b1d      	ldr	r3, [pc, #116]	@ (80177d0 <USBD_SetConfig+0x150>)
 801775c:	781b      	ldrb	r3, [r3, #0]
 801775e:	461a      	mov	r2, r3
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017764:	4b1a      	ldr	r3, [pc, #104]	@ (80177d0 <USBD_SetConfig+0x150>)
 8017766:	781b      	ldrb	r3, [r3, #0]
 8017768:	4619      	mov	r1, r3
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f7fe ff6f 	bl	801664e <USBD_SetClassConfig>
 8017770:	4603      	mov	r3, r0
 8017772:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017774:	7bfb      	ldrb	r3, [r7, #15]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00f      	beq.n	801779a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801777a:	6839      	ldr	r1, [r7, #0]
 801777c:	6878      	ldr	r0, [r7, #4]
 801777e:	f000 f918 	bl	80179b2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	b2db      	uxtb	r3, r3
 8017788:	4619      	mov	r1, r3
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f7fe ff7b 	bl	8016686 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2202      	movs	r2, #2
 8017794:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8017798:	e014      	b.n	80177c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f000 f9e0 	bl	8017b60 <USBD_CtlSendStatus>
      break;
 80177a0:	e010      	b.n	80177c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f000 f9dc 	bl	8017b60 <USBD_CtlSendStatus>
      break;
 80177a8:	e00c      	b.n	80177c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80177aa:	6839      	ldr	r1, [r7, #0]
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	f000 f900 	bl	80179b2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80177b2:	4b07      	ldr	r3, [pc, #28]	@ (80177d0 <USBD_SetConfig+0x150>)
 80177b4:	781b      	ldrb	r3, [r3, #0]
 80177b6:	4619      	mov	r1, r3
 80177b8:	6878      	ldr	r0, [r7, #4]
 80177ba:	f7fe ff64 	bl	8016686 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80177be:	2303      	movs	r3, #3
 80177c0:	73fb      	strb	r3, [r7, #15]
      break;
 80177c2:	bf00      	nop
  }

  return ret;
 80177c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80177c6:	4618      	mov	r0, r3
 80177c8:	3710      	adds	r7, #16
 80177ca:	46bd      	mov	sp, r7
 80177cc:	bd80      	pop	{r7, pc}
 80177ce:	bf00      	nop
 80177d0:	24029360 	.word	0x24029360

080177d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	88db      	ldrh	r3, [r3, #6]
 80177e2:	2b01      	cmp	r3, #1
 80177e4:	d004      	beq.n	80177f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80177e6:	6839      	ldr	r1, [r7, #0]
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f000 f8e2 	bl	80179b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80177ee:	e023      	b.n	8017838 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	2b02      	cmp	r3, #2
 80177fa:	dc02      	bgt.n	8017802 <USBD_GetConfig+0x2e>
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	dc03      	bgt.n	8017808 <USBD_GetConfig+0x34>
 8017800:	e015      	b.n	801782e <USBD_GetConfig+0x5a>
 8017802:	2b03      	cmp	r3, #3
 8017804:	d00b      	beq.n	801781e <USBD_GetConfig+0x4a>
 8017806:	e012      	b.n	801782e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2200      	movs	r2, #0
 801780c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	3308      	adds	r3, #8
 8017812:	2201      	movs	r2, #1
 8017814:	4619      	mov	r1, r3
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f000 f948 	bl	8017aac <USBD_CtlSendData>
        break;
 801781c:	e00c      	b.n	8017838 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	3304      	adds	r3, #4
 8017822:	2201      	movs	r2, #1
 8017824:	4619      	mov	r1, r3
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f000 f940 	bl	8017aac <USBD_CtlSendData>
        break;
 801782c:	e004      	b.n	8017838 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801782e:	6839      	ldr	r1, [r7, #0]
 8017830:	6878      	ldr	r0, [r7, #4]
 8017832:	f000 f8be 	bl	80179b2 <USBD_CtlError>
        break;
 8017836:	bf00      	nop
}
 8017838:	bf00      	nop
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8017850:	b2db      	uxtb	r3, r3
 8017852:	3b01      	subs	r3, #1
 8017854:	2b02      	cmp	r3, #2
 8017856:	d81e      	bhi.n	8017896 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017858:	683b      	ldr	r3, [r7, #0]
 801785a:	88db      	ldrh	r3, [r3, #6]
 801785c:	2b02      	cmp	r3, #2
 801785e:	d004      	beq.n	801786a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017860:	6839      	ldr	r1, [r7, #0]
 8017862:	6878      	ldr	r0, [r7, #4]
 8017864:	f000 f8a5 	bl	80179b2 <USBD_CtlError>
        break;
 8017868:	e01a      	b.n	80178a0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	2201      	movs	r2, #1
 801786e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8017876:	2b00      	cmp	r3, #0
 8017878:	d005      	beq.n	8017886 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	68db      	ldr	r3, [r3, #12]
 801787e:	f043 0202 	orr.w	r2, r3, #2
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	330c      	adds	r3, #12
 801788a:	2202      	movs	r2, #2
 801788c:	4619      	mov	r1, r3
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f000 f90c 	bl	8017aac <USBD_CtlSendData>
      break;
 8017894:	e004      	b.n	80178a0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017896:	6839      	ldr	r1, [r7, #0]
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f000 f88a 	bl	80179b2 <USBD_CtlError>
      break;
 801789e:	bf00      	nop
  }
}
 80178a0:	bf00      	nop
 80178a2:	3708      	adds	r7, #8
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd80      	pop	{r7, pc}

080178a8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b082      	sub	sp, #8
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80178b2:	683b      	ldr	r3, [r7, #0]
 80178b4:	885b      	ldrh	r3, [r3, #2]
 80178b6:	2b01      	cmp	r3, #1
 80178b8:	d107      	bne.n	80178ca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	2201      	movs	r2, #1
 80178be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80178c2:	6878      	ldr	r0, [r7, #4]
 80178c4:	f000 f94c 	bl	8017b60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80178c8:	e013      	b.n	80178f2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80178ca:	683b      	ldr	r3, [r7, #0]
 80178cc:	885b      	ldrh	r3, [r3, #2]
 80178ce:	2b02      	cmp	r3, #2
 80178d0:	d10b      	bne.n	80178ea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80178d2:	683b      	ldr	r3, [r7, #0]
 80178d4:	889b      	ldrh	r3, [r3, #4]
 80178d6:	0a1b      	lsrs	r3, r3, #8
 80178d8:	b29b      	uxth	r3, r3
 80178da:	b2da      	uxtb	r2, r3
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80178e2:	6878      	ldr	r0, [r7, #4]
 80178e4:	f000 f93c 	bl	8017b60 <USBD_CtlSendStatus>
}
 80178e8:	e003      	b.n	80178f2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80178ea:	6839      	ldr	r1, [r7, #0]
 80178ec:	6878      	ldr	r0, [r7, #4]
 80178ee:	f000 f860 	bl	80179b2 <USBD_CtlError>
}
 80178f2:	bf00      	nop
 80178f4:	3708      	adds	r7, #8
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}

080178fa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80178fa:	b580      	push	{r7, lr}
 80178fc:	b082      	sub	sp, #8
 80178fe:	af00      	add	r7, sp, #0
 8017900:	6078      	str	r0, [r7, #4]
 8017902:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801790a:	b2db      	uxtb	r3, r3
 801790c:	3b01      	subs	r3, #1
 801790e:	2b02      	cmp	r3, #2
 8017910:	d80b      	bhi.n	801792a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	885b      	ldrh	r3, [r3, #2]
 8017916:	2b01      	cmp	r3, #1
 8017918:	d10c      	bne.n	8017934 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	2200      	movs	r2, #0
 801791e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f000 f91c 	bl	8017b60 <USBD_CtlSendStatus>
      }
      break;
 8017928:	e004      	b.n	8017934 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801792a:	6839      	ldr	r1, [r7, #0]
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	f000 f840 	bl	80179b2 <USBD_CtlError>
      break;
 8017932:	e000      	b.n	8017936 <USBD_ClrFeature+0x3c>
      break;
 8017934:	bf00      	nop
  }
}
 8017936:	bf00      	nop
 8017938:	3708      	adds	r7, #8
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}

0801793e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801793e:	b580      	push	{r7, lr}
 8017940:	b084      	sub	sp, #16
 8017942:	af00      	add	r7, sp, #0
 8017944:	6078      	str	r0, [r7, #4]
 8017946:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017948:	683b      	ldr	r3, [r7, #0]
 801794a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	781a      	ldrb	r2, [r3, #0]
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	3301      	adds	r3, #1
 8017958:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	781a      	ldrb	r2, [r3, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	3301      	adds	r3, #1
 8017966:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017968:	68f8      	ldr	r0, [r7, #12]
 801796a:	f7ff fa16 	bl	8016d9a <SWAPBYTE>
 801796e:	4603      	mov	r3, r0
 8017970:	461a      	mov	r2, r3
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	3301      	adds	r3, #1
 801797a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	3301      	adds	r3, #1
 8017980:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017982:	68f8      	ldr	r0, [r7, #12]
 8017984:	f7ff fa09 	bl	8016d9a <SWAPBYTE>
 8017988:	4603      	mov	r3, r0
 801798a:	461a      	mov	r2, r3
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	3301      	adds	r3, #1
 8017994:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	3301      	adds	r3, #1
 801799a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801799c:	68f8      	ldr	r0, [r7, #12]
 801799e:	f7ff f9fc 	bl	8016d9a <SWAPBYTE>
 80179a2:	4603      	mov	r3, r0
 80179a4:	461a      	mov	r2, r3
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	80da      	strh	r2, [r3, #6]
}
 80179aa:	bf00      	nop
 80179ac:	3710      	adds	r7, #16
 80179ae:	46bd      	mov	sp, r7
 80179b0:	bd80      	pop	{r7, pc}

080179b2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179b2:	b580      	push	{r7, lr}
 80179b4:	b082      	sub	sp, #8
 80179b6:	af00      	add	r7, sp, #0
 80179b8:	6078      	str	r0, [r7, #4]
 80179ba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80179bc:	2180      	movs	r1, #128	@ 0x80
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f000 fd2c 	bl	801841c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80179c4:	2100      	movs	r1, #0
 80179c6:	6878      	ldr	r0, [r7, #4]
 80179c8:	f000 fd28 	bl	801841c <USBD_LL_StallEP>
}
 80179cc:	bf00      	nop
 80179ce:	3708      	adds	r7, #8
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}

080179d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b086      	sub	sp, #24
 80179d8:	af00      	add	r7, sp, #0
 80179da:	60f8      	str	r0, [r7, #12]
 80179dc:	60b9      	str	r1, [r7, #8]
 80179de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80179e0:	2300      	movs	r3, #0
 80179e2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d042      	beq.n	8017a70 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80179ea:	68fb      	ldr	r3, [r7, #12]
 80179ec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80179ee:	6938      	ldr	r0, [r7, #16]
 80179f0:	f000 f842 	bl	8017a78 <USBD_GetLen>
 80179f4:	4603      	mov	r3, r0
 80179f6:	3301      	adds	r3, #1
 80179f8:	005b      	lsls	r3, r3, #1
 80179fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80179fe:	d808      	bhi.n	8017a12 <USBD_GetString+0x3e>
 8017a00:	6938      	ldr	r0, [r7, #16]
 8017a02:	f000 f839 	bl	8017a78 <USBD_GetLen>
 8017a06:	4603      	mov	r3, r0
 8017a08:	3301      	adds	r3, #1
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	005b      	lsls	r3, r3, #1
 8017a0e:	b29a      	uxth	r2, r3
 8017a10:	e001      	b.n	8017a16 <USBD_GetString+0x42>
 8017a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017a1a:	7dfb      	ldrb	r3, [r7, #23]
 8017a1c:	68ba      	ldr	r2, [r7, #8]
 8017a1e:	4413      	add	r3, r2
 8017a20:	687a      	ldr	r2, [r7, #4]
 8017a22:	7812      	ldrb	r2, [r2, #0]
 8017a24:	701a      	strb	r2, [r3, #0]
  idx++;
 8017a26:	7dfb      	ldrb	r3, [r7, #23]
 8017a28:	3301      	adds	r3, #1
 8017a2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017a2c:	7dfb      	ldrb	r3, [r7, #23]
 8017a2e:	68ba      	ldr	r2, [r7, #8]
 8017a30:	4413      	add	r3, r2
 8017a32:	2203      	movs	r2, #3
 8017a34:	701a      	strb	r2, [r3, #0]
  idx++;
 8017a36:	7dfb      	ldrb	r3, [r7, #23]
 8017a38:	3301      	adds	r3, #1
 8017a3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017a3c:	e013      	b.n	8017a66 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8017a3e:	7dfb      	ldrb	r3, [r7, #23]
 8017a40:	68ba      	ldr	r2, [r7, #8]
 8017a42:	4413      	add	r3, r2
 8017a44:	693a      	ldr	r2, [r7, #16]
 8017a46:	7812      	ldrb	r2, [r2, #0]
 8017a48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	3301      	adds	r3, #1
 8017a4e:	613b      	str	r3, [r7, #16]
    idx++;
 8017a50:	7dfb      	ldrb	r3, [r7, #23]
 8017a52:	3301      	adds	r3, #1
 8017a54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017a56:	7dfb      	ldrb	r3, [r7, #23]
 8017a58:	68ba      	ldr	r2, [r7, #8]
 8017a5a:	4413      	add	r3, r2
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	701a      	strb	r2, [r3, #0]
    idx++;
 8017a60:	7dfb      	ldrb	r3, [r7, #23]
 8017a62:	3301      	adds	r3, #1
 8017a64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017a66:	693b      	ldr	r3, [r7, #16]
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d1e7      	bne.n	8017a3e <USBD_GetString+0x6a>
 8017a6e:	e000      	b.n	8017a72 <USBD_GetString+0x9e>
    return;
 8017a70:	bf00      	nop
  }
}
 8017a72:	3718      	adds	r7, #24
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}

08017a78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017a78:	b480      	push	{r7}
 8017a7a:	b085      	sub	sp, #20
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017a80:	2300      	movs	r3, #0
 8017a82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017a88:	e005      	b.n	8017a96 <USBD_GetLen+0x1e>
  {
    len++;
 8017a8a:	7bfb      	ldrb	r3, [r7, #15]
 8017a8c:	3301      	adds	r3, #1
 8017a8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	3301      	adds	r3, #1
 8017a94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d1f5      	bne.n	8017a8a <USBD_GetLen+0x12>
  }

  return len;
 8017a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	3714      	adds	r7, #20
 8017aa4:	46bd      	mov	sp, r7
 8017aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aaa:	4770      	bx	lr

08017aac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	2202      	movs	r2, #2
 8017abc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	687a      	ldr	r2, [r7, #4]
 8017ac4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	687a      	ldr	r2, [r7, #4]
 8017aca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	68ba      	ldr	r2, [r7, #8]
 8017ad0:	2100      	movs	r1, #0
 8017ad2:	68f8      	ldr	r0, [r7, #12]
 8017ad4:	f000 fd2b 	bl	801852e <USBD_LL_Transmit>

  return USBD_OK;
 8017ad8:	2300      	movs	r3, #0
}
 8017ada:	4618      	mov	r0, r3
 8017adc:	3710      	adds	r7, #16
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}

08017ae2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017ae2:	b580      	push	{r7, lr}
 8017ae4:	b084      	sub	sp, #16
 8017ae6:	af00      	add	r7, sp, #0
 8017ae8:	60f8      	str	r0, [r7, #12]
 8017aea:	60b9      	str	r1, [r7, #8]
 8017aec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	68ba      	ldr	r2, [r7, #8]
 8017af2:	2100      	movs	r1, #0
 8017af4:	68f8      	ldr	r0, [r7, #12]
 8017af6:	f000 fd1a 	bl	801852e <USBD_LL_Transmit>

  return USBD_OK;
 8017afa:	2300      	movs	r3, #0
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3710      	adds	r7, #16
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b084      	sub	sp, #16
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	60f8      	str	r0, [r7, #12]
 8017b0c:	60b9      	str	r1, [r7, #8]
 8017b0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	2203      	movs	r2, #3
 8017b14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	687a      	ldr	r2, [r7, #4]
 8017b1c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	687a      	ldr	r2, [r7, #4]
 8017b24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	68ba      	ldr	r2, [r7, #8]
 8017b2c:	2100      	movs	r1, #0
 8017b2e:	68f8      	ldr	r0, [r7, #12]
 8017b30:	f000 fd1e 	bl	8018570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017b34:	2300      	movs	r3, #0
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3710      	adds	r7, #16
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}

08017b3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017b3e:	b580      	push	{r7, lr}
 8017b40:	b084      	sub	sp, #16
 8017b42:	af00      	add	r7, sp, #0
 8017b44:	60f8      	str	r0, [r7, #12]
 8017b46:	60b9      	str	r1, [r7, #8]
 8017b48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	68ba      	ldr	r2, [r7, #8]
 8017b4e:	2100      	movs	r1, #0
 8017b50:	68f8      	ldr	r0, [r7, #12]
 8017b52:	f000 fd0d 	bl	8018570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017b56:	2300      	movs	r3, #0
}
 8017b58:	4618      	mov	r0, r3
 8017b5a:	3710      	adds	r7, #16
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}

08017b60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017b60:	b580      	push	{r7, lr}
 8017b62:	b082      	sub	sp, #8
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2204      	movs	r2, #4
 8017b6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017b70:	2300      	movs	r3, #0
 8017b72:	2200      	movs	r2, #0
 8017b74:	2100      	movs	r1, #0
 8017b76:	6878      	ldr	r0, [r7, #4]
 8017b78:	f000 fcd9 	bl	801852e <USBD_LL_Transmit>

  return USBD_OK;
 8017b7c:	2300      	movs	r3, #0
}
 8017b7e:	4618      	mov	r0, r3
 8017b80:	3708      	adds	r7, #8
 8017b82:	46bd      	mov	sp, r7
 8017b84:	bd80      	pop	{r7, pc}

08017b86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017b86:	b580      	push	{r7, lr}
 8017b88:	b082      	sub	sp, #8
 8017b8a:	af00      	add	r7, sp, #0
 8017b8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	2205      	movs	r2, #5
 8017b92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017b96:	2300      	movs	r3, #0
 8017b98:	2200      	movs	r2, #0
 8017b9a:	2100      	movs	r1, #0
 8017b9c:	6878      	ldr	r0, [r7, #4]
 8017b9e:	f000 fce7 	bl	8018570 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017ba2:	2300      	movs	r3, #0
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3708      	adds	r7, #8
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}

08017bac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	4918      	ldr	r1, [pc, #96]	@ (8017c14 <MX_USB_DEVICE_Init+0x68>)
 8017bb4:	4818      	ldr	r0, [pc, #96]	@ (8017c18 <MX_USB_DEVICE_Init+0x6c>)
 8017bb6:	f7fe fccd 	bl	8016554 <USBD_Init>
 8017bba:	4603      	mov	r3, r0
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d001      	beq.n	8017bc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017bc0:	f7e9 ff86 	bl	8001ad0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017bc4:	4915      	ldr	r1, [pc, #84]	@ (8017c1c <MX_USB_DEVICE_Init+0x70>)
 8017bc6:	4814      	ldr	r0, [pc, #80]	@ (8017c18 <MX_USB_DEVICE_Init+0x6c>)
 8017bc8:	f7fe fcf4 	bl	80165b4 <USBD_RegisterClass>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d001      	beq.n	8017bd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017bd2:	f7e9 ff7d 	bl	8001ad0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017bd6:	4912      	ldr	r1, [pc, #72]	@ (8017c20 <MX_USB_DEVICE_Init+0x74>)
 8017bd8:	480f      	ldr	r0, [pc, #60]	@ (8017c18 <MX_USB_DEVICE_Init+0x6c>)
 8017bda:	f7fe fbeb 	bl	80163b4 <USBD_CDC_RegisterInterface>
 8017bde:	4603      	mov	r3, r0
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d001      	beq.n	8017be8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017be4:	f7e9 ff74 	bl	8001ad0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017be8:	480b      	ldr	r0, [pc, #44]	@ (8017c18 <MX_USB_DEVICE_Init+0x6c>)
 8017bea:	f7fe fd19 	bl	8016620 <USBD_Start>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d001      	beq.n	8017bf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017bf4:	f7e9 ff6c 	bl	8001ad0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8017bf8:	f7f5 fe98 	bl	800d92c <HAL_PWREx_EnableUSBVoltageDetector>

  hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassDataCmsit[hUsbDeviceFS.classId];
 8017bfc:	4b06      	ldr	r3, [pc, #24]	@ (8017c18 <MX_USB_DEVICE_Init+0x6c>)
 8017bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8017c02:	4a05      	ldr	r2, [pc, #20]	@ (8017c18 <MX_USB_DEVICE_Init+0x6c>)
 8017c04:	33b0      	adds	r3, #176	@ 0xb0
 8017c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c0a:	4a06      	ldr	r2, [pc, #24]	@ (8017c24 <MX_USB_DEVICE_Init+0x78>)
 8017c0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017c0e:	bf00      	nop
 8017c10:	bd80      	pop	{r7, pc}
 8017c12:	bf00      	nop
 8017c14:	240002dc 	.word	0x240002dc
 8017c18:	24029364 	.word	0x24029364
 8017c1c:	24000248 	.word	0x24000248
 8017c20:	240002c8 	.word	0x240002c8
 8017c24:	24029640 	.word	0x24029640

08017c28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	4905      	ldr	r1, [pc, #20]	@ (8017c44 <CDC_Init_FS+0x1c>)
 8017c30:	4805      	ldr	r0, [pc, #20]	@ (8017c48 <CDC_Init_FS+0x20>)
 8017c32:	f7fe fbd9 	bl	80163e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017c36:	4905      	ldr	r1, [pc, #20]	@ (8017c4c <CDC_Init_FS+0x24>)
 8017c38:	4803      	ldr	r0, [pc, #12]	@ (8017c48 <CDC_Init_FS+0x20>)
 8017c3a:	f7fe fbf7 	bl	801642c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017c3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	bd80      	pop	{r7, pc}
 8017c44:	24029e44 	.word	0x24029e44
 8017c48:	24029364 	.word	0x24029364
 8017c4c:	24029644 	.word	0x24029644

08017c50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017c50:	b480      	push	{r7}
 8017c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017c54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	46bd      	mov	sp, r7
 8017c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c5e:	4770      	bx	lr

08017c60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017c60:	b480      	push	{r7}
 8017c62:	b083      	sub	sp, #12
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	4603      	mov	r3, r0
 8017c68:	6039      	str	r1, [r7, #0]
 8017c6a:	71fb      	strb	r3, [r7, #7]
 8017c6c:	4613      	mov	r3, r2
 8017c6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017c70:	79fb      	ldrb	r3, [r7, #7]
 8017c72:	2b23      	cmp	r3, #35	@ 0x23
 8017c74:	d84a      	bhi.n	8017d0c <CDC_Control_FS+0xac>
 8017c76:	a201      	add	r2, pc, #4	@ (adr r2, 8017c7c <CDC_Control_FS+0x1c>)
 8017c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c7c:	08017d0d 	.word	0x08017d0d
 8017c80:	08017d0d 	.word	0x08017d0d
 8017c84:	08017d0d 	.word	0x08017d0d
 8017c88:	08017d0d 	.word	0x08017d0d
 8017c8c:	08017d0d 	.word	0x08017d0d
 8017c90:	08017d0d 	.word	0x08017d0d
 8017c94:	08017d0d 	.word	0x08017d0d
 8017c98:	08017d0d 	.word	0x08017d0d
 8017c9c:	08017d0d 	.word	0x08017d0d
 8017ca0:	08017d0d 	.word	0x08017d0d
 8017ca4:	08017d0d 	.word	0x08017d0d
 8017ca8:	08017d0d 	.word	0x08017d0d
 8017cac:	08017d0d 	.word	0x08017d0d
 8017cb0:	08017d0d 	.word	0x08017d0d
 8017cb4:	08017d0d 	.word	0x08017d0d
 8017cb8:	08017d0d 	.word	0x08017d0d
 8017cbc:	08017d0d 	.word	0x08017d0d
 8017cc0:	08017d0d 	.word	0x08017d0d
 8017cc4:	08017d0d 	.word	0x08017d0d
 8017cc8:	08017d0d 	.word	0x08017d0d
 8017ccc:	08017d0d 	.word	0x08017d0d
 8017cd0:	08017d0d 	.word	0x08017d0d
 8017cd4:	08017d0d 	.word	0x08017d0d
 8017cd8:	08017d0d 	.word	0x08017d0d
 8017cdc:	08017d0d 	.word	0x08017d0d
 8017ce0:	08017d0d 	.word	0x08017d0d
 8017ce4:	08017d0d 	.word	0x08017d0d
 8017ce8:	08017d0d 	.word	0x08017d0d
 8017cec:	08017d0d 	.word	0x08017d0d
 8017cf0:	08017d0d 	.word	0x08017d0d
 8017cf4:	08017d0d 	.word	0x08017d0d
 8017cf8:	08017d0d 	.word	0x08017d0d
 8017cfc:	08017d0d 	.word	0x08017d0d
 8017d00:	08017d0d 	.word	0x08017d0d
 8017d04:	08017d0d 	.word	0x08017d0d
 8017d08:	08017d0d 	.word	0x08017d0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017d0c:	bf00      	nop
  }

  return (USBD_OK);
 8017d0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017d10:	4618      	mov	r0, r3
 8017d12:	370c      	adds	r7, #12
 8017d14:	46bd      	mov	sp, r7
 8017d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1a:	4770      	bx	lr

08017d1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017d26:	6879      	ldr	r1, [r7, #4]
 8017d28:	480a      	ldr	r0, [pc, #40]	@ (8017d54 <CDC_Receive_FS+0x38>)
 8017d2a:	f7fe fb7f 	bl	801642c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017d2e:	4809      	ldr	r0, [pc, #36]	@ (8017d54 <CDC_Receive_FS+0x38>)
 8017d30:	f7fe fbda 	bl	80164e8 <USBD_CDC_ReceivePacket>
	usb_device_rxFlag = 0x01;
 8017d34:	4b08      	ldr	r3, [pc, #32]	@ (8017d58 <CDC_Receive_FS+0x3c>)
 8017d36:	2201      	movs	r2, #1
 8017d38:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, Buf, *Len, 100);
 8017d3a:	683b      	ldr	r3, [r7, #0]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	2364      	movs	r3, #100	@ 0x64
 8017d42:	6879      	ldr	r1, [r7, #4]
 8017d44:	4805      	ldr	r0, [pc, #20]	@ (8017d5c <CDC_Receive_FS+0x40>)
 8017d46:	f7fa fae0 	bl	801230a <HAL_UART_Transmit>

	//CDC_Transmit_FS(Buf,*Len);
	return (USBD_OK);
 8017d4a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3708      	adds	r7, #8
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}
 8017d54:	24029364 	.word	0x24029364
 8017d58:	24029354 	.word	0x24029354
 8017d5c:	24000840 	.word	0x24000840

08017d60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b084      	sub	sp, #16
 8017d64:	af00      	add	r7, sp, #0
 8017d66:	6078      	str	r0, [r7, #4]
 8017d68:	460b      	mov	r3, r1
 8017d6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017d70:	4b0d      	ldr	r3, [pc, #52]	@ (8017da8 <CDC_Transmit_FS+0x48>)
 8017d72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017d76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d001      	beq.n	8017d86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017d82:	2301      	movs	r3, #1
 8017d84:	e00b      	b.n	8017d9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017d86:	887b      	ldrh	r3, [r7, #2]
 8017d88:	461a      	mov	r2, r3
 8017d8a:	6879      	ldr	r1, [r7, #4]
 8017d8c:	4806      	ldr	r0, [pc, #24]	@ (8017da8 <CDC_Transmit_FS+0x48>)
 8017d8e:	f7fe fb2b 	bl	80163e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017d92:	4805      	ldr	r0, [pc, #20]	@ (8017da8 <CDC_Transmit_FS+0x48>)
 8017d94:	f7fe fb68 	bl	8016468 <USBD_CDC_TransmitPacket>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d9e:	4618      	mov	r0, r3
 8017da0:	3710      	adds	r7, #16
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	24029364 	.word	0x24029364

08017dac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017dac:	b480      	push	{r7}
 8017dae:	b087      	sub	sp, #28
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	4613      	mov	r3, r2
 8017db8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017dba:	2300      	movs	r3, #0
 8017dbc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	371c      	adds	r7, #28
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dcc:	4770      	bx	lr
	...

08017dd0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b083      	sub	sp, #12
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	4603      	mov	r3, r0
 8017dd8:	6039      	str	r1, [r7, #0]
 8017dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017ddc:	683b      	ldr	r3, [r7, #0]
 8017dde:	2212      	movs	r2, #18
 8017de0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017de2:	4b03      	ldr	r3, [pc, #12]	@ (8017df0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017de4:	4618      	mov	r0, r3
 8017de6:	370c      	adds	r7, #12
 8017de8:	46bd      	mov	sp, r7
 8017dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dee:	4770      	bx	lr
 8017df0:	240002fc 	.word	0x240002fc

08017df4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017df4:	b480      	push	{r7}
 8017df6:	b083      	sub	sp, #12
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	6039      	str	r1, [r7, #0]
 8017dfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017e00:	683b      	ldr	r3, [r7, #0]
 8017e02:	2204      	movs	r2, #4
 8017e04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017e06:	4b03      	ldr	r3, [pc, #12]	@ (8017e14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017e08:	4618      	mov	r0, r3
 8017e0a:	370c      	adds	r7, #12
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e12:	4770      	bx	lr
 8017e14:	24000310 	.word	0x24000310

08017e18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b082      	sub	sp, #8
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	4603      	mov	r3, r0
 8017e20:	6039      	str	r1, [r7, #0]
 8017e22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017e24:	79fb      	ldrb	r3, [r7, #7]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d105      	bne.n	8017e36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017e2a:	683a      	ldr	r2, [r7, #0]
 8017e2c:	4907      	ldr	r1, [pc, #28]	@ (8017e4c <USBD_FS_ProductStrDescriptor+0x34>)
 8017e2e:	4808      	ldr	r0, [pc, #32]	@ (8017e50 <USBD_FS_ProductStrDescriptor+0x38>)
 8017e30:	f7ff fdd0 	bl	80179d4 <USBD_GetString>
 8017e34:	e004      	b.n	8017e40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017e36:	683a      	ldr	r2, [r7, #0]
 8017e38:	4904      	ldr	r1, [pc, #16]	@ (8017e4c <USBD_FS_ProductStrDescriptor+0x34>)
 8017e3a:	4805      	ldr	r0, [pc, #20]	@ (8017e50 <USBD_FS_ProductStrDescriptor+0x38>)
 8017e3c:	f7ff fdca 	bl	80179d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017e40:	4b02      	ldr	r3, [pc, #8]	@ (8017e4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017e42:	4618      	mov	r0, r3
 8017e44:	3708      	adds	r7, #8
 8017e46:	46bd      	mov	sp, r7
 8017e48:	bd80      	pop	{r7, pc}
 8017e4a:	bf00      	nop
 8017e4c:	2402a644 	.word	0x2402a644
 8017e50:	08019068 	.word	0x08019068

08017e54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b082      	sub	sp, #8
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	6039      	str	r1, [r7, #0]
 8017e5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017e60:	683a      	ldr	r2, [r7, #0]
 8017e62:	4904      	ldr	r1, [pc, #16]	@ (8017e74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017e64:	4804      	ldr	r0, [pc, #16]	@ (8017e78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017e66:	f7ff fdb5 	bl	80179d4 <USBD_GetString>
  return USBD_StrDesc;
 8017e6a:	4b02      	ldr	r3, [pc, #8]	@ (8017e74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}
 8017e74:	2402a644 	.word	0x2402a644
 8017e78:	08019080 	.word	0x08019080

08017e7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b082      	sub	sp, #8
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	4603      	mov	r3, r0
 8017e84:	6039      	str	r1, [r7, #0]
 8017e86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017e88:	683b      	ldr	r3, [r7, #0]
 8017e8a:	221a      	movs	r2, #26
 8017e8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017e8e:	f000 f843 	bl	8017f18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017e92:	4b02      	ldr	r3, [pc, #8]	@ (8017e9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017e94:	4618      	mov	r0, r3
 8017e96:	3708      	adds	r7, #8
 8017e98:	46bd      	mov	sp, r7
 8017e9a:	bd80      	pop	{r7, pc}
 8017e9c:	24000314 	.word	0x24000314

08017ea0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ea0:	b580      	push	{r7, lr}
 8017ea2:	b082      	sub	sp, #8
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	6039      	str	r1, [r7, #0]
 8017eaa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017eac:	79fb      	ldrb	r3, [r7, #7]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d105      	bne.n	8017ebe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017eb2:	683a      	ldr	r2, [r7, #0]
 8017eb4:	4907      	ldr	r1, [pc, #28]	@ (8017ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017eb6:	4808      	ldr	r0, [pc, #32]	@ (8017ed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017eb8:	f7ff fd8c 	bl	80179d4 <USBD_GetString>
 8017ebc:	e004      	b.n	8017ec8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017ebe:	683a      	ldr	r2, [r7, #0]
 8017ec0:	4904      	ldr	r1, [pc, #16]	@ (8017ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017ec2:	4805      	ldr	r0, [pc, #20]	@ (8017ed8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017ec4:	f7ff fd86 	bl	80179d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ec8:	4b02      	ldr	r3, [pc, #8]	@ (8017ed4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017eca:	4618      	mov	r0, r3
 8017ecc:	3708      	adds	r7, #8
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	2402a644 	.word	0x2402a644
 8017ed8:	08019094 	.word	0x08019094

08017edc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b082      	sub	sp, #8
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	6039      	str	r1, [r7, #0]
 8017ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017ee8:	79fb      	ldrb	r3, [r7, #7]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d105      	bne.n	8017efa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017eee:	683a      	ldr	r2, [r7, #0]
 8017ef0:	4907      	ldr	r1, [pc, #28]	@ (8017f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017ef2:	4808      	ldr	r0, [pc, #32]	@ (8017f14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017ef4:	f7ff fd6e 	bl	80179d4 <USBD_GetString>
 8017ef8:	e004      	b.n	8017f04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017efa:	683a      	ldr	r2, [r7, #0]
 8017efc:	4904      	ldr	r1, [pc, #16]	@ (8017f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017efe:	4805      	ldr	r0, [pc, #20]	@ (8017f14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017f00:	f7ff fd68 	bl	80179d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017f04:	4b02      	ldr	r3, [pc, #8]	@ (8017f10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017f06:	4618      	mov	r0, r3
 8017f08:	3708      	adds	r7, #8
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	bd80      	pop	{r7, pc}
 8017f0e:	bf00      	nop
 8017f10:	2402a644 	.word	0x2402a644
 8017f14:	080190a0 	.word	0x080190a0

08017f18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b084      	sub	sp, #16
 8017f1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8017f5c <Get_SerialNum+0x44>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017f24:	4b0e      	ldr	r3, [pc, #56]	@ (8017f60 <Get_SerialNum+0x48>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8017f64 <Get_SerialNum+0x4c>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017f30:	68fa      	ldr	r2, [r7, #12]
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	4413      	add	r3, r2
 8017f36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d009      	beq.n	8017f52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017f3e:	2208      	movs	r2, #8
 8017f40:	4909      	ldr	r1, [pc, #36]	@ (8017f68 <Get_SerialNum+0x50>)
 8017f42:	68f8      	ldr	r0, [r7, #12]
 8017f44:	f000 f814 	bl	8017f70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017f48:	2204      	movs	r2, #4
 8017f4a:	4908      	ldr	r1, [pc, #32]	@ (8017f6c <Get_SerialNum+0x54>)
 8017f4c:	68b8      	ldr	r0, [r7, #8]
 8017f4e:	f000 f80f 	bl	8017f70 <IntToUnicode>
  }
}
 8017f52:	bf00      	nop
 8017f54:	3710      	adds	r7, #16
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd80      	pop	{r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	1ff1e800 	.word	0x1ff1e800
 8017f60:	1ff1e804 	.word	0x1ff1e804
 8017f64:	1ff1e808 	.word	0x1ff1e808
 8017f68:	24000316 	.word	0x24000316
 8017f6c:	24000326 	.word	0x24000326

08017f70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b087      	sub	sp, #28
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017f82:	2300      	movs	r3, #0
 8017f84:	75fb      	strb	r3, [r7, #23]
 8017f86:	e027      	b.n	8017fd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	0f1b      	lsrs	r3, r3, #28
 8017f8c:	2b09      	cmp	r3, #9
 8017f8e:	d80b      	bhi.n	8017fa8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	0f1b      	lsrs	r3, r3, #28
 8017f94:	b2da      	uxtb	r2, r3
 8017f96:	7dfb      	ldrb	r3, [r7, #23]
 8017f98:	005b      	lsls	r3, r3, #1
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	440b      	add	r3, r1
 8017fa0:	3230      	adds	r2, #48	@ 0x30
 8017fa2:	b2d2      	uxtb	r2, r2
 8017fa4:	701a      	strb	r2, [r3, #0]
 8017fa6:	e00a      	b.n	8017fbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	0f1b      	lsrs	r3, r3, #28
 8017fac:	b2da      	uxtb	r2, r3
 8017fae:	7dfb      	ldrb	r3, [r7, #23]
 8017fb0:	005b      	lsls	r3, r3, #1
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	440b      	add	r3, r1
 8017fb8:	3237      	adds	r2, #55	@ 0x37
 8017fba:	b2d2      	uxtb	r2, r2
 8017fbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	011b      	lsls	r3, r3, #4
 8017fc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017fc4:	7dfb      	ldrb	r3, [r7, #23]
 8017fc6:	005b      	lsls	r3, r3, #1
 8017fc8:	3301      	adds	r3, #1
 8017fca:	68ba      	ldr	r2, [r7, #8]
 8017fcc:	4413      	add	r3, r2
 8017fce:	2200      	movs	r2, #0
 8017fd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017fd2:	7dfb      	ldrb	r3, [r7, #23]
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	75fb      	strb	r3, [r7, #23]
 8017fd8:	7dfa      	ldrb	r2, [r7, #23]
 8017fda:	79fb      	ldrb	r3, [r7, #7]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d3d3      	bcc.n	8017f88 <IntToUnicode+0x18>
  }
}
 8017fe0:	bf00      	nop
 8017fe2:	bf00      	nop
 8017fe4:	371c      	adds	r7, #28
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fec:	4770      	bx	lr
	...

08017ff0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ff8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	601a      	str	r2, [r3, #0]
 8018000:	605a      	str	r2, [r3, #4]
 8018002:	609a      	str	r2, [r3, #8]
 8018004:	60da      	str	r2, [r3, #12]
 8018006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018008:	f107 0310 	add.w	r3, r7, #16
 801800c:	22c0      	movs	r2, #192	@ 0xc0
 801800e:	2100      	movs	r1, #0
 8018010:	4618      	mov	r0, r3
 8018012:	f000 fbfd 	bl	8018810 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	4a2c      	ldr	r2, [pc, #176]	@ (80180cc <HAL_PCD_MspInit+0xdc>)
 801801c:	4293      	cmp	r3, r2
 801801e:	d151      	bne.n	80180c4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018020:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8018024:	f04f 0300 	mov.w	r3, #0
 8018028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 801802c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8018030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018034:	f107 0310 	add.w	r3, r7, #16
 8018038:	4618      	mov	r0, r3
 801803a:	f7f6 fc6d 	bl	800e918 <HAL_RCCEx_PeriphCLKConfig>
 801803e:	4603      	mov	r3, r0
 8018040:	2b00      	cmp	r3, #0
 8018042:	d001      	beq.n	8018048 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8018044:	f7e9 fd44 	bl	8001ad0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8018048:	f7f5 fc70 	bl	800d92c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801804c:	4b20      	ldr	r3, [pc, #128]	@ (80180d0 <HAL_PCD_MspInit+0xe0>)
 801804e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018052:	4a1f      	ldr	r2, [pc, #124]	@ (80180d0 <HAL_PCD_MspInit+0xe0>)
 8018054:	f043 0301 	orr.w	r3, r3, #1
 8018058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801805c:	4b1c      	ldr	r3, [pc, #112]	@ (80180d0 <HAL_PCD_MspInit+0xe0>)
 801805e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8018062:	f003 0301 	and.w	r3, r3, #1
 8018066:	60fb      	str	r3, [r7, #12]
 8018068:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801806a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801806e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018072:	2302      	movs	r3, #2
 8018074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018078:	2300      	movs	r3, #0
 801807a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801807e:	2300      	movs	r3, #0
 8018080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018084:	230a      	movs	r3, #10
 8018086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801808a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801808e:	4619      	mov	r1, r3
 8018090:	4810      	ldr	r0, [pc, #64]	@ (80180d4 <HAL_PCD_MspInit+0xe4>)
 8018092:	f7ef f8a5 	bl	80071e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018096:	4b0e      	ldr	r3, [pc, #56]	@ (80180d0 <HAL_PCD_MspInit+0xe0>)
 8018098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801809c:	4a0c      	ldr	r2, [pc, #48]	@ (80180d0 <HAL_PCD_MspInit+0xe0>)
 801809e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80180a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80180a6:	4b0a      	ldr	r3, [pc, #40]	@ (80180d0 <HAL_PCD_MspInit+0xe0>)
 80180a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80180ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80180b0:	60bb      	str	r3, [r7, #8]
 80180b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80180b4:	2200      	movs	r2, #0
 80180b6:	2100      	movs	r1, #0
 80180b8:	2065      	movs	r0, #101	@ 0x65
 80180ba:	f7ec f98e 	bl	80043da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80180be:	2065      	movs	r0, #101	@ 0x65
 80180c0:	f7ec f9a5 	bl	800440e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80180c4:	bf00      	nop
 80180c6:	37e8      	adds	r7, #232	@ 0xe8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}
 80180cc:	40080000 	.word	0x40080000
 80180d0:	58024400 	.word	0x58024400
 80180d4:	58020000 	.word	0x58020000

080180d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80180ec:	4619      	mov	r1, r3
 80180ee:	4610      	mov	r0, r2
 80180f0:	f7fe fae3 	bl	80166ba <USBD_LL_SetupStage>
}
 80180f4:	bf00      	nop
 80180f6:	3708      	adds	r7, #8
 80180f8:	46bd      	mov	sp, r7
 80180fa:	bd80      	pop	{r7, pc}

080180fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b082      	sub	sp, #8
 8018100:	af00      	add	r7, sp, #0
 8018102:	6078      	str	r0, [r7, #4]
 8018104:	460b      	mov	r3, r1
 8018106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801810e:	78fa      	ldrb	r2, [r7, #3]
 8018110:	6879      	ldr	r1, [r7, #4]
 8018112:	4613      	mov	r3, r2
 8018114:	00db      	lsls	r3, r3, #3
 8018116:	4413      	add	r3, r2
 8018118:	009b      	lsls	r3, r3, #2
 801811a:	440b      	add	r3, r1
 801811c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018120:	681a      	ldr	r2, [r3, #0]
 8018122:	78fb      	ldrb	r3, [r7, #3]
 8018124:	4619      	mov	r1, r3
 8018126:	f7fe fb1d 	bl	8016764 <USBD_LL_DataOutStage>
}
 801812a:	bf00      	nop
 801812c:	3708      	adds	r7, #8
 801812e:	46bd      	mov	sp, r7
 8018130:	bd80      	pop	{r7, pc}

08018132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018132:	b580      	push	{r7, lr}
 8018134:	b082      	sub	sp, #8
 8018136:	af00      	add	r7, sp, #0
 8018138:	6078      	str	r0, [r7, #4]
 801813a:	460b      	mov	r3, r1
 801813c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8018144:	78fa      	ldrb	r2, [r7, #3]
 8018146:	6879      	ldr	r1, [r7, #4]
 8018148:	4613      	mov	r3, r2
 801814a:	00db      	lsls	r3, r3, #3
 801814c:	4413      	add	r3, r2
 801814e:	009b      	lsls	r3, r3, #2
 8018150:	440b      	add	r3, r1
 8018152:	3320      	adds	r3, #32
 8018154:	681a      	ldr	r2, [r3, #0]
 8018156:	78fb      	ldrb	r3, [r7, #3]
 8018158:	4619      	mov	r1, r3
 801815a:	f7fe fbb6 	bl	80168ca <USBD_LL_DataInStage>
}
 801815e:	bf00      	nop
 8018160:	3708      	adds	r7, #8
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}

08018166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018166:	b580      	push	{r7, lr}
 8018168:	b082      	sub	sp, #8
 801816a:	af00      	add	r7, sp, #0
 801816c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018174:	4618      	mov	r0, r3
 8018176:	f7fe fcf0 	bl	8016b5a <USBD_LL_SOF>
}
 801817a:	bf00      	nop
 801817c:	3708      	adds	r7, #8
 801817e:	46bd      	mov	sp, r7
 8018180:	bd80      	pop	{r7, pc}

08018182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018182:	b580      	push	{r7, lr}
 8018184:	b084      	sub	sp, #16
 8018186:	af00      	add	r7, sp, #0
 8018188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801818a:	2301      	movs	r3, #1
 801818c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	79db      	ldrb	r3, [r3, #7]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d102      	bne.n	801819c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018196:	2300      	movs	r3, #0
 8018198:	73fb      	strb	r3, [r7, #15]
 801819a:	e008      	b.n	80181ae <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	79db      	ldrb	r3, [r3, #7]
 80181a0:	2b02      	cmp	r3, #2
 80181a2:	d102      	bne.n	80181aa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80181a4:	2301      	movs	r3, #1
 80181a6:	73fb      	strb	r3, [r7, #15]
 80181a8:	e001      	b.n	80181ae <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80181aa:	f7e9 fc91 	bl	8001ad0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181b4:	7bfa      	ldrb	r2, [r7, #15]
 80181b6:	4611      	mov	r1, r2
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7fe fc8a 	bl	8016ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7fe fc32 	bl	8016a2e <USBD_LL_Reset>
}
 80181ca:	bf00      	nop
 80181cc:	3710      	adds	r7, #16
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
	...

080181d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181e2:	4618      	mov	r0, r3
 80181e4:	f7fe fc85 	bl	8016af2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	687a      	ldr	r2, [r7, #4]
 80181f4:	6812      	ldr	r2, [r2, #0]
 80181f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80181fa:	f043 0301 	orr.w	r3, r3, #1
 80181fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	7adb      	ldrb	r3, [r3, #11]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d005      	beq.n	8018214 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018208:	4b04      	ldr	r3, [pc, #16]	@ (801821c <HAL_PCD_SuspendCallback+0x48>)
 801820a:	691b      	ldr	r3, [r3, #16]
 801820c:	4a03      	ldr	r2, [pc, #12]	@ (801821c <HAL_PCD_SuspendCallback+0x48>)
 801820e:	f043 0306 	orr.w	r3, r3, #6
 8018212:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018214:	bf00      	nop
 8018216:	3708      	adds	r7, #8
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	e000ed00 	.word	0xe000ed00

08018220 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801822e:	4618      	mov	r0, r3
 8018230:	f7fe fc7b 	bl	8016b2a <USBD_LL_Resume>
}
 8018234:	bf00      	nop
 8018236:	3708      	adds	r7, #8
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}

0801823c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b082      	sub	sp, #8
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
 8018244:	460b      	mov	r3, r1
 8018246:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801824e:	78fa      	ldrb	r2, [r7, #3]
 8018250:	4611      	mov	r1, r2
 8018252:	4618      	mov	r0, r3
 8018254:	f7fe fcd3 	bl	8016bfe <USBD_LL_IsoOUTIncomplete>
}
 8018258:	bf00      	nop
 801825a:	3708      	adds	r7, #8
 801825c:	46bd      	mov	sp, r7
 801825e:	bd80      	pop	{r7, pc}

08018260 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
 8018268:	460b      	mov	r3, r1
 801826a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018272:	78fa      	ldrb	r2, [r7, #3]
 8018274:	4611      	mov	r1, r2
 8018276:	4618      	mov	r0, r3
 8018278:	f7fe fc8f 	bl	8016b9a <USBD_LL_IsoINIncomplete>
}
 801827c:	bf00      	nop
 801827e:	3708      	adds	r7, #8
 8018280:	46bd      	mov	sp, r7
 8018282:	bd80      	pop	{r7, pc}

08018284 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018292:	4618      	mov	r0, r3
 8018294:	f7fe fce5 	bl	8016c62 <USBD_LL_DevConnected>
}
 8018298:	bf00      	nop
 801829a:	3708      	adds	r7, #8
 801829c:	46bd      	mov	sp, r7
 801829e:	bd80      	pop	{r7, pc}

080182a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b082      	sub	sp, #8
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7fe fce2 	bl	8016c78 <USBD_LL_DevDisconnected>
}
 80182b4:	bf00      	nop
 80182b6:	3708      	adds	r7, #8
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	781b      	ldrb	r3, [r3, #0]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d13e      	bne.n	801834a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80182cc:	4a21      	ldr	r2, [pc, #132]	@ (8018354 <USBD_LL_Init+0x98>)
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	4a1f      	ldr	r2, [pc, #124]	@ (8018354 <USBD_LL_Init+0x98>)
 80182d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80182dc:	4b1d      	ldr	r3, [pc, #116]	@ (8018354 <USBD_LL_Init+0x98>)
 80182de:	4a1e      	ldr	r2, [pc, #120]	@ (8018358 <USBD_LL_Init+0x9c>)
 80182e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80182e2:	4b1c      	ldr	r3, [pc, #112]	@ (8018354 <USBD_LL_Init+0x98>)
 80182e4:	2209      	movs	r2, #9
 80182e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80182e8:	4b1a      	ldr	r3, [pc, #104]	@ (8018354 <USBD_LL_Init+0x98>)
 80182ea:	2202      	movs	r2, #2
 80182ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80182ee:	4b19      	ldr	r3, [pc, #100]	@ (8018354 <USBD_LL_Init+0x98>)
 80182f0:	2200      	movs	r2, #0
 80182f2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80182f4:	4b17      	ldr	r3, [pc, #92]	@ (8018354 <USBD_LL_Init+0x98>)
 80182f6:	2202      	movs	r2, #2
 80182f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80182fa:	4b16      	ldr	r3, [pc, #88]	@ (8018354 <USBD_LL_Init+0x98>)
 80182fc:	2200      	movs	r2, #0
 80182fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018300:	4b14      	ldr	r3, [pc, #80]	@ (8018354 <USBD_LL_Init+0x98>)
 8018302:	2200      	movs	r2, #0
 8018304:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018306:	4b13      	ldr	r3, [pc, #76]	@ (8018354 <USBD_LL_Init+0x98>)
 8018308:	2200      	movs	r2, #0
 801830a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801830c:	4b11      	ldr	r3, [pc, #68]	@ (8018354 <USBD_LL_Init+0x98>)
 801830e:	2200      	movs	r2, #0
 8018310:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018312:	4b10      	ldr	r3, [pc, #64]	@ (8018354 <USBD_LL_Init+0x98>)
 8018314:	2200      	movs	r2, #0
 8018316:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018318:	4b0e      	ldr	r3, [pc, #56]	@ (8018354 <USBD_LL_Init+0x98>)
 801831a:	2200      	movs	r2, #0
 801831c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801831e:	480d      	ldr	r0, [pc, #52]	@ (8018354 <USBD_LL_Init+0x98>)
 8018320:	f7f4 f82a 	bl	800c378 <HAL_PCD_Init>
 8018324:	4603      	mov	r3, r0
 8018326:	2b00      	cmp	r3, #0
 8018328:	d001      	beq.n	801832e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801832a:	f7e9 fbd1 	bl	8001ad0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801832e:	2180      	movs	r1, #128	@ 0x80
 8018330:	4808      	ldr	r0, [pc, #32]	@ (8018354 <USBD_LL_Init+0x98>)
 8018332:	f7f5 fa80 	bl	800d836 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018336:	2240      	movs	r2, #64	@ 0x40
 8018338:	2100      	movs	r1, #0
 801833a:	4806      	ldr	r0, [pc, #24]	@ (8018354 <USBD_LL_Init+0x98>)
 801833c:	f7f5 fa34 	bl	800d7a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018340:	2280      	movs	r2, #128	@ 0x80
 8018342:	2101      	movs	r1, #1
 8018344:	4803      	ldr	r0, [pc, #12]	@ (8018354 <USBD_LL_Init+0x98>)
 8018346:	f7f5 fa2f 	bl	800d7a8 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801834a:	2300      	movs	r3, #0
}
 801834c:	4618      	mov	r0, r3
 801834e:	3708      	adds	r7, #8
 8018350:	46bd      	mov	sp, r7
 8018352:	bd80      	pop	{r7, pc}
 8018354:	2402a844 	.word	0x2402a844
 8018358:	40080000 	.word	0x40080000

0801835c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b084      	sub	sp, #16
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018364:	2300      	movs	r3, #0
 8018366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018368:	2300      	movs	r3, #0
 801836a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018372:	4618      	mov	r0, r3
 8018374:	f7f4 f90c 	bl	800c590 <HAL_PCD_Start>
 8018378:	4603      	mov	r3, r0
 801837a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801837c:	7bfb      	ldrb	r3, [r7, #15]
 801837e:	4618      	mov	r0, r3
 8018380:	f000 f942 	bl	8018608 <USBD_Get_USB_Status>
 8018384:	4603      	mov	r3, r0
 8018386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018388:	7bbb      	ldrb	r3, [r7, #14]
}
 801838a:	4618      	mov	r0, r3
 801838c:	3710      	adds	r7, #16
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}

08018392 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018392:	b580      	push	{r7, lr}
 8018394:	b084      	sub	sp, #16
 8018396:	af00      	add	r7, sp, #0
 8018398:	6078      	str	r0, [r7, #4]
 801839a:	4608      	mov	r0, r1
 801839c:	4611      	mov	r1, r2
 801839e:	461a      	mov	r2, r3
 80183a0:	4603      	mov	r3, r0
 80183a2:	70fb      	strb	r3, [r7, #3]
 80183a4:	460b      	mov	r3, r1
 80183a6:	70bb      	strb	r3, [r7, #2]
 80183a8:	4613      	mov	r3, r2
 80183aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183ac:	2300      	movs	r3, #0
 80183ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183b0:	2300      	movs	r3, #0
 80183b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80183ba:	78bb      	ldrb	r3, [r7, #2]
 80183bc:	883a      	ldrh	r2, [r7, #0]
 80183be:	78f9      	ldrb	r1, [r7, #3]
 80183c0:	f7f4 fe0d 	bl	800cfde <HAL_PCD_EP_Open>
 80183c4:	4603      	mov	r3, r0
 80183c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183c8:	7bfb      	ldrb	r3, [r7, #15]
 80183ca:	4618      	mov	r0, r3
 80183cc:	f000 f91c 	bl	8018608 <USBD_Get_USB_Status>
 80183d0:	4603      	mov	r3, r0
 80183d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80183d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80183d6:	4618      	mov	r0, r3
 80183d8:	3710      	adds	r7, #16
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}

080183de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183de:	b580      	push	{r7, lr}
 80183e0:	b084      	sub	sp, #16
 80183e2:	af00      	add	r7, sp, #0
 80183e4:	6078      	str	r0, [r7, #4]
 80183e6:	460b      	mov	r3, r1
 80183e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183ea:	2300      	movs	r3, #0
 80183ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183ee:	2300      	movs	r3, #0
 80183f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183f8:	78fa      	ldrb	r2, [r7, #3]
 80183fa:	4611      	mov	r1, r2
 80183fc:	4618      	mov	r0, r3
 80183fe:	f7f4 fe58 	bl	800d0b2 <HAL_PCD_EP_Close>
 8018402:	4603      	mov	r3, r0
 8018404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018406:	7bfb      	ldrb	r3, [r7, #15]
 8018408:	4618      	mov	r0, r3
 801840a:	f000 f8fd 	bl	8018608 <USBD_Get_USB_Status>
 801840e:	4603      	mov	r3, r0
 8018410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018412:	7bbb      	ldrb	r3, [r7, #14]
}
 8018414:	4618      	mov	r0, r3
 8018416:	3710      	adds	r7, #16
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}

0801841c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	460b      	mov	r3, r1
 8018426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018428:	2300      	movs	r3, #0
 801842a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801842c:	2300      	movs	r3, #0
 801842e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018436:	78fa      	ldrb	r2, [r7, #3]
 8018438:	4611      	mov	r1, r2
 801843a:	4618      	mov	r0, r3
 801843c:	f7f4 ff10 	bl	800d260 <HAL_PCD_EP_SetStall>
 8018440:	4603      	mov	r3, r0
 8018442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018444:	7bfb      	ldrb	r3, [r7, #15]
 8018446:	4618      	mov	r0, r3
 8018448:	f000 f8de 	bl	8018608 <USBD_Get_USB_Status>
 801844c:	4603      	mov	r3, r0
 801844e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018450:	7bbb      	ldrb	r3, [r7, #14]
}
 8018452:	4618      	mov	r0, r3
 8018454:	3710      	adds	r7, #16
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801845a:	b580      	push	{r7, lr}
 801845c:	b084      	sub	sp, #16
 801845e:	af00      	add	r7, sp, #0
 8018460:	6078      	str	r0, [r7, #4]
 8018462:	460b      	mov	r3, r1
 8018464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018466:	2300      	movs	r3, #0
 8018468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801846a:	2300      	movs	r3, #0
 801846c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018474:	78fa      	ldrb	r2, [r7, #3]
 8018476:	4611      	mov	r1, r2
 8018478:	4618      	mov	r0, r3
 801847a:	f7f4 ff54 	bl	800d326 <HAL_PCD_EP_ClrStall>
 801847e:	4603      	mov	r3, r0
 8018480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018482:	7bfb      	ldrb	r3, [r7, #15]
 8018484:	4618      	mov	r0, r3
 8018486:	f000 f8bf 	bl	8018608 <USBD_Get_USB_Status>
 801848a:	4603      	mov	r3, r0
 801848c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801848e:	7bbb      	ldrb	r3, [r7, #14]
}
 8018490:	4618      	mov	r0, r3
 8018492:	3710      	adds	r7, #16
 8018494:	46bd      	mov	sp, r7
 8018496:	bd80      	pop	{r7, pc}

08018498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018498:	b480      	push	{r7}
 801849a:	b085      	sub	sp, #20
 801849c:	af00      	add	r7, sp, #0
 801849e:	6078      	str	r0, [r7, #4]
 80184a0:	460b      	mov	r3, r1
 80184a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80184ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	da0b      	bge.n	80184cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80184b4:	78fb      	ldrb	r3, [r7, #3]
 80184b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80184ba:	68f9      	ldr	r1, [r7, #12]
 80184bc:	4613      	mov	r3, r2
 80184be:	00db      	lsls	r3, r3, #3
 80184c0:	4413      	add	r3, r2
 80184c2:	009b      	lsls	r3, r3, #2
 80184c4:	440b      	add	r3, r1
 80184c6:	3316      	adds	r3, #22
 80184c8:	781b      	ldrb	r3, [r3, #0]
 80184ca:	e00b      	b.n	80184e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80184cc:	78fb      	ldrb	r3, [r7, #3]
 80184ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80184d2:	68f9      	ldr	r1, [r7, #12]
 80184d4:	4613      	mov	r3, r2
 80184d6:	00db      	lsls	r3, r3, #3
 80184d8:	4413      	add	r3, r2
 80184da:	009b      	lsls	r3, r3, #2
 80184dc:	440b      	add	r3, r1
 80184de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80184e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80184e4:	4618      	mov	r0, r3
 80184e6:	3714      	adds	r7, #20
 80184e8:	46bd      	mov	sp, r7
 80184ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ee:	4770      	bx	lr

080184f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b084      	sub	sp, #16
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	460b      	mov	r3, r1
 80184fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184fc:	2300      	movs	r3, #0
 80184fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018500:	2300      	movs	r3, #0
 8018502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801850a:	78fa      	ldrb	r2, [r7, #3]
 801850c:	4611      	mov	r1, r2
 801850e:	4618      	mov	r0, r3
 8018510:	f7f4 fd41 	bl	800cf96 <HAL_PCD_SetAddress>
 8018514:	4603      	mov	r3, r0
 8018516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018518:	7bfb      	ldrb	r3, [r7, #15]
 801851a:	4618      	mov	r0, r3
 801851c:	f000 f874 	bl	8018608 <USBD_Get_USB_Status>
 8018520:	4603      	mov	r3, r0
 8018522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018524:	7bbb      	ldrb	r3, [r7, #14]
}
 8018526:	4618      	mov	r0, r3
 8018528:	3710      	adds	r7, #16
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}

0801852e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801852e:	b580      	push	{r7, lr}
 8018530:	b086      	sub	sp, #24
 8018532:	af00      	add	r7, sp, #0
 8018534:	60f8      	str	r0, [r7, #12]
 8018536:	607a      	str	r2, [r7, #4]
 8018538:	603b      	str	r3, [r7, #0]
 801853a:	460b      	mov	r3, r1
 801853c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801853e:	2300      	movs	r3, #0
 8018540:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018542:	2300      	movs	r3, #0
 8018544:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801854c:	7af9      	ldrb	r1, [r7, #11]
 801854e:	683b      	ldr	r3, [r7, #0]
 8018550:	687a      	ldr	r2, [r7, #4]
 8018552:	f7f4 fe4b 	bl	800d1ec <HAL_PCD_EP_Transmit>
 8018556:	4603      	mov	r3, r0
 8018558:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801855a:	7dfb      	ldrb	r3, [r7, #23]
 801855c:	4618      	mov	r0, r3
 801855e:	f000 f853 	bl	8018608 <USBD_Get_USB_Status>
 8018562:	4603      	mov	r3, r0
 8018564:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018566:	7dbb      	ldrb	r3, [r7, #22]
}
 8018568:	4618      	mov	r0, r3
 801856a:	3718      	adds	r7, #24
 801856c:	46bd      	mov	sp, r7
 801856e:	bd80      	pop	{r7, pc}

08018570 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b086      	sub	sp, #24
 8018574:	af00      	add	r7, sp, #0
 8018576:	60f8      	str	r0, [r7, #12]
 8018578:	607a      	str	r2, [r7, #4]
 801857a:	603b      	str	r3, [r7, #0]
 801857c:	460b      	mov	r3, r1
 801857e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018580:	2300      	movs	r3, #0
 8018582:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018584:	2300      	movs	r3, #0
 8018586:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801858e:	7af9      	ldrb	r1, [r7, #11]
 8018590:	683b      	ldr	r3, [r7, #0]
 8018592:	687a      	ldr	r2, [r7, #4]
 8018594:	f7f4 fdd7 	bl	800d146 <HAL_PCD_EP_Receive>
 8018598:	4603      	mov	r3, r0
 801859a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801859c:	7dfb      	ldrb	r3, [r7, #23]
 801859e:	4618      	mov	r0, r3
 80185a0:	f000 f832 	bl	8018608 <USBD_Get_USB_Status>
 80185a4:	4603      	mov	r3, r0
 80185a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80185a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80185aa:	4618      	mov	r0, r3
 80185ac:	3718      	adds	r7, #24
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}

080185b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80185b2:	b580      	push	{r7, lr}
 80185b4:	b082      	sub	sp, #8
 80185b6:	af00      	add	r7, sp, #0
 80185b8:	6078      	str	r0, [r7, #4]
 80185ba:	460b      	mov	r3, r1
 80185bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80185c4:	78fa      	ldrb	r2, [r7, #3]
 80185c6:	4611      	mov	r1, r2
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7f4 fdf7 	bl	800d1bc <HAL_PCD_EP_GetRxCount>
 80185ce:	4603      	mov	r3, r0
}
 80185d0:	4618      	mov	r0, r3
 80185d2:	3708      	adds	r7, #8
 80185d4:	46bd      	mov	sp, r7
 80185d6:	bd80      	pop	{r7, pc}

080185d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80185d8:	b480      	push	{r7}
 80185da:	b083      	sub	sp, #12
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80185e0:	4b03      	ldr	r3, [pc, #12]	@ (80185f0 <USBD_static_malloc+0x18>)
}
 80185e2:	4618      	mov	r0, r3
 80185e4:	370c      	adds	r7, #12
 80185e6:	46bd      	mov	sp, r7
 80185e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ec:	4770      	bx	lr
 80185ee:	bf00      	nop
 80185f0:	2402ad28 	.word	0x2402ad28

080185f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80185f4:	b480      	push	{r7}
 80185f6:	b083      	sub	sp, #12
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80185fc:	bf00      	nop
 80185fe:	370c      	adds	r7, #12
 8018600:	46bd      	mov	sp, r7
 8018602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018606:	4770      	bx	lr

08018608 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018608:	b480      	push	{r7}
 801860a:	b085      	sub	sp, #20
 801860c:	af00      	add	r7, sp, #0
 801860e:	4603      	mov	r3, r0
 8018610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018612:	2300      	movs	r3, #0
 8018614:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018616:	79fb      	ldrb	r3, [r7, #7]
 8018618:	2b03      	cmp	r3, #3
 801861a:	d817      	bhi.n	801864c <USBD_Get_USB_Status+0x44>
 801861c:	a201      	add	r2, pc, #4	@ (adr r2, 8018624 <USBD_Get_USB_Status+0x1c>)
 801861e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018622:	bf00      	nop
 8018624:	08018635 	.word	0x08018635
 8018628:	0801863b 	.word	0x0801863b
 801862c:	08018641 	.word	0x08018641
 8018630:	08018647 	.word	0x08018647
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018634:	2300      	movs	r3, #0
 8018636:	73fb      	strb	r3, [r7, #15]
    break;
 8018638:	e00b      	b.n	8018652 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801863a:	2303      	movs	r3, #3
 801863c:	73fb      	strb	r3, [r7, #15]
    break;
 801863e:	e008      	b.n	8018652 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018640:	2301      	movs	r3, #1
 8018642:	73fb      	strb	r3, [r7, #15]
    break;
 8018644:	e005      	b.n	8018652 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018646:	2303      	movs	r3, #3
 8018648:	73fb      	strb	r3, [r7, #15]
    break;
 801864a:	e002      	b.n	8018652 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801864c:	2303      	movs	r3, #3
 801864e:	73fb      	strb	r3, [r7, #15]
    break;
 8018650:	bf00      	nop
  }
  return usb_status;
 8018652:	7bfb      	ldrb	r3, [r7, #15]
}
 8018654:	4618      	mov	r0, r3
 8018656:	3714      	adds	r7, #20
 8018658:	46bd      	mov	sp, r7
 801865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865e:	4770      	bx	lr

08018660 <malloc>:
 8018660:	4b02      	ldr	r3, [pc, #8]	@ (801866c <malloc+0xc>)
 8018662:	4601      	mov	r1, r0
 8018664:	6818      	ldr	r0, [r3, #0]
 8018666:	f000 b825 	b.w	80186b4 <_malloc_r>
 801866a:	bf00      	nop
 801866c:	24000330 	.word	0x24000330

08018670 <sbrk_aligned>:
 8018670:	b570      	push	{r4, r5, r6, lr}
 8018672:	4e0f      	ldr	r6, [pc, #60]	@ (80186b0 <sbrk_aligned+0x40>)
 8018674:	460c      	mov	r4, r1
 8018676:	6831      	ldr	r1, [r6, #0]
 8018678:	4605      	mov	r5, r0
 801867a:	b911      	cbnz	r1, 8018682 <sbrk_aligned+0x12>
 801867c:	f000 f8d0 	bl	8018820 <_sbrk_r>
 8018680:	6030      	str	r0, [r6, #0]
 8018682:	4621      	mov	r1, r4
 8018684:	4628      	mov	r0, r5
 8018686:	f000 f8cb 	bl	8018820 <_sbrk_r>
 801868a:	1c43      	adds	r3, r0, #1
 801868c:	d103      	bne.n	8018696 <sbrk_aligned+0x26>
 801868e:	f04f 34ff 	mov.w	r4, #4294967295
 8018692:	4620      	mov	r0, r4
 8018694:	bd70      	pop	{r4, r5, r6, pc}
 8018696:	1cc4      	adds	r4, r0, #3
 8018698:	f024 0403 	bic.w	r4, r4, #3
 801869c:	42a0      	cmp	r0, r4
 801869e:	d0f8      	beq.n	8018692 <sbrk_aligned+0x22>
 80186a0:	1a21      	subs	r1, r4, r0
 80186a2:	4628      	mov	r0, r5
 80186a4:	f000 f8bc 	bl	8018820 <_sbrk_r>
 80186a8:	3001      	adds	r0, #1
 80186aa:	d1f2      	bne.n	8018692 <sbrk_aligned+0x22>
 80186ac:	e7ef      	b.n	801868e <sbrk_aligned+0x1e>
 80186ae:	bf00      	nop
 80186b0:	2402af48 	.word	0x2402af48

080186b4 <_malloc_r>:
 80186b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80186b8:	1ccd      	adds	r5, r1, #3
 80186ba:	f025 0503 	bic.w	r5, r5, #3
 80186be:	3508      	adds	r5, #8
 80186c0:	2d0c      	cmp	r5, #12
 80186c2:	bf38      	it	cc
 80186c4:	250c      	movcc	r5, #12
 80186c6:	2d00      	cmp	r5, #0
 80186c8:	4606      	mov	r6, r0
 80186ca:	db01      	blt.n	80186d0 <_malloc_r+0x1c>
 80186cc:	42a9      	cmp	r1, r5
 80186ce:	d904      	bls.n	80186da <_malloc_r+0x26>
 80186d0:	230c      	movs	r3, #12
 80186d2:	6033      	str	r3, [r6, #0]
 80186d4:	2000      	movs	r0, #0
 80186d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80187b0 <_malloc_r+0xfc>
 80186de:	f000 f869 	bl	80187b4 <__malloc_lock>
 80186e2:	f8d8 3000 	ldr.w	r3, [r8]
 80186e6:	461c      	mov	r4, r3
 80186e8:	bb44      	cbnz	r4, 801873c <_malloc_r+0x88>
 80186ea:	4629      	mov	r1, r5
 80186ec:	4630      	mov	r0, r6
 80186ee:	f7ff ffbf 	bl	8018670 <sbrk_aligned>
 80186f2:	1c43      	adds	r3, r0, #1
 80186f4:	4604      	mov	r4, r0
 80186f6:	d158      	bne.n	80187aa <_malloc_r+0xf6>
 80186f8:	f8d8 4000 	ldr.w	r4, [r8]
 80186fc:	4627      	mov	r7, r4
 80186fe:	2f00      	cmp	r7, #0
 8018700:	d143      	bne.n	801878a <_malloc_r+0xd6>
 8018702:	2c00      	cmp	r4, #0
 8018704:	d04b      	beq.n	801879e <_malloc_r+0xea>
 8018706:	6823      	ldr	r3, [r4, #0]
 8018708:	4639      	mov	r1, r7
 801870a:	4630      	mov	r0, r6
 801870c:	eb04 0903 	add.w	r9, r4, r3
 8018710:	f000 f886 	bl	8018820 <_sbrk_r>
 8018714:	4581      	cmp	r9, r0
 8018716:	d142      	bne.n	801879e <_malloc_r+0xea>
 8018718:	6821      	ldr	r1, [r4, #0]
 801871a:	1a6d      	subs	r5, r5, r1
 801871c:	4629      	mov	r1, r5
 801871e:	4630      	mov	r0, r6
 8018720:	f7ff ffa6 	bl	8018670 <sbrk_aligned>
 8018724:	3001      	adds	r0, #1
 8018726:	d03a      	beq.n	801879e <_malloc_r+0xea>
 8018728:	6823      	ldr	r3, [r4, #0]
 801872a:	442b      	add	r3, r5
 801872c:	6023      	str	r3, [r4, #0]
 801872e:	f8d8 3000 	ldr.w	r3, [r8]
 8018732:	685a      	ldr	r2, [r3, #4]
 8018734:	bb62      	cbnz	r2, 8018790 <_malloc_r+0xdc>
 8018736:	f8c8 7000 	str.w	r7, [r8]
 801873a:	e00f      	b.n	801875c <_malloc_r+0xa8>
 801873c:	6822      	ldr	r2, [r4, #0]
 801873e:	1b52      	subs	r2, r2, r5
 8018740:	d420      	bmi.n	8018784 <_malloc_r+0xd0>
 8018742:	2a0b      	cmp	r2, #11
 8018744:	d917      	bls.n	8018776 <_malloc_r+0xc2>
 8018746:	1961      	adds	r1, r4, r5
 8018748:	42a3      	cmp	r3, r4
 801874a:	6025      	str	r5, [r4, #0]
 801874c:	bf18      	it	ne
 801874e:	6059      	strne	r1, [r3, #4]
 8018750:	6863      	ldr	r3, [r4, #4]
 8018752:	bf08      	it	eq
 8018754:	f8c8 1000 	streq.w	r1, [r8]
 8018758:	5162      	str	r2, [r4, r5]
 801875a:	604b      	str	r3, [r1, #4]
 801875c:	4630      	mov	r0, r6
 801875e:	f000 f82f 	bl	80187c0 <__malloc_unlock>
 8018762:	f104 000b 	add.w	r0, r4, #11
 8018766:	1d23      	adds	r3, r4, #4
 8018768:	f020 0007 	bic.w	r0, r0, #7
 801876c:	1ac2      	subs	r2, r0, r3
 801876e:	bf1c      	itt	ne
 8018770:	1a1b      	subne	r3, r3, r0
 8018772:	50a3      	strne	r3, [r4, r2]
 8018774:	e7af      	b.n	80186d6 <_malloc_r+0x22>
 8018776:	6862      	ldr	r2, [r4, #4]
 8018778:	42a3      	cmp	r3, r4
 801877a:	bf0c      	ite	eq
 801877c:	f8c8 2000 	streq.w	r2, [r8]
 8018780:	605a      	strne	r2, [r3, #4]
 8018782:	e7eb      	b.n	801875c <_malloc_r+0xa8>
 8018784:	4623      	mov	r3, r4
 8018786:	6864      	ldr	r4, [r4, #4]
 8018788:	e7ae      	b.n	80186e8 <_malloc_r+0x34>
 801878a:	463c      	mov	r4, r7
 801878c:	687f      	ldr	r7, [r7, #4]
 801878e:	e7b6      	b.n	80186fe <_malloc_r+0x4a>
 8018790:	461a      	mov	r2, r3
 8018792:	685b      	ldr	r3, [r3, #4]
 8018794:	42a3      	cmp	r3, r4
 8018796:	d1fb      	bne.n	8018790 <_malloc_r+0xdc>
 8018798:	2300      	movs	r3, #0
 801879a:	6053      	str	r3, [r2, #4]
 801879c:	e7de      	b.n	801875c <_malloc_r+0xa8>
 801879e:	230c      	movs	r3, #12
 80187a0:	6033      	str	r3, [r6, #0]
 80187a2:	4630      	mov	r0, r6
 80187a4:	f000 f80c 	bl	80187c0 <__malloc_unlock>
 80187a8:	e794      	b.n	80186d4 <_malloc_r+0x20>
 80187aa:	6005      	str	r5, [r0, #0]
 80187ac:	e7d6      	b.n	801875c <_malloc_r+0xa8>
 80187ae:	bf00      	nop
 80187b0:	2402af4c 	.word	0x2402af4c

080187b4 <__malloc_lock>:
 80187b4:	4801      	ldr	r0, [pc, #4]	@ (80187bc <__malloc_lock+0x8>)
 80187b6:	f000 b86d 	b.w	8018894 <__retarget_lock_acquire_recursive>
 80187ba:	bf00      	nop
 80187bc:	2402b08c 	.word	0x2402b08c

080187c0 <__malloc_unlock>:
 80187c0:	4801      	ldr	r0, [pc, #4]	@ (80187c8 <__malloc_unlock+0x8>)
 80187c2:	f000 b868 	b.w	8018896 <__retarget_lock_release_recursive>
 80187c6:	bf00      	nop
 80187c8:	2402b08c 	.word	0x2402b08c

080187cc <siprintf>:
 80187cc:	b40e      	push	{r1, r2, r3}
 80187ce:	b510      	push	{r4, lr}
 80187d0:	b09d      	sub	sp, #116	@ 0x74
 80187d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80187d4:	9002      	str	r0, [sp, #8]
 80187d6:	9006      	str	r0, [sp, #24]
 80187d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80187dc:	480a      	ldr	r0, [pc, #40]	@ (8018808 <siprintf+0x3c>)
 80187de:	9107      	str	r1, [sp, #28]
 80187e0:	9104      	str	r1, [sp, #16]
 80187e2:	490a      	ldr	r1, [pc, #40]	@ (801880c <siprintf+0x40>)
 80187e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80187e8:	9105      	str	r1, [sp, #20]
 80187ea:	2400      	movs	r4, #0
 80187ec:	a902      	add	r1, sp, #8
 80187ee:	6800      	ldr	r0, [r0, #0]
 80187f0:	9301      	str	r3, [sp, #4]
 80187f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80187f4:	f000 f904 	bl	8018a00 <_svfiprintf_r>
 80187f8:	9b02      	ldr	r3, [sp, #8]
 80187fa:	701c      	strb	r4, [r3, #0]
 80187fc:	b01d      	add	sp, #116	@ 0x74
 80187fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018802:	b003      	add	sp, #12
 8018804:	4770      	bx	lr
 8018806:	bf00      	nop
 8018808:	24000330 	.word	0x24000330
 801880c:	ffff0208 	.word	0xffff0208

08018810 <memset>:
 8018810:	4402      	add	r2, r0
 8018812:	4603      	mov	r3, r0
 8018814:	4293      	cmp	r3, r2
 8018816:	d100      	bne.n	801881a <memset+0xa>
 8018818:	4770      	bx	lr
 801881a:	f803 1b01 	strb.w	r1, [r3], #1
 801881e:	e7f9      	b.n	8018814 <memset+0x4>

08018820 <_sbrk_r>:
 8018820:	b538      	push	{r3, r4, r5, lr}
 8018822:	4d06      	ldr	r5, [pc, #24]	@ (801883c <_sbrk_r+0x1c>)
 8018824:	2300      	movs	r3, #0
 8018826:	4604      	mov	r4, r0
 8018828:	4608      	mov	r0, r1
 801882a:	602b      	str	r3, [r5, #0]
 801882c:	f7e9 fdc6 	bl	80023bc <_sbrk>
 8018830:	1c43      	adds	r3, r0, #1
 8018832:	d102      	bne.n	801883a <_sbrk_r+0x1a>
 8018834:	682b      	ldr	r3, [r5, #0]
 8018836:	b103      	cbz	r3, 801883a <_sbrk_r+0x1a>
 8018838:	6023      	str	r3, [r4, #0]
 801883a:	bd38      	pop	{r3, r4, r5, pc}
 801883c:	2402b088 	.word	0x2402b088

08018840 <__errno>:
 8018840:	4b01      	ldr	r3, [pc, #4]	@ (8018848 <__errno+0x8>)
 8018842:	6818      	ldr	r0, [r3, #0]
 8018844:	4770      	bx	lr
 8018846:	bf00      	nop
 8018848:	24000330 	.word	0x24000330

0801884c <__libc_init_array>:
 801884c:	b570      	push	{r4, r5, r6, lr}
 801884e:	4d0d      	ldr	r5, [pc, #52]	@ (8018884 <__libc_init_array+0x38>)
 8018850:	4c0d      	ldr	r4, [pc, #52]	@ (8018888 <__libc_init_array+0x3c>)
 8018852:	1b64      	subs	r4, r4, r5
 8018854:	10a4      	asrs	r4, r4, #2
 8018856:	2600      	movs	r6, #0
 8018858:	42a6      	cmp	r6, r4
 801885a:	d109      	bne.n	8018870 <__libc_init_array+0x24>
 801885c:	4d0b      	ldr	r5, [pc, #44]	@ (801888c <__libc_init_array+0x40>)
 801885e:	4c0c      	ldr	r4, [pc, #48]	@ (8018890 <__libc_init_array+0x44>)
 8018860:	f000 fba6 	bl	8018fb0 <_init>
 8018864:	1b64      	subs	r4, r4, r5
 8018866:	10a4      	asrs	r4, r4, #2
 8018868:	2600      	movs	r6, #0
 801886a:	42a6      	cmp	r6, r4
 801886c:	d105      	bne.n	801887a <__libc_init_array+0x2e>
 801886e:	bd70      	pop	{r4, r5, r6, pc}
 8018870:	f855 3b04 	ldr.w	r3, [r5], #4
 8018874:	4798      	blx	r3
 8018876:	3601      	adds	r6, #1
 8018878:	e7ee      	b.n	8018858 <__libc_init_array+0xc>
 801887a:	f855 3b04 	ldr.w	r3, [r5], #4
 801887e:	4798      	blx	r3
 8018880:	3601      	adds	r6, #1
 8018882:	e7f2      	b.n	801886a <__libc_init_array+0x1e>
 8018884:	08019644 	.word	0x08019644
 8018888:	08019644 	.word	0x08019644
 801888c:	08019644 	.word	0x08019644
 8018890:	08019648 	.word	0x08019648

08018894 <__retarget_lock_acquire_recursive>:
 8018894:	4770      	bx	lr

08018896 <__retarget_lock_release_recursive>:
 8018896:	4770      	bx	lr

08018898 <memcpy>:
 8018898:	440a      	add	r2, r1
 801889a:	4291      	cmp	r1, r2
 801889c:	f100 33ff 	add.w	r3, r0, #4294967295
 80188a0:	d100      	bne.n	80188a4 <memcpy+0xc>
 80188a2:	4770      	bx	lr
 80188a4:	b510      	push	{r4, lr}
 80188a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80188aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80188ae:	4291      	cmp	r1, r2
 80188b0:	d1f9      	bne.n	80188a6 <memcpy+0xe>
 80188b2:	bd10      	pop	{r4, pc}

080188b4 <_free_r>:
 80188b4:	b538      	push	{r3, r4, r5, lr}
 80188b6:	4605      	mov	r5, r0
 80188b8:	2900      	cmp	r1, #0
 80188ba:	d041      	beq.n	8018940 <_free_r+0x8c>
 80188bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80188c0:	1f0c      	subs	r4, r1, #4
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	bfb8      	it	lt
 80188c6:	18e4      	addlt	r4, r4, r3
 80188c8:	f7ff ff74 	bl	80187b4 <__malloc_lock>
 80188cc:	4a1d      	ldr	r2, [pc, #116]	@ (8018944 <_free_r+0x90>)
 80188ce:	6813      	ldr	r3, [r2, #0]
 80188d0:	b933      	cbnz	r3, 80188e0 <_free_r+0x2c>
 80188d2:	6063      	str	r3, [r4, #4]
 80188d4:	6014      	str	r4, [r2, #0]
 80188d6:	4628      	mov	r0, r5
 80188d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80188dc:	f7ff bf70 	b.w	80187c0 <__malloc_unlock>
 80188e0:	42a3      	cmp	r3, r4
 80188e2:	d908      	bls.n	80188f6 <_free_r+0x42>
 80188e4:	6820      	ldr	r0, [r4, #0]
 80188e6:	1821      	adds	r1, r4, r0
 80188e8:	428b      	cmp	r3, r1
 80188ea:	bf01      	itttt	eq
 80188ec:	6819      	ldreq	r1, [r3, #0]
 80188ee:	685b      	ldreq	r3, [r3, #4]
 80188f0:	1809      	addeq	r1, r1, r0
 80188f2:	6021      	streq	r1, [r4, #0]
 80188f4:	e7ed      	b.n	80188d2 <_free_r+0x1e>
 80188f6:	461a      	mov	r2, r3
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	b10b      	cbz	r3, 8018900 <_free_r+0x4c>
 80188fc:	42a3      	cmp	r3, r4
 80188fe:	d9fa      	bls.n	80188f6 <_free_r+0x42>
 8018900:	6811      	ldr	r1, [r2, #0]
 8018902:	1850      	adds	r0, r2, r1
 8018904:	42a0      	cmp	r0, r4
 8018906:	d10b      	bne.n	8018920 <_free_r+0x6c>
 8018908:	6820      	ldr	r0, [r4, #0]
 801890a:	4401      	add	r1, r0
 801890c:	1850      	adds	r0, r2, r1
 801890e:	4283      	cmp	r3, r0
 8018910:	6011      	str	r1, [r2, #0]
 8018912:	d1e0      	bne.n	80188d6 <_free_r+0x22>
 8018914:	6818      	ldr	r0, [r3, #0]
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	6053      	str	r3, [r2, #4]
 801891a:	4408      	add	r0, r1
 801891c:	6010      	str	r0, [r2, #0]
 801891e:	e7da      	b.n	80188d6 <_free_r+0x22>
 8018920:	d902      	bls.n	8018928 <_free_r+0x74>
 8018922:	230c      	movs	r3, #12
 8018924:	602b      	str	r3, [r5, #0]
 8018926:	e7d6      	b.n	80188d6 <_free_r+0x22>
 8018928:	6820      	ldr	r0, [r4, #0]
 801892a:	1821      	adds	r1, r4, r0
 801892c:	428b      	cmp	r3, r1
 801892e:	bf04      	itt	eq
 8018930:	6819      	ldreq	r1, [r3, #0]
 8018932:	685b      	ldreq	r3, [r3, #4]
 8018934:	6063      	str	r3, [r4, #4]
 8018936:	bf04      	itt	eq
 8018938:	1809      	addeq	r1, r1, r0
 801893a:	6021      	streq	r1, [r4, #0]
 801893c:	6054      	str	r4, [r2, #4]
 801893e:	e7ca      	b.n	80188d6 <_free_r+0x22>
 8018940:	bd38      	pop	{r3, r4, r5, pc}
 8018942:	bf00      	nop
 8018944:	2402af4c 	.word	0x2402af4c

08018948 <__ssputs_r>:
 8018948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801894c:	688e      	ldr	r6, [r1, #8]
 801894e:	461f      	mov	r7, r3
 8018950:	42be      	cmp	r6, r7
 8018952:	680b      	ldr	r3, [r1, #0]
 8018954:	4682      	mov	sl, r0
 8018956:	460c      	mov	r4, r1
 8018958:	4690      	mov	r8, r2
 801895a:	d82d      	bhi.n	80189b8 <__ssputs_r+0x70>
 801895c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018964:	d026      	beq.n	80189b4 <__ssputs_r+0x6c>
 8018966:	6965      	ldr	r5, [r4, #20]
 8018968:	6909      	ldr	r1, [r1, #16]
 801896a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801896e:	eba3 0901 	sub.w	r9, r3, r1
 8018972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018976:	1c7b      	adds	r3, r7, #1
 8018978:	444b      	add	r3, r9
 801897a:	106d      	asrs	r5, r5, #1
 801897c:	429d      	cmp	r5, r3
 801897e:	bf38      	it	cc
 8018980:	461d      	movcc	r5, r3
 8018982:	0553      	lsls	r3, r2, #21
 8018984:	d527      	bpl.n	80189d6 <__ssputs_r+0x8e>
 8018986:	4629      	mov	r1, r5
 8018988:	f7ff fe94 	bl	80186b4 <_malloc_r>
 801898c:	4606      	mov	r6, r0
 801898e:	b360      	cbz	r0, 80189ea <__ssputs_r+0xa2>
 8018990:	6921      	ldr	r1, [r4, #16]
 8018992:	464a      	mov	r2, r9
 8018994:	f7ff ff80 	bl	8018898 <memcpy>
 8018998:	89a3      	ldrh	r3, [r4, #12]
 801899a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801899e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189a2:	81a3      	strh	r3, [r4, #12]
 80189a4:	6126      	str	r6, [r4, #16]
 80189a6:	6165      	str	r5, [r4, #20]
 80189a8:	444e      	add	r6, r9
 80189aa:	eba5 0509 	sub.w	r5, r5, r9
 80189ae:	6026      	str	r6, [r4, #0]
 80189b0:	60a5      	str	r5, [r4, #8]
 80189b2:	463e      	mov	r6, r7
 80189b4:	42be      	cmp	r6, r7
 80189b6:	d900      	bls.n	80189ba <__ssputs_r+0x72>
 80189b8:	463e      	mov	r6, r7
 80189ba:	6820      	ldr	r0, [r4, #0]
 80189bc:	4632      	mov	r2, r6
 80189be:	4641      	mov	r1, r8
 80189c0:	f000 faa6 	bl	8018f10 <memmove>
 80189c4:	68a3      	ldr	r3, [r4, #8]
 80189c6:	1b9b      	subs	r3, r3, r6
 80189c8:	60a3      	str	r3, [r4, #8]
 80189ca:	6823      	ldr	r3, [r4, #0]
 80189cc:	4433      	add	r3, r6
 80189ce:	6023      	str	r3, [r4, #0]
 80189d0:	2000      	movs	r0, #0
 80189d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189d6:	462a      	mov	r2, r5
 80189d8:	f000 fab4 	bl	8018f44 <_realloc_r>
 80189dc:	4606      	mov	r6, r0
 80189de:	2800      	cmp	r0, #0
 80189e0:	d1e0      	bne.n	80189a4 <__ssputs_r+0x5c>
 80189e2:	6921      	ldr	r1, [r4, #16]
 80189e4:	4650      	mov	r0, sl
 80189e6:	f7ff ff65 	bl	80188b4 <_free_r>
 80189ea:	230c      	movs	r3, #12
 80189ec:	f8ca 3000 	str.w	r3, [sl]
 80189f0:	89a3      	ldrh	r3, [r4, #12]
 80189f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80189f6:	81a3      	strh	r3, [r4, #12]
 80189f8:	f04f 30ff 	mov.w	r0, #4294967295
 80189fc:	e7e9      	b.n	80189d2 <__ssputs_r+0x8a>
	...

08018a00 <_svfiprintf_r>:
 8018a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a04:	4698      	mov	r8, r3
 8018a06:	898b      	ldrh	r3, [r1, #12]
 8018a08:	061b      	lsls	r3, r3, #24
 8018a0a:	b09d      	sub	sp, #116	@ 0x74
 8018a0c:	4607      	mov	r7, r0
 8018a0e:	460d      	mov	r5, r1
 8018a10:	4614      	mov	r4, r2
 8018a12:	d510      	bpl.n	8018a36 <_svfiprintf_r+0x36>
 8018a14:	690b      	ldr	r3, [r1, #16]
 8018a16:	b973      	cbnz	r3, 8018a36 <_svfiprintf_r+0x36>
 8018a18:	2140      	movs	r1, #64	@ 0x40
 8018a1a:	f7ff fe4b 	bl	80186b4 <_malloc_r>
 8018a1e:	6028      	str	r0, [r5, #0]
 8018a20:	6128      	str	r0, [r5, #16]
 8018a22:	b930      	cbnz	r0, 8018a32 <_svfiprintf_r+0x32>
 8018a24:	230c      	movs	r3, #12
 8018a26:	603b      	str	r3, [r7, #0]
 8018a28:	f04f 30ff 	mov.w	r0, #4294967295
 8018a2c:	b01d      	add	sp, #116	@ 0x74
 8018a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a32:	2340      	movs	r3, #64	@ 0x40
 8018a34:	616b      	str	r3, [r5, #20]
 8018a36:	2300      	movs	r3, #0
 8018a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a3a:	2320      	movs	r3, #32
 8018a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a44:	2330      	movs	r3, #48	@ 0x30
 8018a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018be4 <_svfiprintf_r+0x1e4>
 8018a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018a4e:	f04f 0901 	mov.w	r9, #1
 8018a52:	4623      	mov	r3, r4
 8018a54:	469a      	mov	sl, r3
 8018a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a5a:	b10a      	cbz	r2, 8018a60 <_svfiprintf_r+0x60>
 8018a5c:	2a25      	cmp	r2, #37	@ 0x25
 8018a5e:	d1f9      	bne.n	8018a54 <_svfiprintf_r+0x54>
 8018a60:	ebba 0b04 	subs.w	fp, sl, r4
 8018a64:	d00b      	beq.n	8018a7e <_svfiprintf_r+0x7e>
 8018a66:	465b      	mov	r3, fp
 8018a68:	4622      	mov	r2, r4
 8018a6a:	4629      	mov	r1, r5
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	f7ff ff6b 	bl	8018948 <__ssputs_r>
 8018a72:	3001      	adds	r0, #1
 8018a74:	f000 80a7 	beq.w	8018bc6 <_svfiprintf_r+0x1c6>
 8018a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018a7a:	445a      	add	r2, fp
 8018a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	f000 809f 	beq.w	8018bc6 <_svfiprintf_r+0x1c6>
 8018a88:	2300      	movs	r3, #0
 8018a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a92:	f10a 0a01 	add.w	sl, sl, #1
 8018a96:	9304      	str	r3, [sp, #16]
 8018a98:	9307      	str	r3, [sp, #28]
 8018a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018aa0:	4654      	mov	r4, sl
 8018aa2:	2205      	movs	r2, #5
 8018aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aa8:	484e      	ldr	r0, [pc, #312]	@ (8018be4 <_svfiprintf_r+0x1e4>)
 8018aaa:	f7e7 fc21 	bl	80002f0 <memchr>
 8018aae:	9a04      	ldr	r2, [sp, #16]
 8018ab0:	b9d8      	cbnz	r0, 8018aea <_svfiprintf_r+0xea>
 8018ab2:	06d0      	lsls	r0, r2, #27
 8018ab4:	bf44      	itt	mi
 8018ab6:	2320      	movmi	r3, #32
 8018ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018abc:	0711      	lsls	r1, r2, #28
 8018abe:	bf44      	itt	mi
 8018ac0:	232b      	movmi	r3, #43	@ 0x2b
 8018ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8018aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8018acc:	d015      	beq.n	8018afa <_svfiprintf_r+0xfa>
 8018ace:	9a07      	ldr	r2, [sp, #28]
 8018ad0:	4654      	mov	r4, sl
 8018ad2:	2000      	movs	r0, #0
 8018ad4:	f04f 0c0a 	mov.w	ip, #10
 8018ad8:	4621      	mov	r1, r4
 8018ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ade:	3b30      	subs	r3, #48	@ 0x30
 8018ae0:	2b09      	cmp	r3, #9
 8018ae2:	d94b      	bls.n	8018b7c <_svfiprintf_r+0x17c>
 8018ae4:	b1b0      	cbz	r0, 8018b14 <_svfiprintf_r+0x114>
 8018ae6:	9207      	str	r2, [sp, #28]
 8018ae8:	e014      	b.n	8018b14 <_svfiprintf_r+0x114>
 8018aea:	eba0 0308 	sub.w	r3, r0, r8
 8018aee:	fa09 f303 	lsl.w	r3, r9, r3
 8018af2:	4313      	orrs	r3, r2
 8018af4:	9304      	str	r3, [sp, #16]
 8018af6:	46a2      	mov	sl, r4
 8018af8:	e7d2      	b.n	8018aa0 <_svfiprintf_r+0xa0>
 8018afa:	9b03      	ldr	r3, [sp, #12]
 8018afc:	1d19      	adds	r1, r3, #4
 8018afe:	681b      	ldr	r3, [r3, #0]
 8018b00:	9103      	str	r1, [sp, #12]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	bfbb      	ittet	lt
 8018b06:	425b      	neglt	r3, r3
 8018b08:	f042 0202 	orrlt.w	r2, r2, #2
 8018b0c:	9307      	strge	r3, [sp, #28]
 8018b0e:	9307      	strlt	r3, [sp, #28]
 8018b10:	bfb8      	it	lt
 8018b12:	9204      	strlt	r2, [sp, #16]
 8018b14:	7823      	ldrb	r3, [r4, #0]
 8018b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8018b18:	d10a      	bne.n	8018b30 <_svfiprintf_r+0x130>
 8018b1a:	7863      	ldrb	r3, [r4, #1]
 8018b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8018b1e:	d132      	bne.n	8018b86 <_svfiprintf_r+0x186>
 8018b20:	9b03      	ldr	r3, [sp, #12]
 8018b22:	1d1a      	adds	r2, r3, #4
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	9203      	str	r2, [sp, #12]
 8018b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018b2c:	3402      	adds	r4, #2
 8018b2e:	9305      	str	r3, [sp, #20]
 8018b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018bf4 <_svfiprintf_r+0x1f4>
 8018b34:	7821      	ldrb	r1, [r4, #0]
 8018b36:	2203      	movs	r2, #3
 8018b38:	4650      	mov	r0, sl
 8018b3a:	f7e7 fbd9 	bl	80002f0 <memchr>
 8018b3e:	b138      	cbz	r0, 8018b50 <_svfiprintf_r+0x150>
 8018b40:	9b04      	ldr	r3, [sp, #16]
 8018b42:	eba0 000a 	sub.w	r0, r0, sl
 8018b46:	2240      	movs	r2, #64	@ 0x40
 8018b48:	4082      	lsls	r2, r0
 8018b4a:	4313      	orrs	r3, r2
 8018b4c:	3401      	adds	r4, #1
 8018b4e:	9304      	str	r3, [sp, #16]
 8018b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b54:	4824      	ldr	r0, [pc, #144]	@ (8018be8 <_svfiprintf_r+0x1e8>)
 8018b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018b5a:	2206      	movs	r2, #6
 8018b5c:	f7e7 fbc8 	bl	80002f0 <memchr>
 8018b60:	2800      	cmp	r0, #0
 8018b62:	d036      	beq.n	8018bd2 <_svfiprintf_r+0x1d2>
 8018b64:	4b21      	ldr	r3, [pc, #132]	@ (8018bec <_svfiprintf_r+0x1ec>)
 8018b66:	bb1b      	cbnz	r3, 8018bb0 <_svfiprintf_r+0x1b0>
 8018b68:	9b03      	ldr	r3, [sp, #12]
 8018b6a:	3307      	adds	r3, #7
 8018b6c:	f023 0307 	bic.w	r3, r3, #7
 8018b70:	3308      	adds	r3, #8
 8018b72:	9303      	str	r3, [sp, #12]
 8018b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b76:	4433      	add	r3, r6
 8018b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b7a:	e76a      	b.n	8018a52 <_svfiprintf_r+0x52>
 8018b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b80:	460c      	mov	r4, r1
 8018b82:	2001      	movs	r0, #1
 8018b84:	e7a8      	b.n	8018ad8 <_svfiprintf_r+0xd8>
 8018b86:	2300      	movs	r3, #0
 8018b88:	3401      	adds	r4, #1
 8018b8a:	9305      	str	r3, [sp, #20]
 8018b8c:	4619      	mov	r1, r3
 8018b8e:	f04f 0c0a 	mov.w	ip, #10
 8018b92:	4620      	mov	r0, r4
 8018b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018b98:	3a30      	subs	r2, #48	@ 0x30
 8018b9a:	2a09      	cmp	r2, #9
 8018b9c:	d903      	bls.n	8018ba6 <_svfiprintf_r+0x1a6>
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d0c6      	beq.n	8018b30 <_svfiprintf_r+0x130>
 8018ba2:	9105      	str	r1, [sp, #20]
 8018ba4:	e7c4      	b.n	8018b30 <_svfiprintf_r+0x130>
 8018ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8018baa:	4604      	mov	r4, r0
 8018bac:	2301      	movs	r3, #1
 8018bae:	e7f0      	b.n	8018b92 <_svfiprintf_r+0x192>
 8018bb0:	ab03      	add	r3, sp, #12
 8018bb2:	9300      	str	r3, [sp, #0]
 8018bb4:	462a      	mov	r2, r5
 8018bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8018bf0 <_svfiprintf_r+0x1f0>)
 8018bb8:	a904      	add	r1, sp, #16
 8018bba:	4638      	mov	r0, r7
 8018bbc:	f3af 8000 	nop.w
 8018bc0:	1c42      	adds	r2, r0, #1
 8018bc2:	4606      	mov	r6, r0
 8018bc4:	d1d6      	bne.n	8018b74 <_svfiprintf_r+0x174>
 8018bc6:	89ab      	ldrh	r3, [r5, #12]
 8018bc8:	065b      	lsls	r3, r3, #25
 8018bca:	f53f af2d 	bmi.w	8018a28 <_svfiprintf_r+0x28>
 8018bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018bd0:	e72c      	b.n	8018a2c <_svfiprintf_r+0x2c>
 8018bd2:	ab03      	add	r3, sp, #12
 8018bd4:	9300      	str	r3, [sp, #0]
 8018bd6:	462a      	mov	r2, r5
 8018bd8:	4b05      	ldr	r3, [pc, #20]	@ (8018bf0 <_svfiprintf_r+0x1f0>)
 8018bda:	a904      	add	r1, sp, #16
 8018bdc:	4638      	mov	r0, r7
 8018bde:	f000 f879 	bl	8018cd4 <_printf_i>
 8018be2:	e7ed      	b.n	8018bc0 <_svfiprintf_r+0x1c0>
 8018be4:	08019608 	.word	0x08019608
 8018be8:	08019612 	.word	0x08019612
 8018bec:	00000000 	.word	0x00000000
 8018bf0:	08018949 	.word	0x08018949
 8018bf4:	0801960e 	.word	0x0801960e

08018bf8 <_printf_common>:
 8018bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bfc:	4616      	mov	r6, r2
 8018bfe:	4698      	mov	r8, r3
 8018c00:	688a      	ldr	r2, [r1, #8]
 8018c02:	690b      	ldr	r3, [r1, #16]
 8018c04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018c08:	4293      	cmp	r3, r2
 8018c0a:	bfb8      	it	lt
 8018c0c:	4613      	movlt	r3, r2
 8018c0e:	6033      	str	r3, [r6, #0]
 8018c10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018c14:	4607      	mov	r7, r0
 8018c16:	460c      	mov	r4, r1
 8018c18:	b10a      	cbz	r2, 8018c1e <_printf_common+0x26>
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	6033      	str	r3, [r6, #0]
 8018c1e:	6823      	ldr	r3, [r4, #0]
 8018c20:	0699      	lsls	r1, r3, #26
 8018c22:	bf42      	ittt	mi
 8018c24:	6833      	ldrmi	r3, [r6, #0]
 8018c26:	3302      	addmi	r3, #2
 8018c28:	6033      	strmi	r3, [r6, #0]
 8018c2a:	6825      	ldr	r5, [r4, #0]
 8018c2c:	f015 0506 	ands.w	r5, r5, #6
 8018c30:	d106      	bne.n	8018c40 <_printf_common+0x48>
 8018c32:	f104 0a19 	add.w	sl, r4, #25
 8018c36:	68e3      	ldr	r3, [r4, #12]
 8018c38:	6832      	ldr	r2, [r6, #0]
 8018c3a:	1a9b      	subs	r3, r3, r2
 8018c3c:	42ab      	cmp	r3, r5
 8018c3e:	dc26      	bgt.n	8018c8e <_printf_common+0x96>
 8018c40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018c44:	6822      	ldr	r2, [r4, #0]
 8018c46:	3b00      	subs	r3, #0
 8018c48:	bf18      	it	ne
 8018c4a:	2301      	movne	r3, #1
 8018c4c:	0692      	lsls	r2, r2, #26
 8018c4e:	d42b      	bmi.n	8018ca8 <_printf_common+0xb0>
 8018c50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018c54:	4641      	mov	r1, r8
 8018c56:	4638      	mov	r0, r7
 8018c58:	47c8      	blx	r9
 8018c5a:	3001      	adds	r0, #1
 8018c5c:	d01e      	beq.n	8018c9c <_printf_common+0xa4>
 8018c5e:	6823      	ldr	r3, [r4, #0]
 8018c60:	6922      	ldr	r2, [r4, #16]
 8018c62:	f003 0306 	and.w	r3, r3, #6
 8018c66:	2b04      	cmp	r3, #4
 8018c68:	bf02      	ittt	eq
 8018c6a:	68e5      	ldreq	r5, [r4, #12]
 8018c6c:	6833      	ldreq	r3, [r6, #0]
 8018c6e:	1aed      	subeq	r5, r5, r3
 8018c70:	68a3      	ldr	r3, [r4, #8]
 8018c72:	bf0c      	ite	eq
 8018c74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018c78:	2500      	movne	r5, #0
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	bfc4      	itt	gt
 8018c7e:	1a9b      	subgt	r3, r3, r2
 8018c80:	18ed      	addgt	r5, r5, r3
 8018c82:	2600      	movs	r6, #0
 8018c84:	341a      	adds	r4, #26
 8018c86:	42b5      	cmp	r5, r6
 8018c88:	d11a      	bne.n	8018cc0 <_printf_common+0xc8>
 8018c8a:	2000      	movs	r0, #0
 8018c8c:	e008      	b.n	8018ca0 <_printf_common+0xa8>
 8018c8e:	2301      	movs	r3, #1
 8018c90:	4652      	mov	r2, sl
 8018c92:	4641      	mov	r1, r8
 8018c94:	4638      	mov	r0, r7
 8018c96:	47c8      	blx	r9
 8018c98:	3001      	adds	r0, #1
 8018c9a:	d103      	bne.n	8018ca4 <_printf_common+0xac>
 8018c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8018ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ca4:	3501      	adds	r5, #1
 8018ca6:	e7c6      	b.n	8018c36 <_printf_common+0x3e>
 8018ca8:	18e1      	adds	r1, r4, r3
 8018caa:	1c5a      	adds	r2, r3, #1
 8018cac:	2030      	movs	r0, #48	@ 0x30
 8018cae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8018cb2:	4422      	add	r2, r4
 8018cb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018cbc:	3302      	adds	r3, #2
 8018cbe:	e7c7      	b.n	8018c50 <_printf_common+0x58>
 8018cc0:	2301      	movs	r3, #1
 8018cc2:	4622      	mov	r2, r4
 8018cc4:	4641      	mov	r1, r8
 8018cc6:	4638      	mov	r0, r7
 8018cc8:	47c8      	blx	r9
 8018cca:	3001      	adds	r0, #1
 8018ccc:	d0e6      	beq.n	8018c9c <_printf_common+0xa4>
 8018cce:	3601      	adds	r6, #1
 8018cd0:	e7d9      	b.n	8018c86 <_printf_common+0x8e>
	...

08018cd4 <_printf_i>:
 8018cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018cd8:	7e0f      	ldrb	r7, [r1, #24]
 8018cda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018cdc:	2f78      	cmp	r7, #120	@ 0x78
 8018cde:	4691      	mov	r9, r2
 8018ce0:	4680      	mov	r8, r0
 8018ce2:	460c      	mov	r4, r1
 8018ce4:	469a      	mov	sl, r3
 8018ce6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018cea:	d807      	bhi.n	8018cfc <_printf_i+0x28>
 8018cec:	2f62      	cmp	r7, #98	@ 0x62
 8018cee:	d80a      	bhi.n	8018d06 <_printf_i+0x32>
 8018cf0:	2f00      	cmp	r7, #0
 8018cf2:	f000 80d1 	beq.w	8018e98 <_printf_i+0x1c4>
 8018cf6:	2f58      	cmp	r7, #88	@ 0x58
 8018cf8:	f000 80b8 	beq.w	8018e6c <_printf_i+0x198>
 8018cfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018d04:	e03a      	b.n	8018d7c <_printf_i+0xa8>
 8018d06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018d0a:	2b15      	cmp	r3, #21
 8018d0c:	d8f6      	bhi.n	8018cfc <_printf_i+0x28>
 8018d0e:	a101      	add	r1, pc, #4	@ (adr r1, 8018d14 <_printf_i+0x40>)
 8018d10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018d14:	08018d6d 	.word	0x08018d6d
 8018d18:	08018d81 	.word	0x08018d81
 8018d1c:	08018cfd 	.word	0x08018cfd
 8018d20:	08018cfd 	.word	0x08018cfd
 8018d24:	08018cfd 	.word	0x08018cfd
 8018d28:	08018cfd 	.word	0x08018cfd
 8018d2c:	08018d81 	.word	0x08018d81
 8018d30:	08018cfd 	.word	0x08018cfd
 8018d34:	08018cfd 	.word	0x08018cfd
 8018d38:	08018cfd 	.word	0x08018cfd
 8018d3c:	08018cfd 	.word	0x08018cfd
 8018d40:	08018e7f 	.word	0x08018e7f
 8018d44:	08018dab 	.word	0x08018dab
 8018d48:	08018e39 	.word	0x08018e39
 8018d4c:	08018cfd 	.word	0x08018cfd
 8018d50:	08018cfd 	.word	0x08018cfd
 8018d54:	08018ea1 	.word	0x08018ea1
 8018d58:	08018cfd 	.word	0x08018cfd
 8018d5c:	08018dab 	.word	0x08018dab
 8018d60:	08018cfd 	.word	0x08018cfd
 8018d64:	08018cfd 	.word	0x08018cfd
 8018d68:	08018e41 	.word	0x08018e41
 8018d6c:	6833      	ldr	r3, [r6, #0]
 8018d6e:	1d1a      	adds	r2, r3, #4
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	6032      	str	r2, [r6, #0]
 8018d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018d78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018d7c:	2301      	movs	r3, #1
 8018d7e:	e09c      	b.n	8018eba <_printf_i+0x1e6>
 8018d80:	6833      	ldr	r3, [r6, #0]
 8018d82:	6820      	ldr	r0, [r4, #0]
 8018d84:	1d19      	adds	r1, r3, #4
 8018d86:	6031      	str	r1, [r6, #0]
 8018d88:	0606      	lsls	r6, r0, #24
 8018d8a:	d501      	bpl.n	8018d90 <_printf_i+0xbc>
 8018d8c:	681d      	ldr	r5, [r3, #0]
 8018d8e:	e003      	b.n	8018d98 <_printf_i+0xc4>
 8018d90:	0645      	lsls	r5, r0, #25
 8018d92:	d5fb      	bpl.n	8018d8c <_printf_i+0xb8>
 8018d94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018d98:	2d00      	cmp	r5, #0
 8018d9a:	da03      	bge.n	8018da4 <_printf_i+0xd0>
 8018d9c:	232d      	movs	r3, #45	@ 0x2d
 8018d9e:	426d      	negs	r5, r5
 8018da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018da4:	4858      	ldr	r0, [pc, #352]	@ (8018f08 <_printf_i+0x234>)
 8018da6:	230a      	movs	r3, #10
 8018da8:	e011      	b.n	8018dce <_printf_i+0xfa>
 8018daa:	6821      	ldr	r1, [r4, #0]
 8018dac:	6833      	ldr	r3, [r6, #0]
 8018dae:	0608      	lsls	r0, r1, #24
 8018db0:	f853 5b04 	ldr.w	r5, [r3], #4
 8018db4:	d402      	bmi.n	8018dbc <_printf_i+0xe8>
 8018db6:	0649      	lsls	r1, r1, #25
 8018db8:	bf48      	it	mi
 8018dba:	b2ad      	uxthmi	r5, r5
 8018dbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8018dbe:	4852      	ldr	r0, [pc, #328]	@ (8018f08 <_printf_i+0x234>)
 8018dc0:	6033      	str	r3, [r6, #0]
 8018dc2:	bf14      	ite	ne
 8018dc4:	230a      	movne	r3, #10
 8018dc6:	2308      	moveq	r3, #8
 8018dc8:	2100      	movs	r1, #0
 8018dca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018dce:	6866      	ldr	r6, [r4, #4]
 8018dd0:	60a6      	str	r6, [r4, #8]
 8018dd2:	2e00      	cmp	r6, #0
 8018dd4:	db05      	blt.n	8018de2 <_printf_i+0x10e>
 8018dd6:	6821      	ldr	r1, [r4, #0]
 8018dd8:	432e      	orrs	r6, r5
 8018dda:	f021 0104 	bic.w	r1, r1, #4
 8018dde:	6021      	str	r1, [r4, #0]
 8018de0:	d04b      	beq.n	8018e7a <_printf_i+0x1a6>
 8018de2:	4616      	mov	r6, r2
 8018de4:	fbb5 f1f3 	udiv	r1, r5, r3
 8018de8:	fb03 5711 	mls	r7, r3, r1, r5
 8018dec:	5dc7      	ldrb	r7, [r0, r7]
 8018dee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018df2:	462f      	mov	r7, r5
 8018df4:	42bb      	cmp	r3, r7
 8018df6:	460d      	mov	r5, r1
 8018df8:	d9f4      	bls.n	8018de4 <_printf_i+0x110>
 8018dfa:	2b08      	cmp	r3, #8
 8018dfc:	d10b      	bne.n	8018e16 <_printf_i+0x142>
 8018dfe:	6823      	ldr	r3, [r4, #0]
 8018e00:	07df      	lsls	r7, r3, #31
 8018e02:	d508      	bpl.n	8018e16 <_printf_i+0x142>
 8018e04:	6923      	ldr	r3, [r4, #16]
 8018e06:	6861      	ldr	r1, [r4, #4]
 8018e08:	4299      	cmp	r1, r3
 8018e0a:	bfde      	ittt	le
 8018e0c:	2330      	movle	r3, #48	@ 0x30
 8018e0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018e12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018e16:	1b92      	subs	r2, r2, r6
 8018e18:	6122      	str	r2, [r4, #16]
 8018e1a:	f8cd a000 	str.w	sl, [sp]
 8018e1e:	464b      	mov	r3, r9
 8018e20:	aa03      	add	r2, sp, #12
 8018e22:	4621      	mov	r1, r4
 8018e24:	4640      	mov	r0, r8
 8018e26:	f7ff fee7 	bl	8018bf8 <_printf_common>
 8018e2a:	3001      	adds	r0, #1
 8018e2c:	d14a      	bne.n	8018ec4 <_printf_i+0x1f0>
 8018e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8018e32:	b004      	add	sp, #16
 8018e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e38:	6823      	ldr	r3, [r4, #0]
 8018e3a:	f043 0320 	orr.w	r3, r3, #32
 8018e3e:	6023      	str	r3, [r4, #0]
 8018e40:	4832      	ldr	r0, [pc, #200]	@ (8018f0c <_printf_i+0x238>)
 8018e42:	2778      	movs	r7, #120	@ 0x78
 8018e44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018e48:	6823      	ldr	r3, [r4, #0]
 8018e4a:	6831      	ldr	r1, [r6, #0]
 8018e4c:	061f      	lsls	r7, r3, #24
 8018e4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8018e52:	d402      	bmi.n	8018e5a <_printf_i+0x186>
 8018e54:	065f      	lsls	r7, r3, #25
 8018e56:	bf48      	it	mi
 8018e58:	b2ad      	uxthmi	r5, r5
 8018e5a:	6031      	str	r1, [r6, #0]
 8018e5c:	07d9      	lsls	r1, r3, #31
 8018e5e:	bf44      	itt	mi
 8018e60:	f043 0320 	orrmi.w	r3, r3, #32
 8018e64:	6023      	strmi	r3, [r4, #0]
 8018e66:	b11d      	cbz	r5, 8018e70 <_printf_i+0x19c>
 8018e68:	2310      	movs	r3, #16
 8018e6a:	e7ad      	b.n	8018dc8 <_printf_i+0xf4>
 8018e6c:	4826      	ldr	r0, [pc, #152]	@ (8018f08 <_printf_i+0x234>)
 8018e6e:	e7e9      	b.n	8018e44 <_printf_i+0x170>
 8018e70:	6823      	ldr	r3, [r4, #0]
 8018e72:	f023 0320 	bic.w	r3, r3, #32
 8018e76:	6023      	str	r3, [r4, #0]
 8018e78:	e7f6      	b.n	8018e68 <_printf_i+0x194>
 8018e7a:	4616      	mov	r6, r2
 8018e7c:	e7bd      	b.n	8018dfa <_printf_i+0x126>
 8018e7e:	6833      	ldr	r3, [r6, #0]
 8018e80:	6825      	ldr	r5, [r4, #0]
 8018e82:	6961      	ldr	r1, [r4, #20]
 8018e84:	1d18      	adds	r0, r3, #4
 8018e86:	6030      	str	r0, [r6, #0]
 8018e88:	062e      	lsls	r6, r5, #24
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	d501      	bpl.n	8018e92 <_printf_i+0x1be>
 8018e8e:	6019      	str	r1, [r3, #0]
 8018e90:	e002      	b.n	8018e98 <_printf_i+0x1c4>
 8018e92:	0668      	lsls	r0, r5, #25
 8018e94:	d5fb      	bpl.n	8018e8e <_printf_i+0x1ba>
 8018e96:	8019      	strh	r1, [r3, #0]
 8018e98:	2300      	movs	r3, #0
 8018e9a:	6123      	str	r3, [r4, #16]
 8018e9c:	4616      	mov	r6, r2
 8018e9e:	e7bc      	b.n	8018e1a <_printf_i+0x146>
 8018ea0:	6833      	ldr	r3, [r6, #0]
 8018ea2:	1d1a      	adds	r2, r3, #4
 8018ea4:	6032      	str	r2, [r6, #0]
 8018ea6:	681e      	ldr	r6, [r3, #0]
 8018ea8:	6862      	ldr	r2, [r4, #4]
 8018eaa:	2100      	movs	r1, #0
 8018eac:	4630      	mov	r0, r6
 8018eae:	f7e7 fa1f 	bl	80002f0 <memchr>
 8018eb2:	b108      	cbz	r0, 8018eb8 <_printf_i+0x1e4>
 8018eb4:	1b80      	subs	r0, r0, r6
 8018eb6:	6060      	str	r0, [r4, #4]
 8018eb8:	6863      	ldr	r3, [r4, #4]
 8018eba:	6123      	str	r3, [r4, #16]
 8018ebc:	2300      	movs	r3, #0
 8018ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ec2:	e7aa      	b.n	8018e1a <_printf_i+0x146>
 8018ec4:	6923      	ldr	r3, [r4, #16]
 8018ec6:	4632      	mov	r2, r6
 8018ec8:	4649      	mov	r1, r9
 8018eca:	4640      	mov	r0, r8
 8018ecc:	47d0      	blx	sl
 8018ece:	3001      	adds	r0, #1
 8018ed0:	d0ad      	beq.n	8018e2e <_printf_i+0x15a>
 8018ed2:	6823      	ldr	r3, [r4, #0]
 8018ed4:	079b      	lsls	r3, r3, #30
 8018ed6:	d413      	bmi.n	8018f00 <_printf_i+0x22c>
 8018ed8:	68e0      	ldr	r0, [r4, #12]
 8018eda:	9b03      	ldr	r3, [sp, #12]
 8018edc:	4298      	cmp	r0, r3
 8018ede:	bfb8      	it	lt
 8018ee0:	4618      	movlt	r0, r3
 8018ee2:	e7a6      	b.n	8018e32 <_printf_i+0x15e>
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	4632      	mov	r2, r6
 8018ee8:	4649      	mov	r1, r9
 8018eea:	4640      	mov	r0, r8
 8018eec:	47d0      	blx	sl
 8018eee:	3001      	adds	r0, #1
 8018ef0:	d09d      	beq.n	8018e2e <_printf_i+0x15a>
 8018ef2:	3501      	adds	r5, #1
 8018ef4:	68e3      	ldr	r3, [r4, #12]
 8018ef6:	9903      	ldr	r1, [sp, #12]
 8018ef8:	1a5b      	subs	r3, r3, r1
 8018efa:	42ab      	cmp	r3, r5
 8018efc:	dcf2      	bgt.n	8018ee4 <_printf_i+0x210>
 8018efe:	e7eb      	b.n	8018ed8 <_printf_i+0x204>
 8018f00:	2500      	movs	r5, #0
 8018f02:	f104 0619 	add.w	r6, r4, #25
 8018f06:	e7f5      	b.n	8018ef4 <_printf_i+0x220>
 8018f08:	08019619 	.word	0x08019619
 8018f0c:	0801962a 	.word	0x0801962a

08018f10 <memmove>:
 8018f10:	4288      	cmp	r0, r1
 8018f12:	b510      	push	{r4, lr}
 8018f14:	eb01 0402 	add.w	r4, r1, r2
 8018f18:	d902      	bls.n	8018f20 <memmove+0x10>
 8018f1a:	4284      	cmp	r4, r0
 8018f1c:	4623      	mov	r3, r4
 8018f1e:	d807      	bhi.n	8018f30 <memmove+0x20>
 8018f20:	1e43      	subs	r3, r0, #1
 8018f22:	42a1      	cmp	r1, r4
 8018f24:	d008      	beq.n	8018f38 <memmove+0x28>
 8018f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f2e:	e7f8      	b.n	8018f22 <memmove+0x12>
 8018f30:	4402      	add	r2, r0
 8018f32:	4601      	mov	r1, r0
 8018f34:	428a      	cmp	r2, r1
 8018f36:	d100      	bne.n	8018f3a <memmove+0x2a>
 8018f38:	bd10      	pop	{r4, pc}
 8018f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f42:	e7f7      	b.n	8018f34 <memmove+0x24>

08018f44 <_realloc_r>:
 8018f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f48:	4607      	mov	r7, r0
 8018f4a:	4614      	mov	r4, r2
 8018f4c:	460d      	mov	r5, r1
 8018f4e:	b921      	cbnz	r1, 8018f5a <_realloc_r+0x16>
 8018f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f54:	4611      	mov	r1, r2
 8018f56:	f7ff bbad 	b.w	80186b4 <_malloc_r>
 8018f5a:	b92a      	cbnz	r2, 8018f68 <_realloc_r+0x24>
 8018f5c:	f7ff fcaa 	bl	80188b4 <_free_r>
 8018f60:	4625      	mov	r5, r4
 8018f62:	4628      	mov	r0, r5
 8018f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f68:	f000 f81a 	bl	8018fa0 <_malloc_usable_size_r>
 8018f6c:	4284      	cmp	r4, r0
 8018f6e:	4606      	mov	r6, r0
 8018f70:	d802      	bhi.n	8018f78 <_realloc_r+0x34>
 8018f72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018f76:	d8f4      	bhi.n	8018f62 <_realloc_r+0x1e>
 8018f78:	4621      	mov	r1, r4
 8018f7a:	4638      	mov	r0, r7
 8018f7c:	f7ff fb9a 	bl	80186b4 <_malloc_r>
 8018f80:	4680      	mov	r8, r0
 8018f82:	b908      	cbnz	r0, 8018f88 <_realloc_r+0x44>
 8018f84:	4645      	mov	r5, r8
 8018f86:	e7ec      	b.n	8018f62 <_realloc_r+0x1e>
 8018f88:	42b4      	cmp	r4, r6
 8018f8a:	4622      	mov	r2, r4
 8018f8c:	4629      	mov	r1, r5
 8018f8e:	bf28      	it	cs
 8018f90:	4632      	movcs	r2, r6
 8018f92:	f7ff fc81 	bl	8018898 <memcpy>
 8018f96:	4629      	mov	r1, r5
 8018f98:	4638      	mov	r0, r7
 8018f9a:	f7ff fc8b 	bl	80188b4 <_free_r>
 8018f9e:	e7f1      	b.n	8018f84 <_realloc_r+0x40>

08018fa0 <_malloc_usable_size_r>:
 8018fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fa4:	1f18      	subs	r0, r3, #4
 8018fa6:	2b00      	cmp	r3, #0
 8018fa8:	bfbc      	itt	lt
 8018faa:	580b      	ldrlt	r3, [r1, r0]
 8018fac:	18c0      	addlt	r0, r0, r3
 8018fae:	4770      	bx	lr

08018fb0 <_init>:
 8018fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fb2:	bf00      	nop
 8018fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fb6:	bc08      	pop	{r3}
 8018fb8:	469e      	mov	lr, r3
 8018fba:	4770      	bx	lr

08018fbc <_fini>:
 8018fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fbe:	bf00      	nop
 8018fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018fc2:	bc08      	pop	{r3}
 8018fc4:	469e      	mov	lr, r3
 8018fc6:	4770      	bx	lr
